
SAMBA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002978  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00002978  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020004  2**0
                  CONTENTS
  3 .bss          00000378  20000004  0000297c  00020004  2**2
                  ALLOC
  4 .stack        00000404  2000037c  00002cf4  00020004  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001eb7e  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000032b4  00000000  00000000  0003ec03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000628  00000000  00000000  00041eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000006d0  00000000  00000000  000424df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00006fdf  00000000  00000000  00042baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000da12  00000000  00000000  00049b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009f42e  00000000  00000000  000575a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000f98  00000000  00000000  000f69d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000063ba  00000000  00000000  000f7968  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20000780 	.word	0x20000780
       4:	00001ba5 	.word	0x00001ba5
       8:	00001ba1 	.word	0x00001ba1
       c:	00001ba1 	.word	0x00001ba1
	...
      2c:	00001ba1 	.word	0x00001ba1
	...
      38:	00001ba1 	.word	0x00001ba1
      3c:	00001ba1 	.word	0x00001ba1
      40:	00001ba1 	.word	0x00001ba1
      44:	00001ba1 	.word	0x00001ba1
      48:	00001ba1 	.word	0x00001ba1
      4c:	000001bd 	.word	0x000001bd
      50:	00001ba1 	.word	0x00001ba1
      54:	00001ba1 	.word	0x00001ba1
      58:	00001601 	.word	0x00001601
      5c:	00001ba1 	.word	0x00001ba1
      60:	00000755 	.word	0x00000755
      64:	00000765 	.word	0x00000765
      68:	00000775 	.word	0x00000775
      6c:	00000785 	.word	0x00000785
      70:	00000795 	.word	0x00000795
      74:	000007a5 	.word	0x000007a5
      78:	00001ba1 	.word	0x00001ba1
      7c:	00001ba1 	.word	0x00001ba1
      80:	00001ba1 	.word	0x00001ba1
      84:	00001ba1 	.word	0x00001ba1
      88:	00001ba1 	.word	0x00001ba1
      8c:	00001ba1 	.word	0x00001ba1
      90:	00001ba1 	.word	0x00001ba1
      94:	00001ba1 	.word	0x00001ba1
      98:	00001ba1 	.word	0x00001ba1
      9c:	00001ba1 	.word	0x00001ba1
      a0:	00001ba1 	.word	0x00001ba1
      a4:	00001ba1 	.word	0x00001ba1
      a8:	00001ba1 	.word	0x00001ba1
      ac:	00001ba1 	.word	0x00001ba1
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000004 	.word	0x20000004
      d4:	00000000 	.word	0x00000000
      d8:	00002978 	.word	0x00002978

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000008 	.word	0x20000008
     108:	00002978 	.word	0x00002978
     10c:	00002978 	.word	0x00002978
     110:	00000000 	.word	0x00000000

00000114 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     114:	4b0c      	ldr	r3, [pc, #48]	; (148 <cpu_irq_enter_critical+0x34>)
     116:	681b      	ldr	r3, [r3, #0]
     118:	2b00      	cmp	r3, #0
     11a:	d110      	bne.n	13e <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     11c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     120:	2b00      	cmp	r3, #0
     122:	d109      	bne.n	138 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     124:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     126:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     12a:	2200      	movs	r2, #0
     12c:	4b07      	ldr	r3, [pc, #28]	; (14c <cpu_irq_enter_critical+0x38>)
     12e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     130:	3201      	adds	r2, #1
     132:	4b07      	ldr	r3, [pc, #28]	; (150 <cpu_irq_enter_critical+0x3c>)
     134:	701a      	strb	r2, [r3, #0]
     136:	e002      	b.n	13e <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     138:	2200      	movs	r2, #0
     13a:	4b05      	ldr	r3, [pc, #20]	; (150 <cpu_irq_enter_critical+0x3c>)
     13c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     13e:	4a02      	ldr	r2, [pc, #8]	; (148 <cpu_irq_enter_critical+0x34>)
     140:	6813      	ldr	r3, [r2, #0]
     142:	3301      	adds	r3, #1
     144:	6013      	str	r3, [r2, #0]
}
     146:	4770      	bx	lr
     148:	20000020 	.word	0x20000020
     14c:	20000000 	.word	0x20000000
     150:	20000024 	.word	0x20000024

00000154 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     154:	4b08      	ldr	r3, [pc, #32]	; (178 <cpu_irq_leave_critical+0x24>)
     156:	681a      	ldr	r2, [r3, #0]
     158:	3a01      	subs	r2, #1
     15a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     15c:	681b      	ldr	r3, [r3, #0]
     15e:	2b00      	cmp	r3, #0
     160:	d109      	bne.n	176 <cpu_irq_leave_critical+0x22>
     162:	4b06      	ldr	r3, [pc, #24]	; (17c <cpu_irq_leave_critical+0x28>)
     164:	781b      	ldrb	r3, [r3, #0]
     166:	2b00      	cmp	r3, #0
     168:	d005      	beq.n	176 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     16a:	2201      	movs	r2, #1
     16c:	4b04      	ldr	r3, [pc, #16]	; (180 <cpu_irq_leave_critical+0x2c>)
     16e:	701a      	strb	r2, [r3, #0]
     170:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     174:	b662      	cpsie	i
	}
}
     176:	4770      	bx	lr
     178:	20000020 	.word	0x20000020
     17c:	20000024 	.word	0x20000024
     180:	20000000 	.word	0x20000000

00000184 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     184:	b5f0      	push	{r4, r5, r6, r7, lr}
     186:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     188:	ac01      	add	r4, sp, #4
     18a:	2501      	movs	r5, #1
     18c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     18e:	2700      	movs	r7, #0
     190:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     192:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     194:	0021      	movs	r1, r4
     196:	202a      	movs	r0, #42	; 0x2a
     198:	4e06      	ldr	r6, [pc, #24]	; (1b4 <system_board_init+0x30>)
     19a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     19c:	2280      	movs	r2, #128	; 0x80
     19e:	00d2      	lsls	r2, r2, #3
     1a0:	4b05      	ldr	r3, [pc, #20]	; (1b8 <system_board_init+0x34>)
     1a2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1a4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1a6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1a8:	0021      	movs	r1, r4
     1aa:	2002      	movs	r0, #2
     1ac:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     1ae:	b003      	add	sp, #12
     1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	000002c9 	.word	0x000002c9
     1b8:	40002880 	.word	0x40002880

000001bc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     1bc:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     1be:	2200      	movs	r2, #0
     1c0:	4b15      	ldr	r3, [pc, #84]	; (218 <EIC_Handler+0x5c>)
     1c2:	701a      	strb	r2, [r3, #0]
     1c4:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     1c6:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     1c8:	4e14      	ldr	r6, [pc, #80]	; (21c <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     1ca:	4c13      	ldr	r4, [pc, #76]	; (218 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     1cc:	2b1f      	cmp	r3, #31
     1ce:	d919      	bls.n	204 <EIC_Handler+0x48>
     1d0:	e00f      	b.n	1f2 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     1d2:	2100      	movs	r1, #0
     1d4:	e000      	b.n	1d8 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     1d6:	4912      	ldr	r1, [pc, #72]	; (220 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     1d8:	614a      	str	r2, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     1da:	009b      	lsls	r3, r3, #2
     1dc:	599b      	ldr	r3, [r3, r6]
     1de:	2b00      	cmp	r3, #0
     1e0:	d000      	beq.n	1e4 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     1e2:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     1e4:	7823      	ldrb	r3, [r4, #0]
     1e6:	3301      	adds	r3, #1
     1e8:	b2db      	uxtb	r3, r3
     1ea:	7023      	strb	r3, [r4, #0]
     1ec:	2b0f      	cmp	r3, #15
     1ee:	d9ed      	bls.n	1cc <EIC_Handler+0x10>
     1f0:	e011      	b.n	216 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     1f2:	0029      	movs	r1, r5
     1f4:	4019      	ands	r1, r3
     1f6:	2201      	movs	r2, #1
     1f8:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     1fa:	2100      	movs	r1, #0
     1fc:	6949      	ldr	r1, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     1fe:	4211      	tst	r1, r2
     200:	d1e7      	bne.n	1d2 <EIC_Handler+0x16>
     202:	e7ef      	b.n	1e4 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     204:	0029      	movs	r1, r5
     206:	4019      	ands	r1, r3
     208:	2201      	movs	r2, #1
     20a:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     20c:	4904      	ldr	r1, [pc, #16]	; (220 <EIC_Handler+0x64>)
     20e:	6949      	ldr	r1, [r1, #20]
     210:	4211      	tst	r1, r2
     212:	d1e0      	bne.n	1d6 <EIC_Handler+0x1a>
     214:	e7e6      	b.n	1e4 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     216:	bd70      	pop	{r4, r5, r6, pc}
     218:	20000079 	.word	0x20000079
     21c:	2000007c 	.word	0x2000007c
     220:	40002400 	.word	0x40002400

00000224 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     224:	4a06      	ldr	r2, [pc, #24]	; (240 <_extint_enable+0x1c>)
     226:	7811      	ldrb	r1, [r2, #0]
     228:	2302      	movs	r3, #2
     22a:	430b      	orrs	r3, r1
     22c:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     22e:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     230:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     232:	6853      	ldr	r3, [r2, #4]
     234:	4219      	tst	r1, r3
     236:	d1fc      	bne.n	232 <_extint_enable+0xe>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     238:	6853      	ldr	r3, [r2, #4]
     23a:	4218      	tst	r0, r3
     23c:	d1f9      	bne.n	232 <_extint_enable+0xe>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     23e:	4770      	bx	lr
     240:	40002400 	.word	0x40002400

00000244 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     244:	b500      	push	{lr}
     246:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     248:	4a18      	ldr	r2, [pc, #96]	; (2ac <_system_extint_init+0x68>)
     24a:	6953      	ldr	r3, [r2, #20]
     24c:	2180      	movs	r1, #128	; 0x80
     24e:	0089      	lsls	r1, r1, #2
     250:	430b      	orrs	r3, r1
     252:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     254:	a901      	add	r1, sp, #4
     256:	2300      	movs	r3, #0
     258:	700b      	strb	r3, [r1, #0]
#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     25a:	2003      	movs	r0, #3
     25c:	4b14      	ldr	r3, [pc, #80]	; (2b0 <_system_extint_init+0x6c>)
     25e:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     260:	2003      	movs	r0, #3
     262:	4b14      	ldr	r3, [pc, #80]	; (2b4 <_system_extint_init+0x70>)
     264:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     266:	4a14      	ldr	r2, [pc, #80]	; (2b8 <_system_extint_init+0x74>)
     268:	7811      	ldrb	r1, [r2, #0]
     26a:	2301      	movs	r3, #1
     26c:	430b      	orrs	r3, r1
     26e:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     270:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     272:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     274:	6853      	ldr	r3, [r2, #4]
     276:	4219      	tst	r1, r3
     278:	d1fc      	bne.n	274 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     27a:	6853      	ldr	r3, [r2, #4]
     27c:	4218      	tst	r0, r3
     27e:	d009      	beq.n	294 <_system_extint_init+0x50>
     280:	e7f8      	b.n	274 <_system_extint_init+0x30>

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     282:	c304      	stmia	r3!, {r2}
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     284:	428b      	cmp	r3, r1
     286:	d1fc      	bne.n	282 <_system_extint_init+0x3e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     288:	2208      	movs	r2, #8
     28a:	4b0c      	ldr	r3, [pc, #48]	; (2bc <_system_extint_init+0x78>)
     28c:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     28e:	4b0c      	ldr	r3, [pc, #48]	; (2c0 <_system_extint_init+0x7c>)
     290:	4798      	blx	r3
}
     292:	e009      	b.n	2a8 <_system_extint_init+0x64>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     294:	4a08      	ldr	r2, [pc, #32]	; (2b8 <_system_extint_init+0x74>)
     296:	7813      	ldrb	r3, [r2, #0]
     298:	2110      	movs	r1, #16
     29a:	438b      	bics	r3, r1
     29c:	7013      	strb	r3, [r2, #0]
     29e:	4b09      	ldr	r3, [pc, #36]	; (2c4 <_system_extint_init+0x80>)
     2a0:	0019      	movs	r1, r3
     2a2:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     2a4:	2200      	movs	r2, #0
     2a6:	e7ec      	b.n	282 <_system_extint_init+0x3e>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
     2a8:	b003      	add	sp, #12
     2aa:	bd00      	pop	{pc}
     2ac:	40000400 	.word	0x40000400
     2b0:	000014a5 	.word	0x000014a5
     2b4:	00001435 	.word	0x00001435
     2b8:	40002400 	.word	0x40002400
     2bc:	e000e100 	.word	0xe000e100
     2c0:	00000225 	.word	0x00000225
     2c4:	2000007c 	.word	0x2000007c

000002c8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     2c8:	b500      	push	{lr}
     2ca:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     2cc:	ab01      	add	r3, sp, #4
     2ce:	2280      	movs	r2, #128	; 0x80
     2d0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     2d2:	780a      	ldrb	r2, [r1, #0]
     2d4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     2d6:	784a      	ldrb	r2, [r1, #1]
     2d8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     2da:	788a      	ldrb	r2, [r1, #2]
     2dc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     2de:	0019      	movs	r1, r3
     2e0:	4b01      	ldr	r3, [pc, #4]	; (2e8 <port_pin_set_config+0x20>)
     2e2:	4798      	blx	r3
}
     2e4:	b003      	add	sp, #12
     2e6:	bd00      	pop	{pc}
     2e8:	000015a1 	.word	0x000015a1

000002ec <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     2ec:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     2ee:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2f0:	2340      	movs	r3, #64	; 0x40
     2f2:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     2f4:	4281      	cmp	r1, r0
     2f6:	d201      	bcs.n	2fc <_sercom_get_sync_baud_val+0x10>
     2f8:	e00a      	b.n	310 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     2fa:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     2fc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     2fe:	1c63      	adds	r3, r4, #1
     300:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     302:	4288      	cmp	r0, r1
     304:	d9f9      	bls.n	2fa <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     306:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     308:	2cff      	cmp	r4, #255	; 0xff
     30a:	d801      	bhi.n	310 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     30c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     30e:	2300      	movs	r3, #0
	}
}
     310:	0018      	movs	r0, r3
     312:	bd10      	pop	{r4, pc}

00000314 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     314:	b5f0      	push	{r4, r5, r6, r7, lr}
     316:	465f      	mov	r7, fp
     318:	4656      	mov	r6, sl
     31a:	464d      	mov	r5, r9
     31c:	4644      	mov	r4, r8
     31e:	b4f0      	push	{r4, r5, r6, r7}
     320:	b089      	sub	sp, #36	; 0x24
     322:	000c      	movs	r4, r1
     324:	9205      	str	r2, [sp, #20]
     326:	aa12      	add	r2, sp, #72	; 0x48
     328:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     32a:	0002      	movs	r2, r0
     32c:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     32e:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     330:	42a2      	cmp	r2, r4
     332:	d900      	bls.n	336 <_sercom_get_async_baud_val+0x22>
     334:	e0c6      	b.n	4c4 <STACK_SIZE+0xc4>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     336:	2b00      	cmp	r3, #0
     338:	d151      	bne.n	3de <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     33a:	0002      	movs	r2, r0
     33c:	0008      	movs	r0, r1
     33e:	2100      	movs	r1, #0
     340:	4d64      	ldr	r5, [pc, #400]	; (4d4 <STACK_SIZE+0xd4>)
     342:	47a8      	blx	r5
     344:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     346:	0026      	movs	r6, r4
     348:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     34a:	2300      	movs	r3, #0
     34c:	2400      	movs	r4, #0
     34e:	9300      	str	r3, [sp, #0]
     350:	9401      	str	r4, [sp, #4]
     352:	2200      	movs	r2, #0
     354:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     356:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     358:	2120      	movs	r1, #32
     35a:	468c      	mov	ip, r1
     35c:	391f      	subs	r1, #31
     35e:	9602      	str	r6, [sp, #8]
     360:	9703      	str	r7, [sp, #12]
     362:	2420      	movs	r4, #32
     364:	4264      	negs	r4, r4
     366:	1904      	adds	r4, r0, r4
     368:	d403      	bmi.n	372 <_sercom_get_async_baud_val+0x5e>
     36a:	000d      	movs	r5, r1
     36c:	40a5      	lsls	r5, r4
     36e:	46a8      	mov	r8, r5
     370:	e004      	b.n	37c <_sercom_get_async_baud_val+0x68>
     372:	4664      	mov	r4, ip
     374:	1a24      	subs	r4, r4, r0
     376:	000d      	movs	r5, r1
     378:	40e5      	lsrs	r5, r4
     37a:	46a8      	mov	r8, r5
     37c:	000c      	movs	r4, r1
     37e:	4084      	lsls	r4, r0
     380:	46a1      	mov	r9, r4

		r = r << 1;
     382:	0014      	movs	r4, r2
     384:	001d      	movs	r5, r3
     386:	18a4      	adds	r4, r4, r2
     388:	415d      	adcs	r5, r3
     38a:	0022      	movs	r2, r4
     38c:	002b      	movs	r3, r5

		if (n & bit_shift) {
     38e:	4646      	mov	r6, r8
     390:	465f      	mov	r7, fp
     392:	423e      	tst	r6, r7
     394:	d003      	beq.n	39e <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
     396:	000e      	movs	r6, r1
     398:	4326      	orrs	r6, r4
     39a:	0032      	movs	r2, r6
     39c:	002b      	movs	r3, r5
		}

		if (r >= d) {
     39e:	9c02      	ldr	r4, [sp, #8]
     3a0:	9d03      	ldr	r5, [sp, #12]
     3a2:	429d      	cmp	r5, r3
     3a4:	d80f      	bhi.n	3c6 <_sercom_get_async_baud_val+0xb2>
     3a6:	d101      	bne.n	3ac <_sercom_get_async_baud_val+0x98>
     3a8:	4294      	cmp	r4, r2
     3aa:	d80c      	bhi.n	3c6 <_sercom_get_async_baud_val+0xb2>
			r = r - d;
     3ac:	9c02      	ldr	r4, [sp, #8]
     3ae:	9d03      	ldr	r5, [sp, #12]
     3b0:	1b12      	subs	r2, r2, r4
     3b2:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     3b4:	464d      	mov	r5, r9
     3b6:	9e00      	ldr	r6, [sp, #0]
     3b8:	9f01      	ldr	r7, [sp, #4]
     3ba:	4335      	orrs	r5, r6
     3bc:	003c      	movs	r4, r7
     3be:	4646      	mov	r6, r8
     3c0:	4334      	orrs	r4, r6
     3c2:	9500      	str	r5, [sp, #0]
     3c4:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     3c6:	3801      	subs	r0, #1
     3c8:	d2cb      	bcs.n	362 <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
     3ca:	2200      	movs	r2, #0
     3cc:	2301      	movs	r3, #1
     3ce:	9800      	ldr	r0, [sp, #0]
     3d0:	9901      	ldr	r1, [sp, #4]
     3d2:	1a12      	subs	r2, r2, r0
     3d4:	418b      	sbcs	r3, r1
     3d6:	0c12      	lsrs	r2, r2, #16
     3d8:	041b      	lsls	r3, r3, #16
     3da:	431a      	orrs	r2, r3
     3dc:	e06f      	b.n	4be <STACK_SIZE+0xbe>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     3de:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     3e0:	2b01      	cmp	r3, #1
     3e2:	d16c      	bne.n	4be <STACK_SIZE+0xbe>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     3e4:	0f63      	lsrs	r3, r4, #29
     3e6:	9304      	str	r3, [sp, #16]
     3e8:	00e3      	lsls	r3, r4, #3
     3ea:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     3ec:	000a      	movs	r2, r1
     3ee:	2300      	movs	r3, #0
     3f0:	2100      	movs	r1, #0
     3f2:	4c38      	ldr	r4, [pc, #224]	; (4d4 <STACK_SIZE+0xd4>)
     3f4:	47a0      	blx	r4
     3f6:	0004      	movs	r4, r0
     3f8:	000d      	movs	r5, r1
     3fa:	2300      	movs	r3, #0
     3fc:	469c      	mov	ip, r3
     3fe:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     400:	3320      	adds	r3, #32
     402:	469b      	mov	fp, r3
     404:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     406:	4663      	mov	r3, ip
     408:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     40a:	2300      	movs	r3, #0
     40c:	9302      	str	r3, [sp, #8]
     40e:	2200      	movs	r2, #0
     410:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     412:	213f      	movs	r1, #63	; 0x3f
     414:	9400      	str	r4, [sp, #0]
     416:	9501      	str	r5, [sp, #4]
     418:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
     41a:	2120      	movs	r1, #32
     41c:	4249      	negs	r1, r1
     41e:	1879      	adds	r1, r7, r1
     420:	d403      	bmi.n	42a <STACK_SIZE+0x2a>
     422:	0030      	movs	r0, r6
     424:	4088      	lsls	r0, r1
     426:	4684      	mov	ip, r0
     428:	e004      	b.n	434 <STACK_SIZE+0x34>
     42a:	4659      	mov	r1, fp
     42c:	1bc9      	subs	r1, r1, r7
     42e:	0030      	movs	r0, r6
     430:	40c8      	lsrs	r0, r1
     432:	4684      	mov	ip, r0
     434:	0031      	movs	r1, r6
     436:	40b9      	lsls	r1, r7
     438:	4689      	mov	r9, r1

		r = r << 1;
     43a:	0010      	movs	r0, r2
     43c:	0019      	movs	r1, r3
     43e:	1880      	adds	r0, r0, r2
     440:	4159      	adcs	r1, r3
     442:	0002      	movs	r2, r0
     444:	000b      	movs	r3, r1

		if (n & bit_shift) {
     446:	4644      	mov	r4, r8
     448:	464d      	mov	r5, r9
     44a:	402c      	ands	r4, r5
     44c:	46a2      	mov	sl, r4
     44e:	4664      	mov	r4, ip
     450:	9d04      	ldr	r5, [sp, #16]
     452:	402c      	ands	r4, r5
     454:	46a4      	mov	ip, r4
     456:	4654      	mov	r4, sl
     458:	4665      	mov	r5, ip
     45a:	432c      	orrs	r4, r5
     45c:	d003      	beq.n	466 <STACK_SIZE+0x66>
			r |= 0x01;
     45e:	0034      	movs	r4, r6
     460:	4304      	orrs	r4, r0
     462:	0022      	movs	r2, r4
     464:	000b      	movs	r3, r1
		}

		if (r >= d) {
     466:	9800      	ldr	r0, [sp, #0]
     468:	9901      	ldr	r1, [sp, #4]
     46a:	4299      	cmp	r1, r3
     46c:	d80a      	bhi.n	484 <STACK_SIZE+0x84>
     46e:	d101      	bne.n	474 <STACK_SIZE+0x74>
     470:	4290      	cmp	r0, r2
     472:	d807      	bhi.n	484 <STACK_SIZE+0x84>
			r = r - d;
     474:	9800      	ldr	r0, [sp, #0]
     476:	9901      	ldr	r1, [sp, #4]
     478:	1a12      	subs	r2, r2, r0
     47a:	418b      	sbcs	r3, r1
			q |= bit_shift;
     47c:	9902      	ldr	r1, [sp, #8]
     47e:	4648      	mov	r0, r9
     480:	4301      	orrs	r1, r0
     482:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     484:	3f01      	subs	r7, #1
     486:	d2c8      	bcs.n	41a <STACK_SIZE+0x1a>
     488:	9c00      	ldr	r4, [sp, #0]
     48a:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     48c:	9902      	ldr	r1, [sp, #8]
     48e:	9a07      	ldr	r2, [sp, #28]
     490:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     492:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     494:	4910      	ldr	r1, [pc, #64]	; (4d8 <STACK_SIZE+0xd8>)
     496:	428b      	cmp	r3, r1
     498:	d90b      	bls.n	4b2 <STACK_SIZE+0xb2>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     49a:	9b06      	ldr	r3, [sp, #24]
     49c:	3301      	adds	r3, #1
     49e:	b2db      	uxtb	r3, r3
     4a0:	0019      	movs	r1, r3
     4a2:	9306      	str	r3, [sp, #24]
     4a4:	0013      	movs	r3, r2
     4a6:	3301      	adds	r3, #1
     4a8:	9307      	str	r3, [sp, #28]
     4aa:	2908      	cmp	r1, #8
     4ac:	d1ad      	bne.n	40a <STACK_SIZE+0xa>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4ae:	2540      	movs	r5, #64	; 0x40
     4b0:	e008      	b.n	4c4 <STACK_SIZE+0xc4>
     4b2:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     4b4:	9a06      	ldr	r2, [sp, #24]
     4b6:	2a08      	cmp	r2, #8
     4b8:	d004      	beq.n	4c4 <STACK_SIZE+0xc4>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     4ba:	0352      	lsls	r2, r2, #13
     4bc:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     4be:	9b05      	ldr	r3, [sp, #20]
     4c0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     4c2:	2500      	movs	r5, #0
}
     4c4:	0028      	movs	r0, r5
     4c6:	b009      	add	sp, #36	; 0x24
     4c8:	bc3c      	pop	{r2, r3, r4, r5}
     4ca:	4690      	mov	r8, r2
     4cc:	4699      	mov	r9, r3
     4ce:	46a2      	mov	sl, r4
     4d0:	46ab      	mov	fp, r5
     4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4d4:	000027b9 	.word	0x000027b9
     4d8:	00001fff 	.word	0x00001fff

000004dc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     4dc:	b510      	push	{r4, lr}
     4de:	b082      	sub	sp, #8
     4e0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     4e2:	4b0e      	ldr	r3, [pc, #56]	; (51c <sercom_set_gclk_generator+0x40>)
     4e4:	781b      	ldrb	r3, [r3, #0]
     4e6:	2b00      	cmp	r3, #0
     4e8:	d001      	beq.n	4ee <sercom_set_gclk_generator+0x12>
     4ea:	2900      	cmp	r1, #0
     4ec:	d00d      	beq.n	50a <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     4ee:	a901      	add	r1, sp, #4
     4f0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     4f2:	2011      	movs	r0, #17
     4f4:	4b0a      	ldr	r3, [pc, #40]	; (520 <sercom_set_gclk_generator+0x44>)
     4f6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     4f8:	2011      	movs	r0, #17
     4fa:	4b0a      	ldr	r3, [pc, #40]	; (524 <sercom_set_gclk_generator+0x48>)
     4fc:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     4fe:	4b07      	ldr	r3, [pc, #28]	; (51c <sercom_set_gclk_generator+0x40>)
     500:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     502:	2201      	movs	r2, #1
     504:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     506:	2000      	movs	r0, #0
     508:	e006      	b.n	518 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     50a:	4b04      	ldr	r3, [pc, #16]	; (51c <sercom_set_gclk_generator+0x40>)
     50c:	785b      	ldrb	r3, [r3, #1]
     50e:	4283      	cmp	r3, r0
     510:	d001      	beq.n	516 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     512:	201d      	movs	r0, #29
     514:	e000      	b.n	518 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     516:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     518:	b002      	add	sp, #8
     51a:	bd10      	pop	{r4, pc}
     51c:	20000028 	.word	0x20000028
     520:	000014a5 	.word	0x000014a5
     524:	00001435 	.word	0x00001435

00000528 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     528:	4b44      	ldr	r3, [pc, #272]	; (63c <_sercom_get_default_pad+0x114>)
     52a:	4298      	cmp	r0, r3
     52c:	d034      	beq.n	598 <_sercom_get_default_pad+0x70>
     52e:	d807      	bhi.n	540 <_sercom_get_default_pad+0x18>
     530:	2384      	movs	r3, #132	; 0x84
     532:	05db      	lsls	r3, r3, #23
     534:	4298      	cmp	r0, r3
     536:	d00d      	beq.n	554 <_sercom_get_default_pad+0x2c>
     538:	4b41      	ldr	r3, [pc, #260]	; (640 <_sercom_get_default_pad+0x118>)
     53a:	4298      	cmp	r0, r3
     53c:	d01b      	beq.n	576 <_sercom_get_default_pad+0x4e>
     53e:	e06f      	b.n	620 <_sercom_get_default_pad+0xf8>
     540:	4b40      	ldr	r3, [pc, #256]	; (644 <_sercom_get_default_pad+0x11c>)
     542:	4298      	cmp	r0, r3
     544:	d04a      	beq.n	5dc <_sercom_get_default_pad+0xb4>
     546:	4b40      	ldr	r3, [pc, #256]	; (648 <_sercom_get_default_pad+0x120>)
     548:	4298      	cmp	r0, r3
     54a:	d058      	beq.n	5fe <_sercom_get_default_pad+0xd6>
     54c:	4b3f      	ldr	r3, [pc, #252]	; (64c <_sercom_get_default_pad+0x124>)
     54e:	4298      	cmp	r0, r3
     550:	d166      	bne.n	620 <_sercom_get_default_pad+0xf8>
     552:	e032      	b.n	5ba <_sercom_get_default_pad+0x92>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     554:	2901      	cmp	r1, #1
     556:	d006      	beq.n	566 <_sercom_get_default_pad+0x3e>
     558:	2900      	cmp	r1, #0
     55a:	d063      	beq.n	624 <_sercom_get_default_pad+0xfc>
     55c:	2902      	cmp	r1, #2
     55e:	d006      	beq.n	56e <_sercom_get_default_pad+0x46>
     560:	2903      	cmp	r1, #3
     562:	d006      	beq.n	572 <_sercom_get_default_pad+0x4a>
     564:	e001      	b.n	56a <_sercom_get_default_pad+0x42>
     566:	483a      	ldr	r0, [pc, #232]	; (650 <_sercom_get_default_pad+0x128>)
     568:	e067      	b.n	63a <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     56a:	2000      	movs	r0, #0
     56c:	e065      	b.n	63a <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     56e:	4839      	ldr	r0, [pc, #228]	; (654 <_sercom_get_default_pad+0x12c>)
     570:	e063      	b.n	63a <_sercom_get_default_pad+0x112>
     572:	4839      	ldr	r0, [pc, #228]	; (658 <_sercom_get_default_pad+0x130>)
     574:	e061      	b.n	63a <_sercom_get_default_pad+0x112>
     576:	2901      	cmp	r1, #1
     578:	d006      	beq.n	588 <_sercom_get_default_pad+0x60>
     57a:	2900      	cmp	r1, #0
     57c:	d054      	beq.n	628 <_sercom_get_default_pad+0x100>
     57e:	2902      	cmp	r1, #2
     580:	d006      	beq.n	590 <_sercom_get_default_pad+0x68>
     582:	2903      	cmp	r1, #3
     584:	d006      	beq.n	594 <_sercom_get_default_pad+0x6c>
     586:	e001      	b.n	58c <_sercom_get_default_pad+0x64>
     588:	4834      	ldr	r0, [pc, #208]	; (65c <_sercom_get_default_pad+0x134>)
     58a:	e056      	b.n	63a <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     58c:	2000      	movs	r0, #0
     58e:	e054      	b.n	63a <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     590:	4833      	ldr	r0, [pc, #204]	; (660 <_sercom_get_default_pad+0x138>)
     592:	e052      	b.n	63a <_sercom_get_default_pad+0x112>
     594:	4833      	ldr	r0, [pc, #204]	; (664 <_sercom_get_default_pad+0x13c>)
     596:	e050      	b.n	63a <_sercom_get_default_pad+0x112>
     598:	2901      	cmp	r1, #1
     59a:	d006      	beq.n	5aa <_sercom_get_default_pad+0x82>
     59c:	2900      	cmp	r1, #0
     59e:	d045      	beq.n	62c <_sercom_get_default_pad+0x104>
     5a0:	2902      	cmp	r1, #2
     5a2:	d006      	beq.n	5b2 <_sercom_get_default_pad+0x8a>
     5a4:	2903      	cmp	r1, #3
     5a6:	d006      	beq.n	5b6 <_sercom_get_default_pad+0x8e>
     5a8:	e001      	b.n	5ae <_sercom_get_default_pad+0x86>
     5aa:	482f      	ldr	r0, [pc, #188]	; (668 <_sercom_get_default_pad+0x140>)
     5ac:	e045      	b.n	63a <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     5ae:	2000      	movs	r0, #0
     5b0:	e043      	b.n	63a <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5b2:	482e      	ldr	r0, [pc, #184]	; (66c <_sercom_get_default_pad+0x144>)
     5b4:	e041      	b.n	63a <_sercom_get_default_pad+0x112>
     5b6:	482e      	ldr	r0, [pc, #184]	; (670 <_sercom_get_default_pad+0x148>)
     5b8:	e03f      	b.n	63a <_sercom_get_default_pad+0x112>
     5ba:	2901      	cmp	r1, #1
     5bc:	d006      	beq.n	5cc <_sercom_get_default_pad+0xa4>
     5be:	2900      	cmp	r1, #0
     5c0:	d036      	beq.n	630 <_sercom_get_default_pad+0x108>
     5c2:	2902      	cmp	r1, #2
     5c4:	d006      	beq.n	5d4 <_sercom_get_default_pad+0xac>
     5c6:	2903      	cmp	r1, #3
     5c8:	d006      	beq.n	5d8 <_sercom_get_default_pad+0xb0>
     5ca:	e001      	b.n	5d0 <_sercom_get_default_pad+0xa8>
     5cc:	4829      	ldr	r0, [pc, #164]	; (674 <_sercom_get_default_pad+0x14c>)
     5ce:	e034      	b.n	63a <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     5d0:	2000      	movs	r0, #0
     5d2:	e032      	b.n	63a <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5d4:	4828      	ldr	r0, [pc, #160]	; (678 <_sercom_get_default_pad+0x150>)
     5d6:	e030      	b.n	63a <_sercom_get_default_pad+0x112>
     5d8:	4828      	ldr	r0, [pc, #160]	; (67c <_sercom_get_default_pad+0x154>)
     5da:	e02e      	b.n	63a <_sercom_get_default_pad+0x112>
     5dc:	2901      	cmp	r1, #1
     5de:	d006      	beq.n	5ee <_sercom_get_default_pad+0xc6>
     5e0:	2900      	cmp	r1, #0
     5e2:	d027      	beq.n	634 <_sercom_get_default_pad+0x10c>
     5e4:	2902      	cmp	r1, #2
     5e6:	d006      	beq.n	5f6 <_sercom_get_default_pad+0xce>
     5e8:	2903      	cmp	r1, #3
     5ea:	d006      	beq.n	5fa <_sercom_get_default_pad+0xd2>
     5ec:	e001      	b.n	5f2 <_sercom_get_default_pad+0xca>
     5ee:	4824      	ldr	r0, [pc, #144]	; (680 <_sercom_get_default_pad+0x158>)
     5f0:	e023      	b.n	63a <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     5f2:	2000      	movs	r0, #0
     5f4:	e021      	b.n	63a <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5f6:	4823      	ldr	r0, [pc, #140]	; (684 <_sercom_get_default_pad+0x15c>)
     5f8:	e01f      	b.n	63a <_sercom_get_default_pad+0x112>
     5fa:	4823      	ldr	r0, [pc, #140]	; (688 <_sercom_get_default_pad+0x160>)
     5fc:	e01d      	b.n	63a <_sercom_get_default_pad+0x112>
     5fe:	2901      	cmp	r1, #1
     600:	d006      	beq.n	610 <_sercom_get_default_pad+0xe8>
     602:	2900      	cmp	r1, #0
     604:	d018      	beq.n	638 <_sercom_get_default_pad+0x110>
     606:	2902      	cmp	r1, #2
     608:	d006      	beq.n	618 <_sercom_get_default_pad+0xf0>
     60a:	2903      	cmp	r1, #3
     60c:	d006      	beq.n	61c <_sercom_get_default_pad+0xf4>
     60e:	e001      	b.n	614 <_sercom_get_default_pad+0xec>
     610:	481e      	ldr	r0, [pc, #120]	; (68c <_sercom_get_default_pad+0x164>)
     612:	e012      	b.n	63a <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     614:	2000      	movs	r0, #0
     616:	e010      	b.n	63a <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     618:	481d      	ldr	r0, [pc, #116]	; (690 <_sercom_get_default_pad+0x168>)
     61a:	e00e      	b.n	63a <_sercom_get_default_pad+0x112>
     61c:	481d      	ldr	r0, [pc, #116]	; (694 <_sercom_get_default_pad+0x16c>)
     61e:	e00c      	b.n	63a <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     620:	2000      	movs	r0, #0
     622:	e00a      	b.n	63a <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     624:	481c      	ldr	r0, [pc, #112]	; (698 <_sercom_get_default_pad+0x170>)
     626:	e008      	b.n	63a <_sercom_get_default_pad+0x112>
     628:	2003      	movs	r0, #3
     62a:	e006      	b.n	63a <_sercom_get_default_pad+0x112>
     62c:	481b      	ldr	r0, [pc, #108]	; (69c <_sercom_get_default_pad+0x174>)
     62e:	e004      	b.n	63a <_sercom_get_default_pad+0x112>
     630:	481b      	ldr	r0, [pc, #108]	; (6a0 <_sercom_get_default_pad+0x178>)
     632:	e002      	b.n	63a <_sercom_get_default_pad+0x112>
     634:	481b      	ldr	r0, [pc, #108]	; (6a4 <_sercom_get_default_pad+0x17c>)
     636:	e000      	b.n	63a <_sercom_get_default_pad+0x112>
     638:	481b      	ldr	r0, [pc, #108]	; (6a8 <_sercom_get_default_pad+0x180>)
	}

	Assert(false);
	return 0;
}
     63a:	4770      	bx	lr
     63c:	42000800 	.word	0x42000800
     640:	42000400 	.word	0x42000400
     644:	42001000 	.word	0x42001000
     648:	43000400 	.word	0x43000400
     64c:	42000c00 	.word	0x42000c00
     650:	00050003 	.word	0x00050003
     654:	00060003 	.word	0x00060003
     658:	00070003 	.word	0x00070003
     65c:	00010003 	.word	0x00010003
     660:	001e0003 	.word	0x001e0003
     664:	001f0003 	.word	0x001f0003
     668:	00090003 	.word	0x00090003
     66c:	000a0003 	.word	0x000a0003
     670:	000b0003 	.word	0x000b0003
     674:	00110003 	.word	0x00110003
     678:	00120003 	.word	0x00120003
     67c:	00130003 	.word	0x00130003
     680:	000d0003 	.word	0x000d0003
     684:	000e0003 	.word	0x000e0003
     688:	000f0003 	.word	0x000f0003
     68c:	00170003 	.word	0x00170003
     690:	00180003 	.word	0x00180003
     694:	00190003 	.word	0x00190003
     698:	00040003 	.word	0x00040003
     69c:	00080003 	.word	0x00080003
     6a0:	00100003 	.word	0x00100003
     6a4:	000c0003 	.word	0x000c0003
     6a8:	00160003 	.word	0x00160003

000006ac <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     6ac:	b530      	push	{r4, r5, lr}
     6ae:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     6b0:	4b0c      	ldr	r3, [pc, #48]	; (6e4 <_sercom_get_sercom_inst_index+0x38>)
     6b2:	466a      	mov	r2, sp
     6b4:	cb32      	ldmia	r3!, {r1, r4, r5}
     6b6:	c232      	stmia	r2!, {r1, r4, r5}
     6b8:	cb32      	ldmia	r3!, {r1, r4, r5}
     6ba:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     6bc:	9b00      	ldr	r3, [sp, #0]
     6be:	4283      	cmp	r3, r0
     6c0:	d006      	beq.n	6d0 <_sercom_get_sercom_inst_index+0x24>
     6c2:	2301      	movs	r3, #1
     6c4:	009a      	lsls	r2, r3, #2
     6c6:	4669      	mov	r1, sp
     6c8:	5852      	ldr	r2, [r2, r1]
     6ca:	4282      	cmp	r2, r0
     6cc:	d103      	bne.n	6d6 <_sercom_get_sercom_inst_index+0x2a>
     6ce:	e000      	b.n	6d2 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6d0:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     6d2:	b2d8      	uxtb	r0, r3
     6d4:	e003      	b.n	6de <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6d6:	3301      	adds	r3, #1
     6d8:	2b06      	cmp	r3, #6
     6da:	d1f3      	bne.n	6c4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     6dc:	2000      	movs	r0, #0
}
     6de:	b007      	add	sp, #28
     6e0:	bd30      	pop	{r4, r5, pc}
     6e2:	46c0      	nop			; (mov r8, r8)
     6e4:	00002870 	.word	0x00002870

000006e8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     6e8:	4770      	bx	lr
     6ea:	46c0      	nop			; (mov r8, r8)

000006ec <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     6ee:	4b0a      	ldr	r3, [pc, #40]	; (718 <_sercom_set_handler+0x2c>)
     6f0:	781b      	ldrb	r3, [r3, #0]
     6f2:	2b00      	cmp	r3, #0
     6f4:	d10c      	bne.n	710 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     6f6:	4f09      	ldr	r7, [pc, #36]	; (71c <_sercom_set_handler+0x30>)
     6f8:	4e09      	ldr	r6, [pc, #36]	; (720 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     6fa:	4d0a      	ldr	r5, [pc, #40]	; (724 <_sercom_set_handler+0x38>)
     6fc:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     6fe:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     700:	195a      	adds	r2, r3, r5
     702:	6014      	str	r4, [r2, #0]
     704:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     706:	2b18      	cmp	r3, #24
     708:	d1f9      	bne.n	6fe <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     70a:	2201      	movs	r2, #1
     70c:	4b02      	ldr	r3, [pc, #8]	; (718 <_sercom_set_handler+0x2c>)
     70e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     710:	0080      	lsls	r0, r0, #2
     712:	4b02      	ldr	r3, [pc, #8]	; (71c <_sercom_set_handler+0x30>)
     714:	50c1      	str	r1, [r0, r3]
}
     716:	bdf0      	pop	{r4, r5, r6, r7, pc}
     718:	2000002a 	.word	0x2000002a
     71c:	2000002c 	.word	0x2000002c
     720:	000006e9 	.word	0x000006e9
     724:	200000bc 	.word	0x200000bc

00000728 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     728:	b510      	push	{r4, lr}
     72a:	b082      	sub	sp, #8
     72c:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     72e:	2206      	movs	r2, #6
     730:	4905      	ldr	r1, [pc, #20]	; (748 <_sercom_get_interrupt_vector+0x20>)
     732:	4668      	mov	r0, sp
     734:	4b05      	ldr	r3, [pc, #20]	; (74c <_sercom_get_interrupt_vector+0x24>)
     736:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     738:	0020      	movs	r0, r4
     73a:	4b05      	ldr	r3, [pc, #20]	; (750 <_sercom_get_interrupt_vector+0x28>)
     73c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     73e:	466b      	mov	r3, sp
     740:	5618      	ldrsb	r0, [r3, r0]
}
     742:	b002      	add	sp, #8
     744:	bd10      	pop	{r4, pc}
     746:	46c0      	nop			; (mov r8, r8)
     748:	00002888 	.word	0x00002888
     74c:	0000285d 	.word	0x0000285d
     750:	000006ad 	.word	0x000006ad

00000754 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     754:	b510      	push	{r4, lr}
     756:	4b02      	ldr	r3, [pc, #8]	; (760 <SERCOM0_Handler+0xc>)
     758:	681b      	ldr	r3, [r3, #0]
     75a:	2000      	movs	r0, #0
     75c:	4798      	blx	r3
     75e:	bd10      	pop	{r4, pc}
     760:	2000002c 	.word	0x2000002c

00000764 <SERCOM1_Handler>:
     764:	b510      	push	{r4, lr}
     766:	4b02      	ldr	r3, [pc, #8]	; (770 <SERCOM1_Handler+0xc>)
     768:	685b      	ldr	r3, [r3, #4]
     76a:	2001      	movs	r0, #1
     76c:	4798      	blx	r3
     76e:	bd10      	pop	{r4, pc}
     770:	2000002c 	.word	0x2000002c

00000774 <SERCOM2_Handler>:
     774:	b510      	push	{r4, lr}
     776:	4b02      	ldr	r3, [pc, #8]	; (780 <SERCOM2_Handler+0xc>)
     778:	689b      	ldr	r3, [r3, #8]
     77a:	2002      	movs	r0, #2
     77c:	4798      	blx	r3
     77e:	bd10      	pop	{r4, pc}
     780:	2000002c 	.word	0x2000002c

00000784 <SERCOM3_Handler>:
     784:	b510      	push	{r4, lr}
     786:	4b02      	ldr	r3, [pc, #8]	; (790 <SERCOM3_Handler+0xc>)
     788:	68db      	ldr	r3, [r3, #12]
     78a:	2003      	movs	r0, #3
     78c:	4798      	blx	r3
     78e:	bd10      	pop	{r4, pc}
     790:	2000002c 	.word	0x2000002c

00000794 <SERCOM4_Handler>:
     794:	b510      	push	{r4, lr}
     796:	4b02      	ldr	r3, [pc, #8]	; (7a0 <SERCOM4_Handler+0xc>)
     798:	691b      	ldr	r3, [r3, #16]
     79a:	2004      	movs	r0, #4
     79c:	4798      	blx	r3
     79e:	bd10      	pop	{r4, pc}
     7a0:	2000002c 	.word	0x2000002c

000007a4 <SERCOM5_Handler>:
     7a4:	b510      	push	{r4, lr}
     7a6:	4b02      	ldr	r3, [pc, #8]	; (7b0 <SERCOM5_Handler+0xc>)
     7a8:	695b      	ldr	r3, [r3, #20]
     7aa:	2005      	movs	r0, #5
     7ac:	4798      	blx	r3
     7ae:	bd10      	pop	{r4, pc}
     7b0:	2000002c 	.word	0x2000002c

000007b4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7b6:	465f      	mov	r7, fp
     7b8:	4656      	mov	r6, sl
     7ba:	464d      	mov	r5, r9
     7bc:	4644      	mov	r4, r8
     7be:	b4f0      	push	{r4, r5, r6, r7}
     7c0:	b091      	sub	sp, #68	; 0x44
     7c2:	0005      	movs	r5, r0
     7c4:	000c      	movs	r4, r1
     7c6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     7c8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     7ca:	0008      	movs	r0, r1
     7cc:	4bc4      	ldr	r3, [pc, #784]	; (ae0 <usart_init+0x32c>)
     7ce:	4798      	blx	r3
     7d0:	1e02      	subs	r2, r0, #0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
     7d2:	2a05      	cmp	r2, #5
     7d4:	d003      	beq.n	7de <usart_init+0x2a>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     7d6:	0007      	movs	r7, r0
     7d8:	3712      	adds	r7, #18
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     7da:	0003      	movs	r3, r0
     7dc:	e001      	b.n	7e2 <usart_init+0x2e>
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     7de:	2718      	movs	r7, #24
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
     7e0:	2301      	movs	r3, #1
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     7e2:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     7e4:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     7e6:	07c9      	lsls	r1, r1, #31
     7e8:	d500      	bpl.n	7ec <usart_init+0x38>
     7ea:	e171      	b.n	ad0 <usart_init+0x31c>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     7ec:	6821      	ldr	r1, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     7ee:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     7f0:	0789      	lsls	r1, r1, #30
     7f2:	d500      	bpl.n	7f6 <usart_init+0x42>
     7f4:	e16c      	b.n	ad0 <usart_init+0x31c>
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
     7f6:	2a05      	cmp	r2, #5
     7f8:	d107      	bne.n	80a <usart_init+0x56>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     7fa:	48ba      	ldr	r0, [pc, #744]	; (ae4 <usart_init+0x330>)
     7fc:	6a02      	ldr	r2, [r0, #32]
     7fe:	2101      	movs	r1, #1
     800:	4099      	lsls	r1, r3
     802:	000b      	movs	r3, r1
     804:	4313      	orrs	r3, r2
     806:	6203      	str	r3, [r0, #32]
     808:	e006      	b.n	818 <usart_init+0x64>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     80a:	48b6      	ldr	r0, [pc, #728]	; (ae4 <usart_init+0x330>)
     80c:	69c2      	ldr	r2, [r0, #28]
     80e:	2101      	movs	r1, #1
     810:	4099      	lsls	r1, r3
     812:	000b      	movs	r3, r1
     814:	4313      	orrs	r3, r2
     816:	61c3      	str	r3, [r0, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     818:	a90f      	add	r1, sp, #60	; 0x3c
     81a:	232d      	movs	r3, #45	; 0x2d
     81c:	4698      	mov	r8, r3
     81e:	5cf3      	ldrb	r3, [r6, r3]
     820:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     822:	b2ff      	uxtb	r7, r7
     824:	0038      	movs	r0, r7
     826:	4bb0      	ldr	r3, [pc, #704]	; (ae8 <usart_init+0x334>)
     828:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     82a:	0038      	movs	r0, r7
     82c:	4baf      	ldr	r3, [pc, #700]	; (aec <usart_init+0x338>)
     82e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     830:	4643      	mov	r3, r8
     832:	5cf0      	ldrb	r0, [r6, r3]
     834:	2100      	movs	r1, #0
     836:	4bae      	ldr	r3, [pc, #696]	; (af0 <usart_init+0x33c>)
     838:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     83a:	7af3      	ldrb	r3, [r6, #11]
     83c:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     83e:	2324      	movs	r3, #36	; 0x24
     840:	5cf3      	ldrb	r3, [r6, r3]
     842:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     844:	2325      	movs	r3, #37	; 0x25
     846:	5cf3      	ldrb	r3, [r6, r3]
     848:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     84a:	7ef3      	ldrb	r3, [r6, #27]
     84c:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     84e:	7f33      	ldrb	r3, [r6, #28]
     850:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     852:	682b      	ldr	r3, [r5, #0]
     854:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     856:	0018      	movs	r0, r3
     858:	4ba1      	ldr	r3, [pc, #644]	; (ae0 <usart_init+0x32c>)
     85a:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     85c:	3012      	adds	r0, #18
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     85e:	2200      	movs	r2, #0
     860:	230e      	movs	r3, #14
     862:	a906      	add	r1, sp, #24
     864:	468c      	mov	ip, r1
     866:	4463      	add	r3, ip
     868:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     86a:	8a32      	ldrh	r2, [r6, #16]
     86c:	9202      	str	r2, [sp, #8]
     86e:	2380      	movs	r3, #128	; 0x80
     870:	01db      	lsls	r3, r3, #7
     872:	429a      	cmp	r2, r3
     874:	d01a      	beq.n	8ac <usart_init+0xf8>
     876:	d804      	bhi.n	882 <usart_init+0xce>
     878:	2380      	movs	r3, #128	; 0x80
     87a:	019b      	lsls	r3, r3, #6
     87c:	429a      	cmp	r2, r3
     87e:	d00b      	beq.n	898 <usart_init+0xe4>
     880:	e107      	b.n	a92 <usart_init+0x2de>
     882:	23c0      	movs	r3, #192	; 0xc0
     884:	01db      	lsls	r3, r3, #7
     886:	9a02      	ldr	r2, [sp, #8]
     888:	429a      	cmp	r2, r3
     88a:	d00a      	beq.n	8a2 <usart_init+0xee>
     88c:	2380      	movs	r3, #128	; 0x80
     88e:	021b      	lsls	r3, r3, #8
     890:	429a      	cmp	r2, r3
     892:	d100      	bne.n	896 <usart_init+0xe2>
     894:	e102      	b.n	a9c <usart_init+0x2e8>
     896:	e0fc      	b.n	a92 <usart_init+0x2de>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     898:	2310      	movs	r3, #16
     89a:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     89c:	3b0f      	subs	r3, #15
     89e:	9307      	str	r3, [sp, #28]
     8a0:	e100      	b.n	aa4 <usart_init+0x2f0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     8a2:	2308      	movs	r3, #8
     8a4:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     8a6:	3b07      	subs	r3, #7
     8a8:	9307      	str	r3, [sp, #28]
     8aa:	e0fb      	b.n	aa4 <usart_init+0x2f0>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     8ac:	6833      	ldr	r3, [r6, #0]
     8ae:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
     8b0:	68f3      	ldr	r3, [r6, #12]
     8b2:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     8b4:	6973      	ldr	r3, [r6, #20]
     8b6:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     8b8:	7e33      	ldrb	r3, [r6, #24]
     8ba:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     8bc:	2326      	movs	r3, #38	; 0x26
     8be:	5cf3      	ldrb	r3, [r6, r3]
     8c0:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     8c2:	6873      	ldr	r3, [r6, #4]
     8c4:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     8c6:	2b00      	cmp	r3, #0
     8c8:	d016      	beq.n	8f8 <usart_init+0x144>
     8ca:	2380      	movs	r3, #128	; 0x80
     8cc:	055b      	lsls	r3, r3, #21
     8ce:	459a      	cmp	sl, r3
     8d0:	d139      	bne.n	946 <usart_init+0x192>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     8d2:	2327      	movs	r3, #39	; 0x27
     8d4:	5cf3      	ldrb	r3, [r6, r3]
     8d6:	2b00      	cmp	r3, #0
     8d8:	d139      	bne.n	94e <usart_init+0x19a>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     8da:	6a33      	ldr	r3, [r6, #32]
     8dc:	001f      	movs	r7, r3
     8de:	b2c0      	uxtb	r0, r0
     8e0:	4b84      	ldr	r3, [pc, #528]	; (af4 <usart_init+0x340>)
     8e2:	4798      	blx	r3
     8e4:	0001      	movs	r1, r0
     8e6:	220e      	movs	r2, #14
     8e8:	ab06      	add	r3, sp, #24
     8ea:	469c      	mov	ip, r3
     8ec:	4462      	add	r2, ip
     8ee:	0038      	movs	r0, r7
     8f0:	4b81      	ldr	r3, [pc, #516]	; (af8 <usart_init+0x344>)
     8f2:	4798      	blx	r3
     8f4:	0003      	movs	r3, r0
     8f6:	e027      	b.n	948 <usart_init+0x194>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     8f8:	2308      	movs	r3, #8
     8fa:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8fc:	2300      	movs	r3, #0
     8fe:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     900:	2327      	movs	r3, #39	; 0x27
     902:	5cf3      	ldrb	r3, [r6, r3]
     904:	2b00      	cmp	r3, #0
     906:	d00c      	beq.n	922 <usart_init+0x16e>
				status_code =
     908:	9b06      	ldr	r3, [sp, #24]
     90a:	9300      	str	r3, [sp, #0]
     90c:	9b07      	ldr	r3, [sp, #28]
     90e:	220e      	movs	r2, #14
     910:	a906      	add	r1, sp, #24
     912:	468c      	mov	ip, r1
     914:	4462      	add	r2, ip
     916:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     918:	6a30      	ldr	r0, [r6, #32]
     91a:	4f78      	ldr	r7, [pc, #480]	; (afc <usart_init+0x348>)
     91c:	47b8      	blx	r7
     91e:	0003      	movs	r3, r0
     920:	e012      	b.n	948 <usart_init+0x194>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     922:	6a33      	ldr	r3, [r6, #32]
     924:	001f      	movs	r7, r3
     926:	b2c0      	uxtb	r0, r0
     928:	4b72      	ldr	r3, [pc, #456]	; (af4 <usart_init+0x340>)
     92a:	4798      	blx	r3
     92c:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     92e:	9b06      	ldr	r3, [sp, #24]
     930:	9300      	str	r3, [sp, #0]
     932:	9b07      	ldr	r3, [sp, #28]
     934:	220e      	movs	r2, #14
     936:	a806      	add	r0, sp, #24
     938:	4684      	mov	ip, r0
     93a:	4462      	add	r2, ip
     93c:	0038      	movs	r0, r7
     93e:	4f6f      	ldr	r7, [pc, #444]	; (afc <usart_init+0x348>)
     940:	47b8      	blx	r7
     942:	0003      	movs	r3, r0
     944:	e000      	b.n	948 <usart_init+0x194>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     946:	2300      	movs	r3, #0
     948:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     94a:	d000      	beq.n	94e <usart_init+0x19a>
     94c:	e0c0      	b.n	ad0 <usart_init+0x31c>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     94e:	7e73      	ldrb	r3, [r6, #25]
     950:	2b00      	cmp	r3, #0
     952:	d002      	beq.n	95a <usart_init+0x1a6>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     954:	7eb3      	ldrb	r3, [r6, #26]
     956:	464a      	mov	r2, r9
     958:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     95a:	682a      	ldr	r2, [r5, #0]
     95c:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     95e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     960:	2b00      	cmp	r3, #0
     962:	d1fc      	bne.n	95e <usart_init+0x1aa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     964:	330e      	adds	r3, #14
     966:	aa06      	add	r2, sp, #24
     968:	4694      	mov	ip, r2
     96a:	4463      	add	r3, ip
     96c:	881b      	ldrh	r3, [r3, #0]
     96e:	464a      	mov	r2, r9
     970:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     972:	9b04      	ldr	r3, [sp, #16]
     974:	465a      	mov	r2, fp
     976:	4313      	orrs	r3, r2
     978:	9a03      	ldr	r2, [sp, #12]
     97a:	4313      	orrs	r3, r2
     97c:	4652      	mov	r2, sl
     97e:	4313      	orrs	r3, r2
     980:	433b      	orrs	r3, r7
     982:	4642      	mov	r2, r8
     984:	0212      	lsls	r2, r2, #8
     986:	4313      	orrs	r3, r2
     988:	9a05      	ldr	r2, [sp, #20]
     98a:	0757      	lsls	r7, r2, #29
     98c:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     98e:	2327      	movs	r3, #39	; 0x27
     990:	5cf3      	ldrb	r3, [r6, r3]
     992:	2b00      	cmp	r3, #0
     994:	d101      	bne.n	99a <usart_init+0x1e6>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     996:	3304      	adds	r3, #4
     998:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     99a:	7e71      	ldrb	r1, [r6, #25]
     99c:	0289      	lsls	r1, r1, #10
     99e:	7f33      	ldrb	r3, [r6, #28]
     9a0:	025b      	lsls	r3, r3, #9
     9a2:	4319      	orrs	r1, r3
     9a4:	7f73      	ldrb	r3, [r6, #29]
     9a6:	021b      	lsls	r3, r3, #8
     9a8:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     9aa:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     9ac:	5cf3      	ldrb	r3, [r6, r3]
     9ae:	045b      	lsls	r3, r3, #17
     9b0:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     9b2:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     9b4:	5cf2      	ldrb	r2, [r6, r3]
     9b6:	0412      	lsls	r2, r2, #16
     9b8:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     9ba:	7af3      	ldrb	r3, [r6, #11]
     9bc:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     9be:	8933      	ldrh	r3, [r6, #8]
     9c0:	2bff      	cmp	r3, #255	; 0xff
     9c2:	d004      	beq.n	9ce <usart_init+0x21a>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     9c4:	2280      	movs	r2, #128	; 0x80
     9c6:	0452      	lsls	r2, r2, #17
     9c8:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     9ca:	4319      	orrs	r1, r3
     9cc:	e005      	b.n	9da <usart_init+0x226>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     9ce:	7ef3      	ldrb	r3, [r6, #27]
     9d0:	2b00      	cmp	r3, #0
     9d2:	d002      	beq.n	9da <usart_init+0x226>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     9d4:	2380      	movs	r3, #128	; 0x80
     9d6:	04db      	lsls	r3, r3, #19
     9d8:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     9da:	232c      	movs	r3, #44	; 0x2c
     9dc:	5cf3      	ldrb	r3, [r6, r3]
     9de:	2b00      	cmp	r3, #0
     9e0:	d103      	bne.n	9ea <usart_init+0x236>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     9e2:	4b47      	ldr	r3, [pc, #284]	; (b00 <usart_init+0x34c>)
     9e4:	789b      	ldrb	r3, [r3, #2]
     9e6:	079b      	lsls	r3, r3, #30
     9e8:	d501      	bpl.n	9ee <usart_init+0x23a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     9ea:	2380      	movs	r3, #128	; 0x80
     9ec:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     9ee:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     9f0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     9f2:	2b00      	cmp	r3, #0
     9f4:	d1fc      	bne.n	9f0 <usart_init+0x23c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     9f6:	464b      	mov	r3, r9
     9f8:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     9fa:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     9fc:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     9fe:	2b00      	cmp	r3, #0
     a00:	d1fc      	bne.n	9fc <usart_init+0x248>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     a02:	464b      	mov	r3, r9
     a04:	601f      	str	r7, [r3, #0]
     a06:	ab0e      	add	r3, sp, #56	; 0x38
     a08:	2280      	movs	r2, #128	; 0x80
     a0a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a0c:	2200      	movs	r2, #0
     a0e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     a10:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     a12:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     a14:	6b33      	ldr	r3, [r6, #48]	; 0x30
     a16:	930a      	str	r3, [sp, #40]	; 0x28
     a18:	6b73      	ldr	r3, [r6, #52]	; 0x34
     a1a:	930b      	str	r3, [sp, #44]	; 0x2c
     a1c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     a1e:	930c      	str	r3, [sp, #48]	; 0x30
     a20:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     a22:	9302      	str	r3, [sp, #8]
     a24:	930d      	str	r3, [sp, #52]	; 0x34
     a26:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     a28:	ae0e      	add	r6, sp, #56	; 0x38
     a2a:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a2c:	00bb      	lsls	r3, r7, #2
     a2e:	aa0a      	add	r2, sp, #40	; 0x28
     a30:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     a32:	2800      	cmp	r0, #0
     a34:	d102      	bne.n	a3c <usart_init+0x288>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     a36:	0020      	movs	r0, r4
     a38:	4b32      	ldr	r3, [pc, #200]	; (b04 <usart_init+0x350>)
     a3a:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     a3c:	1c43      	adds	r3, r0, #1
     a3e:	d005      	beq.n	a4c <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     a40:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     a42:	0c00      	lsrs	r0, r0, #16
     a44:	b2c0      	uxtb	r0, r0
     a46:	0031      	movs	r1, r6
     a48:	4b2f      	ldr	r3, [pc, #188]	; (b08 <usart_init+0x354>)
     a4a:	4798      	blx	r3
     a4c:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     a4e:	2f04      	cmp	r7, #4
     a50:	d1eb      	bne.n	a2a <usart_init+0x276>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     a52:	2300      	movs	r3, #0
     a54:	60eb      	str	r3, [r5, #12]
     a56:	612b      	str	r3, [r5, #16]
     a58:	616b      	str	r3, [r5, #20]
     a5a:	61ab      	str	r3, [r5, #24]
     a5c:	61eb      	str	r3, [r5, #28]
     a5e:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     a60:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     a62:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     a64:	2200      	movs	r2, #0
     a66:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     a68:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     a6a:	3330      	adds	r3, #48	; 0x30
     a6c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     a6e:	3301      	adds	r3, #1
     a70:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     a72:	3301      	adds	r3, #1
     a74:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     a76:	3301      	adds	r3, #1
     a78:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     a7a:	6828      	ldr	r0, [r5, #0]
     a7c:	4b18      	ldr	r3, [pc, #96]	; (ae0 <usart_init+0x32c>)
     a7e:	4798      	blx	r3
     a80:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     a82:	4922      	ldr	r1, [pc, #136]	; (b0c <usart_init+0x358>)
     a84:	4b22      	ldr	r3, [pc, #136]	; (b10 <usart_init+0x35c>)
     a86:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     a88:	00a4      	lsls	r4, r4, #2
     a8a:	4b22      	ldr	r3, [pc, #136]	; (b14 <usart_init+0x360>)
     a8c:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     a8e:	2000      	movs	r0, #0
     a90:	e01e      	b.n	ad0 <usart_init+0x31c>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     a92:	2310      	movs	r3, #16
     a94:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     a96:	2300      	movs	r3, #0
     a98:	9307      	str	r3, [sp, #28]
     a9a:	e003      	b.n	aa4 <usart_init+0x2f0>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     a9c:	2303      	movs	r3, #3
     a9e:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     aa0:	2300      	movs	r3, #0
     aa2:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     aa4:	6833      	ldr	r3, [r6, #0]
     aa6:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
     aa8:	68f3      	ldr	r3, [r6, #12]
     aaa:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     aac:	6973      	ldr	r3, [r6, #20]
     aae:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ab0:	7e33      	ldrb	r3, [r6, #24]
     ab2:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ab4:	2326      	movs	r3, #38	; 0x26
     ab6:	5cf3      	ldrb	r3, [r6, r3]
     ab8:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     aba:	6873      	ldr	r3, [r6, #4]
     abc:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     abe:	2b00      	cmp	r3, #0
     ac0:	d100      	bne.n	ac4 <usart_init+0x310>
     ac2:	e71d      	b.n	900 <usart_init+0x14c>
     ac4:	2380      	movs	r3, #128	; 0x80
     ac6:	055b      	lsls	r3, r3, #21
     ac8:	459a      	cmp	sl, r3
     aca:	d100      	bne.n	ace <usart_init+0x31a>
     acc:	e701      	b.n	8d2 <usart_init+0x11e>
     ace:	e73e      	b.n	94e <usart_init+0x19a>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     ad0:	b011      	add	sp, #68	; 0x44
     ad2:	bc3c      	pop	{r2, r3, r4, r5}
     ad4:	4690      	mov	r8, r2
     ad6:	4699      	mov	r9, r3
     ad8:	46a2      	mov	sl, r4
     ada:	46ab      	mov	fp, r5
     adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ade:	46c0      	nop			; (mov r8, r8)
     ae0:	000006ad 	.word	0x000006ad
     ae4:	40000400 	.word	0x40000400
     ae8:	000014a5 	.word	0x000014a5
     aec:	00001435 	.word	0x00001435
     af0:	000004dd 	.word	0x000004dd
     af4:	000014c9 	.word	0x000014c9
     af8:	000002ed 	.word	0x000002ed
     afc:	00000315 	.word	0x00000315
     b00:	41002000 	.word	0x41002000
     b04:	00000529 	.word	0x00000529
     b08:	000015a1 	.word	0x000015a1
     b0c:	00000bb5 	.word	0x00000bb5
     b10:	000006ed 	.word	0x000006ed
     b14:	200000bc 	.word	0x200000bc

00000b18 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     b18:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     b1a:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     b1c:	2a00      	cmp	r2, #0
     b1e:	d00e      	beq.n	b3e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     b20:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     b22:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     b24:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     b26:	2a00      	cmp	r2, #0
     b28:	d109      	bne.n	b3e <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b2a:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     b2c:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     b2e:	2a00      	cmp	r2, #0
     b30:	d1fc      	bne.n	b2c <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     b32:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     b34:	2102      	movs	r1, #2
     b36:	7e1a      	ldrb	r2, [r3, #24]
     b38:	420a      	tst	r2, r1
     b3a:	d0fc      	beq.n	b36 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     b3c:	2300      	movs	r3, #0
}
     b3e:	0018      	movs	r0, r3
     b40:	4770      	bx	lr
     b42:	46c0      	nop			; (mov r8, r8)

00000b44 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     b44:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     b46:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     b48:	2a00      	cmp	r2, #0
     b4a:	d030      	beq.n	bae <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     b4c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     b4e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     b50:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     b52:	2a00      	cmp	r2, #0
     b54:	d12b      	bne.n	bae <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b56:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     b58:	7e10      	ldrb	r0, [r2, #24]
     b5a:	0740      	lsls	r0, r0, #29
     b5c:	d527      	bpl.n	bae <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     b5e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     b60:	2b00      	cmp	r3, #0
     b62:	d1fc      	bne.n	b5e <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b64:	8b53      	ldrh	r3, [r2, #26]
     b66:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     b68:	0698      	lsls	r0, r3, #26
     b6a:	d01d      	beq.n	ba8 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     b6c:	0798      	lsls	r0, r3, #30
     b6e:	d503      	bpl.n	b78 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     b70:	2302      	movs	r3, #2
     b72:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
     b74:	3318      	adds	r3, #24
     b76:	e01a      	b.n	bae <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     b78:	0758      	lsls	r0, r3, #29
     b7a:	d503      	bpl.n	b84 <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     b7c:	2304      	movs	r3, #4
     b7e:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
     b80:	331a      	adds	r3, #26
     b82:	e014      	b.n	bae <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     b84:	07d8      	lsls	r0, r3, #31
     b86:	d503      	bpl.n	b90 <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     b88:	2301      	movs	r3, #1
     b8a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
     b8c:	3312      	adds	r3, #18
     b8e:	e00e      	b.n	bae <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     b90:	06d8      	lsls	r0, r3, #27
     b92:	d503      	bpl.n	b9c <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     b94:	2310      	movs	r3, #16
     b96:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
     b98:	3332      	adds	r3, #50	; 0x32
     b9a:	e008      	b.n	bae <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     b9c:	069b      	lsls	r3, r3, #26
     b9e:	d503      	bpl.n	ba8 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     ba0:	2320      	movs	r3, #32
     ba2:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
     ba4:	3321      	adds	r3, #33	; 0x21
     ba6:	e002      	b.n	bae <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     ba8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     baa:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     bac:	2300      	movs	r3, #0
}
     bae:	0018      	movs	r0, r3
     bb0:	4770      	bx	lr
     bb2:	46c0      	nop			; (mov r8, r8)

00000bb4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     bb6:	0080      	lsls	r0, r0, #2
     bb8:	4b60      	ldr	r3, [pc, #384]	; (d3c <_usart_interrupt_handler+0x188>)
     bba:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     bbc:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     bbe:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     bc0:	2b00      	cmp	r3, #0
     bc2:	d1fc      	bne.n	bbe <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     bc4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     bc6:	7da6      	ldrb	r6, [r4, #22]
     bc8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     bca:	2330      	movs	r3, #48	; 0x30
     bcc:	5ceb      	ldrb	r3, [r5, r3]
     bce:	2231      	movs	r2, #49	; 0x31
     bd0:	5caf      	ldrb	r7, [r5, r2]
     bd2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     bd4:	07f3      	lsls	r3, r6, #31
     bd6:	d522      	bpl.n	c1e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     bd8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     bda:	b29b      	uxth	r3, r3
     bdc:	2b00      	cmp	r3, #0
     bde:	d01c      	beq.n	c1a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     be0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     be2:	7813      	ldrb	r3, [r2, #0]
     be4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     be6:	1c51      	adds	r1, r2, #1
     be8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     bea:	7969      	ldrb	r1, [r5, #5]
     bec:	2901      	cmp	r1, #1
     bee:	d001      	beq.n	bf4 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     bf0:	b29b      	uxth	r3, r3
     bf2:	e004      	b.n	bfe <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     bf4:	7851      	ldrb	r1, [r2, #1]
     bf6:	0209      	lsls	r1, r1, #8
     bf8:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     bfa:	3202      	adds	r2, #2
     bfc:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     bfe:	05db      	lsls	r3, r3, #23
     c00:	0ddb      	lsrs	r3, r3, #23
     c02:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     c04:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     c06:	3b01      	subs	r3, #1
     c08:	b29b      	uxth	r3, r3
     c0a:	85eb      	strh	r3, [r5, #46]	; 0x2e
     c0c:	2b00      	cmp	r3, #0
     c0e:	d106      	bne.n	c1e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     c10:	3301      	adds	r3, #1
     c12:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     c14:	3301      	adds	r3, #1
     c16:	75a3      	strb	r3, [r4, #22]
     c18:	e001      	b.n	c1e <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     c1a:	2301      	movs	r3, #1
     c1c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     c1e:	07b3      	lsls	r3, r6, #30
     c20:	d509      	bpl.n	c36 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     c22:	2302      	movs	r3, #2
     c24:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     c26:	2200      	movs	r2, #0
     c28:	3331      	adds	r3, #49	; 0x31
     c2a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     c2c:	07fb      	lsls	r3, r7, #31
     c2e:	d502      	bpl.n	c36 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     c30:	0028      	movs	r0, r5
     c32:	68eb      	ldr	r3, [r5, #12]
     c34:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     c36:	0773      	lsls	r3, r6, #29
     c38:	d560      	bpl.n	cfc <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
     c3a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     c3c:	b29b      	uxth	r3, r3
     c3e:	2b00      	cmp	r3, #0
     c40:	d05a      	beq.n	cf8 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     c42:	8b63      	ldrh	r3, [r4, #26]
     c44:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     c46:	071a      	lsls	r2, r3, #28
     c48:	d402      	bmi.n	c50 <_usart_interrupt_handler+0x9c>
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     c4a:	223f      	movs	r2, #63	; 0x3f
     c4c:	4013      	ands	r3, r2
     c4e:	e001      	b.n	c54 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     c50:	2237      	movs	r2, #55	; 0x37
     c52:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     c54:	2b00      	cmp	r3, #0
     c56:	d02d      	beq.n	cb4 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     c58:	079a      	lsls	r2, r3, #30
     c5a:	d505      	bpl.n	c68 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     c5c:	221a      	movs	r2, #26
     c5e:	2332      	movs	r3, #50	; 0x32
     c60:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     c62:	3b30      	subs	r3, #48	; 0x30
     c64:	8363      	strh	r3, [r4, #26]
     c66:	e01f      	b.n	ca8 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     c68:	075a      	lsls	r2, r3, #29
     c6a:	d505      	bpl.n	c78 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     c6c:	221e      	movs	r2, #30
     c6e:	2332      	movs	r3, #50	; 0x32
     c70:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     c72:	3b2e      	subs	r3, #46	; 0x2e
     c74:	8363      	strh	r3, [r4, #26]
     c76:	e017      	b.n	ca8 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     c78:	07da      	lsls	r2, r3, #31
     c7a:	d505      	bpl.n	c88 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     c7c:	2213      	movs	r2, #19
     c7e:	2332      	movs	r3, #50	; 0x32
     c80:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     c82:	3b31      	subs	r3, #49	; 0x31
     c84:	8363      	strh	r3, [r4, #26]
     c86:	e00f      	b.n	ca8 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     c88:	06da      	lsls	r2, r3, #27
     c8a:	d505      	bpl.n	c98 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     c8c:	2242      	movs	r2, #66	; 0x42
     c8e:	2332      	movs	r3, #50	; 0x32
     c90:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     c92:	3b22      	subs	r3, #34	; 0x22
     c94:	8363      	strh	r3, [r4, #26]
     c96:	e007      	b.n	ca8 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     c98:	2220      	movs	r2, #32
     c9a:	421a      	tst	r2, r3
     c9c:	d004      	beq.n	ca8 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     c9e:	3221      	adds	r2, #33	; 0x21
     ca0:	2332      	movs	r3, #50	; 0x32
     ca2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     ca4:	3b12      	subs	r3, #18
     ca6:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     ca8:	077b      	lsls	r3, r7, #29
     caa:	d527      	bpl.n	cfc <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     cac:	0028      	movs	r0, r5
     cae:	696b      	ldr	r3, [r5, #20]
     cb0:	4798      	blx	r3
     cb2:	e023      	b.n	cfc <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     cb4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     cb6:	05db      	lsls	r3, r3, #23
     cb8:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     cba:	b2da      	uxtb	r2, r3
     cbc:	6a69      	ldr	r1, [r5, #36]	; 0x24
     cbe:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     cc0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     cc2:	1c51      	adds	r1, r2, #1
     cc4:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     cc6:	7969      	ldrb	r1, [r5, #5]
     cc8:	2901      	cmp	r1, #1
     cca:	d104      	bne.n	cd6 <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     ccc:	0a1b      	lsrs	r3, r3, #8
     cce:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     cd0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     cd2:	3301      	adds	r3, #1
     cd4:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     cd6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     cd8:	3b01      	subs	r3, #1
     cda:	b29b      	uxth	r3, r3
     cdc:	85ab      	strh	r3, [r5, #44]	; 0x2c
     cde:	2b00      	cmp	r3, #0
     ce0:	d10c      	bne.n	cfc <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     ce2:	3304      	adds	r3, #4
     ce4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     ce6:	2200      	movs	r2, #0
     ce8:	332e      	adds	r3, #46	; 0x2e
     cea:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     cec:	07bb      	lsls	r3, r7, #30
     cee:	d505      	bpl.n	cfc <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     cf0:	0028      	movs	r0, r5
     cf2:	692b      	ldr	r3, [r5, #16]
     cf4:	4798      	blx	r3
     cf6:	e001      	b.n	cfc <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     cf8:	2304      	movs	r3, #4
     cfa:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     cfc:	06f3      	lsls	r3, r6, #27
     cfe:	d507      	bpl.n	d10 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     d00:	2310      	movs	r3, #16
     d02:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     d04:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     d06:	06fb      	lsls	r3, r7, #27
     d08:	d502      	bpl.n	d10 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     d0a:	0028      	movs	r0, r5
     d0c:	69eb      	ldr	r3, [r5, #28]
     d0e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     d10:	06b3      	lsls	r3, r6, #26
     d12:	d507      	bpl.n	d24 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     d14:	2320      	movs	r3, #32
     d16:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     d18:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     d1a:	073b      	lsls	r3, r7, #28
     d1c:	d502      	bpl.n	d24 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     d1e:	0028      	movs	r0, r5
     d20:	69ab      	ldr	r3, [r5, #24]
     d22:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     d24:	0733      	lsls	r3, r6, #28
     d26:	d507      	bpl.n	d38 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     d28:	2308      	movs	r3, #8
     d2a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     d2c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     d2e:	06bb      	lsls	r3, r7, #26
     d30:	d502      	bpl.n	d38 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     d32:	6a2b      	ldr	r3, [r5, #32]
     d34:	0028      	movs	r0, r5
     d36:	4798      	blx	r3
		}
	}
#endif
}
     d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d3a:	46c0      	nop			; (mov r8, r8)
     d3c:	200000bc 	.word	0x200000bc

00000d40 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     d40:	b510      	push	{r4, lr}
	switch (clock_source) {
     d42:	2808      	cmp	r0, #8
     d44:	d803      	bhi.n	d4e <system_clock_source_get_hz+0xe>
     d46:	0080      	lsls	r0, r0, #2
     d48:	4b1c      	ldr	r3, [pc, #112]	; (dbc <system_clock_source_get_hz+0x7c>)
     d4a:	581b      	ldr	r3, [r3, r0]
     d4c:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
     d4e:	2000      	movs	r0, #0
     d50:	e032      	b.n	db8 <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     d52:	4b1b      	ldr	r3, [pc, #108]	; (dc0 <system_clock_source_get_hz+0x80>)
     d54:	6918      	ldr	r0, [r3, #16]
     d56:	e02f      	b.n	db8 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
     d58:	4b1a      	ldr	r3, [pc, #104]	; (dc4 <system_clock_source_get_hz+0x84>)
     d5a:	7d18      	ldrb	r0, [r3, #20]
     d5c:	0700      	lsls	r0, r0, #28
     d5e:	0f80      	lsrs	r0, r0, #30
     d60:	3001      	adds	r0, #1
     d62:	4b19      	ldr	r3, [pc, #100]	; (dc8 <system_clock_source_get_hz+0x88>)
     d64:	4358      	muls	r0, r3
     d66:	e027      	b.n	db8 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     d68:	4b15      	ldr	r3, [pc, #84]	; (dc0 <system_clock_source_get_hz+0x80>)
     d6a:	6958      	ldr	r0, [r3, #20]
     d6c:	e024      	b.n	db8 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
     d6e:	4b14      	ldr	r3, [pc, #80]	; (dc0 <system_clock_source_get_hz+0x80>)
     d70:	681b      	ldr	r3, [r3, #0]
     d72:	2002      	movs	r0, #2
     d74:	4018      	ands	r0, r3
     d76:	d01f      	beq.n	db8 <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
     d78:	4912      	ldr	r1, [pc, #72]	; (dc4 <system_clock_source_get_hz+0x84>)
     d7a:	2280      	movs	r2, #128	; 0x80
     d7c:	0052      	lsls	r2, r2, #1
     d7e:	68cb      	ldr	r3, [r1, #12]
     d80:	4213      	tst	r3, r2
     d82:	d0fc      	beq.n	d7e <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
     d84:	4b0e      	ldr	r3, [pc, #56]	; (dc0 <system_clock_source_get_hz+0x80>)
     d86:	681b      	ldr	r3, [r3, #0]
     d88:	075b      	lsls	r3, r3, #29
     d8a:	d514      	bpl.n	db6 <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     d8c:	2000      	movs	r0, #0
     d8e:	4b0f      	ldr	r3, [pc, #60]	; (dcc <system_clock_source_get_hz+0x8c>)
     d90:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     d92:	4b0b      	ldr	r3, [pc, #44]	; (dc0 <system_clock_source_get_hz+0x80>)
     d94:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     d96:	041b      	lsls	r3, r3, #16
     d98:	0c1b      	lsrs	r3, r3, #16
     d9a:	4358      	muls	r0, r3
     d9c:	e00c      	b.n	db8 <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     d9e:	2328      	movs	r3, #40	; 0x28
     da0:	4a08      	ldr	r2, [pc, #32]	; (dc4 <system_clock_source_get_hz+0x84>)
     da2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     da4:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     da6:	079b      	lsls	r3, r3, #30
     da8:	d506      	bpl.n	db8 <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
     daa:	4b05      	ldr	r3, [pc, #20]	; (dc0 <system_clock_source_get_hz+0x80>)
     dac:	68d8      	ldr	r0, [r3, #12]
     dae:	e003      	b.n	db8 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     db0:	2080      	movs	r0, #128	; 0x80
     db2:	0200      	lsls	r0, r0, #8
     db4:	e000      	b.n	db8 <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
     db6:	4806      	ldr	r0, [pc, #24]	; (dd0 <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
     db8:	bd10      	pop	{r4, pc}
     dba:	46c0      	nop			; (mov r8, r8)
     dbc:	00002890 	.word	0x00002890
     dc0:	20000044 	.word	0x20000044
     dc4:	40000c00 	.word	0x40000c00
     dc8:	003d0900 	.word	0x003d0900
     dcc:	000014c9 	.word	0x000014c9
     dd0:	02dc6c00 	.word	0x02dc6c00

00000dd4 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
     dd4:	b530      	push	{r4, r5, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
     dd6:	4c0c      	ldr	r4, [pc, #48]	; (e08 <system_clock_source_osc16m_set_config+0x34>)
     dd8:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
     dda:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
     ddc:	7841      	ldrb	r1, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
     dde:	7800      	ldrb	r0, [r0, #0]
     de0:	2203      	movs	r2, #3
     de2:	4010      	ands	r0, r2
     de4:	0080      	lsls	r0, r0, #2
     de6:	3209      	adds	r2, #9
     de8:	4393      	bics	r3, r2
     dea:	4303      	orrs	r3, r0
     dec:	3a0b      	subs	r2, #11
     dee:	4011      	ands	r1, r2
     df0:	0189      	lsls	r1, r1, #6
     df2:	323f      	adds	r2, #63	; 0x3f
     df4:	4393      	bics	r3, r2
     df6:	430b      	orrs	r3, r1
     df8:	001a      	movs	r2, r3
     dfa:	01e9      	lsls	r1, r5, #7
     dfc:	237f      	movs	r3, #127	; 0x7f
     dfe:	4013      	ands	r3, r2
     e00:	430b      	orrs	r3, r1
     e02:	7523      	strb	r3, [r4, #20]
}
     e04:	bd30      	pop	{r4, r5, pc}
     e06:	46c0      	nop			; (mov r8, r8)
     e08:	40000c00 	.word	0x40000c00

00000e0c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
     e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e0e:	465f      	mov	r7, fp
     e10:	4656      	mov	r6, sl
     e12:	464d      	mov	r5, r9
     e14:	4644      	mov	r4, r8
     e16:	b4f0      	push	{r4, r5, r6, r7}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
     e18:	4e25      	ldr	r6, [pc, #148]	; (eb0 <system_clock_source_xosc32k_set_config+0xa4>)
     e1a:	6973      	ldr	r3, [r6, #20]
     e1c:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
     e1e:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
     e20:	7803      	ldrb	r3, [r0, #0]
     e22:	425a      	negs	r2, r3
     e24:	415a      	adcs	r2, r3
     e26:	4690      	mov	r8, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
     e28:	7883      	ldrb	r3, [r0, #2]
     e2a:	469a      	mov	sl, r3
	temp.bit.EN32K = config->enable_32khz_output;
     e2c:	78c3      	ldrb	r3, [r0, #3]

	temp.bit.ONDEMAND = config->on_demand;
     e2e:	7a47      	ldrb	r7, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
     e30:	7a02      	ldrb	r2, [r0, #8]
     e32:	4693      	mov	fp, r2
	temp.bit.WRTLOCK  = config->write_once;
     e34:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
     e36:	6842      	ldr	r2, [r0, #4]
     e38:	481e      	ldr	r0, [pc, #120]	; (eb4 <system_clock_source_xosc32k_set_config+0xa8>)
     e3a:	6142      	str	r2, [r0, #20]

	OSC32KCTRL->XOSC32K = temp;
     e3c:	2001      	movs	r0, #1
     e3e:	4642      	mov	r2, r8
     e40:	0092      	lsls	r2, r2, #2
     e42:	4690      	mov	r8, r2
     e44:	2204      	movs	r2, #4
     e46:	4691      	mov	r9, r2
     e48:	4662      	mov	r2, ip
     e4a:	4649      	mov	r1, r9
     e4c:	438a      	bics	r2, r1
     e4e:	4694      	mov	ip, r2
     e50:	4642      	mov	r2, r8
     e52:	4661      	mov	r1, ip
     e54:	430a      	orrs	r2, r1
     e56:	4694      	mov	ip, r2
     e58:	4003      	ands	r3, r0
     e5a:	00db      	lsls	r3, r3, #3
     e5c:	2208      	movs	r2, #8
     e5e:	4690      	mov	r8, r2
     e60:	4662      	mov	r2, ip
     e62:	4641      	mov	r1, r8
     e64:	438a      	bics	r2, r1
     e66:	4313      	orrs	r3, r2
     e68:	4651      	mov	r1, sl
     e6a:	4001      	ands	r1, r0
     e6c:	0109      	lsls	r1, r1, #4
     e6e:	2210      	movs	r2, #16
     e70:	4393      	bics	r3, r2
     e72:	430b      	orrs	r3, r1
     e74:	465a      	mov	r2, fp
     e76:	4002      	ands	r2, r0
     e78:	0192      	lsls	r2, r2, #6
     e7a:	2140      	movs	r1, #64	; 0x40
     e7c:	438b      	bics	r3, r1
     e7e:	4313      	orrs	r3, r2
     e80:	4007      	ands	r7, r0
     e82:	01ff      	lsls	r7, r7, #7
     e84:	2280      	movs	r2, #128	; 0x80
     e86:	4393      	bics	r3, r2
     e88:	433b      	orrs	r3, r7
     e8a:	3a79      	subs	r2, #121	; 0x79
     e8c:	4015      	ands	r5, r2
     e8e:	022d      	lsls	r5, r5, #8
     e90:	4f09      	ldr	r7, [pc, #36]	; (eb8 <system_clock_source_xosc32k_set_config+0xac>)
     e92:	403b      	ands	r3, r7
     e94:	432b      	orrs	r3, r5
     e96:	4004      	ands	r4, r0
     e98:	0320      	lsls	r0, r4, #12
     e9a:	4c08      	ldr	r4, [pc, #32]	; (ebc <system_clock_source_xosc32k_set_config+0xb0>)
     e9c:	401c      	ands	r4, r3
     e9e:	4304      	orrs	r4, r0
     ea0:	6174      	str	r4, [r6, #20]
}
     ea2:	bc3c      	pop	{r2, r3, r4, r5}
     ea4:	4690      	mov	r8, r2
     ea6:	4699      	mov	r9, r3
     ea8:	46a2      	mov	sl, r4
     eaa:	46ab      	mov	fp, r5
     eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     eae:	46c0      	nop			; (mov r8, r8)
     eb0:	40001000 	.word	0x40001000
     eb4:	20000044 	.word	0x20000044
     eb8:	fffff8ff 	.word	0xfffff8ff
     ebc:	ffffefff 	.word	0xffffefff

00000ec0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     ec0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
     ec2:	7a83      	ldrb	r3, [r0, #10]
     ec4:	069b      	lsls	r3, r3, #26
     ec6:	0c1a      	lsrs	r2, r3, #16
     ec8:	8983      	ldrh	r3, [r0, #12]
     eca:	059b      	lsls	r3, r3, #22
     ecc:	0d9b      	lsrs	r3, r3, #22
     ece:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
     ed0:	4c1a      	ldr	r4, [pc, #104]	; (f3c <system_clock_source_dfll_set_config+0x7c>)
     ed2:	6063      	str	r3, [r4, #4]
	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
     ed4:	7a01      	ldrb	r1, [r0, #8]
     ed6:	7a43      	ldrb	r3, [r0, #9]
     ed8:	4319      	orrs	r1, r3
     eda:	8883      	ldrh	r3, [r0, #4]
     edc:	88c2      	ldrh	r2, [r0, #6]
     ede:	4313      	orrs	r3, r2
     ee0:	430b      	orrs	r3, r1
     ee2:	7842      	ldrb	r2, [r0, #1]
     ee4:	01d2      	lsls	r2, r2, #7
     ee6:	4313      	orrs	r3, r2
     ee8:	7882      	ldrb	r2, [r0, #2]
     eea:	0192      	lsls	r2, r2, #6
     eec:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
			OSCCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
     eee:	6023      	str	r3, [r4, #0]
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     ef0:	7803      	ldrb	r3, [r0, #0]
     ef2:	2b04      	cmp	r3, #4
     ef4:	d10f      	bne.n	f16 <system_clock_source_dfll_set_config+0x56>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     ef6:	7b83      	ldrb	r3, [r0, #14]
     ef8:	069b      	lsls	r3, r3, #26
     efa:	8a42      	ldrh	r2, [r0, #18]
     efc:	4313      	orrs	r3, r2
     efe:	0019      	movs	r1, r3
     f00:	8a03      	ldrh	r3, [r0, #16]
     f02:	041b      	lsls	r3, r3, #16
     f04:	4a0e      	ldr	r2, [pc, #56]	; (f40 <system_clock_source_dfll_set_config+0x80>)
     f06:	4013      	ands	r3, r2
     f08:	430b      	orrs	r3, r1
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
     f0a:	60a3      	str	r3, [r4, #8]
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
     f0c:	6821      	ldr	r1, [r4, #0]
     f0e:	2304      	movs	r3, #4
     f10:	430b      	orrs	r3, r1
     f12:	6023      	str	r3, [r4, #0]
     f14:	e011      	b.n	f3a <system_clock_source_dfll_set_config+0x7a>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     f16:	2b20      	cmp	r3, #32
     f18:	d10f      	bne.n	f3a <system_clock_source_dfll_set_config+0x7a>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     f1a:	7b83      	ldrb	r3, [r0, #14]
     f1c:	069b      	lsls	r3, r3, #26
     f1e:	8a42      	ldrh	r2, [r0, #18]
     f20:	4313      	orrs	r3, r2
     f22:	0019      	movs	r1, r3
     f24:	8a03      	ldrh	r3, [r0, #16]
     f26:	041b      	lsls	r3, r3, #16
     f28:	4a05      	ldr	r2, [pc, #20]	; (f40 <system_clock_source_dfll_set_config+0x80>)
     f2a:	4013      	ands	r3, r2
     f2c:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
     f2e:	4a03      	ldr	r2, [pc, #12]	; (f3c <system_clock_source_dfll_set_config+0x7c>)
     f30:	6093      	str	r3, [r2, #8]
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
     f32:	6813      	ldr	r3, [r2, #0]
     f34:	4903      	ldr	r1, [pc, #12]	; (f44 <system_clock_source_dfll_set_config+0x84>)
     f36:	430b      	orrs	r3, r1
     f38:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
     f3a:	bd10      	pop	{r4, pc}
     f3c:	20000044 	.word	0x20000044
     f40:	03ff0000 	.word	0x03ff0000
     f44:	00000424 	.word	0x00000424

00000f48 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     f48:	2808      	cmp	r0, #8
     f4a:	d803      	bhi.n	f54 <system_clock_source_enable+0xc>
     f4c:	0080      	lsls	r0, r0, #2
     f4e:	4b29      	ldr	r3, [pc, #164]	; (ff4 <system_clock_source_enable+0xac>)
     f50:	581b      	ldr	r3, [r3, r0]
     f52:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     f54:	2017      	movs	r0, #23
     f56:	e04b      	b.n	ff0 <system_clock_source_enable+0xa8>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
     f58:	4a27      	ldr	r2, [pc, #156]	; (ff8 <system_clock_source_enable+0xb0>)
     f5a:	7d11      	ldrb	r1, [r2, #20]
     f5c:	2302      	movs	r3, #2
     f5e:	430b      	orrs	r3, r1
     f60:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
     f62:	2000      	movs	r0, #0
     f64:	e044      	b.n	ff0 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
     f66:	4a25      	ldr	r2, [pc, #148]	; (ffc <system_clock_source_enable+0xb4>)
     f68:	6991      	ldr	r1, [r2, #24]
     f6a:	2302      	movs	r3, #2
     f6c:	430b      	orrs	r3, r1
     f6e:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     f70:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;
     f72:	e03d      	b.n	ff0 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
     f74:	4a20      	ldr	r2, [pc, #128]	; (ff8 <system_clock_source_enable+0xb0>)
     f76:	8a11      	ldrh	r1, [r2, #16]
     f78:	2302      	movs	r3, #2
     f7a:	430b      	orrs	r3, r1
     f7c:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     f7e:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;
     f80:	e036      	b.n	ff0 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
     f82:	4a1e      	ldr	r2, [pc, #120]	; (ffc <system_clock_source_enable+0xb4>)
     f84:	6951      	ldr	r1, [r2, #20]
     f86:	2302      	movs	r3, #2
     f88:	430b      	orrs	r3, r1
     f8a:	6153      	str	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     f8c:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
		break;
     f8e:	e02f      	b.n	ff0 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
     f90:	491b      	ldr	r1, [pc, #108]	; (1000 <system_clock_source_enable+0xb8>)
     f92:	680b      	ldr	r3, [r1, #0]
     f94:	2202      	movs	r2, #2
     f96:	4313      	orrs	r3, r2
     f98:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
     f9a:	4b17      	ldr	r3, [pc, #92]	; (ff8 <system_clock_source_enable+0xb0>)
     f9c:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
     f9e:	0019      	movs	r1, r3
     fa0:	32fe      	adds	r2, #254	; 0xfe
     fa2:	68cb      	ldr	r3, [r1, #12]
     fa4:	4213      	tst	r3, r2
     fa6:	d0fc      	beq.n	fa2 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     fa8:	4a15      	ldr	r2, [pc, #84]	; (1000 <system_clock_source_enable+0xb8>)
     faa:	6891      	ldr	r1, [r2, #8]
     fac:	4b12      	ldr	r3, [pc, #72]	; (ff8 <system_clock_source_enable+0xb0>)
     fae:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     fb0:	6852      	ldr	r2, [r2, #4]
     fb2:	61da      	str	r2, [r3, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
     fb4:	2200      	movs	r2, #0
     fb6:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
     fb8:	0019      	movs	r1, r3
     fba:	3201      	adds	r2, #1
     fbc:	32ff      	adds	r2, #255	; 0xff
     fbe:	68cb      	ldr	r3, [r1, #12]
     fc0:	4213      	tst	r3, r2
     fc2:	d0fc      	beq.n	fbe <system_clock_source_enable+0x76>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     fc4:	4b0e      	ldr	r3, [pc, #56]	; (1000 <system_clock_source_enable+0xb8>)
     fc6:	681b      	ldr	r3, [r3, #0]
     fc8:	b29b      	uxth	r3, r3
     fca:	4a0b      	ldr	r2, [pc, #44]	; (ff8 <system_clock_source_enable+0xb0>)
     fcc:	8313      	strh	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     fce:	2000      	movs	r0, #0
     fd0:	e00e      	b.n	ff0 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
     fd2:	4909      	ldr	r1, [pc, #36]	; (ff8 <system_clock_source_enable+0xb0>)
     fd4:	2228      	movs	r2, #40	; 0x28
     fd6:	5c88      	ldrb	r0, [r1, r2]
     fd8:	2302      	movs	r3, #2
     fda:	4303      	orrs	r3, r0
     fdc:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
     fde:	0008      	movs	r0, r1
     fe0:	2138      	movs	r1, #56	; 0x38
     fe2:	3a26      	subs	r2, #38	; 0x26
     fe4:	5c43      	ldrb	r3, [r0, r1]
     fe6:	4213      	tst	r3, r2
     fe8:	d1fc      	bne.n	fe4 <system_clock_source_enable+0x9c>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     fea:	2000      	movs	r0, #0
     fec:	e000      	b.n	ff0 <system_clock_source_enable+0xa8>
		}
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
     fee:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
     ff0:	4770      	bx	lr
     ff2:	46c0      	nop			; (mov r8, r8)
     ff4:	000028b4 	.word	0x000028b4
     ff8:	40000c00 	.word	0x40000c00
     ffc:	40001000 	.word	0x40001000
    1000:	20000044 	.word	0x20000044

00001004 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1004:	2808      	cmp	r0, #8
    1006:	d832      	bhi.n	106e <system_clock_source_disable+0x6a>
    1008:	0080      	lsls	r0, r0, #2
    100a:	4b1a      	ldr	r3, [pc, #104]	; (1074 <system_clock_source_disable+0x70>)
    100c:	581b      	ldr	r3, [r3, r0]
    100e:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    1010:	4a19      	ldr	r2, [pc, #100]	; (1078 <system_clock_source_disable+0x74>)
    1012:	7d13      	ldrb	r3, [r2, #20]
    1014:	2102      	movs	r1, #2
    1016:	438b      	bics	r3, r1
    1018:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    101a:	2000      	movs	r0, #0
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
		break;
    101c:	e028      	b.n	1070 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    101e:	4a17      	ldr	r2, [pc, #92]	; (107c <system_clock_source_disable+0x78>)
    1020:	6993      	ldr	r3, [r2, #24]
    1022:	2102      	movs	r1, #2
    1024:	438b      	bics	r3, r1
    1026:	6193      	str	r3, [r2, #24]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    1028:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
		break;
    102a:	e021      	b.n	1070 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    102c:	4a12      	ldr	r2, [pc, #72]	; (1078 <system_clock_source_disable+0x74>)
    102e:	8a13      	ldrh	r3, [r2, #16]
    1030:	2102      	movs	r1, #2
    1032:	438b      	bics	r3, r1
    1034:	8213      	strh	r3, [r2, #16]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    1036:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
		break;
    1038:	e01a      	b.n	1070 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    103a:	4a10      	ldr	r2, [pc, #64]	; (107c <system_clock_source_disable+0x78>)
    103c:	6953      	ldr	r3, [r2, #20]
    103e:	2102      	movs	r1, #2
    1040:	438b      	bics	r3, r1
    1042:	6153      	str	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    1044:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
		break;
    1046:	e013      	b.n	1070 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    1048:	4b0d      	ldr	r3, [pc, #52]	; (1080 <system_clock_source_disable+0x7c>)
    104a:	681a      	ldr	r2, [r3, #0]
    104c:	2102      	movs	r1, #2
    104e:	438a      	bics	r2, r1
    1050:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1052:	681b      	ldr	r3, [r3, #0]
    1054:	b29b      	uxth	r3, r3
    1056:	4a08      	ldr	r2, [pc, #32]	; (1078 <system_clock_source_disable+0x74>)
    1058:	8313      	strh	r3, [r2, #24]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    105a:	2000      	movs	r0, #0
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
    105c:	e008      	b.n	1070 <system_clock_source_disable+0x6c>
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    105e:	4906      	ldr	r1, [pc, #24]	; (1078 <system_clock_source_disable+0x74>)
    1060:	2228      	movs	r2, #40	; 0x28
    1062:	5c8b      	ldrb	r3, [r1, r2]
    1064:	2002      	movs	r0, #2
    1066:	4383      	bics	r3, r0
    1068:	548b      	strb	r3, [r1, r2]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    106a:	2000      	movs	r0, #0
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
		break;
    106c:	e000      	b.n	1070 <system_clock_source_disable+0x6c>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    106e:	2017      	movs	r0, #23

	}

	return STATUS_OK;
}
    1070:	4770      	bx	lr
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	000028d8 	.word	0x000028d8
    1078:	40000c00 	.word	0x40000c00
    107c:	40001000 	.word	0x40001000
    1080:	20000044 	.word	0x20000044

00001084 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1084:	b5f0      	push	{r4, r5, r6, r7, lr}
    1086:	4647      	mov	r7, r8
    1088:	b480      	push	{r7}
    108a:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    108c:	2280      	movs	r2, #128	; 0x80
    108e:	0052      	lsls	r2, r2, #1
    1090:	4b76      	ldr	r3, [pc, #472]	; (126c <system_clock_init+0x1e8>)
    1092:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    1094:	3afd      	subs	r2, #253	; 0xfd
    1096:	4b76      	ldr	r3, [pc, #472]	; (1270 <system_clock_init+0x1ec>)
    1098:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    109a:	4a76      	ldr	r2, [pc, #472]	; (1274 <system_clock_init+0x1f0>)
    109c:	6853      	ldr	r3, [r2, #4]
    109e:	211e      	movs	r1, #30
    10a0:	438b      	bics	r3, r1
    10a2:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    10a4:	2380      	movs	r3, #128	; 0x80
    10a6:	05db      	lsls	r3, r3, #23
    10a8:	789b      	ldrb	r3, [r3, #2]
    10aa:	2b02      	cmp	r3, #2
    10ac:	d00f      	beq.n	10ce <system_clock_init+0x4a>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    10ae:	2380      	movs	r3, #128	; 0x80
    10b0:	05db      	lsls	r3, r3, #23
    10b2:	789b      	ldrb	r3, [r3, #2]
    10b4:	b25b      	sxtb	r3, r3
    10b6:	2b00      	cmp	r3, #0
    10b8:	db09      	blt.n	10ce <system_clock_init+0x4a>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    10ba:	2380      	movs	r3, #128	; 0x80
    10bc:	05db      	lsls	r3, r3, #23
    10be:	2201      	movs	r2, #1
    10c0:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    10c2:	3201      	adds	r2, #1
    10c4:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    10c6:	001a      	movs	r2, r3
    10c8:	7993      	ldrb	r3, [r2, #6]
    10ca:	2b00      	cmp	r3, #0
    10cc:	d0fc      	beq.n	10c8 <system_clock_init+0x44>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    10ce:	a809      	add	r0, sp, #36	; 0x24
    10d0:	2300      	movs	r3, #0
    10d2:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->frequency           = 32768UL;
    10d4:	2280      	movs	r2, #128	; 0x80
    10d6:	0212      	lsls	r2, r2, #8
    10d8:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    10da:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    10dc:	2201      	movs	r2, #1
    10de:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    10e0:	7203      	strb	r3, [r0, #8]
	config->on_demand           = true;
	config->write_once          = false;
    10e2:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    10e4:	3203      	adds	r2, #3
    10e6:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    10e8:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    10ea:	4b63      	ldr	r3, [pc, #396]	; (1278 <system_clock_init+0x1f4>)
    10ec:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    10ee:	2005      	movs	r0, #5
    10f0:	4b62      	ldr	r3, [pc, #392]	; (127c <system_clock_init+0x1f8>)
    10f2:	4798      	blx	r3
		mask = OSCCTRL_STATUS_XOSCRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    10f4:	4962      	ldr	r1, [pc, #392]	; (1280 <system_clock_init+0x1fc>)
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    10f6:	2201      	movs	r2, #1
		mask = OSCCTRL_STATUS_XOSCRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    10f8:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    10fa:	421a      	tst	r2, r3
    10fc:	d0fc      	beq.n	10f8 <system_clock_init+0x74>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    10fe:	4a60      	ldr	r2, [pc, #384]	; (1280 <system_clock_init+0x1fc>)
    1100:	6951      	ldr	r1, [r2, #20]
    1102:	2380      	movs	r3, #128	; 0x80
    1104:	430b      	orrs	r3, r1
    1106:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1108:	a901      	add	r1, sp, #4
    110a:	2301      	movs	r3, #1
    110c:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    110e:	2400      	movs	r4, #0
    1110:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1112:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    1114:	724c      	strb	r4, [r1, #9]
	struct system_gclk_gen_config gclk_conf;
	struct system_clock_source_osc16m_config osc16m_conf;

	/* Select OSCULP32K as new clock source for mainclock temporarily */
	system_gclk_gen_get_config_defaults(&gclk_conf);
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    1116:	2503      	movs	r5, #3
    1118:	700d      	strb	r5, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    111a:	2000      	movs	r0, #0
    111c:	4b59      	ldr	r3, [pc, #356]	; (1284 <system_clock_init+0x200>)
    111e:	4798      	blx	r3

	/* GCLK0 is enabled after POR */

	/* Disable OSC16M clock*/
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    1120:	2006      	movs	r0, #6
    1122:	4b59      	ldr	r3, [pc, #356]	; (1288 <system_clock_init+0x204>)
    1124:	4798      	blx	r3
		struct system_clock_source_osc16m_config *const config)
{
	Assert(config);

	config->fsel = SYSTEM_OSC16M_4M;
	config->run_in_standby  = false;
    1126:	466b      	mov	r3, sp
    1128:	705c      	strb	r4, [r3, #1]

	/* Switch to new frequency selection and enable OSC16M */
	system_clock_source_osc16m_get_config_defaults(&osc16m_conf);
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    112a:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    112c:	709c      	strb	r4, [r3, #2]
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	system_clock_source_osc16m_set_config(&osc16m_conf);
    112e:	4668      	mov	r0, sp
    1130:	4b56      	ldr	r3, [pc, #344]	; (128c <system_clock_init+0x208>)
    1132:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    1134:	2006      	movs	r0, #6
    1136:	4b51      	ldr	r3, [pc, #324]	; (127c <system_clock_init+0x1f8>)
    1138:	4798      	blx	r3
	uint32_t mask = 0;

	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		mask = OSCCTRL_STATUS_OSC16MRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    113a:	494c      	ldr	r1, [pc, #304]	; (126c <system_clock_init+0x1e8>)
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
	osc16m_conf.on_demand       = 0;
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	system_clock_source_osc16m_set_config(&osc16m_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    113c:	2210      	movs	r2, #16
	uint32_t mask = 0;

	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		mask = OSCCTRL_STATUS_OSC16MRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    113e:	68cb      	ldr	r3, [r1, #12]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
	osc16m_conf.on_demand       = 0;
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	system_clock_source_osc16m_set_config(&osc16m_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    1140:	421a      	tst	r2, r3
    1142:	d0fc      	beq.n	113e <system_clock_init+0xba>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1144:	a901      	add	r1, sp, #4
    1146:	2301      	movs	r3, #1
    1148:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    114a:	2400      	movs	r4, #0
    114c:	704c      	strb	r4, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
    114e:	3305      	adds	r3, #5
    1150:	700b      	strb	r3, [r1, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1152:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    1154:	724c      	strb	r4, [r1, #9]

	/* Select OSC16M for mainclock again */
	system_gclk_gen_get_config_defaults(&gclk_conf);
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_OSC16M;
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    1156:	2000      	movs	r0, #0
    1158:	4b4a      	ldr	r3, [pc, #296]	; (1284 <system_clock_init+0x200>)
    115a:	4798      	blx	r3
	if (CONF_CLOCK_OSC16M_ON_DEMAND){
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    115c:	4a43      	ldr	r2, [pc, #268]	; (126c <system_clock_init+0x1e8>)
    115e:	7d11      	ldrb	r1, [r2, #20]
    1160:	2380      	movs	r3, #128	; 0x80
    1162:	430b      	orrs	r3, r1
    1164:	7513      	strb	r3, [r2, #20]
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1166:	ab04      	add	r3, sp, #16
    1168:	2200      	movs	r2, #0
    116a:	809c      	strh	r4, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    116c:	80dc      	strh	r4, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    116e:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1170:	725a      	strb	r2, [r3, #9]
	config->on_demand       = true;
	config->run_in_stanby   = false;
    1172:	709a      	strb	r2, [r3, #2]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    1174:	213f      	movs	r1, #63	; 0x3f
    1176:	8199      	strh	r1, [r3, #12]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1178:	393b      	subs	r1, #59	; 0x3b
    117a:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    117c:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    117e:	4b44      	ldr	r3, [pc, #272]	; (1290 <system_clock_init+0x20c>)
    1180:	681b      	ldr	r3, [r3, #0]
    1182:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    1184:	2b3f      	cmp	r3, #63	; 0x3f
    1186:	d100      	bne.n	118a <system_clock_init+0x106>
		coarse = 0x1f;
    1188:	3b20      	subs	r3, #32
	}

	dfll_conf.coarse_value = coarse;
    118a:	a804      	add	r0, sp, #16
    118c:	7283      	strb	r3, [r0, #10]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    118e:	23b7      	movs	r3, #183	; 0xb7
    1190:	00db      	lsls	r3, r3, #3
    1192:	8243      	strh	r3, [r0, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1194:	2303      	movs	r3, #3
    1196:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1198:	331c      	adds	r3, #28
    119a:	8203      	strh	r3, [r0, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    119c:	4b3d      	ldr	r3, [pc, #244]	; (1294 <system_clock_init+0x210>)
    119e:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    11a0:	4b3d      	ldr	r3, [pc, #244]	; (1298 <system_clock_init+0x214>)
    11a2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    11a4:	ac01      	add	r4, sp, #4
    11a6:	2601      	movs	r6, #1
    11a8:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    11aa:	2500      	movs	r5, #0
    11ac:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    11ae:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    11b0:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    11b2:	2305      	movs	r3, #5
    11b4:	7023      	strb	r3, [r4, #0]
    11b6:	0021      	movs	r1, r4
    11b8:	2001      	movs	r0, #1
    11ba:	4b32      	ldr	r3, [pc, #200]	; (1284 <system_clock_init+0x200>)
    11bc:	4698      	mov	r8, r3
    11be:	4798      	blx	r3
    11c0:	2001      	movs	r0, #1
    11c2:	4f36      	ldr	r7, [pc, #216]	; (129c <system_clock_init+0x218>)
    11c4:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    11c6:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    11c8:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    11ca:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    11cc:	7265      	strb	r5, [r4, #9]
    11ce:	2307      	movs	r3, #7
    11d0:	7023      	strb	r3, [r4, #0]
    11d2:	0021      	movs	r1, r4
    11d4:	2003      	movs	r0, #3
    11d6:	47c0      	blx	r8
    11d8:	2003      	movs	r0, #3
    11da:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    11dc:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    11de:	0021      	movs	r1, r4
    11e0:	2000      	movs	r0, #0
    11e2:	4b2f      	ldr	r3, [pc, #188]	; (12a0 <system_clock_init+0x21c>)
    11e4:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    11e6:	2000      	movs	r0, #0
    11e8:	4b2e      	ldr	r3, [pc, #184]	; (12a4 <system_clock_init+0x220>)
    11ea:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    11ec:	2007      	movs	r0, #7
    11ee:	4b23      	ldr	r3, [pc, #140]	; (127c <system_clock_init+0x1f8>)
    11f0:	4798      	blx	r3
			mask = (OSCCTRL_STATUS_DFLLRDY |
			        OSCCTRL_STATUS_DFLLLCKF | OSCCTRL_STATUS_DFLLLCKC);
		} else {
			mask = OSCCTRL_STATUS_DFLLRDY;
		}
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    11f2:	491e      	ldr	r1, [pc, #120]	; (126c <system_clock_init+0x1e8>)
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    11f4:	22d0      	movs	r2, #208	; 0xd0
    11f6:	0112      	lsls	r2, r2, #4
			mask = (OSCCTRL_STATUS_DFLLRDY |
			        OSCCTRL_STATUS_DFLLLCKF | OSCCTRL_STATUS_DFLLLCKC);
		} else {
			mask = OSCCTRL_STATUS_DFLLRDY;
		}
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    11f8:	68cb      	ldr	r3, [r1, #12]
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    11fa:	4013      	ands	r3, r2
    11fc:	4293      	cmp	r3, r2
    11fe:	d1fb      	bne.n	11f8 <system_clock_init+0x174>
 * \param[in] divider  CPU clock divider
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    1200:	4c29      	ldr	r4, [pc, #164]	; (12a8 <system_clock_init+0x224>)
    1202:	2301      	movs	r3, #1
    1204:	71a3      	strb	r3, [r4, #6]
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_low_power_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    1206:	7163      	strb	r3, [r4, #5]
 * \param[in] divider  CPU clock divider
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    1208:	7123      	strb	r3, [r4, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    120a:	a901      	add	r1, sp, #4
    120c:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    120e:	2300      	movs	r3, #0
    1210:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
    1212:	2206      	movs	r2, #6
    1214:	700a      	strb	r2, [r1, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1216:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1218:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    121a:	2000      	movs	r0, #0
    121c:	4b19      	ldr	r3, [pc, #100]	; (1284 <system_clock_init+0x200>)
    121e:	4798      	blx	r3
    1220:	2000      	movs	r0, #0
    1222:	4b1e      	ldr	r3, [pc, #120]	; (129c <system_clock_init+0x218>)
    1224:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    1226:	2000      	movs	r0, #0
    1228:	4b20      	ldr	r3, [pc, #128]	; (12ac <system_clock_init+0x228>)
    122a:	4798      	blx	r3
    122c:	7921      	ldrb	r1, [r4, #4]
    122e:	b2c9      	uxtb	r1, r1
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    1230:	4b1f      	ldr	r3, [pc, #124]	; (12b0 <system_clock_init+0x22c>)
    1232:	4798      	blx	r3
    1234:	4b1f      	ldr	r3, [pc, #124]	; (12b4 <system_clock_init+0x230>)
    1236:	4298      	cmp	r0, r3
    1238:	d814      	bhi.n	1264 <system_clock_init+0x1e0>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    123a:	2380      	movs	r3, #128	; 0x80
    123c:	05db      	lsls	r3, r3, #23
    123e:	789b      	ldrb	r3, [r3, #2]
    1240:	2b00      	cmp	r3, #0
    1242:	d00f      	beq.n	1264 <system_clock_init+0x1e0>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    1244:	2380      	movs	r3, #128	; 0x80
    1246:	05db      	lsls	r3, r3, #23
    1248:	789b      	ldrb	r3, [r3, #2]
    124a:	b25b      	sxtb	r3, r3
    124c:	2b00      	cmp	r3, #0
    124e:	db09      	blt.n	1264 <system_clock_init+0x1e0>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    1250:	2380      	movs	r3, #128	; 0x80
    1252:	05db      	lsls	r3, r3, #23
    1254:	2201      	movs	r2, #1
    1256:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    1258:	2200      	movs	r2, #0
    125a:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    125c:	001a      	movs	r2, r3
    125e:	7993      	ldrb	r3, [r2, #6]
    1260:	2b00      	cmp	r3, #0
    1262:	d0fc      	beq.n	125e <system_clock_init+0x1da>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    1264:	b00c      	add	sp, #48	; 0x30
    1266:	bc04      	pop	{r2}
    1268:	4690      	mov	r8, r2
    126a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    126c:	40000c00 	.word	0x40000c00
    1270:	40001400 	.word	0x40001400
    1274:	41004000 	.word	0x41004000
    1278:	00000e0d 	.word	0x00000e0d
    127c:	00000f49 	.word	0x00000f49
    1280:	40001000 	.word	0x40001000
    1284:	000012dd 	.word	0x000012dd
    1288:	00001005 	.word	0x00001005
    128c:	00000dd5 	.word	0x00000dd5
    1290:	00806020 	.word	0x00806020
    1294:	00000ec1 	.word	0x00000ec1
    1298:	000012b9 	.word	0x000012b9
    129c:	00001389 	.word	0x00001389
    12a0:	000014a5 	.word	0x000014a5
    12a4:	00001435 	.word	0x00001435
    12a8:	40000400 	.word	0x40000400
    12ac:	000013c9 	.word	0x000013c9
    12b0:	00002661 	.word	0x00002661
    12b4:	00b71b00 	.word	0x00b71b00

000012b8 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    12b8:	4a06      	ldr	r2, [pc, #24]	; (12d4 <system_gclk_init+0x1c>)
    12ba:	6951      	ldr	r1, [r2, #20]
    12bc:	2340      	movs	r3, #64	; 0x40
    12be:	430b      	orrs	r3, r1
    12c0:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    12c2:	2201      	movs	r2, #1
    12c4:	4b04      	ldr	r3, [pc, #16]	; (12d8 <system_gclk_init+0x20>)
    12c6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    12c8:	0019      	movs	r1, r3
    12ca:	780b      	ldrb	r3, [r1, #0]
    12cc:	4213      	tst	r3, r2
    12ce:	d1fc      	bne.n	12ca <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    12d0:	4770      	bx	lr
    12d2:	46c0      	nop			; (mov r8, r8)
    12d4:	40000400 	.word	0x40000400
    12d8:	40001800 	.word	0x40001800

000012dc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    12dc:	b570      	push	{r4, r5, r6, lr}
    12de:	0005      	movs	r5, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    12e0:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    12e2:	784b      	ldrb	r3, [r1, #1]
    12e4:	2b00      	cmp	r3, #0
    12e6:	d002      	beq.n	12ee <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    12e8:	2380      	movs	r3, #128	; 0x80
    12ea:	00db      	lsls	r3, r3, #3
    12ec:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    12ee:	7a4b      	ldrb	r3, [r1, #9]
    12f0:	2b00      	cmp	r3, #0
    12f2:	d002      	beq.n	12fa <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    12f4:	2380      	movs	r3, #128	; 0x80
    12f6:	011b      	lsls	r3, r3, #4
    12f8:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    12fa:	684a      	ldr	r2, [r1, #4]
    12fc:	2a01      	cmp	r2, #1
    12fe:	d917      	bls.n	1330 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1300:	1e53      	subs	r3, r2, #1
    1302:	421a      	tst	r2, r3
    1304:	d10f      	bne.n	1326 <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1306:	2a02      	cmp	r2, #2
    1308:	d906      	bls.n	1318 <system_gclk_gen_set_config+0x3c>
    130a:	2302      	movs	r3, #2
    130c:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    130e:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1310:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1312:	429a      	cmp	r2, r3
    1314:	d8fb      	bhi.n	130e <system_gclk_gen_set_config+0x32>
    1316:	e000      	b.n	131a <system_gclk_gen_set_config+0x3e>
    1318:	2000      	movs	r0, #0
    131a:	2380      	movs	r3, #128	; 0x80
    131c:	015b      	lsls	r3, r3, #5
    131e:	431c      	orrs	r4, r3
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1320:	0400      	lsls	r0, r0, #16
    1322:	4304      	orrs	r4, r0
    1324:	e004      	b.n	1330 <system_gclk_gen_set_config+0x54>

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1326:	0412      	lsls	r2, r2, #16
    1328:	2380      	movs	r3, #128	; 0x80
    132a:	009b      	lsls	r3, r3, #2
    132c:	431a      	orrs	r2, r3
    132e:	4314      	orrs	r4, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1330:	7a0b      	ldrb	r3, [r1, #8]
    1332:	2b00      	cmp	r3, #0
    1334:	d002      	beq.n	133c <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1336:	2380      	movs	r3, #128	; 0x80
    1338:	019b      	lsls	r3, r3, #6
    133a:	431c      	orrs	r4, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    133c:	2604      	movs	r6, #4
    133e:	40ae      	lsls	r6, r5
    1340:	490d      	ldr	r1, [pc, #52]	; (1378 <system_gclk_gen_set_config+0x9c>)
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    1342:	4a0e      	ldr	r2, [pc, #56]	; (137c <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1344:	684b      	ldr	r3, [r1, #4]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    1346:	4013      	ands	r3, r2
    1348:	421e      	tst	r6, r3
    134a:	d1fb      	bne.n	1344 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    134c:	4b0c      	ldr	r3, [pc, #48]	; (1380 <system_gclk_gen_set_config+0xa4>)
    134e:	4798      	blx	r3
    1350:	00ad      	lsls	r5, r5, #2
    1352:	4b09      	ldr	r3, [pc, #36]	; (1378 <system_gclk_gen_set_config+0x9c>)
    1354:	469c      	mov	ip, r3
    1356:	4465      	add	r5, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    1358:	6a28      	ldr	r0, [r5, #32]
    135a:	2380      	movs	r3, #128	; 0x80
    135c:	005b      	lsls	r3, r3, #1
    135e:	4018      	ands	r0, r3
    1360:	4320      	orrs	r0, r4
    1362:	6228      	str	r0, [r5, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1364:	4661      	mov	r1, ip

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    1366:	4a05      	ldr	r2, [pc, #20]	; (137c <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1368:	684b      	ldr	r3, [r1, #4]

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    136a:	4013      	ands	r3, r2
    136c:	421e      	tst	r6, r3
    136e:	d1fb      	bne.n	1368 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1370:	4b04      	ldr	r3, [pc, #16]	; (1384 <system_gclk_gen_set_config+0xa8>)
    1372:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    1374:	bd70      	pop	{r4, r5, r6, pc}
    1376:	46c0      	nop			; (mov r8, r8)
    1378:	40001800 	.word	0x40001800
    137c:	000007fc 	.word	0x000007fc
    1380:	00000115 	.word	0x00000115
    1384:	00000155 	.word	0x00000155

00001388 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1388:	b510      	push	{r4, lr}
    138a:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    138c:	2204      	movs	r2, #4
    138e:	4082      	lsls	r2, r0
    1390:	4809      	ldr	r0, [pc, #36]	; (13b8 <system_gclk_gen_enable+0x30>)
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    1392:	490a      	ldr	r1, [pc, #40]	; (13bc <system_gclk_gen_enable+0x34>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1394:	6843      	ldr	r3, [r0, #4]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    1396:	400b      	ands	r3, r1
    1398:	421a      	tst	r2, r3
    139a:	d1fb      	bne.n	1394 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    139c:	4b08      	ldr	r3, [pc, #32]	; (13c0 <system_gclk_gen_enable+0x38>)
    139e:	4798      	blx	r3
    13a0:	00a4      	lsls	r4, r4, #2
    13a2:	4b05      	ldr	r3, [pc, #20]	; (13b8 <system_gclk_gen_enable+0x30>)
    13a4:	469c      	mov	ip, r3
    13a6:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    13a8:	6a23      	ldr	r3, [r4, #32]
    13aa:	2280      	movs	r2, #128	; 0x80
    13ac:	0052      	lsls	r2, r2, #1
    13ae:	4313      	orrs	r3, r2
    13b0:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    13b2:	4b04      	ldr	r3, [pc, #16]	; (13c4 <system_gclk_gen_enable+0x3c>)
    13b4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    13b6:	bd10      	pop	{r4, pc}
    13b8:	40001800 	.word	0x40001800
    13bc:	000007fc 	.word	0x000007fc
    13c0:	00000115 	.word	0x00000115
    13c4:	00000155 	.word	0x00000155

000013c8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    13c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13ca:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    13cc:	2204      	movs	r2, #4
    13ce:	4082      	lsls	r2, r0
    13d0:	4812      	ldr	r0, [pc, #72]	; (141c <system_gclk_gen_get_hz+0x54>)
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    13d2:	4913      	ldr	r1, [pc, #76]	; (1420 <system_gclk_gen_get_hz+0x58>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    13d4:	6843      	ldr	r3, [r0, #4]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    13d6:	400b      	ands	r3, r1
    13d8:	421a      	tst	r2, r3
    13da:	d1fb      	bne.n	13d4 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    13dc:	4b11      	ldr	r3, [pc, #68]	; (1424 <system_gclk_gen_get_hz+0x5c>)
    13de:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    13e0:	4f0e      	ldr	r7, [pc, #56]	; (141c <system_gclk_gen_get_hz+0x54>)
    13e2:	3408      	adds	r4, #8
    13e4:	00a4      	lsls	r4, r4, #2
    13e6:	59e0      	ldr	r0, [r4, r7]
    13e8:	0700      	lsls	r0, r0, #28
    13ea:	0f00      	lsrs	r0, r0, #28
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    13ec:	4b0e      	ldr	r3, [pc, #56]	; (1428 <system_gclk_gen_get_hz+0x60>)
    13ee:	4798      	blx	r3
    13f0:	0006      	movs	r6, r0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    13f2:	59e5      	ldr	r5, [r4, r7]
    13f4:	04ed      	lsls	r5, r5, #19
    13f6:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    13f8:	59e4      	ldr	r4, [r4, r7]
    13fa:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    13fc:	4b0b      	ldr	r3, [pc, #44]	; (142c <system_gclk_gen_get_hz+0x64>)
    13fe:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1400:	2d00      	cmp	r5, #0
    1402:	d107      	bne.n	1414 <system_gclk_gen_get_hz+0x4c>
    1404:	2c01      	cmp	r4, #1
    1406:	d907      	bls.n	1418 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1408:	0021      	movs	r1, r4
    140a:	0030      	movs	r0, r6
    140c:	4b08      	ldr	r3, [pc, #32]	; (1430 <system_gclk_gen_get_hz+0x68>)
    140e:	4798      	blx	r3
    1410:	0006      	movs	r6, r0
    1412:	e001      	b.n	1418 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1414:	3401      	adds	r4, #1
    1416:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1418:	0030      	movs	r0, r6
    141a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    141c:	40001800 	.word	0x40001800
    1420:	000007fc 	.word	0x000007fc
    1424:	00000115 	.word	0x00000115
    1428:	00000d41 	.word	0x00000d41
    142c:	00000155 	.word	0x00000155
    1430:	00002661 	.word	0x00002661

00001434 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1434:	b510      	push	{r4, lr}
    1436:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1438:	4b09      	ldr	r3, [pc, #36]	; (1460 <system_gclk_chan_enable+0x2c>)
    143a:	4798      	blx	r3
    143c:	00a0      	lsls	r0, r4, #2
    143e:	4b09      	ldr	r3, [pc, #36]	; (1464 <system_gclk_chan_enable+0x30>)
    1440:	469c      	mov	ip, r3
    1442:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    1444:	2280      	movs	r2, #128	; 0x80
    1446:	5881      	ldr	r1, [r0, r2]
    1448:	2340      	movs	r3, #64	; 0x40
    144a:	430b      	orrs	r3, r1
    144c:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    144e:	2180      	movs	r1, #128	; 0x80
    1450:	3a40      	subs	r2, #64	; 0x40
    1452:	5843      	ldr	r3, [r0, r1]
    1454:	421a      	tst	r2, r3
    1456:	d0fc      	beq.n	1452 <system_gclk_chan_enable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1458:	4b03      	ldr	r3, [pc, #12]	; (1468 <system_gclk_chan_enable+0x34>)
    145a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    145c:	bd10      	pop	{r4, pc}
    145e:	46c0      	nop			; (mov r8, r8)
    1460:	00000115 	.word	0x00000115
    1464:	40001800 	.word	0x40001800
    1468:	00000155 	.word	0x00000155

0000146c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    146c:	b510      	push	{r4, lr}
    146e:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1470:	4b09      	ldr	r3, [pc, #36]	; (1498 <system_gclk_chan_disable+0x2c>)
    1472:	4798      	blx	r3
    1474:	00a0      	lsls	r0, r4, #2
    1476:	4b09      	ldr	r3, [pc, #36]	; (149c <system_gclk_chan_disable+0x30>)
    1478:	469c      	mov	ip, r3
    147a:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    147c:	2280      	movs	r2, #128	; 0x80
    147e:	5883      	ldr	r3, [r0, r2]
    1480:	2140      	movs	r1, #64	; 0x40
    1482:	438b      	bics	r3, r1
    1484:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    1486:	3140      	adds	r1, #64	; 0x40
    1488:	3a40      	subs	r2, #64	; 0x40
    148a:	5843      	ldr	r3, [r0, r1]
    148c:	421a      	tst	r2, r3
    148e:	d1fc      	bne.n	148a <system_gclk_chan_disable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1490:	4b03      	ldr	r3, [pc, #12]	; (14a0 <system_gclk_chan_disable+0x34>)
    1492:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1494:	bd10      	pop	{r4, pc}
    1496:	46c0      	nop			; (mov r8, r8)
    1498:	00000115 	.word	0x00000115
    149c:	40001800 	.word	0x40001800
    14a0:	00000155 	.word	0x00000155

000014a4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    14a4:	b570      	push	{r4, r5, r6, lr}
    14a6:	0004      	movs	r4, r0
    14a8:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    14aa:	4b05      	ldr	r3, [pc, #20]	; (14c0 <system_gclk_chan_set_config+0x1c>)
    14ac:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    14ae:	782b      	ldrb	r3, [r5, #0]
    14b0:	220f      	movs	r2, #15
    14b2:	4013      	ands	r3, r2
    14b4:	3420      	adds	r4, #32
    14b6:	00a4      	lsls	r4, r4, #2
    14b8:	4a02      	ldr	r2, [pc, #8]	; (14c4 <system_gclk_chan_set_config+0x20>)
    14ba:	50a3      	str	r3, [r4, r2]


}
    14bc:	bd70      	pop	{r4, r5, r6, pc}
    14be:	46c0      	nop			; (mov r8, r8)
    14c0:	0000146d 	.word	0x0000146d
    14c4:	40001800 	.word	0x40001800

000014c8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    14c8:	b510      	push	{r4, lr}
    14ca:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    14cc:	4b06      	ldr	r3, [pc, #24]	; (14e8 <system_gclk_chan_get_hz+0x20>)
    14ce:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    14d0:	3420      	adds	r4, #32
    14d2:	00a4      	lsls	r4, r4, #2
    14d4:	4b05      	ldr	r3, [pc, #20]	; (14ec <system_gclk_chan_get_hz+0x24>)
    14d6:	58e4      	ldr	r4, [r4, r3]
    14d8:	0724      	lsls	r4, r4, #28
    14da:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    14dc:	4b04      	ldr	r3, [pc, #16]	; (14f0 <system_gclk_chan_get_hz+0x28>)
    14de:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    14e0:	0020      	movs	r0, r4
    14e2:	4b04      	ldr	r3, [pc, #16]	; (14f4 <system_gclk_chan_get_hz+0x2c>)
    14e4:	4798      	blx	r3
}
    14e6:	bd10      	pop	{r4, pc}
    14e8:	00000115 	.word	0x00000115
    14ec:	40001800 	.word	0x40001800
    14f0:	00000155 	.word	0x00000155
    14f4:	000013c9 	.word	0x000013c9

000014f8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    14f8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    14fa:	78d3      	ldrb	r3, [r2, #3]
    14fc:	2b00      	cmp	r3, #0
    14fe:	d11e      	bne.n	153e <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1500:	7813      	ldrb	r3, [r2, #0]
    1502:	2b80      	cmp	r3, #128	; 0x80
    1504:	d004      	beq.n	1510 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1506:	061b      	lsls	r3, r3, #24
    1508:	2480      	movs	r4, #128	; 0x80
    150a:	0264      	lsls	r4, r4, #9
    150c:	4323      	orrs	r3, r4
    150e:	e000      	b.n	1512 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1510:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1512:	7854      	ldrb	r4, [r2, #1]
    1514:	2502      	movs	r5, #2
    1516:	43ac      	bics	r4, r5
    1518:	d10a      	bne.n	1530 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    151a:	7894      	ldrb	r4, [r2, #2]
    151c:	2c00      	cmp	r4, #0
    151e:	d103      	bne.n	1528 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1520:	2480      	movs	r4, #128	; 0x80
    1522:	02a4      	lsls	r4, r4, #10
    1524:	4323      	orrs	r3, r4
    1526:	e002      	b.n	152e <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1528:	24c0      	movs	r4, #192	; 0xc0
    152a:	02e4      	lsls	r4, r4, #11
    152c:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    152e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1530:	7854      	ldrb	r4, [r2, #1]
    1532:	3c01      	subs	r4, #1
    1534:	2c01      	cmp	r4, #1
    1536:	d812      	bhi.n	155e <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1538:	4c18      	ldr	r4, [pc, #96]	; (159c <_system_pinmux_config+0xa4>)
    153a:	4023      	ands	r3, r4
    153c:	e00f      	b.n	155e <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    153e:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1540:	040b      	lsls	r3, r1, #16
    1542:	0c1b      	lsrs	r3, r3, #16
    1544:	24a0      	movs	r4, #160	; 0xa0
    1546:	05e4      	lsls	r4, r4, #23
    1548:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    154a:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    154c:	0c0b      	lsrs	r3, r1, #16
    154e:	24d0      	movs	r4, #208	; 0xd0
    1550:	0624      	lsls	r4, r4, #24
    1552:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1554:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1556:	78d3      	ldrb	r3, [r2, #3]
    1558:	2b00      	cmp	r3, #0
    155a:	d018      	beq.n	158e <_system_pinmux_config+0x96>
    155c:	e01c      	b.n	1598 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    155e:	040c      	lsls	r4, r1, #16
    1560:	0c24      	lsrs	r4, r4, #16
    1562:	25a0      	movs	r5, #160	; 0xa0
    1564:	05ed      	lsls	r5, r5, #23
    1566:	432c      	orrs	r4, r5
    1568:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    156a:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    156c:	0c0c      	lsrs	r4, r1, #16
    156e:	25d0      	movs	r5, #208	; 0xd0
    1570:	062d      	lsls	r5, r5, #24
    1572:	432c      	orrs	r4, r5
    1574:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1576:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1578:	78d4      	ldrb	r4, [r2, #3]
    157a:	2c00      	cmp	r4, #0
    157c:	d10c      	bne.n	1598 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    157e:	035b      	lsls	r3, r3, #13
    1580:	d505      	bpl.n	158e <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1582:	7893      	ldrb	r3, [r2, #2]
    1584:	2b01      	cmp	r3, #1
    1586:	d101      	bne.n	158c <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    1588:	6181      	str	r1, [r0, #24]
    158a:	e000      	b.n	158e <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    158c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    158e:	7853      	ldrb	r3, [r2, #1]
    1590:	3b01      	subs	r3, #1
    1592:	2b01      	cmp	r3, #1
    1594:	d800      	bhi.n	1598 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1596:	6081      	str	r1, [r0, #8]
		}
	}
}
    1598:	bd30      	pop	{r4, r5, pc}
    159a:	46c0      	nop			; (mov r8, r8)
    159c:	fffbffff 	.word	0xfffbffff

000015a0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    15a0:	b510      	push	{r4, lr}
    15a2:	0003      	movs	r3, r0
    15a4:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    15a6:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    15a8:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    15aa:	2900      	cmp	r1, #0
    15ac:	d104      	bne.n	15b8 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    15ae:	0958      	lsrs	r0, r3, #5
    15b0:	01c0      	lsls	r0, r0, #7
    15b2:	4905      	ldr	r1, [pc, #20]	; (15c8 <system_pinmux_pin_set_config+0x28>)
    15b4:	468c      	mov	ip, r1
    15b6:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    15b8:	211f      	movs	r1, #31
    15ba:	400b      	ands	r3, r1
    15bc:	391e      	subs	r1, #30
    15be:	4099      	lsls	r1, r3
    15c0:	4b02      	ldr	r3, [pc, #8]	; (15cc <system_pinmux_pin_set_config+0x2c>)
    15c2:	4798      	blx	r3
}
    15c4:	bd10      	pop	{r4, pc}
    15c6:	46c0      	nop			; (mov r8, r8)
    15c8:	40002800 	.word	0x40002800
    15cc:	000014f9 	.word	0x000014f9

000015d0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    15d0:	4770      	bx	lr
    15d2:	46c0      	nop			; (mov r8, r8)

000015d4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    15d4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    15d6:	4b05      	ldr	r3, [pc, #20]	; (15ec <system_init+0x18>)
    15d8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    15da:	4b05      	ldr	r3, [pc, #20]	; (15f0 <system_init+0x1c>)
    15dc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    15de:	4b05      	ldr	r3, [pc, #20]	; (15f4 <system_init+0x20>)
    15e0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    15e2:	4b05      	ldr	r3, [pc, #20]	; (15f8 <system_init+0x24>)
    15e4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    15e6:	4b05      	ldr	r3, [pc, #20]	; (15fc <system_init+0x28>)
    15e8:	4798      	blx	r3
}
    15ea:	bd10      	pop	{r4, pc}
    15ec:	00001085 	.word	0x00001085
    15f0:	00000185 	.word	0x00000185
    15f4:	000015d1 	.word	0x000015d1
    15f8:	00000245 	.word	0x00000245
    15fc:	000015d1 	.word	0x000015d1

00001600 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    1600:	b5f0      	push	{r4, r5, r6, r7, lr}
    1602:	465f      	mov	r7, fp
    1604:	4656      	mov	r6, sl
    1606:	464d      	mov	r5, r9
    1608:	4644      	mov	r4, r8
    160a:	b4f0      	push	{r4, r5, r6, r7}
    160c:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    160e:	4bcb      	ldr	r3, [pc, #812]	; (193c <USB_Handler+0x33c>)
    1610:	681f      	ldr	r7, [r3, #0]
    1612:	683d      	ldr	r5, [r7, #0]
    1614:	782b      	ldrb	r3, [r5, #0]
    1616:	09db      	lsrs	r3, r3, #7
    1618:	d100      	bne.n	161c <USB_Handler+0x1c>
    161a:	e15a      	b.n	18d2 <USB_Handler+0x2d2>
{
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    161c:	8c2b      	ldrh	r3, [r5, #32]
    161e:	b29b      	uxth	r3, r3
    1620:	2b00      	cmp	r3, #0
    1622:	d100      	bne.n	1626 <USB_Handler+0x26>
    1624:	e0db      	b.n	17de <USB_Handler+0x1de>
    1626:	8c28      	ldrh	r0, [r5, #32]
    1628:	b280      	uxth	r0, r0
    162a:	4bc5      	ldr	r3, [pc, #788]	; (1940 <USB_Handler+0x340>)
    162c:	4798      	blx	r3
    162e:	1e04      	subs	r4, r0, #0
	if (pipe_int < 32) {
    1630:	2c1f      	cmp	r4, #31
    1632:	d900      	bls.n	1636 <USB_Handler+0x36>
    1634:	e0d3      	b.n	17de <USB_Handler+0x1de>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    1636:	0003      	movs	r3, r0
    1638:	3308      	adds	r3, #8
    163a:	015b      	lsls	r3, r3, #5
    163c:	18ed      	adds	r5, r5, r3
    163e:	79ed      	ldrb	r5, [r5, #7]
    1640:	b2ed      	uxtb	r5, r5

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    1642:	07ab      	lsls	r3, r5, #30
    1644:	d051      	beq.n	16ea <USB_Handler+0xea>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    1646:	4abf      	ldr	r2, [pc, #764]	; (1944 <USB_Handler+0x344>)
    1648:	2301      	movs	r3, #1
    164a:	4083      	lsls	r3, r0
    164c:	6811      	ldr	r1, [r2, #0]
    164e:	4399      	bics	r1, r3
    1650:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1652:	0003      	movs	r3, r0
    1654:	3308      	adds	r3, #8
    1656:	015b      	lsls	r3, r3, #5
    1658:	683a      	ldr	r2, [r7, #0]
    165a:	4694      	mov	ip, r2
    165c:	4463      	add	r3, ip
    165e:	2203      	movs	r2, #3
    1660:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1662:	183b      	adds	r3, r7, r0
    1664:	33ae      	adds	r3, #174	; 0xae
    1666:	781b      	ldrb	r3, [r3, #0]
    1668:	07db      	lsls	r3, r3, #31
    166a:	d53e      	bpl.n	16ea <USB_Handler+0xea>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    166c:	4bb6      	ldr	r3, [pc, #728]	; (1948 <USB_Handler+0x348>)
    166e:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    1670:	683a      	ldr	r2, [r7, #0]
    1672:	0003      	movs	r3, r0
    1674:	3308      	adds	r3, #8
    1676:	015b      	lsls	r3, r3, #5
    1678:	5c9b      	ldrb	r3, [r3, r2]
    167a:	079b      	lsls	r3, r3, #30
    167c:	0f9b      	lsrs	r3, r3, #30
    167e:	2b01      	cmp	r3, #1
    1680:	d110      	bne.n	16a4 <USB_Handler+0xa4>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    1682:	0142      	lsls	r2, r0, #5
    1684:	4bb1      	ldr	r3, [pc, #708]	; (194c <USB_Handler+0x34c>)
    1686:	189b      	adds	r3, r3, r2
    1688:	685a      	ldr	r2, [r3, #4]
    168a:	0492      	lsls	r2, r2, #18
    168c:	0c92      	lsrs	r2, r2, #18
    168e:	49ae      	ldr	r1, [pc, #696]	; (1948 <USB_Handler+0x348>)
    1690:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    1692:	685a      	ldr	r2, [r3, #4]
    1694:	0112      	lsls	r2, r2, #4
    1696:	0c92      	lsrs	r2, r2, #18
    1698:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    169a:	685a      	ldr	r2, [r3, #4]
    169c:	0b92      	lsrs	r2, r2, #14
    169e:	0392      	lsls	r2, r2, #14
    16a0:	605a      	str	r2, [r3, #4]
    16a2:	e01a      	b.n	16da <USB_Handler+0xda>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    16a4:	0142      	lsls	r2, r0, #5
    16a6:	4ba9      	ldr	r3, [pc, #676]	; (194c <USB_Handler+0x34c>)
    16a8:	189b      	adds	r3, r3, r2
    16aa:	685a      	ldr	r2, [r3, #4]
    16ac:	0112      	lsls	r2, r2, #4
    16ae:	0c92      	lsrs	r2, r2, #18
    16b0:	b290      	uxth	r0, r2
    16b2:	49a5      	ldr	r1, [pc, #660]	; (1948 <USB_Handler+0x348>)
    16b4:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    16b6:	685a      	ldr	r2, [r3, #4]
    16b8:	0492      	lsls	r2, r2, #18
    16ba:	0c92      	lsrs	r2, r2, #18
    16bc:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    16be:	6859      	ldr	r1, [r3, #4]
    16c0:	4aa3      	ldr	r2, [pc, #652]	; (1950 <USB_Handler+0x350>)
    16c2:	400a      	ands	r2, r1
    16c4:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    16c6:	2800      	cmp	r0, #0
    16c8:	d107      	bne.n	16da <USB_Handler+0xda>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    16ca:	0163      	lsls	r3, r4, #5
    16cc:	4a9f      	ldr	r2, [pc, #636]	; (194c <USB_Handler+0x34c>)
    16ce:	18d3      	adds	r3, r2, r3
    16d0:	685b      	ldr	r3, [r3, #4]
    16d2:	049b      	lsls	r3, r3, #18
    16d4:	0c9b      	lsrs	r3, r3, #18
    16d6:	4a9c      	ldr	r2, [pc, #624]	; (1948 <USB_Handler+0x348>)
    16d8:	8053      	strh	r3, [r2, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    16da:	4b98      	ldr	r3, [pc, #608]	; (193c <USB_Handler+0x33c>)
    16dc:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    16de:	1ca3      	adds	r3, r4, #2
    16e0:	011b      	lsls	r3, r3, #4
    16e2:	18c3      	adds	r3, r0, r3
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
					if (0 == pipe_callback_para.transfered_size) {
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    16e4:	685b      	ldr	r3, [r3, #4]
    16e6:	4998      	ldr	r1, [pc, #608]	; (1948 <USB_Handler+0x348>)
    16e8:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    16ea:	076b      	lsls	r3, r5, #29
    16ec:	d50e      	bpl.n	170c <USB_Handler+0x10c>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    16ee:	4a95      	ldr	r2, [pc, #596]	; (1944 <USB_Handler+0x344>)
    16f0:	2301      	movs	r3, #1
    16f2:	40a3      	lsls	r3, r4
    16f4:	6811      	ldr	r1, [r2, #0]
    16f6:	4399      	bics	r1, r3
    16f8:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    16fa:	4b90      	ldr	r3, [pc, #576]	; (193c <USB_Handler+0x33c>)
    16fc:	681b      	ldr	r3, [r3, #0]
    16fe:	681a      	ldr	r2, [r3, #0]
    1700:	0023      	movs	r3, r4
    1702:	3308      	adds	r3, #8
    1704:	015b      	lsls	r3, r3, #5
    1706:	18d3      	adds	r3, r2, r3
    1708:	2204      	movs	r2, #4
    170a:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    170c:	072b      	lsls	r3, r5, #28
    170e:	d521      	bpl.n	1754 <USB_Handler+0x154>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    1710:	4a8c      	ldr	r2, [pc, #560]	; (1944 <USB_Handler+0x344>)
    1712:	2301      	movs	r3, #1
    1714:	40a3      	lsls	r3, r4
    1716:	6811      	ldr	r1, [r2, #0]
    1718:	4399      	bics	r1, r3
    171a:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    171c:	4b87      	ldr	r3, [pc, #540]	; (193c <USB_Handler+0x33c>)
    171e:	6818      	ldr	r0, [r3, #0]
    1720:	0023      	movs	r3, r4
    1722:	3308      	adds	r3, #8
    1724:	015b      	lsls	r3, r3, #5
    1726:	6802      	ldr	r2, [r0, #0]
    1728:	4694      	mov	ip, r2
    172a:	4463      	add	r3, ip
    172c:	2208      	movs	r2, #8
    172e:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1730:	1903      	adds	r3, r0, r4
    1732:	33ae      	adds	r3, #174	; 0xae
    1734:	781b      	ldrb	r3, [r3, #0]
    1736:	079b      	lsls	r3, r3, #30
    1738:	d50c      	bpl.n	1754 <USB_Handler+0x154>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    173a:	4983      	ldr	r1, [pc, #524]	; (1948 <USB_Handler+0x348>)
    173c:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    173e:	0163      	lsls	r3, r4, #5
    1740:	4a82      	ldr	r2, [pc, #520]	; (194c <USB_Handler+0x34c>)
    1742:	18d3      	adds	r3, r2, r3
    1744:	89da      	ldrh	r2, [r3, #14]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    1746:	231f      	movs	r3, #31
    1748:	4013      	ands	r3, r2
    174a:	704b      	strb	r3, [r1, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    174c:	0123      	lsls	r3, r4, #4
    174e:	18c3      	adds	r3, r0, r3
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    1750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1752:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    1754:	06eb      	lsls	r3, r5, #27
    1756:	d522      	bpl.n	179e <USB_Handler+0x19e>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    1758:	4a7a      	ldr	r2, [pc, #488]	; (1944 <USB_Handler+0x344>)
    175a:	2301      	movs	r3, #1
    175c:	40a3      	lsls	r3, r4
    175e:	6811      	ldr	r1, [r2, #0]
    1760:	4399      	bics	r1, r3
    1762:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1764:	4b75      	ldr	r3, [pc, #468]	; (193c <USB_Handler+0x33c>)
    1766:	6818      	ldr	r0, [r3, #0]
    1768:	0023      	movs	r3, r4
    176a:	3308      	adds	r3, #8
    176c:	015b      	lsls	r3, r3, #5
    176e:	6802      	ldr	r2, [r0, #0]
    1770:	4694      	mov	ip, r2
    1772:	4463      	add	r3, ip
    1774:	2210      	movs	r2, #16
    1776:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1778:	1903      	adds	r3, r0, r4
    177a:	33ae      	adds	r3, #174	; 0xae
    177c:	781b      	ldrb	r3, [r3, #0]
    177e:	075b      	lsls	r3, r3, #29
    1780:	d50d      	bpl.n	179e <USB_Handler+0x19e>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    1782:	4a71      	ldr	r2, [pc, #452]	; (1948 <USB_Handler+0x348>)
    1784:	7014      	strb	r4, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    1786:	0163      	lsls	r3, r4, #5
    1788:	4970      	ldr	r1, [pc, #448]	; (194c <USB_Handler+0x34c>)
    178a:	18cb      	adds	r3, r1, r3
    178c:	685b      	ldr	r3, [r3, #4]
    178e:	011b      	lsls	r3, r3, #4
    1790:	0c9b      	lsrs	r3, r3, #18
    1792:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    1794:	0123      	lsls	r3, r4, #4
    1796:	18c3      	adds	r3, r0, r3
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
				(_usb_instances->host_pipe_callback[pipe_int]
    1798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    179a:	2100      	movs	r1, #0
    179c:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    179e:	06ab      	lsls	r3, r5, #26
    17a0:	d400      	bmi.n	17a4 <USB_Handler+0x1a4>
    17a2:	e1f2      	b.n	1b8a <USB_Handler+0x58a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    17a4:	4a67      	ldr	r2, [pc, #412]	; (1944 <USB_Handler+0x344>)
    17a6:	2301      	movs	r3, #1
    17a8:	40a3      	lsls	r3, r4
    17aa:	6811      	ldr	r1, [r2, #0]
    17ac:	4399      	bics	r1, r3
    17ae:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    17b0:	4b62      	ldr	r3, [pc, #392]	; (193c <USB_Handler+0x33c>)
    17b2:	6818      	ldr	r0, [r3, #0]
    17b4:	0023      	movs	r3, r4
    17b6:	3308      	adds	r3, #8
    17b8:	015b      	lsls	r3, r3, #5
    17ba:	6802      	ldr	r2, [r0, #0]
    17bc:	4694      	mov	ip, r2
    17be:	4463      	add	r3, ip
    17c0:	2220      	movs	r2, #32
    17c2:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    17c4:	1903      	adds	r3, r0, r4
    17c6:	33ae      	adds	r3, #174	; 0xae
    17c8:	781b      	ldrb	r3, [r3, #0]
    17ca:	071b      	lsls	r3, r3, #28
    17cc:	d400      	bmi.n	17d0 <USB_Handler+0x1d0>
    17ce:	e1dc      	b.n	1b8a <USB_Handler+0x58a>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    17d0:	495d      	ldr	r1, [pc, #372]	; (1948 <USB_Handler+0x348>)
    17d2:	700c      	strb	r4, [r1, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    17d4:	0124      	lsls	r4, r4, #4
    17d6:	1904      	adds	r4, r0, r4
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
				(_usb_instances->host_pipe_callback[pipe_int]
    17d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    17da:	4798      	blx	r3
    17dc:	e1d5      	b.n	1b8a <USB_Handler+0x58a>

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    17de:	8bac      	ldrh	r4, [r5, #28]
    17e0:	b2a4      	uxth	r4, r4

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    17e2:	0763      	lsls	r3, r4, #29
    17e4:	d508      	bpl.n	17f8 <USB_Handler+0x1f8>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    17e6:	2304      	movs	r3, #4
    17e8:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    17ea:	33a1      	adds	r3, #161	; 0xa1
    17ec:	5cfb      	ldrb	r3, [r7, r3]
    17ee:	07db      	lsls	r3, r3, #31
    17f0:	d502      	bpl.n	17f8 <USB_Handler+0x1f8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    17f2:	687b      	ldr	r3, [r7, #4]
    17f4:	0038      	movs	r0, r7
    17f6:	4798      	blx	r3
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    17f8:	0723      	lsls	r3, r4, #28
    17fa:	d50d      	bpl.n	1818 <USB_Handler+0x218>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    17fc:	2200      	movs	r2, #0
    17fe:	4b51      	ldr	r3, [pc, #324]	; (1944 <USB_Handler+0x344>)
    1800:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    1802:	4b4e      	ldr	r3, [pc, #312]	; (193c <USB_Handler+0x33c>)
    1804:	6818      	ldr	r0, [r3, #0]
    1806:	2308      	movs	r3, #8
    1808:	6802      	ldr	r2, [r0, #0]
    180a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    180c:	339d      	adds	r3, #157	; 0x9d
    180e:	5cc3      	ldrb	r3, [r0, r3]
    1810:	079b      	lsls	r3, r3, #30
    1812:	d501      	bpl.n	1818 <USB_Handler+0x218>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    1814:	6883      	ldr	r3, [r0, #8]
    1816:	4798      	blx	r3
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    1818:	0663      	lsls	r3, r4, #25
    181a:	d50a      	bpl.n	1832 <USB_Handler+0x232>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    181c:	4b47      	ldr	r3, [pc, #284]	; (193c <USB_Handler+0x33c>)
    181e:	6818      	ldr	r0, [r3, #0]
    1820:	2340      	movs	r3, #64	; 0x40
    1822:	6802      	ldr	r2, [r0, #0]
    1824:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    1826:	3365      	adds	r3, #101	; 0x65
    1828:	5cc3      	ldrb	r3, [r0, r3]
    182a:	06db      	lsls	r3, r3, #27
    182c:	d501      	bpl.n	1832 <USB_Handler+0x232>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    182e:	6943      	ldr	r3, [r0, #20]
    1830:	4798      	blx	r3
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    1832:	06a3      	lsls	r3, r4, #26
    1834:	d50a      	bpl.n	184c <USB_Handler+0x24c>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    1836:	4b41      	ldr	r3, [pc, #260]	; (193c <USB_Handler+0x33c>)
    1838:	6818      	ldr	r0, [r3, #0]
    183a:	2320      	movs	r3, #32
    183c:	6802      	ldr	r2, [r0, #0]
    183e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    1840:	3385      	adds	r3, #133	; 0x85
    1842:	5cc3      	ldrb	r3, [r0, r3]
    1844:	071b      	lsls	r3, r3, #28
    1846:	d501      	bpl.n	184c <USB_Handler+0x24c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    1848:	6903      	ldr	r3, [r0, #16]
    184a:	4798      	blx	r3
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    184c:	06e3      	lsls	r3, r4, #27
    184e:	d50a      	bpl.n	1866 <USB_Handler+0x266>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    1850:	4b3a      	ldr	r3, [pc, #232]	; (193c <USB_Handler+0x33c>)
    1852:	6818      	ldr	r0, [r3, #0]
    1854:	2310      	movs	r3, #16
    1856:	6802      	ldr	r2, [r0, #0]
    1858:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    185a:	3395      	adds	r3, #149	; 0x95
    185c:	5cc3      	ldrb	r3, [r0, r3]
    185e:	075b      	lsls	r3, r3, #29
    1860:	d501      	bpl.n	1866 <USB_Handler+0x266>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    1862:	68c3      	ldr	r3, [r0, #12]
    1864:	4798      	blx	r3
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    1866:	0623      	lsls	r3, r4, #24
    1868:	d50d      	bpl.n	1886 <USB_Handler+0x286>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    186a:	2200      	movs	r2, #0
    186c:	4b35      	ldr	r3, [pc, #212]	; (1944 <USB_Handler+0x344>)
    186e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    1870:	4b32      	ldr	r3, [pc, #200]	; (193c <USB_Handler+0x33c>)
    1872:	6818      	ldr	r0, [r3, #0]
    1874:	2380      	movs	r3, #128	; 0x80
    1876:	6802      	ldr	r2, [r0, #0]
    1878:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    187a:	3325      	adds	r3, #37	; 0x25
    187c:	5cc3      	ldrb	r3, [r0, r3]
    187e:	069b      	lsls	r3, r3, #26
    1880:	d501      	bpl.n	1886 <USB_Handler+0x286>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    1882:	6983      	ldr	r3, [r0, #24]
    1884:	4798      	blx	r3
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    1886:	05e3      	lsls	r3, r4, #23
    1888:	d50e      	bpl.n	18a8 <USB_Handler+0x2a8>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    188a:	2200      	movs	r2, #0
    188c:	4b2d      	ldr	r3, [pc, #180]	; (1944 <USB_Handler+0x344>)
    188e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    1890:	4b2a      	ldr	r3, [pc, #168]	; (193c <USB_Handler+0x33c>)
    1892:	6818      	ldr	r0, [r3, #0]
    1894:	2380      	movs	r3, #128	; 0x80
    1896:	005b      	lsls	r3, r3, #1
    1898:	6802      	ldr	r2, [r0, #0]
    189a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    189c:	3b5b      	subs	r3, #91	; 0x5b
    189e:	5cc3      	ldrb	r3, [r0, r3]
    18a0:	065b      	lsls	r3, r3, #25
    18a2:	d501      	bpl.n	18a8 <USB_Handler+0x2a8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    18a4:	69c3      	ldr	r3, [r0, #28]
    18a6:	4798      	blx	r3
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    18a8:	05a3      	lsls	r3, r4, #22
    18aa:	d400      	bmi.n	18ae <USB_Handler+0x2ae>
    18ac:	e16d      	b.n	1b8a <USB_Handler+0x58a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    18ae:	2200      	movs	r2, #0
    18b0:	4b24      	ldr	r3, [pc, #144]	; (1944 <USB_Handler+0x344>)
    18b2:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    18b4:	4b21      	ldr	r3, [pc, #132]	; (193c <USB_Handler+0x33c>)
    18b6:	6818      	ldr	r0, [r3, #0]
    18b8:	2380      	movs	r3, #128	; 0x80
    18ba:	009b      	lsls	r3, r3, #2
    18bc:	6802      	ldr	r2, [r0, #0]
    18be:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    18c0:	3b5c      	subs	r3, #92	; 0x5c
    18c2:	3bff      	subs	r3, #255	; 0xff
    18c4:	5cc3      	ldrb	r3, [r0, r3]
    18c6:	2b7f      	cmp	r3, #127	; 0x7f
    18c8:	d800      	bhi.n	18cc <USB_Handler+0x2cc>
    18ca:	e15e      	b.n	1b8a <USB_Handler+0x58a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    18cc:	6a03      	ldr	r3, [r0, #32]
    18ce:	4798      	blx	r3
    18d0:	e15b      	b.n	1b8a <USB_Handler+0x58a>

static void _usb_device_interrupt_handler(void)
{
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    18d2:	8c2e      	ldrh	r6, [r5, #32]
    18d4:	b2b6      	uxth	r6, r6

	/* device interrupt */
	if (0 == ep_inst) {
    18d6:	2e00      	cmp	r6, #0
    18d8:	d140      	bne.n	195c <USB_Handler+0x35c>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    18da:	8bae      	ldrh	r6, [r5, #28]
    18dc:	b2b6      	uxth	r6, r6
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    18de:	23ab      	movs	r3, #171	; 0xab
    18e0:	005b      	lsls	r3, r3, #1
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    18e2:	5afd      	ldrh	r5, [r7, r3]
    18e4:	4035      	ands	r5, r6
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    18e6:	3b02      	subs	r3, #2
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    18e8:	5afb      	ldrh	r3, [r7, r3]
    18ea:	401d      	ands	r5, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    18ec:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    18ee:	4f19      	ldr	r7, [pc, #100]	; (1954 <USB_Handler+0x354>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    18f0:	4b12      	ldr	r3, [pc, #72]	; (193c <USB_Handler+0x33c>)
    18f2:	4699      	mov	r9, r3
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    18f4:	4698      	mov	r8, r3
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
    18f6:	0063      	lsls	r3, r4, #1
    18f8:	5bdb      	ldrh	r3, [r3, r7]
    18fa:	4233      	tst	r3, r6
    18fc:	d003      	beq.n	1906 <USB_Handler+0x306>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    18fe:	464a      	mov	r2, r9
    1900:	6812      	ldr	r2, [r2, #0]
    1902:	6812      	ldr	r2, [r2, #0]
    1904:	8393      	strh	r3, [r2, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    1906:	422b      	tst	r3, r5
    1908:	d013      	beq.n	1932 <USB_Handler+0x332>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    190a:	2c06      	cmp	r4, #6
    190c:	d107      	bne.n	191e <USB_Handler+0x31e>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    190e:	4b0f      	ldr	r3, [pc, #60]	; (194c <USB_Handler+0x34c>)
    1910:	891b      	ldrh	r3, [r3, #8]
    1912:	091a      	lsrs	r2, r3, #4
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    1914:	2380      	movs	r3, #128	; 0x80
    1916:	005b      	lsls	r3, r3, #1
    1918:	4013      	ands	r3, r2
    191a:	4a0f      	ldr	r2, [pc, #60]	; (1958 <USB_Handler+0x358>)
    191c:	6013      	str	r3, [r2, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    191e:	0023      	movs	r3, r4
    1920:	332e      	adds	r3, #46	; 0x2e
    1922:	009b      	lsls	r3, r3, #2
    1924:	4642      	mov	r2, r8
    1926:	6812      	ldr	r2, [r2, #0]
    1928:	589b      	ldr	r3, [r3, r2]
    192a:	490b      	ldr	r1, [pc, #44]	; (1958 <USB_Handler+0x358>)
    192c:	4642      	mov	r2, r8
    192e:	6810      	ldr	r0, [r2, #0]
    1930:	4798      	blx	r3
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    1932:	3401      	adds	r4, #1
    1934:	2c07      	cmp	r4, #7
    1936:	d1de      	bne.n	18f6 <USB_Handler+0x2f6>
    1938:	e127      	b.n	1b8a <USB_Handler+0x58a>
    193a:	46c0      	nop			; (mov r8, r8)
    193c:	20000074 	.word	0x20000074
    1940:	00002779 	.word	0x00002779
    1944:	20000068 	.word	0x20000068
    1948:	20000060 	.word	0x20000060
    194c:	200000d4 	.word	0x200000d4
    1950:	f0003fff 	.word	0xf0003fff
    1954:	000028fc 	.word	0x000028fc
    1958:	2000005c 	.word	0x2000005c
    195c:	003c      	movs	r4, r7
    195e:	3459      	adds	r4, #89	; 0x59
    1960:	34ff      	adds	r4, #255	; 0xff
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;

	/* device interrupt */
	if (0 == ep_inst) {
    1962:	2300      	movs	r3, #0
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
    1964:	2201      	movs	r2, #1
    1966:	4694      	mov	ip, r2
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->device_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    1968:	325f      	adds	r2, #95	; 0x5f
    196a:	4691      	mov	r9, r2
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    196c:	3a50      	subs	r2, #80	; 0x50
    196e:	4692      	mov	sl, r2
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    1970:	3a0d      	subs	r2, #13
    1972:	4693      	mov	fp, r2
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    1974:	46b8      	mov	r8, r7
    1976:	002f      	movs	r7, r5
    1978:	b2d8      	uxtb	r0, r3
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
    197a:	9301      	str	r3, [sp, #4]
    197c:	0032      	movs	r2, r6
    197e:	411a      	asrs	r2, r3
    1980:	4661      	mov	r1, ip
    1982:	4211      	tst	r1, r2
    1984:	d100      	bne.n	1988 <USB_Handler+0x388>
    1986:	e0fb      	b.n	1b80 <USB_Handler+0x580>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    1988:	001a      	movs	r2, r3
    198a:	3208      	adds	r2, #8
    198c:	0152      	lsls	r2, r2, #5
    198e:	18ba      	adds	r2, r7, r2
    1990:	79d2      	ldrb	r2, [r2, #7]
    1992:	b2d2      	uxtb	r2, r2
    1994:	7a21      	ldrb	r1, [r4, #8]
    1996:	7825      	ldrb	r5, [r4, #0]
    1998:	4029      	ands	r1, r5
    199a:	4011      	ands	r1, r2
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->device_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    199c:	464d      	mov	r5, r9
    199e:	4215      	tst	r5, r2
    19a0:	d02a      	beq.n	19f8 <USB_Handler+0x3f8>
    19a2:	003d      	movs	r5, r7
    19a4:	4647      	mov	r7, r8
    19a6:	015b      	lsls	r3, r3, #5
    19a8:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    19aa:	2308      	movs	r3, #8
    19ac:	33ff      	adds	r3, #255	; 0xff
    19ae:	5ceb      	ldrb	r3, [r5, r3]
    19b0:	065b      	lsls	r3, r3, #25
    19b2:	d509      	bpl.n	19c8 <USB_Handler+0x3c8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    19b4:	2240      	movs	r2, #64	; 0x40
    19b6:	2308      	movs	r3, #8
    19b8:	33ff      	adds	r3, #255	; 0xff
    19ba:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    19bc:	3b88      	subs	r3, #136	; 0x88
    19be:	3bff      	subs	r3, #255	; 0xff
    19c0:	4303      	orrs	r3, r0
    19c2:	4a75      	ldr	r2, [pc, #468]	; (1b98 <USB_Handler+0x598>)
    19c4:	7193      	strb	r3, [r2, #6]
    19c6:	e00a      	b.n	19de <USB_Handler+0x3de>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    19c8:	2308      	movs	r3, #8
    19ca:	33ff      	adds	r3, #255	; 0xff
    19cc:	5ceb      	ldrb	r3, [r5, r3]
    19ce:	069b      	lsls	r3, r3, #26
    19d0:	d505      	bpl.n	19de <USB_Handler+0x3de>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    19d2:	2220      	movs	r2, #32
    19d4:	2308      	movs	r3, #8
    19d6:	33ff      	adds	r3, #255	; 0xff
    19d8:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    19da:	4b6f      	ldr	r3, [pc, #444]	; (1b98 <USB_Handler+0x598>)
    19dc:	7198      	strb	r0, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    19de:	2360      	movs	r3, #96	; 0x60
    19e0:	420b      	tst	r3, r1
    19e2:	d100      	bne.n	19e6 <USB_Handler+0x3e6>
    19e4:	e0d1      	b.n	1b8a <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    19e6:	9b01      	ldr	r3, [sp, #4]
    19e8:	011b      	lsls	r3, r3, #4
    19ea:	18fb      	adds	r3, r7, r3
    19ec:	33e0      	adds	r3, #224	; 0xe0
    19ee:	681b      	ldr	r3, [r3, #0]
    19f0:	4969      	ldr	r1, [pc, #420]	; (1b98 <USB_Handler+0x598>)
    19f2:	0038      	movs	r0, r7
    19f4:	4798      	blx	r3
    19f6:	e0c8      	b.n	1b8a <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    19f8:	4655      	mov	r5, sl
    19fa:	4215      	tst	r5, r2
    19fc:	d01f      	beq.n	1a3e <USB_Handler+0x43e>
    19fe:	003d      	movs	r5, r7
    1a00:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    1a02:	9a01      	ldr	r2, [sp, #4]
    1a04:	0013      	movs	r3, r2
    1a06:	3308      	adds	r3, #8
    1a08:	015b      	lsls	r3, r3, #5
    1a0a:	18ed      	adds	r5, r5, r3
    1a0c:	2310      	movs	r3, #16
    1a0e:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    1a10:	18bb      	adds	r3, r7, r2
    1a12:	3361      	adds	r3, #97	; 0x61
    1a14:	33ff      	adds	r3, #255	; 0xff
    1a16:	781b      	ldrb	r3, [r3, #0]
    1a18:	06db      	lsls	r3, r3, #27
    1a1a:	d400      	bmi.n	1a1e <USB_Handler+0x41e>
    1a1c:	e0b5      	b.n	1b8a <USB_Handler+0x58a>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    1a1e:	0010      	movs	r0, r2
    1a20:	0153      	lsls	r3, r2, #5
    1a22:	4a5e      	ldr	r2, [pc, #376]	; (1b9c <USB_Handler+0x59c>)
    1a24:	18d3      	adds	r3, r2, r3
    1a26:	685b      	ldr	r3, [r3, #4]
    1a28:	049b      	lsls	r3, r3, #18
    1a2a:	0c9b      	lsrs	r3, r3, #18
    1a2c:	495a      	ldr	r1, [pc, #360]	; (1b98 <USB_Handler+0x598>)
    1a2e:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    1a30:	0103      	lsls	r3, r0, #4
    1a32:	18fb      	adds	r3, r7, r3
    1a34:	33dc      	adds	r3, #220	; 0xdc
    1a36:	681b      	ldr	r3, [r3, #0]
    1a38:	4640      	mov	r0, r8
    1a3a:	4798      	blx	r3
    1a3c:	e0a5      	b.n	1b8a <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    1a3e:	465d      	mov	r5, fp
    1a40:	4215      	tst	r5, r2
    1a42:	d03f      	beq.n	1ac4 <USB_Handler+0x4c4>
    1a44:	003d      	movs	r5, r7
    1a46:	4647      	mov	r7, r8
    1a48:	4680      	mov	r8, r0
    1a4a:	015b      	lsls	r3, r3, #5
    1a4c:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1a4e:	2308      	movs	r3, #8
    1a50:	33ff      	adds	r3, #255	; 0xff
    1a52:	5ceb      	ldrb	r3, [r5, r3]
    1a54:	079b      	lsls	r3, r3, #30
    1a56:	d512      	bpl.n	1a7e <USB_Handler+0x47e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    1a58:	2202      	movs	r2, #2
    1a5a:	2308      	movs	r3, #8
    1a5c:	33ff      	adds	r3, #255	; 0xff
    1a5e:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    1a60:	4a4d      	ldr	r2, [pc, #308]	; (1b98 <USB_Handler+0x598>)
    1a62:	3b88      	subs	r3, #136	; 0x88
    1a64:	3bff      	subs	r3, #255	; 0xff
    1a66:	4303      	orrs	r3, r0
    1a68:	7193      	strb	r3, [r2, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    1a6a:	9b01      	ldr	r3, [sp, #4]
    1a6c:	015b      	lsls	r3, r3, #5
    1a6e:	484b      	ldr	r0, [pc, #300]	; (1b9c <USB_Handler+0x59c>)
    1a70:	18c3      	adds	r3, r0, r3
    1a72:	3310      	adds	r3, #16
    1a74:	685b      	ldr	r3, [r3, #4]
    1a76:	049b      	lsls	r3, r3, #18
    1a78:	0c9b      	lsrs	r3, r3, #18
    1a7a:	8053      	strh	r3, [r2, #2]
    1a7c:	e017      	b.n	1aae <USB_Handler+0x4ae>

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1a7e:	2308      	movs	r3, #8
    1a80:	33ff      	adds	r3, #255	; 0xff
    1a82:	5ceb      	ldrb	r3, [r5, r3]
    1a84:	07db      	lsls	r3, r3, #31
    1a86:	d512      	bpl.n	1aae <USB_Handler+0x4ae>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    1a88:	2201      	movs	r2, #1
    1a8a:	2308      	movs	r3, #8
    1a8c:	33ff      	adds	r3, #255	; 0xff
    1a8e:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    1a90:	4841      	ldr	r0, [pc, #260]	; (1b98 <USB_Handler+0x598>)
    1a92:	4643      	mov	r3, r8
    1a94:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    1a96:	9b01      	ldr	r3, [sp, #4]
    1a98:	015a      	lsls	r2, r3, #5
    1a9a:	4b40      	ldr	r3, [pc, #256]	; (1b9c <USB_Handler+0x59c>)
    1a9c:	189b      	adds	r3, r3, r2
    1a9e:	685a      	ldr	r2, [r3, #4]
    1aa0:	0492      	lsls	r2, r2, #18
    1aa2:	0c92      	lsrs	r2, r2, #18
    1aa4:	8002      	strh	r2, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    1aa6:	685b      	ldr	r3, [r3, #4]
    1aa8:	011b      	lsls	r3, r3, #4
    1aaa:	0c9b      	lsrs	r3, r3, #18
    1aac:	8083      	strh	r3, [r0, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    1aae:	078b      	lsls	r3, r1, #30
    1ab0:	d06b      	beq.n	1b8a <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    1ab2:	9b01      	ldr	r3, [sp, #4]
    1ab4:	330d      	adds	r3, #13
    1ab6:	011b      	lsls	r3, r3, #4
    1ab8:	18fb      	adds	r3, r7, r3
    1aba:	685b      	ldr	r3, [r3, #4]
    1abc:	4936      	ldr	r1, [pc, #216]	; (1b98 <USB_Handler+0x598>)
    1abe:	0038      	movs	r0, r7
    1ac0:	4798      	blx	r3
    1ac2:	e062      	b.n	1b8a <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    1ac4:	250c      	movs	r5, #12
    1ac6:	4215      	tst	r5, r2
    1ac8:	d05a      	beq.n	1b80 <USB_Handler+0x580>
    1aca:	003d      	movs	r5, r7
    1acc:	4647      	mov	r7, r8
    1ace:	4680      	mov	r8, r0
    1ad0:	015b      	lsls	r3, r3, #5
    1ad2:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1ad4:	2308      	movs	r3, #8
    1ad6:	33ff      	adds	r3, #255	; 0xff
    1ad8:	5ceb      	ldrb	r3, [r5, r3]
    1ada:	071b      	lsls	r3, r3, #28
    1adc:	d521      	bpl.n	1b22 <USB_Handler+0x522>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    1ade:	2208      	movs	r2, #8
    1ae0:	2308      	movs	r3, #8
    1ae2:	33ff      	adds	r3, #255	; 0xff
    1ae4:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    1ae6:	9801      	ldr	r0, [sp, #4]
    1ae8:	0143      	lsls	r3, r0, #5
    1aea:	4a2c      	ldr	r2, [pc, #176]	; (1b9c <USB_Handler+0x59c>)
    1aec:	18d3      	adds	r3, r2, r3
    1aee:	7e9b      	ldrb	r3, [r3, #26]
    1af0:	079b      	lsls	r3, r3, #30
    1af2:	d506      	bpl.n	1b02 <USB_Handler+0x502>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    1af4:	0142      	lsls	r2, r0, #5
    1af6:	4b29      	ldr	r3, [pc, #164]	; (1b9c <USB_Handler+0x59c>)
    1af8:	189b      	adds	r3, r3, r2
    1afa:	7e9a      	ldrb	r2, [r3, #26]
    1afc:	2002      	movs	r0, #2
    1afe:	4382      	bics	r2, r0
    1b00:	769a      	strb	r2, [r3, #26]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    1b02:	2380      	movs	r3, #128	; 0x80
    1b04:	425b      	negs	r3, r3
    1b06:	4642      	mov	r2, r8
    1b08:	4313      	orrs	r3, r2
    1b0a:	4a23      	ldr	r2, [pc, #140]	; (1b98 <USB_Handler+0x598>)
    1b0c:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1b0e:	9b01      	ldr	r3, [sp, #4]
    1b10:	3308      	adds	r3, #8
    1b12:	015b      	lsls	r3, r3, #5
    1b14:	683a      	ldr	r2, [r7, #0]
    1b16:	4694      	mov	ip, r2
    1b18:	4463      	add	r3, ip
    1b1a:	79db      	ldrb	r3, [r3, #7]
    1b1c:	079b      	lsls	r3, r3, #30
    1b1e:	d523      	bpl.n	1b68 <USB_Handler+0x568>
    1b20:	e033      	b.n	1b8a <USB_Handler+0x58a>
							return;
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1b22:	2308      	movs	r3, #8
    1b24:	33ff      	adds	r3, #255	; 0xff
    1b26:	5ceb      	ldrb	r3, [r5, r3]
    1b28:	075b      	lsls	r3, r3, #29
    1b2a:	d51d      	bpl.n	1b68 <USB_Handler+0x568>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    1b2c:	2204      	movs	r2, #4
    1b2e:	2308      	movs	r3, #8
    1b30:	33ff      	adds	r3, #255	; 0xff
    1b32:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    1b34:	9801      	ldr	r0, [sp, #4]
    1b36:	0143      	lsls	r3, r0, #5
    1b38:	4a18      	ldr	r2, [pc, #96]	; (1b9c <USB_Handler+0x59c>)
    1b3a:	18d3      	adds	r3, r2, r3
    1b3c:	7a9b      	ldrb	r3, [r3, #10]
    1b3e:	079b      	lsls	r3, r3, #30
    1b40:	d506      	bpl.n	1b50 <USB_Handler+0x550>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    1b42:	0142      	lsls	r2, r0, #5
    1b44:	4b15      	ldr	r3, [pc, #84]	; (1b9c <USB_Handler+0x59c>)
    1b46:	189b      	adds	r3, r3, r2
    1b48:	7a9a      	ldrb	r2, [r3, #10]
    1b4a:	2002      	movs	r0, #2
    1b4c:	4382      	bics	r2, r0
    1b4e:	729a      	strb	r2, [r3, #10]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    1b50:	4b11      	ldr	r3, [pc, #68]	; (1b98 <USB_Handler+0x598>)
    1b52:	4642      	mov	r2, r8
    1b54:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1b56:	9b01      	ldr	r3, [sp, #4]
    1b58:	3308      	adds	r3, #8
    1b5a:	015b      	lsls	r3, r3, #5
    1b5c:	683a      	ldr	r2, [r7, #0]
    1b5e:	4694      	mov	ip, r2
    1b60:	4463      	add	r3, ip
    1b62:	79db      	ldrb	r3, [r3, #7]
    1b64:	07db      	lsls	r3, r3, #31
    1b66:	d410      	bmi.n	1b8a <USB_Handler+0x58a>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    1b68:	230c      	movs	r3, #12
    1b6a:	420b      	tst	r3, r1
    1b6c:	d00d      	beq.n	1b8a <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    1b6e:	9b01      	ldr	r3, [sp, #4]
    1b70:	011b      	lsls	r3, r3, #4
    1b72:	18fb      	adds	r3, r7, r3
    1b74:	33d8      	adds	r3, #216	; 0xd8
    1b76:	681b      	ldr	r3, [r3, #0]
    1b78:	4907      	ldr	r1, [pc, #28]	; (1b98 <USB_Handler+0x598>)
    1b7a:	0038      	movs	r0, r7
    1b7c:	4798      	blx	r3
    1b7e:	e004      	b.n	1b8a <USB_Handler+0x58a>
    1b80:	3301      	adds	r3, #1
    1b82:	3401      	adds	r4, #1
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    1b84:	2b08      	cmp	r3, #8
    1b86:	d000      	beq.n	1b8a <USB_Handler+0x58a>
    1b88:	e6f6      	b.n	1978 <USB_Handler+0x378>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    1b8a:	b003      	add	sp, #12
    1b8c:	bc3c      	pop	{r2, r3, r4, r5}
    1b8e:	4690      	mov	r8, r2
    1b90:	4699      	mov	r9, r3
    1b92:	46a2      	mov	sl, r4
    1b94:	46ab      	mov	fp, r5
    1b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b98:	2000006c 	.word	0x2000006c
    1b9c:	200000d4 	.word	0x200000d4

00001ba0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1ba0:	e7fe      	b.n	1ba0 <Dummy_Handler>
    1ba2:	46c0      	nop			; (mov r8, r8)

00001ba4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1ba4:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1ba6:	4b1d      	ldr	r3, [pc, #116]	; (1c1c <Reset_Handler+0x78>)
    1ba8:	4a1d      	ldr	r2, [pc, #116]	; (1c20 <Reset_Handler+0x7c>)
    1baa:	429a      	cmp	r2, r3
    1bac:	d003      	beq.n	1bb6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1bae:	4b1d      	ldr	r3, [pc, #116]	; (1c24 <Reset_Handler+0x80>)
    1bb0:	4a1a      	ldr	r2, [pc, #104]	; (1c1c <Reset_Handler+0x78>)
    1bb2:	429a      	cmp	r2, r3
    1bb4:	d304      	bcc.n	1bc0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1bb6:	4b1c      	ldr	r3, [pc, #112]	; (1c28 <Reset_Handler+0x84>)
    1bb8:	4a1c      	ldr	r2, [pc, #112]	; (1c2c <Reset_Handler+0x88>)
    1bba:	429a      	cmp	r2, r3
    1bbc:	d310      	bcc.n	1be0 <Reset_Handler+0x3c>
    1bbe:	e01e      	b.n	1bfe <Reset_Handler+0x5a>
    1bc0:	4a1b      	ldr	r2, [pc, #108]	; (1c30 <Reset_Handler+0x8c>)
    1bc2:	4b18      	ldr	r3, [pc, #96]	; (1c24 <Reset_Handler+0x80>)
    1bc4:	3303      	adds	r3, #3
    1bc6:	1a9b      	subs	r3, r3, r2
    1bc8:	089b      	lsrs	r3, r3, #2
    1bca:	3301      	adds	r3, #1
    1bcc:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1bce:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1bd0:	4812      	ldr	r0, [pc, #72]	; (1c1c <Reset_Handler+0x78>)
    1bd2:	4913      	ldr	r1, [pc, #76]	; (1c20 <Reset_Handler+0x7c>)
    1bd4:	588c      	ldr	r4, [r1, r2]
    1bd6:	5084      	str	r4, [r0, r2]
    1bd8:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1bda:	429a      	cmp	r2, r3
    1bdc:	d1fa      	bne.n	1bd4 <Reset_Handler+0x30>
    1bde:	e7ea      	b.n	1bb6 <Reset_Handler+0x12>
    1be0:	4a14      	ldr	r2, [pc, #80]	; (1c34 <Reset_Handler+0x90>)
    1be2:	4b11      	ldr	r3, [pc, #68]	; (1c28 <Reset_Handler+0x84>)
    1be4:	3303      	adds	r3, #3
    1be6:	1a9b      	subs	r3, r3, r2
    1be8:	089b      	lsrs	r3, r3, #2
    1bea:	3301      	adds	r3, #1
    1bec:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1bee:	2200      	movs	r2, #0
                *pDest++ = 0;
    1bf0:	480e      	ldr	r0, [pc, #56]	; (1c2c <Reset_Handler+0x88>)
    1bf2:	2100      	movs	r1, #0
    1bf4:	1814      	adds	r4, r2, r0
    1bf6:	6021      	str	r1, [r4, #0]
    1bf8:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1bfa:	429a      	cmp	r2, r3
    1bfc:	d1fa      	bne.n	1bf4 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1bfe:	4a0e      	ldr	r2, [pc, #56]	; (1c38 <Reset_Handler+0x94>)
    1c00:	21ff      	movs	r1, #255	; 0xff
    1c02:	4b0e      	ldr	r3, [pc, #56]	; (1c3c <Reset_Handler+0x98>)
    1c04:	438b      	bics	r3, r1
    1c06:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1c08:	4a0d      	ldr	r2, [pc, #52]	; (1c40 <Reset_Handler+0x9c>)
    1c0a:	6851      	ldr	r1, [r2, #4]
    1c0c:	2380      	movs	r3, #128	; 0x80
    1c0e:	430b      	orrs	r3, r1
    1c10:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1c12:	4b0c      	ldr	r3, [pc, #48]	; (1c44 <Reset_Handler+0xa0>)
    1c14:	4798      	blx	r3

        /* Branch to main function */
        main();
    1c16:	4b0c      	ldr	r3, [pc, #48]	; (1c48 <Reset_Handler+0xa4>)
    1c18:	4798      	blx	r3
    1c1a:	e7fe      	b.n	1c1a <Reset_Handler+0x76>
    1c1c:	20000000 	.word	0x20000000
    1c20:	00002978 	.word	0x00002978
    1c24:	20000004 	.word	0x20000004
    1c28:	2000037c 	.word	0x2000037c
    1c2c:	20000004 	.word	0x20000004
    1c30:	20000004 	.word	0x20000004
    1c34:	20000008 	.word	0x20000008
    1c38:	e000ed00 	.word	0xe000ed00
    1c3c:	00000000 	.word	0x00000000
    1c40:	41004000 	.word	0x41004000
    1c44:	00002811 	.word	0x00002811
    1c48:	00001c4d 	.word	0x00001c4d

00001c4c <main>:
/**
 *  \brief SAM-BA Main loop.
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    1c4c:	b510      	push	{r4, lr}
    1c4e:	b082      	sub	sp, #8
static void check_start_application(void)
{
	uint32_t app_start_address;

	/* Load the Reset Handler address of the application */
	app_start_address = *(uint32_t *)(APP_START_ADDRESS + 4);
    1c50:	4b14      	ldr	r3, [pc, #80]	; (1ca4 <main+0x58>)
    1c52:	681a      	ldr	r2, [r3, #0]
	/**
	 * Test reset vector of application @APP_START_ADDRESS+4
	 * Stay in SAM-BA if *(APP_START+0x4) == 0xFFFFFFFF
	 * Application erased condition
	 */
	if (app_start_address == 0xFFFFFFFF) {
    1c54:	1c53      	adds	r3, r2, #1
    1c56:	d016      	beq.n	1c86 <main+0x3a>

	volatile PortGroup *boot_port = (volatile PortGroup *)(&(PORT->Group[BOOT_LOAD_PIN / 32]));
	volatile bool boot_en;

	/* Enable the input mode in Boot GPIO Pin */
	boot_port->DIRCLR.reg = GPIO_BOOT_PIN_MASK;
    1c58:	4b13      	ldr	r3, [pc, #76]	; (1ca8 <main+0x5c>)
    1c5a:	2104      	movs	r1, #4
    1c5c:	6059      	str	r1, [r3, #4]
	boot_port->PINCFG[BOOT_LOAD_PIN & 0x1F].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
    1c5e:	2406      	movs	r4, #6
    1c60:	2042      	movs	r0, #66	; 0x42
    1c62:	541c      	strb	r4, [r3, r0]
	boot_port->OUTSET.reg = GPIO_BOOT_PIN_MASK;
    1c64:	6199      	str	r1, [r3, #24]
	/* Read the BOOT_LOAD_PIN status */
	boot_en = (boot_port->IN.reg) & GPIO_BOOT_PIN_MASK;
    1c66:	6a1b      	ldr	r3, [r3, #32]
    1c68:	075b      	lsls	r3, r3, #29
    1c6a:	0fdb      	lsrs	r3, r3, #31
    1c6c:	4669      	mov	r1, sp
    1c6e:	71cb      	strb	r3, [r1, #7]

	/* Check the bootloader enable condition */
	if (!boot_en) {
    1c70:	79cb      	ldrb	r3, [r1, #7]
    1c72:	2b00      	cmp	r3, #0
    1c74:	d007      	beq.n	1c86 <main+0x3a>
		/* Stay in bootloader */
		return;
	}

	/* Rebase the Stack Pointer */
	__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    1c76:	23c0      	movs	r3, #192	; 0xc0
    1c78:	01db      	lsls	r3, r3, #7

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    1c7a:	6819      	ldr	r1, [r3, #0]
    1c7c:	f381 8808 	msr	MSP, r1

	/* Rebase the vector table base address */
	SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    1c80:	490a      	ldr	r1, [pc, #40]	; (1cac <main+0x60>)
    1c82:	608b      	str	r3, [r1, #8]

	/* Jump to application Reset Handler in the application */
	asm("bx %0"::"r"(app_start_address));
    1c84:	4710      	bx	r2
	/* Jump in application if condition is satisfied */
	check_start_application();

	/* We have determined we should stay in the monitor. */
	/* System initialization */
	system_init();
    1c86:	4b0a      	ldr	r3, [pc, #40]	; (1cb0 <main+0x64>)
    1c88:	4798      	blx	r3
#ifdef CONF_USBCDC_INTERFACE_SUPPORT
	/* Start USB stack */
	udc_start();
#endif
	/* UART is enabled in all cases */
	usart_open();
    1c8a:	4b0a      	ldr	r3, [pc, #40]	; (1cb4 <main+0x68>)
    1c8c:	4798      	blx	r3
				sam_ba_monitor_run();
			}
		}
#endif
		/* Check if a '#' has been received */
		if (usart_sharp_received()) {
    1c8e:	4c0a      	ldr	r4, [pc, #40]	; (1cb8 <main+0x6c>)
    1c90:	47a0      	blx	r4
    1c92:	2800      	cmp	r0, #0
    1c94:	d0fc      	beq.n	1c90 <main+0x44>
			sam_ba_monitor_init(SAM_BA_INTERFACE_USART);
    1c96:	2001      	movs	r0, #1
    1c98:	4b08      	ldr	r3, [pc, #32]	; (1cbc <main+0x70>)
    1c9a:	4798      	blx	r3
			/* SAM-BA on UART loop */
			while(1) {
				sam_ba_monitor_run();
    1c9c:	4c08      	ldr	r4, [pc, #32]	; (1cc0 <main+0x74>)
    1c9e:	47a0      	blx	r4
    1ca0:	e7fd      	b.n	1c9e <main+0x52>
    1ca2:	46c0      	nop			; (mov r8, r8)
    1ca4:	00006004 	.word	0x00006004
    1ca8:	40002800 	.word	0x40002800
    1cac:	e000ed00 	.word	0xe000ed00
    1cb0:	000015d5 	.word	0x000015d5
    1cb4:	00002111 	.word	0x00002111
    1cb8:	0000228d 	.word	0x0000228d
    1cbc:	00001cc5 	.word	0x00001cc5
    1cc0:	00001d91 	.word	0x00001d91

00001cc4 <sam_ba_monitor_init>:
 * \param com_interface  Communication interface to be used.
 */
void sam_ba_monitor_init(uint8_t com_interface)
{
	/* Selects the requested interface for future actions */
	if (com_interface == SAM_BA_INTERFACE_USART)
    1cc4:	2801      	cmp	r0, #1
    1cc6:	d102      	bne.n	1cce <sam_ba_monitor_init+0xa>
		ptr_monitor_if = (t_monitor_if*) &uart_if;
    1cc8:	4a01      	ldr	r2, [pc, #4]	; (1cd0 <sam_ba_monitor_init+0xc>)
    1cca:	4b02      	ldr	r3, [pc, #8]	; (1cd4 <sam_ba_monitor_init+0x10>)
    1ccc:	601a      	str	r2, [r3, #0]
#ifdef CONF_USBCDC_INTERFACE_SUPPORT
	if (com_interface == SAM_BA_INTERFACE_USBCDC)
		ptr_monitor_if = (t_monitor_if*) &usbcdc_if;
#endif
}
    1cce:	4770      	bx	lr
    1cd0:	0000290c 	.word	0x0000290c
    1cd4:	2000022c 	.word	0x2000022c

00001cd8 <sam_ba_putdata_term>:
 *
 * \param *data  Data pointer
 * \param length Length of the data
 */
void sam_ba_putdata_term(uint8_t* data, uint32_t length)
{
    1cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cda:	b085      	sub	sp, #20
	uint8_t temp, buf[12], *data_ascii;
	uint32_t i, int_value;

	if (b_terminal_mode)
    1cdc:	4b20      	ldr	r3, [pc, #128]	; (1d60 <sam_ba_putdata_term+0x88>)
    1cde:	781b      	ldrb	r3, [r3, #0]
    1ce0:	2b00      	cmp	r3, #0
    1ce2:	d031      	beq.n	1d48 <sam_ba_putdata_term+0x70>
	{
		if (length == 4)
    1ce4:	2904      	cmp	r1, #4
    1ce6:	d101      	bne.n	1cec <sam_ba_putdata_term+0x14>
			int_value = *(uint32_t *) data;
    1ce8:	6800      	ldr	r0, [r0, #0]
    1cea:	e032      	b.n	1d52 <sam_ba_putdata_term+0x7a>
		else if (length == 2)
    1cec:	2902      	cmp	r1, #2
    1cee:	d101      	bne.n	1cf4 <sam_ba_putdata_term+0x1c>
			int_value = *(uint16_t *) data;
    1cf0:	8800      	ldrh	r0, [r0, #0]
    1cf2:	e02e      	b.n	1d52 <sam_ba_putdata_term+0x7a>
		else
			int_value = *(uint8_t *) data;
    1cf4:	7800      	ldrb	r0, [r0, #0]

		data_ascii = buf + 2;
		data_ascii += length * 2 - 1;
    1cf6:	004d      	lsls	r5, r1, #1
    1cf8:	ab04      	add	r3, sp, #16
    1cfa:	195a      	adds	r2, r3, r5
    1cfc:	3a0b      	subs	r2, #11

		for (i = 0; i < length * 2; i++)
    1cfe:	2d00      	cmp	r5, #0
    1d00:	d010      	beq.n	1d24 <sam_ba_putdata_term+0x4c>
 *
 * \param *data  Data pointer
 * \param length Length of the data
 */
void sam_ba_putdata_term(uint8_t* data, uint32_t length)
{
    1d02:	2400      	movs	r4, #0
		data_ascii = buf + 2;
		data_ascii += length * 2 - 1;

		for (i = 0; i < length * 2; i++)
		{
			temp = (uint8_t) (int_value & 0xf);
    1d04:	260f      	movs	r6, #15

			if (temp <= 0x9)
				*data_ascii = temp | 0x30;
    1d06:	2730      	movs	r7, #48	; 0x30
		data_ascii = buf + 2;
		data_ascii += length * 2 - 1;

		for (i = 0; i < length * 2; i++)
		{
			temp = (uint8_t) (int_value & 0xf);
    1d08:	0033      	movs	r3, r6
    1d0a:	4003      	ands	r3, r0

			if (temp <= 0x9)
    1d0c:	2b09      	cmp	r3, #9
    1d0e:	d802      	bhi.n	1d16 <sam_ba_putdata_term+0x3e>
				*data_ascii = temp | 0x30;
    1d10:	433b      	orrs	r3, r7
    1d12:	7013      	strb	r3, [r2, #0]
    1d14:	e001      	b.n	1d1a <sam_ba_putdata_term+0x42>
			else
				*data_ascii = temp + 0x37;
    1d16:	3337      	adds	r3, #55	; 0x37
    1d18:	7013      	strb	r3, [r2, #0]

			int_value >>= 4;
    1d1a:	0900      	lsrs	r0, r0, #4
			data_ascii--;
    1d1c:	3a01      	subs	r2, #1
			int_value = *(uint8_t *) data;

		data_ascii = buf + 2;
		data_ascii += length * 2 - 1;

		for (i = 0; i < length * 2; i++)
    1d1e:	3401      	adds	r4, #1
    1d20:	42ac      	cmp	r4, r5
    1d22:	d3f1      	bcc.n	1d08 <sam_ba_putdata_term+0x30>
				*data_ascii = temp + 0x37;

			int_value >>= 4;
			data_ascii--;
		}
		buf[0] = '0';
    1d24:	a801      	add	r0, sp, #4
    1d26:	2330      	movs	r3, #48	; 0x30
    1d28:	7003      	strb	r3, [r0, #0]
		buf[1] = 'x';
    1d2a:	3348      	adds	r3, #72	; 0x48
    1d2c:	7043      	strb	r3, [r0, #1]
		buf[length * 2 + 2] = '\n';
    1d2e:	3101      	adds	r1, #1
    1d30:	0049      	lsls	r1, r1, #1
    1d32:	3b6e      	subs	r3, #110	; 0x6e
    1d34:	5443      	strb	r3, [r0, r1]
		buf[length * 2 + 3] = '\r';
    1d36:	1945      	adds	r5, r0, r5
    1d38:	3303      	adds	r3, #3
    1d3a:	70eb      	strb	r3, [r5, #3]
		ptr_monitor_if->putdata(buf, length * 2 + 4);
    1d3c:	3102      	adds	r1, #2
    1d3e:	4b09      	ldr	r3, [pc, #36]	; (1d64 <sam_ba_putdata_term+0x8c>)
    1d40:	681b      	ldr	r3, [r3, #0]
    1d42:	68db      	ldr	r3, [r3, #12]
    1d44:	4798      	blx	r3
    1d46:	e009      	b.n	1d5c <sam_ba_putdata_term+0x84>
	}
	else
		ptr_monitor_if->putdata(data, length);
    1d48:	4b06      	ldr	r3, [pc, #24]	; (1d64 <sam_ba_putdata_term+0x8c>)
    1d4a:	681b      	ldr	r3, [r3, #0]
    1d4c:	68db      	ldr	r3, [r3, #12]
    1d4e:	4798      	blx	r3
	return;
    1d50:	e004      	b.n	1d5c <sam_ba_putdata_term+0x84>
			int_value = *(uint16_t *) data;
		else
			int_value = *(uint8_t *) data;

		data_ascii = buf + 2;
		data_ascii += length * 2 - 1;
    1d52:	004d      	lsls	r5, r1, #1
    1d54:	ab04      	add	r3, sp, #16
    1d56:	195a      	adds	r2, r3, r5
    1d58:	3a0b      	subs	r2, #11
    1d5a:	e7d2      	b.n	1d02 <sam_ba_putdata_term+0x2a>
		ptr_monitor_if->putdata(buf, length * 2 + 4);
	}
	else
		ptr_monitor_if->putdata(data, length);
	return;
}
    1d5c:	b005      	add	sp, #20
    1d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d60:	20000078 	.word	0x20000078
    1d64:	2000022c 	.word	0x2000022c

00001d68 <call_applet>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1d68:	b672      	cpsid	i
    1d6a:	f3bf 8f5f 	dmb	sy
 */
void call_applet(uint32_t address)
{
	uint32_t app_start_address;

	cpu_irq_disable();
    1d6e:	2200      	movs	r2, #0
    1d70:	4b05      	ldr	r3, [pc, #20]	; (1d88 <call_applet+0x20>)
    1d72:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
    1d74:	f3ef 8308 	mrs	r3, MSP

	sp = __get_MSP();
    1d78:	4a04      	ldr	r2, [pc, #16]	; (1d8c <call_applet+0x24>)
    1d7a:	6013      	str	r3, [r2, #0]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    1d7c:	6803      	ldr	r3, [r0, #0]
    1d7e:	f383 8808 	msr	MSP, r3

	/* Load the Reset Handler address of the application */
	app_start_address = *(uint32_t *)(address + 4);

	/* Jump to application Reset Handler in the application */
	asm("bx %0"::"r"(app_start_address));
    1d82:	6843      	ldr	r3, [r0, #4]
    1d84:	4718      	bx	r3
}
    1d86:	4770      	bx	lr
    1d88:	20000000 	.word	0x20000000
    1d8c:	20000230 	.word	0x20000230

00001d90 <sam_ba_monitor_run>:

/**
 * \brief This function starts the SAM-BA monitor.
 */
void sam_ba_monitor_run(void)
{
    1d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d92:	465f      	mov	r7, fp
    1d94:	4656      	mov	r6, sl
    1d96:	464d      	mov	r5, r9
    1d98:	4644      	mov	r4, r8
    1d9a:	b4f0      	push	{r4, r5, r6, r7}
	ptr_data = NULL;
    1d9c:	2200      	movs	r2, #0
    1d9e:	4bc4      	ldr	r3, [pc, #784]	; (20b0 <sam_ba_monitor_run+0x320>)
    1da0:	601a      	str	r2, [r3, #0]
	command = 'z';
    1da2:	327a      	adds	r2, #122	; 0x7a
    1da4:	4bc3      	ldr	r3, [pc, #780]	; (20b4 <sam_ba_monitor_run+0x324>)
    1da6:	701a      	strb	r2, [r3, #0]

	// Start waiting some cmd
	while (1)
	{
		length = ptr_monitor_if->getdata(data, SIZEBUFMAX);
    1da8:	4bc3      	ldr	r3, [pc, #780]	; (20b8 <sam_ba_monitor_run+0x328>)
    1daa:	469a      	mov	sl, r3
    1dac:	4bc3      	ldr	r3, [pc, #780]	; (20bc <sam_ba_monitor_run+0x32c>)
    1dae:	4698      	mov	r8, r3
    1db0:	4bc3      	ldr	r3, [pc, #780]	; (20c0 <sam_ba_monitor_run+0x330>)
    1db2:	469b      	mov	fp, r3
    1db4:	4643      	mov	r3, r8
    1db6:	681b      	ldr	r3, [r3, #0]
    1db8:	691b      	ldr	r3, [r3, #16]
    1dba:	2140      	movs	r1, #64	; 0x40
    1dbc:	4650      	mov	r0, sl
    1dbe:	4798      	blx	r3
    1dc0:	465b      	mov	r3, fp
    1dc2:	6018      	str	r0, [r3, #0]
		ptr = data;
    1dc4:	4bbf      	ldr	r3, [pc, #764]	; (20c4 <sam_ba_monitor_run+0x334>)
    1dc6:	4652      	mov	r2, sl
    1dc8:	601a      	str	r2, [r3, #0]
		for (i = 0; i < length; i++)
    1dca:	2200      	movs	r2, #0
    1dcc:	4bbe      	ldr	r3, [pc, #760]	; (20c8 <sam_ba_monitor_run+0x338>)
    1dce:	601a      	str	r2, [r3, #0]
    1dd0:	2800      	cmp	r0, #0
    1dd2:	d0ef      	beq.n	1db4 <sam_ba_monitor_run+0x24>
		{
			if (*ptr != 0xff)
    1dd4:	4dbb      	ldr	r5, [pc, #748]	; (20c4 <sam_ba_monitor_run+0x334>)
					{
						command = *ptr;
						current_number = 0;
					}
				}
				ptr++;
    1dd6:	002c      	movs	r4, r5
	{
		length = ptr_monitor_if->getdata(data, SIZEBUFMAX);
		ptr = data;
		for (i = 0; i < length; i++)
		{
			if (*ptr != 0xff)
    1dd8:	682b      	ldr	r3, [r5, #0]
    1dda:	781b      	ldrb	r3, [r3, #0]
    1ddc:	2bff      	cmp	r3, #255	; 0xff
    1dde:	d100      	bne.n	1de2 <sam_ba_monitor_run+0x52>
    1de0:	e15c      	b.n	209c <sam_ba_monitor_run+0x30c>
			{
				if (*ptr == '#')
    1de2:	2b23      	cmp	r3, #35	; 0x23
    1de4:	d000      	beq.n	1de8 <sam_ba_monitor_run+0x58>
    1de6:	e127      	b.n	2038 <sam_ba_monitor_run+0x2a8>
				{
					if (b_terminal_mode)
    1de8:	4bb8      	ldr	r3, [pc, #736]	; (20cc <sam_ba_monitor_run+0x33c>)
    1dea:	781b      	ldrb	r3, [r3, #0]
    1dec:	2b00      	cmp	r3, #0
    1dee:	d005      	beq.n	1dfc <sam_ba_monitor_run+0x6c>
					{
						ptr_monitor_if->putdata("\n\r", 2);
    1df0:	4bb2      	ldr	r3, [pc, #712]	; (20bc <sam_ba_monitor_run+0x32c>)
    1df2:	681b      	ldr	r3, [r3, #0]
    1df4:	68db      	ldr	r3, [r3, #12]
    1df6:	2102      	movs	r1, #2
    1df8:	48b5      	ldr	r0, [pc, #724]	; (20d0 <sam_ba_monitor_run+0x340>)
    1dfa:	4798      	blx	r3
					}
					if (command == 'S')
    1dfc:	4bad      	ldr	r3, [pc, #692]	; (20b4 <sam_ba_monitor_run+0x324>)
    1dfe:	781b      	ldrb	r3, [r3, #0]
    1e00:	2b53      	cmp	r3, #83	; 0x53
    1e02:	d14b      	bne.n	1e9c <sam_ba_monitor_run+0x10c>
					{
						//Check if some data are remaining in the "data" buffer
						if(length>i)
    1e04:	4bae      	ldr	r3, [pc, #696]	; (20c0 <sam_ba_monitor_run+0x330>)
    1e06:	681b      	ldr	r3, [r3, #0]
    1e08:	4aaf      	ldr	r2, [pc, #700]	; (20c8 <sam_ba_monitor_run+0x338>)
    1e0a:	6812      	ldr	r2, [r2, #0]
    1e0c:	4293      	cmp	r3, r2
    1e0e:	d92e      	bls.n	1e6e <sam_ba_monitor_run+0xde>
						{
							//Move current indexes to next avail data (currently ptr points to "#")
							ptr++;
    1e10:	48ac      	ldr	r0, [pc, #688]	; (20c4 <sam_ba_monitor_run+0x334>)
    1e12:	6801      	ldr	r1, [r0, #0]
    1e14:	3101      	adds	r1, #1
    1e16:	6001      	str	r1, [r0, #0]
							i++;
    1e18:	3201      	adds	r2, #1
    1e1a:	49ab      	ldr	r1, [pc, #684]	; (20c8 <sam_ba_monitor_run+0x338>)
    1e1c:	600a      	str	r2, [r1, #0]
							//We need to add first the remaining data of the current buffer already read from usb
							//read a maximum of "current_number" bytes
							u32tmp=min((length-i),current_number);
    1e1e:	49ad      	ldr	r1, [pc, #692]	; (20d4 <sam_ba_monitor_run+0x344>)
    1e20:	6809      	ldr	r1, [r1, #0]
    1e22:	1a9b      	subs	r3, r3, r2
    1e24:	428b      	cmp	r3, r1
    1e26:	d900      	bls.n	1e2a <sam_ba_monitor_run+0x9a>
    1e28:	000b      	movs	r3, r1
    1e2a:	4aab      	ldr	r2, [pc, #684]	; (20d8 <sam_ba_monitor_run+0x348>)
    1e2c:	6013      	str	r3, [r2, #0]
							for(j=0;j<u32tmp;j++)
    1e2e:	2100      	movs	r1, #0
    1e30:	4aaa      	ldr	r2, [pc, #680]	; (20dc <sam_ba_monitor_run+0x34c>)
    1e32:	7011      	strb	r1, [r2, #0]
    1e34:	2b00      	cmp	r3, #0
    1e36:	d01a      	beq.n	1e6e <sam_ba_monitor_run+0xde>
							{
								*ptr_data = *ptr;
    1e38:	499d      	ldr	r1, [pc, #628]	; (20b0 <sam_ba_monitor_run+0x320>)
    1e3a:	4aa2      	ldr	r2, [pc, #648]	; (20c4 <sam_ba_monitor_run+0x334>)
								ptr_data++;
								ptr++;
								i++;
    1e3c:	4fa2      	ldr	r7, [pc, #648]	; (20c8 <sam_ba_monitor_run+0x338>)
							ptr++;
							i++;
							//We need to add first the remaining data of the current buffer already read from usb
							//read a maximum of "current_number" bytes
							u32tmp=min((length-i),current_number);
							for(j=0;j<u32tmp;j++)
    1e3e:	48a7      	ldr	r0, [pc, #668]	; (20dc <sam_ba_monitor_run+0x34c>)
    1e40:	4ba5      	ldr	r3, [pc, #660]	; (20d8 <sam_ba_monitor_run+0x348>)
    1e42:	469c      	mov	ip, r3
							{
								*ptr_data = *ptr;
    1e44:	6813      	ldr	r3, [r2, #0]
    1e46:	781b      	ldrb	r3, [r3, #0]
    1e48:	680e      	ldr	r6, [r1, #0]
    1e4a:	7033      	strb	r3, [r6, #0]
								ptr_data++;
    1e4c:	680b      	ldr	r3, [r1, #0]
    1e4e:	3301      	adds	r3, #1
    1e50:	600b      	str	r3, [r1, #0]
								ptr++;
    1e52:	6813      	ldr	r3, [r2, #0]
    1e54:	3301      	adds	r3, #1
    1e56:	6013      	str	r3, [r2, #0]
								i++;
    1e58:	683b      	ldr	r3, [r7, #0]
    1e5a:	3301      	adds	r3, #1
    1e5c:	603b      	str	r3, [r7, #0]
							ptr++;
							i++;
							//We need to add first the remaining data of the current buffer already read from usb
							//read a maximum of "current_number" bytes
							u32tmp=min((length-i),current_number);
							for(j=0;j<u32tmp;j++)
    1e5e:	7803      	ldrb	r3, [r0, #0]
    1e60:	3301      	adds	r3, #1
    1e62:	b2db      	uxtb	r3, r3
    1e64:	7003      	strb	r3, [r0, #0]
    1e66:	4666      	mov	r6, ip
    1e68:	6836      	ldr	r6, [r6, #0]
    1e6a:	42b3      	cmp	r3, r6
    1e6c:	d3ea      	bcc.n	1e44 <sam_ba_monitor_run+0xb4>
								ptr++;
								i++;
							}
						}
						//update i with the data read from the buffer
						i--;
    1e6e:	4a96      	ldr	r2, [pc, #600]	; (20c8 <sam_ba_monitor_run+0x338>)
    1e70:	6813      	ldr	r3, [r2, #0]
    1e72:	3b01      	subs	r3, #1
    1e74:	6013      	str	r3, [r2, #0]
						ptr--;
    1e76:	4a93      	ldr	r2, [pc, #588]	; (20c4 <sam_ba_monitor_run+0x334>)
    1e78:	6813      	ldr	r3, [r2, #0]
    1e7a:	3b01      	subs	r3, #1
    1e7c:	6013      	str	r3, [r2, #0]
						//Do we expect more data ?
						if(j<current_number)
    1e7e:	4b97      	ldr	r3, [pc, #604]	; (20dc <sam_ba_monitor_run+0x34c>)
    1e80:	7819      	ldrb	r1, [r3, #0]
    1e82:	4b94      	ldr	r3, [pc, #592]	; (20d4 <sam_ba_monitor_run+0x344>)
    1e84:	681b      	ldr	r3, [r3, #0]
    1e86:	4299      	cmp	r1, r3
    1e88:	d206      	bcs.n	1e98 <sam_ba_monitor_run+0x108>
							ptr_monitor_if->getdata_xmd(ptr_data, current_number-j);
    1e8a:	1a59      	subs	r1, r3, r1
    1e8c:	4b88      	ldr	r3, [pc, #544]	; (20b0 <sam_ba_monitor_run+0x320>)
    1e8e:	6818      	ldr	r0, [r3, #0]
    1e90:	4b8a      	ldr	r3, [pc, #552]	; (20bc <sam_ba_monitor_run+0x32c>)
    1e92:	681b      	ldr	r3, [r3, #0]
    1e94:	699b      	ldr	r3, [r3, #24]
    1e96:	4798      	blx	r3

						__asm("nop");
    1e98:	46c0      	nop			; (mov r8, r8)
    1e9a:	e0bc      	b.n	2016 <sam_ba_monitor_run+0x286>
					}
					else if (command == 'R')
    1e9c:	2b52      	cmp	r3, #82	; 0x52
    1e9e:	d108      	bne.n	1eb2 <sam_ba_monitor_run+0x122>
					{
						ptr_monitor_if->putdata_xmd(ptr_data, current_number);
    1ea0:	4b8c      	ldr	r3, [pc, #560]	; (20d4 <sam_ba_monitor_run+0x344>)
    1ea2:	6819      	ldr	r1, [r3, #0]
    1ea4:	4b82      	ldr	r3, [pc, #520]	; (20b0 <sam_ba_monitor_run+0x320>)
    1ea6:	6818      	ldr	r0, [r3, #0]
    1ea8:	4b84      	ldr	r3, [pc, #528]	; (20bc <sam_ba_monitor_run+0x32c>)
    1eaa:	681b      	ldr	r3, [r3, #0]
    1eac:	695b      	ldr	r3, [r3, #20]
    1eae:	4798      	blx	r3
    1eb0:	e0b1      	b.n	2016 <sam_ba_monitor_run+0x286>
					}
					else if (command == 'O')
    1eb2:	2b4f      	cmp	r3, #79	; 0x4f
    1eb4:	d105      	bne.n	1ec2 <sam_ba_monitor_run+0x132>
					{
						*ptr_data = (char) current_number;
    1eb6:	4b7e      	ldr	r3, [pc, #504]	; (20b0 <sam_ba_monitor_run+0x320>)
    1eb8:	681b      	ldr	r3, [r3, #0]
    1eba:	4a86      	ldr	r2, [pc, #536]	; (20d4 <sam_ba_monitor_run+0x344>)
    1ebc:	6812      	ldr	r2, [r2, #0]
    1ebe:	701a      	strb	r2, [r3, #0]
    1ec0:	e0a9      	b.n	2016 <sam_ba_monitor_run+0x286>
					}
					else if (command == 'H')
    1ec2:	2b48      	cmp	r3, #72	; 0x48
    1ec4:	d105      	bne.n	1ed2 <sam_ba_monitor_run+0x142>
					{
						*((uint16_t *) ptr_data) = (uint16_t) current_number;
    1ec6:	4b7a      	ldr	r3, [pc, #488]	; (20b0 <sam_ba_monitor_run+0x320>)
    1ec8:	681b      	ldr	r3, [r3, #0]
    1eca:	4a82      	ldr	r2, [pc, #520]	; (20d4 <sam_ba_monitor_run+0x344>)
    1ecc:	6812      	ldr	r2, [r2, #0]
    1ece:	801a      	strh	r2, [r3, #0]
    1ed0:	e0a1      	b.n	2016 <sam_ba_monitor_run+0x286>
					}
					else if (command == 'W')
    1ed2:	2b57      	cmp	r3, #87	; 0x57
    1ed4:	d105      	bne.n	1ee2 <sam_ba_monitor_run+0x152>
					{
						*((int *) ptr_data) = current_number;
    1ed6:	4b76      	ldr	r3, [pc, #472]	; (20b0 <sam_ba_monitor_run+0x320>)
    1ed8:	681b      	ldr	r3, [r3, #0]
    1eda:	4a7e      	ldr	r2, [pc, #504]	; (20d4 <sam_ba_monitor_run+0x344>)
    1edc:	6812      	ldr	r2, [r2, #0]
    1ede:	601a      	str	r2, [r3, #0]
    1ee0:	e099      	b.n	2016 <sam_ba_monitor_run+0x286>
					}
					else if (command == 'o')
    1ee2:	2b6f      	cmp	r3, #111	; 0x6f
    1ee4:	d105      	bne.n	1ef2 <sam_ba_monitor_run+0x162>
					{
						sam_ba_putdata_term(ptr_data, 1);
    1ee6:	4b72      	ldr	r3, [pc, #456]	; (20b0 <sam_ba_monitor_run+0x320>)
    1ee8:	6818      	ldr	r0, [r3, #0]
    1eea:	2101      	movs	r1, #1
    1eec:	4b7c      	ldr	r3, [pc, #496]	; (20e0 <sam_ba_monitor_run+0x350>)
    1eee:	4798      	blx	r3
    1ef0:	e091      	b.n	2016 <sam_ba_monitor_run+0x286>
					}
					else if (command == 'h')
    1ef2:	2b68      	cmp	r3, #104	; 0x68
    1ef4:	d108      	bne.n	1f08 <sam_ba_monitor_run+0x178>
					{
						current_number = *((uint16_t *) ptr_data);
    1ef6:	4877      	ldr	r0, [pc, #476]	; (20d4 <sam_ba_monitor_run+0x344>)
    1ef8:	4b6d      	ldr	r3, [pc, #436]	; (20b0 <sam_ba_monitor_run+0x320>)
    1efa:	681b      	ldr	r3, [r3, #0]
    1efc:	881b      	ldrh	r3, [r3, #0]
    1efe:	6003      	str	r3, [r0, #0]
						sam_ba_putdata_term((uint8_t*) &current_number, 2);
    1f00:	2102      	movs	r1, #2
    1f02:	4b77      	ldr	r3, [pc, #476]	; (20e0 <sam_ba_monitor_run+0x350>)
    1f04:	4798      	blx	r3
    1f06:	e086      	b.n	2016 <sam_ba_monitor_run+0x286>
					}
					else if (command == 'w')
    1f08:	2b77      	cmp	r3, #119	; 0x77
    1f0a:	d108      	bne.n	1f1e <sam_ba_monitor_run+0x18e>
					{
						current_number = *((uint32_t *) ptr_data);
    1f0c:	4b68      	ldr	r3, [pc, #416]	; (20b0 <sam_ba_monitor_run+0x320>)
    1f0e:	681b      	ldr	r3, [r3, #0]
    1f10:	681b      	ldr	r3, [r3, #0]
    1f12:	4870      	ldr	r0, [pc, #448]	; (20d4 <sam_ba_monitor_run+0x344>)
    1f14:	6003      	str	r3, [r0, #0]
						sam_ba_putdata_term((uint8_t*) &current_number, 4);
    1f16:	2104      	movs	r1, #4
    1f18:	4b71      	ldr	r3, [pc, #452]	; (20e0 <sam_ba_monitor_run+0x350>)
    1f1a:	4798      	blx	r3
    1f1c:	e07b      	b.n	2016 <sam_ba_monitor_run+0x286>
					}
					else if (command == 'G')
    1f1e:	2b47      	cmp	r3, #71	; 0x47
    1f20:	d10e      	bne.n	1f40 <sam_ba_monitor_run+0x1b0>
					{
						call_applet(current_number);
    1f22:	4b6c      	ldr	r3, [pc, #432]	; (20d4 <sam_ba_monitor_run+0x344>)
    1f24:	6818      	ldr	r0, [r3, #0]
    1f26:	4b6f      	ldr	r3, [pc, #444]	; (20e4 <sam_ba_monitor_run+0x354>)
    1f28:	4798      	blx	r3
						/* Rebase the Stack Pointer */
						__set_MSP(sp);
    1f2a:	4b6f      	ldr	r3, [pc, #444]	; (20e8 <sam_ba_monitor_run+0x358>)
    1f2c:	681b      	ldr	r3, [r3, #0]
    1f2e:	f383 8808 	msr	MSP, r3
						cpu_irq_enable();
    1f32:	2201      	movs	r2, #1
    1f34:	4b6d      	ldr	r3, [pc, #436]	; (20ec <sam_ba_monitor_run+0x35c>)
    1f36:	701a      	strb	r2, [r3, #0]
    1f38:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1f3c:	b662      	cpsie	i
    1f3e:	e06a      	b.n	2016 <sam_ba_monitor_run+0x286>
					}
					else if (command == 'T')
    1f40:	2b54      	cmp	r3, #84	; 0x54
    1f42:	d109      	bne.n	1f58 <sam_ba_monitor_run+0x1c8>
					{
						b_terminal_mode = 1;
    1f44:	2201      	movs	r2, #1
    1f46:	4b61      	ldr	r3, [pc, #388]	; (20cc <sam_ba_monitor_run+0x33c>)
    1f48:	701a      	strb	r2, [r3, #0]
						ptr_monitor_if->putdata("\n\r", 2);
    1f4a:	4b5c      	ldr	r3, [pc, #368]	; (20bc <sam_ba_monitor_run+0x32c>)
    1f4c:	681b      	ldr	r3, [r3, #0]
    1f4e:	68db      	ldr	r3, [r3, #12]
    1f50:	2102      	movs	r1, #2
    1f52:	485f      	ldr	r0, [pc, #380]	; (20d0 <sam_ba_monitor_run+0x340>)
    1f54:	4798      	blx	r3
    1f56:	e05e      	b.n	2016 <sam_ba_monitor_run+0x286>
					}
					else if (command == 'N')
    1f58:	2b4e      	cmp	r3, #78	; 0x4e
    1f5a:	d10d      	bne.n	1f78 <sam_ba_monitor_run+0x1e8>
					{
						if (b_terminal_mode == 0)
    1f5c:	4b5b      	ldr	r3, [pc, #364]	; (20cc <sam_ba_monitor_run+0x33c>)
    1f5e:	781b      	ldrb	r3, [r3, #0]
    1f60:	2b00      	cmp	r3, #0
    1f62:	d105      	bne.n	1f70 <sam_ba_monitor_run+0x1e0>
						{
							ptr_monitor_if->putdata("\n\r", 2);
    1f64:	4b55      	ldr	r3, [pc, #340]	; (20bc <sam_ba_monitor_run+0x32c>)
    1f66:	681b      	ldr	r3, [r3, #0]
    1f68:	68db      	ldr	r3, [r3, #12]
    1f6a:	2102      	movs	r1, #2
    1f6c:	4858      	ldr	r0, [pc, #352]	; (20d0 <sam_ba_monitor_run+0x340>)
    1f6e:	4798      	blx	r3
						}
						b_terminal_mode = 0;
    1f70:	2200      	movs	r2, #0
    1f72:	4b56      	ldr	r3, [pc, #344]	; (20cc <sam_ba_monitor_run+0x33c>)
    1f74:	701a      	strb	r2, [r3, #0]
    1f76:	e04e      	b.n	2016 <sam_ba_monitor_run+0x286>
					}
					else if (command == 'V')
    1f78:	2b56      	cmp	r3, #86	; 0x56
    1f7a:	d14c      	bne.n	2016 <sam_ba_monitor_run+0x286>
					{
						ptr_monitor_if->putdata("v", 1);
    1f7c:	4b4f      	ldr	r3, [pc, #316]	; (20bc <sam_ba_monitor_run+0x32c>)
    1f7e:	4699      	mov	r9, r3
    1f80:	681b      	ldr	r3, [r3, #0]
    1f82:	68db      	ldr	r3, [r3, #12]
    1f84:	2101      	movs	r1, #1
    1f86:	485a      	ldr	r0, [pc, #360]	; (20f0 <sam_ba_monitor_run+0x360>)
    1f88:	4798      	blx	r3
						ptr_monitor_if->putdata((uint8_t *) RomBOOT_Version,
    1f8a:	464b      	mov	r3, r9
    1f8c:	681b      	ldr	r3, [r3, #0]
    1f8e:	68db      	ldr	r3, [r3, #12]
    1f90:	2104      	movs	r1, #4
    1f92:	4858      	ldr	r0, [pc, #352]	; (20f4 <sam_ba_monitor_run+0x364>)
    1f94:	4798      	blx	r3
								strlen(RomBOOT_Version));
						ptr_monitor_if->putdata(" ", 1);
    1f96:	464b      	mov	r3, r9
    1f98:	681b      	ldr	r3, [r3, #0]
    1f9a:	68db      	ldr	r3, [r3, #12]
    1f9c:	2101      	movs	r1, #1
    1f9e:	4856      	ldr	r0, [pc, #344]	; (20f8 <sam_ba_monitor_run+0x368>)
    1fa0:	4798      	blx	r3
						ptr = (uint8_t*) &(__DATE__);
						i = 0;
    1fa2:	2200      	movs	r2, #0
    1fa4:	4b48      	ldr	r3, [pc, #288]	; (20c8 <sam_ba_monitor_run+0x338>)
    1fa6:	601a      	str	r2, [r3, #0]
						while (*ptr++ != '\0')
    1fa8:	4a54      	ldr	r2, [pc, #336]	; (20fc <sam_ba_monitor_run+0x36c>)
    1faa:	4b46      	ldr	r3, [pc, #280]	; (20c4 <sam_ba_monitor_run+0x334>)
    1fac:	601a      	str	r2, [r3, #0]
							i++;
    1fae:	4846      	ldr	r0, [pc, #280]	; (20c8 <sam_ba_monitor_run+0x338>)
						ptr_monitor_if->putdata((uint8_t *) RomBOOT_Version,
								strlen(RomBOOT_Version));
						ptr_monitor_if->putdata(" ", 1);
						ptr = (uint8_t*) &(__DATE__);
						i = 0;
						while (*ptr++ != '\0')
    1fb0:	001a      	movs	r2, r3
							i++;
    1fb2:	6803      	ldr	r3, [r0, #0]
    1fb4:	1c59      	adds	r1, r3, #1
    1fb6:	6001      	str	r1, [r0, #0]
						ptr_monitor_if->putdata((uint8_t *) RomBOOT_Version,
								strlen(RomBOOT_Version));
						ptr_monitor_if->putdata(" ", 1);
						ptr = (uint8_t*) &(__DATE__);
						i = 0;
						while (*ptr++ != '\0')
    1fb8:	6813      	ldr	r3, [r2, #0]
    1fba:	1c5e      	adds	r6, r3, #1
    1fbc:	6016      	str	r6, [r2, #0]
    1fbe:	781b      	ldrb	r3, [r3, #0]
    1fc0:	2b00      	cmp	r3, #0
    1fc2:	d1f6      	bne.n	1fb2 <sam_ba_monitor_run+0x222>
							i++;
						ptr_monitor_if->putdata((uint8_t *) &(__DATE__), i);
    1fc4:	4b3d      	ldr	r3, [pc, #244]	; (20bc <sam_ba_monitor_run+0x32c>)
    1fc6:	4699      	mov	r9, r3
    1fc8:	681b      	ldr	r3, [r3, #0]
    1fca:	68db      	ldr	r3, [r3, #12]
    1fcc:	484c      	ldr	r0, [pc, #304]	; (2100 <sam_ba_monitor_run+0x370>)
    1fce:	4798      	blx	r3
						ptr_monitor_if->putdata(" ", 1);
    1fd0:	464b      	mov	r3, r9
    1fd2:	681b      	ldr	r3, [r3, #0]
    1fd4:	68db      	ldr	r3, [r3, #12]
    1fd6:	2101      	movs	r1, #1
    1fd8:	4847      	ldr	r0, [pc, #284]	; (20f8 <sam_ba_monitor_run+0x368>)
    1fda:	4798      	blx	r3
						i = 0;
    1fdc:	2200      	movs	r2, #0
    1fde:	4b3a      	ldr	r3, [pc, #232]	; (20c8 <sam_ba_monitor_run+0x338>)
    1fe0:	601a      	str	r2, [r3, #0]
						ptr = (uint8_t*) &(__TIME__);
						while (*ptr++ != '\0')
    1fe2:	4a48      	ldr	r2, [pc, #288]	; (2104 <sam_ba_monitor_run+0x374>)
    1fe4:	4b37      	ldr	r3, [pc, #220]	; (20c4 <sam_ba_monitor_run+0x334>)
    1fe6:	601a      	str	r2, [r3, #0]
							i++;
    1fe8:	4837      	ldr	r0, [pc, #220]	; (20c8 <sam_ba_monitor_run+0x338>)
							i++;
						ptr_monitor_if->putdata((uint8_t *) &(__DATE__), i);
						ptr_monitor_if->putdata(" ", 1);
						i = 0;
						ptr = (uint8_t*) &(__TIME__);
						while (*ptr++ != '\0')
    1fea:	001a      	movs	r2, r3
							i++;
    1fec:	6803      	ldr	r3, [r0, #0]
    1fee:	1c59      	adds	r1, r3, #1
    1ff0:	6001      	str	r1, [r0, #0]
							i++;
						ptr_monitor_if->putdata((uint8_t *) &(__DATE__), i);
						ptr_monitor_if->putdata(" ", 1);
						i = 0;
						ptr = (uint8_t*) &(__TIME__);
						while (*ptr++ != '\0')
    1ff2:	6813      	ldr	r3, [r2, #0]
    1ff4:	1c5e      	adds	r6, r3, #1
    1ff6:	6016      	str	r6, [r2, #0]
    1ff8:	781b      	ldrb	r3, [r3, #0]
    1ffa:	2b00      	cmp	r3, #0
    1ffc:	d1f6      	bne.n	1fec <sam_ba_monitor_run+0x25c>
							i++;
						ptr_monitor_if->putdata((uint8_t *) &(__TIME__), i);
    1ffe:	4b2f      	ldr	r3, [pc, #188]	; (20bc <sam_ba_monitor_run+0x32c>)
    2000:	4699      	mov	r9, r3
    2002:	681b      	ldr	r3, [r3, #0]
    2004:	68db      	ldr	r3, [r3, #12]
    2006:	4840      	ldr	r0, [pc, #256]	; (2108 <sam_ba_monitor_run+0x378>)
    2008:	4798      	blx	r3
						ptr_monitor_if->putdata("\n\r", 2);
    200a:	464b      	mov	r3, r9
    200c:	681b      	ldr	r3, [r3, #0]
    200e:	68db      	ldr	r3, [r3, #12]
    2010:	2102      	movs	r1, #2
    2012:	482f      	ldr	r0, [pc, #188]	; (20d0 <sam_ba_monitor_run+0x340>)
    2014:	4798      	blx	r3
					}

					command = 'z';
    2016:	227a      	movs	r2, #122	; 0x7a
    2018:	4b26      	ldr	r3, [pc, #152]	; (20b4 <sam_ba_monitor_run+0x324>)
    201a:	701a      	strb	r2, [r3, #0]
					current_number = 0;
    201c:	2200      	movs	r2, #0
    201e:	4b2d      	ldr	r3, [pc, #180]	; (20d4 <sam_ba_monitor_run+0x344>)
    2020:	601a      	str	r2, [r3, #0]

					if (b_terminal_mode)
    2022:	4b2a      	ldr	r3, [pc, #168]	; (20cc <sam_ba_monitor_run+0x33c>)
    2024:	781b      	ldrb	r3, [r3, #0]
    2026:	2b00      	cmp	r3, #0
    2028:	d035      	beq.n	2096 <sam_ba_monitor_run+0x306>
					{
						ptr_monitor_if->putdata(">", 1);
    202a:	4b24      	ldr	r3, [pc, #144]	; (20bc <sam_ba_monitor_run+0x32c>)
    202c:	681b      	ldr	r3, [r3, #0]
    202e:	68db      	ldr	r3, [r3, #12]
    2030:	2101      	movs	r1, #1
    2032:	4836      	ldr	r0, [pc, #216]	; (210c <sam_ba_monitor_run+0x37c>)
    2034:	4798      	blx	r3
    2036:	e02e      	b.n	2096 <sam_ba_monitor_run+0x306>
					}
				}
				else
				{
					if (('0' <= *ptr) && (*ptr <= '9'))
    2038:	001a      	movs	r2, r3
    203a:	3a30      	subs	r2, #48	; 0x30
    203c:	2a09      	cmp	r2, #9
    203e:	d806      	bhi.n	204e <sam_ba_monitor_run+0x2be>
					{
						current_number = (current_number << 4) | (*ptr - '0');
    2040:	4924      	ldr	r1, [pc, #144]	; (20d4 <sam_ba_monitor_run+0x344>)
    2042:	680a      	ldr	r2, [r1, #0]
    2044:	0112      	lsls	r2, r2, #4
    2046:	3b30      	subs	r3, #48	; 0x30
    2048:	4313      	orrs	r3, r2
    204a:	600b      	str	r3, [r1, #0]
    204c:	e023      	b.n	2096 <sam_ba_monitor_run+0x306>

					}
					else if (('A' <= *ptr) && (*ptr <= 'F'))
    204e:	001a      	movs	r2, r3
    2050:	3a41      	subs	r2, #65	; 0x41
    2052:	2a05      	cmp	r2, #5
    2054:	d806      	bhi.n	2064 <sam_ba_monitor_run+0x2d4>
					{
						current_number = (current_number << 4)
    2056:	491f      	ldr	r1, [pc, #124]	; (20d4 <sam_ba_monitor_run+0x344>)
    2058:	680a      	ldr	r2, [r1, #0]
    205a:	0112      	lsls	r2, r2, #4
    205c:	3b37      	subs	r3, #55	; 0x37
    205e:	4313      	orrs	r3, r2
    2060:	600b      	str	r3, [r1, #0]
    2062:	e018      	b.n	2096 <sam_ba_monitor_run+0x306>
								| (*ptr - 'A' + 0xa);

					}
					else if (('a' <= *ptr) && (*ptr <= 'f'))
    2064:	001a      	movs	r2, r3
    2066:	3a61      	subs	r2, #97	; 0x61
    2068:	2a05      	cmp	r2, #5
    206a:	d806      	bhi.n	207a <sam_ba_monitor_run+0x2ea>
					{
						current_number = (current_number << 4)
    206c:	4919      	ldr	r1, [pc, #100]	; (20d4 <sam_ba_monitor_run+0x344>)
    206e:	680a      	ldr	r2, [r1, #0]
    2070:	0112      	lsls	r2, r2, #4
    2072:	3b57      	subs	r3, #87	; 0x57
    2074:	4313      	orrs	r3, r2
    2076:	600b      	str	r3, [r1, #0]
    2078:	e00d      	b.n	2096 <sam_ba_monitor_run+0x306>
								| (*ptr - 'a' + 0xa);

					}
					else if (*ptr == ',')
    207a:	2b2c      	cmp	r3, #44	; 0x2c
    207c:	d106      	bne.n	208c <sam_ba_monitor_run+0x2fc>
					{
						ptr_data = (uint8_t *) current_number;
    207e:	4b15      	ldr	r3, [pc, #84]	; (20d4 <sam_ba_monitor_run+0x344>)
    2080:	4a0b      	ldr	r2, [pc, #44]	; (20b0 <sam_ba_monitor_run+0x320>)
    2082:	6819      	ldr	r1, [r3, #0]
    2084:	6011      	str	r1, [r2, #0]
						current_number = 0;
    2086:	2200      	movs	r2, #0
    2088:	601a      	str	r2, [r3, #0]
    208a:	e004      	b.n	2096 <sam_ba_monitor_run+0x306>

					}
					else
					{
						command = *ptr;
    208c:	4a09      	ldr	r2, [pc, #36]	; (20b4 <sam_ba_monitor_run+0x324>)
    208e:	7013      	strb	r3, [r2, #0]
						current_number = 0;
    2090:	2200      	movs	r2, #0
    2092:	4b10      	ldr	r3, [pc, #64]	; (20d4 <sam_ba_monitor_run+0x344>)
    2094:	601a      	str	r2, [r3, #0]
					}
				}
				ptr++;
    2096:	6823      	ldr	r3, [r4, #0]
    2098:	3301      	adds	r3, #1
    209a:	6023      	str	r3, [r4, #0]
	// Start waiting some cmd
	while (1)
	{
		length = ptr_monitor_if->getdata(data, SIZEBUFMAX);
		ptr = data;
		for (i = 0; i < length; i++)
    209c:	4a0a      	ldr	r2, [pc, #40]	; (20c8 <sam_ba_monitor_run+0x338>)
    209e:	6813      	ldr	r3, [r2, #0]
    20a0:	3301      	adds	r3, #1
    20a2:	6013      	str	r3, [r2, #0]
    20a4:	4a06      	ldr	r2, [pc, #24]	; (20c0 <sam_ba_monitor_run+0x330>)
    20a6:	6812      	ldr	r2, [r2, #0]
    20a8:	429a      	cmp	r2, r3
    20aa:	d900      	bls.n	20ae <sam_ba_monitor_run+0x31e>
    20ac:	e694      	b.n	1dd8 <sam_ba_monitor_run+0x48>
    20ae:	e681      	b.n	1db4 <sam_ba_monitor_run+0x24>
    20b0:	20000228 	.word	0x20000228
    20b4:	200001e0 	.word	0x200001e0
    20b8:	200001e8 	.word	0x200001e8
    20bc:	2000022c 	.word	0x2000022c
    20c0:	200001d8 	.word	0x200001d8
    20c4:	200001dc 	.word	0x200001dc
    20c8:	200001e4 	.word	0x200001e4
    20cc:	20000078 	.word	0x20000078
    20d0:	00002930 	.word	0x00002930
    20d4:	20000234 	.word	0x20000234
    20d8:	20000238 	.word	0x20000238
    20dc:	200001d4 	.word	0x200001d4
    20e0:	00001cd9 	.word	0x00001cd9
    20e4:	00001d69 	.word	0x00001d69
    20e8:	20000230 	.word	0x20000230
    20ec:	20000000 	.word	0x20000000
    20f0:	00002934 	.word	0x00002934
    20f4:	00002928 	.word	0x00002928
    20f8:	00002938 	.word	0x00002938
    20fc:	0000293d 	.word	0x0000293d
    2100:	0000293c 	.word	0x0000293c
    2104:	00002949 	.word	0x00002949
    2108:	00002948 	.word	0x00002948
    210c:	00002954 	.word	0x00002954

00002110 <usart_open>:

/**
 * \brief Open the given USART
 */
void usart_open()
{
    2110:	b530      	push	{r4, r5, lr}
    2112:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2114:	2380      	movs	r3, #128	; 0x80
    2116:	05db      	lsls	r3, r3, #23
    2118:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    211a:	2300      	movs	r3, #0
    211c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    211e:	22ff      	movs	r2, #255	; 0xff
    2120:	4669      	mov	r1, sp
    2122:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2124:	2200      	movs	r2, #0
    2126:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2128:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    212a:	2101      	movs	r1, #1
    212c:	2024      	movs	r0, #36	; 0x24
    212e:	466c      	mov	r4, sp
    2130:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    2132:	3001      	adds	r0, #1
    2134:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    2136:	3125      	adds	r1, #37	; 0x25
    2138:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    213a:	3101      	adds	r1, #1
    213c:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    213e:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2140:	3105      	adds	r1, #5
    2142:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    2144:	3101      	adds	r1, #1
    2146:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
    2148:	930e      	str	r3, [sp, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    214a:	930f      	str	r3, [sp, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    214c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    214e:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2150:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2152:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2154:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2156:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    2158:	2313      	movs	r3, #19
    215a:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    215c:	7762      	strb	r2, [r4, #29]
	struct usart_config config;

	usart_get_config_defaults(&config);

	config.baudrate     = BOOT_USART_BAUDRATE;
    215e:	23e1      	movs	r3, #225	; 0xe1
    2160:	025b      	lsls	r3, r3, #9
    2162:	9308      	str	r3, [sp, #32]
	config.mux_setting  = BOOT_USART_MUX_SETTINGS;
    2164:	2380      	movs	r3, #128	; 0x80
    2166:	035b      	lsls	r3, r3, #13
    2168:	9303      	str	r3, [sp, #12]
#ifdef BOOT_USART_PAD0
	config.pinmux_pad0  = BOOT_USART_PAD0;
    216a:	4b26      	ldr	r3, [pc, #152]	; (2204 <usart_open+0xf4>)
    216c:	930c      	str	r3, [sp, #48]	; 0x30
#endif
#ifdef BOOT_USART_PAD1
	config.pinmux_pad1  = BOOT_USART_PAD1;
    216e:	4b26      	ldr	r3, [pc, #152]	; (2208 <usart_open+0xf8>)
    2170:	930d      	str	r3, [sp, #52]	; 0x34
#ifdef BOOT_USART_PAD3
	config.pinmux_pad3  = BOOT_USART_PAD3;
#endif
	config.generator_source = BOOT_USART_GCLK_SOURCE;

	while (usart_init(&usart_sam_ba, BOOT_USART_MODULE, &config)
    2172:	4d26      	ldr	r5, [pc, #152]	; (220c <usart_open+0xfc>)
    2174:	4c26      	ldr	r4, [pc, #152]	; (2210 <usart_open+0x100>)
    2176:	466a      	mov	r2, sp
    2178:	4926      	ldr	r1, [pc, #152]	; (2214 <usart_open+0x104>)
    217a:	0028      	movs	r0, r5
    217c:	47a0      	blx	r4
    217e:	2800      	cmp	r0, #0
    2180:	d1f9      	bne.n	2176 <usart_open+0x66>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2182:	4d22      	ldr	r5, [pc, #136]	; (220c <usart_open+0xfc>)
    2184:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2186:	0020      	movs	r0, r4
    2188:	4b23      	ldr	r3, [pc, #140]	; (2218 <usart_open+0x108>)
    218a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    218c:	231f      	movs	r3, #31
    218e:	4018      	ands	r0, r3
    2190:	3b1e      	subs	r3, #30
    2192:	4083      	lsls	r3, r0
    2194:	4a21      	ldr	r2, [pc, #132]	; (221c <usart_open+0x10c>)
    2196:	6013      	str	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2198:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    219a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    219c:	2b00      	cmp	r3, #0
    219e:	d1fc      	bne.n	219a <usart_open+0x8a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    21a0:	6822      	ldr	r2, [r4, #0]
    21a2:	3302      	adds	r3, #2
    21a4:	4313      	orrs	r3, r2
    21a6:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    21a8:	4b18      	ldr	r3, [pc, #96]	; (220c <usart_open+0xfc>)
    21aa:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    21ac:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    21ae:	2a00      	cmp	r2, #0
    21b0:	d1fc      	bne.n	21ac <usart_open+0x9c>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    21b2:	685a      	ldr	r2, [r3, #4]
    21b4:	2180      	movs	r1, #128	; 0x80
    21b6:	0249      	lsls	r1, r1, #9
    21b8:	430a      	orrs	r2, r1
    21ba:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    21bc:	2101      	movs	r1, #1
    21be:	4a13      	ldr	r2, [pc, #76]	; (220c <usart_open+0xfc>)
    21c0:	71d1      	strb	r1, [r2, #7]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    21c2:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    21c4:	2a00      	cmp	r2, #0
    21c6:	d1fc      	bne.n	21c2 <usart_open+0xb2>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    21c8:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    21ca:	2a00      	cmp	r2, #0
    21cc:	d1fc      	bne.n	21c8 <usart_open+0xb8>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    21ce:	685a      	ldr	r2, [r3, #4]
    21d0:	2180      	movs	r1, #128	; 0x80
    21d2:	0289      	lsls	r1, r1, #10
    21d4:	430a      	orrs	r2, r1
    21d6:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    21d8:	2101      	movs	r1, #1
    21da:	4a0c      	ldr	r2, [pc, #48]	; (220c <usart_open+0xfc>)
    21dc:	7191      	strb	r1, [r2, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    21de:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    21e0:	2a00      	cmp	r2, #0
    21e2:	d1fc      	bne.n	21de <usart_open+0xce>

	usart_enable(&usart_sam_ba);
	usart_enable_transceiver(&usart_sam_ba, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&usart_sam_ba, USART_TRANSCEIVER_RX);
	//Initialize flag
	b_sharp_received = false;
    21e4:	2300      	movs	r3, #0
    21e6:	4a0e      	ldr	r2, [pc, #56]	; (2220 <usart_open+0x110>)
    21e8:	7013      	strb	r3, [r2, #0]
	idx_rx_read = 0;
    21ea:	4a0e      	ldr	r2, [pc, #56]	; (2224 <usart_open+0x114>)
    21ec:	7013      	strb	r3, [r2, #0]
	idx_rx_write = 0;
    21ee:	4a0e      	ldr	r2, [pc, #56]	; (2228 <usart_open+0x118>)
    21f0:	7013      	strb	r3, [r2, #0]
	idx_tx_read = 0;
    21f2:	4a0e      	ldr	r2, [pc, #56]	; (222c <usart_open+0x11c>)
    21f4:	7013      	strb	r3, [r2, #0]
	idx_tx_write = 0;
    21f6:	4a0e      	ldr	r2, [pc, #56]	; (2230 <usart_open+0x120>)
    21f8:	7013      	strb	r3, [r2, #0]

	error_timeout = 0;
    21fa:	4a0e      	ldr	r2, [pc, #56]	; (2234 <usart_open+0x124>)
    21fc:	7013      	strb	r3, [r2, #0]
}
    21fe:	b011      	add	sp, #68	; 0x44
    2200:	bd30      	pop	{r4, r5, pc}
    2202:	46c0      	nop			; (mov r8, r8)
    2204:	00160002 	.word	0x00160002
    2208:	00170002 	.word	0x00170002
    220c:	20000244 	.word	0x20000244
    2210:	000007b5 	.word	0x000007b5
    2214:	42000c00 	.word	0x42000c00
    2218:	00000729 	.word	0x00000729
    221c:	e000e100 	.word	0xe000e100
    2220:	2000023c 	.word	0x2000023c
    2224:	200002fa 	.word	0x200002fa
    2228:	2000023d 	.word	0x2000023d
    222c:	20000240 	.word	0x20000240
    2230:	200002fb 	.word	0x200002fb
    2234:	200002f8 	.word	0x200002f8

00002238 <usart_putc>:
 * \param value Value to put
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
int usart_putc(int value)
{
    2238:	b510      	push	{r4, lr}
	usart_write_wait(&usart_sam_ba, (uint16_t)value);
    223a:	b281      	uxth	r1, r0
    223c:	4802      	ldr	r0, [pc, #8]	; (2248 <usart_putc+0x10>)
    223e:	4b03      	ldr	r3, [pc, #12]	; (224c <usart_putc+0x14>)
    2240:	4798      	blx	r3
	return 1;
}
    2242:	2001      	movs	r0, #1
    2244:	bd10      	pop	{r4, pc}
    2246:	46c0      	nop			; (mov r8, r8)
    2248:	20000244 	.word	0x20000244
    224c:	00000b19 	.word	0x00000b19

00002250 <usart_is_rx_ready>:
	}
	return (false);
}

bool usart_is_rx_ready(void) {
	return (BOOT_USART_MODULE->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC);
    2250:	4b02      	ldr	r3, [pc, #8]	; (225c <usart_is_rx_ready+0xc>)
    2252:	7e18      	ldrb	r0, [r3, #24]
    2254:	0740      	lsls	r0, r0, #29
    2256:	0fc0      	lsrs	r0, r0, #31
}
    2258:	4770      	bx	lr
    225a:	46c0      	nop			; (mov r8, r8)
    225c:	42000c00 	.word	0x42000c00

00002260 <usart_getc>:
	return 1;
}



int usart_getc(void) {
    2260:	b510      	push	{r4, lr}
    2262:	b082      	sub	sp, #8
	uint16_t retval;
	//Wait until input buffer is filled
	while(!(usart_is_rx_ready()));
    2264:	4c06      	ldr	r4, [pc, #24]	; (2280 <usart_getc+0x20>)
    2266:	47a0      	blx	r4
    2268:	2800      	cmp	r0, #0
    226a:	d0fc      	beq.n	2266 <usart_getc+0x6>
	usart_read_wait(&usart_sam_ba, &retval);
    226c:	466b      	mov	r3, sp
    226e:	1d9c      	adds	r4, r3, #6
    2270:	0021      	movs	r1, r4
    2272:	4804      	ldr	r0, [pc, #16]	; (2284 <usart_getc+0x24>)
    2274:	4b04      	ldr	r3, [pc, #16]	; (2288 <usart_getc+0x28>)
    2276:	4798      	blx	r3
	return (int)retval;
    2278:	8820      	ldrh	r0, [r4, #0]

}
    227a:	b002      	add	sp, #8
    227c:	bd10      	pop	{r4, pc}
    227e:	46c0      	nop			; (mov r8, r8)
    2280:	00002251 	.word	0x00002251
    2284:	20000244 	.word	0x20000244
    2288:	00000b45 	.word	0x00000b45

0000228c <usart_sharp_received>:

int usart_sharp_received(void) {
    228c:	b510      	push	{r4, lr}
	if (usart_is_rx_ready()) {
    228e:	4b06      	ldr	r3, [pc, #24]	; (22a8 <usart_sharp_received+0x1c>)
    2290:	4798      	blx	r3
		if (usart_getc() == SHARP_CHARACTER)
			return (true);
	}
	return (false);
    2292:	2300      	movs	r3, #0
	return (int)retval;

}

int usart_sharp_received(void) {
	if (usart_is_rx_ready()) {
    2294:	2800      	cmp	r0, #0
    2296:	d004      	beq.n	22a2 <usart_sharp_received+0x16>
		if (usart_getc() == SHARP_CHARACTER)
    2298:	4b04      	ldr	r3, [pc, #16]	; (22ac <usart_sharp_received+0x20>)
    229a:	4798      	blx	r3
			return (true);
    229c:	3823      	subs	r0, #35	; 0x23
    229e:	4243      	negs	r3, r0
    22a0:	4143      	adcs	r3, r0
	}
	return (false);
}
    22a2:	0018      	movs	r0, r3
    22a4:	bd10      	pop	{r4, pc}
    22a6:	46c0      	nop			; (mov r8, r8)
    22a8:	00002251 	.word	0x00002251
    22ac:	00002261 	.word	0x00002261

000022b0 <usart_putdata>:
}

/**
 * \brief Send given data (polling)
 */
uint32_t usart_putdata(void const* data, uint32_t length) {
    22b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22b2:	0004      	movs	r4, r0
    22b4:	1e0f      	subs	r7, r1, #0
	uint32_t i;
	uint8_t* ptrdata;
	ptrdata = (uint8_t*) data;
	for (i = 0; i < length; i++) {
    22b6:	d006      	beq.n	22c6 <usart_putdata+0x16>
    22b8:	1846      	adds	r6, r0, r1
		usart_putc(*ptrdata);
    22ba:	4d04      	ldr	r5, [pc, #16]	; (22cc <usart_putdata+0x1c>)
    22bc:	7820      	ldrb	r0, [r4, #0]
    22be:	47a8      	blx	r5
		ptrdata++;
    22c0:	3401      	adds	r4, #1
 */
uint32_t usart_putdata(void const* data, uint32_t length) {
	uint32_t i;
	uint8_t* ptrdata;
	ptrdata = (uint8_t*) data;
	for (i = 0; i < length; i++) {
    22c2:	42a6      	cmp	r6, r4
    22c4:	d1fa      	bne.n	22bc <usart_putdata+0xc>
		usart_putc(*ptrdata);
		ptrdata++;
	}
	return (i);
}
    22c6:	0038      	movs	r0, r7
    22c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22ca:	46c0      	nop			; (mov r8, r8)
    22cc:	00002239 	.word	0x00002239

000022d0 <usart_getdata>:

/**
 * \brief Get data from com device
 */
uint32_t usart_getdata(void* data, uint32_t length) {
    22d0:	b510      	push	{r4, lr}
    22d2:	0004      	movs	r4, r0
	uint8_t* ptrdata;
	ptrdata = (uint8_t*) data;
	*ptrdata = usart_getc();
    22d4:	4b02      	ldr	r3, [pc, #8]	; (22e0 <usart_getdata+0x10>)
    22d6:	4798      	blx	r3
    22d8:	7020      	strb	r0, [r4, #0]
	return (1);
}
    22da:	2001      	movs	r0, #1
    22dc:	bd10      	pop	{r4, pc}
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	00002261 	.word	0x00002261

000022e4 <add_crc>:
 */
unsigned short add_crc(char ptr, unsigned short crc) {

	unsigned short cmpt;

	crc = crc ^ (int) ptr << 8;
    22e4:	0200      	lsls	r0, r0, #8
    22e6:	4048      	eors	r0, r1
    22e8:	2308      	movs	r3, #8

	for (cmpt = 0; cmpt < 8; cmpt++) {
		if (crc & 0x8000)
			crc = crc << 1 ^ CRC16POLY;
    22ea:	4907      	ldr	r1, [pc, #28]	; (2308 <add_crc+0x24>)
	unsigned short cmpt;

	crc = crc ^ (int) ptr << 8;

	for (cmpt = 0; cmpt < 8; cmpt++) {
		if (crc & 0x8000)
    22ec:	b202      	sxth	r2, r0
    22ee:	2a00      	cmp	r2, #0
    22f0:	da03      	bge.n	22fa <add_crc+0x16>
			crc = crc << 1 ^ CRC16POLY;
    22f2:	0040      	lsls	r0, r0, #1
    22f4:	4048      	eors	r0, r1
    22f6:	b280      	uxth	r0, r0
    22f8:	e001      	b.n	22fe <add_crc+0x1a>
		else
			crc = crc << 1;
    22fa:	0040      	lsls	r0, r0, #1
    22fc:	b280      	uxth	r0, r0
    22fe:	3b01      	subs	r3, #1
    2300:	b29b      	uxth	r3, r3

	unsigned short cmpt;

	crc = crc ^ (int) ptr << 8;

	for (cmpt = 0; cmpt < 8; cmpt++) {
    2302:	2b00      	cmp	r3, #0
    2304:	d1f2      	bne.n	22ec <add_crc+0x8>
		else
			crc = crc << 1;
	}

	return (crc & 0xFFFF);
}
    2306:	4770      	bx	lr
    2308:	00001021 	.word	0x00001021

0000230c <getbytes>:

static uint16_t getbytes(uint8_t *ptr_data, uint16_t length) {
    230c:	b5f0      	push	{r4, r5, r6, r7, lr}
    230e:	4657      	mov	r7, sl
    2310:	464e      	mov	r6, r9
    2312:	4645      	mov	r5, r8
    2314:	b4e0      	push	{r5, r6, r7}
    2316:	b082      	sub	sp, #8
    2318:	0007      	movs	r7, r0
    231a:	1e0e      	subs	r6, r1, #0
	uint16_t crc = 0;
	uint16_t cpt;
	uint8_t c;

	for (cpt = 0; cpt < length; ++cpt) {
    231c:	d029      	beq.n	2372 <getbytes+0x66>
    231e:	2400      	movs	r4, #0
    2320:	2300      	movs	r3, #0
    2322:	9301      	str	r3, [sp, #4]
		c = usart_getc();
    2324:	4b17      	ldr	r3, [pc, #92]	; (2384 <getbytes+0x78>)
    2326:	469a      	mov	sl, r3
		if (error_timeout)
    2328:	4b17      	ldr	r3, [pc, #92]	; (2388 <getbytes+0x7c>)
    232a:	4699      	mov	r9, r3
			return 1;
		crc = add_crc(c, crc);
    232c:	4b17      	ldr	r3, [pc, #92]	; (238c <getbytes+0x80>)
    232e:	4698      	mov	r8, r3
	uint16_t crc = 0;
	uint16_t cpt;
	uint8_t c;

	for (cpt = 0; cpt < length; ++cpt) {
		c = usart_getc();
    2330:	47d0      	blx	sl
    2332:	b2c5      	uxtb	r5, r0
		if (error_timeout)
    2334:	464b      	mov	r3, r9
    2336:	781b      	ldrb	r3, [r3, #0]
    2338:	2b00      	cmp	r3, #0
    233a:	d11c      	bne.n	2376 <getbytes+0x6a>
			return 1;
		crc = add_crc(c, crc);
    233c:	9901      	ldr	r1, [sp, #4]
    233e:	0028      	movs	r0, r5
    2340:	47c0      	blx	r8
    2342:	9001      	str	r0, [sp, #4]
		//crc = (crc << 8) ^ xcrc16tab[(crc>>8) ^ c];
		if (size_of_data || mode_of_transfer) {
    2344:	4b12      	ldr	r3, [pc, #72]	; (2390 <getbytes+0x84>)
    2346:	881b      	ldrh	r3, [r3, #0]
    2348:	2b00      	cmp	r3, #0
    234a:	d103      	bne.n	2354 <getbytes+0x48>
    234c:	4b11      	ldr	r3, [pc, #68]	; (2394 <getbytes+0x88>)
    234e:	781b      	ldrb	r3, [r3, #0]
    2350:	2b00      	cmp	r3, #0
    2352:	d008      	beq.n	2366 <getbytes+0x5a>
			*ptr_data++ = c;
    2354:	1c7b      	adds	r3, r7, #1
    2356:	703d      	strb	r5, [r7, #0]
    2358:	001f      	movs	r7, r3
			if (length == PKTLEN_128)
    235a:	2e80      	cmp	r6, #128	; 0x80
    235c:	d103      	bne.n	2366 <getbytes+0x5a>
				size_of_data--;
    235e:	490c      	ldr	r1, [pc, #48]	; (2390 <getbytes+0x84>)
    2360:	880a      	ldrh	r2, [r1, #0]
    2362:	3a01      	subs	r2, #1
    2364:	800a      	strh	r2, [r1, #0]
static uint16_t getbytes(uint8_t *ptr_data, uint16_t length) {
	uint16_t crc = 0;
	uint16_t cpt;
	uint8_t c;

	for (cpt = 0; cpt < length; ++cpt) {
    2366:	3401      	adds	r4, #1
    2368:	b2a4      	uxth	r4, r4
    236a:	42a6      	cmp	r6, r4
    236c:	d1e0      	bne.n	2330 <getbytes+0x24>
		c = usart_getc();
		if (error_timeout)
			return 1;
		crc = add_crc(c, crc);
    236e:	9801      	ldr	r0, [sp, #4]
    2370:	e002      	b.n	2378 <getbytes+0x6c>

	return (crc & 0xFFFF);
}

static uint16_t getbytes(uint8_t *ptr_data, uint16_t length) {
	uint16_t crc = 0;
    2372:	2000      	movs	r0, #0
    2374:	e000      	b.n	2378 <getbytes+0x6c>
	uint8_t c;

	for (cpt = 0; cpt < length; ++cpt) {
		c = usart_getc();
		if (error_timeout)
			return 1;
    2376:	2001      	movs	r0, #1
				size_of_data--;
		}
	}

	return crc;
}
    2378:	b002      	add	sp, #8
    237a:	bc1c      	pop	{r2, r3, r4}
    237c:	4690      	mov	r8, r2
    237e:	4699      	mov	r9, r3
    2380:	46a2      	mov	sl, r4
    2382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2384:	00002261 	.word	0x00002261
    2388:	200002f8 	.word	0x200002f8
    238c:	000022e5 	.word	0x000022e5
    2390:	2000023e 	.word	0x2000023e
    2394:	200002f9 	.word	0x200002f9

00002398 <getPacket>:
}

/**
 * \brief Used by Xdown to retrieve packets.
 */
uint8_t getPacket(uint8_t *ptr_data, uint8_t sno) {
    2398:	b5f0      	push	{r4, r5, r6, r7, lr}
    239a:	b085      	sub	sp, #20
    239c:	0005      	movs	r5, r0
    239e:	9101      	str	r1, [sp, #4]
	uint8_t seq[2];
	uint16_t crc, xcrc;

	getbytes(seq, 2);
    23a0:	2102      	movs	r1, #2
    23a2:	a803      	add	r0, sp, #12
    23a4:	4c17      	ldr	r4, [pc, #92]	; (2404 <getPacket+0x6c>)
    23a6:	47a0      	blx	r4
	xcrc = getbytes(ptr_data, PKTLEN_128);
    23a8:	2180      	movs	r1, #128	; 0x80
    23aa:	0028      	movs	r0, r5
    23ac:	47a0      	blx	r4
    23ae:	0005      	movs	r5, r0
	if (error_timeout)
    23b0:	4b15      	ldr	r3, [pc, #84]	; (2408 <getPacket+0x70>)
    23b2:	781c      	ldrb	r4, [r3, #0]
    23b4:	2c00      	cmp	r4, #0
    23b6:	d120      	bne.n	23fa <getPacket+0x62>
		return (false);

	/* An "endian independent way to combine the CRC bytes. */
	crc = (uint16_t) usart_getc() << 8;
    23b8:	4e14      	ldr	r6, [pc, #80]	; (240c <getPacket+0x74>)
    23ba:	47b0      	blx	r6
    23bc:	0200      	lsls	r0, r0, #8
    23be:	b287      	uxth	r7, r0
	crc += (uint16_t) usart_getc();
    23c0:	47b0      	blx	r6
    23c2:	183f      	adds	r7, r7, r0
    23c4:	b2bf      	uxth	r7, r7

	if (error_timeout == 1)
    23c6:	4b10      	ldr	r3, [pc, #64]	; (2408 <getPacket+0x70>)
    23c8:	781b      	ldrb	r3, [r3, #0]
    23ca:	2b01      	cmp	r3, #1
    23cc:	d016      	beq.n	23fc <getPacket+0x64>
		return (false);

	if ((crc != xcrc) || (seq[0] != sno) || (seq[1] != (uint8_t) (~sno))) {
    23ce:	42bd      	cmp	r5, r7
    23d0:	d10a      	bne.n	23e8 <getPacket+0x50>
    23d2:	ab03      	add	r3, sp, #12
    23d4:	781b      	ldrb	r3, [r3, #0]
    23d6:	9a01      	ldr	r2, [sp, #4]
    23d8:	4293      	cmp	r3, r2
    23da:	d105      	bne.n	23e8 <getPacket+0x50>
    23dc:	43db      	mvns	r3, r3
    23de:	aa03      	add	r2, sp, #12
    23e0:	7852      	ldrb	r2, [r2, #1]
    23e2:	b2db      	uxtb	r3, r3
    23e4:	429a      	cmp	r2, r3
    23e6:	d003      	beq.n	23f0 <getPacket+0x58>
		usart_putc(CAN);
    23e8:	2018      	movs	r0, #24
    23ea:	4b09      	ldr	r3, [pc, #36]	; (2410 <getPacket+0x78>)
    23ec:	4798      	blx	r3
		return (false);
    23ee:	e005      	b.n	23fc <getPacket+0x64>
	}

	usart_putc(ACK);
    23f0:	2006      	movs	r0, #6
    23f2:	4b07      	ldr	r3, [pc, #28]	; (2410 <getPacket+0x78>)
    23f4:	4798      	blx	r3
	return (true);
    23f6:	2401      	movs	r4, #1
    23f8:	e000      	b.n	23fc <getPacket+0x64>
	uint16_t crc, xcrc;

	getbytes(seq, 2);
	xcrc = getbytes(ptr_data, PKTLEN_128);
	if (error_timeout)
		return (false);
    23fa:	2400      	movs	r4, #0
		return (false);
	}

	usart_putc(ACK);
	return (true);
}
    23fc:	0020      	movs	r0, r4
    23fe:	b005      	add	sp, #20
    2400:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2402:	46c0      	nop			; (mov r8, r8)
    2404:	0000230d 	.word	0x0000230d
    2408:	200002f8 	.word	0x200002f8
    240c:	00002261 	.word	0x00002261
    2410:	00002239 	.word	0x00002239

00002414 <usart_putdata_xmd>:

/**
 * \brief Called when a transfer from target to host is being made(considered an upload).
 */
uint32_t usart_putdata_xmd(void const* data, uint32_t length) {
    2414:	b5f0      	push	{r4, r5, r6, r7, lr}
    2416:	465f      	mov	r7, fp
    2418:	4656      	mov	r6, sl
    241a:	464d      	mov	r5, r9
    241c:	4644      	mov	r4, r8
    241e:	b4f0      	push	{r4, r5, r6, r7}
    2420:	b085      	sub	sp, #20
    2422:	9003      	str	r0, [sp, #12]
    2424:	4689      	mov	r9, r1
	uint8_t c, sno = 1;
	uint8_t done;
	uint8_t * ptr_data = (uint8_t *) data;
	error_timeout = 0;
    2426:	2200      	movs	r2, #0
    2428:	4b4a      	ldr	r3, [pc, #296]	; (2554 <usart_putdata_xmd+0x140>)
    242a:	701a      	strb	r2, [r3, #0]
	if (!length)
    242c:	2900      	cmp	r1, #0
    242e:	d103      	bne.n	2438 <usart_putdata_xmd+0x24>
		mode_of_transfer = 1;
    2430:	3201      	adds	r2, #1
    2432:	4b49      	ldr	r3, [pc, #292]	; (2558 <usart_putdata_xmd+0x144>)
    2434:	701a      	strb	r2, [r3, #0]
    2436:	e00c      	b.n	2452 <usart_putdata_xmd+0x3e>
	else {
		size_of_data = length;
    2438:	4b48      	ldr	r3, [pc, #288]	; (255c <usart_putdata_xmd+0x148>)
    243a:	8019      	strh	r1, [r3, #0]
		mode_of_transfer = 0;
    243c:	2200      	movs	r2, #0
    243e:	4b46      	ldr	r3, [pc, #280]	; (2558 <usart_putdata_xmd+0x144>)
    2440:	701a      	strb	r2, [r3, #0]
	}

	if (length & (PKTLEN_128 - 1)) {
    2442:	000b      	movs	r3, r1
    2444:	065b      	lsls	r3, r3, #25
    2446:	d004      	beq.n	2452 <usart_putdata_xmd+0x3e>
		length += PKTLEN_128;
    2448:	000b      	movs	r3, r1
    244a:	3380      	adds	r3, #128	; 0x80
		length &= ~(PKTLEN_128 - 1);
    244c:	327f      	adds	r2, #127	; 0x7f
    244e:	4393      	bics	r3, r2
    2450:	4699      	mov	r9, r3

	/* Startup synchronization... */
	/* Wait to receive a NAK or 'C' from receiver. */
	done = 0;
	while (!done) {
		c = (uint8_t) usart_getc();
    2452:	4e43      	ldr	r6, [pc, #268]	; (2560 <usart_putdata_xmd+0x14c>)
		if (error_timeout) { // Test for timeout in usart_getc
    2454:	4d3f      	ldr	r5, [pc, #252]	; (2554 <usart_putdata_xmd+0x140>)
			error_timeout = 0;
    2456:	002c      	movs	r4, r5

	/* Startup synchronization... */
	/* Wait to receive a NAK or 'C' from receiver. */
	done = 0;
	while (!done) {
		c = (uint8_t) usart_getc();
    2458:	47b0      	blx	r6
		if (error_timeout) { // Test for timeout in usart_getc
    245a:	782b      	ldrb	r3, [r5, #0]
    245c:	2b00      	cmp	r3, #0
    245e:	d00c      	beq.n	247a <usart_putdata_xmd+0x66>
			error_timeout = 0;
    2460:	2300      	movs	r3, #0
    2462:	7023      	strb	r3, [r4, #0]
			c = (uint8_t) usart_getc();
    2464:	4b3e      	ldr	r3, [pc, #248]	; (2560 <usart_putdata_xmd+0x14c>)
    2466:	4798      	blx	r3
    2468:	b2c0      	uxtb	r0, r0
			if (error_timeout) {
    246a:	7823      	ldrb	r3, [r4, #0]
    246c:	2b00      	cmp	r3, #0
    246e:	d005      	beq.n	247c <usart_putdata_xmd+0x68>
				error_timeout = 0;
    2470:	2200      	movs	r2, #0
    2472:	4b38      	ldr	r3, [pc, #224]	; (2554 <usart_putdata_xmd+0x140>)
    2474:	701a      	strb	r2, [r3, #0]
				return (0);
    2476:	2600      	movs	r6, #0
    2478:	e063      	b.n	2542 <usart_putdata_xmd+0x12e>

	/* Startup synchronization... */
	/* Wait to receive a NAK or 'C' from receiver. */
	done = 0;
	while (!done) {
		c = (uint8_t) usart_getc();
    247a:	b2c0      	uxtb	r0, r0
			if (error_timeout) {
				error_timeout = 0;
				return (0);
			}
		}
		switch (c) {
    247c:	2843      	cmp	r0, #67	; 0x43
    247e:	d023      	beq.n	24c8 <usart_putdata_xmd+0xb4>
    2480:	2871      	cmp	r0, #113	; 0x71
    2482:	d05d      	beq.n	2540 <usart_putdata_xmd+0x12c>
    2484:	2815      	cmp	r0, #21
    2486:	d1e7      	bne.n	2458 <usart_putdata_xmd+0x44>
    2488:	e01e      	b.n	24c8 <usart_putdata_xmd+0xb4>
	done = 0;
	sno = 1;
	while (!done) {
		c = (uint8_t) putPacket((uint8_t *) ptr_data, sno);
		if (error_timeout) { // Test for timeout in usart_getc
			error_timeout = 0;
    248a:	2200      	movs	r2, #0
    248c:	4b31      	ldr	r3, [pc, #196]	; (2554 <usart_putdata_xmd+0x140>)
    248e:	701a      	strb	r2, [r3, #0]
			return (0);
    2490:	e057      	b.n	2542 <usart_putdata_xmd+0x12e>
		}
		switch (c) {
    2492:	23ff      	movs	r3, #255	; 0xff
    2494:	4018      	ands	r0, r3
    2496:	2806      	cmp	r0, #6
    2498:	d109      	bne.n	24ae <usart_putdata_xmd+0x9a>
		case ACK:
			++sno;
    249a:	9b02      	ldr	r3, [sp, #8]
    249c:	3301      	adds	r3, #1
    249e:	b2db      	uxtb	r3, r3
    24a0:	9302      	str	r3, [sp, #8]
			length -= PKTLEN_128;
    24a2:	464b      	mov	r3, r9
    24a4:	3b80      	subs	r3, #128	; 0x80
    24a6:	4699      	mov	r9, r3
			ptr_data += PKTLEN_128;
    24a8:	9b03      	ldr	r3, [sp, #12]
    24aa:	3380      	adds	r3, #128	; 0x80
    24ac:	9303      	str	r3, [sp, #12]
		case EOT:
		default:
			done = 0;
			break;
		}
		if (!length) {
    24ae:	464b      	mov	r3, r9
    24b0:	2b00      	cmp	r3, #0
    24b2:	d110      	bne.n	24d6 <usart_putdata_xmd+0xc2>
			usart_putc(EOT);
    24b4:	2004      	movs	r0, #4
    24b6:	4b2b      	ldr	r3, [pc, #172]	; (2564 <usart_putdata_xmd+0x150>)
    24b8:	4798      	blx	r3
			usart_getc(); /* Flush the ACK */
    24ba:	4b29      	ldr	r3, [pc, #164]	; (2560 <usart_putdata_xmd+0x14c>)
    24bc:	4798      	blx	r3
			break;
		}
	}

	mode_of_transfer = 0;
    24be:	2200      	movs	r2, #0
    24c0:	4b25      	ldr	r3, [pc, #148]	; (2558 <usart_putdata_xmd+0x144>)
    24c2:	701a      	strb	r2, [r3, #0]
	return (1);
    24c4:	2601      	movs	r6, #1
    24c6:	e03c      	b.n	2542 <usart_putdata_xmd+0x12e>
			if (error_timeout) {
				error_timeout = 0;
				return (0);
			}
		}
		switch (c) {
    24c8:	2301      	movs	r3, #1
    24ca:	9302      	str	r3, [sp, #8]
	uint16_t chksm;
	uint8_t data;

	chksm = 0;

	usart_putc(SOH);
    24cc:	4b25      	ldr	r3, [pc, #148]	; (2564 <usart_putdata_xmd+0x150>)
    24ce:	469b      	mov	fp, r3

	usart_putc(sno);
	usart_putc((uint8_t) ~(sno));

	for (i = 0; i < PKTLEN_128; i++) {
		if (size_of_data || mode_of_transfer) {
    24d0:	4b22      	ldr	r3, [pc, #136]	; (255c <usart_putdata_xmd+0x148>)
    24d2:	4698      	mov	r8, r3
			data = *tmppkt++;
			size_of_data--;
    24d4:	001c      	movs	r4, r3
	uint16_t chksm;
	uint8_t data;

	chksm = 0;

	usart_putc(SOH);
    24d6:	2001      	movs	r0, #1
    24d8:	47d8      	blx	fp

	usart_putc(sno);
    24da:	9d02      	ldr	r5, [sp, #8]
    24dc:	0028      	movs	r0, r5
    24de:	47d8      	blx	fp
	usart_putc((uint8_t) ~(sno));
    24e0:	43e8      	mvns	r0, r5
    24e2:	b2c0      	uxtb	r0, r0
    24e4:	47d8      	blx	fp
    24e6:	9d03      	ldr	r5, [sp, #12]
    24e8:	2680      	movs	r6, #128	; 0x80
static int putPacket(uint8_t *tmppkt, uint8_t sno) {
	uint32_t i;
	uint16_t chksm;
	uint8_t data;

	chksm = 0;
    24ea:	2300      	movs	r3, #0
    24ec:	9301      	str	r3, [sp, #4]

	usart_putc(sno);
	usart_putc((uint8_t) ~(sno));

	for (i = 0; i < PKTLEN_128; i++) {
		if (size_of_data || mode_of_transfer) {
    24ee:	4b1a      	ldr	r3, [pc, #104]	; (2558 <usart_putdata_xmd+0x144>)
    24f0:	469a      	mov	sl, r3
    24f2:	002f      	movs	r7, r5
    24f4:	4643      	mov	r3, r8
    24f6:	881b      	ldrh	r3, [r3, #0]
    24f8:	2b00      	cmp	r3, #0
    24fa:	d104      	bne.n	2506 <usart_putdata_xmd+0xf2>
    24fc:	4652      	mov	r2, sl
    24fe:	7812      	ldrb	r2, [r2, #0]
			data = *tmppkt++;
			size_of_data--;
		} else
			data = 0x00;
    2500:	2500      	movs	r5, #0

	usart_putc(sno);
	usart_putc((uint8_t) ~(sno));

	for (i = 0; i < PKTLEN_128; i++) {
		if (size_of_data || mode_of_transfer) {
    2502:	2a00      	cmp	r2, #0
    2504:	d003      	beq.n	250e <usart_putdata_xmd+0xfa>
			data = *tmppkt++;
    2506:	783d      	ldrb	r5, [r7, #0]
			size_of_data--;
    2508:	3b01      	subs	r3, #1
    250a:	8023      	strh	r3, [r4, #0]
	usart_putc(sno);
	usart_putc((uint8_t) ~(sno));

	for (i = 0; i < PKTLEN_128; i++) {
		if (size_of_data || mode_of_transfer) {
			data = *tmppkt++;
    250c:	3701      	adds	r7, #1
			size_of_data--;
		} else
			data = 0x00;

		usart_putc(data);
    250e:	0028      	movs	r0, r5
    2510:	4b14      	ldr	r3, [pc, #80]	; (2564 <usart_putdata_xmd+0x150>)
    2512:	4798      	blx	r3

		chksm = add_crc(data, chksm);
    2514:	9901      	ldr	r1, [sp, #4]
    2516:	0028      	movs	r0, r5
    2518:	4b13      	ldr	r3, [pc, #76]	; (2568 <usart_putdata_xmd+0x154>)
    251a:	4798      	blx	r3
    251c:	9001      	str	r0, [sp, #4]
    251e:	3e01      	subs	r6, #1
	usart_putc(SOH);

	usart_putc(sno);
	usart_putc((uint8_t) ~(sno));

	for (i = 0; i < PKTLEN_128; i++) {
    2520:	2e00      	cmp	r6, #0
    2522:	d1e7      	bne.n	24f4 <usart_putdata_xmd+0xe0>

		chksm = add_crc(data, chksm);
	}

	/* An "endian independent way to extract the CRC bytes. */
	usart_putc((uint8_t) (chksm >> 8));
    2524:	0005      	movs	r5, r0
    2526:	0a00      	lsrs	r0, r0, #8
    2528:	b2c0      	uxtb	r0, r0
    252a:	4f0e      	ldr	r7, [pc, #56]	; (2564 <usart_putdata_xmd+0x150>)
    252c:	47b8      	blx	r7
	usart_putc((uint8_t) chksm);
    252e:	b2e8      	uxtb	r0, r5
    2530:	47b8      	blx	r7

	return (usart_getc()); /* Wait for ack */
    2532:	4b0b      	ldr	r3, [pc, #44]	; (2560 <usart_putdata_xmd+0x14c>)
    2534:	4798      	blx	r3

	done = 0;
	sno = 1;
	while (!done) {
		c = (uint8_t) putPacket((uint8_t *) ptr_data, sno);
		if (error_timeout) { // Test for timeout in usart_getc
    2536:	4b07      	ldr	r3, [pc, #28]	; (2554 <usart_putdata_xmd+0x140>)
    2538:	781b      	ldrb	r3, [r3, #0]
    253a:	2b00      	cmp	r3, #0
    253c:	d0a9      	beq.n	2492 <usart_putdata_xmd+0x7e>
    253e:	e7a4      	b.n	248a <usart_putdata_xmd+0x76>
			break;
		case 'C':
			done = 1;
			break;
		case 'q': /* ELS addition, not part of XMODEM spec. */
			return (0);
    2540:	2600      	movs	r6, #0
		}
	}

	mode_of_transfer = 0;
	return (1);
}
    2542:	0030      	movs	r0, r6
    2544:	b005      	add	sp, #20
    2546:	bc3c      	pop	{r2, r3, r4, r5}
    2548:	4690      	mov	r8, r2
    254a:	4699      	mov	r9, r3
    254c:	46a2      	mov	sl, r4
    254e:	46ab      	mov	fp, r5
    2550:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2552:	46c0      	nop			; (mov r8, r8)
    2554:	200002f8 	.word	0x200002f8
    2558:	200002f9 	.word	0x200002f9
    255c:	2000023e 	.word	0x2000023e
    2560:	00002261 	.word	0x00002261
    2564:	00002239 	.word	0x00002239
    2568:	000022e5 	.word	0x000022e5

0000256c <usart_getdata_xmd>:

/**
 * \brief Called when a transfer from host to target is being made (considered an download).
 */
uint32_t usart_getdata_xmd(void* data, uint32_t length) {
    256c:	b5f0      	push	{r4, r5, r6, r7, lr}
    256e:	4647      	mov	r7, r8
    2570:	b480      	push	{r7}
    2572:	b082      	sub	sp, #8
    2574:	9001      	str	r0, [sp, #4]
    2576:	000c      	movs	r4, r1
	uint8_t * ptr_data = (uint8_t *) data;
	uint32_t b_run, nbr_of_timeout = 100;
	uint8_t sno = 0x01;

	//Copied from legacy source code ... might need some tweaking
	uint32_t loops_per_second = system_clock_source_get_hz(CONF_CLOCK_GCLK_0_CLOCK_SOURCE) / 10;
    2578:	2006      	movs	r0, #6
    257a:	4b30      	ldr	r3, [pc, #192]	; (263c <usart_getdata_xmd+0xd0>)
    257c:	4798      	blx	r3
    257e:	210a      	movs	r1, #10
    2580:	4b2f      	ldr	r3, [pc, #188]	; (2640 <usart_getdata_xmd+0xd4>)
    2582:	4798      	blx	r3
    2584:	9000      	str	r0, [sp, #0]

	error_timeout = 0;
    2586:	2200      	movs	r2, #0
    2588:	4b2e      	ldr	r3, [pc, #184]	; (2644 <usart_getdata_xmd+0xd8>)
    258a:	701a      	strb	r2, [r3, #0]

	if (length == 0)
    258c:	2c00      	cmp	r4, #0
    258e:	d103      	bne.n	2598 <usart_getdata_xmd+0x2c>
		mode_of_transfer = 1;
    2590:	3201      	adds	r2, #1
    2592:	4b2d      	ldr	r3, [pc, #180]	; (2648 <usart_getdata_xmd+0xdc>)
    2594:	701a      	strb	r2, [r3, #0]
    2596:	e004      	b.n	25a2 <usart_getdata_xmd+0x36>
	else {
		size_of_data = length;
    2598:	4b2c      	ldr	r3, [pc, #176]	; (264c <usart_getdata_xmd+0xe0>)
    259a:	801c      	strh	r4, [r3, #0]
		mode_of_transfer = 0;
    259c:	2200      	movs	r2, #0
    259e:	4b2a      	ldr	r3, [pc, #168]	; (2648 <usart_getdata_xmd+0xdc>)
    25a0:	701a      	strb	r2, [r3, #0]
}

/**
 * \brief Called when a transfer from host to target is being made (considered an download).
 */
uint32_t usart_getdata_xmd(void* data, uint32_t length) {
    25a2:	2564      	movs	r5, #100	; 0x64
	}

	/* Startup synchronization... */
	/* Continuously send NAK or 'C' until sender responds. */
	while (1) {
		usart_putc('C');
    25a4:	4e2a      	ldr	r6, [pc, #168]	; (2650 <usart_getdata_xmd+0xe4>)
		timeout = loops_per_second;
		while (!(usart_is_rx_ready()) && timeout)
    25a6:	4f2b      	ldr	r7, [pc, #172]	; (2654 <usart_getdata_xmd+0xe8>)
	}

	/* Startup synchronization... */
	/* Continuously send NAK or 'C' until sender responds. */
	while (1) {
		usart_putc('C');
    25a8:	2043      	movs	r0, #67	; 0x43
    25aa:	47b0      	blx	r6
		timeout = loops_per_second;
    25ac:	9c00      	ldr	r4, [sp, #0]
		while (!(usart_is_rx_ready()) && timeout)
    25ae:	e000      	b.n	25b2 <usart_getdata_xmd+0x46>
			timeout--;
    25b0:	3c01      	subs	r4, #1
	/* Startup synchronization... */
	/* Continuously send NAK or 'C' until sender responds. */
	while (1) {
		usart_putc('C');
		timeout = loops_per_second;
		while (!(usart_is_rx_ready()) && timeout)
    25b2:	47b8      	blx	r7
    25b4:	2800      	cmp	r0, #0
    25b6:	d102      	bne.n	25be <usart_getdata_xmd+0x52>
    25b8:	2c00      	cmp	r4, #0
    25ba:	d1f9      	bne.n	25b0 <usart_getdata_xmd+0x44>
    25bc:	e001      	b.n	25c2 <usart_getdata_xmd+0x56>
			timeout--;
		if (timeout)
    25be:	2c00      	cmp	r4, #0
    25c0:	d103      	bne.n	25ca <usart_getdata_xmd+0x5e>
    25c2:	3d01      	subs	r5, #1
			break;

		if (!(--nbr_of_timeout))
    25c4:	2d00      	cmp	r5, #0
    25c6:	d1ef      	bne.n	25a8 <usart_getdata_xmd+0x3c>
    25c8:	e032      	b.n	2630 <usart_getdata_xmd+0xc4>
    25ca:	2401      	movs	r4, #1
			return (0);
	}

	b_run = true;
	while (b_run != false) {
		c = (char) usart_getc();
    25cc:	4f22      	ldr	r7, [pc, #136]	; (2658 <usart_getdata_xmd+0xec>)
		if (error_timeout) { // Test for timeout in usart_getc
    25ce:	4d1d      	ldr	r5, [pc, #116]	; (2644 <usart_getdata_xmd+0xd8>)
			error_timeout = 0;
			return (0);
		}
		switch (c) {
		case SOH: /* 128-byte incoming packet */
			b_run = getPacket(ptr_data, sno);
    25d0:	4b22      	ldr	r3, [pc, #136]	; (265c <usart_getdata_xmd+0xf0>)
    25d2:	4698      	mov	r8, r3
			return (0);
	}

	b_run = true;
	while (b_run != false) {
		c = (char) usart_getc();
    25d4:	47b8      	blx	r7
		if (error_timeout) { // Test for timeout in usart_getc
    25d6:	782b      	ldrb	r3, [r5, #0]
    25d8:	2b00      	cmp	r3, #0
    25da:	d004      	beq.n	25e6 <usart_getdata_xmd+0x7a>
			error_timeout = 0;
    25dc:	2200      	movs	r2, #0
    25de:	4b19      	ldr	r3, [pc, #100]	; (2644 <usart_getdata_xmd+0xd8>)
    25e0:	701a      	strb	r2, [r3, #0]
			return (0);
    25e2:	2500      	movs	r5, #0
    25e4:	e024      	b.n	2630 <usart_getdata_xmd+0xc4>
		}
		switch (c) {
    25e6:	23ff      	movs	r3, #255	; 0xff
    25e8:	4018      	ands	r0, r3
    25ea:	2801      	cmp	r0, #1
    25ec:	d002      	beq.n	25f4 <usart_getdata_xmd+0x88>
    25ee:	2804      	cmp	r0, #4
    25f0:	d014      	beq.n	261c <usart_getdata_xmd+0xb0>
    25f2:	e019      	b.n	2628 <usart_getdata_xmd+0xbc>
		case SOH: /* 128-byte incoming packet */
			b_run = getPacket(ptr_data, sno);
    25f4:	0021      	movs	r1, r4
    25f6:	9801      	ldr	r0, [sp, #4]
    25f8:	47c0      	blx	r8
			if (error_timeout) { // Test for timeout in usart_getc
    25fa:	4b12      	ldr	r3, [pc, #72]	; (2644 <usart_getdata_xmd+0xd8>)
    25fc:	781b      	ldrb	r3, [r3, #0]
    25fe:	2b00      	cmp	r3, #0
    2600:	d004      	beq.n	260c <usart_getdata_xmd+0xa0>
				error_timeout = 0;
    2602:	2200      	movs	r2, #0
    2604:	4b0f      	ldr	r3, [pc, #60]	; (2644 <usart_getdata_xmd+0xd8>)
    2606:	701a      	strb	r2, [r3, #0]
				return (0);
    2608:	2500      	movs	r5, #0
    260a:	e011      	b.n	2630 <usart_getdata_xmd+0xc4>
			}
			if (b_run == true) {
    260c:	2801      	cmp	r0, #1
    260e:	d109      	bne.n	2624 <usart_getdata_xmd+0xb8>
				++sno;
    2610:	3401      	adds	r4, #1
    2612:	b2e4      	uxtb	r4, r4
				ptr_data += PKTLEN_128;
    2614:	9b01      	ldr	r3, [sp, #4]
    2616:	3380      	adds	r3, #128	; 0x80
    2618:	9301      	str	r3, [sp, #4]
    261a:	e7db      	b.n	25d4 <usart_getdata_xmd+0x68>
			}
			break;
		case EOT:
			usart_putc(ACK);
    261c:	2006      	movs	r0, #6
    261e:	4b0c      	ldr	r3, [pc, #48]	; (2650 <usart_getdata_xmd+0xe4>)
    2620:	4798      	blx	r3
    2622:	e001      	b.n	2628 <usart_getdata_xmd+0xbc>
		if (!(--nbr_of_timeout))
			return (0);
	}

	b_run = true;
	while (b_run != false) {
    2624:	2800      	cmp	r0, #0
    2626:	d1d5      	bne.n	25d4 <usart_getdata_xmd+0x68>
		default:
			b_run = false;
			break;
		}
	}
	mode_of_transfer = 0;
    2628:	2200      	movs	r2, #0
    262a:	4b07      	ldr	r3, [pc, #28]	; (2648 <usart_getdata_xmd+0xdc>)
    262c:	701a      	strb	r2, [r3, #0]
	return (true);
    262e:	2501      	movs	r5, #1
}
    2630:	0028      	movs	r0, r5
    2632:	b002      	add	sp, #8
    2634:	bc04      	pop	{r2}
    2636:	4690      	mov	r8, r2
    2638:	bdf0      	pop	{r4, r5, r6, r7, pc}
    263a:	46c0      	nop			; (mov r8, r8)
    263c:	00000d41 	.word	0x00000d41
    2640:	00002661 	.word	0x00002661
    2644:	200002f8 	.word	0x200002f8
    2648:	200002f9 	.word	0x200002f9
    264c:	2000023e 	.word	0x2000023e
    2650:	00002239 	.word	0x00002239
    2654:	00002251 	.word	0x00002251
    2658:	00002261 	.word	0x00002261
    265c:	00002399 	.word	0x00002399

00002660 <__aeabi_uidiv>:
    2660:	2200      	movs	r2, #0
    2662:	0843      	lsrs	r3, r0, #1
    2664:	428b      	cmp	r3, r1
    2666:	d374      	bcc.n	2752 <__aeabi_uidiv+0xf2>
    2668:	0903      	lsrs	r3, r0, #4
    266a:	428b      	cmp	r3, r1
    266c:	d35f      	bcc.n	272e <__aeabi_uidiv+0xce>
    266e:	0a03      	lsrs	r3, r0, #8
    2670:	428b      	cmp	r3, r1
    2672:	d344      	bcc.n	26fe <__aeabi_uidiv+0x9e>
    2674:	0b03      	lsrs	r3, r0, #12
    2676:	428b      	cmp	r3, r1
    2678:	d328      	bcc.n	26cc <__aeabi_uidiv+0x6c>
    267a:	0c03      	lsrs	r3, r0, #16
    267c:	428b      	cmp	r3, r1
    267e:	d30d      	bcc.n	269c <__aeabi_uidiv+0x3c>
    2680:	22ff      	movs	r2, #255	; 0xff
    2682:	0209      	lsls	r1, r1, #8
    2684:	ba12      	rev	r2, r2
    2686:	0c03      	lsrs	r3, r0, #16
    2688:	428b      	cmp	r3, r1
    268a:	d302      	bcc.n	2692 <__aeabi_uidiv+0x32>
    268c:	1212      	asrs	r2, r2, #8
    268e:	0209      	lsls	r1, r1, #8
    2690:	d065      	beq.n	275e <__aeabi_uidiv+0xfe>
    2692:	0b03      	lsrs	r3, r0, #12
    2694:	428b      	cmp	r3, r1
    2696:	d319      	bcc.n	26cc <__aeabi_uidiv+0x6c>
    2698:	e000      	b.n	269c <__aeabi_uidiv+0x3c>
    269a:	0a09      	lsrs	r1, r1, #8
    269c:	0bc3      	lsrs	r3, r0, #15
    269e:	428b      	cmp	r3, r1
    26a0:	d301      	bcc.n	26a6 <__aeabi_uidiv+0x46>
    26a2:	03cb      	lsls	r3, r1, #15
    26a4:	1ac0      	subs	r0, r0, r3
    26a6:	4152      	adcs	r2, r2
    26a8:	0b83      	lsrs	r3, r0, #14
    26aa:	428b      	cmp	r3, r1
    26ac:	d301      	bcc.n	26b2 <__aeabi_uidiv+0x52>
    26ae:	038b      	lsls	r3, r1, #14
    26b0:	1ac0      	subs	r0, r0, r3
    26b2:	4152      	adcs	r2, r2
    26b4:	0b43      	lsrs	r3, r0, #13
    26b6:	428b      	cmp	r3, r1
    26b8:	d301      	bcc.n	26be <__aeabi_uidiv+0x5e>
    26ba:	034b      	lsls	r3, r1, #13
    26bc:	1ac0      	subs	r0, r0, r3
    26be:	4152      	adcs	r2, r2
    26c0:	0b03      	lsrs	r3, r0, #12
    26c2:	428b      	cmp	r3, r1
    26c4:	d301      	bcc.n	26ca <__aeabi_uidiv+0x6a>
    26c6:	030b      	lsls	r3, r1, #12
    26c8:	1ac0      	subs	r0, r0, r3
    26ca:	4152      	adcs	r2, r2
    26cc:	0ac3      	lsrs	r3, r0, #11
    26ce:	428b      	cmp	r3, r1
    26d0:	d301      	bcc.n	26d6 <__aeabi_uidiv+0x76>
    26d2:	02cb      	lsls	r3, r1, #11
    26d4:	1ac0      	subs	r0, r0, r3
    26d6:	4152      	adcs	r2, r2
    26d8:	0a83      	lsrs	r3, r0, #10
    26da:	428b      	cmp	r3, r1
    26dc:	d301      	bcc.n	26e2 <__aeabi_uidiv+0x82>
    26de:	028b      	lsls	r3, r1, #10
    26e0:	1ac0      	subs	r0, r0, r3
    26e2:	4152      	adcs	r2, r2
    26e4:	0a43      	lsrs	r3, r0, #9
    26e6:	428b      	cmp	r3, r1
    26e8:	d301      	bcc.n	26ee <__aeabi_uidiv+0x8e>
    26ea:	024b      	lsls	r3, r1, #9
    26ec:	1ac0      	subs	r0, r0, r3
    26ee:	4152      	adcs	r2, r2
    26f0:	0a03      	lsrs	r3, r0, #8
    26f2:	428b      	cmp	r3, r1
    26f4:	d301      	bcc.n	26fa <__aeabi_uidiv+0x9a>
    26f6:	020b      	lsls	r3, r1, #8
    26f8:	1ac0      	subs	r0, r0, r3
    26fa:	4152      	adcs	r2, r2
    26fc:	d2cd      	bcs.n	269a <__aeabi_uidiv+0x3a>
    26fe:	09c3      	lsrs	r3, r0, #7
    2700:	428b      	cmp	r3, r1
    2702:	d301      	bcc.n	2708 <__aeabi_uidiv+0xa8>
    2704:	01cb      	lsls	r3, r1, #7
    2706:	1ac0      	subs	r0, r0, r3
    2708:	4152      	adcs	r2, r2
    270a:	0983      	lsrs	r3, r0, #6
    270c:	428b      	cmp	r3, r1
    270e:	d301      	bcc.n	2714 <__aeabi_uidiv+0xb4>
    2710:	018b      	lsls	r3, r1, #6
    2712:	1ac0      	subs	r0, r0, r3
    2714:	4152      	adcs	r2, r2
    2716:	0943      	lsrs	r3, r0, #5
    2718:	428b      	cmp	r3, r1
    271a:	d301      	bcc.n	2720 <__aeabi_uidiv+0xc0>
    271c:	014b      	lsls	r3, r1, #5
    271e:	1ac0      	subs	r0, r0, r3
    2720:	4152      	adcs	r2, r2
    2722:	0903      	lsrs	r3, r0, #4
    2724:	428b      	cmp	r3, r1
    2726:	d301      	bcc.n	272c <__aeabi_uidiv+0xcc>
    2728:	010b      	lsls	r3, r1, #4
    272a:	1ac0      	subs	r0, r0, r3
    272c:	4152      	adcs	r2, r2
    272e:	08c3      	lsrs	r3, r0, #3
    2730:	428b      	cmp	r3, r1
    2732:	d301      	bcc.n	2738 <__aeabi_uidiv+0xd8>
    2734:	00cb      	lsls	r3, r1, #3
    2736:	1ac0      	subs	r0, r0, r3
    2738:	4152      	adcs	r2, r2
    273a:	0883      	lsrs	r3, r0, #2
    273c:	428b      	cmp	r3, r1
    273e:	d301      	bcc.n	2744 <__aeabi_uidiv+0xe4>
    2740:	008b      	lsls	r3, r1, #2
    2742:	1ac0      	subs	r0, r0, r3
    2744:	4152      	adcs	r2, r2
    2746:	0843      	lsrs	r3, r0, #1
    2748:	428b      	cmp	r3, r1
    274a:	d301      	bcc.n	2750 <__aeabi_uidiv+0xf0>
    274c:	004b      	lsls	r3, r1, #1
    274e:	1ac0      	subs	r0, r0, r3
    2750:	4152      	adcs	r2, r2
    2752:	1a41      	subs	r1, r0, r1
    2754:	d200      	bcs.n	2758 <__aeabi_uidiv+0xf8>
    2756:	4601      	mov	r1, r0
    2758:	4152      	adcs	r2, r2
    275a:	4610      	mov	r0, r2
    275c:	4770      	bx	lr
    275e:	e7ff      	b.n	2760 <__aeabi_uidiv+0x100>
    2760:	b501      	push	{r0, lr}
    2762:	2000      	movs	r0, #0
    2764:	f000 f806 	bl	2774 <__aeabi_idiv0>
    2768:	bd02      	pop	{r1, pc}
    276a:	46c0      	nop			; (mov r8, r8)

0000276c <__aeabi_uidivmod>:
    276c:	2900      	cmp	r1, #0
    276e:	d0f7      	beq.n	2760 <__aeabi_uidiv+0x100>
    2770:	e776      	b.n	2660 <__aeabi_uidiv>
    2772:	4770      	bx	lr

00002774 <__aeabi_idiv0>:
    2774:	4770      	bx	lr
    2776:	46c0      	nop			; (mov r8, r8)

00002778 <__ctzsi2>:
    2778:	4241      	negs	r1, r0
    277a:	4008      	ands	r0, r1
    277c:	211c      	movs	r1, #28
    277e:	2301      	movs	r3, #1
    2780:	041b      	lsls	r3, r3, #16
    2782:	4298      	cmp	r0, r3
    2784:	d301      	bcc.n	278a <__ctzsi2+0x12>
    2786:	0c00      	lsrs	r0, r0, #16
    2788:	3910      	subs	r1, #16
    278a:	0a1b      	lsrs	r3, r3, #8
    278c:	4298      	cmp	r0, r3
    278e:	d301      	bcc.n	2794 <__ctzsi2+0x1c>
    2790:	0a00      	lsrs	r0, r0, #8
    2792:	3908      	subs	r1, #8
    2794:	091b      	lsrs	r3, r3, #4
    2796:	4298      	cmp	r0, r3
    2798:	d301      	bcc.n	279e <__ctzsi2+0x26>
    279a:	0900      	lsrs	r0, r0, #4
    279c:	3904      	subs	r1, #4
    279e:	a202      	add	r2, pc, #8	; (adr r2, 27a8 <__ctzsi2+0x30>)
    27a0:	5c10      	ldrb	r0, [r2, r0]
    27a2:	1a40      	subs	r0, r0, r1
    27a4:	4770      	bx	lr
    27a6:	46c0      	nop			; (mov r8, r8)
    27a8:	1d1d1c1b 	.word	0x1d1d1c1b
    27ac:	1e1e1e1e 	.word	0x1e1e1e1e
    27b0:	1f1f1f1f 	.word	0x1f1f1f1f
    27b4:	1f1f1f1f 	.word	0x1f1f1f1f

000027b8 <__aeabi_lmul>:
    27b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ba:	464f      	mov	r7, r9
    27bc:	4646      	mov	r6, r8
    27be:	b4c0      	push	{r6, r7}
    27c0:	0416      	lsls	r6, r2, #16
    27c2:	0c36      	lsrs	r6, r6, #16
    27c4:	4699      	mov	r9, r3
    27c6:	0033      	movs	r3, r6
    27c8:	0405      	lsls	r5, r0, #16
    27ca:	0c2c      	lsrs	r4, r5, #16
    27cc:	0c07      	lsrs	r7, r0, #16
    27ce:	0c15      	lsrs	r5, r2, #16
    27d0:	4363      	muls	r3, r4
    27d2:	437e      	muls	r6, r7
    27d4:	436f      	muls	r7, r5
    27d6:	4365      	muls	r5, r4
    27d8:	0c1c      	lsrs	r4, r3, #16
    27da:	19ad      	adds	r5, r5, r6
    27dc:	1964      	adds	r4, r4, r5
    27de:	469c      	mov	ip, r3
    27e0:	42a6      	cmp	r6, r4
    27e2:	d903      	bls.n	27ec <__aeabi_lmul+0x34>
    27e4:	2380      	movs	r3, #128	; 0x80
    27e6:	025b      	lsls	r3, r3, #9
    27e8:	4698      	mov	r8, r3
    27ea:	4447      	add	r7, r8
    27ec:	4663      	mov	r3, ip
    27ee:	0c25      	lsrs	r5, r4, #16
    27f0:	19ef      	adds	r7, r5, r7
    27f2:	041d      	lsls	r5, r3, #16
    27f4:	464b      	mov	r3, r9
    27f6:	434a      	muls	r2, r1
    27f8:	4343      	muls	r3, r0
    27fa:	0c2d      	lsrs	r5, r5, #16
    27fc:	0424      	lsls	r4, r4, #16
    27fe:	1964      	adds	r4, r4, r5
    2800:	1899      	adds	r1, r3, r2
    2802:	19c9      	adds	r1, r1, r7
    2804:	0020      	movs	r0, r4
    2806:	bc0c      	pop	{r2, r3}
    2808:	4690      	mov	r8, r2
    280a:	4699      	mov	r9, r3
    280c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    280e:	46c0      	nop			; (mov r8, r8)

00002810 <__libc_init_array>:
    2810:	4b0e      	ldr	r3, [pc, #56]	; (284c <__libc_init_array+0x3c>)
    2812:	b570      	push	{r4, r5, r6, lr}
    2814:	2500      	movs	r5, #0
    2816:	001e      	movs	r6, r3
    2818:	4c0d      	ldr	r4, [pc, #52]	; (2850 <__libc_init_array+0x40>)
    281a:	1ae4      	subs	r4, r4, r3
    281c:	10a4      	asrs	r4, r4, #2
    281e:	42a5      	cmp	r5, r4
    2820:	d004      	beq.n	282c <__libc_init_array+0x1c>
    2822:	00ab      	lsls	r3, r5, #2
    2824:	58f3      	ldr	r3, [r6, r3]
    2826:	4798      	blx	r3
    2828:	3501      	adds	r5, #1
    282a:	e7f8      	b.n	281e <__libc_init_array+0xe>
    282c:	f000 f894 	bl	2958 <_init>
    2830:	4b08      	ldr	r3, [pc, #32]	; (2854 <__libc_init_array+0x44>)
    2832:	2500      	movs	r5, #0
    2834:	001e      	movs	r6, r3
    2836:	4c08      	ldr	r4, [pc, #32]	; (2858 <__libc_init_array+0x48>)
    2838:	1ae4      	subs	r4, r4, r3
    283a:	10a4      	asrs	r4, r4, #2
    283c:	42a5      	cmp	r5, r4
    283e:	d004      	beq.n	284a <__libc_init_array+0x3a>
    2840:	00ab      	lsls	r3, r5, #2
    2842:	58f3      	ldr	r3, [r6, r3]
    2844:	4798      	blx	r3
    2846:	3501      	adds	r5, #1
    2848:	e7f8      	b.n	283c <__libc_init_array+0x2c>
    284a:	bd70      	pop	{r4, r5, r6, pc}
    284c:	00002964 	.word	0x00002964
    2850:	00002964 	.word	0x00002964
    2854:	00002964 	.word	0x00002964
    2858:	00002968 	.word	0x00002968

0000285c <memcpy>:
    285c:	2300      	movs	r3, #0
    285e:	b510      	push	{r4, lr}
    2860:	429a      	cmp	r2, r3
    2862:	d003      	beq.n	286c <memcpy+0x10>
    2864:	5ccc      	ldrb	r4, [r1, r3]
    2866:	54c4      	strb	r4, [r0, r3]
    2868:	3301      	adds	r3, #1
    286a:	e7f9      	b.n	2860 <memcpy+0x4>
    286c:	bd10      	pop	{r4, pc}
    286e:	0000      	movs	r0, r0
    2870:	42000000 	.word	0x42000000
    2874:	42000400 	.word	0x42000400
    2878:	42000800 	.word	0x42000800
    287c:	42000c00 	.word	0x42000c00
    2880:	42001000 	.word	0x42001000
    2884:	43000400 	.word	0x43000400
    2888:	0b0a0908 	.word	0x0b0a0908
    288c:	00000d0c 	.word	0x00000d0c
    2890:	00000d52 	.word	0x00000d52
    2894:	00000d4e 	.word	0x00000d4e
    2898:	00000d4e 	.word	0x00000d4e
    289c:	00000db0 	.word	0x00000db0
    28a0:	00000db0 	.word	0x00000db0
    28a4:	00000d68 	.word	0x00000d68
    28a8:	00000d58 	.word	0x00000d58
    28ac:	00000d6e 	.word	0x00000d6e
    28b0:	00000d9e 	.word	0x00000d9e
    28b4:	00000f74 	.word	0x00000f74
    28b8:	00000f54 	.word	0x00000f54
    28bc:	00000f54 	.word	0x00000f54
    28c0:	00000fee 	.word	0x00000fee
    28c4:	00000f66 	.word	0x00000f66
    28c8:	00000f82 	.word	0x00000f82
    28cc:	00000f58 	.word	0x00000f58
    28d0:	00000f90 	.word	0x00000f90
    28d4:	00000fd2 	.word	0x00000fd2
    28d8:	0000102c 	.word	0x0000102c
    28dc:	0000106e 	.word	0x0000106e
    28e0:	0000106e 	.word	0x0000106e
    28e4:	0000106e 	.word	0x0000106e
    28e8:	0000101e 	.word	0x0000101e
    28ec:	0000103a 	.word	0x0000103a
    28f0:	00001010 	.word	0x00001010
    28f4:	00001048 	.word	0x00001048
    28f8:	0000105e 	.word	0x0000105e

000028fc <_usb_device_irq_bits>:
    28fc:	00080004 00800070 01000001 00000200     ....p...........

0000290c <uart_if>:
    290c:	00002239 00002261 00002251 000022b1     9"..a"..Q"..."..
    291c:	000022d1 00002415 0000256d              ."...$..m%..

00002928 <RomBOOT_Version>:
    2928:	36312e32 00000000 00000d0a 00000076     2.16........v...
    2938:	00000020 2072614d 32203731 00373130      ...Mar 17 2017.
    2948:	353a3331 39313a32 00000000 0000003e     13:52:19....>...

00002958 <_init>:
    2958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    295a:	46c0      	nop			; (mov r8, r8)
    295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    295e:	bc08      	pop	{r3}
    2960:	469e      	mov	lr, r3
    2962:	4770      	bx	lr

00002964 <__init_array_start>:
    2964:	000000dd 	.word	0x000000dd

00002968 <_fini>:
    2968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    296a:	46c0      	nop			; (mov r8, r8)
    296c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    296e:	bc08      	pop	{r3}
    2970:	469e      	mov	lr, r3
    2972:	4770      	bx	lr

00002974 <__fini_array_start>:
    2974:	000000b5 	.word	0x000000b5
