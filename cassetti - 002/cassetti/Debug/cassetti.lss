
cassetti.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006b40  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000b0  20000000  00006b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  000200b0  2**0
                  CONTENTS
  3 .bss          00004854  200000b0  00006bf0  000200b0  2**2
                  ALLOC
  4 .stack        00002004  20004904  0000b444  000200b0  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
  7 .debug_info   00043ce6  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000061d5  00000000  00000000  00063e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a554  00000000  00000000  00069fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000af8  00000000  00000000  00074540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000cb0  00000000  00000000  00075038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000226e7  00000000  00000000  00075ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00015366  00000000  00000000  000983cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a58f4  00000000  00000000  000ad735  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002220  00000000  00000000  0015302c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	08 69 00 20 b1 39 00 00 ad 39 00 00 ad 39 00 00     .i. .9...9...9..
	...
      2c:	15 10 00 00 00 00 00 00 00 00 00 00 79 10 00 00     ............y...
      3c:	bd 10 00 00 ad 39 00 00 ad 39 00 00 ad 39 00 00     .....9...9...9..
      4c:	ad 39 00 00 ad 39 00 00 ad 39 00 00 ad 39 00 00     .9...9...9...9..
      5c:	ad 39 00 00 a1 2c 00 00 b1 2c 00 00 c1 2c 00 00     .9...,...,...,..
      6c:	d1 2c 00 00 e1 2c 00 00 f1 2c 00 00 ad 39 00 00     .,...,...,...9..
      7c:	ad 39 00 00 ad 39 00 00 ad 39 00 00 ad 39 00 00     .9...9...9...9..
      8c:	ad 39 00 00 ad 39 00 00 ad 39 00 00 59 32 00 00     .9...9...9..Y2..
      9c:	ad 39 00 00 ad 39 00 00 ad 39 00 00 ad 39 00 00     .9...9...9...9..
      ac:	ad 39 00 00 00 00 00 00                             .9......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000b0 	.word	0x200000b0
      d4:	00000000 	.word	0x00000000
      d8:	00006b40 	.word	0x00006b40

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000b4 	.word	0x200000b4
     108:	00006b40 	.word	0x00006b40
     10c:	00006b40 	.word	0x00006b40
     110:	00000000 	.word	0x00000000

00000114 <lis302dl_write_configuration>:
	0x88,
	0x08,
};


void lis302dl_write_configuration(void) {
     114:	b530      	push	{r4, r5, lr}
     116:	b085      	sub	sp, #20
	

	struct i2c_master_packet packet = {
     118:	aa01      	add	r2, sp, #4
     11a:	4b06      	ldr	r3, [pc, #24]	; (134 <lis302dl_write_configuration+0x20>)
     11c:	cb13      	ldmia	r3!, {r0, r1, r4}
     11e:	c213      	stmia	r2!, {r0, r1, r4}
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) != STATUS_OK);
     120:	4d05      	ldr	r5, [pc, #20]	; (138 <lis302dl_write_configuration+0x24>)
     122:	4c06      	ldr	r4, [pc, #24]	; (13c <lis302dl_write_configuration+0x28>)
     124:	a901      	add	r1, sp, #4
     126:	0028      	movs	r0, r5
     128:	47a0      	blx	r4
     12a:	2800      	cmp	r0, #0
     12c:	d1fa      	bne.n	124 <lis302dl_write_configuration+0x10>

	return;
}
     12e:	b005      	add	sp, #20
     130:	bd30      	pop	{r4, r5, pc}
     132:	46c0      	nop			; (mov r8, r8)
     134:	00006854 	.word	0x00006854
     138:	20004894 	.word	0x20004894
     13c:	0000085d 	.word	0x0000085d

00000140 <lis302dl_read_byte>:

	return;
}


uint8_t lis302dl_read_byte(uint8_t reg_address) {
     140:	b530      	push	{r4, r5, lr}
     142:	b08b      	sub	sp, #44	; 0x2c
     144:	466b      	mov	r3, sp
     146:	1dda      	adds	r2, r3, #7
     148:	71d8      	strb	r0, [r3, #7]

	uint8_t data;

	struct i2c_master_packet packet1 = {
     14a:	ab06      	add	r3, sp, #24
     14c:	211c      	movs	r1, #28
     14e:	8019      	strh	r1, [r3, #0]
     150:	391a      	subs	r1, #26
     152:	8059      	strh	r1, [r3, #2]
     154:	9207      	str	r2, [sp, #28]
     156:	2200      	movs	r2, #0
     158:	721a      	strb	r2, [r3, #8]
     15a:	725a      	strb	r2, [r3, #9]
     15c:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet1) != STATUS_OK);
     15e:	4d0f      	ldr	r5, [pc, #60]	; (19c <lis302dl_read_byte+0x5c>)
     160:	4c0f      	ldr	r4, [pc, #60]	; (1a0 <lis302dl_read_byte+0x60>)
     162:	a906      	add	r1, sp, #24
     164:	0028      	movs	r0, r5
     166:	47a0      	blx	r4
     168:	2800      	cmp	r0, #0
     16a:	d1fa      	bne.n	162 <lis302dl_read_byte+0x22>

	struct i2c_master_packet packet2 = {
     16c:	ab03      	add	r3, sp, #12
     16e:	221c      	movs	r2, #28
     170:	801a      	strh	r2, [r3, #0]
     172:	3a1b      	subs	r2, #27
     174:	805a      	strh	r2, [r3, #2]
     176:	3226      	adds	r2, #38	; 0x26
     178:	446a      	add	r2, sp
     17a:	9204      	str	r2, [sp, #16]
     17c:	2200      	movs	r2, #0
     17e:	721a      	strb	r2, [r3, #8]
     180:	725a      	strb	r2, [r3, #9]
     182:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet2) != STATUS_OK);
     184:	4d05      	ldr	r5, [pc, #20]	; (19c <lis302dl_read_byte+0x5c>)
     186:	4c07      	ldr	r4, [pc, #28]	; (1a4 <lis302dl_read_byte+0x64>)
     188:	a903      	add	r1, sp, #12
     18a:	0028      	movs	r0, r5
     18c:	47a0      	blx	r4
     18e:	2800      	cmp	r0, #0
     190:	d1fa      	bne.n	188 <lis302dl_read_byte+0x48>

	return data;
     192:	2327      	movs	r3, #39	; 0x27
     194:	446b      	add	r3, sp
     196:	7818      	ldrb	r0, [r3, #0]

}
     198:	b00b      	add	sp, #44	; 0x2c
     19a:	bd30      	pop	{r4, r5, pc}
     19c:	20004894 	.word	0x20004894
     1a0:	0000085d 	.word	0x0000085d
     1a4:	00000839 	.word	0x00000839

000001a8 <trimmer_value>:
extern struct i2c_master_module i2c_master_instance;


uint8_t trimmer_value(uint8_t value)
{
	return  value << 3;
     1a8:	00c0      	lsls	r0, r0, #3
     1aa:	b2c0      	uxtb	r0, r0
}
     1ac:	4770      	bx	lr
	...

000001b0 <MAX5435M_write_byte>:


void MAX5435M_write_byte(uint8_t byte_address, uint8_t byte_value) {
     1b0:	b530      	push	{r4, r5, lr}
     1b2:	b085      	sub	sp, #20
	
	
	uint8_t pack[2];
	pack[0] = byte_address;
     1b4:	ab03      	add	r3, sp, #12
     1b6:	7018      	strb	r0, [r3, #0]
	pack[1] = byte_value;
     1b8:	7059      	strb	r1, [r3, #1]

	
	struct i2c_master_packet packet = {
     1ba:	222c      	movs	r2, #44	; 0x2c
     1bc:	4669      	mov	r1, sp
     1be:	800a      	strh	r2, [r1, #0]
     1c0:	3a2a      	subs	r2, #42	; 0x2a
     1c2:	804a      	strh	r2, [r1, #2]
     1c4:	9301      	str	r3, [sp, #4]
     1c6:	2300      	movs	r3, #0
     1c8:	720b      	strb	r3, [r1, #8]
     1ca:	724b      	strb	r3, [r1, #9]
     1cc:	728b      	strb	r3, [r1, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) != STATUS_OK);
     1ce:	4d04      	ldr	r5, [pc, #16]	; (1e0 <MAX5435M_write_byte+0x30>)
     1d0:	4c04      	ldr	r4, [pc, #16]	; (1e4 <MAX5435M_write_byte+0x34>)
     1d2:	4669      	mov	r1, sp
     1d4:	0028      	movs	r0, r5
     1d6:	47a0      	blx	r4
     1d8:	2800      	cmp	r0, #0
     1da:	d1fa      	bne.n	1d2 <MAX5435M_write_byte+0x22>

	return;
}
     1dc:	b005      	add	sp, #20
     1de:	bd30      	pop	{r4, r5, pc}
     1e0:	20004894 	.word	0x20004894
     1e4:	0000085d 	.word	0x0000085d

000001e8 <MAX5435L_write_byte>:

void MAX5435L_write_byte(uint8_t byte_address, uint8_t byte_value) {
     1e8:	b530      	push	{r4, r5, lr}
     1ea:	b085      	sub	sp, #20
	
	
	uint8_t pack[2];
	pack[0] = byte_address;
     1ec:	ab03      	add	r3, sp, #12
     1ee:	7018      	strb	r0, [r3, #0]
	pack[1] = byte_value;
     1f0:	7059      	strb	r1, [r3, #1]

	
	struct i2c_master_packet packet = {
     1f2:	2228      	movs	r2, #40	; 0x28
     1f4:	4669      	mov	r1, sp
     1f6:	800a      	strh	r2, [r1, #0]
     1f8:	3a26      	subs	r2, #38	; 0x26
     1fa:	804a      	strh	r2, [r1, #2]
     1fc:	9301      	str	r3, [sp, #4]
     1fe:	2300      	movs	r3, #0
     200:	720b      	strb	r3, [r1, #8]
     202:	724b      	strb	r3, [r1, #9]
     204:	728b      	strb	r3, [r1, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) != STATUS_OK);
     206:	4d04      	ldr	r5, [pc, #16]	; (218 <MAX5435L_write_byte+0x30>)
     208:	4c04      	ldr	r4, [pc, #16]	; (21c <MAX5435L_write_byte+0x34>)
     20a:	4669      	mov	r1, sp
     20c:	0028      	movs	r0, r5
     20e:	47a0      	blx	r4
     210:	2800      	cmp	r0, #0
     212:	d1fa      	bne.n	20a <MAX5435L_write_byte+0x22>

	return;
}
     214:	b005      	add	sp, #20
     216:	bd30      	pop	{r4, r5, pc}
     218:	20004894 	.word	0x20004894
     21c:	0000085d 	.word	0x0000085d

00000220 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     220:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     222:	2207      	movs	r2, #7
     224:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     226:	421a      	tst	r2, r3
     228:	d1fc      	bne.n	224 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     22a:	4770      	bx	lr

0000022c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     22c:	b5f0      	push	{r4, r5, r6, r7, lr}
     22e:	46de      	mov	lr, fp
     230:	4657      	mov	r7, sl
     232:	464e      	mov	r6, r9
     234:	4645      	mov	r5, r8
     236:	b5e0      	push	{r5, r6, r7, lr}
     238:	b08b      	sub	sp, #44	; 0x2c
     23a:	0007      	movs	r7, r0
     23c:	000d      	movs	r5, r1
     23e:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     240:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     242:	0008      	movs	r0, r1
     244:	4ba0      	ldr	r3, [pc, #640]	; (4c8 <i2c_master_init+0x29c>)
     246:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
     248:	2805      	cmp	r0, #5
     24a:	d100      	bne.n	24e <i2c_master_init+0x22>
     24c:	e135      	b.n	4ba <i2c_master_init+0x28e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     24e:	0004      	movs	r4, r0
     250:	3412      	adds	r4, #18
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     252:	4a9e      	ldr	r2, [pc, #632]	; (4cc <i2c_master_init+0x2a0>)
     254:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     256:	2301      	movs	r3, #1
     258:	4083      	lsls	r3, r0
     25a:	430b      	orrs	r3, r1
     25c:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     25e:	a909      	add	r1, sp, #36	; 0x24
     260:	7b33      	ldrb	r3, [r6, #12]
     262:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     264:	b2e4      	uxtb	r4, r4
     266:	0020      	movs	r0, r4
     268:	4b99      	ldr	r3, [pc, #612]	; (4d0 <i2c_master_init+0x2a4>)
     26a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     26c:	0020      	movs	r0, r4
     26e:	4b99      	ldr	r3, [pc, #612]	; (4d4 <i2c_master_init+0x2a8>)
     270:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     272:	7b30      	ldrb	r0, [r6, #12]
     274:	2100      	movs	r1, #0
     276:	4b98      	ldr	r3, [pc, #608]	; (4d8 <i2c_master_init+0x2ac>)
     278:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     27a:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
     27c:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     27e:	079b      	lsls	r3, r3, #30
     280:	d506      	bpl.n	290 <i2c_master_init+0x64>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     282:	b00b      	add	sp, #44	; 0x2c
     284:	bc3c      	pop	{r2, r3, r4, r5}
     286:	4690      	mov	r8, r2
     288:	4699      	mov	r9, r3
     28a:	46a2      	mov	sl, r4
     28c:	46ab      	mov	fp, r5
     28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     290:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
     292:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     294:	07db      	lsls	r3, r3, #31
     296:	d4f4      	bmi.n	282 <i2c_master_init+0x56>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     298:	6838      	ldr	r0, [r7, #0]
     29a:	4b8b      	ldr	r3, [pc, #556]	; (4c8 <i2c_master_init+0x29c>)
     29c:	4699      	mov	r9, r3
     29e:	4798      	blx	r3
     2a0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     2a2:	498e      	ldr	r1, [pc, #568]	; (4dc <i2c_master_init+0x2b0>)
     2a4:	4b8e      	ldr	r3, [pc, #568]	; (4e0 <i2c_master_init+0x2b4>)
     2a6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     2a8:	00a4      	lsls	r4, r4, #2
     2aa:	4b8e      	ldr	r3, [pc, #568]	; (4e4 <i2c_master_init+0x2b8>)
     2ac:	50e7      	str	r7, [r4, r3]
	module->registered_callback = 0;
     2ae:	2300      	movs	r3, #0
     2b0:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
     2b2:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
     2b4:	2400      	movs	r4, #0
     2b6:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
     2b8:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
     2ba:	2225      	movs	r2, #37	; 0x25
     2bc:	54bc      	strb	r4, [r7, r2]
	module->buffer = NULL;
     2be:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     2c0:	3314      	adds	r3, #20
     2c2:	602b      	str	r3, [r5, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     2c4:	683b      	ldr	r3, [r7, #0]
     2c6:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     2c8:	0018      	movs	r0, r3
     2ca:	47c8      	blx	r9
     2cc:	4681      	mov	r9, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     2ce:	2380      	movs	r3, #128	; 0x80
     2d0:	aa08      	add	r2, sp, #32
     2d2:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2d4:	7054      	strb	r4, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2d6:	2301      	movs	r3, #1
     2d8:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     2da:	70d4      	strb	r4, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     2dc:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     2de:	6a35      	ldr	r5, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
     2e0:	2800      	cmp	r0, #0
     2e2:	d100      	bne.n	2e6 <i2c_master_init+0xba>
     2e4:	e0a7      	b.n	436 <i2c_master_init+0x20a>
	pin_conf.mux_position = pad0 & 0xFFFF;
     2e6:	ab08      	add	r3, sp, #32
     2e8:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     2ea:	2302      	movs	r3, #2
     2ec:	aa08      	add	r2, sp, #32
     2ee:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     2f0:	0c00      	lsrs	r0, r0, #16
     2f2:	b2c0      	uxtb	r0, r0
     2f4:	0011      	movs	r1, r2
     2f6:	4b7c      	ldr	r3, [pc, #496]	; (4e8 <i2c_master_init+0x2bc>)
     2f8:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     2fa:	2d00      	cmp	r5, #0
     2fc:	d100      	bne.n	300 <i2c_master_init+0xd4>
     2fe:	e09f      	b.n	440 <i2c_master_init+0x214>
	pin_conf.mux_position = pad1 & 0xFFFF;
     300:	ab08      	add	r3, sp, #32
     302:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     304:	2302      	movs	r3, #2
     306:	aa08      	add	r2, sp, #32
     308:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     30a:	0c2d      	lsrs	r5, r5, #16
     30c:	b2e8      	uxtb	r0, r5
     30e:	0011      	movs	r1, r2
     310:	4b75      	ldr	r3, [pc, #468]	; (4e8 <i2c_master_init+0x2bc>)
     312:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     314:	8ab3      	ldrh	r3, [r6, #20]
     316:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     318:	8af3      	ldrh	r3, [r6, #22]
     31a:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     31c:	7e33      	ldrb	r3, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     31e:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     320:	2b00      	cmp	r3, #0
     322:	d104      	bne.n	32e <i2c_master_init+0x102>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     324:	4b71      	ldr	r3, [pc, #452]	; (4ec <i2c_master_init+0x2c0>)
     326:	789b      	ldrb	r3, [r3, #2]
     328:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     32a:	0fdb      	lsrs	r3, r3, #31
     32c:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     32e:	68b1      	ldr	r1, [r6, #8]
     330:	6933      	ldr	r3, [r6, #16]
     332:	430b      	orrs	r3, r1
     334:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     336:	2224      	movs	r2, #36	; 0x24
     338:	5cb2      	ldrb	r2, [r6, r2]
     33a:	2a00      	cmp	r2, #0
     33c:	d002      	beq.n	344 <i2c_master_init+0x118>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     33e:	2280      	movs	r2, #128	; 0x80
     340:	05d2      	lsls	r2, r2, #23
     342:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     344:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     346:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     348:	222c      	movs	r2, #44	; 0x2c
     34a:	5cb2      	ldrb	r2, [r6, r2]
     34c:	2a00      	cmp	r2, #0
     34e:	d103      	bne.n	358 <i2c_master_init+0x12c>
     350:	2280      	movs	r2, #128	; 0x80
     352:	0492      	lsls	r2, r2, #18
     354:	4291      	cmp	r1, r2
     356:	d102      	bne.n	35e <i2c_master_init+0x132>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     358:	2280      	movs	r2, #128	; 0x80
     35a:	0512      	lsls	r2, r2, #20
     35c:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     35e:	222d      	movs	r2, #45	; 0x2d
     360:	5cb2      	ldrb	r2, [r6, r2]
     362:	2a00      	cmp	r2, #0
     364:	d002      	beq.n	36c <i2c_master_init+0x140>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     366:	2280      	movs	r2, #128	; 0x80
     368:	0412      	lsls	r2, r2, #16
     36a:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     36c:	222e      	movs	r2, #46	; 0x2e
     36e:	5cb2      	ldrb	r2, [r6, r2]
     370:	2a00      	cmp	r2, #0
     372:	d002      	beq.n	37a <i2c_master_init+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     374:	2280      	movs	r2, #128	; 0x80
     376:	03d2      	lsls	r2, r2, #15
     378:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     37a:	4642      	mov	r2, r8
     37c:	6812      	ldr	r2, [r2, #0]
     37e:	4313      	orrs	r3, r2
     380:	4642      	mov	r2, r8
     382:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     384:	2380      	movs	r3, #128	; 0x80
     386:	005b      	lsls	r3, r3, #1
     388:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     38a:	464c      	mov	r4, r9
     38c:	3412      	adds	r4, #18
     38e:	b2e0      	uxtb	r0, r4
     390:	4b57      	ldr	r3, [pc, #348]	; (4f0 <i2c_master_init+0x2c4>)
     392:	4798      	blx	r3
     394:	0005      	movs	r5, r0
     396:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     398:	27fa      	movs	r7, #250	; 0xfa
     39a:	00bf      	lsls	r7, r7, #2
     39c:	6833      	ldr	r3, [r6, #0]
     39e:	435f      	muls	r7, r3
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     3a0:	6873      	ldr	r3, [r6, #4]
     3a2:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     3a4:	4c53      	ldr	r4, [pc, #332]	; (4f4 <i2c_master_init+0x2c8>)
     3a6:	47a0      	blx	r4
     3a8:	9002      	str	r0, [sp, #8]
     3aa:	9103      	str	r1, [sp, #12]
     3ac:	0078      	lsls	r0, r7, #1
     3ae:	47a0      	blx	r4
     3b0:	9000      	str	r0, [sp, #0]
     3b2:	9101      	str	r1, [sp, #4]
	uint32_t trise       = config->sda_scl_rise_time_ns;
     3b4:	8e30      	ldrh	r0, [r6, #48]	; 0x30
	tmp_baud = (int32_t)(div_ceil(
     3b6:	4368      	muls	r0, r5
     3b8:	47a0      	blx	r4
     3ba:	4b4f      	ldr	r3, [pc, #316]	; (4f8 <i2c_master_init+0x2cc>)
     3bc:	469b      	mov	fp, r3
     3be:	4a4f      	ldr	r2, [pc, #316]	; (4fc <i2c_master_init+0x2d0>)
     3c0:	4b4f      	ldr	r3, [pc, #316]	; (500 <i2c_master_init+0x2d4>)
     3c2:	47d8      	blx	fp
     3c4:	4d4f      	ldr	r5, [pc, #316]	; (504 <i2c_master_init+0x2d8>)
     3c6:	2200      	movs	r2, #0
     3c8:	4b4f      	ldr	r3, [pc, #316]	; (508 <i2c_master_init+0x2dc>)
     3ca:	47a8      	blx	r5
     3cc:	9004      	str	r0, [sp, #16]
     3ce:	9105      	str	r1, [sp, #20]
     3d0:	0038      	movs	r0, r7
     3d2:	47a0      	blx	r4
     3d4:	0002      	movs	r2, r0
     3d6:	000b      	movs	r3, r1
     3d8:	9804      	ldr	r0, [sp, #16]
     3da:	9905      	ldr	r1, [sp, #20]
     3dc:	47d8      	blx	fp
     3de:	0002      	movs	r2, r0
     3e0:	000b      	movs	r3, r1
     3e2:	4c4a      	ldr	r4, [pc, #296]	; (50c <i2c_master_init+0x2e0>)
     3e4:	9802      	ldr	r0, [sp, #8]
     3e6:	9903      	ldr	r1, [sp, #12]
     3e8:	47a0      	blx	r4
     3ea:	9a00      	ldr	r2, [sp, #0]
     3ec:	9b01      	ldr	r3, [sp, #4]
     3ee:	47a8      	blx	r5
     3f0:	2200      	movs	r2, #0
     3f2:	4b47      	ldr	r3, [pc, #284]	; (510 <i2c_master_init+0x2e4>)
     3f4:	47a0      	blx	r4
     3f6:	9a00      	ldr	r2, [sp, #0]
     3f8:	9b01      	ldr	r3, [sp, #4]
     3fa:	4c46      	ldr	r4, [pc, #280]	; (514 <i2c_master_init+0x2e8>)
     3fc:	47a0      	blx	r4
     3fe:	4b46      	ldr	r3, [pc, #280]	; (518 <i2c_master_init+0x2ec>)
     400:	4798      	blx	r3
     402:	0004      	movs	r4, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     404:	2380      	movs	r3, #128	; 0x80
     406:	049b      	lsls	r3, r3, #18
     408:	68b2      	ldr	r2, [r6, #8]
     40a:	429a      	cmp	r2, r3
     40c:	d01e      	beq.n	44c <i2c_master_init+0x220>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     40e:	0003      	movs	r3, r0
     410:	2040      	movs	r0, #64	; 0x40
     412:	2cff      	cmp	r4, #255	; 0xff
     414:	d900      	bls.n	418 <i2c_master_init+0x1ec>
     416:	e734      	b.n	282 <i2c_master_init+0x56>
	int32_t tmp_baudlow_hs = 0;
     418:	2600      	movs	r6, #0
	int32_t tmp_baud_hs = 0;
     41a:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     41c:	24ff      	movs	r4, #255	; 0xff
     41e:	401c      	ands	r4, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     420:	0636      	lsls	r6, r6, #24
     422:	4334      	orrs	r4, r6
     424:	0400      	lsls	r0, r0, #16
     426:	23ff      	movs	r3, #255	; 0xff
     428:	041b      	lsls	r3, r3, #16
     42a:	4018      	ands	r0, r3
     42c:	4304      	orrs	r4, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     42e:	4643      	mov	r3, r8
     430:	60dc      	str	r4, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     432:	2000      	movs	r0, #0
     434:	e725      	b.n	282 <i2c_master_init+0x56>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     436:	2100      	movs	r1, #0
     438:	4640      	mov	r0, r8
     43a:	4b38      	ldr	r3, [pc, #224]	; (51c <i2c_master_init+0x2f0>)
     43c:	4798      	blx	r3
     43e:	e752      	b.n	2e6 <i2c_master_init+0xba>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     440:	2101      	movs	r1, #1
     442:	4640      	mov	r0, r8
     444:	4b35      	ldr	r3, [pc, #212]	; (51c <i2c_master_init+0x2f0>)
     446:	4798      	blx	r3
     448:	0005      	movs	r5, r0
     44a:	e759      	b.n	300 <i2c_master_init+0xd4>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     44c:	27fa      	movs	r7, #250	; 0xfa
     44e:	00bf      	lsls	r7, r7, #2
     450:	4653      	mov	r3, sl
     452:	435f      	muls	r7, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     454:	9802      	ldr	r0, [sp, #8]
     456:	9903      	ldr	r1, [sp, #12]
     458:	0002      	movs	r2, r0
     45a:	000b      	movs	r3, r1
     45c:	47a8      	blx	r5
     45e:	9000      	str	r0, [sp, #0]
     460:	9101      	str	r1, [sp, #4]
     462:	0038      	movs	r0, r7
     464:	4b23      	ldr	r3, [pc, #140]	; (4f4 <i2c_master_init+0x2c8>)
     466:	4798      	blx	r3
     468:	2200      	movs	r2, #0
     46a:	4b2d      	ldr	r3, [pc, #180]	; (520 <i2c_master_init+0x2f4>)
     46c:	47d8      	blx	fp
     46e:	0002      	movs	r2, r0
     470:	000b      	movs	r3, r1
     472:	9800      	ldr	r0, [sp, #0]
     474:	9901      	ldr	r1, [sp, #4]
     476:	4e27      	ldr	r6, [pc, #156]	; (514 <i2c_master_init+0x2e8>)
     478:	47b0      	blx	r6
     47a:	2200      	movs	r2, #0
     47c:	4b24      	ldr	r3, [pc, #144]	; (510 <i2c_master_init+0x2e4>)
     47e:	4e23      	ldr	r6, [pc, #140]	; (50c <i2c_master_init+0x2e0>)
     480:	47b0      	blx	r6
     482:	4b25      	ldr	r3, [pc, #148]	; (518 <i2c_master_init+0x2ec>)
     484:	4798      	blx	r3
     486:	1e06      	subs	r6, r0, #0
		if (tmp_baudlow_hs) {
     488:	d00c      	beq.n	4a4 <i2c_master_init+0x278>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     48a:	0039      	movs	r1, r7
     48c:	9807      	ldr	r0, [sp, #28]
     48e:	4b25      	ldr	r3, [pc, #148]	; (524 <i2c_master_init+0x2f8>)
     490:	4798      	blx	r3
     492:	3802      	subs	r0, #2
     494:	1b80      	subs	r0, r0, r6
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     496:	0023      	movs	r3, r4
     498:	2cff      	cmp	r4, #255	; 0xff
     49a:	d80c      	bhi.n	4b6 <i2c_master_init+0x28a>
     49c:	28ff      	cmp	r0, #255	; 0xff
     49e:	d9bd      	bls.n	41c <i2c_master_init+0x1f0>
     4a0:	2040      	movs	r0, #64	; 0x40
     4a2:	e6ee      	b.n	282 <i2c_master_init+0x56>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     4a4:	0079      	lsls	r1, r7, #1
     4a6:	1e48      	subs	r0, r1, #1
     4a8:	9b07      	ldr	r3, [sp, #28]
     4aa:	469c      	mov	ip, r3
     4ac:	4460      	add	r0, ip
     4ae:	4b1d      	ldr	r3, [pc, #116]	; (524 <i2c_master_init+0x2f8>)
     4b0:	4798      	blx	r3
     4b2:	3801      	subs	r0, #1
     4b4:	e7ef      	b.n	496 <i2c_master_init+0x26a>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     4b6:	2040      	movs	r0, #64	; 0x40
     4b8:	e6e3      	b.n	282 <i2c_master_init+0x56>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     4ba:	4a04      	ldr	r2, [pc, #16]	; (4cc <i2c_master_init+0x2a0>)
     4bc:	6a13      	ldr	r3, [r2, #32]
     4be:	2102      	movs	r1, #2
     4c0:	430b      	orrs	r3, r1
     4c2:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     4c4:	2418      	movs	r4, #24
     4c6:	e6ca      	b.n	25e <i2c_master_init+0x32>
     4c8:	00000ef5 	.word	0x00000ef5
     4cc:	40000400 	.word	0x40000400
     4d0:	00003851 	.word	0x00003851
     4d4:	000037e1 	.word	0x000037e1
     4d8:	00000d35 	.word	0x00000d35
     4dc:	00000951 	.word	0x00000951
     4e0:	00002c35 	.word	0x00002c35
     4e4:	20003d14 	.word	0x20003d14
     4e8:	0000394d 	.word	0x0000394d
     4ec:	41002000 	.word	0x41002000
     4f0:	00003875 	.word	0x00003875
     4f4:	00005f85 	.word	0x00005f85
     4f8:	000053f1 	.word	0x000053f1
     4fc:	e826d695 	.word	0xe826d695
     500:	3e112e0b 	.word	0x3e112e0b
     504:	00004769 	.word	0x00004769
     508:	40240000 	.word	0x40240000
     50c:	000058f1 	.word	0x000058f1
     510:	3ff00000 	.word	0x3ff00000
     514:	00004d89 	.word	0x00004d89
     518:	00005f1d 	.word	0x00005f1d
     51c:	00000d81 	.word	0x00000d81
     520:	40080000 	.word	0x40080000
     524:	00004429 	.word	0x00004429

00000528 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     528:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     52a:	7e1a      	ldrb	r2, [r3, #24]
     52c:	0792      	lsls	r2, r2, #30
     52e:	d507      	bpl.n	540 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     530:	2202      	movs	r2, #2
     532:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     534:	8b5b      	ldrh	r3, [r3, #26]
     536:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     538:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     53a:	17db      	asrs	r3, r3, #31
     53c:	4018      	ands	r0, r3
}
     53e:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     540:	8b5a      	ldrh	r2, [r3, #26]
     542:	0752      	lsls	r2, r2, #29
     544:	d506      	bpl.n	554 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     546:	6859      	ldr	r1, [r3, #4]
     548:	22c0      	movs	r2, #192	; 0xc0
     54a:	0292      	lsls	r2, r2, #10
     54c:	430a      	orrs	r2, r1
     54e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     550:	2018      	movs	r0, #24
     552:	e7f4      	b.n	53e <_i2c_master_address_response+0x16>
	return STATUS_OK;
     554:	2000      	movs	r0, #0
     556:	e7f2      	b.n	53e <_i2c_master_address_response+0x16>

00000558 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     558:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     55a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     55c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     55e:	2401      	movs	r4, #1
     560:	2502      	movs	r5, #2
     562:	7e11      	ldrb	r1, [r2, #24]
     564:	4221      	tst	r1, r4
     566:	d10b      	bne.n	580 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     568:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     56a:	4229      	tst	r1, r5
     56c:	d106      	bne.n	57c <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     56e:	3301      	adds	r3, #1
     570:	b29b      	uxth	r3, r3
     572:	8901      	ldrh	r1, [r0, #8]
     574:	4299      	cmp	r1, r3
     576:	d8f4      	bhi.n	562 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     578:	2012      	movs	r0, #18
     57a:	e002      	b.n	582 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     57c:	2000      	movs	r0, #0
     57e:	e000      	b.n	582 <_i2c_master_wait_for_bus+0x2a>
     580:	2000      	movs	r0, #0
}
     582:	bd30      	pop	{r4, r5, pc}

00000584 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     584:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     586:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     588:	6862      	ldr	r2, [r4, #4]
     58a:	2380      	movs	r3, #128	; 0x80
     58c:	02db      	lsls	r3, r3, #11
     58e:	4313      	orrs	r3, r2
     590:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     592:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     594:	4b02      	ldr	r3, [pc, #8]	; (5a0 <_i2c_master_send_hs_master_code+0x1c>)
     596:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     598:	2301      	movs	r3, #1
     59a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     59c:	bd10      	pop	{r4, pc}
     59e:	46c0      	nop			; (mov r8, r8)
     5a0:	00000559 	.word	0x00000559

000005a4 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5a6:	46de      	mov	lr, fp
     5a8:	4657      	mov	r7, sl
     5aa:	464e      	mov	r6, r9
     5ac:	4645      	mov	r5, r8
     5ae:	b5e0      	push	{r5, r6, r7, lr}
     5b0:	b083      	sub	sp, #12
     5b2:	0006      	movs	r6, r0
     5b4:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5b6:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     5b8:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     5ba:	682b      	ldr	r3, [r5, #0]
     5bc:	011b      	lsls	r3, r3, #4
     5be:	0fdb      	lsrs	r3, r3, #31
     5c0:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     5c2:	7a4b      	ldrb	r3, [r1, #9]
     5c4:	2b00      	cmp	r3, #0
     5c6:	d12b      	bne.n	620 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     5c8:	686b      	ldr	r3, [r5, #4]
     5ca:	4a58      	ldr	r2, [pc, #352]	; (72c <_i2c_master_read_packet+0x188>)
     5cc:	4013      	ands	r3, r2
     5ce:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     5d0:	464b      	mov	r3, r9
     5d2:	7a1b      	ldrb	r3, [r3, #8]
     5d4:	2b00      	cmp	r3, #0
     5d6:	d127      	bne.n	628 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     5d8:	464b      	mov	r3, r9
     5da:	881b      	ldrh	r3, [r3, #0]
     5dc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     5de:	464a      	mov	r2, r9
     5e0:	7a52      	ldrb	r2, [r2, #9]
     5e2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     5e4:	4313      	orrs	r3, r2
     5e6:	2201      	movs	r2, #1
     5e8:	4313      	orrs	r3, r2
     5ea:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     5ec:	0030      	movs	r0, r6
     5ee:	4b50      	ldr	r3, [pc, #320]	; (730 <_i2c_master_read_packet+0x18c>)
     5f0:	4798      	blx	r3
     5f2:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     5f4:	4653      	mov	r3, sl
     5f6:	2b00      	cmp	r3, #0
     5f8:	d003      	beq.n	602 <_i2c_master_read_packet+0x5e>
     5fa:	464b      	mov	r3, r9
     5fc:	885b      	ldrh	r3, [r3, #2]
     5fe:	2b01      	cmp	r3, #1
     600:	d03b      	beq.n	67a <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     602:	686b      	ldr	r3, [r5, #4]
     604:	4a49      	ldr	r2, [pc, #292]	; (72c <_i2c_master_read_packet+0x188>)
     606:	4013      	ands	r3, r2
     608:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     60a:	9b01      	ldr	r3, [sp, #4]
     60c:	2b00      	cmp	r3, #0
     60e:	d03a      	beq.n	686 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     610:	9801      	ldr	r0, [sp, #4]
     612:	b003      	add	sp, #12
     614:	bc3c      	pop	{r2, r3, r4, r5}
     616:	4690      	mov	r8, r2
     618:	4699      	mov	r9, r3
     61a:	46a2      	mov	sl, r4
     61c:	46ab      	mov	fp, r5
     61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     620:	7a89      	ldrb	r1, [r1, #10]
     622:	4b44      	ldr	r3, [pc, #272]	; (734 <_i2c_master_read_packet+0x190>)
     624:	4798      	blx	r3
     626:	e7cf      	b.n	5c8 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     628:	464b      	mov	r3, r9
     62a:	881b      	ldrh	r3, [r3, #0]
     62c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     62e:	464a      	mov	r2, r9
     630:	7a52      	ldrb	r2, [r2, #9]
     632:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     634:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     636:	2280      	movs	r2, #128	; 0x80
     638:	0212      	lsls	r2, r2, #8
     63a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     63c:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     63e:	0030      	movs	r0, r6
     640:	4b3b      	ldr	r3, [pc, #236]	; (730 <_i2c_master_read_packet+0x18c>)
     642:	4798      	blx	r3
     644:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     646:	686b      	ldr	r3, [r5, #4]
     648:	4a38      	ldr	r2, [pc, #224]	; (72c <_i2c_master_read_packet+0x188>)
     64a:	4013      	ands	r3, r2
     64c:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     64e:	2800      	cmp	r0, #0
     650:	d1de      	bne.n	610 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     652:	0030      	movs	r0, r6
     654:	4b38      	ldr	r3, [pc, #224]	; (738 <_i2c_master_read_packet+0x194>)
     656:	4798      	blx	r3
     658:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     65a:	2800      	cmp	r0, #0
     65c:	d1d8      	bne.n	610 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     65e:	464b      	mov	r3, r9
     660:	881b      	ldrh	r3, [r3, #0]
     662:	0a1b      	lsrs	r3, r3, #8
     664:	2278      	movs	r2, #120	; 0x78
     666:	4313      	orrs	r3, r2
     668:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     66a:	464a      	mov	r2, r9
     66c:	7a52      	ldrb	r2, [r2, #9]
     66e:	0392      	lsls	r2, r2, #14
     670:	2101      	movs	r1, #1
     672:	430a      	orrs	r2, r1
     674:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     676:	626b      	str	r3, [r5, #36]	; 0x24
     678:	e7b8      	b.n	5ec <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     67a:	686a      	ldr	r2, [r5, #4]
     67c:	2380      	movs	r3, #128	; 0x80
     67e:	02db      	lsls	r3, r3, #11
     680:	4313      	orrs	r3, r2
     682:	606b      	str	r3, [r5, #4]
     684:	e7c1      	b.n	60a <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     686:	0030      	movs	r0, r6
     688:	4b2b      	ldr	r3, [pc, #172]	; (738 <_i2c_master_read_packet+0x194>)
     68a:	4798      	blx	r3
     68c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     68e:	2800      	cmp	r0, #0
     690:	d1be      	bne.n	610 <_i2c_master_read_packet+0x6c>
     692:	3c01      	subs	r4, #1
     694:	b2a4      	uxth	r4, r4
     696:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     698:	4b28      	ldr	r3, [pc, #160]	; (73c <_i2c_master_read_packet+0x198>)
     69a:	469b      	mov	fp, r3
     69c:	e015      	b.n	6ca <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     69e:	2c01      	cmp	r4, #1
     6a0:	d020      	beq.n	6e4 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     6a2:	0030      	movs	r0, r6
     6a4:	4b26      	ldr	r3, [pc, #152]	; (740 <_i2c_master_read_packet+0x19c>)
     6a6:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     6a8:	4643      	mov	r3, r8
     6aa:	1c5f      	adds	r7, r3, #1
     6ac:	b2bf      	uxth	r7, r7
     6ae:	2328      	movs	r3, #40	; 0x28
     6b0:	5ceb      	ldrb	r3, [r5, r3]
     6b2:	464a      	mov	r2, r9
     6b4:	6852      	ldr	r2, [r2, #4]
     6b6:	4641      	mov	r1, r8
     6b8:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     6ba:	0030      	movs	r0, r6
     6bc:	4b1c      	ldr	r3, [pc, #112]	; (730 <_i2c_master_read_packet+0x18c>)
     6be:	4798      	blx	r3
     6c0:	3c01      	subs	r4, #1
     6c2:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     6c4:	2800      	cmp	r0, #0
     6c6:	d115      	bne.n	6f4 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     6c8:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     6ca:	455c      	cmp	r4, fp
     6cc:	d014      	beq.n	6f8 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     6ce:	8b6b      	ldrh	r3, [r5, #26]
     6d0:	069b      	lsls	r3, r3, #26
     6d2:	d527      	bpl.n	724 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     6d4:	7af3      	ldrb	r3, [r6, #11]
     6d6:	2b00      	cmp	r3, #0
     6d8:	d0e3      	beq.n	6a2 <_i2c_master_read_packet+0xfe>
     6da:	4653      	mov	r3, sl
     6dc:	2b00      	cmp	r3, #0
     6de:	d1de      	bne.n	69e <_i2c_master_read_packet+0xfa>
     6e0:	2c00      	cmp	r4, #0
     6e2:	d1de      	bne.n	6a2 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     6e4:	686a      	ldr	r2, [r5, #4]
     6e6:	2380      	movs	r3, #128	; 0x80
     6e8:	02db      	lsls	r3, r3, #11
     6ea:	4313      	orrs	r3, r2
     6ec:	606b      	str	r3, [r5, #4]
     6ee:	3c01      	subs	r4, #1
     6f0:	b2a4      	uxth	r4, r4
     6f2:	e7ea      	b.n	6ca <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     6f4:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     6f6:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     6f8:	7ab3      	ldrb	r3, [r6, #10]
     6fa:	2b00      	cmp	r3, #0
     6fc:	d109      	bne.n	712 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     6fe:	0030      	movs	r0, r6
     700:	4b0f      	ldr	r3, [pc, #60]	; (740 <_i2c_master_read_packet+0x19c>)
     702:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     704:	2328      	movs	r3, #40	; 0x28
     706:	5cea      	ldrb	r2, [r5, r3]
     708:	464b      	mov	r3, r9
     70a:	685b      	ldr	r3, [r3, #4]
     70c:	4641      	mov	r1, r8
     70e:	545a      	strb	r2, [r3, r1]
     710:	e77e      	b.n	610 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     712:	0030      	movs	r0, r6
     714:	4b0a      	ldr	r3, [pc, #40]	; (740 <_i2c_master_read_packet+0x19c>)
     716:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     718:	686a      	ldr	r2, [r5, #4]
     71a:	23c0      	movs	r3, #192	; 0xc0
     71c:	029b      	lsls	r3, r3, #10
     71e:	4313      	orrs	r3, r2
     720:	606b      	str	r3, [r5, #4]
     722:	e7ec      	b.n	6fe <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     724:	2341      	movs	r3, #65	; 0x41
     726:	9301      	str	r3, [sp, #4]
     728:	e772      	b.n	610 <_i2c_master_read_packet+0x6c>
     72a:	46c0      	nop			; (mov r8, r8)
     72c:	fffbffff 	.word	0xfffbffff
     730:	00000559 	.word	0x00000559
     734:	00000585 	.word	0x00000585
     738:	00000529 	.word	0x00000529
     73c:	0000ffff 	.word	0x0000ffff
     740:	00000221 	.word	0x00000221

00000744 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     744:	b5f0      	push	{r4, r5, r6, r7, lr}
     746:	46de      	mov	lr, fp
     748:	4657      	mov	r7, sl
     74a:	464e      	mov	r6, r9
     74c:	4645      	mov	r5, r8
     74e:	b5e0      	push	{r5, r6, r7, lr}
     750:	b083      	sub	sp, #12
     752:	0006      	movs	r6, r0
     754:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     756:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     758:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     75a:	4b32      	ldr	r3, [pc, #200]	; (824 <_i2c_master_write_packet+0xe0>)
     75c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     75e:	7a7b      	ldrb	r3, [r7, #9]
     760:	2b00      	cmp	r3, #0
     762:	d11d      	bne.n	7a0 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     764:	686b      	ldr	r3, [r5, #4]
     766:	4a30      	ldr	r2, [pc, #192]	; (828 <_i2c_master_write_packet+0xe4>)
     768:	4013      	ands	r3, r2
     76a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     76c:	7a3b      	ldrb	r3, [r7, #8]
     76e:	2b00      	cmp	r3, #0
     770:	d01b      	beq.n	7aa <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     772:	883b      	ldrh	r3, [r7, #0]
     774:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     776:	7a7a      	ldrb	r2, [r7, #9]
     778:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     77a:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     77c:	2280      	movs	r2, #128	; 0x80
     77e:	0212      	lsls	r2, r2, #8
     780:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     782:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     784:	0030      	movs	r0, r6
     786:	4b29      	ldr	r3, [pc, #164]	; (82c <_i2c_master_write_packet+0xe8>)
     788:	4798      	blx	r3
     78a:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     78c:	2800      	cmp	r0, #0
     78e:	d013      	beq.n	7b8 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     790:	9801      	ldr	r0, [sp, #4]
     792:	b003      	add	sp, #12
     794:	bc3c      	pop	{r2, r3, r4, r5}
     796:	4690      	mov	r8, r2
     798:	4699      	mov	r9, r3
     79a:	46a2      	mov	sl, r4
     79c:	46ab      	mov	fp, r5
     79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     7a0:	7ab9      	ldrb	r1, [r7, #10]
     7a2:	0030      	movs	r0, r6
     7a4:	4b22      	ldr	r3, [pc, #136]	; (830 <_i2c_master_write_packet+0xec>)
     7a6:	4798      	blx	r3
     7a8:	e7dc      	b.n	764 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     7aa:	883b      	ldrh	r3, [r7, #0]
     7ac:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     7ae:	7a7a      	ldrb	r2, [r7, #9]
     7b0:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     7b2:	4313      	orrs	r3, r2
     7b4:	626b      	str	r3, [r5, #36]	; 0x24
     7b6:	e7e5      	b.n	784 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     7b8:	0030      	movs	r0, r6
     7ba:	4b1e      	ldr	r3, [pc, #120]	; (834 <_i2c_master_write_packet+0xf0>)
     7bc:	4798      	blx	r3
     7be:	1e03      	subs	r3, r0, #0
     7c0:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     7c2:	d1e5      	bne.n	790 <_i2c_master_write_packet+0x4c>
     7c4:	46a0      	mov	r8, r4
     7c6:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     7c8:	3320      	adds	r3, #32
     7ca:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     7cc:	4b15      	ldr	r3, [pc, #84]	; (824 <_i2c_master_write_packet+0xe0>)
     7ce:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     7d0:	4b16      	ldr	r3, [pc, #88]	; (82c <_i2c_master_write_packet+0xe8>)
     7d2:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     7d4:	4544      	cmp	r4, r8
     7d6:	d015      	beq.n	804 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     7d8:	8b6b      	ldrh	r3, [r5, #26]
     7da:	464a      	mov	r2, r9
     7dc:	4213      	tst	r3, r2
     7de:	d01d      	beq.n	81c <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     7e0:	0030      	movs	r0, r6
     7e2:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     7e4:	687b      	ldr	r3, [r7, #4]
     7e6:	5d1a      	ldrb	r2, [r3, r4]
     7e8:	2328      	movs	r3, #40	; 0x28
     7ea:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     7ec:	0030      	movs	r0, r6
     7ee:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     7f0:	2800      	cmp	r0, #0
     7f2:	d106      	bne.n	802 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     7f4:	8b6b      	ldrh	r3, [r5, #26]
     7f6:	3401      	adds	r4, #1
     7f8:	075b      	lsls	r3, r3, #29
     7fa:	d5eb      	bpl.n	7d4 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     7fc:	231e      	movs	r3, #30
     7fe:	9301      	str	r3, [sp, #4]
     800:	e000      	b.n	804 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     802:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     804:	7ab3      	ldrb	r3, [r6, #10]
     806:	2b00      	cmp	r3, #0
     808:	d0c2      	beq.n	790 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     80a:	0030      	movs	r0, r6
     80c:	4b05      	ldr	r3, [pc, #20]	; (824 <_i2c_master_write_packet+0xe0>)
     80e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     810:	686a      	ldr	r2, [r5, #4]
     812:	23c0      	movs	r3, #192	; 0xc0
     814:	029b      	lsls	r3, r3, #10
     816:	4313      	orrs	r3, r2
     818:	606b      	str	r3, [r5, #4]
     81a:	e7b9      	b.n	790 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     81c:	2341      	movs	r3, #65	; 0x41
     81e:	9301      	str	r3, [sp, #4]
     820:	e7b6      	b.n	790 <_i2c_master_write_packet+0x4c>
     822:	46c0      	nop			; (mov r8, r8)
     824:	00000221 	.word	0x00000221
     828:	fffbffff 	.word	0xfffbffff
     82c:	00000559 	.word	0x00000559
     830:	00000585 	.word	0x00000585
     834:	00000529 	.word	0x00000529

00000838 <i2c_master_read_packet_wait>:
{
     838:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     83a:	8b83      	ldrh	r3, [r0, #28]
     83c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     83e:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     840:	2b00      	cmp	r3, #0
     842:	d001      	beq.n	848 <i2c_master_read_packet_wait+0x10>
}
     844:	0010      	movs	r0, r2
     846:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     848:	3301      	adds	r3, #1
     84a:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     84c:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     84e:	4b02      	ldr	r3, [pc, #8]	; (858 <i2c_master_read_packet_wait+0x20>)
     850:	4798      	blx	r3
     852:	0002      	movs	r2, r0
     854:	e7f6      	b.n	844 <i2c_master_read_packet_wait+0xc>
     856:	46c0      	nop			; (mov r8, r8)
     858:	000005a5 	.word	0x000005a5

0000085c <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     85c:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     85e:	8b83      	ldrh	r3, [r0, #28]
     860:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     862:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     864:	2b00      	cmp	r3, #0
     866:	d001      	beq.n	86c <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
     868:	0010      	movs	r0, r2
     86a:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     86c:	3301      	adds	r3, #1
     86e:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     870:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     872:	4b02      	ldr	r3, [pc, #8]	; (87c <i2c_master_write_packet_wait+0x20>)
     874:	4798      	blx	r3
     876:	0002      	movs	r2, r0
     878:	e7f6      	b.n	868 <i2c_master_write_packet_wait+0xc>
     87a:	46c0      	nop			; (mov r8, r8)
     87c:	00000745 	.word	0x00000745

00000880 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     880:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     882:	2207      	movs	r2, #7
     884:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     886:	421a      	tst	r2, r3
     888:	d1fc      	bne.n	884 <_i2c_master_wait_for_sync+0x4>
}
     88a:	4770      	bx	lr

0000088c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     88c:	b570      	push	{r4, r5, r6, lr}
     88e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     890:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     892:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     894:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     896:	8b83      	ldrh	r3, [r0, #28]
     898:	1aed      	subs	r5, r5, r3
     89a:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     89c:	8b83      	ldrh	r3, [r0, #28]
     89e:	3b01      	subs	r3, #1
     8a0:	b29b      	uxth	r3, r3
     8a2:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     8a4:	0113      	lsls	r3, r2, #4
     8a6:	d51d      	bpl.n	8e4 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     8a8:	7ac3      	ldrb	r3, [r0, #11]
     8aa:	2b00      	cmp	r3, #0
     8ac:	d003      	beq.n	8b6 <_i2c_master_read+0x2a>
     8ae:	8b83      	ldrh	r3, [r0, #28]
     8b0:	b29b      	uxth	r3, r3
     8b2:	2b01      	cmp	r3, #1
     8b4:	d010      	beq.n	8d8 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     8b6:	8ba3      	ldrh	r3, [r4, #28]
     8b8:	b29b      	uxth	r3, r3
     8ba:	2b00      	cmp	r3, #0
     8bc:	d102      	bne.n	8c4 <_i2c_master_read+0x38>
		if (module->send_stop) {
     8be:	7aa3      	ldrb	r3, [r4, #10]
     8c0:	2b00      	cmp	r3, #0
     8c2:	d11c      	bne.n	8fe <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     8c4:	0020      	movs	r0, r4
     8c6:	4b12      	ldr	r3, [pc, #72]	; (910 <_i2c_master_read+0x84>)
     8c8:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     8ca:	6a23      	ldr	r3, [r4, #32]
     8cc:	195d      	adds	r5, r3, r5
     8ce:	2328      	movs	r3, #40	; 0x28
     8d0:	5cf3      	ldrb	r3, [r6, r3]
     8d2:	b2db      	uxtb	r3, r3
     8d4:	702b      	strb	r3, [r5, #0]
}
     8d6:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     8d8:	6872      	ldr	r2, [r6, #4]
     8da:	2380      	movs	r3, #128	; 0x80
     8dc:	02db      	lsls	r3, r3, #11
     8de:	4313      	orrs	r3, r2
     8e0:	6073      	str	r3, [r6, #4]
     8e2:	e7e8      	b.n	8b6 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     8e4:	7ac3      	ldrb	r3, [r0, #11]
     8e6:	2b00      	cmp	r3, #0
     8e8:	d0e5      	beq.n	8b6 <_i2c_master_read+0x2a>
     8ea:	8b83      	ldrh	r3, [r0, #28]
     8ec:	b29b      	uxth	r3, r3
     8ee:	2b00      	cmp	r3, #0
     8f0:	d1e1      	bne.n	8b6 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     8f2:	6872      	ldr	r2, [r6, #4]
     8f4:	2380      	movs	r3, #128	; 0x80
     8f6:	02db      	lsls	r3, r3, #11
     8f8:	4313      	orrs	r3, r2
     8fa:	6073      	str	r3, [r6, #4]
     8fc:	e7db      	b.n	8b6 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     8fe:	0020      	movs	r0, r4
     900:	4b03      	ldr	r3, [pc, #12]	; (910 <_i2c_master_read+0x84>)
     902:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     904:	6872      	ldr	r2, [r6, #4]
     906:	23c0      	movs	r3, #192	; 0xc0
     908:	029b      	lsls	r3, r3, #10
     90a:	4313      	orrs	r3, r2
     90c:	6073      	str	r3, [r6, #4]
     90e:	e7d9      	b.n	8c4 <_i2c_master_read+0x38>
     910:	00000881 	.word	0x00000881

00000914 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     914:	b570      	push	{r4, r5, r6, lr}
     916:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     918:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     91a:	8b6b      	ldrh	r3, [r5, #26]
     91c:	075b      	lsls	r3, r3, #29
     91e:	d503      	bpl.n	928 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     920:	221e      	movs	r2, #30
     922:	2325      	movs	r3, #37	; 0x25
     924:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     926:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     928:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     92a:	8b83      	ldrh	r3, [r0, #28]
     92c:	1af6      	subs	r6, r6, r3
     92e:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     930:	8b83      	ldrh	r3, [r0, #28]
     932:	3b01      	subs	r3, #1
     934:	b29b      	uxth	r3, r3
     936:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     938:	4b04      	ldr	r3, [pc, #16]	; (94c <_i2c_master_write+0x38>)
     93a:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     93c:	6a23      	ldr	r3, [r4, #32]
     93e:	199e      	adds	r6, r3, r6
     940:	7833      	ldrb	r3, [r6, #0]
     942:	b2db      	uxtb	r3, r3
     944:	2228      	movs	r2, #40	; 0x28
     946:	54ab      	strb	r3, [r5, r2]
     948:	e7ed      	b.n	926 <_i2c_master_write+0x12>
     94a:	46c0      	nop			; (mov r8, r8)
     94c:	00000881 	.word	0x00000881

00000950 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     950:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     952:	0080      	lsls	r0, r0, #2
     954:	4b75      	ldr	r3, [pc, #468]	; (b2c <_i2c_master_interrupt_handler+0x1dc>)
     956:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     958:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     95a:	682b      	ldr	r3, [r5, #0]
     95c:	011b      	lsls	r3, r3, #4
     95e:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     960:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     962:	7e26      	ldrb	r6, [r4, #24]
     964:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     966:	8b63      	ldrh	r3, [r4, #26]
     968:	b29b      	uxth	r3, r3
     96a:	2b00      	cmp	r3, #0
     96c:	d103      	bne.n	976 <_i2c_master_interrupt_handler+0x26>
     96e:	8ba3      	ldrh	r3, [r4, #28]
     970:	b29b      	uxth	r3, r3
     972:	2b00      	cmp	r3, #0
     974:	d123      	bne.n	9be <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     976:	8b63      	ldrh	r3, [r4, #26]
     978:	b29b      	uxth	r3, r3
     97a:	2b00      	cmp	r3, #0
     97c:	d008      	beq.n	990 <_i2c_master_interrupt_handler+0x40>
     97e:	8ba3      	ldrh	r3, [r4, #28]
     980:	b29b      	uxth	r3, r3
     982:	2b00      	cmp	r3, #0
     984:	d104      	bne.n	990 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     986:	3325      	adds	r3, #37	; 0x25
     988:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     98a:	2b05      	cmp	r3, #5
     98c:	d100      	bne.n	990 <_i2c_master_interrupt_handler+0x40>
     98e:	e06d      	b.n	a6c <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     990:	8b63      	ldrh	r3, [r4, #26]
     992:	b29b      	uxth	r3, r3
     994:	2b00      	cmp	r3, #0
     996:	d024      	beq.n	9e2 <_i2c_master_interrupt_handler+0x92>
     998:	8ba3      	ldrh	r3, [r4, #28]
     99a:	b29b      	uxth	r3, r3
     99c:	2b00      	cmp	r3, #0
     99e:	d020      	beq.n	9e2 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     9a0:	8b6b      	ldrh	r3, [r5, #26]
     9a2:	069b      	lsls	r3, r3, #26
     9a4:	d500      	bpl.n	9a8 <_i2c_master_interrupt_handler+0x58>
     9a6:	e081      	b.n	aac <_i2c_master_interrupt_handler+0x15c>
     9a8:	2a00      	cmp	r2, #0
     9aa:	d004      	beq.n	9b6 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     9ac:	8ba3      	ldrh	r3, [r4, #28]
     9ae:	b29b      	uxth	r3, r3
     9b0:	2b01      	cmp	r3, #1
     9b2:	d100      	bne.n	9b6 <_i2c_master_interrupt_handler+0x66>
     9b4:	e07a      	b.n	aac <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     9b6:	2241      	movs	r2, #65	; 0x41
     9b8:	2325      	movs	r3, #37	; 0x25
     9ba:	54e2      	strb	r2, [r4, r3]
     9bc:	e011      	b.n	9e2 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     9be:	7e2b      	ldrb	r3, [r5, #24]
     9c0:	07db      	lsls	r3, r3, #31
     9c2:	d507      	bpl.n	9d4 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     9c4:	2301      	movs	r3, #1
     9c6:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     9c8:	8b6b      	ldrh	r3, [r5, #26]
     9ca:	079b      	lsls	r3, r3, #30
     9cc:	d52e      	bpl.n	a2c <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     9ce:	2241      	movs	r2, #65	; 0x41
     9d0:	2325      	movs	r3, #37	; 0x25
     9d2:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     9d4:	8ba3      	ldrh	r3, [r4, #28]
     9d6:	b29b      	uxth	r3, r3
     9d8:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     9da:	2325      	movs	r3, #37	; 0x25
     9dc:	5ce3      	ldrb	r3, [r4, r3]
     9de:	2b05      	cmp	r3, #5
     9e0:	d038      	beq.n	a54 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     9e2:	8b63      	ldrh	r3, [r4, #26]
     9e4:	b29b      	uxth	r3, r3
     9e6:	2b00      	cmp	r3, #0
     9e8:	d007      	beq.n	9fa <_i2c_master_interrupt_handler+0xaa>
     9ea:	8ba3      	ldrh	r3, [r4, #28]
     9ec:	b29b      	uxth	r3, r3
     9ee:	2b00      	cmp	r3, #0
     9f0:	d103      	bne.n	9fa <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     9f2:	3325      	adds	r3, #37	; 0x25
     9f4:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     9f6:	2b05      	cmp	r3, #5
     9f8:	d064      	beq.n	ac4 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     9fa:	2325      	movs	r3, #37	; 0x25
     9fc:	5ce3      	ldrb	r3, [r4, r3]
     9fe:	2b05      	cmp	r3, #5
     a00:	d013      	beq.n	a2a <_i2c_master_interrupt_handler+0xda>
     a02:	2325      	movs	r3, #37	; 0x25
     a04:	5ce3      	ldrb	r3, [r4, r3]
     a06:	2b00      	cmp	r3, #0
     a08:	d00f      	beq.n	a2a <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     a0a:	2303      	movs	r3, #3
     a0c:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     a0e:	2300      	movs	r3, #0
     a10:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     a12:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     a14:	3325      	adds	r3, #37	; 0x25
     a16:	5ce3      	ldrb	r3, [r4, r3]
     a18:	2b41      	cmp	r3, #65	; 0x41
     a1a:	d003      	beq.n	a24 <_i2c_master_interrupt_handler+0xd4>
     a1c:	7aa3      	ldrb	r3, [r4, #10]
     a1e:	2b00      	cmp	r3, #0
     a20:	d000      	beq.n	a24 <_i2c_master_interrupt_handler+0xd4>
     a22:	e075      	b.n	b10 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     a24:	0773      	lsls	r3, r6, #29
     a26:	d500      	bpl.n	a2a <_i2c_master_interrupt_handler+0xda>
     a28:	e07b      	b.n	b22 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     a2a:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     a2c:	8b6b      	ldrh	r3, [r5, #26]
     a2e:	075b      	lsls	r3, r3, #29
     a30:	d5d0      	bpl.n	9d4 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     a32:	2218      	movs	r2, #24
     a34:	2325      	movs	r3, #37	; 0x25
     a36:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     a38:	2300      	movs	r3, #0
     a3a:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     a3c:	7aa3      	ldrb	r3, [r4, #10]
     a3e:	2b00      	cmp	r3, #0
     a40:	d0c8      	beq.n	9d4 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     a42:	0020      	movs	r0, r4
     a44:	4b3a      	ldr	r3, [pc, #232]	; (b30 <_i2c_master_interrupt_handler+0x1e0>)
     a46:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     a48:	686a      	ldr	r2, [r5, #4]
     a4a:	23c0      	movs	r3, #192	; 0xc0
     a4c:	029b      	lsls	r3, r3, #10
     a4e:	4313      	orrs	r3, r2
     a50:	606b      	str	r3, [r5, #4]
     a52:	e7bf      	b.n	9d4 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     a54:	331f      	adds	r3, #31
     a56:	5ce3      	ldrb	r3, [r4, r3]
     a58:	2b00      	cmp	r3, #0
     a5a:	d003      	beq.n	a64 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     a5c:	0020      	movs	r0, r4
     a5e:	4b35      	ldr	r3, [pc, #212]	; (b34 <_i2c_master_interrupt_handler+0x1e4>)
     a60:	4798      	blx	r3
     a62:	e7be      	b.n	9e2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     a64:	0020      	movs	r0, r4
     a66:	4b34      	ldr	r3, [pc, #208]	; (b38 <_i2c_master_interrupt_handler+0x1e8>)
     a68:	4798      	blx	r3
     a6a:	e7ba      	b.n	9e2 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     a6c:	331f      	adds	r3, #31
     a6e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     a70:	2b00      	cmp	r3, #0
     a72:	d000      	beq.n	a76 <_i2c_master_interrupt_handler+0x126>
     a74:	e78c      	b.n	990 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     a76:	3303      	adds	r3, #3
     a78:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     a7a:	2300      	movs	r3, #0
     a7c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     a7e:	3325      	adds	r3, #37	; 0x25
     a80:	2200      	movs	r2, #0
     a82:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     a84:	7aa3      	ldrb	r3, [r4, #10]
     a86:	2b00      	cmp	r3, #0
     a88:	d107      	bne.n	a9a <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     a8a:	2301      	movs	r3, #1
     a8c:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     a8e:	07f3      	lsls	r3, r6, #31
     a90:	d5a7      	bpl.n	9e2 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     a92:	68e3      	ldr	r3, [r4, #12]
     a94:	0020      	movs	r0, r4
     a96:	4798      	blx	r3
     a98:	e7a3      	b.n	9e2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     a9a:	0020      	movs	r0, r4
     a9c:	4b24      	ldr	r3, [pc, #144]	; (b30 <_i2c_master_interrupt_handler+0x1e0>)
     a9e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     aa0:	686a      	ldr	r2, [r5, #4]
     aa2:	23c0      	movs	r3, #192	; 0xc0
     aa4:	029b      	lsls	r3, r3, #10
     aa6:	4313      	orrs	r3, r2
     aa8:	606b      	str	r3, [r5, #4]
     aaa:	e7f0      	b.n	a8e <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     aac:	2324      	movs	r3, #36	; 0x24
     aae:	5ce3      	ldrb	r3, [r4, r3]
     ab0:	2b00      	cmp	r3, #0
     ab2:	d103      	bne.n	abc <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     ab4:	0020      	movs	r0, r4
     ab6:	4b20      	ldr	r3, [pc, #128]	; (b38 <_i2c_master_interrupt_handler+0x1e8>)
     ab8:	4798      	blx	r3
     aba:	e792      	b.n	9e2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     abc:	0020      	movs	r0, r4
     abe:	4b1d      	ldr	r3, [pc, #116]	; (b34 <_i2c_master_interrupt_handler+0x1e4>)
     ac0:	4798      	blx	r3
     ac2:	e78e      	b.n	9e2 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     ac4:	331f      	adds	r3, #31
     ac6:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     ac8:	2b01      	cmp	r3, #1
     aca:	d196      	bne.n	9fa <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     acc:	7e2b      	ldrb	r3, [r5, #24]
     ace:	079b      	lsls	r3, r3, #30
     ad0:	d501      	bpl.n	ad6 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     ad2:	2302      	movs	r3, #2
     ad4:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     ad6:	2303      	movs	r3, #3
     ad8:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     ada:	2300      	movs	r3, #0
     adc:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     ade:	3325      	adds	r3, #37	; 0x25
     ae0:	2200      	movs	r2, #0
     ae2:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     ae4:	07b3      	lsls	r3, r6, #30
     ae6:	d503      	bpl.n	af0 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     ae8:	2324      	movs	r3, #36	; 0x24
     aea:	5ce3      	ldrb	r3, [r4, r3]
     aec:	2b01      	cmp	r3, #1
     aee:	d00b      	beq.n	b08 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     af0:	07f3      	lsls	r3, r6, #31
     af2:	d400      	bmi.n	af6 <_i2c_master_interrupt_handler+0x1a6>
     af4:	e781      	b.n	9fa <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     af6:	2324      	movs	r3, #36	; 0x24
     af8:	5ce3      	ldrb	r3, [r4, r3]
     afa:	2b00      	cmp	r3, #0
     afc:	d000      	beq.n	b00 <_i2c_master_interrupt_handler+0x1b0>
     afe:	e77c      	b.n	9fa <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     b00:	68e3      	ldr	r3, [r4, #12]
     b02:	0020      	movs	r0, r4
     b04:	4798      	blx	r3
     b06:	e778      	b.n	9fa <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     b08:	6923      	ldr	r3, [r4, #16]
     b0a:	0020      	movs	r0, r4
     b0c:	4798      	blx	r3
     b0e:	e774      	b.n	9fa <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     b10:	0020      	movs	r0, r4
     b12:	4b07      	ldr	r3, [pc, #28]	; (b30 <_i2c_master_interrupt_handler+0x1e0>)
     b14:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     b16:	686a      	ldr	r2, [r5, #4]
     b18:	23e0      	movs	r3, #224	; 0xe0
     b1a:	02db      	lsls	r3, r3, #11
     b1c:	4313      	orrs	r3, r2
     b1e:	606b      	str	r3, [r5, #4]
     b20:	e780      	b.n	a24 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     b22:	6963      	ldr	r3, [r4, #20]
     b24:	0020      	movs	r0, r4
     b26:	4798      	blx	r3
}
     b28:	e77f      	b.n	a2a <_i2c_master_interrupt_handler+0xda>
     b2a:	46c0      	nop			; (mov r8, r8)
     b2c:	20003d14 	.word	0x20003d14
     b30:	00000881 	.word	0x00000881
     b34:	0000088d 	.word	0x0000088d
     b38:	00000915 	.word	0x00000915

00000b3c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     b3c:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     b3e:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b40:	2340      	movs	r3, #64	; 0x40
     b42:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     b44:	4281      	cmp	r1, r0
     b46:	d202      	bcs.n	b4e <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     b48:	0018      	movs	r0, r3
     b4a:	bd10      	pop	{r4, pc}
		baud_calculated++;
     b4c:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     b4e:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     b50:	1c63      	adds	r3, r4, #1
     b52:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     b54:	4288      	cmp	r0, r1
     b56:	d9f9      	bls.n	b4c <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b58:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     b5a:	2cff      	cmp	r4, #255	; 0xff
     b5c:	d8f4      	bhi.n	b48 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     b5e:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     b60:	2300      	movs	r3, #0
     b62:	e7f1      	b.n	b48 <_sercom_get_sync_baud_val+0xc>

00000b64 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     b64:	b5f0      	push	{r4, r5, r6, r7, lr}
     b66:	46de      	mov	lr, fp
     b68:	4657      	mov	r7, sl
     b6a:	464e      	mov	r6, r9
     b6c:	4645      	mov	r5, r8
     b6e:	b5e0      	push	{r5, r6, r7, lr}
     b70:	b089      	sub	sp, #36	; 0x24
     b72:	000c      	movs	r4, r1
     b74:	9205      	str	r2, [sp, #20]
     b76:	aa12      	add	r2, sp, #72	; 0x48
     b78:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     b7a:	0005      	movs	r5, r0
     b7c:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b7e:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     b80:	42a5      	cmp	r5, r4
     b82:	d907      	bls.n	b94 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     b84:	0010      	movs	r0, r2
     b86:	b009      	add	sp, #36	; 0x24
     b88:	bc3c      	pop	{r2, r3, r4, r5}
     b8a:	4690      	mov	r8, r2
     b8c:	4699      	mov	r9, r3
     b8e:	46a2      	mov	sl, r4
     b90:	46ab      	mov	fp, r5
     b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     b94:	2b00      	cmp	r3, #0
     b96:	d155      	bne.n	c44 <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     b98:	0002      	movs	r2, r0
     b9a:	0008      	movs	r0, r1
     b9c:	2100      	movs	r1, #0
     b9e:	4d63      	ldr	r5, [pc, #396]	; (d2c <_sercom_get_async_baud_val+0x1c8>)
     ba0:	47a8      	blx	r5
     ba2:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     ba4:	0026      	movs	r6, r4
     ba6:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
     ba8:	2300      	movs	r3, #0
     baa:	2400      	movs	r4, #0
     bac:	9300      	str	r3, [sp, #0]
     bae:	9401      	str	r4, [sp, #4]
     bb0:	2200      	movs	r2, #0
     bb2:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     bb4:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     bb6:	2120      	movs	r1, #32
     bb8:	468c      	mov	ip, r1
     bba:	391f      	subs	r1, #31
     bbc:	9602      	str	r6, [sp, #8]
     bbe:	9703      	str	r7, [sp, #12]
     bc0:	e014      	b.n	bec <_sercom_get_async_baud_val+0x88>
     bc2:	4664      	mov	r4, ip
     bc4:	1a24      	subs	r4, r4, r0
     bc6:	000d      	movs	r5, r1
     bc8:	40e5      	lsrs	r5, r4
     bca:	46a8      	mov	r8, r5
     bcc:	e015      	b.n	bfa <_sercom_get_async_baud_val+0x96>
			r = r - d;
     bce:	9c02      	ldr	r4, [sp, #8]
     bd0:	9d03      	ldr	r5, [sp, #12]
     bd2:	1b12      	subs	r2, r2, r4
     bd4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     bd6:	464d      	mov	r5, r9
     bd8:	9e00      	ldr	r6, [sp, #0]
     bda:	9f01      	ldr	r7, [sp, #4]
     bdc:	4335      	orrs	r5, r6
     bde:	003c      	movs	r4, r7
     be0:	4646      	mov	r6, r8
     be2:	4334      	orrs	r4, r6
     be4:	9500      	str	r5, [sp, #0]
     be6:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
     be8:	3801      	subs	r0, #1
     bea:	d31d      	bcc.n	c28 <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
     bec:	2420      	movs	r4, #32
     bee:	4264      	negs	r4, r4
     bf0:	1904      	adds	r4, r0, r4
     bf2:	d4e6      	bmi.n	bc2 <_sercom_get_async_baud_val+0x5e>
     bf4:	000d      	movs	r5, r1
     bf6:	40a5      	lsls	r5, r4
     bf8:	46a8      	mov	r8, r5
     bfa:	000c      	movs	r4, r1
     bfc:	4084      	lsls	r4, r0
     bfe:	46a1      	mov	r9, r4
		r = r << 1;
     c00:	1892      	adds	r2, r2, r2
     c02:	415b      	adcs	r3, r3
     c04:	0014      	movs	r4, r2
     c06:	001d      	movs	r5, r3
		if (n & bit_shift) {
     c08:	4646      	mov	r6, r8
     c0a:	465f      	mov	r7, fp
     c0c:	423e      	tst	r6, r7
     c0e:	d003      	beq.n	c18 <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
     c10:	000e      	movs	r6, r1
     c12:	4326      	orrs	r6, r4
     c14:	0032      	movs	r2, r6
     c16:	002b      	movs	r3, r5
		if (r >= d) {
     c18:	9c02      	ldr	r4, [sp, #8]
     c1a:	9d03      	ldr	r5, [sp, #12]
     c1c:	429d      	cmp	r5, r3
     c1e:	d8e3      	bhi.n	be8 <_sercom_get_async_baud_val+0x84>
     c20:	d1d5      	bne.n	bce <_sercom_get_async_baud_val+0x6a>
     c22:	4294      	cmp	r4, r2
     c24:	d8e0      	bhi.n	be8 <_sercom_get_async_baud_val+0x84>
     c26:	e7d2      	b.n	bce <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
     c28:	2200      	movs	r2, #0
     c2a:	2301      	movs	r3, #1
     c2c:	9800      	ldr	r0, [sp, #0]
     c2e:	9901      	ldr	r1, [sp, #4]
     c30:	1a12      	subs	r2, r2, r0
     c32:	418b      	sbcs	r3, r1
     c34:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
     c36:	0c13      	lsrs	r3, r2, #16
     c38:	040a      	lsls	r2, r1, #16
     c3a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     c3c:	9b05      	ldr	r3, [sp, #20]
     c3e:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     c40:	2200      	movs	r2, #0
     c42:	e79f      	b.n	b84 <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
     c44:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     c46:	2b01      	cmp	r3, #1
     c48:	d1f8      	bne.n	c3c <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     c4a:	0f63      	lsrs	r3, r4, #29
     c4c:	9304      	str	r3, [sp, #16]
     c4e:	00e3      	lsls	r3, r4, #3
     c50:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     c52:	000a      	movs	r2, r1
     c54:	2300      	movs	r3, #0
     c56:	2100      	movs	r1, #0
     c58:	4c34      	ldr	r4, [pc, #208]	; (d2c <_sercom_get_async_baud_val+0x1c8>)
     c5a:	47a0      	blx	r4
     c5c:	0004      	movs	r4, r0
     c5e:	000d      	movs	r5, r1
     c60:	2300      	movs	r3, #0
     c62:	469c      	mov	ip, r3
     c64:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
     c66:	3320      	adds	r3, #32
     c68:	469b      	mov	fp, r3
     c6a:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
     c6c:	4663      	mov	r3, ip
     c6e:	9307      	str	r3, [sp, #28]
     c70:	e048      	b.n	d04 <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
     c72:	4659      	mov	r1, fp
     c74:	1bc9      	subs	r1, r1, r7
     c76:	0030      	movs	r0, r6
     c78:	40c8      	lsrs	r0, r1
     c7a:	4682      	mov	sl, r0
     c7c:	e010      	b.n	ca0 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
     c7e:	9800      	ldr	r0, [sp, #0]
     c80:	9901      	ldr	r1, [sp, #4]
     c82:	1a12      	subs	r2, r2, r0
     c84:	418b      	sbcs	r3, r1
			q |= bit_shift;
     c86:	9902      	ldr	r1, [sp, #8]
     c88:	4648      	mov	r0, r9
     c8a:	4301      	orrs	r1, r0
     c8c:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
     c8e:	3f01      	subs	r7, #1
     c90:	d325      	bcc.n	cde <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
     c92:	2120      	movs	r1, #32
     c94:	4249      	negs	r1, r1
     c96:	1879      	adds	r1, r7, r1
     c98:	d4eb      	bmi.n	c72 <_sercom_get_async_baud_val+0x10e>
     c9a:	0030      	movs	r0, r6
     c9c:	4088      	lsls	r0, r1
     c9e:	4682      	mov	sl, r0
     ca0:	0031      	movs	r1, r6
     ca2:	40b9      	lsls	r1, r7
     ca4:	4689      	mov	r9, r1
		r = r << 1;
     ca6:	1892      	adds	r2, r2, r2
     ca8:	415b      	adcs	r3, r3
     caa:	0010      	movs	r0, r2
     cac:	0019      	movs	r1, r3
		if (n & bit_shift) {
     cae:	4644      	mov	r4, r8
     cb0:	464d      	mov	r5, r9
     cb2:	402c      	ands	r4, r5
     cb4:	46a4      	mov	ip, r4
     cb6:	4654      	mov	r4, sl
     cb8:	9d04      	ldr	r5, [sp, #16]
     cba:	402c      	ands	r4, r5
     cbc:	46a2      	mov	sl, r4
     cbe:	4664      	mov	r4, ip
     cc0:	4655      	mov	r5, sl
     cc2:	432c      	orrs	r4, r5
     cc4:	d003      	beq.n	cce <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
     cc6:	0034      	movs	r4, r6
     cc8:	4304      	orrs	r4, r0
     cca:	0022      	movs	r2, r4
     ccc:	000b      	movs	r3, r1
		if (r >= d) {
     cce:	9800      	ldr	r0, [sp, #0]
     cd0:	9901      	ldr	r1, [sp, #4]
     cd2:	4299      	cmp	r1, r3
     cd4:	d8db      	bhi.n	c8e <_sercom_get_async_baud_val+0x12a>
     cd6:	d1d2      	bne.n	c7e <_sercom_get_async_baud_val+0x11a>
     cd8:	4290      	cmp	r0, r2
     cda:	d8d8      	bhi.n	c8e <_sercom_get_async_baud_val+0x12a>
     cdc:	e7cf      	b.n	c7e <_sercom_get_async_baud_val+0x11a>
     cde:	9c00      	ldr	r4, [sp, #0]
     ce0:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
     ce2:	9902      	ldr	r1, [sp, #8]
     ce4:	9a07      	ldr	r2, [sp, #28]
     ce6:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     ce8:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     cea:	4911      	ldr	r1, [pc, #68]	; (d30 <_sercom_get_async_baud_val+0x1cc>)
     cec:	428b      	cmp	r3, r1
     cee:	d914      	bls.n	d1a <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     cf0:	9b06      	ldr	r3, [sp, #24]
     cf2:	3301      	adds	r3, #1
     cf4:	b2db      	uxtb	r3, r3
     cf6:	0019      	movs	r1, r3
     cf8:	9306      	str	r3, [sp, #24]
     cfa:	0013      	movs	r3, r2
     cfc:	3301      	adds	r3, #1
     cfe:	9307      	str	r3, [sp, #28]
     d00:	2908      	cmp	r1, #8
     d02:	d008      	beq.n	d16 <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
     d04:	2300      	movs	r3, #0
     d06:	9302      	str	r3, [sp, #8]
     d08:	2200      	movs	r2, #0
     d0a:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     d0c:	213f      	movs	r1, #63	; 0x3f
     d0e:	9400      	str	r4, [sp, #0]
     d10:	9501      	str	r5, [sp, #4]
     d12:	000f      	movs	r7, r1
     d14:	e7bd      	b.n	c92 <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d16:	2240      	movs	r2, #64	; 0x40
     d18:	e734      	b.n	b84 <_sercom_get_async_baud_val+0x20>
     d1a:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
     d1c:	9906      	ldr	r1, [sp, #24]
     d1e:	2908      	cmp	r1, #8
     d20:	d100      	bne.n	d24 <_sercom_get_async_baud_val+0x1c0>
     d22:	e72f      	b.n	b84 <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
     d24:	034a      	lsls	r2, r1, #13
     d26:	431a      	orrs	r2, r3
     d28:	e788      	b.n	c3c <_sercom_get_async_baud_val+0xd8>
     d2a:	46c0      	nop			; (mov r8, r8)
     d2c:	00004715 	.word	0x00004715
     d30:	00001fff 	.word	0x00001fff

00000d34 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     d34:	b510      	push	{r4, lr}
     d36:	b082      	sub	sp, #8
     d38:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     d3a:	4b0e      	ldr	r3, [pc, #56]	; (d74 <sercom_set_gclk_generator+0x40>)
     d3c:	781b      	ldrb	r3, [r3, #0]
     d3e:	2b00      	cmp	r3, #0
     d40:	d007      	beq.n	d52 <sercom_set_gclk_generator+0x1e>
     d42:	2900      	cmp	r1, #0
     d44:	d105      	bne.n	d52 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     d46:	4b0b      	ldr	r3, [pc, #44]	; (d74 <sercom_set_gclk_generator+0x40>)
     d48:	785b      	ldrb	r3, [r3, #1]
     d4a:	4283      	cmp	r3, r0
     d4c:	d010      	beq.n	d70 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     d4e:	201d      	movs	r0, #29
     d50:	e00c      	b.n	d6c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     d52:	a901      	add	r1, sp, #4
     d54:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     d56:	2011      	movs	r0, #17
     d58:	4b07      	ldr	r3, [pc, #28]	; (d78 <sercom_set_gclk_generator+0x44>)
     d5a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     d5c:	2011      	movs	r0, #17
     d5e:	4b07      	ldr	r3, [pc, #28]	; (d7c <sercom_set_gclk_generator+0x48>)
     d60:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     d62:	4b04      	ldr	r3, [pc, #16]	; (d74 <sercom_set_gclk_generator+0x40>)
     d64:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     d66:	2201      	movs	r2, #1
     d68:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     d6a:	2000      	movs	r0, #0
}
     d6c:	b002      	add	sp, #8
     d6e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     d70:	2000      	movs	r0, #0
     d72:	e7fb      	b.n	d6c <sercom_set_gclk_generator+0x38>
     d74:	200000cc 	.word	0x200000cc
     d78:	00003851 	.word	0x00003851
     d7c:	000037e1 	.word	0x000037e1

00000d80 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     d80:	4b40      	ldr	r3, [pc, #256]	; (e84 <_sercom_get_default_pad+0x104>)
     d82:	4298      	cmp	r0, r3
     d84:	d032      	beq.n	dec <_sercom_get_default_pad+0x6c>
     d86:	d90a      	bls.n	d9e <_sercom_get_default_pad+0x1e>
     d88:	4b3f      	ldr	r3, [pc, #252]	; (e88 <_sercom_get_default_pad+0x108>)
     d8a:	4298      	cmp	r0, r3
     d8c:	d04e      	beq.n	e2c <_sercom_get_default_pad+0xac>
     d8e:	4b3f      	ldr	r3, [pc, #252]	; (e8c <_sercom_get_default_pad+0x10c>)
     d90:	4298      	cmp	r0, r3
     d92:	d05b      	beq.n	e4c <_sercom_get_default_pad+0xcc>
     d94:	4b3e      	ldr	r3, [pc, #248]	; (e90 <_sercom_get_default_pad+0x110>)
     d96:	4298      	cmp	r0, r3
     d98:	d038      	beq.n	e0c <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     d9a:	2000      	movs	r0, #0
}
     d9c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     d9e:	2384      	movs	r3, #132	; 0x84
     da0:	05db      	lsls	r3, r3, #23
     da2:	4298      	cmp	r0, r3
     da4:	d00c      	beq.n	dc0 <_sercom_get_default_pad+0x40>
     da6:	4b3b      	ldr	r3, [pc, #236]	; (e94 <_sercom_get_default_pad+0x114>)
     da8:	4298      	cmp	r0, r3
     daa:	d1f6      	bne.n	d9a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dac:	2901      	cmp	r1, #1
     dae:	d017      	beq.n	de0 <_sercom_get_default_pad+0x60>
     db0:	2900      	cmp	r1, #0
     db2:	d05d      	beq.n	e70 <_sercom_get_default_pad+0xf0>
     db4:	2902      	cmp	r1, #2
     db6:	d015      	beq.n	de4 <_sercom_get_default_pad+0x64>
     db8:	2903      	cmp	r1, #3
     dba:	d015      	beq.n	de8 <_sercom_get_default_pad+0x68>
	return 0;
     dbc:	2000      	movs	r0, #0
     dbe:	e7ed      	b.n	d9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dc0:	2901      	cmp	r1, #1
     dc2:	d007      	beq.n	dd4 <_sercom_get_default_pad+0x54>
     dc4:	2900      	cmp	r1, #0
     dc6:	d051      	beq.n	e6c <_sercom_get_default_pad+0xec>
     dc8:	2902      	cmp	r1, #2
     dca:	d005      	beq.n	dd8 <_sercom_get_default_pad+0x58>
     dcc:	2903      	cmp	r1, #3
     dce:	d005      	beq.n	ddc <_sercom_get_default_pad+0x5c>
	return 0;
     dd0:	2000      	movs	r0, #0
     dd2:	e7e3      	b.n	d9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dd4:	4830      	ldr	r0, [pc, #192]	; (e98 <_sercom_get_default_pad+0x118>)
     dd6:	e7e1      	b.n	d9c <_sercom_get_default_pad+0x1c>
     dd8:	4830      	ldr	r0, [pc, #192]	; (e9c <_sercom_get_default_pad+0x11c>)
     dda:	e7df      	b.n	d9c <_sercom_get_default_pad+0x1c>
     ddc:	4830      	ldr	r0, [pc, #192]	; (ea0 <_sercom_get_default_pad+0x120>)
     dde:	e7dd      	b.n	d9c <_sercom_get_default_pad+0x1c>
     de0:	4830      	ldr	r0, [pc, #192]	; (ea4 <_sercom_get_default_pad+0x124>)
     de2:	e7db      	b.n	d9c <_sercom_get_default_pad+0x1c>
     de4:	4830      	ldr	r0, [pc, #192]	; (ea8 <_sercom_get_default_pad+0x128>)
     de6:	e7d9      	b.n	d9c <_sercom_get_default_pad+0x1c>
     de8:	4830      	ldr	r0, [pc, #192]	; (eac <_sercom_get_default_pad+0x12c>)
     dea:	e7d7      	b.n	d9c <_sercom_get_default_pad+0x1c>
     dec:	2901      	cmp	r1, #1
     dee:	d007      	beq.n	e00 <_sercom_get_default_pad+0x80>
     df0:	2900      	cmp	r1, #0
     df2:	d03f      	beq.n	e74 <_sercom_get_default_pad+0xf4>
     df4:	2902      	cmp	r1, #2
     df6:	d005      	beq.n	e04 <_sercom_get_default_pad+0x84>
     df8:	2903      	cmp	r1, #3
     dfa:	d005      	beq.n	e08 <_sercom_get_default_pad+0x88>
	return 0;
     dfc:	2000      	movs	r0, #0
     dfe:	e7cd      	b.n	d9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e00:	482b      	ldr	r0, [pc, #172]	; (eb0 <_sercom_get_default_pad+0x130>)
     e02:	e7cb      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e04:	482b      	ldr	r0, [pc, #172]	; (eb4 <_sercom_get_default_pad+0x134>)
     e06:	e7c9      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e08:	482b      	ldr	r0, [pc, #172]	; (eb8 <_sercom_get_default_pad+0x138>)
     e0a:	e7c7      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e0c:	2901      	cmp	r1, #1
     e0e:	d007      	beq.n	e20 <_sercom_get_default_pad+0xa0>
     e10:	2900      	cmp	r1, #0
     e12:	d031      	beq.n	e78 <_sercom_get_default_pad+0xf8>
     e14:	2902      	cmp	r1, #2
     e16:	d005      	beq.n	e24 <_sercom_get_default_pad+0xa4>
     e18:	2903      	cmp	r1, #3
     e1a:	d005      	beq.n	e28 <_sercom_get_default_pad+0xa8>
	return 0;
     e1c:	2000      	movs	r0, #0
     e1e:	e7bd      	b.n	d9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e20:	4826      	ldr	r0, [pc, #152]	; (ebc <_sercom_get_default_pad+0x13c>)
     e22:	e7bb      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e24:	4826      	ldr	r0, [pc, #152]	; (ec0 <_sercom_get_default_pad+0x140>)
     e26:	e7b9      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e28:	4826      	ldr	r0, [pc, #152]	; (ec4 <_sercom_get_default_pad+0x144>)
     e2a:	e7b7      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e2c:	2901      	cmp	r1, #1
     e2e:	d007      	beq.n	e40 <_sercom_get_default_pad+0xc0>
     e30:	2900      	cmp	r1, #0
     e32:	d023      	beq.n	e7c <_sercom_get_default_pad+0xfc>
     e34:	2902      	cmp	r1, #2
     e36:	d005      	beq.n	e44 <_sercom_get_default_pad+0xc4>
     e38:	2903      	cmp	r1, #3
     e3a:	d005      	beq.n	e48 <_sercom_get_default_pad+0xc8>
	return 0;
     e3c:	2000      	movs	r0, #0
     e3e:	e7ad      	b.n	d9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e40:	4821      	ldr	r0, [pc, #132]	; (ec8 <_sercom_get_default_pad+0x148>)
     e42:	e7ab      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e44:	4821      	ldr	r0, [pc, #132]	; (ecc <_sercom_get_default_pad+0x14c>)
     e46:	e7a9      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e48:	4821      	ldr	r0, [pc, #132]	; (ed0 <_sercom_get_default_pad+0x150>)
     e4a:	e7a7      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e4c:	2901      	cmp	r1, #1
     e4e:	d007      	beq.n	e60 <_sercom_get_default_pad+0xe0>
     e50:	2900      	cmp	r1, #0
     e52:	d015      	beq.n	e80 <_sercom_get_default_pad+0x100>
     e54:	2902      	cmp	r1, #2
     e56:	d005      	beq.n	e64 <_sercom_get_default_pad+0xe4>
     e58:	2903      	cmp	r1, #3
     e5a:	d005      	beq.n	e68 <_sercom_get_default_pad+0xe8>
	return 0;
     e5c:	2000      	movs	r0, #0
     e5e:	e79d      	b.n	d9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e60:	481c      	ldr	r0, [pc, #112]	; (ed4 <_sercom_get_default_pad+0x154>)
     e62:	e79b      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e64:	481c      	ldr	r0, [pc, #112]	; (ed8 <_sercom_get_default_pad+0x158>)
     e66:	e799      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e68:	481c      	ldr	r0, [pc, #112]	; (edc <_sercom_get_default_pad+0x15c>)
     e6a:	e797      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e6c:	481c      	ldr	r0, [pc, #112]	; (ee0 <_sercom_get_default_pad+0x160>)
     e6e:	e795      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e70:	2003      	movs	r0, #3
     e72:	e793      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e74:	481b      	ldr	r0, [pc, #108]	; (ee4 <_sercom_get_default_pad+0x164>)
     e76:	e791      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e78:	481b      	ldr	r0, [pc, #108]	; (ee8 <_sercom_get_default_pad+0x168>)
     e7a:	e78f      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e7c:	481b      	ldr	r0, [pc, #108]	; (eec <_sercom_get_default_pad+0x16c>)
     e7e:	e78d      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e80:	481b      	ldr	r0, [pc, #108]	; (ef0 <_sercom_get_default_pad+0x170>)
     e82:	e78b      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e84:	42000800 	.word	0x42000800
     e88:	42001000 	.word	0x42001000
     e8c:	43000400 	.word	0x43000400
     e90:	42000c00 	.word	0x42000c00
     e94:	42000400 	.word	0x42000400
     e98:	00050003 	.word	0x00050003
     e9c:	00060003 	.word	0x00060003
     ea0:	00070003 	.word	0x00070003
     ea4:	00010003 	.word	0x00010003
     ea8:	001e0003 	.word	0x001e0003
     eac:	001f0003 	.word	0x001f0003
     eb0:	00090003 	.word	0x00090003
     eb4:	000a0003 	.word	0x000a0003
     eb8:	000b0003 	.word	0x000b0003
     ebc:	00110003 	.word	0x00110003
     ec0:	00120003 	.word	0x00120003
     ec4:	00130003 	.word	0x00130003
     ec8:	000d0003 	.word	0x000d0003
     ecc:	000e0003 	.word	0x000e0003
     ed0:	000f0003 	.word	0x000f0003
     ed4:	00170003 	.word	0x00170003
     ed8:	00180003 	.word	0x00180003
     edc:	00190003 	.word	0x00190003
     ee0:	00040003 	.word	0x00040003
     ee4:	00080003 	.word	0x00080003
     ee8:	00100003 	.word	0x00100003
     eec:	000c0003 	.word	0x000c0003
     ef0:	00160003 	.word	0x00160003

00000ef4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     ef4:	b530      	push	{r4, r5, lr}
     ef6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     ef8:	4b0b      	ldr	r3, [pc, #44]	; (f28 <_sercom_get_sercom_inst_index+0x34>)
     efa:	466a      	mov	r2, sp
     efc:	cb32      	ldmia	r3!, {r1, r4, r5}
     efe:	c232      	stmia	r2!, {r1, r4, r5}
     f00:	cb32      	ldmia	r3!, {r1, r4, r5}
     f02:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     f04:	9b00      	ldr	r3, [sp, #0]
     f06:	4283      	cmp	r3, r0
     f08:	d00b      	beq.n	f22 <_sercom_get_sercom_inst_index+0x2e>
     f0a:	2301      	movs	r3, #1
     f0c:	009a      	lsls	r2, r3, #2
     f0e:	4669      	mov	r1, sp
     f10:	5852      	ldr	r2, [r2, r1]
     f12:	4282      	cmp	r2, r0
     f14:	d006      	beq.n	f24 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f16:	3301      	adds	r3, #1
     f18:	2b06      	cmp	r3, #6
     f1a:	d1f7      	bne.n	f0c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     f1c:	2000      	movs	r0, #0
}
     f1e:	b007      	add	sp, #28
     f20:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f22:	2300      	movs	r3, #0
			return i;
     f24:	b2d8      	uxtb	r0, r3
     f26:	e7fa      	b.n	f1e <_sercom_get_sercom_inst_index+0x2a>
     f28:	00006860 	.word	0x00006860

00000f2c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f2e:	46c6      	mov	lr, r8
     f30:	b500      	push	{lr}
     f32:	000c      	movs	r4, r1
     f34:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     f36:	2800      	cmp	r0, #0
     f38:	d10f      	bne.n	f5a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
     f3a:	2a00      	cmp	r2, #0
     f3c:	dd11      	ble.n	f62 <_read+0x36>
     f3e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     f40:	4e09      	ldr	r6, [pc, #36]	; (f68 <_read+0x3c>)
     f42:	4d0a      	ldr	r5, [pc, #40]	; (f6c <_read+0x40>)
     f44:	6830      	ldr	r0, [r6, #0]
     f46:	0021      	movs	r1, r4
     f48:	682b      	ldr	r3, [r5, #0]
     f4a:	4798      	blx	r3
		ptr++;
     f4c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
     f4e:	42bc      	cmp	r4, r7
     f50:	d1f8      	bne.n	f44 <_read+0x18>
		nChars++;
	}
	return nChars;
}
     f52:	4640      	mov	r0, r8
     f54:	bc04      	pop	{r2}
     f56:	4690      	mov	r8, r2
     f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
     f5a:	2301      	movs	r3, #1
     f5c:	425b      	negs	r3, r3
     f5e:	4698      	mov	r8, r3
     f60:	e7f7      	b.n	f52 <_read+0x26>
	for (; len > 0; --len) {
     f62:	4680      	mov	r8, r0
     f64:	e7f5      	b.n	f52 <_read+0x26>
     f66:	46c0      	nop			; (mov r8, r8)
     f68:	20003d10 	.word	0x20003d10
     f6c:	20003d08 	.word	0x20003d08

00000f70 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     f70:	b5f0      	push	{r4, r5, r6, r7, lr}
     f72:	46c6      	mov	lr, r8
     f74:	b500      	push	{lr}
     f76:	000e      	movs	r6, r1
     f78:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     f7a:	3801      	subs	r0, #1
     f7c:	2802      	cmp	r0, #2
     f7e:	d810      	bhi.n	fa2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     f80:	2a00      	cmp	r2, #0
     f82:	d011      	beq.n	fa8 <_write+0x38>
     f84:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     f86:	4b0c      	ldr	r3, [pc, #48]	; (fb8 <_write+0x48>)
     f88:	4698      	mov	r8, r3
     f8a:	4f0c      	ldr	r7, [pc, #48]	; (fbc <_write+0x4c>)
     f8c:	4643      	mov	r3, r8
     f8e:	6818      	ldr	r0, [r3, #0]
     f90:	5d31      	ldrb	r1, [r6, r4]
     f92:	683b      	ldr	r3, [r7, #0]
     f94:	4798      	blx	r3
     f96:	2800      	cmp	r0, #0
     f98:	db08      	blt.n	fac <_write+0x3c>
			return -1;
		}
		++nChars;
     f9a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
     f9c:	42a5      	cmp	r5, r4
     f9e:	d1f5      	bne.n	f8c <_write+0x1c>
     fa0:	e006      	b.n	fb0 <_write+0x40>
		return -1;
     fa2:	2401      	movs	r4, #1
     fa4:	4264      	negs	r4, r4
     fa6:	e003      	b.n	fb0 <_write+0x40>
	for (; len != 0; --len) {
     fa8:	0014      	movs	r4, r2
     faa:	e001      	b.n	fb0 <_write+0x40>
			return -1;
     fac:	2401      	movs	r4, #1
     fae:	4264      	negs	r4, r4
	}
	return nChars;
}
     fb0:	0020      	movs	r0, r4
     fb2:	bc04      	pop	{r2}
     fb4:	4690      	mov	r8, r2
     fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fb8:	20003d10 	.word	0x20003d10
     fbc:	20003d0c 	.word	0x20003d0c

00000fc0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     fc0:	4b03      	ldr	r3, [pc, #12]	; (fd0 <prvTaskExitError+0x10>)
     fc2:	681b      	ldr	r3, [r3, #0]
     fc4:	3301      	adds	r3, #1
     fc6:	d001      	beq.n	fcc <prvTaskExitError+0xc>
     fc8:	b672      	cpsid	i
     fca:	e7fe      	b.n	fca <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
     fcc:	b672      	cpsid	i
     fce:	e7fe      	b.n	fce <prvTaskExitError+0xe>
     fd0:	20000020 	.word	0x20000020

00000fd4 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
     fd4:	4a06      	ldr	r2, [pc, #24]	; (ff0 <pxCurrentTCBConst2>)
     fd6:	6813      	ldr	r3, [r2, #0]
     fd8:	6818      	ldr	r0, [r3, #0]
     fda:	3020      	adds	r0, #32
     fdc:	f380 8809 	msr	PSP, r0
     fe0:	2002      	movs	r0, #2
     fe2:	f380 8814 	msr	CONTROL, r0
     fe6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
     fe8:	46ae      	mov	lr, r5
     fea:	b662      	cpsie	i
     fec:	bd00      	pop	{pc}
     fee:	46c0      	nop			; (mov r8, r8)

00000ff0 <pxCurrentTCBConst2>:
     ff0:	20003b70 	.word	0x20003b70

00000ff4 <pxPortInitialiseStack>:
{
     ff4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     ff6:	1f03      	subs	r3, r0, #4
     ff8:	2480      	movs	r4, #128	; 0x80
     ffa:	0464      	lsls	r4, r4, #17
     ffc:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
     ffe:	3b04      	subs	r3, #4
    1000:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    1002:	3b04      	subs	r3, #4
    1004:	4902      	ldr	r1, [pc, #8]	; (1010 <pxPortInitialiseStack+0x1c>)
    1006:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    1008:	3b14      	subs	r3, #20
    100a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    100c:	3840      	subs	r0, #64	; 0x40
}
    100e:	bd10      	pop	{r4, pc}
    1010:	00000fc1 	.word	0x00000fc1

00001014 <SVC_Handler>:
}
    1014:	4770      	bx	lr
	...

00001018 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    1018:	2280      	movs	r2, #128	; 0x80
    101a:	0552      	lsls	r2, r2, #21
    101c:	4b03      	ldr	r3, [pc, #12]	; (102c <vPortYield+0x14>)
    101e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    1020:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1024:	f3bf 8f6f 	isb	sy
}
    1028:	4770      	bx	lr
    102a:	46c0      	nop			; (mov r8, r8)
    102c:	e000ed04 	.word	0xe000ed04

00001030 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    1030:	b672      	cpsid	i
    uxCriticalNesting++;
    1032:	4a04      	ldr	r2, [pc, #16]	; (1044 <vPortEnterCritical+0x14>)
    1034:	6813      	ldr	r3, [r2, #0]
    1036:	3301      	adds	r3, #1
    1038:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
    103a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    103e:	f3bf 8f6f 	isb	sy
}
    1042:	4770      	bx	lr
    1044:	20000020 	.word	0x20000020

00001048 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
    1048:	4b06      	ldr	r3, [pc, #24]	; (1064 <vPortExitCritical+0x1c>)
    104a:	681b      	ldr	r3, [r3, #0]
    104c:	2b00      	cmp	r3, #0
    104e:	d101      	bne.n	1054 <vPortExitCritical+0xc>
    1050:	b672      	cpsid	i
    1052:	e7fe      	b.n	1052 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    1054:	3b01      	subs	r3, #1
    1056:	4a03      	ldr	r2, [pc, #12]	; (1064 <vPortExitCritical+0x1c>)
    1058:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    105a:	2b00      	cmp	r3, #0
    105c:	d100      	bne.n	1060 <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
    105e:	b662      	cpsie	i
    }
}
    1060:	4770      	bx	lr
    1062:	46c0      	nop			; (mov r8, r8)
    1064:	20000020 	.word	0x20000020

00001068 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    1068:	f3ef 8010 	mrs	r0, PRIMASK
    106c:	b672      	cpsid	i
    106e:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
    1070:	2000      	movs	r0, #0

00001072 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    1072:	f380 8810 	msr	PRIMASK, r0
    1076:	4770      	bx	lr

00001078 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    1078:	f3ef 8009 	mrs	r0, PSP
    107c:	4b0e      	ldr	r3, [pc, #56]	; (10b8 <pxCurrentTCBConst>)
    107e:	681a      	ldr	r2, [r3, #0]
    1080:	3820      	subs	r0, #32
    1082:	6010      	str	r0, [r2, #0]
    1084:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1086:	4644      	mov	r4, r8
    1088:	464d      	mov	r5, r9
    108a:	4656      	mov	r6, sl
    108c:	465f      	mov	r7, fp
    108e:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1090:	b508      	push	{r3, lr}
    1092:	b672      	cpsid	i
    1094:	f000 ff26 	bl	1ee4 <vTaskSwitchContext>
    1098:	b662      	cpsie	i
    109a:	bc0c      	pop	{r2, r3}
    109c:	6811      	ldr	r1, [r2, #0]
    109e:	6808      	ldr	r0, [r1, #0]
    10a0:	3010      	adds	r0, #16
    10a2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    10a4:	46a0      	mov	r8, r4
    10a6:	46a9      	mov	r9, r5
    10a8:	46b2      	mov	sl, r6
    10aa:	46bb      	mov	fp, r7
    10ac:	f380 8809 	msr	PSP, r0
    10b0:	3820      	subs	r0, #32
    10b2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    10b4:	4718      	bx	r3
    10b6:	46c0      	nop			; (mov r8, r8)

000010b8 <pxCurrentTCBConst>:
    10b8:	20003b70 	.word	0x20003b70

000010bc <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    10bc:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    10be:	4b07      	ldr	r3, [pc, #28]	; (10dc <SysTick_Handler+0x20>)
    10c0:	4798      	blx	r3
    10c2:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    10c4:	4b06      	ldr	r3, [pc, #24]	; (10e0 <SysTick_Handler+0x24>)
    10c6:	4798      	blx	r3
    10c8:	2800      	cmp	r0, #0
    10ca:	d003      	beq.n	10d4 <SysTick_Handler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    10cc:	2280      	movs	r2, #128	; 0x80
    10ce:	0552      	lsls	r2, r2, #21
    10d0:	4b04      	ldr	r3, [pc, #16]	; (10e4 <SysTick_Handler+0x28>)
    10d2:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    10d4:	0020      	movs	r0, r4
    10d6:	4b04      	ldr	r3, [pc, #16]	; (10e8 <SysTick_Handler+0x2c>)
    10d8:	4798      	blx	r3
}
    10da:	bd10      	pop	{r4, pc}
    10dc:	00001069 	.word	0x00001069
    10e0:	00001bd5 	.word	0x00001bd5
    10e4:	e000ed04 	.word	0xe000ed04
    10e8:	00001073 	.word	0x00001073

000010ec <vPortSetupTimerInterrupt>:
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
    10ec:	2200      	movs	r2, #0
    10ee:	4b04      	ldr	r3, [pc, #16]	; (1100 <vPortSetupTimerInterrupt+0x14>)
    10f0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    10f2:	4a04      	ldr	r2, [pc, #16]	; (1104 <vPortSetupTimerInterrupt+0x18>)
    10f4:	4b04      	ldr	r3, [pc, #16]	; (1108 <vPortSetupTimerInterrupt+0x1c>)
    10f6:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    10f8:	2207      	movs	r2, #7
    10fa:	4b04      	ldr	r3, [pc, #16]	; (110c <vPortSetupTimerInterrupt+0x20>)
    10fc:	601a      	str	r2, [r3, #0]
}
    10fe:	4770      	bx	lr
    1100:	e000e018 	.word	0xe000e018
    1104:	00001f3f 	.word	0x00001f3f
    1108:	e000e014 	.word	0xe000e014
    110c:	e000e010 	.word	0xe000e010

00001110 <xPortStartScheduler>:
{
    1110:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    1112:	4b0a      	ldr	r3, [pc, #40]	; (113c <xPortStartScheduler+0x2c>)
    1114:	6819      	ldr	r1, [r3, #0]
    1116:	22ff      	movs	r2, #255	; 0xff
    1118:	0412      	lsls	r2, r2, #16
    111a:	430a      	orrs	r2, r1
    111c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    111e:	6819      	ldr	r1, [r3, #0]
    1120:	22ff      	movs	r2, #255	; 0xff
    1122:	0612      	lsls	r2, r2, #24
    1124:	430a      	orrs	r2, r1
    1126:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    1128:	4b05      	ldr	r3, [pc, #20]	; (1140 <xPortStartScheduler+0x30>)
    112a:	4798      	blx	r3
	uxCriticalNesting = 0;
    112c:	2200      	movs	r2, #0
    112e:	4b05      	ldr	r3, [pc, #20]	; (1144 <xPortStartScheduler+0x34>)
    1130:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
    1132:	4b05      	ldr	r3, [pc, #20]	; (1148 <xPortStartScheduler+0x38>)
    1134:	4798      	blx	r3
	prvTaskExitError();
    1136:	4b05      	ldr	r3, [pc, #20]	; (114c <xPortStartScheduler+0x3c>)
    1138:	4798      	blx	r3
    113a:	46c0      	nop			; (mov r8, r8)
    113c:	e000ed20 	.word	0xe000ed20
    1140:	000010ed 	.word	0x000010ed
    1144:	20000020 	.word	0x20000020
    1148:	00000fd5 	.word	0x00000fd5
    114c:	00000fc1 	.word	0x00000fc1

00001150 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1150:	b570      	push	{r4, r5, r6, lr}
    1152:	0004      	movs	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    1154:	0743      	lsls	r3, r0, #29
    1156:	d002      	beq.n	115e <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    1158:	2307      	movs	r3, #7
    115a:	439c      	bics	r4, r3
    115c:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
    115e:	4b11      	ldr	r3, [pc, #68]	; (11a4 <pvPortMalloc+0x54>)
    1160:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    1162:	4b11      	ldr	r3, [pc, #68]	; (11a8 <pvPortMalloc+0x58>)
    1164:	681b      	ldr	r3, [r3, #0]
    1166:	2b00      	cmp	r3, #0
    1168:	d010      	beq.n	118c <pvPortMalloc+0x3c>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    116a:	4b10      	ldr	r3, [pc, #64]	; (11ac <pvPortMalloc+0x5c>)
    116c:	681b      	ldr	r3, [r3, #0]
    116e:	18e4      	adds	r4, r4, r3
    1170:	4a0f      	ldr	r2, [pc, #60]	; (11b0 <pvPortMalloc+0x60>)
    1172:	4294      	cmp	r4, r2
    1174:	d811      	bhi.n	119a <pvPortMalloc+0x4a>
    1176:	42a3      	cmp	r3, r4
    1178:	d211      	bcs.n	119e <pvPortMalloc+0x4e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    117a:	4a0b      	ldr	r2, [pc, #44]	; (11a8 <pvPortMalloc+0x58>)
    117c:	6815      	ldr	r5, [r2, #0]
    117e:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
    1180:	4b0a      	ldr	r3, [pc, #40]	; (11ac <pvPortMalloc+0x5c>)
    1182:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1184:	4b0b      	ldr	r3, [pc, #44]	; (11b4 <pvPortMalloc+0x64>)
    1186:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    1188:	0028      	movs	r0, r5
    118a:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    118c:	2207      	movs	r2, #7
    118e:	4b0a      	ldr	r3, [pc, #40]	; (11b8 <pvPortMalloc+0x68>)
    1190:	3308      	adds	r3, #8
    1192:	4393      	bics	r3, r2
    1194:	4a04      	ldr	r2, [pc, #16]	; (11a8 <pvPortMalloc+0x58>)
    1196:	6013      	str	r3, [r2, #0]
    1198:	e7e7      	b.n	116a <pvPortMalloc+0x1a>
void *pvReturn = NULL;
    119a:	2500      	movs	r5, #0
    119c:	e7f2      	b.n	1184 <pvPortMalloc+0x34>
    119e:	2500      	movs	r5, #0
    11a0:	e7f0      	b.n	1184 <pvPortMalloc+0x34>
    11a2:	46c0      	nop			; (mov r8, r8)
    11a4:	00001ba5 	.word	0x00001ba5
    11a8:	200000d0 	.word	0x200000d0
    11ac:	20003b6c 	.word	0x20003b6c
    11b0:	00003a8f 	.word	0x00003a8f
    11b4:	00001cf9 	.word	0x00001cf9
    11b8:	200000d4 	.word	0x200000d4

000011bc <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    11bc:	2800      	cmp	r0, #0
    11be:	d001      	beq.n	11c4 <vPortFree+0x8>
    11c0:	b672      	cpsid	i
    11c2:	e7fe      	b.n	11c2 <vPortFree+0x6>
}
    11c4:	4770      	bx	lr

000011c6 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    11c6:	0003      	movs	r3, r0
    11c8:	3308      	adds	r3, #8
    11ca:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    11cc:	2201      	movs	r2, #1
    11ce:	4252      	negs	r2, r2
    11d0:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    11d2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    11d4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    11d6:	2300      	movs	r3, #0
    11d8:	6003      	str	r3, [r0, #0]
}
    11da:	4770      	bx	lr

000011dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    11dc:	2300      	movs	r3, #0
    11de:	6103      	str	r3, [r0, #16]
}
    11e0:	4770      	bx	lr

000011e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    11e2:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    11e4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    11e6:	689a      	ldr	r2, [r3, #8]
    11e8:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    11ea:	689a      	ldr	r2, [r3, #8]
    11ec:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    11ee:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    11f0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    11f2:	6803      	ldr	r3, [r0, #0]
    11f4:	3301      	adds	r3, #1
    11f6:	6003      	str	r3, [r0, #0]
}
    11f8:	4770      	bx	lr

000011fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    11fa:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    11fc:	680c      	ldr	r4, [r1, #0]
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    11fe:	0002      	movs	r2, r0
    1200:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
    1202:	1c63      	adds	r3, r4, #1
    1204:	d102      	bne.n	120c <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
    1206:	6902      	ldr	r2, [r0, #16]
    1208:	e004      	b.n	1214 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    120a:	001a      	movs	r2, r3
    120c:	6853      	ldr	r3, [r2, #4]
    120e:	681d      	ldr	r5, [r3, #0]
    1210:	42ac      	cmp	r4, r5
    1212:	d2fa      	bcs.n	120a <vListInsert+0x10>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1214:	6853      	ldr	r3, [r2, #4]
    1216:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1218:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    121a:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    121c:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    121e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1220:	6803      	ldr	r3, [r0, #0]
    1222:	3301      	adds	r3, #1
    1224:	6003      	str	r3, [r0, #0]
}
    1226:	bd30      	pop	{r4, r5, pc}

00001228 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1228:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    122a:	6842      	ldr	r2, [r0, #4]
    122c:	6881      	ldr	r1, [r0, #8]
    122e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1230:	6882      	ldr	r2, [r0, #8]
    1232:	6841      	ldr	r1, [r0, #4]
    1234:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1236:	685a      	ldr	r2, [r3, #4]
    1238:	4290      	cmp	r0, r2
    123a:	d005      	beq.n	1248 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    123c:	2200      	movs	r2, #0
    123e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    1240:	681a      	ldr	r2, [r3, #0]
    1242:	1e50      	subs	r0, r2, #1
    1244:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
    1246:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1248:	6882      	ldr	r2, [r0, #8]
    124a:	605a      	str	r2, [r3, #4]
    124c:	e7f6      	b.n	123c <uxListRemove+0x14>
	...

00001250 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    1250:	b570      	push	{r4, r5, r6, lr}
    1252:	0004      	movs	r4, r0
    1254:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    1256:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1258:	2a00      	cmp	r2, #0
    125a:	d10b      	bne.n	1274 <prvCopyDataToQueue+0x24>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    125c:	6803      	ldr	r3, [r0, #0]
    125e:	2b00      	cmp	r3, #0
    1260:	d104      	bne.n	126c <prvCopyDataToQueue+0x1c>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    1262:	6840      	ldr	r0, [r0, #4]
    1264:	4b17      	ldr	r3, [pc, #92]	; (12c4 <prvCopyDataToQueue+0x74>)
    1266:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    1268:	2300      	movs	r3, #0
    126a:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    126c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    126e:	3301      	adds	r3, #1
    1270:	63a3      	str	r3, [r4, #56]	; 0x38
}
    1272:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
    1274:	2d00      	cmp	r5, #0
    1276:	d10d      	bne.n	1294 <prvCopyDataToQueue+0x44>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    1278:	6880      	ldr	r0, [r0, #8]
    127a:	4b13      	ldr	r3, [pc, #76]	; (12c8 <prvCopyDataToQueue+0x78>)
    127c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    127e:	68a3      	ldr	r3, [r4, #8]
    1280:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1282:	4694      	mov	ip, r2
    1284:	4463      	add	r3, ip
    1286:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1288:	6862      	ldr	r2, [r4, #4]
    128a:	4293      	cmp	r3, r2
    128c:	d3ee      	bcc.n	126c <prvCopyDataToQueue+0x1c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    128e:	6823      	ldr	r3, [r4, #0]
    1290:	60a3      	str	r3, [r4, #8]
    1292:	e7eb      	b.n	126c <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1294:	68c0      	ldr	r0, [r0, #12]
    1296:	4b0c      	ldr	r3, [pc, #48]	; (12c8 <prvCopyDataToQueue+0x78>)
    1298:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    129a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    129c:	425b      	negs	r3, r3
    129e:	68e2      	ldr	r2, [r4, #12]
    12a0:	18d2      	adds	r2, r2, r3
    12a2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    12a4:	6821      	ldr	r1, [r4, #0]
    12a6:	428a      	cmp	r2, r1
    12a8:	d203      	bcs.n	12b2 <prvCopyDataToQueue+0x62>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    12aa:	6862      	ldr	r2, [r4, #4]
    12ac:	4694      	mov	ip, r2
    12ae:	4463      	add	r3, ip
    12b0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
    12b2:	2d02      	cmp	r5, #2
    12b4:	d1da      	bne.n	126c <prvCopyDataToQueue+0x1c>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    12b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    12b8:	2b00      	cmp	r3, #0
    12ba:	d0d7      	beq.n	126c <prvCopyDataToQueue+0x1c>
				--( pxQueue->uxMessagesWaiting );
    12bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    12be:	3b01      	subs	r3, #1
    12c0:	63a3      	str	r3, [r4, #56]	; 0x38
    12c2:	e7d3      	b.n	126c <prvCopyDataToQueue+0x1c>
    12c4:	000021fd 	.word	0x000021fd
    12c8:	00006079 	.word	0x00006079

000012cc <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    12cc:	b510      	push	{r4, lr}
    12ce:	b082      	sub	sp, #8
    12d0:	9001      	str	r0, [sp, #4]
    12d2:	000a      	movs	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    12d4:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    12d6:	2c00      	cmp	r4, #0
    12d8:	d005      	beq.n	12e6 <prvNotifyQueueSetContainer+0x1a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    12da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    12dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    12de:	4299      	cmp	r1, r3
    12e0:	d303      	bcc.n	12ea <prvNotifyQueueSetContainer+0x1e>
    12e2:	b672      	cpsid	i
    12e4:	e7fe      	b.n	12e4 <prvNotifyQueueSetContainer+0x18>
		configASSERT( pxQueueSetContainer );
    12e6:	b672      	cpsid	i
    12e8:	e7fe      	b.n	12e8 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    12ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    12ec:	2000      	movs	r0, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    12ee:	428b      	cmp	r3, r1
    12f0:	d801      	bhi.n	12f6 <prvNotifyQueueSetContainer+0x2a>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    12f2:	b002      	add	sp, #8
    12f4:	bd10      	pop	{r4, pc}
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    12f6:	a901      	add	r1, sp, #4
    12f8:	0020      	movs	r0, r4
    12fa:	4b06      	ldr	r3, [pc, #24]	; (1314 <prvNotifyQueueSetContainer+0x48>)
    12fc:	4798      	blx	r3
	BaseType_t xReturn = pdFALSE;
    12fe:	2000      	movs	r0, #0
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    1300:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1302:	2b00      	cmp	r3, #0
    1304:	d0f5      	beq.n	12f2 <prvNotifyQueueSetContainer+0x26>
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    1306:	0020      	movs	r0, r4
    1308:	3024      	adds	r0, #36	; 0x24
    130a:	4b03      	ldr	r3, [pc, #12]	; (1318 <prvNotifyQueueSetContainer+0x4c>)
    130c:	4798      	blx	r3
	BaseType_t xReturn = pdFALSE;
    130e:	1e43      	subs	r3, r0, #1
    1310:	4198      	sbcs	r0, r3
    1312:	e7ee      	b.n	12f2 <prvNotifyQueueSetContainer+0x26>
    1314:	00001251 	.word	0x00001251
    1318:	0000202d 	.word	0x0000202d

0000131c <prvCopyDataFromQueue>:
{
    131c:	b570      	push	{r4, r5, r6, lr}
    131e:	000c      	movs	r4, r1
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    1320:	6801      	ldr	r1, [r0, #0]
    1322:	2900      	cmp	r1, #0
    1324:	d00b      	beq.n	133e <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1326:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1328:	68c3      	ldr	r3, [r0, #12]
    132a:	189b      	adds	r3, r3, r2
    132c:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    132e:	6845      	ldr	r5, [r0, #4]
    1330:	42ab      	cmp	r3, r5
    1332:	d300      	bcc.n	1336 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1334:	60c1      	str	r1, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    1336:	68c1      	ldr	r1, [r0, #12]
    1338:	0020      	movs	r0, r4
    133a:	4b01      	ldr	r3, [pc, #4]	; (1340 <prvCopyDataFromQueue+0x24>)
    133c:	4798      	blx	r3
}
    133e:	bd70      	pop	{r4, r5, r6, pc}
    1340:	00006079 	.word	0x00006079

00001344 <prvUnlockQueue>:
{
    1344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1346:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
    1348:	4b25      	ldr	r3, [pc, #148]	; (13e0 <prvUnlockQueue+0x9c>)
    134a:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    134c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    134e:	2b00      	cmp	r3, #0
    1350:	dd1e      	ble.n	1390 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    1352:	4d24      	ldr	r5, [pc, #144]	; (13e4 <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1354:	4e24      	ldr	r6, [pc, #144]	; (13e8 <prvUnlockQueue+0xa4>)
    1356:	e00d      	b.n	1374 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1358:	6a63      	ldr	r3, [r4, #36]	; 0x24
    135a:	2b00      	cmp	r3, #0
    135c:	d018      	beq.n	1390 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    135e:	0020      	movs	r0, r4
    1360:	3024      	adds	r0, #36	; 0x24
    1362:	47b0      	blx	r6
    1364:	2800      	cmp	r0, #0
    1366:	d110      	bne.n	138a <prvUnlockQueue+0x46>
			--( pxQueue->xTxLock );
    1368:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    136a:	3b01      	subs	r3, #1
    136c:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    136e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1370:	2b00      	cmp	r3, #0
    1372:	dd0d      	ble.n	1390 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
    1374:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1376:	2b00      	cmp	r3, #0
    1378:	d0ee      	beq.n	1358 <prvUnlockQueue+0x14>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    137a:	2100      	movs	r1, #0
    137c:	0020      	movs	r0, r4
    137e:	47a8      	blx	r5
    1380:	2801      	cmp	r0, #1
    1382:	d1f1      	bne.n	1368 <prvUnlockQueue+0x24>
						vTaskMissedYield();
    1384:	4b19      	ldr	r3, [pc, #100]	; (13ec <prvUnlockQueue+0xa8>)
    1386:	4798      	blx	r3
    1388:	e7ee      	b.n	1368 <prvUnlockQueue+0x24>
							vTaskMissedYield();
    138a:	4b18      	ldr	r3, [pc, #96]	; (13ec <prvUnlockQueue+0xa8>)
    138c:	4798      	blx	r3
    138e:	e7eb      	b.n	1368 <prvUnlockQueue+0x24>
		pxQueue->xTxLock = queueUNLOCKED;
    1390:	2301      	movs	r3, #1
    1392:	425b      	negs	r3, r3
    1394:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
    1396:	4b16      	ldr	r3, [pc, #88]	; (13f0 <prvUnlockQueue+0xac>)
    1398:	4798      	blx	r3
	taskENTER_CRITICAL();
    139a:	4b11      	ldr	r3, [pc, #68]	; (13e0 <prvUnlockQueue+0x9c>)
    139c:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    139e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    13a0:	2b00      	cmp	r3, #0
    13a2:	dd16      	ble.n	13d2 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    13a4:	6923      	ldr	r3, [r4, #16]
    13a6:	2b00      	cmp	r3, #0
    13a8:	d013      	beq.n	13d2 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    13aa:	0025      	movs	r5, r4
    13ac:	3510      	adds	r5, #16
    13ae:	4f0e      	ldr	r7, [pc, #56]	; (13e8 <prvUnlockQueue+0xa4>)
					vTaskMissedYield();
    13b0:	4e0e      	ldr	r6, [pc, #56]	; (13ec <prvUnlockQueue+0xa8>)
    13b2:	e008      	b.n	13c6 <prvUnlockQueue+0x82>
				--( pxQueue->xRxLock );
    13b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    13b6:	3b01      	subs	r3, #1
    13b8:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    13ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
    13bc:	2b00      	cmp	r3, #0
    13be:	dd08      	ble.n	13d2 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    13c0:	6923      	ldr	r3, [r4, #16]
    13c2:	2b00      	cmp	r3, #0
    13c4:	d005      	beq.n	13d2 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    13c6:	0028      	movs	r0, r5
    13c8:	47b8      	blx	r7
    13ca:	2800      	cmp	r0, #0
    13cc:	d0f2      	beq.n	13b4 <prvUnlockQueue+0x70>
					vTaskMissedYield();
    13ce:	47b0      	blx	r6
    13d0:	e7f0      	b.n	13b4 <prvUnlockQueue+0x70>
		pxQueue->xRxLock = queueUNLOCKED;
    13d2:	2301      	movs	r3, #1
    13d4:	425b      	negs	r3, r3
    13d6:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
    13d8:	4b05      	ldr	r3, [pc, #20]	; (13f0 <prvUnlockQueue+0xac>)
    13da:	4798      	blx	r3
}
    13dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13de:	46c0      	nop			; (mov r8, r8)
    13e0:	00001031 	.word	0x00001031
    13e4:	000012cd 	.word	0x000012cd
    13e8:	0000202d 	.word	0x0000202d
    13ec:	00002145 	.word	0x00002145
    13f0:	00001049 	.word	0x00001049

000013f4 <xQueueGenericReset>:
{
    13f4:	b570      	push	{r4, r5, r6, lr}
    13f6:	0004      	movs	r4, r0
    13f8:	000d      	movs	r5, r1
	configASSERT( pxQueue );
    13fa:	2800      	cmp	r0, #0
    13fc:	d020      	beq.n	1440 <xQueueGenericReset+0x4c>
	taskENTER_CRITICAL();
    13fe:	4b17      	ldr	r3, [pc, #92]	; (145c <xQueueGenericReset+0x68>)
    1400:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1402:	6822      	ldr	r2, [r4, #0]
    1404:	6c21      	ldr	r1, [r4, #64]	; 0x40
    1406:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1408:	434b      	muls	r3, r1
    140a:	18d0      	adds	r0, r2, r3
    140c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    140e:	2000      	movs	r0, #0
    1410:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1412:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1414:	1a5b      	subs	r3, r3, r1
    1416:	18d3      	adds	r3, r2, r3
    1418:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    141a:	2301      	movs	r3, #1
    141c:	425b      	negs	r3, r3
    141e:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    1420:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
    1422:	2d00      	cmp	r5, #0
    1424:	d111      	bne.n	144a <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1426:	6923      	ldr	r3, [r4, #16]
    1428:	2b00      	cmp	r3, #0
    142a:	d005      	beq.n	1438 <xQueueGenericReset+0x44>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    142c:	0020      	movs	r0, r4
    142e:	3010      	adds	r0, #16
    1430:	4b0b      	ldr	r3, [pc, #44]	; (1460 <xQueueGenericReset+0x6c>)
    1432:	4798      	blx	r3
    1434:	2801      	cmp	r0, #1
    1436:	d005      	beq.n	1444 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
    1438:	4b0a      	ldr	r3, [pc, #40]	; (1464 <xQueueGenericReset+0x70>)
    143a:	4798      	blx	r3
}
    143c:	2001      	movs	r0, #1
    143e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
    1440:	b672      	cpsid	i
    1442:	e7fe      	b.n	1442 <xQueueGenericReset+0x4e>
					queueYIELD_IF_USING_PREEMPTION();
    1444:	4b08      	ldr	r3, [pc, #32]	; (1468 <xQueueGenericReset+0x74>)
    1446:	4798      	blx	r3
    1448:	e7f6      	b.n	1438 <xQueueGenericReset+0x44>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    144a:	0020      	movs	r0, r4
    144c:	3010      	adds	r0, #16
    144e:	4d07      	ldr	r5, [pc, #28]	; (146c <xQueueGenericReset+0x78>)
    1450:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1452:	0020      	movs	r0, r4
    1454:	3024      	adds	r0, #36	; 0x24
    1456:	47a8      	blx	r5
    1458:	e7ee      	b.n	1438 <xQueueGenericReset+0x44>
    145a:	46c0      	nop			; (mov r8, r8)
    145c:	00001031 	.word	0x00001031
    1460:	0000202d 	.word	0x0000202d
    1464:	00001049 	.word	0x00001049
    1468:	00001019 	.word	0x00001019
    146c:	000011c7 	.word	0x000011c7

00001470 <xQueueGenericCreate>:
{
    1470:	b570      	push	{r4, r5, r6, lr}
    1472:	0005      	movs	r5, r0
    1474:	000e      	movs	r6, r1
	if( uxQueueLength > ( UBaseType_t ) 0 )
    1476:	2800      	cmp	r0, #0
    1478:	d019      	beq.n	14ae <xQueueGenericCreate+0x3e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    147a:	2050      	movs	r0, #80	; 0x50
    147c:	4b0d      	ldr	r3, [pc, #52]	; (14b4 <xQueueGenericCreate+0x44>)
    147e:	4798      	blx	r3
    1480:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    1482:	d014      	beq.n	14ae <xQueueGenericCreate+0x3e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1484:	0030      	movs	r0, r6
    1486:	4368      	muls	r0, r5
    1488:	3001      	adds	r0, #1
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    148a:	4b0a      	ldr	r3, [pc, #40]	; (14b4 <xQueueGenericCreate+0x44>)
    148c:	4798      	blx	r3
    148e:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
    1490:	2800      	cmp	r0, #0
    1492:	d009      	beq.n	14a8 <xQueueGenericCreate+0x38>
				pxNewQueue->uxLength = uxQueueLength;
    1494:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    1496:	6426      	str	r6, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1498:	2101      	movs	r1, #1
    149a:	0020      	movs	r0, r4
    149c:	4b06      	ldr	r3, [pc, #24]	; (14b8 <xQueueGenericCreate+0x48>)
    149e:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
    14a0:	2300      	movs	r3, #0
    14a2:	64e3      	str	r3, [r4, #76]	; 0x4c
}
    14a4:	0020      	movs	r0, r4
    14a6:	bd70      	pop	{r4, r5, r6, pc}
				vPortFree( pxNewQueue );
    14a8:	0020      	movs	r0, r4
    14aa:	4b04      	ldr	r3, [pc, #16]	; (14bc <xQueueGenericCreate+0x4c>)
    14ac:	4798      	blx	r3
	configASSERT( xReturn );
    14ae:	b672      	cpsid	i
    14b0:	e7fe      	b.n	14b0 <xQueueGenericCreate+0x40>
    14b2:	46c0      	nop			; (mov r8, r8)
    14b4:	00001151 	.word	0x00001151
    14b8:	000013f5 	.word	0x000013f5
    14bc:	000011bd 	.word	0x000011bd

000014c0 <xQueueGenericSend>:
{
    14c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    14c2:	46ce      	mov	lr, r9
    14c4:	4647      	mov	r7, r8
    14c6:	b580      	push	{r7, lr}
    14c8:	b085      	sub	sp, #20
    14ca:	0004      	movs	r4, r0
    14cc:	000f      	movs	r7, r1
    14ce:	9201      	str	r2, [sp, #4]
    14d0:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    14d2:	2800      	cmp	r0, #0
    14d4:	d00c      	beq.n	14f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    14d6:	2900      	cmp	r1, #0
    14d8:	d00c      	beq.n	14f4 <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    14da:	2d02      	cmp	r5, #2
    14dc:	d00f      	beq.n	14fe <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    14de:	4b48      	ldr	r3, [pc, #288]	; (1600 <xQueueGenericSend+0x140>)
    14e0:	4798      	blx	r3
    14e2:	2800      	cmp	r0, #0
    14e4:	d110      	bne.n	1508 <xQueueGenericSend+0x48>
    14e6:	9b01      	ldr	r3, [sp, #4]
    14e8:	2b00      	cmp	r3, #0
    14ea:	d011      	beq.n	1510 <xQueueGenericSend+0x50>
    14ec:	b672      	cpsid	i
    14ee:	e7fe      	b.n	14ee <xQueueGenericSend+0x2e>
	configASSERT( pxQueue );
    14f0:	b672      	cpsid	i
    14f2:	e7fe      	b.n	14f2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    14f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
    14f6:	2b00      	cmp	r3, #0
    14f8:	d0ef      	beq.n	14da <xQueueGenericSend+0x1a>
    14fa:	b672      	cpsid	i
    14fc:	e7fe      	b.n	14fc <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    14fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1500:	2b01      	cmp	r3, #1
    1502:	d0ec      	beq.n	14de <xQueueGenericSend+0x1e>
    1504:	b672      	cpsid	i
    1506:	e7fe      	b.n	1506 <xQueueGenericSend+0x46>
    1508:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    150a:	4b3e      	ldr	r3, [pc, #248]	; (1604 <xQueueGenericSend+0x144>)
    150c:	4698      	mov	r8, r3
    150e:	e047      	b.n	15a0 <xQueueGenericSend+0xe0>
    1510:	2600      	movs	r6, #0
    1512:	e7fa      	b.n	150a <xQueueGenericSend+0x4a>
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1514:	002a      	movs	r2, r5
    1516:	0039      	movs	r1, r7
    1518:	0020      	movs	r0, r4
    151a:	4b3b      	ldr	r3, [pc, #236]	; (1608 <xQueueGenericSend+0x148>)
    151c:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    151e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1520:	2b00      	cmp	r3, #0
    1522:	d00f      	beq.n	1544 <xQueueGenericSend+0x84>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    1524:	0029      	movs	r1, r5
    1526:	0020      	movs	r0, r4
    1528:	4b38      	ldr	r3, [pc, #224]	; (160c <xQueueGenericSend+0x14c>)
    152a:	4798      	blx	r3
    152c:	2801      	cmp	r0, #1
    152e:	d101      	bne.n	1534 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    1530:	4b37      	ldr	r3, [pc, #220]	; (1610 <xQueueGenericSend+0x150>)
    1532:	4798      	blx	r3
				taskEXIT_CRITICAL();
    1534:	4b37      	ldr	r3, [pc, #220]	; (1614 <xQueueGenericSend+0x154>)
    1536:	4798      	blx	r3
				return pdPASS;
    1538:	2001      	movs	r0, #1
}
    153a:	b005      	add	sp, #20
    153c:	bc0c      	pop	{r2, r3}
    153e:	4690      	mov	r8, r2
    1540:	4699      	mov	r9, r3
    1542:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1544:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1546:	2b00      	cmp	r3, #0
    1548:	d0f4      	beq.n	1534 <xQueueGenericSend+0x74>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    154a:	0020      	movs	r0, r4
    154c:	3024      	adds	r0, #36	; 0x24
    154e:	4b32      	ldr	r3, [pc, #200]	; (1618 <xQueueGenericSend+0x158>)
    1550:	4798      	blx	r3
    1552:	2801      	cmp	r0, #1
    1554:	d1ee      	bne.n	1534 <xQueueGenericSend+0x74>
								queueYIELD_IF_USING_PREEMPTION();
    1556:	4b2e      	ldr	r3, [pc, #184]	; (1610 <xQueueGenericSend+0x150>)
    1558:	4798      	blx	r3
    155a:	e7eb      	b.n	1534 <xQueueGenericSend+0x74>
					taskEXIT_CRITICAL();
    155c:	4b2d      	ldr	r3, [pc, #180]	; (1614 <xQueueGenericSend+0x154>)
    155e:	4798      	blx	r3
					return errQUEUE_FULL;
    1560:	2000      	movs	r0, #0
    1562:	e7ea      	b.n	153a <xQueueGenericSend+0x7a>
		prvLockQueue( pxQueue );
    1564:	4b2b      	ldr	r3, [pc, #172]	; (1614 <xQueueGenericSend+0x154>)
    1566:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1568:	a901      	add	r1, sp, #4
    156a:	a802      	add	r0, sp, #8
    156c:	4b2b      	ldr	r3, [pc, #172]	; (161c <xQueueGenericSend+0x15c>)
    156e:	4798      	blx	r3
    1570:	2800      	cmp	r0, #0
    1572:	d13e      	bne.n	15f2 <xQueueGenericSend+0x132>
	taskENTER_CRITICAL();
    1574:	4b23      	ldr	r3, [pc, #140]	; (1604 <xQueueGenericSend+0x144>)
    1576:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1578:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    157a:	4699      	mov	r9, r3
    157c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    157e:	4b25      	ldr	r3, [pc, #148]	; (1614 <xQueueGenericSend+0x154>)
    1580:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1582:	45b1      	cmp	r9, r6
    1584:	d12f      	bne.n	15e6 <xQueueGenericSend+0x126>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1586:	0020      	movs	r0, r4
    1588:	3010      	adds	r0, #16
    158a:	9901      	ldr	r1, [sp, #4]
    158c:	4b24      	ldr	r3, [pc, #144]	; (1620 <xQueueGenericSend+0x160>)
    158e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    1590:	0020      	movs	r0, r4
    1592:	4b24      	ldr	r3, [pc, #144]	; (1624 <xQueueGenericSend+0x164>)
    1594:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    1596:	4b24      	ldr	r3, [pc, #144]	; (1628 <xQueueGenericSend+0x168>)
    1598:	4798      	blx	r3
    159a:	2800      	cmp	r0, #0
    159c:	d020      	beq.n	15e0 <xQueueGenericSend+0x120>
    159e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    15a0:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    15a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    15a4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    15a6:	4293      	cmp	r3, r2
    15a8:	d3b4      	bcc.n	1514 <xQueueGenericSend+0x54>
    15aa:	2d02      	cmp	r5, #2
    15ac:	d0b2      	beq.n	1514 <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
    15ae:	9b01      	ldr	r3, [sp, #4]
    15b0:	2b00      	cmp	r3, #0
    15b2:	d0d3      	beq.n	155c <xQueueGenericSend+0x9c>
				else if( xEntryTimeSet == pdFALSE )
    15b4:	2e00      	cmp	r6, #0
    15b6:	d102      	bne.n	15be <xQueueGenericSend+0xfe>
					vTaskSetTimeOutState( &xTimeOut );
    15b8:	a802      	add	r0, sp, #8
    15ba:	4b1c      	ldr	r3, [pc, #112]	; (162c <xQueueGenericSend+0x16c>)
    15bc:	4798      	blx	r3
		taskEXIT_CRITICAL();
    15be:	4b15      	ldr	r3, [pc, #84]	; (1614 <xQueueGenericSend+0x154>)
    15c0:	4798      	blx	r3
		vTaskSuspendAll();
    15c2:	4b1b      	ldr	r3, [pc, #108]	; (1630 <xQueueGenericSend+0x170>)
    15c4:	4798      	blx	r3
		prvLockQueue( pxQueue );
    15c6:	4b0f      	ldr	r3, [pc, #60]	; (1604 <xQueueGenericSend+0x144>)
    15c8:	4798      	blx	r3
    15ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
    15cc:	3301      	adds	r3, #1
    15ce:	d101      	bne.n	15d4 <xQueueGenericSend+0x114>
    15d0:	2300      	movs	r3, #0
    15d2:	6463      	str	r3, [r4, #68]	; 0x44
    15d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    15d6:	3301      	adds	r3, #1
    15d8:	d1c4      	bne.n	1564 <xQueueGenericSend+0xa4>
    15da:	2300      	movs	r3, #0
    15dc:	64a3      	str	r3, [r4, #72]	; 0x48
    15de:	e7c1      	b.n	1564 <xQueueGenericSend+0xa4>
					portYIELD_WITHIN_API();
    15e0:	4b0b      	ldr	r3, [pc, #44]	; (1610 <xQueueGenericSend+0x150>)
    15e2:	4798      	blx	r3
    15e4:	e7db      	b.n	159e <xQueueGenericSend+0xde>
				prvUnlockQueue( pxQueue );
    15e6:	0020      	movs	r0, r4
    15e8:	4b0e      	ldr	r3, [pc, #56]	; (1624 <xQueueGenericSend+0x164>)
    15ea:	4798      	blx	r3
				( void ) xTaskResumeAll();
    15ec:	4b0e      	ldr	r3, [pc, #56]	; (1628 <xQueueGenericSend+0x168>)
    15ee:	4798      	blx	r3
    15f0:	e7d5      	b.n	159e <xQueueGenericSend+0xde>
			prvUnlockQueue( pxQueue );
    15f2:	0020      	movs	r0, r4
    15f4:	4b0b      	ldr	r3, [pc, #44]	; (1624 <xQueueGenericSend+0x164>)
    15f6:	4798      	blx	r3
			( void ) xTaskResumeAll();
    15f8:	4b0b      	ldr	r3, [pc, #44]	; (1628 <xQueueGenericSend+0x168>)
    15fa:	4798      	blx	r3
			return errQUEUE_FULL;
    15fc:	2000      	movs	r0, #0
    15fe:	e79c      	b.n	153a <xQueueGenericSend+0x7a>
    1600:	0000215d 	.word	0x0000215d
    1604:	00001031 	.word	0x00001031
    1608:	00001251 	.word	0x00001251
    160c:	000012cd 	.word	0x000012cd
    1610:	00001019 	.word	0x00001019
    1614:	00001049 	.word	0x00001049
    1618:	0000202d 	.word	0x0000202d
    161c:	000020d5 	.word	0x000020d5
    1620:	00001f95 	.word	0x00001f95
    1624:	00001345 	.word	0x00001345
    1628:	00001cf9 	.word	0x00001cf9
    162c:	000020b5 	.word	0x000020b5
    1630:	00001ba5 	.word	0x00001ba5

00001634 <xQueueGenericSendFromISR>:
{
    1634:	b5f0      	push	{r4, r5, r6, r7, lr}
    1636:	b083      	sub	sp, #12
    1638:	0004      	movs	r4, r0
    163a:	000f      	movs	r7, r1
    163c:	0016      	movs	r6, r2
    163e:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    1640:	2800      	cmp	r0, #0
    1642:	d011      	beq.n	1668 <xQueueGenericSendFromISR+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1644:	2900      	cmp	r1, #0
    1646:	d011      	beq.n	166c <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1648:	2d02      	cmp	r5, #2
    164a:	d014      	beq.n	1676 <xQueueGenericSendFromISR+0x42>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    164c:	4b26      	ldr	r3, [pc, #152]	; (16e8 <xQueueGenericSendFromISR+0xb4>)
    164e:	4798      	blx	r3
    1650:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1652:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1654:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1656:	429a      	cmp	r2, r3
    1658:	d82e      	bhi.n	16b8 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
    165a:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    165c:	9801      	ldr	r0, [sp, #4]
    165e:	4b23      	ldr	r3, [pc, #140]	; (16ec <xQueueGenericSendFromISR+0xb8>)
    1660:	4798      	blx	r3
}
    1662:	0028      	movs	r0, r5
    1664:	b003      	add	sp, #12
    1666:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
    1668:	b672      	cpsid	i
    166a:	e7fe      	b.n	166a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    166c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    166e:	2b00      	cmp	r3, #0
    1670:	d0ea      	beq.n	1648 <xQueueGenericSendFromISR+0x14>
    1672:	b672      	cpsid	i
    1674:	e7fe      	b.n	1674 <xQueueGenericSendFromISR+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1676:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1678:	2b01      	cmp	r3, #1
    167a:	d019      	beq.n	16b0 <xQueueGenericSendFromISR+0x7c>
    167c:	b672      	cpsid	i
    167e:	e7fe      	b.n	167e <xQueueGenericSendFromISR+0x4a>
			xReturn = pdPASS;
    1680:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1682:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1684:	2b00      	cmp	r3, #0
    1686:	d0e9      	beq.n	165c <xQueueGenericSendFromISR+0x28>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1688:	0020      	movs	r0, r4
    168a:	3024      	adds	r0, #36	; 0x24
    168c:	4b18      	ldr	r3, [pc, #96]	; (16f0 <xQueueGenericSendFromISR+0xbc>)
    168e:	4798      	blx	r3
    1690:	2800      	cmp	r0, #0
    1692:	d0e3      	beq.n	165c <xQueueGenericSendFromISR+0x28>
								if( pxHigherPriorityTaskWoken != NULL )
    1694:	2e00      	cmp	r6, #0
    1696:	d009      	beq.n	16ac <xQueueGenericSendFromISR+0x78>
									*pxHigherPriorityTaskWoken = pdTRUE;
    1698:	2301      	movs	r3, #1
    169a:	6033      	str	r3, [r6, #0]
    169c:	e7de      	b.n	165c <xQueueGenericSendFromISR+0x28>
				++( pxQueue->xTxLock );
    169e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    16a0:	3301      	adds	r3, #1
    16a2:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
    16a4:	2501      	movs	r5, #1
    16a6:	e7d9      	b.n	165c <xQueueGenericSendFromISR+0x28>
    16a8:	2501      	movs	r5, #1
    16aa:	e7d7      	b.n	165c <xQueueGenericSendFromISR+0x28>
    16ac:	2501      	movs	r5, #1
    16ae:	e7d5      	b.n	165c <xQueueGenericSendFromISR+0x28>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    16b0:	4b0d      	ldr	r3, [pc, #52]	; (16e8 <xQueueGenericSendFromISR+0xb4>)
    16b2:	4798      	blx	r3
    16b4:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    16b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    16b8:	002a      	movs	r2, r5
    16ba:	0039      	movs	r1, r7
    16bc:	0020      	movs	r0, r4
    16be:	4b0d      	ldr	r3, [pc, #52]	; (16f4 <xQueueGenericSendFromISR+0xc0>)
    16c0:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
    16c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    16c4:	3301      	adds	r3, #1
    16c6:	d1ea      	bne.n	169e <xQueueGenericSendFromISR+0x6a>
					if( pxQueue->pxQueueSetContainer != NULL )
    16c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    16ca:	2b00      	cmp	r3, #0
    16cc:	d0d8      	beq.n	1680 <xQueueGenericSendFromISR+0x4c>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    16ce:	0029      	movs	r1, r5
    16d0:	0020      	movs	r0, r4
    16d2:	4b09      	ldr	r3, [pc, #36]	; (16f8 <xQueueGenericSendFromISR+0xc4>)
    16d4:	4798      	blx	r3
			xReturn = pdPASS;
    16d6:	2501      	movs	r5, #1
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    16d8:	2801      	cmp	r0, #1
    16da:	d1bf      	bne.n	165c <xQueueGenericSendFromISR+0x28>
							if( pxHigherPriorityTaskWoken != NULL )
    16dc:	2e00      	cmp	r6, #0
    16de:	d0e3      	beq.n	16a8 <xQueueGenericSendFromISR+0x74>
								*pxHigherPriorityTaskWoken = pdTRUE;
    16e0:	2301      	movs	r3, #1
    16e2:	6033      	str	r3, [r6, #0]
    16e4:	e7ba      	b.n	165c <xQueueGenericSendFromISR+0x28>
    16e6:	46c0      	nop			; (mov r8, r8)
    16e8:	00001069 	.word	0x00001069
    16ec:	00001073 	.word	0x00001073
    16f0:	0000202d 	.word	0x0000202d
    16f4:	00001251 	.word	0x00001251
    16f8:	000012cd 	.word	0x000012cd

000016fc <xQueueGenericReceive>:
{
    16fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16fe:	46c6      	mov	lr, r8
    1700:	b500      	push	{lr}
    1702:	b084      	sub	sp, #16
    1704:	0004      	movs	r4, r0
    1706:	000e      	movs	r6, r1
    1708:	9201      	str	r2, [sp, #4]
    170a:	001f      	movs	r7, r3
	configASSERT( pxQueue );
    170c:	2800      	cmp	r0, #0
    170e:	d00a      	beq.n	1726 <xQueueGenericReceive+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1710:	2900      	cmp	r1, #0
    1712:	d00a      	beq.n	172a <xQueueGenericReceive+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1714:	4b4d      	ldr	r3, [pc, #308]	; (184c <xQueueGenericReceive+0x150>)
    1716:	4798      	blx	r3
    1718:	2800      	cmp	r0, #0
    171a:	d10b      	bne.n	1734 <xQueueGenericReceive+0x38>
    171c:	9b01      	ldr	r3, [sp, #4]
    171e:	2b00      	cmp	r3, #0
    1720:	d00c      	beq.n	173c <xQueueGenericReceive+0x40>
    1722:	b672      	cpsid	i
    1724:	e7fe      	b.n	1724 <xQueueGenericReceive+0x28>
	configASSERT( pxQueue );
    1726:	b672      	cpsid	i
    1728:	e7fe      	b.n	1728 <xQueueGenericReceive+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    172a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    172c:	2b00      	cmp	r3, #0
    172e:	d0f1      	beq.n	1714 <xQueueGenericReceive+0x18>
    1730:	b672      	cpsid	i
    1732:	e7fe      	b.n	1732 <xQueueGenericReceive+0x36>
    1734:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    1736:	4b46      	ldr	r3, [pc, #280]	; (1850 <xQueueGenericReceive+0x154>)
    1738:	4698      	mov	r8, r3
    173a:	e042      	b.n	17c2 <xQueueGenericReceive+0xc6>
    173c:	2500      	movs	r5, #0
    173e:	e7fa      	b.n	1736 <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1740:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1742:	0031      	movs	r1, r6
    1744:	0020      	movs	r0, r4
    1746:	4b43      	ldr	r3, [pc, #268]	; (1854 <xQueueGenericReceive+0x158>)
    1748:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
    174a:	2f00      	cmp	r7, #0
    174c:	d11a      	bne.n	1784 <xQueueGenericReceive+0x88>
					--( pxQueue->uxMessagesWaiting );
    174e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1750:	3b01      	subs	r3, #1
    1752:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1754:	6823      	ldr	r3, [r4, #0]
    1756:	2b00      	cmp	r3, #0
    1758:	d102      	bne.n	1760 <xQueueGenericReceive+0x64>
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    175a:	4b3f      	ldr	r3, [pc, #252]	; (1858 <xQueueGenericReceive+0x15c>)
    175c:	4798      	blx	r3
    175e:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1760:	6923      	ldr	r3, [r4, #16]
    1762:	2b00      	cmp	r3, #0
    1764:	d007      	beq.n	1776 <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1766:	0020      	movs	r0, r4
    1768:	3010      	adds	r0, #16
    176a:	4b3c      	ldr	r3, [pc, #240]	; (185c <xQueueGenericReceive+0x160>)
    176c:	4798      	blx	r3
    176e:	2801      	cmp	r0, #1
    1770:	d101      	bne.n	1776 <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
    1772:	4b3b      	ldr	r3, [pc, #236]	; (1860 <xQueueGenericReceive+0x164>)
    1774:	4798      	blx	r3
				taskEXIT_CRITICAL();
    1776:	4b3b      	ldr	r3, [pc, #236]	; (1864 <xQueueGenericReceive+0x168>)
    1778:	4798      	blx	r3
				return pdPASS;
    177a:	2001      	movs	r0, #1
}
    177c:	b004      	add	sp, #16
    177e:	bc04      	pop	{r2}
    1780:	4690      	mov	r8, r2
    1782:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1784:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1786:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1788:	2b00      	cmp	r3, #0
    178a:	d0f4      	beq.n	1776 <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    178c:	0020      	movs	r0, r4
    178e:	3024      	adds	r0, #36	; 0x24
    1790:	4b32      	ldr	r3, [pc, #200]	; (185c <xQueueGenericReceive+0x160>)
    1792:	4798      	blx	r3
    1794:	2800      	cmp	r0, #0
    1796:	d0ee      	beq.n	1776 <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
    1798:	4b31      	ldr	r3, [pc, #196]	; (1860 <xQueueGenericReceive+0x164>)
    179a:	4798      	blx	r3
    179c:	e7eb      	b.n	1776 <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
    179e:	4b31      	ldr	r3, [pc, #196]	; (1864 <xQueueGenericReceive+0x168>)
    17a0:	4798      	blx	r3
					return errQUEUE_EMPTY;
    17a2:	2000      	movs	r0, #0
    17a4:	e7ea      	b.n	177c <xQueueGenericReceive+0x80>
						taskENTER_CRITICAL();
    17a6:	4b2a      	ldr	r3, [pc, #168]	; (1850 <xQueueGenericReceive+0x154>)
    17a8:	4798      	blx	r3
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    17aa:	6860      	ldr	r0, [r4, #4]
    17ac:	4b2e      	ldr	r3, [pc, #184]	; (1868 <xQueueGenericReceive+0x16c>)
    17ae:	4798      	blx	r3
						taskEXIT_CRITICAL();
    17b0:	4b2c      	ldr	r3, [pc, #176]	; (1864 <xQueueGenericReceive+0x168>)
    17b2:	4798      	blx	r3
    17b4:	e033      	b.n	181e <xQueueGenericReceive+0x122>
				prvUnlockQueue( pxQueue );
    17b6:	0020      	movs	r0, r4
    17b8:	4b2c      	ldr	r3, [pc, #176]	; (186c <xQueueGenericReceive+0x170>)
    17ba:	4798      	blx	r3
				( void ) xTaskResumeAll();
    17bc:	4b2c      	ldr	r3, [pc, #176]	; (1870 <xQueueGenericReceive+0x174>)
    17be:	4798      	blx	r3
    17c0:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    17c2:	47c0      	blx	r8
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    17c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    17c6:	2b00      	cmp	r3, #0
    17c8:	d1ba      	bne.n	1740 <xQueueGenericReceive+0x44>
				if( xTicksToWait == ( TickType_t ) 0 )
    17ca:	9b01      	ldr	r3, [sp, #4]
    17cc:	2b00      	cmp	r3, #0
    17ce:	d0e6      	beq.n	179e <xQueueGenericReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
    17d0:	2d00      	cmp	r5, #0
    17d2:	d102      	bne.n	17da <xQueueGenericReceive+0xde>
					vTaskSetTimeOutState( &xTimeOut );
    17d4:	a802      	add	r0, sp, #8
    17d6:	4b27      	ldr	r3, [pc, #156]	; (1874 <xQueueGenericReceive+0x178>)
    17d8:	4798      	blx	r3
		taskEXIT_CRITICAL();
    17da:	4b22      	ldr	r3, [pc, #136]	; (1864 <xQueueGenericReceive+0x168>)
    17dc:	4798      	blx	r3
		vTaskSuspendAll();
    17de:	4b26      	ldr	r3, [pc, #152]	; (1878 <xQueueGenericReceive+0x17c>)
    17e0:	4798      	blx	r3
		prvLockQueue( pxQueue );
    17e2:	4b1b      	ldr	r3, [pc, #108]	; (1850 <xQueueGenericReceive+0x154>)
    17e4:	4798      	blx	r3
    17e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    17e8:	3301      	adds	r3, #1
    17ea:	d101      	bne.n	17f0 <xQueueGenericReceive+0xf4>
    17ec:	2300      	movs	r3, #0
    17ee:	6463      	str	r3, [r4, #68]	; 0x44
    17f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    17f2:	3301      	adds	r3, #1
    17f4:	d101      	bne.n	17fa <xQueueGenericReceive+0xfe>
    17f6:	2300      	movs	r3, #0
    17f8:	64a3      	str	r3, [r4, #72]	; 0x48
    17fa:	4b1a      	ldr	r3, [pc, #104]	; (1864 <xQueueGenericReceive+0x168>)
    17fc:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    17fe:	a901      	add	r1, sp, #4
    1800:	a802      	add	r0, sp, #8
    1802:	4b1e      	ldr	r3, [pc, #120]	; (187c <xQueueGenericReceive+0x180>)
    1804:	4798      	blx	r3
    1806:	2800      	cmp	r0, #0
    1808:	d118      	bne.n	183c <xQueueGenericReceive+0x140>
	taskENTER_CRITICAL();
    180a:	4b11      	ldr	r3, [pc, #68]	; (1850 <xQueueGenericReceive+0x154>)
    180c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    180e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    1810:	4b14      	ldr	r3, [pc, #80]	; (1864 <xQueueGenericReceive+0x168>)
    1812:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1814:	2d00      	cmp	r5, #0
    1816:	d1ce      	bne.n	17b6 <xQueueGenericReceive+0xba>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1818:	6823      	ldr	r3, [r4, #0]
    181a:	2b00      	cmp	r3, #0
    181c:	d0c3      	beq.n	17a6 <xQueueGenericReceive+0xaa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    181e:	0020      	movs	r0, r4
    1820:	3024      	adds	r0, #36	; 0x24
    1822:	9901      	ldr	r1, [sp, #4]
    1824:	4b16      	ldr	r3, [pc, #88]	; (1880 <xQueueGenericReceive+0x184>)
    1826:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    1828:	0020      	movs	r0, r4
    182a:	4b10      	ldr	r3, [pc, #64]	; (186c <xQueueGenericReceive+0x170>)
    182c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    182e:	4b10      	ldr	r3, [pc, #64]	; (1870 <xQueueGenericReceive+0x174>)
    1830:	4798      	blx	r3
    1832:	2800      	cmp	r0, #0
    1834:	d1c4      	bne.n	17c0 <xQueueGenericReceive+0xc4>
					portYIELD_WITHIN_API();
    1836:	4b0a      	ldr	r3, [pc, #40]	; (1860 <xQueueGenericReceive+0x164>)
    1838:	4798      	blx	r3
    183a:	e7c1      	b.n	17c0 <xQueueGenericReceive+0xc4>
			prvUnlockQueue( pxQueue );
    183c:	0020      	movs	r0, r4
    183e:	4b0b      	ldr	r3, [pc, #44]	; (186c <xQueueGenericReceive+0x170>)
    1840:	4798      	blx	r3
			( void ) xTaskResumeAll();
    1842:	4b0b      	ldr	r3, [pc, #44]	; (1870 <xQueueGenericReceive+0x174>)
    1844:	4798      	blx	r3
			return errQUEUE_EMPTY;
    1846:	2000      	movs	r0, #0
    1848:	e798      	b.n	177c <xQueueGenericReceive+0x80>
    184a:	46c0      	nop			; (mov r8, r8)
    184c:	0000215d 	.word	0x0000215d
    1850:	00001031 	.word	0x00001031
    1854:	0000131d 	.word	0x0000131d
    1858:	00002151 	.word	0x00002151
    185c:	0000202d 	.word	0x0000202d
    1860:	00001019 	.word	0x00001019
    1864:	00001049 	.word	0x00001049
    1868:	0000217d 	.word	0x0000217d
    186c:	00001345 	.word	0x00001345
    1870:	00001cf9 	.word	0x00001cf9
    1874:	000020b5 	.word	0x000020b5
    1878:	00001ba5 	.word	0x00001ba5
    187c:	000020d5 	.word	0x000020d5
    1880:	00001f95 	.word	0x00001f95

00001884 <vQueueWaitForMessageRestricted>:
	{
    1884:	b570      	push	{r4, r5, r6, lr}
    1886:	0004      	movs	r4, r0
    1888:	000d      	movs	r5, r1
		prvLockQueue( pxQueue );
    188a:	4b0e      	ldr	r3, [pc, #56]	; (18c4 <vQueueWaitForMessageRestricted+0x40>)
    188c:	4798      	blx	r3
    188e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1890:	3301      	adds	r3, #1
    1892:	d00b      	beq.n	18ac <vQueueWaitForMessageRestricted+0x28>
    1894:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1896:	3301      	adds	r3, #1
    1898:	d00b      	beq.n	18b2 <vQueueWaitForMessageRestricted+0x2e>
    189a:	4b0b      	ldr	r3, [pc, #44]	; (18c8 <vQueueWaitForMessageRestricted+0x44>)
    189c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    189e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    18a0:	2b00      	cmp	r3, #0
    18a2:	d009      	beq.n	18b8 <vQueueWaitForMessageRestricted+0x34>
		prvUnlockQueue( pxQueue );
    18a4:	0020      	movs	r0, r4
    18a6:	4b09      	ldr	r3, [pc, #36]	; (18cc <vQueueWaitForMessageRestricted+0x48>)
    18a8:	4798      	blx	r3
	}
    18aa:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
    18ac:	2300      	movs	r3, #0
    18ae:	6463      	str	r3, [r4, #68]	; 0x44
    18b0:	e7f0      	b.n	1894 <vQueueWaitForMessageRestricted+0x10>
    18b2:	2300      	movs	r3, #0
    18b4:	64a3      	str	r3, [r4, #72]	; 0x48
    18b6:	e7f0      	b.n	189a <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    18b8:	0020      	movs	r0, r4
    18ba:	3024      	adds	r0, #36	; 0x24
    18bc:	0029      	movs	r1, r5
    18be:	4b04      	ldr	r3, [pc, #16]	; (18d0 <vQueueWaitForMessageRestricted+0x4c>)
    18c0:	4798      	blx	r3
    18c2:	e7ef      	b.n	18a4 <vQueueWaitForMessageRestricted+0x20>
    18c4:	00001031 	.word	0x00001031
    18c8:	00001049 	.word	0x00001049
    18cc:	00001345 	.word	0x00001345
    18d0:	00001fed 	.word	0x00001fed

000018d4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    18d4:	4b08      	ldr	r3, [pc, #32]	; (18f8 <prvResetNextTaskUnblockTime+0x24>)
    18d6:	681b      	ldr	r3, [r3, #0]
    18d8:	681b      	ldr	r3, [r3, #0]
    18da:	2b00      	cmp	r3, #0
    18dc:	d007      	beq.n	18ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    18de:	4b06      	ldr	r3, [pc, #24]	; (18f8 <prvResetNextTaskUnblockTime+0x24>)
    18e0:	681b      	ldr	r3, [r3, #0]
    18e2:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    18e4:	68db      	ldr	r3, [r3, #12]
    18e6:	685a      	ldr	r2, [r3, #4]
    18e8:	4b04      	ldr	r3, [pc, #16]	; (18fc <prvResetNextTaskUnblockTime+0x28>)
    18ea:	601a      	str	r2, [r3, #0]
	}
}
    18ec:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    18ee:	2201      	movs	r2, #1
    18f0:	4252      	negs	r2, r2
    18f2:	4b02      	ldr	r3, [pc, #8]	; (18fc <prvResetNextTaskUnblockTime+0x28>)
    18f4:	601a      	str	r2, [r3, #0]
    18f6:	e7f9      	b.n	18ec <prvResetNextTaskUnblockTime+0x18>
    18f8:	20003b74 	.word	0x20003b74
    18fc:	20000024 	.word	0x20000024

00001900 <prvAddCurrentTaskToDelayedList>:
{
    1900:	b510      	push	{r4, lr}
    1902:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    1904:	4b0e      	ldr	r3, [pc, #56]	; (1940 <prvAddCurrentTaskToDelayedList+0x40>)
    1906:	681b      	ldr	r3, [r3, #0]
    1908:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
    190a:	4b0e      	ldr	r3, [pc, #56]	; (1944 <prvAddCurrentTaskToDelayedList+0x44>)
    190c:	681b      	ldr	r3, [r3, #0]
    190e:	4298      	cmp	r0, r3
    1910:	d30d      	bcc.n	192e <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1912:	4b0d      	ldr	r3, [pc, #52]	; (1948 <prvAddCurrentTaskToDelayedList+0x48>)
    1914:	6818      	ldr	r0, [r3, #0]
    1916:	4b0a      	ldr	r3, [pc, #40]	; (1940 <prvAddCurrentTaskToDelayedList+0x40>)
    1918:	6819      	ldr	r1, [r3, #0]
    191a:	3104      	adds	r1, #4
    191c:	4b0b      	ldr	r3, [pc, #44]	; (194c <prvAddCurrentTaskToDelayedList+0x4c>)
    191e:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
    1920:	4b0b      	ldr	r3, [pc, #44]	; (1950 <prvAddCurrentTaskToDelayedList+0x50>)
    1922:	681b      	ldr	r3, [r3, #0]
    1924:	429c      	cmp	r4, r3
    1926:	d209      	bcs.n	193c <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
    1928:	4b09      	ldr	r3, [pc, #36]	; (1950 <prvAddCurrentTaskToDelayedList+0x50>)
    192a:	601c      	str	r4, [r3, #0]
}
    192c:	e006      	b.n	193c <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    192e:	4b09      	ldr	r3, [pc, #36]	; (1954 <prvAddCurrentTaskToDelayedList+0x54>)
    1930:	6818      	ldr	r0, [r3, #0]
    1932:	4b03      	ldr	r3, [pc, #12]	; (1940 <prvAddCurrentTaskToDelayedList+0x40>)
    1934:	6819      	ldr	r1, [r3, #0]
    1936:	3104      	adds	r1, #4
    1938:	4b04      	ldr	r3, [pc, #16]	; (194c <prvAddCurrentTaskToDelayedList+0x4c>)
    193a:	4798      	blx	r3
}
    193c:	bd10      	pop	{r4, pc}
    193e:	46c0      	nop			; (mov r8, r8)
    1940:	20003b70 	.word	0x20003b70
    1944:	20003c64 	.word	0x20003c64
    1948:	20003b74 	.word	0x20003b74
    194c:	000011fb 	.word	0x000011fb
    1950:	20000024 	.word	0x20000024
    1954:	20003b78 	.word	0x20003b78

00001958 <xTaskGenericCreate>:
{
    1958:	b5f0      	push	{r4, r5, r6, r7, lr}
    195a:	46d6      	mov	lr, sl
    195c:	b500      	push	{lr}
    195e:	b082      	sub	sp, #8
    1960:	0005      	movs	r5, r0
    1962:	000f      	movs	r7, r1
    1964:	0016      	movs	r6, r2
    1966:	9301      	str	r3, [sp, #4]
    1968:	9b08      	ldr	r3, [sp, #32]
    196a:	469a      	mov	sl, r3
	configASSERT( pxTaskCode );
    196c:	2800      	cmp	r0, #0
    196e:	d003      	beq.n	1978 <xTaskGenericCreate+0x20>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    1970:	2b04      	cmp	r3, #4
    1972:	d903      	bls.n	197c <xTaskGenericCreate+0x24>
    1974:	b672      	cpsid	i
    1976:	e7fe      	b.n	1976 <xTaskGenericCreate+0x1e>
	configASSERT( pxTaskCode );
    1978:	b672      	cpsid	i
    197a:	e7fe      	b.n	197a <xTaskGenericCreate+0x22>
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    197c:	2040      	movs	r0, #64	; 0x40
    197e:	4b5a      	ldr	r3, [pc, #360]	; (1ae8 <xTaskGenericCreate+0x190>)
    1980:	4798      	blx	r3
    1982:	1e04      	subs	r4, r0, #0
	if( pxNewTCB != NULL )
    1984:	d00d      	beq.n	19a2 <xTaskGenericCreate+0x4a>
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1988:	2b00      	cmp	r3, #0
    198a:	d000      	beq.n	198e <xTaskGenericCreate+0x36>
    198c:	e094      	b.n	1ab8 <xTaskGenericCreate+0x160>
    198e:	00b0      	lsls	r0, r6, #2
    1990:	4b55      	ldr	r3, [pc, #340]	; (1ae8 <xTaskGenericCreate+0x190>)
    1992:	4798      	blx	r3
    1994:	6320      	str	r0, [r4, #48]	; 0x30
		if( pxNewTCB->pxStack == NULL )
    1996:	2800      	cmp	r0, #0
    1998:	d000      	beq.n	199c <xTaskGenericCreate+0x44>
    199a:	e08f      	b.n	1abc <xTaskGenericCreate+0x164>
			vPortFree( pxNewTCB );
    199c:	0020      	movs	r0, r4
    199e:	4b53      	ldr	r3, [pc, #332]	; (1aec <xTaskGenericCreate+0x194>)
    19a0:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    19a2:	2001      	movs	r0, #1
    19a4:	4240      	negs	r0, r0
    19a6:	e077      	b.n	1a98 <xTaskGenericCreate+0x140>
    19a8:	3701      	adds	r7, #1
    19aa:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    19ac:	428b      	cmp	r3, r1
    19ae:	d004      	beq.n	19ba <xTaskGenericCreate+0x62>
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    19b0:	7838      	ldrb	r0, [r7, #0]
    19b2:	7018      	strb	r0, [r3, #0]
		if( pcName[ x ] == 0x00 )
    19b4:	7838      	ldrb	r0, [r7, #0]
    19b6:	2800      	cmp	r0, #0
    19b8:	d1f6      	bne.n	19a8 <xTaskGenericCreate+0x50>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    19ba:	2200      	movs	r2, #0
    19bc:	233b      	movs	r3, #59	; 0x3b
    19be:	54e2      	strb	r2, [r4, r3]
	pxTCB->uxPriority = uxPriority;
    19c0:	4653      	mov	r3, sl
    19c2:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
    19c4:	63e3      	str	r3, [r4, #60]	; 0x3c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    19c6:	1d23      	adds	r3, r4, #4
    19c8:	9300      	str	r3, [sp, #0]
    19ca:	0018      	movs	r0, r3
    19cc:	4f48      	ldr	r7, [pc, #288]	; (1af0 <xTaskGenericCreate+0x198>)
    19ce:	47b8      	blx	r7
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    19d0:	0020      	movs	r0, r4
    19d2:	3018      	adds	r0, #24
    19d4:	47b8      	blx	r7
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    19d6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    19d8:	2305      	movs	r3, #5
    19da:	4652      	mov	r2, sl
    19dc:	1a9b      	subs	r3, r3, r2
    19de:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    19e0:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    19e2:	9a01      	ldr	r2, [sp, #4]
    19e4:	0029      	movs	r1, r5
    19e6:	0030      	movs	r0, r6
    19e8:	4b42      	ldr	r3, [pc, #264]	; (1af4 <xTaskGenericCreate+0x19c>)
    19ea:	4798      	blx	r3
    19ec:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
    19ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    19f0:	2b00      	cmp	r3, #0
    19f2:	d000      	beq.n	19f6 <xTaskGenericCreate+0x9e>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    19f4:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
    19f6:	4b40      	ldr	r3, [pc, #256]	; (1af8 <xTaskGenericCreate+0x1a0>)
    19f8:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
    19fa:	4a40      	ldr	r2, [pc, #256]	; (1afc <xTaskGenericCreate+0x1a4>)
    19fc:	6813      	ldr	r3, [r2, #0]
    19fe:	3301      	adds	r3, #1
    1a00:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
    1a02:	4b3f      	ldr	r3, [pc, #252]	; (1b00 <xTaskGenericCreate+0x1a8>)
    1a04:	681b      	ldr	r3, [r3, #0]
    1a06:	2b00      	cmp	r3, #0
    1a08:	d14a      	bne.n	1aa0 <xTaskGenericCreate+0x148>
				pxCurrentTCB =  pxNewTCB;
    1a0a:	4b3d      	ldr	r3, [pc, #244]	; (1b00 <xTaskGenericCreate+0x1a8>)
    1a0c:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    1a0e:	6813      	ldr	r3, [r2, #0]
    1a10:	2b01      	cmp	r3, #1
    1a12:	d11f      	bne.n	1a54 <xTaskGenericCreate+0xfc>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    1a14:	4e3b      	ldr	r6, [pc, #236]	; (1b04 <xTaskGenericCreate+0x1ac>)
    1a16:	0030      	movs	r0, r6
    1a18:	4d3b      	ldr	r5, [pc, #236]	; (1b08 <xTaskGenericCreate+0x1b0>)
    1a1a:	47a8      	blx	r5
    1a1c:	0030      	movs	r0, r6
    1a1e:	3014      	adds	r0, #20
    1a20:	47a8      	blx	r5
    1a22:	0030      	movs	r0, r6
    1a24:	3028      	adds	r0, #40	; 0x28
    1a26:	47a8      	blx	r5
    1a28:	0030      	movs	r0, r6
    1a2a:	303c      	adds	r0, #60	; 0x3c
    1a2c:	47a8      	blx	r5
    1a2e:	0030      	movs	r0, r6
    1a30:	3050      	adds	r0, #80	; 0x50
    1a32:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
    1a34:	4f35      	ldr	r7, [pc, #212]	; (1b0c <xTaskGenericCreate+0x1b4>)
    1a36:	0038      	movs	r0, r7
    1a38:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
    1a3a:	4e35      	ldr	r6, [pc, #212]	; (1b10 <xTaskGenericCreate+0x1b8>)
    1a3c:	0030      	movs	r0, r6
    1a3e:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
    1a40:	4834      	ldr	r0, [pc, #208]	; (1b14 <xTaskGenericCreate+0x1bc>)
    1a42:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
    1a44:	4834      	ldr	r0, [pc, #208]	; (1b18 <xTaskGenericCreate+0x1c0>)
    1a46:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
    1a48:	4834      	ldr	r0, [pc, #208]	; (1b1c <xTaskGenericCreate+0x1c4>)
    1a4a:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
    1a4c:	4b34      	ldr	r3, [pc, #208]	; (1b20 <xTaskGenericCreate+0x1c8>)
    1a4e:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1a50:	4b34      	ldr	r3, [pc, #208]	; (1b24 <xTaskGenericCreate+0x1cc>)
    1a52:	601e      	str	r6, [r3, #0]
			uxTaskNumber++;
    1a54:	4a34      	ldr	r2, [pc, #208]	; (1b28 <xTaskGenericCreate+0x1d0>)
    1a56:	6813      	ldr	r3, [r2, #0]
    1a58:	3301      	adds	r3, #1
    1a5a:	6013      	str	r3, [r2, #0]
			prvAddTaskToReadyList( pxNewTCB );
    1a5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1a5e:	4a33      	ldr	r2, [pc, #204]	; (1b2c <xTaskGenericCreate+0x1d4>)
    1a60:	6812      	ldr	r2, [r2, #0]
    1a62:	4293      	cmp	r3, r2
    1a64:	d901      	bls.n	1a6a <xTaskGenericCreate+0x112>
    1a66:	4a31      	ldr	r2, [pc, #196]	; (1b2c <xTaskGenericCreate+0x1d4>)
    1a68:	6013      	str	r3, [r2, #0]
    1a6a:	0098      	lsls	r0, r3, #2
    1a6c:	18c0      	adds	r0, r0, r3
    1a6e:	0080      	lsls	r0, r0, #2
    1a70:	4b24      	ldr	r3, [pc, #144]	; (1b04 <xTaskGenericCreate+0x1ac>)
    1a72:	1818      	adds	r0, r3, r0
    1a74:	9900      	ldr	r1, [sp, #0]
    1a76:	4b2e      	ldr	r3, [pc, #184]	; (1b30 <xTaskGenericCreate+0x1d8>)
    1a78:	4798      	blx	r3
		taskEXIT_CRITICAL();
    1a7a:	4b2e      	ldr	r3, [pc, #184]	; (1b34 <xTaskGenericCreate+0x1dc>)
    1a7c:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
    1a7e:	4b2e      	ldr	r3, [pc, #184]	; (1b38 <xTaskGenericCreate+0x1e0>)
    1a80:	681b      	ldr	r3, [r3, #0]
    1a82:	2001      	movs	r0, #1
    1a84:	2b00      	cmp	r3, #0
    1a86:	d007      	beq.n	1a98 <xTaskGenericCreate+0x140>
			if( pxCurrentTCB->uxPriority < uxPriority )
    1a88:	4b1d      	ldr	r3, [pc, #116]	; (1b00 <xTaskGenericCreate+0x1a8>)
    1a8a:	681b      	ldr	r3, [r3, #0]
    1a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a8e:	459a      	cmp	sl, r3
    1a90:	d902      	bls.n	1a98 <xTaskGenericCreate+0x140>
				taskYIELD_IF_USING_PREEMPTION();
    1a92:	4b2a      	ldr	r3, [pc, #168]	; (1b3c <xTaskGenericCreate+0x1e4>)
    1a94:	4798      	blx	r3
    1a96:	2001      	movs	r0, #1
}
    1a98:	b002      	add	sp, #8
    1a9a:	bc04      	pop	{r2}
    1a9c:	4692      	mov	sl, r2
    1a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( xSchedulerRunning == pdFALSE )
    1aa0:	4b25      	ldr	r3, [pc, #148]	; (1b38 <xTaskGenericCreate+0x1e0>)
    1aa2:	681b      	ldr	r3, [r3, #0]
    1aa4:	2b00      	cmp	r3, #0
    1aa6:	d1d5      	bne.n	1a54 <xTaskGenericCreate+0xfc>
					if( pxCurrentTCB->uxPriority <= uxPriority )
    1aa8:	4b15      	ldr	r3, [pc, #84]	; (1b00 <xTaskGenericCreate+0x1a8>)
    1aaa:	681b      	ldr	r3, [r3, #0]
    1aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1aae:	459a      	cmp	sl, r3
    1ab0:	d3d0      	bcc.n	1a54 <xTaskGenericCreate+0xfc>
						pxCurrentTCB = pxNewTCB;
    1ab2:	4b13      	ldr	r3, [pc, #76]	; (1b00 <xTaskGenericCreate+0x1a8>)
    1ab4:	601c      	str	r4, [r3, #0]
    1ab6:	e7cd      	b.n	1a54 <xTaskGenericCreate+0xfc>
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1aba:	6303      	str	r3, [r0, #48]	; 0x30
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    1abc:	4b20      	ldr	r3, [pc, #128]	; (1b40 <xTaskGenericCreate+0x1e8>)
    1abe:	18f3      	adds	r3, r6, r3
    1ac0:	009b      	lsls	r3, r3, #2
    1ac2:	6b22      	ldr	r2, [r4, #48]	; 0x30
    1ac4:	4694      	mov	ip, r2
    1ac6:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    1ac8:	2207      	movs	r2, #7
    1aca:	4393      	bics	r3, r2
    1acc:	001e      	movs	r6, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    1ace:	783a      	ldrb	r2, [r7, #0]
    1ad0:	2334      	movs	r3, #52	; 0x34
    1ad2:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
    1ad4:	783b      	ldrb	r3, [r7, #0]
    1ad6:	2b00      	cmp	r3, #0
    1ad8:	d100      	bne.n	1adc <xTaskGenericCreate+0x184>
    1ada:	e76e      	b.n	19ba <xTaskGenericCreate+0x62>
    1adc:	3701      	adds	r7, #1
    1ade:	0023      	movs	r3, r4
    1ae0:	3335      	adds	r3, #53	; 0x35
    1ae2:	0021      	movs	r1, r4
    1ae4:	313c      	adds	r1, #60	; 0x3c
    1ae6:	e763      	b.n	19b0 <xTaskGenericCreate+0x58>
    1ae8:	00001151 	.word	0x00001151
    1aec:	000011bd 	.word	0x000011bd
    1af0:	000011dd 	.word	0x000011dd
    1af4:	00000ff5 	.word	0x00000ff5
    1af8:	00001031 	.word	0x00001031
    1afc:	20003be0 	.word	0x20003be0
    1b00:	20003b70 	.word	0x20003b70
    1b04:	20003b7c 	.word	0x20003b7c
    1b08:	000011c7 	.word	0x000011c7
    1b0c:	20003bf8 	.word	0x20003bf8
    1b10:	20003c0c 	.word	0x20003c0c
    1b14:	20003c24 	.word	0x20003c24
    1b18:	20003c50 	.word	0x20003c50
    1b1c:	20003c3c 	.word	0x20003c3c
    1b20:	20003b74 	.word	0x20003b74
    1b24:	20003b78 	.word	0x20003b78
    1b28:	20003bec 	.word	0x20003bec
    1b2c:	20003bf4 	.word	0x20003bf4
    1b30:	000011e3 	.word	0x000011e3
    1b34:	00001049 	.word	0x00001049
    1b38:	20003c38 	.word	0x20003c38
    1b3c:	00001019 	.word	0x00001019
    1b40:	3fffffff 	.word	0x3fffffff

00001b44 <vTaskStartScheduler>:
{
    1b44:	b510      	push	{r4, lr}
    1b46:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    1b48:	2300      	movs	r3, #0
    1b4a:	9303      	str	r3, [sp, #12]
    1b4c:	9302      	str	r3, [sp, #8]
    1b4e:	9301      	str	r3, [sp, #4]
    1b50:	9300      	str	r3, [sp, #0]
    1b52:	2264      	movs	r2, #100	; 0x64
    1b54:	490c      	ldr	r1, [pc, #48]	; (1b88 <vTaskStartScheduler+0x44>)
    1b56:	480d      	ldr	r0, [pc, #52]	; (1b8c <vTaskStartScheduler+0x48>)
    1b58:	4c0d      	ldr	r4, [pc, #52]	; (1b90 <vTaskStartScheduler+0x4c>)
    1b5a:	47a0      	blx	r4
		if( xReturn == pdPASS )
    1b5c:	2801      	cmp	r0, #1
    1b5e:	d003      	beq.n	1b68 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
    1b60:	2800      	cmp	r0, #0
    1b62:	d10e      	bne.n	1b82 <vTaskStartScheduler+0x3e>
    1b64:	b672      	cpsid	i
    1b66:	e7fe      	b.n	1b66 <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
    1b68:	4b0a      	ldr	r3, [pc, #40]	; (1b94 <vTaskStartScheduler+0x50>)
    1b6a:	4798      	blx	r3
	if( xReturn == pdPASS )
    1b6c:	2801      	cmp	r0, #1
    1b6e:	d1f7      	bne.n	1b60 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
    1b70:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
    1b72:	2201      	movs	r2, #1
    1b74:	4b08      	ldr	r3, [pc, #32]	; (1b98 <vTaskStartScheduler+0x54>)
    1b76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    1b78:	2200      	movs	r2, #0
    1b7a:	4b08      	ldr	r3, [pc, #32]	; (1b9c <vTaskStartScheduler+0x58>)
    1b7c:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    1b7e:	4b08      	ldr	r3, [pc, #32]	; (1ba0 <vTaskStartScheduler+0x5c>)
    1b80:	4798      	blx	r3
}
    1b82:	b004      	add	sp, #16
    1b84:	bd10      	pop	{r4, pc}
    1b86:	46c0      	nop			; (mov r8, r8)
    1b88:	00006878 	.word	0x00006878
    1b8c:	00001e55 	.word	0x00001e55
    1b90:	00001959 	.word	0x00001959
    1b94:	00002301 	.word	0x00002301
    1b98:	20003c38 	.word	0x20003c38
    1b9c:	20003c64 	.word	0x20003c64
    1ba0:	00001111 	.word	0x00001111

00001ba4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    1ba4:	4a02      	ldr	r2, [pc, #8]	; (1bb0 <vTaskSuspendAll+0xc>)
    1ba6:	6813      	ldr	r3, [r2, #0]
    1ba8:	3301      	adds	r3, #1
    1baa:	6013      	str	r3, [r2, #0]
}
    1bac:	4770      	bx	lr
    1bae:	46c0      	nop			; (mov r8, r8)
    1bb0:	20003be8 	.word	0x20003be8

00001bb4 <xTaskGetTickCount>:
{
    1bb4:	b510      	push	{r4, lr}
	taskENTER_CRITICAL();
    1bb6:	4b04      	ldr	r3, [pc, #16]	; (1bc8 <xTaskGetTickCount+0x14>)
    1bb8:	4798      	blx	r3
		xTicks = xTickCount;
    1bba:	4b04      	ldr	r3, [pc, #16]	; (1bcc <xTaskGetTickCount+0x18>)
    1bbc:	681c      	ldr	r4, [r3, #0]
	taskEXIT_CRITICAL();
    1bbe:	4b04      	ldr	r3, [pc, #16]	; (1bd0 <xTaskGetTickCount+0x1c>)
    1bc0:	4798      	blx	r3
}
    1bc2:	0020      	movs	r0, r4
    1bc4:	bd10      	pop	{r4, pc}
    1bc6:	46c0      	nop			; (mov r8, r8)
    1bc8:	00001031 	.word	0x00001031
    1bcc:	20003c64 	.word	0x20003c64
    1bd0:	00001049 	.word	0x00001049

00001bd4 <xTaskIncrementTick>:
{
    1bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bd6:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1bd8:	4b39      	ldr	r3, [pc, #228]	; (1cc0 <xTaskIncrementTick+0xec>)
    1bda:	681b      	ldr	r3, [r3, #0]
    1bdc:	2b00      	cmp	r3, #0
    1bde:	d161      	bne.n	1ca4 <xTaskIncrementTick+0xd0>
		++xTickCount;
    1be0:	4b38      	ldr	r3, [pc, #224]	; (1cc4 <xTaskIncrementTick+0xf0>)
    1be2:	681a      	ldr	r2, [r3, #0]
    1be4:	3201      	adds	r2, #1
    1be6:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
    1be8:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
    1bea:	2e00      	cmp	r6, #0
    1bec:	d112      	bne.n	1c14 <xTaskIncrementTick+0x40>
				taskSWITCH_DELAYED_LISTS();
    1bee:	4b36      	ldr	r3, [pc, #216]	; (1cc8 <xTaskIncrementTick+0xf4>)
    1bf0:	681b      	ldr	r3, [r3, #0]
    1bf2:	681b      	ldr	r3, [r3, #0]
    1bf4:	2b00      	cmp	r3, #0
    1bf6:	d001      	beq.n	1bfc <xTaskIncrementTick+0x28>
    1bf8:	b672      	cpsid	i
    1bfa:	e7fe      	b.n	1bfa <xTaskIncrementTick+0x26>
    1bfc:	4a32      	ldr	r2, [pc, #200]	; (1cc8 <xTaskIncrementTick+0xf4>)
    1bfe:	6811      	ldr	r1, [r2, #0]
    1c00:	4b32      	ldr	r3, [pc, #200]	; (1ccc <xTaskIncrementTick+0xf8>)
    1c02:	6818      	ldr	r0, [r3, #0]
    1c04:	6010      	str	r0, [r2, #0]
    1c06:	6019      	str	r1, [r3, #0]
    1c08:	4a31      	ldr	r2, [pc, #196]	; (1cd0 <xTaskIncrementTick+0xfc>)
    1c0a:	6813      	ldr	r3, [r2, #0]
    1c0c:	3301      	adds	r3, #1
    1c0e:	6013      	str	r3, [r2, #0]
    1c10:	4b30      	ldr	r3, [pc, #192]	; (1cd4 <xTaskIncrementTick+0x100>)
    1c12:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
    1c14:	4b30      	ldr	r3, [pc, #192]	; (1cd8 <xTaskIncrementTick+0x104>)
    1c16:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
    1c18:	2400      	movs	r4, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
    1c1a:	429e      	cmp	r6, r3
    1c1c:	d333      	bcc.n	1c86 <xTaskIncrementTick+0xb2>
    1c1e:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1c20:	4f29      	ldr	r7, [pc, #164]	; (1cc8 <xTaskIncrementTick+0xf4>)
    1c22:	683b      	ldr	r3, [r7, #0]
    1c24:	681b      	ldr	r3, [r3, #0]
    1c26:	2b00      	cmp	r3, #0
    1c28:	d029      	beq.n	1c7e <xTaskIncrementTick+0xaa>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1c2a:	4b27      	ldr	r3, [pc, #156]	; (1cc8 <xTaskIncrementTick+0xf4>)
    1c2c:	681b      	ldr	r3, [r3, #0]
    1c2e:	68db      	ldr	r3, [r3, #12]
    1c30:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    1c32:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
    1c34:	429e      	cmp	r6, r3
    1c36:	d332      	bcc.n	1c9e <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    1c38:	1d2b      	adds	r3, r5, #4
    1c3a:	9301      	str	r3, [sp, #4]
    1c3c:	0018      	movs	r0, r3
    1c3e:	4b27      	ldr	r3, [pc, #156]	; (1cdc <xTaskIncrementTick+0x108>)
    1c40:	4798      	blx	r3
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1c42:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1c44:	2b00      	cmp	r3, #0
    1c46:	d003      	beq.n	1c50 <xTaskIncrementTick+0x7c>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1c48:	0028      	movs	r0, r5
    1c4a:	3018      	adds	r0, #24
    1c4c:	4b23      	ldr	r3, [pc, #140]	; (1cdc <xTaskIncrementTick+0x108>)
    1c4e:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
    1c50:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    1c52:	4a23      	ldr	r2, [pc, #140]	; (1ce0 <xTaskIncrementTick+0x10c>)
    1c54:	6812      	ldr	r2, [r2, #0]
    1c56:	4293      	cmp	r3, r2
    1c58:	d901      	bls.n	1c5e <xTaskIncrementTick+0x8a>
    1c5a:	4a21      	ldr	r2, [pc, #132]	; (1ce0 <xTaskIncrementTick+0x10c>)
    1c5c:	6013      	str	r3, [r2, #0]
    1c5e:	0098      	lsls	r0, r3, #2
    1c60:	18c0      	adds	r0, r0, r3
    1c62:	0080      	lsls	r0, r0, #2
    1c64:	4b1f      	ldr	r3, [pc, #124]	; (1ce4 <xTaskIncrementTick+0x110>)
    1c66:	1818      	adds	r0, r3, r0
    1c68:	9901      	ldr	r1, [sp, #4]
    1c6a:	4b1f      	ldr	r3, [pc, #124]	; (1ce8 <xTaskIncrementTick+0x114>)
    1c6c:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1c6e:	4b1f      	ldr	r3, [pc, #124]	; (1cec <xTaskIncrementTick+0x118>)
    1c70:	681b      	ldr	r3, [r3, #0]
    1c72:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    1c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1c76:	429a      	cmp	r2, r3
    1c78:	d3d3      	bcc.n	1c22 <xTaskIncrementTick+0x4e>
								xSwitchRequired = pdTRUE;
    1c7a:	2401      	movs	r4, #1
    1c7c:	e7d1      	b.n	1c22 <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = portMAX_DELAY;
    1c7e:	2201      	movs	r2, #1
    1c80:	4252      	negs	r2, r2
    1c82:	4b15      	ldr	r3, [pc, #84]	; (1cd8 <xTaskIncrementTick+0x104>)
    1c84:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    1c86:	4b19      	ldr	r3, [pc, #100]	; (1cec <xTaskIncrementTick+0x118>)
    1c88:	681b      	ldr	r3, [r3, #0]
    1c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1c8c:	0093      	lsls	r3, r2, #2
    1c8e:	189b      	adds	r3, r3, r2
    1c90:	009b      	lsls	r3, r3, #2
    1c92:	4a14      	ldr	r2, [pc, #80]	; (1ce4 <xTaskIncrementTick+0x110>)
    1c94:	589b      	ldr	r3, [r3, r2]
    1c96:	2b01      	cmp	r3, #1
    1c98:	d909      	bls.n	1cae <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
    1c9a:	2401      	movs	r4, #1
    1c9c:	e007      	b.n	1cae <xTaskIncrementTick+0xda>
							xNextTaskUnblockTime = xItemValue;
    1c9e:	4a0e      	ldr	r2, [pc, #56]	; (1cd8 <xTaskIncrementTick+0x104>)
    1ca0:	6013      	str	r3, [r2, #0]
							break;
    1ca2:	e7f0      	b.n	1c86 <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
    1ca4:	4a12      	ldr	r2, [pc, #72]	; (1cf0 <xTaskIncrementTick+0x11c>)
    1ca6:	6813      	ldr	r3, [r2, #0]
    1ca8:	3301      	adds	r3, #1
    1caa:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
    1cac:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
    1cae:	4b11      	ldr	r3, [pc, #68]	; (1cf4 <xTaskIncrementTick+0x120>)
    1cb0:	681b      	ldr	r3, [r3, #0]
    1cb2:	2b00      	cmp	r3, #0
    1cb4:	d000      	beq.n	1cb8 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
    1cb6:	2401      	movs	r4, #1
}
    1cb8:	0020      	movs	r0, r4
    1cba:	b003      	add	sp, #12
    1cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cbe:	46c0      	nop			; (mov r8, r8)
    1cc0:	20003be8 	.word	0x20003be8
    1cc4:	20003c64 	.word	0x20003c64
    1cc8:	20003b74 	.word	0x20003b74
    1ccc:	20003b78 	.word	0x20003b78
    1cd0:	20003c20 	.word	0x20003c20
    1cd4:	000018d5 	.word	0x000018d5
    1cd8:	20000024 	.word	0x20000024
    1cdc:	00001229 	.word	0x00001229
    1ce0:	20003bf4 	.word	0x20003bf4
    1ce4:	20003b7c 	.word	0x20003b7c
    1ce8:	000011e3 	.word	0x000011e3
    1cec:	20003b70 	.word	0x20003b70
    1cf0:	20003be4 	.word	0x20003be4
    1cf4:	20003c68 	.word	0x20003c68

00001cf8 <xTaskResumeAll>:
{
    1cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    1cfa:	4b31      	ldr	r3, [pc, #196]	; (1dc0 <xTaskResumeAll+0xc8>)
    1cfc:	681b      	ldr	r3, [r3, #0]
    1cfe:	2b00      	cmp	r3, #0
    1d00:	d101      	bne.n	1d06 <xTaskResumeAll+0xe>
    1d02:	b672      	cpsid	i
    1d04:	e7fe      	b.n	1d04 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    1d06:	4b2f      	ldr	r3, [pc, #188]	; (1dc4 <xTaskResumeAll+0xcc>)
    1d08:	4798      	blx	r3
		--uxSchedulerSuspended;
    1d0a:	4b2d      	ldr	r3, [pc, #180]	; (1dc0 <xTaskResumeAll+0xc8>)
    1d0c:	681a      	ldr	r2, [r3, #0]
    1d0e:	3a01      	subs	r2, #1
    1d10:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1d12:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    1d14:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1d16:	2b00      	cmp	r3, #0
    1d18:	d103      	bne.n	1d22 <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1d1a:	4b2b      	ldr	r3, [pc, #172]	; (1dc8 <xTaskResumeAll+0xd0>)
    1d1c:	681b      	ldr	r3, [r3, #0]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d12a      	bne.n	1d78 <xTaskResumeAll+0x80>
	taskEXIT_CRITICAL();
    1d22:	4b2a      	ldr	r3, [pc, #168]	; (1dcc <xTaskResumeAll+0xd4>)
    1d24:	4798      	blx	r3
}
    1d26:	0020      	movs	r0, r4
    1d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
    1d2a:	0098      	lsls	r0, r3, #2
    1d2c:	18c0      	adds	r0, r0, r3
    1d2e:	0080      	lsls	r0, r0, #2
    1d30:	4b27      	ldr	r3, [pc, #156]	; (1dd0 <xTaskResumeAll+0xd8>)
    1d32:	1818      	adds	r0, r3, r0
    1d34:	0029      	movs	r1, r5
    1d36:	4b27      	ldr	r3, [pc, #156]	; (1dd4 <xTaskResumeAll+0xdc>)
    1d38:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1d3a:	4b27      	ldr	r3, [pc, #156]	; (1dd8 <xTaskResumeAll+0xe0>)
    1d3c:	681b      	ldr	r3, [r3, #0]
    1d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1d42:	429a      	cmp	r2, r3
    1d44:	d214      	bcs.n	1d70 <xTaskResumeAll+0x78>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1d46:	6833      	ldr	r3, [r6, #0]
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d018      	beq.n	1d7e <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1d4c:	68e3      	ldr	r3, [r4, #12]
    1d4e:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1d50:	0038      	movs	r0, r7
    1d52:	3018      	adds	r0, #24
    1d54:	4b21      	ldr	r3, [pc, #132]	; (1ddc <xTaskResumeAll+0xe4>)
    1d56:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    1d58:	1d3d      	adds	r5, r7, #4
    1d5a:	0028      	movs	r0, r5
    1d5c:	4b1f      	ldr	r3, [pc, #124]	; (1ddc <xTaskResumeAll+0xe4>)
    1d5e:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    1d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1d62:	4a1f      	ldr	r2, [pc, #124]	; (1de0 <xTaskResumeAll+0xe8>)
    1d64:	6812      	ldr	r2, [r2, #0]
    1d66:	4293      	cmp	r3, r2
    1d68:	d9df      	bls.n	1d2a <xTaskResumeAll+0x32>
    1d6a:	4a1d      	ldr	r2, [pc, #116]	; (1de0 <xTaskResumeAll+0xe8>)
    1d6c:	6013      	str	r3, [r2, #0]
    1d6e:	e7dc      	b.n	1d2a <xTaskResumeAll+0x32>
						xYieldPending = pdTRUE;
    1d70:	2201      	movs	r2, #1
    1d72:	4b1c      	ldr	r3, [pc, #112]	; (1de4 <xTaskResumeAll+0xec>)
    1d74:	601a      	str	r2, [r3, #0]
    1d76:	e7e6      	b.n	1d46 <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1d78:	4e1b      	ldr	r6, [pc, #108]	; (1de8 <xTaskResumeAll+0xf0>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1d7a:	0034      	movs	r4, r6
    1d7c:	e7e3      	b.n	1d46 <xTaskResumeAll+0x4e>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    1d7e:	4b1b      	ldr	r3, [pc, #108]	; (1dec <xTaskResumeAll+0xf4>)
    1d80:	681b      	ldr	r3, [r3, #0]
    1d82:	2b00      	cmp	r3, #0
    1d84:	d013      	beq.n	1dae <xTaskResumeAll+0xb6>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    1d86:	4b19      	ldr	r3, [pc, #100]	; (1dec <xTaskResumeAll+0xf4>)
    1d88:	681b      	ldr	r3, [r3, #0]
    1d8a:	2b00      	cmp	r3, #0
    1d8c:	d00f      	beq.n	1dae <xTaskResumeAll+0xb6>
						if( xTaskIncrementTick() != pdFALSE )
    1d8e:	4e18      	ldr	r6, [pc, #96]	; (1df0 <xTaskResumeAll+0xf8>)
							xYieldPending = pdTRUE;
    1d90:	4d14      	ldr	r5, [pc, #80]	; (1de4 <xTaskResumeAll+0xec>)
						--uxPendedTicks;
    1d92:	4c16      	ldr	r4, [pc, #88]	; (1dec <xTaskResumeAll+0xf4>)
    1d94:	e005      	b.n	1da2 <xTaskResumeAll+0xaa>
    1d96:	6823      	ldr	r3, [r4, #0]
    1d98:	3b01      	subs	r3, #1
    1d9a:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    1d9c:	6823      	ldr	r3, [r4, #0]
    1d9e:	2b00      	cmp	r3, #0
    1da0:	d005      	beq.n	1dae <xTaskResumeAll+0xb6>
						if( xTaskIncrementTick() != pdFALSE )
    1da2:	47b0      	blx	r6
    1da4:	2800      	cmp	r0, #0
    1da6:	d0f6      	beq.n	1d96 <xTaskResumeAll+0x9e>
							xYieldPending = pdTRUE;
    1da8:	2301      	movs	r3, #1
    1daa:	602b      	str	r3, [r5, #0]
    1dac:	e7f3      	b.n	1d96 <xTaskResumeAll+0x9e>
				if( xYieldPending == pdTRUE )
    1dae:	4b0d      	ldr	r3, [pc, #52]	; (1de4 <xTaskResumeAll+0xec>)
    1db0:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    1db2:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
    1db4:	2b01      	cmp	r3, #1
    1db6:	d1b4      	bne.n	1d22 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
    1db8:	4b0e      	ldr	r3, [pc, #56]	; (1df4 <xTaskResumeAll+0xfc>)
    1dba:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    1dbc:	3401      	adds	r4, #1
    1dbe:	e7b0      	b.n	1d22 <xTaskResumeAll+0x2a>
    1dc0:	20003be8 	.word	0x20003be8
    1dc4:	00001031 	.word	0x00001031
    1dc8:	20003be0 	.word	0x20003be0
    1dcc:	00001049 	.word	0x00001049
    1dd0:	20003b7c 	.word	0x20003b7c
    1dd4:	000011e3 	.word	0x000011e3
    1dd8:	20003b70 	.word	0x20003b70
    1ddc:	00001229 	.word	0x00001229
    1de0:	20003bf4 	.word	0x20003bf4
    1de4:	20003c68 	.word	0x20003c68
    1de8:	20003c24 	.word	0x20003c24
    1dec:	20003be4 	.word	0x20003be4
    1df0:	00001bd5 	.word	0x00001bd5
    1df4:	00001019 	.word	0x00001019

00001df8 <vTaskDelay>:
	{
    1df8:	b510      	push	{r4, lr}
    1dfa:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    1dfc:	d016      	beq.n	1e2c <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
    1dfe:	4b0d      	ldr	r3, [pc, #52]	; (1e34 <vTaskDelay+0x3c>)
    1e00:	681b      	ldr	r3, [r3, #0]
    1e02:	2b00      	cmp	r3, #0
    1e04:	d001      	beq.n	1e0a <vTaskDelay+0x12>
    1e06:	b672      	cpsid	i
    1e08:	e7fe      	b.n	1e08 <vTaskDelay+0x10>
			vTaskSuspendAll();
    1e0a:	4b0b      	ldr	r3, [pc, #44]	; (1e38 <vTaskDelay+0x40>)
    1e0c:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
    1e0e:	4b0b      	ldr	r3, [pc, #44]	; (1e3c <vTaskDelay+0x44>)
    1e10:	681b      	ldr	r3, [r3, #0]
    1e12:	18e4      	adds	r4, r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1e14:	4b0a      	ldr	r3, [pc, #40]	; (1e40 <vTaskDelay+0x48>)
    1e16:	6818      	ldr	r0, [r3, #0]
    1e18:	3004      	adds	r0, #4
    1e1a:	4b0a      	ldr	r3, [pc, #40]	; (1e44 <vTaskDelay+0x4c>)
    1e1c:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1e1e:	0020      	movs	r0, r4
    1e20:	4b09      	ldr	r3, [pc, #36]	; (1e48 <vTaskDelay+0x50>)
    1e22:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    1e24:	4b09      	ldr	r3, [pc, #36]	; (1e4c <vTaskDelay+0x54>)
    1e26:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    1e28:	2800      	cmp	r0, #0
    1e2a:	d101      	bne.n	1e30 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
    1e2c:	4b08      	ldr	r3, [pc, #32]	; (1e50 <vTaskDelay+0x58>)
    1e2e:	4798      	blx	r3
	}
    1e30:	bd10      	pop	{r4, pc}
    1e32:	46c0      	nop			; (mov r8, r8)
    1e34:	20003be8 	.word	0x20003be8
    1e38:	00001ba5 	.word	0x00001ba5
    1e3c:	20003c64 	.word	0x20003c64
    1e40:	20003b70 	.word	0x20003b70
    1e44:	00001229 	.word	0x00001229
    1e48:	00001901 	.word	0x00001901
    1e4c:	00001cf9 	.word	0x00001cf9
    1e50:	00001019 	.word	0x00001019

00001e54 <prvIdleTask>:
{
    1e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e56:	46ce      	mov	lr, r9
    1e58:	4647      	mov	r7, r8
    1e5a:	b580      	push	{r7, lr}
			vTaskSuspendAll();
    1e5c:	4b16      	ldr	r3, [pc, #88]	; (1eb8 <prvIdleTask+0x64>)
    1e5e:	4698      	mov	r8, r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1e60:	4f16      	ldr	r7, [pc, #88]	; (1ebc <prvIdleTask+0x68>)
			( void ) xTaskResumeAll();
    1e62:	4e17      	ldr	r6, [pc, #92]	; (1ec0 <prvIdleTask+0x6c>)
    1e64:	e026      	b.n	1eb4 <prvIdleTask+0x60>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1e66:	4b17      	ldr	r3, [pc, #92]	; (1ec4 <prvIdleTask+0x70>)
    1e68:	681b      	ldr	r3, [r3, #0]
    1e6a:	2b01      	cmp	r3, #1
    1e6c:	d820      	bhi.n	1eb0 <prvIdleTask+0x5c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    1e6e:	682b      	ldr	r3, [r5, #0]
    1e70:	2b00      	cmp	r3, #0
    1e72:	d0f8      	beq.n	1e66 <prvIdleTask+0x12>
			vTaskSuspendAll();
    1e74:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1e76:	683c      	ldr	r4, [r7, #0]
			( void ) xTaskResumeAll();
    1e78:	47b0      	blx	r6
			if( xListIsEmpty == pdFALSE )
    1e7a:	2c00      	cmp	r4, #0
    1e7c:	d0f7      	beq.n	1e6e <prvIdleTask+0x1a>
				taskENTER_CRITICAL();
    1e7e:	4b12      	ldr	r3, [pc, #72]	; (1ec8 <prvIdleTask+0x74>)
    1e80:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    1e82:	4b0e      	ldr	r3, [pc, #56]	; (1ebc <prvIdleTask+0x68>)
    1e84:	68db      	ldr	r3, [r3, #12]
    1e86:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    1e88:	1d20      	adds	r0, r4, #4
    1e8a:	4b10      	ldr	r3, [pc, #64]	; (1ecc <prvIdleTask+0x78>)
    1e8c:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    1e8e:	4a10      	ldr	r2, [pc, #64]	; (1ed0 <prvIdleTask+0x7c>)
    1e90:	6813      	ldr	r3, [r2, #0]
    1e92:	3b01      	subs	r3, #1
    1e94:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
    1e96:	4a0f      	ldr	r2, [pc, #60]	; (1ed4 <prvIdleTask+0x80>)
    1e98:	6813      	ldr	r3, [r2, #0]
    1e9a:	3b01      	subs	r3, #1
    1e9c:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
    1e9e:	4b0e      	ldr	r3, [pc, #56]	; (1ed8 <prvIdleTask+0x84>)
    1ea0:	4798      	blx	r3
		vPortFreeAligned( pxTCB->pxStack );
    1ea2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1ea4:	4b0d      	ldr	r3, [pc, #52]	; (1edc <prvIdleTask+0x88>)
    1ea6:	4699      	mov	r9, r3
    1ea8:	4798      	blx	r3
		vPortFree( pxTCB );
    1eaa:	0020      	movs	r0, r4
    1eac:	47c8      	blx	r9
    1eae:	e7de      	b.n	1e6e <prvIdleTask+0x1a>
				taskYIELD();
    1eb0:	4b0b      	ldr	r3, [pc, #44]	; (1ee0 <prvIdleTask+0x8c>)
    1eb2:	4798      	blx	r3
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    1eb4:	4d07      	ldr	r5, [pc, #28]	; (1ed4 <prvIdleTask+0x80>)
    1eb6:	e7da      	b.n	1e6e <prvIdleTask+0x1a>
    1eb8:	00001ba5 	.word	0x00001ba5
    1ebc:	20003c50 	.word	0x20003c50
    1ec0:	00001cf9 	.word	0x00001cf9
    1ec4:	20003b7c 	.word	0x20003b7c
    1ec8:	00001031 	.word	0x00001031
    1ecc:	00001229 	.word	0x00001229
    1ed0:	20003be0 	.word	0x20003be0
    1ed4:	20003bf0 	.word	0x20003bf0
    1ed8:	00001049 	.word	0x00001049
    1edc:	000011bd 	.word	0x000011bd
    1ee0:	00001019 	.word	0x00001019

00001ee4 <vTaskSwitchContext>:
{
    1ee4:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1ee6:	4b26      	ldr	r3, [pc, #152]	; (1f80 <vTaskSwitchContext+0x9c>)
    1ee8:	681b      	ldr	r3, [r3, #0]
    1eea:	2b00      	cmp	r3, #0
    1eec:	d121      	bne.n	1f32 <vTaskSwitchContext+0x4e>
		xYieldPending = pdFALSE;
    1eee:	2200      	movs	r2, #0
    1ef0:	4b24      	ldr	r3, [pc, #144]	; (1f84 <vTaskSwitchContext+0xa0>)
    1ef2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1ef4:	4b24      	ldr	r3, [pc, #144]	; (1f88 <vTaskSwitchContext+0xa4>)
    1ef6:	681a      	ldr	r2, [r3, #0]
    1ef8:	0093      	lsls	r3, r2, #2
    1efa:	189b      	adds	r3, r3, r2
    1efc:	009b      	lsls	r3, r3, #2
    1efe:	4a23      	ldr	r2, [pc, #140]	; (1f8c <vTaskSwitchContext+0xa8>)
    1f00:	589b      	ldr	r3, [r3, r2]
    1f02:	2b00      	cmp	r3, #0
    1f04:	d119      	bne.n	1f3a <vTaskSwitchContext+0x56>
    1f06:	4b20      	ldr	r3, [pc, #128]	; (1f88 <vTaskSwitchContext+0xa4>)
    1f08:	681b      	ldr	r3, [r3, #0]
    1f0a:	2b00      	cmp	r3, #0
    1f0c:	d00f      	beq.n	1f2e <vTaskSwitchContext+0x4a>
    1f0e:	4a1e      	ldr	r2, [pc, #120]	; (1f88 <vTaskSwitchContext+0xa4>)
    1f10:	4c1e      	ldr	r4, [pc, #120]	; (1f8c <vTaskSwitchContext+0xa8>)
    1f12:	0010      	movs	r0, r2
    1f14:	6813      	ldr	r3, [r2, #0]
    1f16:	3b01      	subs	r3, #1
    1f18:	6013      	str	r3, [r2, #0]
    1f1a:	6811      	ldr	r1, [r2, #0]
    1f1c:	008b      	lsls	r3, r1, #2
    1f1e:	185b      	adds	r3, r3, r1
    1f20:	009b      	lsls	r3, r3, #2
    1f22:	591b      	ldr	r3, [r3, r4]
    1f24:	2b00      	cmp	r3, #0
    1f26:	d108      	bne.n	1f3a <vTaskSwitchContext+0x56>
    1f28:	6803      	ldr	r3, [r0, #0]
    1f2a:	2b00      	cmp	r3, #0
    1f2c:	d1f2      	bne.n	1f14 <vTaskSwitchContext+0x30>
    1f2e:	b672      	cpsid	i
    1f30:	e7fe      	b.n	1f30 <vTaskSwitchContext+0x4c>
		xYieldPending = pdTRUE;
    1f32:	2201      	movs	r2, #1
    1f34:	4b13      	ldr	r3, [pc, #76]	; (1f84 <vTaskSwitchContext+0xa0>)
    1f36:	601a      	str	r2, [r3, #0]
}
    1f38:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1f3a:	4b13      	ldr	r3, [pc, #76]	; (1f88 <vTaskSwitchContext+0xa4>)
    1f3c:	681a      	ldr	r2, [r3, #0]
    1f3e:	4813      	ldr	r0, [pc, #76]	; (1f8c <vTaskSwitchContext+0xa8>)
    1f40:	0093      	lsls	r3, r2, #2
    1f42:	1899      	adds	r1, r3, r2
    1f44:	0089      	lsls	r1, r1, #2
    1f46:	1841      	adds	r1, r0, r1
    1f48:	684c      	ldr	r4, [r1, #4]
    1f4a:	6864      	ldr	r4, [r4, #4]
    1f4c:	604c      	str	r4, [r1, #4]
    1f4e:	189b      	adds	r3, r3, r2
    1f50:	009b      	lsls	r3, r3, #2
    1f52:	3308      	adds	r3, #8
    1f54:	18c3      	adds	r3, r0, r3
    1f56:	429c      	cmp	r4, r3
    1f58:	d009      	beq.n	1f6e <vTaskSwitchContext+0x8a>
    1f5a:	0093      	lsls	r3, r2, #2
    1f5c:	189a      	adds	r2, r3, r2
    1f5e:	0092      	lsls	r2, r2, #2
    1f60:	4b0a      	ldr	r3, [pc, #40]	; (1f8c <vTaskSwitchContext+0xa8>)
    1f62:	189a      	adds	r2, r3, r2
    1f64:	6853      	ldr	r3, [r2, #4]
    1f66:	68da      	ldr	r2, [r3, #12]
    1f68:	4b09      	ldr	r3, [pc, #36]	; (1f90 <vTaskSwitchContext+0xac>)
    1f6a:	601a      	str	r2, [r3, #0]
}
    1f6c:	e7e4      	b.n	1f38 <vTaskSwitchContext+0x54>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1f6e:	6860      	ldr	r0, [r4, #4]
    1f70:	0093      	lsls	r3, r2, #2
    1f72:	189b      	adds	r3, r3, r2
    1f74:	009b      	lsls	r3, r3, #2
    1f76:	4905      	ldr	r1, [pc, #20]	; (1f8c <vTaskSwitchContext+0xa8>)
    1f78:	18cb      	adds	r3, r1, r3
    1f7a:	6058      	str	r0, [r3, #4]
    1f7c:	e7ed      	b.n	1f5a <vTaskSwitchContext+0x76>
    1f7e:	46c0      	nop			; (mov r8, r8)
    1f80:	20003be8 	.word	0x20003be8
    1f84:	20003c68 	.word	0x20003c68
    1f88:	20003bf4 	.word	0x20003bf4
    1f8c:	20003b7c 	.word	0x20003b7c
    1f90:	20003b70 	.word	0x20003b70

00001f94 <vTaskPlaceOnEventList>:
{
    1f94:	b570      	push	{r4, r5, r6, lr}
    1f96:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    1f98:	2800      	cmp	r0, #0
    1f9a:	d010      	beq.n	1fbe <vTaskPlaceOnEventList+0x2a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1f9c:	4d0c      	ldr	r5, [pc, #48]	; (1fd0 <vTaskPlaceOnEventList+0x3c>)
    1f9e:	6829      	ldr	r1, [r5, #0]
    1fa0:	3118      	adds	r1, #24
    1fa2:	4b0c      	ldr	r3, [pc, #48]	; (1fd4 <vTaskPlaceOnEventList+0x40>)
    1fa4:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1fa6:	6828      	ldr	r0, [r5, #0]
    1fa8:	3004      	adds	r0, #4
    1faa:	4b0b      	ldr	r3, [pc, #44]	; (1fd8 <vTaskPlaceOnEventList+0x44>)
    1fac:	4798      	blx	r3
		if( xTicksToWait == portMAX_DELAY )
    1fae:	1c63      	adds	r3, r4, #1
    1fb0:	d007      	beq.n	1fc2 <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
    1fb2:	4b0a      	ldr	r3, [pc, #40]	; (1fdc <vTaskPlaceOnEventList+0x48>)
    1fb4:	6818      	ldr	r0, [r3, #0]
    1fb6:	1820      	adds	r0, r4, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    1fb8:	4b09      	ldr	r3, [pc, #36]	; (1fe0 <vTaskPlaceOnEventList+0x4c>)
    1fba:	4798      	blx	r3
}
    1fbc:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxEventList );
    1fbe:	b672      	cpsid	i
    1fc0:	e7fe      	b.n	1fc0 <vTaskPlaceOnEventList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1fc2:	4b03      	ldr	r3, [pc, #12]	; (1fd0 <vTaskPlaceOnEventList+0x3c>)
    1fc4:	6819      	ldr	r1, [r3, #0]
    1fc6:	3104      	adds	r1, #4
    1fc8:	4806      	ldr	r0, [pc, #24]	; (1fe4 <vTaskPlaceOnEventList+0x50>)
    1fca:	4b07      	ldr	r3, [pc, #28]	; (1fe8 <vTaskPlaceOnEventList+0x54>)
    1fcc:	4798      	blx	r3
    1fce:	e7f5      	b.n	1fbc <vTaskPlaceOnEventList+0x28>
    1fd0:	20003b70 	.word	0x20003b70
    1fd4:	000011fb 	.word	0x000011fb
    1fd8:	00001229 	.word	0x00001229
    1fdc:	20003c64 	.word	0x20003c64
    1fe0:	00001901 	.word	0x00001901
    1fe4:	20003c3c 	.word	0x20003c3c
    1fe8:	000011e3 	.word	0x000011e3

00001fec <vTaskPlaceOnEventListRestricted>:
	{
    1fec:	b570      	push	{r4, r5, r6, lr}
    1fee:	000d      	movs	r5, r1
		configASSERT( pxEventList );
    1ff0:	2800      	cmp	r0, #0
    1ff2:	d101      	bne.n	1ff8 <vTaskPlaceOnEventListRestricted+0xc>
    1ff4:	b672      	cpsid	i
    1ff6:	e7fe      	b.n	1ff6 <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1ff8:	4c07      	ldr	r4, [pc, #28]	; (2018 <STACK_SIZE+0x18>)
    1ffa:	6821      	ldr	r1, [r4, #0]
    1ffc:	3118      	adds	r1, #24
    1ffe:	4b07      	ldr	r3, [pc, #28]	; (201c <STACK_SIZE+0x1c>)
    2000:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2002:	6820      	ldr	r0, [r4, #0]
    2004:	3004      	adds	r0, #4
    2006:	4b06      	ldr	r3, [pc, #24]	; (2020 <STACK_SIZE+0x20>)
    2008:	4798      	blx	r3
		xTimeToWake = xTickCount + xTicksToWait;
    200a:	4b06      	ldr	r3, [pc, #24]	; (2024 <STACK_SIZE+0x24>)
    200c:	6818      	ldr	r0, [r3, #0]
    200e:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    2010:	4b05      	ldr	r3, [pc, #20]	; (2028 <STACK_SIZE+0x28>)
    2012:	4798      	blx	r3
	}
    2014:	bd70      	pop	{r4, r5, r6, pc}
    2016:	46c0      	nop			; (mov r8, r8)
    2018:	20003b70 	.word	0x20003b70
    201c:	000011e3 	.word	0x000011e3
    2020:	00001229 	.word	0x00001229
    2024:	20003c64 	.word	0x20003c64
    2028:	00001901 	.word	0x00001901

0000202c <xTaskRemoveFromEventList>:
{
    202c:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    202e:	68c3      	ldr	r3, [r0, #12]
    2030:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    2032:	2c00      	cmp	r4, #0
    2034:	d027      	beq.n	2086 <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    2036:	0025      	movs	r5, r4
    2038:	3518      	adds	r5, #24
    203a:	0028      	movs	r0, r5
    203c:	4b15      	ldr	r3, [pc, #84]	; (2094 <xTaskRemoveFromEventList+0x68>)
    203e:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2040:	4b15      	ldr	r3, [pc, #84]	; (2098 <xTaskRemoveFromEventList+0x6c>)
    2042:	681b      	ldr	r3, [r3, #0]
    2044:	2b00      	cmp	r3, #0
    2046:	d120      	bne.n	208a <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    2048:	1d25      	adds	r5, r4, #4
    204a:	0028      	movs	r0, r5
    204c:	4b11      	ldr	r3, [pc, #68]	; (2094 <xTaskRemoveFromEventList+0x68>)
    204e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    2050:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2052:	4a12      	ldr	r2, [pc, #72]	; (209c <xTaskRemoveFromEventList+0x70>)
    2054:	6812      	ldr	r2, [r2, #0]
    2056:	4293      	cmp	r3, r2
    2058:	d901      	bls.n	205e <xTaskRemoveFromEventList+0x32>
    205a:	4a10      	ldr	r2, [pc, #64]	; (209c <xTaskRemoveFromEventList+0x70>)
    205c:	6013      	str	r3, [r2, #0]
    205e:	0098      	lsls	r0, r3, #2
    2060:	18c0      	adds	r0, r0, r3
    2062:	0080      	lsls	r0, r0, #2
    2064:	4b0e      	ldr	r3, [pc, #56]	; (20a0 <xTaskRemoveFromEventList+0x74>)
    2066:	1818      	adds	r0, r3, r0
    2068:	0029      	movs	r1, r5
    206a:	4b0e      	ldr	r3, [pc, #56]	; (20a4 <xTaskRemoveFromEventList+0x78>)
    206c:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    206e:	4b0e      	ldr	r3, [pc, #56]	; (20a8 <xTaskRemoveFromEventList+0x7c>)
    2070:	681b      	ldr	r3, [r3, #0]
    2072:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    2076:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2078:	429a      	cmp	r2, r3
    207a:	d903      	bls.n	2084 <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
    207c:	2201      	movs	r2, #1
    207e:	4b0b      	ldr	r3, [pc, #44]	; (20ac <xTaskRemoveFromEventList+0x80>)
    2080:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    2082:	3001      	adds	r0, #1
}
    2084:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    2086:	b672      	cpsid	i
    2088:	e7fe      	b.n	2088 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    208a:	0029      	movs	r1, r5
    208c:	4808      	ldr	r0, [pc, #32]	; (20b0 <xTaskRemoveFromEventList+0x84>)
    208e:	4b05      	ldr	r3, [pc, #20]	; (20a4 <xTaskRemoveFromEventList+0x78>)
    2090:	4798      	blx	r3
    2092:	e7ec      	b.n	206e <xTaskRemoveFromEventList+0x42>
    2094:	00001229 	.word	0x00001229
    2098:	20003be8 	.word	0x20003be8
    209c:	20003bf4 	.word	0x20003bf4
    20a0:	20003b7c 	.word	0x20003b7c
    20a4:	000011e3 	.word	0x000011e3
    20a8:	20003b70 	.word	0x20003b70
    20ac:	20003c68 	.word	0x20003c68
    20b0:	20003c24 	.word	0x20003c24

000020b4 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
    20b4:	2800      	cmp	r0, #0
    20b6:	d006      	beq.n	20c6 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    20b8:	4b04      	ldr	r3, [pc, #16]	; (20cc <vTaskSetTimeOutState+0x18>)
    20ba:	681b      	ldr	r3, [r3, #0]
    20bc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    20be:	4b04      	ldr	r3, [pc, #16]	; (20d0 <vTaskSetTimeOutState+0x1c>)
    20c0:	681b      	ldr	r3, [r3, #0]
    20c2:	6043      	str	r3, [r0, #4]
}
    20c4:	4770      	bx	lr
	configASSERT( pxTimeOut );
    20c6:	b672      	cpsid	i
    20c8:	e7fe      	b.n	20c8 <vTaskSetTimeOutState+0x14>
    20ca:	46c0      	nop			; (mov r8, r8)
    20cc:	20003c20 	.word	0x20003c20
    20d0:	20003c64 	.word	0x20003c64

000020d4 <xTaskCheckForTimeOut>:
{
    20d4:	b570      	push	{r4, r5, r6, lr}
    20d6:	0004      	movs	r4, r0
    20d8:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
    20da:	2800      	cmp	r0, #0
    20dc:	d01a      	beq.n	2114 <xTaskCheckForTimeOut+0x40>
	configASSERT( pxTicksToWait );
    20de:	2900      	cmp	r1, #0
    20e0:	d01a      	beq.n	2118 <xTaskCheckForTimeOut+0x44>
	taskENTER_CRITICAL();
    20e2:	4b13      	ldr	r3, [pc, #76]	; (2130 <xTaskCheckForTimeOut+0x5c>)
    20e4:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    20e6:	4b13      	ldr	r3, [pc, #76]	; (2134 <xTaskCheckForTimeOut+0x60>)
    20e8:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
    20ea:	6833      	ldr	r3, [r6, #0]
    20ec:	1c59      	adds	r1, r3, #1
    20ee:	d01d      	beq.n	212c <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    20f0:	4911      	ldr	r1, [pc, #68]	; (2138 <xTaskCheckForTimeOut+0x64>)
    20f2:	6809      	ldr	r1, [r1, #0]
    20f4:	6820      	ldr	r0, [r4, #0]
    20f6:	4288      	cmp	r0, r1
    20f8:	d003      	beq.n	2102 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    20fa:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    20fc:	6861      	ldr	r1, [r4, #4]
    20fe:	428a      	cmp	r2, r1
    2100:	d204      	bcs.n	210c <xTaskCheckForTimeOut+0x38>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    2102:	6861      	ldr	r1, [r4, #4]
    2104:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
    2106:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    2108:	4283      	cmp	r3, r0
    210a:	d807      	bhi.n	211c <xTaskCheckForTimeOut+0x48>
	taskEXIT_CRITICAL();
    210c:	4b0b      	ldr	r3, [pc, #44]	; (213c <xTaskCheckForTimeOut+0x68>)
    210e:	4798      	blx	r3
}
    2110:	0028      	movs	r0, r5
    2112:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    2114:	b672      	cpsid	i
    2116:	e7fe      	b.n	2116 <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    2118:	b672      	cpsid	i
    211a:	e7fe      	b.n	211a <xTaskCheckForTimeOut+0x46>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    211c:	1a9b      	subs	r3, r3, r2
    211e:	185b      	adds	r3, r3, r1
    2120:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
    2122:	0020      	movs	r0, r4
    2124:	4b06      	ldr	r3, [pc, #24]	; (2140 <xTaskCheckForTimeOut+0x6c>)
    2126:	4798      	blx	r3
			xReturn = pdFALSE;
    2128:	2500      	movs	r5, #0
    212a:	e7ef      	b.n	210c <xTaskCheckForTimeOut+0x38>
				xReturn = pdFALSE;
    212c:	2500      	movs	r5, #0
    212e:	e7ed      	b.n	210c <xTaskCheckForTimeOut+0x38>
    2130:	00001031 	.word	0x00001031
    2134:	20003c64 	.word	0x20003c64
    2138:	20003c20 	.word	0x20003c20
    213c:	00001049 	.word	0x00001049
    2140:	000020b5 	.word	0x000020b5

00002144 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    2144:	2201      	movs	r2, #1
    2146:	4b01      	ldr	r3, [pc, #4]	; (214c <vTaskMissedYield+0x8>)
    2148:	601a      	str	r2, [r3, #0]
}
    214a:	4770      	bx	lr
    214c:	20003c68 	.word	0x20003c68

00002150 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    2150:	4b01      	ldr	r3, [pc, #4]	; (2158 <xTaskGetCurrentTaskHandle+0x8>)
    2152:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    2154:	4770      	bx	lr
    2156:	46c0      	nop			; (mov r8, r8)
    2158:	20003b70 	.word	0x20003b70

0000215c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    215c:	4b05      	ldr	r3, [pc, #20]	; (2174 <xTaskGetSchedulerState+0x18>)
    215e:	681b      	ldr	r3, [r3, #0]
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    2160:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    2162:	2b00      	cmp	r3, #0
    2164:	d004      	beq.n	2170 <xTaskGetSchedulerState+0x14>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2166:	4b04      	ldr	r3, [pc, #16]	; (2178 <xTaskGetSchedulerState+0x1c>)
    2168:	6818      	ldr	r0, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    216a:	4243      	negs	r3, r0
    216c:	4158      	adcs	r0, r3
    216e:	0040      	lsls	r0, r0, #1
			}
		}

		return xReturn;
	}
    2170:	4770      	bx	lr
    2172:	46c0      	nop			; (mov r8, r8)
    2174:	20003c38 	.word	0x20003c38
    2178:	20003be8 	.word	0x20003be8

0000217c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    217c:	b570      	push	{r4, r5, r6, lr}
    217e:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    2180:	d01a      	beq.n	21b8 <vTaskPriorityInherit+0x3c>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    2182:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    2184:	4b18      	ldr	r3, [pc, #96]	; (21e8 <vTaskPriorityInherit+0x6c>)
    2186:	681b      	ldr	r3, [r3, #0]
    2188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    218a:	429a      	cmp	r2, r3
    218c:	d214      	bcs.n	21b8 <vTaskPriorityInherit+0x3c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    218e:	6983      	ldr	r3, [r0, #24]
    2190:	2b00      	cmp	r3, #0
    2192:	db05      	blt.n	21a0 <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2194:	4b14      	ldr	r3, [pc, #80]	; (21e8 <vTaskPriorityInherit+0x6c>)
    2196:	681b      	ldr	r3, [r3, #0]
    2198:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    219a:	2305      	movs	r3, #5
    219c:	1a5b      	subs	r3, r3, r1
    219e:	6183      	str	r3, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    21a0:	0093      	lsls	r3, r2, #2
    21a2:	189b      	adds	r3, r3, r2
    21a4:	009b      	lsls	r3, r3, #2
    21a6:	4a11      	ldr	r2, [pc, #68]	; (21ec <vTaskPriorityInherit+0x70>)
    21a8:	18d3      	adds	r3, r2, r3
    21aa:	6962      	ldr	r2, [r4, #20]
    21ac:	429a      	cmp	r2, r3
    21ae:	d004      	beq.n	21ba <vTaskPriorityInherit+0x3e>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    21b0:	4b0d      	ldr	r3, [pc, #52]	; (21e8 <vTaskPriorityInherit+0x6c>)
    21b2:	681b      	ldr	r3, [r3, #0]
    21b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    21b6:	62e3      	str	r3, [r4, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    21b8:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    21ba:	1d25      	adds	r5, r4, #4
    21bc:	0028      	movs	r0, r5
    21be:	4b0c      	ldr	r3, [pc, #48]	; (21f0 <vTaskPriorityInherit+0x74>)
    21c0:	4798      	blx	r3
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    21c2:	4b09      	ldr	r3, [pc, #36]	; (21e8 <vTaskPriorityInherit+0x6c>)
    21c4:	681b      	ldr	r3, [r3, #0]
    21c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    21c8:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    21ca:	4a0a      	ldr	r2, [pc, #40]	; (21f4 <vTaskPriorityInherit+0x78>)
    21cc:	6812      	ldr	r2, [r2, #0]
    21ce:	4293      	cmp	r3, r2
    21d0:	d901      	bls.n	21d6 <vTaskPriorityInherit+0x5a>
    21d2:	4a08      	ldr	r2, [pc, #32]	; (21f4 <vTaskPriorityInherit+0x78>)
    21d4:	6013      	str	r3, [r2, #0]
    21d6:	0098      	lsls	r0, r3, #2
    21d8:	18c0      	adds	r0, r0, r3
    21da:	0080      	lsls	r0, r0, #2
    21dc:	4b03      	ldr	r3, [pc, #12]	; (21ec <vTaskPriorityInherit+0x70>)
    21de:	1818      	adds	r0, r3, r0
    21e0:	0029      	movs	r1, r5
    21e2:	4b05      	ldr	r3, [pc, #20]	; (21f8 <vTaskPriorityInherit+0x7c>)
    21e4:	4798      	blx	r3
    21e6:	e7e7      	b.n	21b8 <vTaskPriorityInherit+0x3c>
    21e8:	20003b70 	.word	0x20003b70
    21ec:	20003b7c 	.word	0x20003b7c
    21f0:	00001229 	.word	0x00001229
    21f4:	20003bf4 	.word	0x20003bf4
    21f8:	000011e3 	.word	0x000011e3

000021fc <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    21fc:	b570      	push	{r4, r5, r6, lr}
    21fe:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    2200:	d01d      	beq.n	223e <vTaskPriorityDisinherit+0x42>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2202:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    2204:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    2206:	4293      	cmp	r3, r2
    2208:	d019      	beq.n	223e <vTaskPriorityDisinherit+0x42>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    220a:	1d05      	adds	r5, r0, #4
    220c:	0028      	movs	r0, r5
    220e:	4b0c      	ldr	r3, [pc, #48]	; (2240 <vTaskPriorityDisinherit+0x44>)
    2210:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    2212:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    2214:	62e0      	str	r0, [r4, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    2216:	69a3      	ldr	r3, [r4, #24]
    2218:	2b00      	cmp	r3, #0
    221a:	db02      	blt.n	2222 <vTaskPriorityDisinherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    221c:	2305      	movs	r3, #5
    221e:	1a1b      	subs	r3, r3, r0
    2220:	61a3      	str	r3, [r4, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
    2222:	4b08      	ldr	r3, [pc, #32]	; (2244 <vTaskPriorityDisinherit+0x48>)
    2224:	681b      	ldr	r3, [r3, #0]
    2226:	4298      	cmp	r0, r3
    2228:	d901      	bls.n	222e <vTaskPriorityDisinherit+0x32>
    222a:	4b06      	ldr	r3, [pc, #24]	; (2244 <vTaskPriorityDisinherit+0x48>)
    222c:	6018      	str	r0, [r3, #0]
    222e:	0083      	lsls	r3, r0, #2
    2230:	1818      	adds	r0, r3, r0
    2232:	0080      	lsls	r0, r0, #2
    2234:	4b04      	ldr	r3, [pc, #16]	; (2248 <vTaskPriorityDisinherit+0x4c>)
    2236:	1818      	adds	r0, r3, r0
    2238:	0029      	movs	r1, r5
    223a:	4b04      	ldr	r3, [pc, #16]	; (224c <vTaskPriorityDisinherit+0x50>)
    223c:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    223e:	bd70      	pop	{r4, r5, r6, pc}
    2240:	00001229 	.word	0x00001229
    2244:	20003bf4 	.word	0x20003bf4
    2248:	20003b7c 	.word	0x20003b7c
    224c:	000011e3 	.word	0x000011e3

00002250 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    2250:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2252:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2254:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    2256:	4291      	cmp	r1, r2
    2258:	d80b      	bhi.n	2272 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    225a:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    225c:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    225e:	6983      	ldr	r3, [r0, #24]
    2260:	429a      	cmp	r2, r3
    2262:	d211      	bcs.n	2288 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    2264:	1d01      	adds	r1, r0, #4
    2266:	4b09      	ldr	r3, [pc, #36]	; (228c <prvInsertTimerInActiveList+0x3c>)
    2268:	6818      	ldr	r0, [r3, #0]
    226a:	4b09      	ldr	r3, [pc, #36]	; (2290 <prvInsertTimerInActiveList+0x40>)
    226c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    226e:	2400      	movs	r4, #0
    2270:	e00a      	b.n	2288 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2272:	429a      	cmp	r2, r3
    2274:	d202      	bcs.n	227c <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    2276:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2278:	4299      	cmp	r1, r3
    227a:	d205      	bcs.n	2288 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    227c:	1d01      	adds	r1, r0, #4
    227e:	4b05      	ldr	r3, [pc, #20]	; (2294 <prvInsertTimerInActiveList+0x44>)
    2280:	6818      	ldr	r0, [r3, #0]
    2282:	4b03      	ldr	r3, [pc, #12]	; (2290 <prvInsertTimerInActiveList+0x40>)
    2284:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    2286:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    2288:	0020      	movs	r0, r4
    228a:	bd10      	pop	{r4, pc}
    228c:	20003c70 	.word	0x20003c70
    2290:	000011fb 	.word	0x000011fb
    2294:	20003c6c 	.word	0x20003c6c

00002298 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    2298:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    229a:	4b10      	ldr	r3, [pc, #64]	; (22dc <prvCheckForValidListAndQueue+0x44>)
    229c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    229e:	4b10      	ldr	r3, [pc, #64]	; (22e0 <prvCheckForValidListAndQueue+0x48>)
    22a0:	681b      	ldr	r3, [r3, #0]
    22a2:	2b00      	cmp	r3, #0
    22a4:	d002      	beq.n	22ac <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    22a6:	4b0f      	ldr	r3, [pc, #60]	; (22e4 <prvCheckForValidListAndQueue+0x4c>)
    22a8:	4798      	blx	r3
}
    22aa:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    22ac:	4d0e      	ldr	r5, [pc, #56]	; (22e8 <prvCheckForValidListAndQueue+0x50>)
    22ae:	0028      	movs	r0, r5
    22b0:	4e0e      	ldr	r6, [pc, #56]	; (22ec <prvCheckForValidListAndQueue+0x54>)
    22b2:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    22b4:	4c0e      	ldr	r4, [pc, #56]	; (22f0 <prvCheckForValidListAndQueue+0x58>)
    22b6:	0020      	movs	r0, r4
    22b8:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    22ba:	4b0e      	ldr	r3, [pc, #56]	; (22f4 <prvCheckForValidListAndQueue+0x5c>)
    22bc:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    22be:	4b0e      	ldr	r3, [pc, #56]	; (22f8 <prvCheckForValidListAndQueue+0x60>)
    22c0:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    22c2:	2200      	movs	r2, #0
    22c4:	210c      	movs	r1, #12
    22c6:	2002      	movs	r0, #2
    22c8:	4b0c      	ldr	r3, [pc, #48]	; (22fc <prvCheckForValidListAndQueue+0x64>)
    22ca:	4798      	blx	r3
			configASSERT( xTimerQueue );
    22cc:	2800      	cmp	r0, #0
    22ce:	d002      	beq.n	22d6 <prvCheckForValidListAndQueue+0x3e>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    22d0:	4b03      	ldr	r3, [pc, #12]	; (22e0 <prvCheckForValidListAndQueue+0x48>)
    22d2:	6018      	str	r0, [r3, #0]
    22d4:	e7e7      	b.n	22a6 <prvCheckForValidListAndQueue+0xe>
			configASSERT( xTimerQueue );
    22d6:	b672      	cpsid	i
    22d8:	e7fe      	b.n	22d8 <prvCheckForValidListAndQueue+0x40>
    22da:	46c0      	nop			; (mov r8, r8)
    22dc:	00001031 	.word	0x00001031
    22e0:	20003ca0 	.word	0x20003ca0
    22e4:	00001049 	.word	0x00001049
    22e8:	20003c74 	.word	0x20003c74
    22ec:	000011c7 	.word	0x000011c7
    22f0:	20003c88 	.word	0x20003c88
    22f4:	20003c6c 	.word	0x20003c6c
    22f8:	20003c70 	.word	0x20003c70
    22fc:	00001471 	.word	0x00001471

00002300 <xTimerCreateTimerTask>:
{
    2300:	b510      	push	{r4, lr}
    2302:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
    2304:	4b0b      	ldr	r3, [pc, #44]	; (2334 <xTimerCreateTimerTask+0x34>)
    2306:	4798      	blx	r3
	if( xTimerQueue != NULL )
    2308:	4b0b      	ldr	r3, [pc, #44]	; (2338 <xTimerCreateTimerTask+0x38>)
    230a:	681b      	ldr	r3, [r3, #0]
    230c:	2b00      	cmp	r3, #0
    230e:	d00f      	beq.n	2330 <xTimerCreateTimerTask+0x30>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    2310:	2300      	movs	r3, #0
    2312:	9303      	str	r3, [sp, #12]
    2314:	9302      	str	r3, [sp, #8]
    2316:	9301      	str	r3, [sp, #4]
    2318:	3302      	adds	r3, #2
    231a:	9300      	str	r3, [sp, #0]
    231c:	2300      	movs	r3, #0
    231e:	2250      	movs	r2, #80	; 0x50
    2320:	4906      	ldr	r1, [pc, #24]	; (233c <xTimerCreateTimerTask+0x3c>)
    2322:	4807      	ldr	r0, [pc, #28]	; (2340 <xTimerCreateTimerTask+0x40>)
    2324:	4c07      	ldr	r4, [pc, #28]	; (2344 <xTimerCreateTimerTask+0x44>)
    2326:	47a0      	blx	r4
	configASSERT( xReturn );
    2328:	2800      	cmp	r0, #0
    232a:	d001      	beq.n	2330 <xTimerCreateTimerTask+0x30>
}
    232c:	b004      	add	sp, #16
    232e:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    2330:	b672      	cpsid	i
    2332:	e7fe      	b.n	2332 <xTimerCreateTimerTask+0x32>
    2334:	00002299 	.word	0x00002299
    2338:	20003ca0 	.word	0x20003ca0
    233c:	000068a8 	.word	0x000068a8
    2340:	00002465 	.word	0x00002465
    2344:	00001959 	.word	0x00001959

00002348 <xTimerGenericCommand>:
{
    2348:	b530      	push	{r4, r5, lr}
    234a:	b085      	sub	sp, #20
    234c:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
    234e:	4b13      	ldr	r3, [pc, #76]	; (239c <xTimerGenericCommand+0x54>)
    2350:	681c      	ldr	r4, [r3, #0]
    2352:	2c00      	cmp	r4, #0
    2354:	d020      	beq.n	2398 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
    2356:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2358:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    235a:	9003      	str	r0, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    235c:	2905      	cmp	r1, #5
    235e:	dc13      	bgt.n	2388 <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2360:	4b0f      	ldr	r3, [pc, #60]	; (23a0 <xTimerGenericCommand+0x58>)
    2362:	4798      	blx	r3
    2364:	2802      	cmp	r0, #2
    2366:	d007      	beq.n	2378 <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2368:	4b0c      	ldr	r3, [pc, #48]	; (239c <xTimerGenericCommand+0x54>)
    236a:	6818      	ldr	r0, [r3, #0]
    236c:	2300      	movs	r3, #0
    236e:	2200      	movs	r2, #0
    2370:	a901      	add	r1, sp, #4
    2372:	4c0c      	ldr	r4, [pc, #48]	; (23a4 <xTimerGenericCommand+0x5c>)
    2374:	47a0      	blx	r4
    2376:	e00d      	b.n	2394 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2378:	4b08      	ldr	r3, [pc, #32]	; (239c <xTimerGenericCommand+0x54>)
    237a:	6818      	ldr	r0, [r3, #0]
    237c:	2300      	movs	r3, #0
    237e:	9a08      	ldr	r2, [sp, #32]
    2380:	a901      	add	r1, sp, #4
    2382:	4c08      	ldr	r4, [pc, #32]	; (23a4 <xTimerGenericCommand+0x5c>)
    2384:	47a0      	blx	r4
    2386:	e005      	b.n	2394 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2388:	2300      	movs	r3, #0
    238a:	002a      	movs	r2, r5
    238c:	a901      	add	r1, sp, #4
    238e:	0020      	movs	r0, r4
    2390:	4c05      	ldr	r4, [pc, #20]	; (23a8 <xTimerGenericCommand+0x60>)
    2392:	47a0      	blx	r4
}
    2394:	b005      	add	sp, #20
    2396:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    2398:	2000      	movs	r0, #0
	return xReturn;
    239a:	e7fb      	b.n	2394 <xTimerGenericCommand+0x4c>
    239c:	20003ca0 	.word	0x20003ca0
    23a0:	0000215d 	.word	0x0000215d
    23a4:	000014c1 	.word	0x000014c1
    23a8:	00001635 	.word	0x00001635

000023ac <prvSampleTimeNow>:
{
    23ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    23ae:	46d6      	mov	lr, sl
    23b0:	464f      	mov	r7, r9
    23b2:	4646      	mov	r6, r8
    23b4:	b5c0      	push	{r6, r7, lr}
    23b6:	b082      	sub	sp, #8
    23b8:	4681      	mov	r9, r0
	xTimeNow = xTaskGetTickCount();
    23ba:	4b23      	ldr	r3, [pc, #140]	; (2448 <prvSampleTimeNow+0x9c>)
    23bc:	4798      	blx	r3
    23be:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
    23c0:	4b22      	ldr	r3, [pc, #136]	; (244c <prvSampleTimeNow+0xa0>)
    23c2:	681b      	ldr	r3, [r3, #0]
    23c4:	4298      	cmp	r0, r3
    23c6:	d317      	bcc.n	23f8 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    23c8:	2300      	movs	r3, #0
    23ca:	464a      	mov	r2, r9
    23cc:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    23ce:	4b1f      	ldr	r3, [pc, #124]	; (244c <prvSampleTimeNow+0xa0>)
    23d0:	4642      	mov	r2, r8
    23d2:	601a      	str	r2, [r3, #0]
}
    23d4:	4640      	mov	r0, r8
    23d6:	b002      	add	sp, #8
    23d8:	bc1c      	pop	{r2, r3, r4}
    23da:	4690      	mov	r8, r2
    23dc:	4699      	mov	r9, r3
    23de:	46a2      	mov	sl, r4
    23e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    23e2:	2300      	movs	r3, #0
    23e4:	9300      	str	r3, [sp, #0]
    23e6:	4652      	mov	r2, sl
    23e8:	2100      	movs	r1, #0
    23ea:	0020      	movs	r0, r4
    23ec:	4c18      	ldr	r4, [pc, #96]	; (2450 <prvSampleTimeNow+0xa4>)
    23ee:	47a0      	blx	r4
				configASSERT( xResult );
    23f0:	2800      	cmp	r0, #0
    23f2:	d103      	bne.n	23fc <prvSampleTimeNow+0x50>
    23f4:	b672      	cpsid	i
    23f6:	e7fe      	b.n	23f6 <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    23f8:	4e16      	ldr	r6, [pc, #88]	; (2454 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    23fa:	4f17      	ldr	r7, [pc, #92]	; (2458 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    23fc:	6833      	ldr	r3, [r6, #0]
    23fe:	681a      	ldr	r2, [r3, #0]
    2400:	2a00      	cmp	r2, #0
    2402:	d018      	beq.n	2436 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2404:	68db      	ldr	r3, [r3, #12]
    2406:	681a      	ldr	r2, [r3, #0]
    2408:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    240a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    240c:	1d25      	adds	r5, r4, #4
    240e:	0028      	movs	r0, r5
    2410:	47b8      	blx	r7
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2412:	0020      	movs	r0, r4
    2414:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2416:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2418:	69e3      	ldr	r3, [r4, #28]
    241a:	2b01      	cmp	r3, #1
    241c:	d1ee      	bne.n	23fc <prvSampleTimeNow+0x50>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    241e:	69a3      	ldr	r3, [r4, #24]
    2420:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
    2422:	459a      	cmp	sl, r3
    2424:	d2dd      	bcs.n	23e2 <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2426:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2428:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    242a:	4b0a      	ldr	r3, [pc, #40]	; (2454 <prvSampleTimeNow+0xa8>)
    242c:	6818      	ldr	r0, [r3, #0]
    242e:	0029      	movs	r1, r5
    2430:	4b0a      	ldr	r3, [pc, #40]	; (245c <prvSampleTimeNow+0xb0>)
    2432:	4798      	blx	r3
    2434:	e7e2      	b.n	23fc <prvSampleTimeNow+0x50>
	pxCurrentTimerList = pxOverflowTimerList;
    2436:	4a0a      	ldr	r2, [pc, #40]	; (2460 <prvSampleTimeNow+0xb4>)
    2438:	4906      	ldr	r1, [pc, #24]	; (2454 <prvSampleTimeNow+0xa8>)
    243a:	6810      	ldr	r0, [r2, #0]
    243c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    243e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    2440:	2301      	movs	r3, #1
    2442:	464a      	mov	r2, r9
    2444:	6013      	str	r3, [r2, #0]
    2446:	e7c2      	b.n	23ce <prvSampleTimeNow+0x22>
    2448:	00001bb5 	.word	0x00001bb5
    244c:	20003c9c 	.word	0x20003c9c
    2450:	00002349 	.word	0x00002349
    2454:	20003c6c 	.word	0x20003c6c
    2458:	00001229 	.word	0x00001229
    245c:	000011fb 	.word	0x000011fb
    2460:	20003c70 	.word	0x20003c70

00002464 <prvTimerTask>:
{
    2464:	b5f0      	push	{r4, r5, r6, r7, lr}
    2466:	b089      	sub	sp, #36	; 0x24
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2468:	4f50      	ldr	r7, [pc, #320]	; (25ac <prvTimerTask+0x148>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    246a:	4b51      	ldr	r3, [pc, #324]	; (25b0 <prvTimerTask+0x14c>)
    246c:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    246e:	681a      	ldr	r2, [r3, #0]
    2470:	2a00      	cmp	r2, #0
    2472:	d100      	bne.n	2476 <prvTimerTask+0x12>
    2474:	e08c      	b.n	2590 <prvTimerTask+0x12c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2476:	68db      	ldr	r3, [r3, #12]
    2478:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
    247a:	4b4e      	ldr	r3, [pc, #312]	; (25b4 <prvTimerTask+0x150>)
    247c:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    247e:	a805      	add	r0, sp, #20
    2480:	4b4d      	ldr	r3, [pc, #308]	; (25b8 <prvTimerTask+0x154>)
    2482:	4798      	blx	r3
    2484:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
    2486:	9b05      	ldr	r3, [sp, #20]
    2488:	2b00      	cmp	r3, #0
    248a:	d000      	beq.n	248e <prvTimerTask+0x2a>
    248c:	e08b      	b.n	25a6 <prvTimerTask+0x142>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    248e:	42a8      	cmp	r0, r5
    2490:	d225      	bcs.n	24de <prvTimerTask+0x7a>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    2492:	1b29      	subs	r1, r5, r4
    2494:	4b49      	ldr	r3, [pc, #292]	; (25bc <prvTimerTask+0x158>)
    2496:	6818      	ldr	r0, [r3, #0]
    2498:	4b49      	ldr	r3, [pc, #292]	; (25c0 <prvTimerTask+0x15c>)
    249a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    249c:	4b49      	ldr	r3, [pc, #292]	; (25c4 <prvTimerTask+0x160>)
    249e:	4798      	blx	r3
    24a0:	2800      	cmp	r0, #0
    24a2:	d040      	beq.n	2526 <prvTimerTask+0xc2>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    24a4:	4d45      	ldr	r5, [pc, #276]	; (25bc <prvTimerTask+0x158>)
    24a6:	4c48      	ldr	r4, [pc, #288]	; (25c8 <prvTimerTask+0x164>)
    24a8:	2300      	movs	r3, #0
    24aa:	2200      	movs	r2, #0
    24ac:	a905      	add	r1, sp, #20
    24ae:	6828      	ldr	r0, [r5, #0]
    24b0:	47a0      	blx	r4
    24b2:	2800      	cmp	r0, #0
    24b4:	d0d9      	beq.n	246a <prvTimerTask+0x6>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    24b6:	9b05      	ldr	r3, [sp, #20]
    24b8:	9303      	str	r3, [sp, #12]
    24ba:	2b00      	cmp	r3, #0
    24bc:	dbf4      	blt.n	24a8 <prvTimerTask+0x44>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    24be:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    24c0:	6973      	ldr	r3, [r6, #20]
    24c2:	2b00      	cmp	r3, #0
    24c4:	d001      	beq.n	24ca <prvTimerTask+0x66>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    24c6:	1d30      	adds	r0, r6, #4
    24c8:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    24ca:	a804      	add	r0, sp, #16
    24cc:	4b3a      	ldr	r3, [pc, #232]	; (25b8 <prvTimerTask+0x154>)
    24ce:	4798      	blx	r3
			switch( xMessage.xMessageID )
    24d0:	9b05      	ldr	r3, [sp, #20]
    24d2:	2b09      	cmp	r3, #9
    24d4:	d8e8      	bhi.n	24a8 <prvTimerTask+0x44>
    24d6:	009b      	lsls	r3, r3, #2
    24d8:	4a3c      	ldr	r2, [pc, #240]	; (25cc <prvTimerTask+0x168>)
    24da:	58d3      	ldr	r3, [r2, r3]
    24dc:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
    24de:	4b39      	ldr	r3, [pc, #228]	; (25c4 <prvTimerTask+0x160>)
    24e0:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    24e2:	4b33      	ldr	r3, [pc, #204]	; (25b0 <prvTimerTask+0x14c>)
    24e4:	681b      	ldr	r3, [r3, #0]
    24e6:	68db      	ldr	r3, [r3, #12]
    24e8:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    24ea:	1d30      	adds	r0, r6, #4
    24ec:	4b2f      	ldr	r3, [pc, #188]	; (25ac <prvTimerTask+0x148>)
    24ee:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    24f0:	69f3      	ldr	r3, [r6, #28]
    24f2:	2b01      	cmp	r3, #1
    24f4:	d003      	beq.n	24fe <prvTimerTask+0x9a>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    24f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
    24f8:	0030      	movs	r0, r6
    24fa:	4798      	blx	r3
    24fc:	e7d2      	b.n	24a4 <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    24fe:	69b3      	ldr	r3, [r6, #24]
    2500:	18e9      	adds	r1, r5, r3
    2502:	002b      	movs	r3, r5
    2504:	0022      	movs	r2, r4
    2506:	0030      	movs	r0, r6
    2508:	4c31      	ldr	r4, [pc, #196]	; (25d0 <prvTimerTask+0x16c>)
    250a:	47a0      	blx	r4
    250c:	2801      	cmp	r0, #1
    250e:	d1f2      	bne.n	24f6 <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2510:	2300      	movs	r3, #0
    2512:	9300      	str	r3, [sp, #0]
    2514:	002a      	movs	r2, r5
    2516:	2100      	movs	r1, #0
    2518:	0030      	movs	r0, r6
    251a:	4c2e      	ldr	r4, [pc, #184]	; (25d4 <prvTimerTask+0x170>)
    251c:	47a0      	blx	r4
			configASSERT( xResult );
    251e:	2800      	cmp	r0, #0
    2520:	d1e9      	bne.n	24f6 <prvTimerTask+0x92>
    2522:	b672      	cpsid	i
    2524:	e7fe      	b.n	2524 <prvTimerTask+0xc0>
					portYIELD_WITHIN_API();
    2526:	4b2c      	ldr	r3, [pc, #176]	; (25d8 <prvTimerTask+0x174>)
    2528:	4798      	blx	r3
    252a:	e7bb      	b.n	24a4 <prvTimerTask+0x40>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    252c:	9b06      	ldr	r3, [sp, #24]
    252e:	69b2      	ldr	r2, [r6, #24]
    2530:	4694      	mov	ip, r2
    2532:	4463      	add	r3, ip
    2534:	0019      	movs	r1, r3
    2536:	9b06      	ldr	r3, [sp, #24]
    2538:	0002      	movs	r2, r0
    253a:	0030      	movs	r0, r6
    253c:	4c24      	ldr	r4, [pc, #144]	; (25d0 <prvTimerTask+0x16c>)
    253e:	47a0      	blx	r4
    2540:	2801      	cmp	r0, #1
    2542:	d1b0      	bne.n	24a6 <prvTimerTask+0x42>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2544:	0030      	movs	r0, r6
    2546:	6a73      	ldr	r3, [r6, #36]	; 0x24
    2548:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    254a:	69f3      	ldr	r3, [r6, #28]
    254c:	2b01      	cmp	r3, #1
    254e:	d1aa      	bne.n	24a6 <prvTimerTask+0x42>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2550:	9b06      	ldr	r3, [sp, #24]
    2552:	69b1      	ldr	r1, [r6, #24]
    2554:	468c      	mov	ip, r1
    2556:	4463      	add	r3, ip
    2558:	001a      	movs	r2, r3
    255a:	2300      	movs	r3, #0
    255c:	9300      	str	r3, [sp, #0]
    255e:	2100      	movs	r1, #0
    2560:	0030      	movs	r0, r6
    2562:	4c1c      	ldr	r4, [pc, #112]	; (25d4 <prvTimerTask+0x170>)
    2564:	47a0      	blx	r4
							configASSERT( xResult );
    2566:	2800      	cmp	r0, #0
    2568:	d19d      	bne.n	24a6 <prvTimerTask+0x42>
    256a:	b672      	cpsid	i
    256c:	e7fe      	b.n	256c <prvTimerTask+0x108>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    256e:	9906      	ldr	r1, [sp, #24]
    2570:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    2572:	2900      	cmp	r1, #0
    2574:	d006      	beq.n	2584 <prvTimerTask+0x120>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2576:	1841      	adds	r1, r0, r1
    2578:	0003      	movs	r3, r0
    257a:	0002      	movs	r2, r0
    257c:	0030      	movs	r0, r6
    257e:	4c14      	ldr	r4, [pc, #80]	; (25d0 <prvTimerTask+0x16c>)
    2580:	47a0      	blx	r4
    2582:	e790      	b.n	24a6 <prvTimerTask+0x42>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    2584:	b672      	cpsid	i
    2586:	e7fe      	b.n	2586 <prvTimerTask+0x122>
					vPortFree( pxTimer );
    2588:	0030      	movs	r0, r6
    258a:	4b14      	ldr	r3, [pc, #80]	; (25dc <prvTimerTask+0x178>)
    258c:	4798      	blx	r3
    258e:	e78a      	b.n	24a6 <prvTimerTask+0x42>
	vTaskSuspendAll();
    2590:	4b08      	ldr	r3, [pc, #32]	; (25b4 <prvTimerTask+0x150>)
    2592:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2594:	a805      	add	r0, sp, #20
    2596:	4b08      	ldr	r3, [pc, #32]	; (25b8 <prvTimerTask+0x154>)
    2598:	4798      	blx	r3
    259a:	0004      	movs	r4, r0
		xNextExpireTime = ( TickType_t ) 0U;
    259c:	2500      	movs	r5, #0
		if( xTimerListsWereSwitched == pdFALSE )
    259e:	9b05      	ldr	r3, [sp, #20]
    25a0:	2b00      	cmp	r3, #0
    25a2:	d100      	bne.n	25a6 <prvTimerTask+0x142>
    25a4:	e775      	b.n	2492 <prvTimerTask+0x2e>
			( void ) xTaskResumeAll();
    25a6:	4b07      	ldr	r3, [pc, #28]	; (25c4 <prvTimerTask+0x160>)
    25a8:	4798      	blx	r3
    25aa:	e77b      	b.n	24a4 <prvTimerTask+0x40>
    25ac:	00001229 	.word	0x00001229
    25b0:	20003c6c 	.word	0x20003c6c
    25b4:	00001ba5 	.word	0x00001ba5
    25b8:	000023ad 	.word	0x000023ad
    25bc:	20003ca0 	.word	0x20003ca0
    25c0:	00001885 	.word	0x00001885
    25c4:	00001cf9 	.word	0x00001cf9
    25c8:	000016fd 	.word	0x000016fd
    25cc:	00006880 	.word	0x00006880
    25d0:	00002251 	.word	0x00002251
    25d4:	00002349 	.word	0x00002349
    25d8:	00001019 	.word	0x00001019
    25dc:	000011bd 	.word	0x000011bd

000025e0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    25e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    25e2:	46de      	mov	lr, fp
    25e4:	4657      	mov	r7, sl
    25e6:	464e      	mov	r6, r9
    25e8:	4645      	mov	r5, r8
    25ea:	b5e0      	push	{r5, r6, r7, lr}
    25ec:	b091      	sub	sp, #68	; 0x44
    25ee:	0005      	movs	r5, r0
    25f0:	000c      	movs	r4, r1
    25f2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    25f4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    25f6:	0008      	movs	r0, r1
    25f8:	4bc3      	ldr	r3, [pc, #780]	; (2908 <usart_init+0x328>)
    25fa:	4798      	blx	r3
    25fc:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    25fe:	2805      	cmp	r0, #5
    2600:	d00d      	beq.n	261e <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2602:	0007      	movs	r7, r0
    2604:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    2606:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2608:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    260a:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    260c:	07c9      	lsls	r1, r1, #31
    260e:	d509      	bpl.n	2624 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2610:	b011      	add	sp, #68	; 0x44
    2612:	bc3c      	pop	{r2, r3, r4, r5}
    2614:	4690      	mov	r8, r2
    2616:	4699      	mov	r9, r3
    2618:	46a2      	mov	sl, r4
    261a:	46ab      	mov	fp, r5
    261c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    261e:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    2620:	2301      	movs	r3, #1
    2622:	e7f1      	b.n	2608 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2624:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    2626:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2628:	0789      	lsls	r1, r1, #30
    262a:	d4f1      	bmi.n	2610 <usart_init+0x30>
	if (sercom_index == 5) {
    262c:	2a05      	cmp	r2, #5
    262e:	d047      	beq.n	26c0 <usart_init+0xe0>
			MCLK->APBCMASK.reg |= mask;
    2630:	49b6      	ldr	r1, [pc, #728]	; (290c <usart_init+0x32c>)
    2632:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    2634:	2201      	movs	r2, #1
    2636:	409a      	lsls	r2, r3
    2638:	0013      	movs	r3, r2
    263a:	4303      	orrs	r3, r0
    263c:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    263e:	a90f      	add	r1, sp, #60	; 0x3c
    2640:	232d      	movs	r3, #45	; 0x2d
    2642:	4698      	mov	r8, r3
    2644:	5cf3      	ldrb	r3, [r6, r3]
    2646:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2648:	b2ff      	uxtb	r7, r7
    264a:	0038      	movs	r0, r7
    264c:	4bb0      	ldr	r3, [pc, #704]	; (2910 <usart_init+0x330>)
    264e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2650:	0038      	movs	r0, r7
    2652:	4bb0      	ldr	r3, [pc, #704]	; (2914 <usart_init+0x334>)
    2654:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2656:	4643      	mov	r3, r8
    2658:	5cf0      	ldrb	r0, [r6, r3]
    265a:	2100      	movs	r1, #0
    265c:	4bae      	ldr	r3, [pc, #696]	; (2918 <usart_init+0x338>)
    265e:	4798      	blx	r3
	module->character_size = config->character_size;
    2660:	7af3      	ldrb	r3, [r6, #11]
    2662:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2664:	2324      	movs	r3, #36	; 0x24
    2666:	5cf3      	ldrb	r3, [r6, r3]
    2668:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    266a:	2325      	movs	r3, #37	; 0x25
    266c:	5cf3      	ldrb	r3, [r6, r3]
    266e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2670:	7ef3      	ldrb	r3, [r6, #27]
    2672:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2674:	7f33      	ldrb	r3, [r6, #28]
    2676:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2678:	682b      	ldr	r3, [r5, #0]
    267a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    267c:	0018      	movs	r0, r3
    267e:	4ba2      	ldr	r3, [pc, #648]	; (2908 <usart_init+0x328>)
    2680:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2682:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    2684:	2200      	movs	r2, #0
    2686:	230e      	movs	r3, #14
    2688:	a906      	add	r1, sp, #24
    268a:	468c      	mov	ip, r1
    268c:	4463      	add	r3, ip
    268e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2690:	8a32      	ldrh	r2, [r6, #16]
    2692:	9202      	str	r2, [sp, #8]
    2694:	2380      	movs	r3, #128	; 0x80
    2696:	01db      	lsls	r3, r3, #7
    2698:	429a      	cmp	r2, r3
    269a:	d100      	bne.n	269e <usart_init+0xbe>
    269c:	e0a7      	b.n	27ee <usart_init+0x20e>
    269e:	d917      	bls.n	26d0 <usart_init+0xf0>
    26a0:	23c0      	movs	r3, #192	; 0xc0
    26a2:	01db      	lsls	r3, r3, #7
    26a4:	9a02      	ldr	r2, [sp, #8]
    26a6:	429a      	cmp	r2, r3
    26a8:	d100      	bne.n	26ac <usart_init+0xcc>
    26aa:	e09b      	b.n	27e4 <usart_init+0x204>
    26ac:	2380      	movs	r3, #128	; 0x80
    26ae:	021b      	lsls	r3, r3, #8
    26b0:	429a      	cmp	r2, r3
    26b2:	d000      	beq.n	26b6 <usart_init+0xd6>
    26b4:	e123      	b.n	28fe <usart_init+0x31e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    26b6:	2303      	movs	r3, #3
    26b8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    26ba:	2300      	movs	r3, #0
    26bc:	9307      	str	r3, [sp, #28]
    26be:	e010      	b.n	26e2 <usart_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    26c0:	4992      	ldr	r1, [pc, #584]	; (290c <usart_init+0x32c>)
    26c2:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    26c4:	3a04      	subs	r2, #4
    26c6:	409a      	lsls	r2, r3
    26c8:	0013      	movs	r3, r2
    26ca:	4303      	orrs	r3, r0
    26cc:	620b      	str	r3, [r1, #32]
    26ce:	e7b6      	b.n	263e <usart_init+0x5e>
	switch (config->sample_rate) {
    26d0:	2380      	movs	r3, #128	; 0x80
    26d2:	019b      	lsls	r3, r3, #6
    26d4:	429a      	cmp	r2, r3
    26d6:	d000      	beq.n	26da <usart_init+0xfa>
    26d8:	e111      	b.n	28fe <usart_init+0x31e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    26da:	2310      	movs	r3, #16
    26dc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    26de:	3b0f      	subs	r3, #15
    26e0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    26e2:	6833      	ldr	r3, [r6, #0]
    26e4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    26e6:	68f3      	ldr	r3, [r6, #12]
    26e8:	469b      	mov	fp, r3
		config->sample_adjustment |
    26ea:	6973      	ldr	r3, [r6, #20]
    26ec:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    26ee:	7e33      	ldrb	r3, [r6, #24]
    26f0:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    26f2:	2326      	movs	r3, #38	; 0x26
    26f4:	5cf3      	ldrb	r3, [r6, r3]
    26f6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    26f8:	6873      	ldr	r3, [r6, #4]
    26fa:	4699      	mov	r9, r3
	switch (transfer_mode)
    26fc:	2b00      	cmp	r3, #0
    26fe:	d100      	bne.n	2702 <usart_init+0x122>
    2700:	e09d      	b.n	283e <usart_init+0x25e>
    2702:	2380      	movs	r3, #128	; 0x80
    2704:	055b      	lsls	r3, r3, #21
    2706:	4599      	cmp	r9, r3
    2708:	d104      	bne.n	2714 <usart_init+0x134>
			if (!config->use_external_clock) {
    270a:	2327      	movs	r3, #39	; 0x27
    270c:	5cf3      	ldrb	r3, [r6, r3]
    270e:	2b00      	cmp	r3, #0
    2710:	d100      	bne.n	2714 <usart_init+0x134>
    2712:	e082      	b.n	281a <usart_init+0x23a>
	if(config->encoding_format_enable) {
    2714:	7e73      	ldrb	r3, [r6, #25]
    2716:	2b00      	cmp	r3, #0
    2718:	d002      	beq.n	2720 <usart_init+0x140>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    271a:	7eb3      	ldrb	r3, [r6, #26]
    271c:	4642      	mov	r2, r8
    271e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2720:	682a      	ldr	r2, [r5, #0]
    2722:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2724:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2726:	2b00      	cmp	r3, #0
    2728:	d1fc      	bne.n	2724 <usart_init+0x144>
	usart_hw->BAUD.reg = baud;
    272a:	330e      	adds	r3, #14
    272c:	aa06      	add	r2, sp, #24
    272e:	4694      	mov	ip, r2
    2730:	4463      	add	r3, ip
    2732:	881b      	ldrh	r3, [r3, #0]
    2734:	4642      	mov	r2, r8
    2736:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2738:	9b05      	ldr	r3, [sp, #20]
    273a:	465a      	mov	r2, fp
    273c:	4313      	orrs	r3, r2
    273e:	9a03      	ldr	r2, [sp, #12]
    2740:	4313      	orrs	r3, r2
    2742:	464a      	mov	r2, r9
    2744:	4313      	orrs	r3, r2
    2746:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2748:	9b04      	ldr	r3, [sp, #16]
    274a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    274c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    274e:	4653      	mov	r3, sl
    2750:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    2752:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2754:	2327      	movs	r3, #39	; 0x27
    2756:	5cf3      	ldrb	r3, [r6, r3]
    2758:	2b00      	cmp	r3, #0
    275a:	d101      	bne.n	2760 <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    275c:	3304      	adds	r3, #4
    275e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2760:	7e73      	ldrb	r3, [r6, #25]
    2762:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2764:	7f32      	ldrb	r2, [r6, #28]
    2766:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2768:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    276a:	7f72      	ldrb	r2, [r6, #29]
    276c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    276e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2770:	2224      	movs	r2, #36	; 0x24
    2772:	5cb2      	ldrb	r2, [r6, r2]
    2774:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2776:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2778:	2225      	movs	r2, #37	; 0x25
    277a:	5cb2      	ldrb	r2, [r6, r2]
    277c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    277e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2780:	7af1      	ldrb	r1, [r6, #11]
    2782:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2784:	8933      	ldrh	r3, [r6, #8]
    2786:	2bff      	cmp	r3, #255	; 0xff
    2788:	d07d      	beq.n	2886 <usart_init+0x2a6>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    278a:	2280      	movs	r2, #128	; 0x80
    278c:	0452      	lsls	r2, r2, #17
    278e:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2790:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2792:	232c      	movs	r3, #44	; 0x2c
    2794:	5cf3      	ldrb	r3, [r6, r3]
    2796:	2b00      	cmp	r3, #0
    2798:	d103      	bne.n	27a2 <usart_init+0x1c2>
    279a:	4b60      	ldr	r3, [pc, #384]	; (291c <usart_init+0x33c>)
    279c:	789b      	ldrb	r3, [r3, #2]
    279e:	079b      	lsls	r3, r3, #30
    27a0:	d501      	bpl.n	27a6 <usart_init+0x1c6>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    27a2:	2380      	movs	r3, #128	; 0x80
    27a4:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    27a6:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    27a8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    27aa:	2b00      	cmp	r3, #0
    27ac:	d1fc      	bne.n	27a8 <usart_init+0x1c8>
	usart_hw->CTRLB.reg = ctrlb;
    27ae:	4643      	mov	r3, r8
    27b0:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    27b2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    27b4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    27b6:	2b00      	cmp	r3, #0
    27b8:	d1fc      	bne.n	27b4 <usart_init+0x1d4>
	usart_hw->CTRLA.reg = ctrla;
    27ba:	4643      	mov	r3, r8
    27bc:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    27be:	ab0e      	add	r3, sp, #56	; 0x38
    27c0:	2280      	movs	r2, #128	; 0x80
    27c2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    27c4:	2200      	movs	r2, #0
    27c6:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    27c8:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    27ca:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    27cc:	6b33      	ldr	r3, [r6, #48]	; 0x30
    27ce:	930a      	str	r3, [sp, #40]	; 0x28
    27d0:	6b73      	ldr	r3, [r6, #52]	; 0x34
    27d2:	930b      	str	r3, [sp, #44]	; 0x2c
    27d4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    27d6:	930c      	str	r3, [sp, #48]	; 0x30
    27d8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    27da:	9302      	str	r3, [sp, #8]
    27dc:	930d      	str	r3, [sp, #52]	; 0x34
    27de:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    27e0:	ae0a      	add	r6, sp, #40	; 0x28
    27e2:	e05e      	b.n	28a2 <usart_init+0x2c2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    27e4:	2308      	movs	r3, #8
    27e6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    27e8:	3b07      	subs	r3, #7
    27ea:	9307      	str	r3, [sp, #28]
    27ec:	e779      	b.n	26e2 <usart_init+0x102>
	ctrla = (uint32_t)config->data_order |
    27ee:	6833      	ldr	r3, [r6, #0]
    27f0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    27f2:	68f3      	ldr	r3, [r6, #12]
    27f4:	469b      	mov	fp, r3
		config->sample_adjustment |
    27f6:	6973      	ldr	r3, [r6, #20]
    27f8:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    27fa:	7e33      	ldrb	r3, [r6, #24]
    27fc:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    27fe:	2326      	movs	r3, #38	; 0x26
    2800:	5cf3      	ldrb	r3, [r6, r3]
    2802:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2804:	6873      	ldr	r3, [r6, #4]
    2806:	4699      	mov	r9, r3
	switch (transfer_mode)
    2808:	2b00      	cmp	r3, #0
    280a:	d014      	beq.n	2836 <usart_init+0x256>
    280c:	2380      	movs	r3, #128	; 0x80
    280e:	055b      	lsls	r3, r3, #21
    2810:	4599      	cmp	r9, r3
    2812:	d100      	bne.n	2816 <usart_init+0x236>
    2814:	e779      	b.n	270a <usart_init+0x12a>
	enum status_code status_code = STATUS_OK;
    2816:	2000      	movs	r0, #0
    2818:	e020      	b.n	285c <usart_init+0x27c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    281a:	6a33      	ldr	r3, [r6, #32]
    281c:	001f      	movs	r7, r3
    281e:	b2c0      	uxtb	r0, r0
    2820:	4b3f      	ldr	r3, [pc, #252]	; (2920 <usart_init+0x340>)
    2822:	4798      	blx	r3
    2824:	0001      	movs	r1, r0
    2826:	220e      	movs	r2, #14
    2828:	ab06      	add	r3, sp, #24
    282a:	469c      	mov	ip, r3
    282c:	4462      	add	r2, ip
    282e:	0038      	movs	r0, r7
    2830:	4b3c      	ldr	r3, [pc, #240]	; (2924 <usart_init+0x344>)
    2832:	4798      	blx	r3
    2834:	e012      	b.n	285c <usart_init+0x27c>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2836:	2308      	movs	r3, #8
    2838:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    283a:	2300      	movs	r3, #0
    283c:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    283e:	2327      	movs	r3, #39	; 0x27
    2840:	5cf3      	ldrb	r3, [r6, r3]
    2842:	2b00      	cmp	r3, #0
    2844:	d00e      	beq.n	2864 <usart_init+0x284>
				status_code =
    2846:	9b06      	ldr	r3, [sp, #24]
    2848:	9300      	str	r3, [sp, #0]
    284a:	9b07      	ldr	r3, [sp, #28]
    284c:	220e      	movs	r2, #14
    284e:	a906      	add	r1, sp, #24
    2850:	468c      	mov	ip, r1
    2852:	4462      	add	r2, ip
    2854:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2856:	6a30      	ldr	r0, [r6, #32]
    2858:	4f33      	ldr	r7, [pc, #204]	; (2928 <usart_init+0x348>)
    285a:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    285c:	2800      	cmp	r0, #0
    285e:	d000      	beq.n	2862 <usart_init+0x282>
    2860:	e6d6      	b.n	2610 <usart_init+0x30>
    2862:	e757      	b.n	2714 <usart_init+0x134>
						_sercom_get_async_baud_val(config->baudrate,
    2864:	6a33      	ldr	r3, [r6, #32]
    2866:	001f      	movs	r7, r3
    2868:	b2c0      	uxtb	r0, r0
    286a:	4b2d      	ldr	r3, [pc, #180]	; (2920 <usart_init+0x340>)
    286c:	4798      	blx	r3
    286e:	0001      	movs	r1, r0
				status_code =
    2870:	9b06      	ldr	r3, [sp, #24]
    2872:	9300      	str	r3, [sp, #0]
    2874:	9b07      	ldr	r3, [sp, #28]
    2876:	220e      	movs	r2, #14
    2878:	a806      	add	r0, sp, #24
    287a:	4684      	mov	ip, r0
    287c:	4462      	add	r2, ip
    287e:	0038      	movs	r0, r7
    2880:	4f29      	ldr	r7, [pc, #164]	; (2928 <usart_init+0x348>)
    2882:	47b8      	blx	r7
    2884:	e7ea      	b.n	285c <usart_init+0x27c>
		if(config->lin_slave_enable) {
    2886:	7ef3      	ldrb	r3, [r6, #27]
    2888:	2b00      	cmp	r3, #0
    288a:	d082      	beq.n	2792 <usart_init+0x1b2>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    288c:	2380      	movs	r3, #128	; 0x80
    288e:	04db      	lsls	r3, r3, #19
    2890:	431f      	orrs	r7, r3
    2892:	e77e      	b.n	2792 <usart_init+0x1b2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2894:	0020      	movs	r0, r4
    2896:	4b25      	ldr	r3, [pc, #148]	; (292c <usart_init+0x34c>)
    2898:	4798      	blx	r3
    289a:	e007      	b.n	28ac <usart_init+0x2cc>
    289c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    289e:	2f04      	cmp	r7, #4
    28a0:	d00d      	beq.n	28be <usart_init+0x2de>
    28a2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    28a4:	00bb      	lsls	r3, r7, #2
    28a6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    28a8:	2800      	cmp	r0, #0
    28aa:	d0f3      	beq.n	2894 <usart_init+0x2b4>
		if (current_pinmux != PINMUX_UNUSED) {
    28ac:	1c43      	adds	r3, r0, #1
    28ae:	d0f5      	beq.n	289c <usart_init+0x2bc>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    28b0:	a90e      	add	r1, sp, #56	; 0x38
    28b2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    28b4:	0c00      	lsrs	r0, r0, #16
    28b6:	b2c0      	uxtb	r0, r0
    28b8:	4b1d      	ldr	r3, [pc, #116]	; (2930 <usart_init+0x350>)
    28ba:	4798      	blx	r3
    28bc:	e7ee      	b.n	289c <usart_init+0x2bc>
		module->callback[i]            = NULL;
    28be:	2300      	movs	r3, #0
    28c0:	60eb      	str	r3, [r5, #12]
    28c2:	612b      	str	r3, [r5, #16]
    28c4:	616b      	str	r3, [r5, #20]
    28c6:	61ab      	str	r3, [r5, #24]
    28c8:	61eb      	str	r3, [r5, #28]
    28ca:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    28cc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    28ce:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    28d0:	2200      	movs	r2, #0
    28d2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    28d4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    28d6:	3330      	adds	r3, #48	; 0x30
    28d8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    28da:	3301      	adds	r3, #1
    28dc:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    28de:	3301      	adds	r3, #1
    28e0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    28e2:	3301      	adds	r3, #1
    28e4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    28e6:	6828      	ldr	r0, [r5, #0]
    28e8:	4b07      	ldr	r3, [pc, #28]	; (2908 <usart_init+0x328>)
    28ea:	4798      	blx	r3
    28ec:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    28ee:	4911      	ldr	r1, [pc, #68]	; (2934 <usart_init+0x354>)
    28f0:	4b11      	ldr	r3, [pc, #68]	; (2938 <usart_init+0x358>)
    28f2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    28f4:	00a4      	lsls	r4, r4, #2
    28f6:	4b11      	ldr	r3, [pc, #68]	; (293c <usart_init+0x35c>)
    28f8:	50e5      	str	r5, [r4, r3]
	return status_code;
    28fa:	2000      	movs	r0, #0
    28fc:	e688      	b.n	2610 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    28fe:	2310      	movs	r3, #16
    2900:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2902:	2300      	movs	r3, #0
    2904:	9307      	str	r3, [sp, #28]
    2906:	e6ec      	b.n	26e2 <usart_init+0x102>
    2908:	00000ef5 	.word	0x00000ef5
    290c:	40000400 	.word	0x40000400
    2910:	00003851 	.word	0x00003851
    2914:	000037e1 	.word	0x000037e1
    2918:	00000d35 	.word	0x00000d35
    291c:	41002000 	.word	0x41002000
    2920:	00003875 	.word	0x00003875
    2924:	00000b3d 	.word	0x00000b3d
    2928:	00000b65 	.word	0x00000b65
    292c:	00000d81 	.word	0x00000d81
    2930:	0000394d 	.word	0x0000394d
    2934:	00002a9d 	.word	0x00002a9d
    2938:	00002c35 	.word	0x00002c35
    293c:	20003d14 	.word	0x20003d14

00002940 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2940:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2942:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2944:	2a00      	cmp	r2, #0
    2946:	d101      	bne.n	294c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2948:	0018      	movs	r0, r3
    294a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    294c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    294e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2950:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    2952:	2a00      	cmp	r2, #0
    2954:	d1f8      	bne.n	2948 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2956:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2958:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    295a:	2a00      	cmp	r2, #0
    295c:	d1fc      	bne.n	2958 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    295e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2960:	2102      	movs	r1, #2
    2962:	7e1a      	ldrb	r2, [r3, #24]
    2964:	420a      	tst	r2, r1
    2966:	d0fc      	beq.n	2962 <usart_write_wait+0x22>
	return STATUS_OK;
    2968:	2300      	movs	r3, #0
    296a:	e7ed      	b.n	2948 <usart_write_wait+0x8>

0000296c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    296c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    296e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2970:	2a00      	cmp	r2, #0
    2972:	d101      	bne.n	2978 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2974:	0018      	movs	r0, r3
    2976:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2978:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    297a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    297c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    297e:	2a00      	cmp	r2, #0
    2980:	d1f8      	bne.n	2974 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2982:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2984:	7e10      	ldrb	r0, [r2, #24]
    2986:	0740      	lsls	r0, r0, #29
    2988:	d5f4      	bpl.n	2974 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    298a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    298c:	2b00      	cmp	r3, #0
    298e:	d1fc      	bne.n	298a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2990:	8b53      	ldrh	r3, [r2, #26]
    2992:	b2db      	uxtb	r3, r3
	if (error_code) {
    2994:	0698      	lsls	r0, r3, #26
    2996:	d01d      	beq.n	29d4 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2998:	0798      	lsls	r0, r3, #30
    299a:	d503      	bpl.n	29a4 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    299c:	2302      	movs	r3, #2
    299e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    29a0:	3318      	adds	r3, #24
    29a2:	e7e7      	b.n	2974 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    29a4:	0758      	lsls	r0, r3, #29
    29a6:	d503      	bpl.n	29b0 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    29a8:	2304      	movs	r3, #4
    29aa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    29ac:	331a      	adds	r3, #26
    29ae:	e7e1      	b.n	2974 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    29b0:	07d8      	lsls	r0, r3, #31
    29b2:	d503      	bpl.n	29bc <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    29b4:	2301      	movs	r3, #1
    29b6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    29b8:	3312      	adds	r3, #18
    29ba:	e7db      	b.n	2974 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    29bc:	06d8      	lsls	r0, r3, #27
    29be:	d503      	bpl.n	29c8 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    29c0:	2310      	movs	r3, #16
    29c2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    29c4:	3332      	adds	r3, #50	; 0x32
    29c6:	e7d5      	b.n	2974 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    29c8:	069b      	lsls	r3, r3, #26
    29ca:	d503      	bpl.n	29d4 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    29cc:	2320      	movs	r3, #32
    29ce:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    29d0:	3321      	adds	r3, #33	; 0x21
    29d2:	e7cf      	b.n	2974 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    29d4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    29d6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    29d8:	2300      	movs	r3, #0
    29da:	e7cb      	b.n	2974 <usart_read_wait+0x8>

000029dc <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    29dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    29de:	46ce      	mov	lr, r9
    29e0:	4647      	mov	r7, r8
    29e2:	b580      	push	{r7, lr}
    29e4:	b083      	sub	sp, #12
    29e6:	0005      	movs	r5, r0
    29e8:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    29ea:	2017      	movs	r0, #23
	if (length == 0) {
    29ec:	2a00      	cmp	r2, #0
    29ee:	d104      	bne.n	29fa <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    29f0:	b003      	add	sp, #12
    29f2:	bc0c      	pop	{r2, r3}
    29f4:	4690      	mov	r8, r2
    29f6:	4699      	mov	r9, r3
    29f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    29fa:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    29fc:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    29fe:	2b00      	cmp	r3, #0
    2a00:	d0f6      	beq.n	29f0 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a02:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2a04:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2a06:	2b00      	cmp	r3, #0
    2a08:	d1fc      	bne.n	2a04 <usart_write_buffer_wait+0x28>
	while (length--) {
    2a0a:	3a01      	subs	r2, #1
    2a0c:	b293      	uxth	r3, r2
    2a0e:	4699      	mov	r9, r3
    2a10:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    2a12:	2701      	movs	r7, #1
	while (length--) {
    2a14:	4b1f      	ldr	r3, [pc, #124]	; (2a94 <usart_write_buffer_wait+0xb8>)
    2a16:	4698      	mov	r8, r3
    2a18:	e011      	b.n	2a3e <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    2a1a:	1c73      	adds	r3, r6, #1
    2a1c:	b29b      	uxth	r3, r3
    2a1e:	9a01      	ldr	r2, [sp, #4]
    2a20:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2a22:	796a      	ldrb	r2, [r5, #5]
    2a24:	2a01      	cmp	r2, #1
    2a26:	d017      	beq.n	2a58 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    2a28:	b289      	uxth	r1, r1
    2a2a:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    2a2c:	0028      	movs	r0, r5
    2a2e:	4b1a      	ldr	r3, [pc, #104]	; (2a98 <usart_write_buffer_wait+0xbc>)
    2a30:	4798      	blx	r3
	while (length--) {
    2a32:	464b      	mov	r3, r9
    2a34:	3b01      	subs	r3, #1
    2a36:	b29b      	uxth	r3, r3
    2a38:	4699      	mov	r9, r3
    2a3a:	4543      	cmp	r3, r8
    2a3c:	d013      	beq.n	2a66 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    2a3e:	7e23      	ldrb	r3, [r4, #24]
    2a40:	423b      	tst	r3, r7
    2a42:	d1ea      	bne.n	2a1a <usart_write_buffer_wait+0x3e>
    2a44:	4b13      	ldr	r3, [pc, #76]	; (2a94 <usart_write_buffer_wait+0xb8>)
    2a46:	7e22      	ldrb	r2, [r4, #24]
    2a48:	423a      	tst	r2, r7
    2a4a:	d1e6      	bne.n	2a1a <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    2a4c:	2b01      	cmp	r3, #1
    2a4e:	d019      	beq.n	2a84 <usart_write_buffer_wait+0xa8>
    2a50:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2a52:	2b00      	cmp	r3, #0
    2a54:	d1f7      	bne.n	2a46 <usart_write_buffer_wait+0x6a>
    2a56:	e7e0      	b.n	2a1a <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    2a58:	3602      	adds	r6, #2
    2a5a:	b2b6      	uxth	r6, r6
    2a5c:	9a01      	ldr	r2, [sp, #4]
    2a5e:	5cd3      	ldrb	r3, [r2, r3]
    2a60:	021b      	lsls	r3, r3, #8
    2a62:	4319      	orrs	r1, r3
    2a64:	e7e2      	b.n	2a2c <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    2a66:	7e23      	ldrb	r3, [r4, #24]
    2a68:	079b      	lsls	r3, r3, #30
    2a6a:	d40d      	bmi.n	2a88 <usart_write_buffer_wait+0xac>
    2a6c:	4b09      	ldr	r3, [pc, #36]	; (2a94 <usart_write_buffer_wait+0xb8>)
    2a6e:	2102      	movs	r1, #2
    2a70:	7e22      	ldrb	r2, [r4, #24]
    2a72:	420a      	tst	r2, r1
    2a74:	d10a      	bne.n	2a8c <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    2a76:	2b01      	cmp	r3, #1
    2a78:	d00a      	beq.n	2a90 <usart_write_buffer_wait+0xb4>
    2a7a:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2a7c:	2b00      	cmp	r3, #0
    2a7e:	d1f7      	bne.n	2a70 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    2a80:	2000      	movs	r0, #0
    2a82:	e7b5      	b.n	29f0 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    2a84:	2012      	movs	r0, #18
    2a86:	e7b3      	b.n	29f0 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    2a88:	2000      	movs	r0, #0
    2a8a:	e7b1      	b.n	29f0 <usart_write_buffer_wait+0x14>
    2a8c:	2000      	movs	r0, #0
    2a8e:	e7af      	b.n	29f0 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    2a90:	2012      	movs	r0, #18
    2a92:	e7ad      	b.n	29f0 <usart_write_buffer_wait+0x14>
    2a94:	0000ffff 	.word	0x0000ffff
    2a98:	00002941 	.word	0x00002941

00002a9c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2a9e:	0080      	lsls	r0, r0, #2
    2aa0:	4b62      	ldr	r3, [pc, #392]	; (2c2c <_usart_interrupt_handler+0x190>)
    2aa2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2aa4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2aa6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d1fc      	bne.n	2aa6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2aac:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2aae:	7da6      	ldrb	r6, [r4, #22]
    2ab0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2ab2:	2330      	movs	r3, #48	; 0x30
    2ab4:	5ceb      	ldrb	r3, [r5, r3]
    2ab6:	2231      	movs	r2, #49	; 0x31
    2ab8:	5caf      	ldrb	r7, [r5, r2]
    2aba:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2abc:	07f3      	lsls	r3, r6, #31
    2abe:	d522      	bpl.n	2b06 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2ac0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2ac2:	b29b      	uxth	r3, r3
    2ac4:	2b00      	cmp	r3, #0
    2ac6:	d01c      	beq.n	2b02 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2ac8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2aca:	7813      	ldrb	r3, [r2, #0]
    2acc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2ace:	1c51      	adds	r1, r2, #1
    2ad0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2ad2:	7969      	ldrb	r1, [r5, #5]
    2ad4:	2901      	cmp	r1, #1
    2ad6:	d00e      	beq.n	2af6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2ad8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2ada:	05db      	lsls	r3, r3, #23
    2adc:	0ddb      	lsrs	r3, r3, #23
    2ade:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2ae0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2ae2:	3b01      	subs	r3, #1
    2ae4:	b29b      	uxth	r3, r3
    2ae6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2ae8:	2b00      	cmp	r3, #0
    2aea:	d10c      	bne.n	2b06 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2aec:	3301      	adds	r3, #1
    2aee:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2af0:	3301      	adds	r3, #1
    2af2:	75a3      	strb	r3, [r4, #22]
    2af4:	e007      	b.n	2b06 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2af6:	7851      	ldrb	r1, [r2, #1]
    2af8:	0209      	lsls	r1, r1, #8
    2afa:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2afc:	3202      	adds	r2, #2
    2afe:	62aa      	str	r2, [r5, #40]	; 0x28
    2b00:	e7eb      	b.n	2ada <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2b02:	2301      	movs	r3, #1
    2b04:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2b06:	07b3      	lsls	r3, r6, #30
    2b08:	d506      	bpl.n	2b18 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2b0a:	2302      	movs	r3, #2
    2b0c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2b0e:	2200      	movs	r2, #0
    2b10:	3331      	adds	r3, #49	; 0x31
    2b12:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2b14:	07fb      	lsls	r3, r7, #31
    2b16:	d41a      	bmi.n	2b4e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2b18:	0773      	lsls	r3, r6, #29
    2b1a:	d565      	bpl.n	2be8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2b1c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2b1e:	b29b      	uxth	r3, r3
    2b20:	2b00      	cmp	r3, #0
    2b22:	d05f      	beq.n	2be4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2b24:	8b63      	ldrh	r3, [r4, #26]
    2b26:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2b28:	071a      	lsls	r2, r3, #28
    2b2a:	d414      	bmi.n	2b56 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2b2c:	223f      	movs	r2, #63	; 0x3f
    2b2e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2b30:	2b00      	cmp	r3, #0
    2b32:	d034      	beq.n	2b9e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2b34:	079a      	lsls	r2, r3, #30
    2b36:	d511      	bpl.n	2b5c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2b38:	221a      	movs	r2, #26
    2b3a:	2332      	movs	r3, #50	; 0x32
    2b3c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2b3e:	3b30      	subs	r3, #48	; 0x30
    2b40:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2b42:	077b      	lsls	r3, r7, #29
    2b44:	d550      	bpl.n	2be8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2b46:	0028      	movs	r0, r5
    2b48:	696b      	ldr	r3, [r5, #20]
    2b4a:	4798      	blx	r3
    2b4c:	e04c      	b.n	2be8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2b4e:	0028      	movs	r0, r5
    2b50:	68eb      	ldr	r3, [r5, #12]
    2b52:	4798      	blx	r3
    2b54:	e7e0      	b.n	2b18 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2b56:	2237      	movs	r2, #55	; 0x37
    2b58:	4013      	ands	r3, r2
    2b5a:	e7e9      	b.n	2b30 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2b5c:	075a      	lsls	r2, r3, #29
    2b5e:	d505      	bpl.n	2b6c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2b60:	221e      	movs	r2, #30
    2b62:	2332      	movs	r3, #50	; 0x32
    2b64:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2b66:	3b2e      	subs	r3, #46	; 0x2e
    2b68:	8363      	strh	r3, [r4, #26]
    2b6a:	e7ea      	b.n	2b42 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2b6c:	07da      	lsls	r2, r3, #31
    2b6e:	d505      	bpl.n	2b7c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2b70:	2213      	movs	r2, #19
    2b72:	2332      	movs	r3, #50	; 0x32
    2b74:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2b76:	3b31      	subs	r3, #49	; 0x31
    2b78:	8363      	strh	r3, [r4, #26]
    2b7a:	e7e2      	b.n	2b42 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2b7c:	06da      	lsls	r2, r3, #27
    2b7e:	d505      	bpl.n	2b8c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2b80:	2242      	movs	r2, #66	; 0x42
    2b82:	2332      	movs	r3, #50	; 0x32
    2b84:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2b86:	3b22      	subs	r3, #34	; 0x22
    2b88:	8363      	strh	r3, [r4, #26]
    2b8a:	e7da      	b.n	2b42 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2b8c:	2220      	movs	r2, #32
    2b8e:	421a      	tst	r2, r3
    2b90:	d0d7      	beq.n	2b42 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2b92:	3221      	adds	r2, #33	; 0x21
    2b94:	2332      	movs	r3, #50	; 0x32
    2b96:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2b98:	3b12      	subs	r3, #18
    2b9a:	8363      	strh	r3, [r4, #26]
    2b9c:	e7d1      	b.n	2b42 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2b9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2ba0:	05db      	lsls	r3, r3, #23
    2ba2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2ba4:	b2da      	uxtb	r2, r3
    2ba6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2ba8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2baa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2bac:	1c51      	adds	r1, r2, #1
    2bae:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2bb0:	7969      	ldrb	r1, [r5, #5]
    2bb2:	2901      	cmp	r1, #1
    2bb4:	d010      	beq.n	2bd8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2bb6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2bb8:	3b01      	subs	r3, #1
    2bba:	b29b      	uxth	r3, r3
    2bbc:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2bbe:	2b00      	cmp	r3, #0
    2bc0:	d112      	bne.n	2be8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2bc2:	3304      	adds	r3, #4
    2bc4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2bc6:	2200      	movs	r2, #0
    2bc8:	332e      	adds	r3, #46	; 0x2e
    2bca:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2bcc:	07bb      	lsls	r3, r7, #30
    2bce:	d50b      	bpl.n	2be8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2bd0:	0028      	movs	r0, r5
    2bd2:	692b      	ldr	r3, [r5, #16]
    2bd4:	4798      	blx	r3
    2bd6:	e007      	b.n	2be8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2bd8:	0a1b      	lsrs	r3, r3, #8
    2bda:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2bdc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2bde:	3301      	adds	r3, #1
    2be0:	626b      	str	r3, [r5, #36]	; 0x24
    2be2:	e7e8      	b.n	2bb6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2be4:	2304      	movs	r3, #4
    2be6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2be8:	06f3      	lsls	r3, r6, #27
    2bea:	d504      	bpl.n	2bf6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2bec:	2310      	movs	r3, #16
    2bee:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2bf0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2bf2:	06fb      	lsls	r3, r7, #27
    2bf4:	d40e      	bmi.n	2c14 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2bf6:	06b3      	lsls	r3, r6, #26
    2bf8:	d504      	bpl.n	2c04 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2bfa:	2320      	movs	r3, #32
    2bfc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2bfe:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2c00:	073b      	lsls	r3, r7, #28
    2c02:	d40b      	bmi.n	2c1c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2c04:	0733      	lsls	r3, r6, #28
    2c06:	d504      	bpl.n	2c12 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2c08:	2308      	movs	r3, #8
    2c0a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2c0c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2c0e:	06bb      	lsls	r3, r7, #26
    2c10:	d408      	bmi.n	2c24 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2c14:	0028      	movs	r0, r5
    2c16:	69eb      	ldr	r3, [r5, #28]
    2c18:	4798      	blx	r3
    2c1a:	e7ec      	b.n	2bf6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2c1c:	0028      	movs	r0, r5
    2c1e:	69ab      	ldr	r3, [r5, #24]
    2c20:	4798      	blx	r3
    2c22:	e7ef      	b.n	2c04 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2c24:	6a2b      	ldr	r3, [r5, #32]
    2c26:	0028      	movs	r0, r5
    2c28:	4798      	blx	r3
}
    2c2a:	e7f2      	b.n	2c12 <_usart_interrupt_handler+0x176>
    2c2c:	20003d14 	.word	0x20003d14

00002c30 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2c30:	4770      	bx	lr
	...

00002c34 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2c34:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2c36:	4b0a      	ldr	r3, [pc, #40]	; (2c60 <_sercom_set_handler+0x2c>)
    2c38:	781b      	ldrb	r3, [r3, #0]
    2c3a:	2b00      	cmp	r3, #0
    2c3c:	d10c      	bne.n	2c58 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2c3e:	4f09      	ldr	r7, [pc, #36]	; (2c64 <_sercom_set_handler+0x30>)
    2c40:	4e09      	ldr	r6, [pc, #36]	; (2c68 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    2c42:	4d0a      	ldr	r5, [pc, #40]	; (2c6c <_sercom_set_handler+0x38>)
    2c44:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2c46:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2c48:	195a      	adds	r2, r3, r5
    2c4a:	6014      	str	r4, [r2, #0]
    2c4c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2c4e:	2b18      	cmp	r3, #24
    2c50:	d1f9      	bne.n	2c46 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    2c52:	2201      	movs	r2, #1
    2c54:	4b02      	ldr	r3, [pc, #8]	; (2c60 <_sercom_set_handler+0x2c>)
    2c56:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2c58:	0080      	lsls	r0, r0, #2
    2c5a:	4b02      	ldr	r3, [pc, #8]	; (2c64 <_sercom_set_handler+0x30>)
    2c5c:	50c1      	str	r1, [r0, r3]
}
    2c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c60:	20003ca4 	.word	0x20003ca4
    2c64:	20003ca8 	.word	0x20003ca8
    2c68:	00002c31 	.word	0x00002c31
    2c6c:	20003d14 	.word	0x20003d14

00002c70 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2c70:	b500      	push	{lr}
    2c72:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2c74:	2308      	movs	r3, #8
    2c76:	466a      	mov	r2, sp
    2c78:	7013      	strb	r3, [r2, #0]
    2c7a:	3301      	adds	r3, #1
    2c7c:	7053      	strb	r3, [r2, #1]
    2c7e:	3301      	adds	r3, #1
    2c80:	7093      	strb	r3, [r2, #2]
    2c82:	3301      	adds	r3, #1
    2c84:	70d3      	strb	r3, [r2, #3]
    2c86:	3301      	adds	r3, #1
    2c88:	7113      	strb	r3, [r2, #4]
    2c8a:	3301      	adds	r3, #1
    2c8c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2c8e:	4b03      	ldr	r3, [pc, #12]	; (2c9c <_sercom_get_interrupt_vector+0x2c>)
    2c90:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2c92:	466b      	mov	r3, sp
    2c94:	5618      	ldrsb	r0, [r3, r0]
}
    2c96:	b003      	add	sp, #12
    2c98:	bd00      	pop	{pc}
    2c9a:	46c0      	nop			; (mov r8, r8)
    2c9c:	00000ef5 	.word	0x00000ef5

00002ca0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2ca0:	b510      	push	{r4, lr}
    2ca2:	4b02      	ldr	r3, [pc, #8]	; (2cac <SERCOM0_Handler+0xc>)
    2ca4:	681b      	ldr	r3, [r3, #0]
    2ca6:	2000      	movs	r0, #0
    2ca8:	4798      	blx	r3
    2caa:	bd10      	pop	{r4, pc}
    2cac:	20003ca8 	.word	0x20003ca8

00002cb0 <SERCOM1_Handler>:
    2cb0:	b510      	push	{r4, lr}
    2cb2:	4b02      	ldr	r3, [pc, #8]	; (2cbc <SERCOM1_Handler+0xc>)
    2cb4:	685b      	ldr	r3, [r3, #4]
    2cb6:	2001      	movs	r0, #1
    2cb8:	4798      	blx	r3
    2cba:	bd10      	pop	{r4, pc}
    2cbc:	20003ca8 	.word	0x20003ca8

00002cc0 <SERCOM2_Handler>:
    2cc0:	b510      	push	{r4, lr}
    2cc2:	4b02      	ldr	r3, [pc, #8]	; (2ccc <SERCOM2_Handler+0xc>)
    2cc4:	689b      	ldr	r3, [r3, #8]
    2cc6:	2002      	movs	r0, #2
    2cc8:	4798      	blx	r3
    2cca:	bd10      	pop	{r4, pc}
    2ccc:	20003ca8 	.word	0x20003ca8

00002cd0 <SERCOM3_Handler>:
    2cd0:	b510      	push	{r4, lr}
    2cd2:	4b02      	ldr	r3, [pc, #8]	; (2cdc <SERCOM3_Handler+0xc>)
    2cd4:	68db      	ldr	r3, [r3, #12]
    2cd6:	2003      	movs	r0, #3
    2cd8:	4798      	blx	r3
    2cda:	bd10      	pop	{r4, pc}
    2cdc:	20003ca8 	.word	0x20003ca8

00002ce0 <SERCOM4_Handler>:
    2ce0:	b510      	push	{r4, lr}
    2ce2:	4b02      	ldr	r3, [pc, #8]	; (2cec <SERCOM4_Handler+0xc>)
    2ce4:	691b      	ldr	r3, [r3, #16]
    2ce6:	2004      	movs	r0, #4
    2ce8:	4798      	blx	r3
    2cea:	bd10      	pop	{r4, pc}
    2cec:	20003ca8 	.word	0x20003ca8

00002cf0 <SERCOM5_Handler>:
    2cf0:	b510      	push	{r4, lr}
    2cf2:	4b02      	ldr	r3, [pc, #8]	; (2cfc <SERCOM5_Handler+0xc>)
    2cf4:	695b      	ldr	r3, [r3, #20]
    2cf6:	2005      	movs	r0, #5
    2cf8:	4798      	blx	r3
    2cfa:	bd10      	pop	{r4, pc}
    2cfc:	20003ca8 	.word	0x20003ca8

00002d00 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    2d00:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    2d02:	2000      	movs	r0, #0
    2d04:	4b08      	ldr	r3, [pc, #32]	; (2d28 <delay_init+0x28>)
    2d06:	4798      	blx	r3
    2d08:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    2d0a:	4c08      	ldr	r4, [pc, #32]	; (2d2c <delay_init+0x2c>)
    2d0c:	21fa      	movs	r1, #250	; 0xfa
    2d0e:	0089      	lsls	r1, r1, #2
    2d10:	47a0      	blx	r4
    2d12:	4b07      	ldr	r3, [pc, #28]	; (2d30 <delay_init+0x30>)
    2d14:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    2d16:	4907      	ldr	r1, [pc, #28]	; (2d34 <delay_init+0x34>)
    2d18:	0028      	movs	r0, r5
    2d1a:	47a0      	blx	r4
    2d1c:	4b06      	ldr	r3, [pc, #24]	; (2d38 <delay_init+0x38>)
    2d1e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    2d20:	2205      	movs	r2, #5
    2d22:	4b06      	ldr	r3, [pc, #24]	; (2d3c <delay_init+0x3c>)
    2d24:	601a      	str	r2, [r3, #0]
}
    2d26:	bd70      	pop	{r4, r5, r6, pc}
    2d28:	00003775 	.word	0x00003775
    2d2c:	00004429 	.word	0x00004429
    2d30:	20000028 	.word	0x20000028
    2d34:	000f4240 	.word	0x000f4240
    2d38:	2000002c 	.word	0x2000002c
    2d3c:	e000e010 	.word	0xe000e010

00002d40 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    2d40:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    2d42:	4b08      	ldr	r3, [pc, #32]	; (2d64 <delay_cycles_ms+0x24>)
    2d44:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    2d46:	4a08      	ldr	r2, [pc, #32]	; (2d68 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    2d48:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    2d4a:	2180      	movs	r1, #128	; 0x80
    2d4c:	0249      	lsls	r1, r1, #9
	while (n--) {
    2d4e:	3801      	subs	r0, #1
    2d50:	d307      	bcc.n	2d62 <delay_cycles_ms+0x22>
	if (n > 0) {
    2d52:	2c00      	cmp	r4, #0
    2d54:	d0fb      	beq.n	2d4e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    2d56:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    2d58:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    2d5a:	6813      	ldr	r3, [r2, #0]
    2d5c:	420b      	tst	r3, r1
    2d5e:	d0fc      	beq.n	2d5a <delay_cycles_ms+0x1a>
    2d60:	e7f5      	b.n	2d4e <delay_cycles_ms+0xe>
	}
}
    2d62:	bd30      	pop	{r4, r5, pc}
    2d64:	20000028 	.word	0x20000028
    2d68:	e000e010 	.word	0xe000e010

00002d6c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2d6c:	4b0c      	ldr	r3, [pc, #48]	; (2da0 <cpu_irq_enter_critical+0x34>)
    2d6e:	681b      	ldr	r3, [r3, #0]
    2d70:	2b00      	cmp	r3, #0
    2d72:	d106      	bne.n	2d82 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2d74:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2d78:	2b00      	cmp	r3, #0
    2d7a:	d007      	beq.n	2d8c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2d7c:	2200      	movs	r2, #0
    2d7e:	4b09      	ldr	r3, [pc, #36]	; (2da4 <cpu_irq_enter_critical+0x38>)
    2d80:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2d82:	4a07      	ldr	r2, [pc, #28]	; (2da0 <cpu_irq_enter_critical+0x34>)
    2d84:	6813      	ldr	r3, [r2, #0]
    2d86:	3301      	adds	r3, #1
    2d88:	6013      	str	r3, [r2, #0]
}
    2d8a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2d8c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2d8e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2d92:	2200      	movs	r2, #0
    2d94:	4b04      	ldr	r3, [pc, #16]	; (2da8 <cpu_irq_enter_critical+0x3c>)
    2d96:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2d98:	3201      	adds	r2, #1
    2d9a:	4b02      	ldr	r3, [pc, #8]	; (2da4 <cpu_irq_enter_critical+0x38>)
    2d9c:	701a      	strb	r2, [r3, #0]
    2d9e:	e7f0      	b.n	2d82 <cpu_irq_enter_critical+0x16>
    2da0:	20003cc0 	.word	0x20003cc0
    2da4:	20003cc4 	.word	0x20003cc4
    2da8:	20000030 	.word	0x20000030

00002dac <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2dac:	4b08      	ldr	r3, [pc, #32]	; (2dd0 <cpu_irq_leave_critical+0x24>)
    2dae:	681a      	ldr	r2, [r3, #0]
    2db0:	3a01      	subs	r2, #1
    2db2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2db4:	681b      	ldr	r3, [r3, #0]
    2db6:	2b00      	cmp	r3, #0
    2db8:	d109      	bne.n	2dce <cpu_irq_leave_critical+0x22>
    2dba:	4b06      	ldr	r3, [pc, #24]	; (2dd4 <cpu_irq_leave_critical+0x28>)
    2dbc:	781b      	ldrb	r3, [r3, #0]
    2dbe:	2b00      	cmp	r3, #0
    2dc0:	d005      	beq.n	2dce <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2dc2:	2201      	movs	r2, #1
    2dc4:	4b04      	ldr	r3, [pc, #16]	; (2dd8 <cpu_irq_leave_critical+0x2c>)
    2dc6:	701a      	strb	r2, [r3, #0]
    2dc8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2dcc:	b662      	cpsie	i
	}
}
    2dce:	4770      	bx	lr
    2dd0:	20003cc0 	.word	0x20003cc0
    2dd4:	20003cc4 	.word	0x20003cc4
    2dd8:	20000030 	.word	0x20000030

00002ddc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dde:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    2de0:	ac01      	add	r4, sp, #4
    2de2:	2501      	movs	r5, #1
    2de4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    2de6:	2700      	movs	r7, #0
    2de8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2dea:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    2dec:	0021      	movs	r1, r4
    2dee:	2015      	movs	r0, #21
    2df0:	4e0a      	ldr	r6, [pc, #40]	; (2e1c <system_board_init+0x40>)
    2df2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2df4:	2280      	movs	r2, #128	; 0x80
    2df6:	0392      	lsls	r2, r2, #14
    2df8:	4b09      	ldr	r3, [pc, #36]	; (2e20 <system_board_init+0x44>)
    2dfa:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2dfc:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    2dfe:	0021      	movs	r1, r4
    2e00:	202c      	movs	r0, #44	; 0x2c
    2e02:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2e04:	2280      	movs	r2, #128	; 0x80
    2e06:	0152      	lsls	r2, r2, #5
    2e08:	4b06      	ldr	r3, [pc, #24]	; (2e24 <system_board_init+0x48>)
    2e0a:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2e0c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    2e0e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    2e10:	0021      	movs	r1, r4
    2e12:	2002      	movs	r0, #2
    2e14:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    2e16:	b003      	add	sp, #12
    2e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e1a:	46c0      	nop			; (mov r8, r8)
    2e1c:	0000349d 	.word	0x0000349d
    2e20:	40002800 	.word	0x40002800
    2e24:	40002880 	.word	0x40002880

00002e28 <_adc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    2e28:	2000      	movs	r0, #0
    2e2a:	4770      	bx	lr

00002e2c <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    2e2c:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    2e2e:	2300      	movs	r3, #0
    2e30:	2200      	movs	r2, #0
    2e32:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
    2e34:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
    2e36:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    2e38:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    2e3a:	2100      	movs	r1, #0
    2e3c:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    2e3e:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
    2e40:	61c3      	str	r3, [r0, #28]
#if SAMR30
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
    2e42:	2401      	movs	r4, #1
    2e44:	7104      	strb	r4, [r0, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
    2e46:	24c0      	movs	r4, #192	; 0xc0
    2e48:	0164      	lsls	r4, r4, #5
    2e4a:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    2e4c:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    2e4e:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
    2e50:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
    2e52:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
    2e54:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    2e56:	242a      	movs	r4, #42	; 0x2a
    2e58:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
    2e5a:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
    2e5c:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
    2e5e:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
    2e60:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
    2e62:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
    2e64:	3c06      	subs	r4, #6
    2e66:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    2e68:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    2e6a:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    2e6c:	7541      	strb	r1, [r0, #21]
}
    2e6e:	bd10      	pop	{r4, pc}

00002e70 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    2e70:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e72:	46ce      	mov	lr, r9
    2e74:	b500      	push	{lr}
    2e76:	b09a      	sub	sp, #104	; 0x68
    2e78:	0005      	movs	r5, r0
    2e7a:	000c      	movs	r4, r1
    2e7c:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
    2e7e:	0008      	movs	r0, r1
    2e80:	4bb2      	ldr	r3, [pc, #712]	; (314c <adc_init+0x2dc>)
    2e82:	4798      	blx	r3

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    2e84:	602c      	str	r4, [r5, #0]
    2e86:	4ab2      	ldr	r2, [pc, #712]	; (3150 <adc_init+0x2e0>)
    2e88:	6a13      	ldr	r3, [r2, #32]
    2e8a:	2108      	movs	r1, #8
    2e8c:	430b      	orrs	r3, r1
    2e8e:	6213      	str	r3, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    2e90:	7822      	ldrb	r2, [r4, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2e92:	2305      	movs	r3, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    2e94:	07d2      	lsls	r2, r2, #31
    2e96:	d504      	bpl.n	2ea2 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
    2e98:	0018      	movs	r0, r3
    2e9a:	b01a      	add	sp, #104	; 0x68
    2e9c:	bc04      	pop	{r2}
    2e9e:	4691      	mov	r9, r2
    2ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2ea2:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    2ea4:	8c13      	ldrh	r3, [r2, #32]
    2ea6:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2ea8:	2b00      	cmp	r3, #0
    2eaa:	d1fb      	bne.n	2ea4 <adc_init+0x34>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    2eac:	7822      	ldrb	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    2eae:	331c      	adds	r3, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    2eb0:	0792      	lsls	r2, r2, #30
    2eb2:	d4f1      	bmi.n	2e98 <adc_init+0x28>
	module_inst->reference = config->reference;
    2eb4:	7873      	ldrb	r3, [r6, #1]
    2eb6:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
    2eb8:	2b00      	cmp	r3, #0
    2eba:	d104      	bne.n	2ec6 <adc_init+0x56>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
    2ebc:	4aa5      	ldr	r2, [pc, #660]	; (3154 <adc_init+0x2e4>)
    2ebe:	69d3      	ldr	r3, [r2, #28]
    2ec0:	2104      	movs	r1, #4
    2ec2:	430b      	orrs	r3, r1
    2ec4:	61d3      	str	r3, [r2, #28]
		module_inst->callback[i] = NULL;
    2ec6:	2300      	movs	r3, #0
    2ec8:	60ab      	str	r3, [r5, #8]
    2eca:	60eb      	str	r3, [r5, #12]
    2ecc:	612b      	str	r3, [r5, #16]
	module_inst->registered_callback_mask = 0;
    2ece:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
    2ed0:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
    2ed2:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
    2ed4:	772b      	strb	r3, [r5, #28]
	_adc_instances[instance] = module_inst;
    2ed6:	0080      	lsls	r0, r0, #2
    2ed8:	4b9f      	ldr	r3, [pc, #636]	; (3158 <adc_init+0x2e8>)
    2eda:	50c5      	str	r5, [r0, r3]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    2edc:	232a      	movs	r3, #42	; 0x2a
    2ede:	5cf3      	ldrb	r3, [r6, r3]
    2ee0:	2b00      	cmp	r3, #0
    2ee2:	d105      	bne.n	2ef0 <adc_init+0x80>
    2ee4:	7b33      	ldrb	r3, [r6, #12]
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	d102      	bne.n	2ef0 <adc_init+0x80>
		module_inst->software_trigger = true;
    2eea:	3301      	adds	r3, #1
    2eec:	776b      	strb	r3, [r5, #29]
    2eee:	e001      	b.n	2ef4 <adc_init+0x84>
		module_inst->software_trigger = false;
    2ef0:	2300      	movs	r3, #0
    2ef2:	776b      	strb	r3, [r5, #29]
	Adc *const adc_module = module_inst->hw;
    2ef4:	682f      	ldr	r7, [r5, #0]
	gclk_chan_conf.source_generator = config->clock_source;
    2ef6:	7833      	ldrb	r3, [r6, #0]
    2ef8:	466a      	mov	r2, sp
    2efa:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
    2efc:	4669      	mov	r1, sp
    2efe:	201e      	movs	r0, #30
    2f00:	4b96      	ldr	r3, [pc, #600]	; (315c <adc_init+0x2ec>)
    2f02:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
    2f04:	201e      	movs	r0, #30
    2f06:	4b96      	ldr	r3, [pc, #600]	; (3160 <adc_init+0x2f0>)
    2f08:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
    2f0a:	7934      	ldrb	r4, [r6, #4]
	const uint32_t pinmapping[] = {
    2f0c:	2260      	movs	r2, #96	; 0x60
    2f0e:	4995      	ldr	r1, [pc, #596]	; (3164 <adc_init+0x2f4>)
    2f10:	a802      	add	r0, sp, #8
    2f12:	4b95      	ldr	r3, [pc, #596]	; (3168 <adc_init+0x2f8>)
    2f14:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
    2f16:	2c13      	cmp	r4, #19
    2f18:	d90b      	bls.n	2f32 <adc_init+0xc2>
	_adc_configure_ain_pin(index, config->negative_input);
    2f1a:	88f4      	ldrh	r4, [r6, #6]
	const uint32_t pinmapping[] = {
    2f1c:	2260      	movs	r2, #96	; 0x60
    2f1e:	4991      	ldr	r1, [pc, #580]	; (3164 <adc_init+0x2f4>)
    2f20:	a802      	add	r0, sp, #8
    2f22:	4b91      	ldr	r3, [pc, #580]	; (3168 <adc_init+0x2f8>)
    2f24:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
    2f26:	2c13      	cmp	r4, #19
    2f28:	d911      	bls.n	2f4e <adc_init+0xde>
    2f2a:	2400      	movs	r4, #0
	const uint32_t pinmapping[] = {
    2f2c:	4b8e      	ldr	r3, [pc, #568]	; (3168 <adc_init+0x2f8>)
    2f2e:	4699      	mov	r9, r3
    2f30:	e01e      	b.n	2f70 <adc_init+0x100>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2f32:	00a4      	lsls	r4, r4, #2
    2f34:	ab02      	add	r3, sp, #8
    2f36:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2f38:	a901      	add	r1, sp, #4
    2f3a:	2300      	movs	r3, #0
    2f3c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    2f3e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2f40:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2f42:	3301      	adds	r3, #1
    2f44:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    2f46:	b2c0      	uxtb	r0, r0
    2f48:	4b88      	ldr	r3, [pc, #544]	; (316c <adc_init+0x2fc>)
    2f4a:	4798      	blx	r3
    2f4c:	e7e5      	b.n	2f1a <adc_init+0xaa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2f4e:	00a4      	lsls	r4, r4, #2
    2f50:	ab02      	add	r3, sp, #8
    2f52:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2f54:	a901      	add	r1, sp, #4
    2f56:	2300      	movs	r3, #0
    2f58:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    2f5a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2f5c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2f5e:	3301      	adds	r3, #1
    2f60:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    2f62:	b2c0      	uxtb	r0, r0
    2f64:	4b81      	ldr	r3, [pc, #516]	; (316c <adc_init+0x2fc>)
    2f66:	4798      	blx	r3
    2f68:	e7df      	b.n	2f2a <adc_init+0xba>
    2f6a:	3401      	adds	r4, #1
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
    2f6c:	2c14      	cmp	r4, #20
    2f6e:	d018      	beq.n	2fa2 <adc_init+0x132>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
    2f70:	2301      	movs	r3, #1
    2f72:	40a3      	lsls	r3, r4
    2f74:	6932      	ldr	r2, [r6, #16]
    2f76:	421a      	tst	r2, r3
    2f78:	d0f7      	beq.n	2f6a <adc_init+0xfa>
	const uint32_t pinmapping[] = {
    2f7a:	2260      	movs	r2, #96	; 0x60
    2f7c:	4979      	ldr	r1, [pc, #484]	; (3164 <adc_init+0x2f4>)
    2f7e:	a802      	add	r0, sp, #8
    2f80:	47c8      	blx	r9
	if (pin <= _adc_extchannel_msb[index]) {
    2f82:	2c13      	cmp	r4, #19
    2f84:	d8f1      	bhi.n	2f6a <adc_init+0xfa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2f86:	00a3      	lsls	r3, r4, #2
    2f88:	aa02      	add	r2, sp, #8
    2f8a:	5898      	ldr	r0, [r3, r2]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2f8c:	a901      	add	r1, sp, #4
    2f8e:	2300      	movs	r3, #0
    2f90:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    2f92:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2f94:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2f96:	3301      	adds	r3, #1
    2f98:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    2f9a:	b2c0      	uxtb	r0, r0
    2f9c:	4b73      	ldr	r3, [pc, #460]	; (316c <adc_init+0x2fc>)
    2f9e:	4798      	blx	r3
    2fa0:	e7e3      	b.n	2f6a <adc_init+0xfa>
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
    2fa2:	7b73      	ldrb	r3, [r6, #13]
    2fa4:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
    2fa6:	7bb2      	ldrb	r2, [r6, #14]
    2fa8:	01d2      	lsls	r2, r2, #7
    2faa:	4313      	orrs	r3, r2
    2fac:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
    2fae:	703b      	strb	r3, [r7, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
    2fb0:	7d33      	ldrb	r3, [r6, #20]
    2fb2:	01db      	lsls	r3, r3, #7
			| (config->reference);
    2fb4:	7872      	ldrb	r2, [r6, #1]
    2fb6:	4313      	orrs	r3, r2
    2fb8:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    2fba:	70bb      	strb	r3, [r7, #2]
	switch (config->resolution) {
    2fbc:	78f3      	ldrb	r3, [r6, #3]
    2fbe:	2b34      	cmp	r3, #52	; 0x34
    2fc0:	d900      	bls.n	2fc4 <adc_init+0x154>
    2fc2:	e140      	b.n	3246 <adc_init+0x3d6>
    2fc4:	009b      	lsls	r3, r3, #2
    2fc6:	4a6a      	ldr	r2, [pc, #424]	; (3170 <adc_init+0x300>)
    2fc8:	58d3      	ldr	r3, [r2, r3]
    2fca:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    2fcc:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
    2fce:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_4;
    2fd0:	2102      	movs	r1, #2
    2fd2:	e01a      	b.n	300a <adc_init+0x19a>
		adjres = config->divide_result;
    2fd4:	7a71      	ldrb	r1, [r6, #9]
		accumulate = config->accumulate_samples;
    2fd6:	7a32      	ldrb	r2, [r6, #8]
		resolution = ADC_RESOLUTION_16BIT;
    2fd8:	2010      	movs	r0, #16
    2fda:	e016      	b.n	300a <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    2fdc:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
    2fde:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
    2fe0:	2101      	movs	r1, #1
    2fe2:	e012      	b.n	300a <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    2fe4:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
    2fe6:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    2fe8:	2100      	movs	r1, #0
    2fea:	e00e      	b.n	300a <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2fec:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
    2fee:	2030      	movs	r0, #48	; 0x30
	uint8_t adjres = 0;
    2ff0:	2100      	movs	r1, #0
    2ff2:	e00a      	b.n	300a <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2ff4:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
    2ff6:	2020      	movs	r0, #32
	uint8_t adjres = 0;
    2ff8:	2100      	movs	r1, #0
    2ffa:	e006      	b.n	300a <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2ffc:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
    2ffe:	2000      	movs	r0, #0
	uint8_t adjres = 0;
    3000:	2100      	movs	r1, #0
    3002:	e002      	b.n	300a <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    3004:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
    3006:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
    3008:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    300a:	0109      	lsls	r1, r1, #4
    300c:	2370      	movs	r3, #112	; 0x70
    300e:	400b      	ands	r3, r1
    3010:	4313      	orrs	r3, r2
    3012:	733b      	strb	r3, [r7, #12]
	Adc *const adc_module = module_inst->hw;
    3014:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    3016:	8c13      	ldrh	r3, [r2, #32]
    3018:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    301a:	2b00      	cmp	r3, #0
    301c:	d1fb      	bne.n	3016 <adc_init+0x1a6>
	if (config->sample_length > 63) {
    301e:	7d72      	ldrb	r2, [r6, #21]
		return STATUS_ERR_INVALID_ARG;
    3020:	3317      	adds	r3, #23
	if (config->sample_length > 63) {
    3022:	2a3f      	cmp	r2, #63	; 0x3f
    3024:	d900      	bls.n	3028 <adc_init+0x1b8>
    3026:	e737      	b.n	2e98 <adc_init+0x28>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
    3028:	7bf3      	ldrb	r3, [r6, #15]
    302a:	01db      	lsls	r3, r3, #7
    302c:	431a      	orrs	r2, r3
    302e:	b2d2      	uxtb	r2, r2
		adc_module->SAMPCTRL.reg =
    3030:	737a      	strb	r2, [r7, #13]
	Adc *const adc_module = module_inst->hw;
    3032:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    3034:	8c13      	ldrh	r3, [r2, #32]
    3036:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    3038:	2b00      	cmp	r3, #0
    303a:	d1fb      	bne.n	3034 <adc_init+0x1c4>
			config->clock_prescaler;
    303c:	78b3      	ldrb	r3, [r6, #2]
	adc_module->CTRLB.reg =
    303e:	707b      	strb	r3, [r7, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
    3040:	2324      	movs	r3, #36	; 0x24
    3042:	5cf3      	ldrb	r3, [r6, r3]
    3044:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
    3046:	7b32      	ldrb	r2, [r6, #12]
    3048:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
    304a:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
    304c:	7af3      	ldrb	r3, [r6, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
    304e:	4313      	orrs	r3, r2
    3050:	7ab2      	ldrb	r2, [r6, #10]
    3052:	0052      	lsls	r2, r2, #1
    3054:	4313      	orrs	r3, r2
    3056:	4303      	orrs	r3, r0
	adc_module->CTRLC.reg =
    3058:	817b      	strh	r3, [r7, #10]
	Adc *const adc_module = module_inst->hw;
    305a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    305c:	8c13      	ldrh	r3, [r2, #32]
    305e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    3060:	2b00      	cmp	r3, #0
    3062:	d1fb      	bne.n	305c <adc_init+0x1ec>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    3064:	8b32      	ldrh	r2, [r6, #24]
    3066:	2a00      	cmp	r2, #0
    3068:	d020      	beq.n	30ac <adc_init+0x23c>
		switch (resolution) {
    306a:	2810      	cmp	r0, #16
    306c:	d100      	bne.n	3070 <adc_init+0x200>
    306e:	e0c9      	b.n	3204 <adc_init+0x394>
    3070:	d800      	bhi.n	3074 <adc_init+0x204>
    3072:	e083      	b.n	317c <adc_init+0x30c>
    3074:	2820      	cmp	r0, #32
    3076:	d100      	bne.n	307a <adc_init+0x20a>
    3078:	e0a3      	b.n	31c2 <adc_init+0x352>
    307a:	2830      	cmp	r0, #48	; 0x30
    307c:	d116      	bne.n	30ac <adc_init+0x23c>
			if (config->differential_mode &&
    307e:	7af3      	ldrb	r3, [r6, #11]
    3080:	2b00      	cmp	r3, #0
    3082:	d00a      	beq.n	309a <adc_init+0x22a>
					(config->window.window_lower_value > 127 ||
    3084:	69f1      	ldr	r1, [r6, #28]
    3086:	3180      	adds	r1, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    3088:	2317      	movs	r3, #23
			if (config->differential_mode &&
    308a:	29ff      	cmp	r1, #255	; 0xff
    308c:	d900      	bls.n	3090 <adc_init+0x220>
    308e:	e703      	b.n	2e98 <adc_init+0x28>
					config->window.window_lower_value < -128 ||
    3090:	6a31      	ldr	r1, [r6, #32]
    3092:	3180      	adds	r1, #128	; 0x80
    3094:	29ff      	cmp	r1, #255	; 0xff
    3096:	d900      	bls.n	309a <adc_init+0x22a>
    3098:	e6fe      	b.n	2e98 <adc_init+0x28>
				return STATUS_ERR_INVALID_ARG;
    309a:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 255 ||
    309c:	69f1      	ldr	r1, [r6, #28]
    309e:	29ff      	cmp	r1, #255	; 0xff
    30a0:	dd00      	ble.n	30a4 <adc_init+0x234>
    30a2:	e6f9      	b.n	2e98 <adc_init+0x28>
    30a4:	6a31      	ldr	r1, [r6, #32]
    30a6:	29ff      	cmp	r1, #255	; 0xff
    30a8:	dd00      	ble.n	30ac <adc_init+0x23c>
    30aa:	e6f5      	b.n	2e98 <adc_init+0x28>
	adc_module->CTRLC.reg |= config->window.window_mode;
    30ac:	897b      	ldrh	r3, [r7, #10]
    30ae:	431a      	orrs	r2, r3
    30b0:	817a      	strh	r2, [r7, #10]
	Adc *const adc_module = module_inst->hw;
    30b2:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    30b4:	8c13      	ldrh	r3, [r2, #32]
    30b6:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    30b8:	2b00      	cmp	r3, #0
    30ba:	d1fb      	bne.n	30b4 <adc_init+0x244>
	adc_module->WINLT.reg =
    30bc:	8bb3      	ldrh	r3, [r6, #28]
    30be:	81fb      	strh	r3, [r7, #14]
	Adc *const adc_module = module_inst->hw;
    30c0:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    30c2:	8c13      	ldrh	r3, [r2, #32]
    30c4:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    30c6:	2b00      	cmp	r3, #0
    30c8:	d1fb      	bne.n	30c2 <adc_init+0x252>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    30ca:	8c33      	ldrh	r3, [r6, #32]
    30cc:	823b      	strh	r3, [r7, #16]
	Adc *const adc_module = module_inst->hw;
    30ce:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    30d0:	8c13      	ldrh	r3, [r2, #32]
    30d2:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    30d4:	2b00      	cmp	r3, #0
    30d6:	d1fb      	bne.n	30d0 <adc_init+0x260>
			config->positive_input;
    30d8:	7933      	ldrb	r3, [r6, #4]
			config->negative_input |
    30da:	88f2      	ldrh	r2, [r6, #6]
    30dc:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    30de:	813b      	strh	r3, [r7, #8]
	Adc *const adc_module = module_inst->hw;
    30e0:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    30e2:	8c13      	ldrh	r3, [r2, #32]
    30e4:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    30e6:	2b00      	cmp	r3, #0
    30e8:	d1fb      	bne.n	30e2 <adc_init+0x272>
	adc_module->EVCTRL.reg = config->event_action;
    30ea:	332a      	adds	r3, #42	; 0x2a
    30ec:	5cf3      	ldrb	r3, [r6, r3]
    30ee:	70fb      	strb	r3, [r7, #3]
	adc_module->INTENCLR.reg =
    30f0:	2307      	movs	r3, #7
    30f2:	713b      	strb	r3, [r7, #4]
	if (config->correction.correction_enable){
    30f4:	331d      	adds	r3, #29
    30f6:	5cf3      	ldrb	r3, [r6, r3]
    30f8:	2b00      	cmp	r3, #0
    30fa:	d01b      	beq.n	3134 <adc_init+0x2c4>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    30fc:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
    30fe:	491d      	ldr	r1, [pc, #116]	; (3174 <adc_init+0x304>)
			return STATUS_ERR_INVALID_ARG;
    3100:	2317      	movs	r3, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    3102:	428a      	cmp	r2, r1
    3104:	d900      	bls.n	3108 <adc_init+0x298>
    3106:	e6c7      	b.n	2e98 <adc_init+0x28>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    3108:	827a      	strh	r2, [r7, #18]
	Adc *const adc_module = module_inst->hw;
    310a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    310c:	8c13      	ldrh	r3, [r2, #32]
    310e:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
    3110:	2b00      	cmp	r3, #0
    3112:	d1fb      	bne.n	310c <adc_init+0x29c>
		if (config->correction.offset_correction > 2047 ||
    3114:	8d31      	ldrh	r1, [r6, #40]	; 0x28
    3116:	2380      	movs	r3, #128	; 0x80
    3118:	011b      	lsls	r3, r3, #4
    311a:	18ca      	adds	r2, r1, r3
    311c:	4815      	ldr	r0, [pc, #84]	; (3174 <adc_init+0x304>)
    311e:	b292      	uxth	r2, r2
			return STATUS_ERR_INVALID_ARG;
    3120:	2317      	movs	r3, #23
		if (config->correction.offset_correction > 2047 ||
    3122:	4282      	cmp	r2, r0
    3124:	d900      	bls.n	3128 <adc_init+0x2b8>
    3126:	e6b7      	b.n	2e98 <adc_init+0x28>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    3128:	82b9      	strh	r1, [r7, #20]
	Adc *const adc_module = module_inst->hw;
    312a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    312c:	8c13      	ldrh	r3, [r2, #32]
    312e:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
    3130:	2b00      	cmp	r3, #0
    3132:	d1fb      	bne.n	312c <adc_init+0x2bc>
			ADC_CALIB_BIASREFBUF(
    3134:	4b10      	ldr	r3, [pc, #64]	; (3178 <adc_init+0x308>)
    3136:	681b      	ldr	r3, [r3, #0]
    3138:	021a      	lsls	r2, r3, #8
    313a:	21e0      	movs	r1, #224	; 0xe0
    313c:	00c9      	lsls	r1, r1, #3
    313e:	400a      	ands	r2, r1
			ADC_CALIB_BIASCOMP(
    3140:	069b      	lsls	r3, r3, #26
    3142:	0f5b      	lsrs	r3, r3, #29
			) |
    3144:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    3146:	85bb      	strh	r3, [r7, #44]	; 0x2c
	return STATUS_OK;
    3148:	2300      	movs	r3, #0
    314a:	e6a5      	b.n	2e98 <adc_init+0x28>
    314c:	00002e29 	.word	0x00002e29
    3150:	40000400 	.word	0x40000400
    3154:	40001400 	.word	0x40001400
    3158:	20003d2c 	.word	0x20003d2c
    315c:	00003851 	.word	0x00003851
    3160:	000037e1 	.word	0x000037e1
    3164:	00006984 	.word	0x00006984
    3168:	00006079 	.word	0x00006079
    316c:	0000394d 	.word	0x0000394d
    3170:	000068b0 	.word	0x000068b0
    3174:	00000fff 	.word	0x00000fff
    3178:	00806020 	.word	0x00806020
		switch (resolution) {
    317c:	2800      	cmp	r0, #0
    317e:	d195      	bne.n	30ac <adc_init+0x23c>
			if (config->differential_mode &&
    3180:	7af3      	ldrb	r3, [r6, #11]
    3182:	2b00      	cmp	r3, #0
    3184:	d012      	beq.n	31ac <adc_init+0x33c>
					(config->window.window_lower_value > 2047 ||
    3186:	69f3      	ldr	r3, [r6, #28]
    3188:	2080      	movs	r0, #128	; 0x80
    318a:	0100      	lsls	r0, r0, #4
    318c:	4684      	mov	ip, r0
    318e:	4463      	add	r3, ip
    3190:	0019      	movs	r1, r3
			if (config->differential_mode &&
    3192:	482e      	ldr	r0, [pc, #184]	; (324c <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
    3194:	2317      	movs	r3, #23
			if (config->differential_mode &&
    3196:	4281      	cmp	r1, r0
    3198:	d900      	bls.n	319c <adc_init+0x32c>
    319a:	e67d      	b.n	2e98 <adc_init+0x28>
					config->window.window_lower_value < -2048 ||
    319c:	6a33      	ldr	r3, [r6, #32]
    319e:	4463      	add	r3, ip
    31a0:	0019      	movs	r1, r3
    31a2:	482a      	ldr	r0, [pc, #168]	; (324c <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
    31a4:	2317      	movs	r3, #23
					config->window.window_lower_value < -2048 ||
    31a6:	4281      	cmp	r1, r0
    31a8:	d900      	bls.n	31ac <adc_init+0x33c>
    31aa:	e675      	b.n	2e98 <adc_init+0x28>
			} else if (config->window.window_lower_value > 4095 ||
    31ac:	4927      	ldr	r1, [pc, #156]	; (324c <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
    31ae:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 4095 ||
    31b0:	69f0      	ldr	r0, [r6, #28]
    31b2:	4288      	cmp	r0, r1
    31b4:	dd00      	ble.n	31b8 <adc_init+0x348>
    31b6:	e66f      	b.n	2e98 <adc_init+0x28>
    31b8:	6a30      	ldr	r0, [r6, #32]
    31ba:	4288      	cmp	r0, r1
    31bc:	dd00      	ble.n	31c0 <adc_init+0x350>
    31be:	e66b      	b.n	2e98 <adc_init+0x28>
    31c0:	e774      	b.n	30ac <adc_init+0x23c>
			if (config->differential_mode &&
    31c2:	7af3      	ldrb	r3, [r6, #11]
    31c4:	2b00      	cmp	r3, #0
    31c6:	d012      	beq.n	31ee <adc_init+0x37e>
					(config->window.window_lower_value > 511 ||
    31c8:	69f3      	ldr	r3, [r6, #28]
    31ca:	2080      	movs	r0, #128	; 0x80
    31cc:	0080      	lsls	r0, r0, #2
    31ce:	4684      	mov	ip, r0
    31d0:	4463      	add	r3, ip
    31d2:	0019      	movs	r1, r3
			if (config->differential_mode &&
    31d4:	481e      	ldr	r0, [pc, #120]	; (3250 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
    31d6:	2317      	movs	r3, #23
			if (config->differential_mode &&
    31d8:	4281      	cmp	r1, r0
    31da:	d900      	bls.n	31de <adc_init+0x36e>
    31dc:	e65c      	b.n	2e98 <adc_init+0x28>
					config->window.window_lower_value < -512 ||
    31de:	6a33      	ldr	r3, [r6, #32]
    31e0:	4463      	add	r3, ip
    31e2:	0019      	movs	r1, r3
    31e4:	481a      	ldr	r0, [pc, #104]	; (3250 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
    31e6:	2317      	movs	r3, #23
					config->window.window_lower_value < -512 ||
    31e8:	4281      	cmp	r1, r0
    31ea:	d900      	bls.n	31ee <adc_init+0x37e>
    31ec:	e654      	b.n	2e98 <adc_init+0x28>
			} else if (config->window.window_lower_value > 1023 ||
    31ee:	4918      	ldr	r1, [pc, #96]	; (3250 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
    31f0:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 1023 ||
    31f2:	69f0      	ldr	r0, [r6, #28]
    31f4:	4288      	cmp	r0, r1
    31f6:	dd00      	ble.n	31fa <adc_init+0x38a>
    31f8:	e64e      	b.n	2e98 <adc_init+0x28>
    31fa:	6a30      	ldr	r0, [r6, #32]
    31fc:	4288      	cmp	r0, r1
    31fe:	dd00      	ble.n	3202 <adc_init+0x392>
    3200:	e64a      	b.n	2e98 <adc_init+0x28>
    3202:	e753      	b.n	30ac <adc_init+0x23c>
			if (config->differential_mode &&
    3204:	7af3      	ldrb	r3, [r6, #11]
    3206:	2b00      	cmp	r3, #0
    3208:	d012      	beq.n	3230 <adc_init+0x3c0>
					(config->window.window_lower_value > 32767 ||
    320a:	69f3      	ldr	r3, [r6, #28]
    320c:	2080      	movs	r0, #128	; 0x80
    320e:	0200      	lsls	r0, r0, #8
    3210:	4684      	mov	ip, r0
    3212:	4463      	add	r3, ip
    3214:	0019      	movs	r1, r3
			if (config->differential_mode &&
    3216:	480f      	ldr	r0, [pc, #60]	; (3254 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
    3218:	2317      	movs	r3, #23
			if (config->differential_mode &&
    321a:	4281      	cmp	r1, r0
    321c:	d900      	bls.n	3220 <adc_init+0x3b0>
    321e:	e63b      	b.n	2e98 <adc_init+0x28>
					config->window.window_lower_value < -32768 ||
    3220:	6a33      	ldr	r3, [r6, #32]
    3222:	4463      	add	r3, ip
    3224:	0019      	movs	r1, r3
    3226:	480b      	ldr	r0, [pc, #44]	; (3254 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
    3228:	2317      	movs	r3, #23
					config->window.window_lower_value < -32768 ||
    322a:	4281      	cmp	r1, r0
    322c:	d900      	bls.n	3230 <adc_init+0x3c0>
    322e:	e633      	b.n	2e98 <adc_init+0x28>
			} else if (config->window.window_lower_value > 65535 ||
    3230:	4908      	ldr	r1, [pc, #32]	; (3254 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
    3232:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 65535 ||
    3234:	69f0      	ldr	r0, [r6, #28]
    3236:	4288      	cmp	r0, r1
    3238:	dd00      	ble.n	323c <adc_init+0x3cc>
    323a:	e62d      	b.n	2e98 <adc_init+0x28>
    323c:	6a30      	ldr	r0, [r6, #32]
    323e:	4288      	cmp	r0, r1
    3240:	dd00      	ble.n	3244 <adc_init+0x3d4>
    3242:	e629      	b.n	2e98 <adc_init+0x28>
    3244:	e732      	b.n	30ac <adc_init+0x23c>
		return STATUS_ERR_INVALID_ARG;
    3246:	2317      	movs	r3, #23
    3248:	e626      	b.n	2e98 <adc_init+0x28>
    324a:	46c0      	nop			; (mov r8, r8)
    324c:	00000fff 	.word	0x00000fff
    3250:	000003ff 	.word	0x000003ff
    3254:	0000ffff 	.word	0x0000ffff

00003258 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
    3258:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    325a:	4b2e      	ldr	r3, [pc, #184]	; (3314 <ADC_Handler+0xbc>)
    325c:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
    325e:	6823      	ldr	r3, [r4, #0]
    3260:	799d      	ldrb	r5, [r3, #6]
    3262:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
    3264:	07ea      	lsls	r2, r5, #31
    3266:	d52d      	bpl.n	32c4 <ADC_Handler+0x6c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    3268:	7ee2      	ldrb	r2, [r4, #27]
    326a:	07d2      	lsls	r2, r2, #31
    326c:	d52a      	bpl.n	32c4 <ADC_Handler+0x6c>
    326e:	7ea2      	ldrb	r2, [r4, #26]
    3270:	07d2      	lsls	r2, r2, #31
    3272:	d527      	bpl.n	32c4 <ADC_Handler+0x6c>
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    3274:	2201      	movs	r2, #1
    3276:	719a      	strb	r2, [r3, #6]
			*(module->job_buffer++) = module->hw->RESULT.reg;
    3278:	6962      	ldr	r2, [r4, #20]
    327a:	1c93      	adds	r3, r2, #2
    327c:	6163      	str	r3, [r4, #20]
    327e:	6823      	ldr	r3, [r4, #0]
    3280:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3282:	b29b      	uxth	r3, r3
    3284:	8013      	strh	r3, [r2, #0]
			if (--module->remaining_conversions > 0) {
    3286:	8b23      	ldrh	r3, [r4, #24]
    3288:	3b01      	subs	r3, #1
    328a:	b29b      	uxth	r3, r3
    328c:	8323      	strh	r3, [r4, #24]
    328e:	2b00      	cmp	r3, #0
    3290:	d015      	beq.n	32be <ADC_Handler+0x66>
				if (module->software_trigger == true
    3292:	7f63      	ldrb	r3, [r4, #29]
    3294:	2b00      	cmp	r3, #0
    3296:	d015      	beq.n	32c4 <ADC_Handler+0x6c>
					&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
    3298:	6822      	ldr	r2, [r4, #0]
    329a:	79d3      	ldrb	r3, [r2, #7]
    329c:	b25b      	sxtb	r3, r3
    329e:	2b00      	cmp	r3, #0
    32a0:	db10      	blt.n	32c4 <ADC_Handler+0x6c>
    32a2:	8c13      	ldrh	r3, [r2, #32]
    32a4:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    32a6:	2b00      	cmp	r3, #0
    32a8:	d1fb      	bne.n	32a2 <ADC_Handler+0x4a>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    32aa:	7e13      	ldrb	r3, [r2, #24]
    32ac:	2102      	movs	r1, #2
    32ae:	430b      	orrs	r3, r1
    32b0:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
    32b2:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
    32b4:	8c13      	ldrh	r3, [r2, #32]
    32b6:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    32b8:	2b00      	cmp	r3, #0
    32ba:	d1fb      	bne.n	32b4 <ADC_Handler+0x5c>
    32bc:	e002      	b.n	32c4 <ADC_Handler+0x6c>
				if (module->job_status == STATUS_BUSY) {
    32be:	7f23      	ldrb	r3, [r4, #28]
    32c0:	2b05      	cmp	r3, #5
    32c2:	d016      	beq.n	32f2 <ADC_Handler+0x9a>
	if (flags & ADC_INTFLAG_WINMON) {
    32c4:	076b      	lsls	r3, r5, #29
    32c6:	d508      	bpl.n	32da <ADC_Handler+0x82>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    32c8:	2304      	movs	r3, #4
    32ca:	6822      	ldr	r2, [r4, #0]
    32cc:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    32ce:	7ee3      	ldrb	r3, [r4, #27]
    32d0:	079b      	lsls	r3, r3, #30
    32d2:	d502      	bpl.n	32da <ADC_Handler+0x82>
    32d4:	7ea3      	ldrb	r3, [r4, #26]
    32d6:	079b      	lsls	r3, r3, #30
    32d8:	d414      	bmi.n	3304 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
    32da:	07ab      	lsls	r3, r5, #30
    32dc:	d508      	bpl.n	32f0 <ADC_Handler+0x98>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    32de:	2302      	movs	r3, #2
    32e0:	6822      	ldr	r2, [r4, #0]
    32e2:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    32e4:	7ee3      	ldrb	r3, [r4, #27]
    32e6:	075b      	lsls	r3, r3, #29
    32e8:	d502      	bpl.n	32f0 <ADC_Handler+0x98>
    32ea:	7ea3      	ldrb	r3, [r4, #26]
    32ec:	075b      	lsls	r3, r3, #29
    32ee:	d40d      	bmi.n	330c <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
    32f0:	bd70      	pop	{r4, r5, r6, pc}
					module->job_status = STATUS_OK;
    32f2:	2300      	movs	r3, #0
    32f4:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    32f6:	3301      	adds	r3, #1
    32f8:	6822      	ldr	r2, [r4, #0]
    32fa:	7113      	strb	r3, [r2, #4]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    32fc:	0020      	movs	r0, r4
    32fe:	68a3      	ldr	r3, [r4, #8]
    3300:	4798      	blx	r3
    3302:	e7df      	b.n	32c4 <ADC_Handler+0x6c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    3304:	0020      	movs	r0, r4
    3306:	68e3      	ldr	r3, [r4, #12]
    3308:	4798      	blx	r3
    330a:	e7e6      	b.n	32da <ADC_Handler+0x82>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    330c:	6923      	ldr	r3, [r4, #16]
    330e:	0020      	movs	r0, r4
    3310:	4798      	blx	r3
}
    3312:	e7ed      	b.n	32f0 <ADC_Handler+0x98>
    3314:	20003d2c 	.word	0x20003d2c

00003318 <adc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    3318:	1c93      	adds	r3, r2, #2
    331a:	009b      	lsls	r3, r3, #2
    331c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
    331e:	2301      	movs	r3, #1
    3320:	4093      	lsls	r3, r2
    3322:	001a      	movs	r2, r3
    3324:	7e83      	ldrb	r3, [r0, #26]
    3326:	4313      	orrs	r3, r2
    3328:	7683      	strb	r3, [r0, #26]
}
    332a:	4770      	bx	lr

0000332c <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
    332c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    332e:	8b03      	ldrh	r3, [r0, #24]
    3330:	b29b      	uxth	r3, r3
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
    3332:	2405      	movs	r4, #5
	if(module_inst->remaining_conversions != 0 ||
    3334:	2b00      	cmp	r3, #0
    3336:	d001      	beq.n	333c <adc_read_buffer_job+0x10>
	if(module_inst->software_trigger == true) {
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
}
    3338:	0020      	movs	r0, r4
    333a:	bd10      	pop	{r4, pc}
			module_inst->job_status == STATUS_BUSY){
    333c:	7f03      	ldrb	r3, [r0, #28]
	if(module_inst->remaining_conversions != 0 ||
    333e:	2b05      	cmp	r3, #5
    3340:	d0fa      	beq.n	3338 <adc_read_buffer_job+0xc>
	module_inst->job_status = STATUS_BUSY;
    3342:	2305      	movs	r3, #5
    3344:	7703      	strb	r3, [r0, #28]
	module_inst->remaining_conversions = samples;
    3346:	8302      	strh	r2, [r0, #24]
	module_inst->job_buffer = buffer;
    3348:	6141      	str	r1, [r0, #20]
	adc_module->INTENSET.reg = interrupt;
    334a:	3b04      	subs	r3, #4
    334c:	6802      	ldr	r2, [r0, #0]
    334e:	7153      	strb	r3, [r2, #5]
	if(module_inst->software_trigger == true) {
    3350:	7f43      	ldrb	r3, [r0, #29]
	return STATUS_OK;
    3352:	2400      	movs	r4, #0
	if(module_inst->software_trigger == true) {
    3354:	2b00      	cmp	r3, #0
    3356:	d0ef      	beq.n	3338 <adc_read_buffer_job+0xc>
	Adc *const adc_module = module_inst->hw;
    3358:	6802      	ldr	r2, [r0, #0]
    335a:	8c13      	ldrh	r3, [r2, #32]
    335c:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    335e:	2b00      	cmp	r3, #0
    3360:	d1fb      	bne.n	335a <adc_read_buffer_job+0x2e>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    3362:	7e13      	ldrb	r3, [r2, #24]
    3364:	2102      	movs	r1, #2
    3366:	430b      	orrs	r3, r1
    3368:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
    336a:	6802      	ldr	r2, [r0, #0]
	if (adc_module->SYNCBUSY.reg) {
    336c:	8c13      	ldrh	r3, [r2, #32]
    336e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    3370:	2b00      	cmp	r3, #0
    3372:	d1fb      	bne.n	336c <adc_read_buffer_job+0x40>
	return STATUS_OK;
    3374:	2400      	movs	r4, #0
    3376:	e7df      	b.n	3338 <adc_read_buffer_job+0xc>

00003378 <opamp_module_init>:
 */

#include "opamp.h"

void opamp_module_init(void)
{
    3378:	b500      	push	{lr}
    337a:	b083      	sub	sp, #12
	config->write_once          = false;
    337c:	a801      	add	r0, sp, #4
    337e:	2300      	movs	r3, #0
    3380:	7003      	strb	r3, [r0, #0]
	struct system_clock_source_osculp32k_config config;

	/* Enable the OSCULP32K clock. */
	system_clock_source_osculp32k_get_config_defaults(&config);
	system_clock_source_osculp32k_set_config(&config);
    3382:	4b09      	ldr	r3, [pc, #36]	; (33a8 <opamp_module_init+0x30>)
    3384:	4798      	blx	r3
			MCLK->APBDMASK.reg |= mask;
    3386:	4a09      	ldr	r2, [pc, #36]	; (33ac <opamp_module_init+0x34>)
    3388:	6a13      	ldr	r3, [r2, #32]
    338a:	2140      	movs	r1, #64	; 0x40
    338c:	430b      	orrs	r3, r1
    338e:	6213      	str	r3, [r2, #32]
 * and the OPAMP will be disabled.
 */
static inline void opamp_module_reset(void)
{
	/* Reset OPAMP. */
	OPAMP->CTRLA.reg |= OPAMP_CTRLA_SWRST;
    3390:	4b07      	ldr	r3, [pc, #28]	; (33b0 <opamp_module_init+0x38>)
    3392:	781a      	ldrb	r2, [r3, #0]
    3394:	393f      	subs	r1, #63	; 0x3f
    3396:	430a      	orrs	r2, r1
    3398:	701a      	strb	r2, [r3, #0]
 *
 */
static inline void opamp_module_enable(void)
{
	/* Enable OPAMP. */
	OPAMP->CTRLA.reg |= OPAMP_CTRLA_ENABLE;
    339a:	781a      	ldrb	r2, [r3, #0]
    339c:	3101      	adds	r1, #1
    339e:	430a      	orrs	r2, r1
    33a0:	701a      	strb	r2, [r3, #0]
	/* Reset module. */
	opamp_module_reset();

	/* Enable module. */
	opamp_module_enable();
}
    33a2:	b003      	add	sp, #12
    33a4:	bd00      	pop	{pc}
    33a6:	46c0      	nop			; (mov r8, r8)
    33a8:	00003555 	.word	0x00003555
    33ac:	40000400 	.word	0x40000400
    33b0:	43001800 	.word	0x43001800

000033b4 <opamp2_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->potentiometer_selection = OPAMP_POT_MUX_8R_8R;
    33b4:	2380      	movs	r3, #128	; 0x80
    33b6:	01db      	lsls	r3, r3, #7
    33b8:	8143      	strh	r3, [r0, #10]
	config->r1_enable = false;
    33ba:	2300      	movs	r3, #0
    33bc:	7303      	strb	r3, [r0, #12]
	config->r2_vcc = false;
    33be:	7343      	strb	r3, [r0, #13]
	config->r2_out = false;
    33c0:	7383      	strb	r3, [r0, #14]
	config->on_demand = false;
    33c2:	73c3      	strb	r3, [r0, #15]
	config->run_in_standby = false;
    33c4:	7403      	strb	r3, [r0, #16]
	config->bias_value = OPAMP_BIAS_MODE_0;
    33c6:	7443      	strb	r3, [r0, #17]
	config->analog_out = false;
    33c8:	7483      	strb	r3, [r0, #18]
	Assert(config);

	_opamp_get_config_common_defaults(&(config->config_common));

	/* Default configuration values */
	config->negative_input = OPAMP2_NEG_MUX_OUT2;
    33ca:	2280      	movs	r2, #128	; 0x80
    33cc:	0392      	lsls	r2, r2, #14
    33ce:	6002      	str	r2, [r0, #0]
	config->positive_input = OPAMP2_POS_MUX_PIN2;
    33d0:	6043      	str	r3, [r0, #4]
	config->r1_connection = OPAMP2_RES1_MUX_GND;
    33d2:	23c0      	movs	r3, #192	; 0xc0
    33d4:	015b      	lsls	r3, r3, #5
    33d6:	8103      	strh	r3, [r0, #8]
}
    33d8:	4770      	bx	lr
	...

000033dc <opamp2_set_config>:

void opamp2_set_config(struct opamp2_config *const config)
{
	uint32_t temp = 0;

	if (config->config_common.r1_enable) {
    33dc:	7b03      	ldrb	r3, [r0, #12]
		temp |= OPAMP_OPAMPCTRL_RES1EN;
    33de:	1e5a      	subs	r2, r3, #1
    33e0:	4193      	sbcs	r3, r2
    33e2:	029a      	lsls	r2, r3, #10
	}

	if (config->config_common.r2_vcc) {
    33e4:	7b43      	ldrb	r3, [r0, #13]
    33e6:	2b00      	cmp	r3, #0
    33e8:	d002      	beq.n	33f0 <opamp2_set_config+0x14>
		temp |= OPAMP_OPAMPCTRL_RES2VCC;
    33ea:	2380      	movs	r3, #128	; 0x80
    33ec:	009b      	lsls	r3, r3, #2
    33ee:	431a      	orrs	r2, r3
	}

	if (config->config_common.r2_out) {
    33f0:	7b83      	ldrb	r3, [r0, #14]
    33f2:	2b00      	cmp	r3, #0
    33f4:	d002      	beq.n	33fc <opamp2_set_config+0x20>
		temp |= OPAMP_OPAMPCTRL_RES2OUT;
    33f6:	2380      	movs	r3, #128	; 0x80
    33f8:	005b      	lsls	r3, r3, #1
    33fa:	431a      	orrs	r2, r3
	}

	if (config->config_common.on_demand) {
    33fc:	7bc3      	ldrb	r3, [r0, #15]
    33fe:	2b00      	cmp	r3, #0
    3400:	d001      	beq.n	3406 <opamp2_set_config+0x2a>
		temp |= OPAMP_OPAMPCTRL_ONDEMAND;
    3402:	2380      	movs	r3, #128	; 0x80
    3404:	431a      	orrs	r2, r3
	}

	if (config->config_common.run_in_standby) {
    3406:	7c03      	ldrb	r3, [r0, #16]
    3408:	2b00      	cmp	r3, #0
    340a:	d001      	beq.n	3410 <opamp2_set_config+0x34>
		temp |= OPAMP_OPAMPCTRL_RUNSTDBY;
    340c:	2340      	movs	r3, #64	; 0x40
    340e:	431a      	orrs	r2, r3
	}

	if (config->config_common.analog_out) {
    3410:	7c83      	ldrb	r3, [r0, #18]
    3412:	2b00      	cmp	r3, #0
    3414:	d001      	beq.n	341a <opamp2_set_config+0x3e>
		temp |= OPAMP_OPAMPCTRL_ANAOUT;
    3416:	2304      	movs	r3, #4
    3418:	431a      	orrs	r2, r3

	OPAMP->OPAMPCTRL[2].reg = temp |
		config->config_common.potentiometer_selection |
		config->config_common.bias_value |
		config->negative_input |
		config->positive_input|
    341a:	6803      	ldr	r3, [r0, #0]
    341c:	6841      	ldr	r1, [r0, #4]
    341e:	430b      	orrs	r3, r1
		config->config_common.potentiometer_selection |
    3420:	8941      	ldrh	r1, [r0, #10]
		config->positive_input|
    3422:	430b      	orrs	r3, r1
		config->config_common.bias_value |
    3424:	7c41      	ldrb	r1, [r0, #17]
		config->positive_input|
    3426:	430b      	orrs	r3, r1
		config->r1_connection;
    3428:	8901      	ldrh	r1, [r0, #8]
		config->positive_input|
    342a:	430b      	orrs	r3, r1
    342c:	4313      	orrs	r3, r2
	OPAMP->OPAMPCTRL[2].reg = temp |
    342e:	4a01      	ldr	r2, [pc, #4]	; (3434 <opamp2_set_config+0x58>)
    3430:	60d3      	str	r3, [r2, #12]
}
    3432:	4770      	bx	lr
    3434:	43001800 	.word	0x43001800

00003438 <opamp_enable>:
{
	/* Sanity check arguments */
	Assert(number);

	/* Enable the OPAMP */
	if (number == OPAMP_0) {
    3438:	2800      	cmp	r0, #0
    343a:	d009      	beq.n	3450 <opamp_enable+0x18>
		OPAMP->OPAMPCTRL[0].reg |= OPAMP_OPAMPCTRL_ENABLE;
	} else if (number == OPAMP_1) {
    343c:	2801      	cmp	r0, #1
    343e:	d00d      	beq.n	345c <opamp_enable+0x24>
		OPAMP->OPAMPCTRL[1].reg |= OPAMP_OPAMPCTRL_ENABLE;
	} else if (number == OPAMP_2) {
    3440:	2802      	cmp	r0, #2
    3442:	d10a      	bne.n	345a <opamp_enable+0x22>
		OPAMP->OPAMPCTRL[2].reg |= OPAMP_OPAMPCTRL_ENABLE;
    3444:	4a08      	ldr	r2, [pc, #32]	; (3468 <opamp_enable+0x30>)
    3446:	68d3      	ldr	r3, [r2, #12]
    3448:	2102      	movs	r1, #2
    344a:	430b      	orrs	r3, r1
    344c:	60d3      	str	r3, [r2, #12]
	}
}
    344e:	e004      	b.n	345a <opamp_enable+0x22>
		OPAMP->OPAMPCTRL[0].reg |= OPAMP_OPAMPCTRL_ENABLE;
    3450:	4a05      	ldr	r2, [pc, #20]	; (3468 <opamp_enable+0x30>)
    3452:	6853      	ldr	r3, [r2, #4]
    3454:	2102      	movs	r1, #2
    3456:	430b      	orrs	r3, r1
    3458:	6053      	str	r3, [r2, #4]
}
    345a:	4770      	bx	lr
		OPAMP->OPAMPCTRL[1].reg |= OPAMP_OPAMPCTRL_ENABLE;
    345c:	4a02      	ldr	r2, [pc, #8]	; (3468 <opamp_enable+0x30>)
    345e:	6893      	ldr	r3, [r2, #8]
    3460:	2102      	movs	r1, #2
    3462:	430b      	orrs	r3, r1
    3464:	6093      	str	r3, [r2, #8]
    3466:	e7f8      	b.n	345a <opamp_enable+0x22>
    3468:	43001800 	.word	0x43001800

0000346c <opamp_is_ready>:
		OPAMP->OPAMPCTRL[2].reg &= ~OPAMP_OPAMPCTRL_ENABLE;
	}
}

bool opamp_is_ready(const enum opamp_id number)
{
    346c:	1e03      	subs	r3, r0, #0
	/* Sanity check arguments */
	Assert(number);

	/* Get the OPAMP output ready status*/
	if (number == OPAMP_0) {
    346e:	d009      	beq.n	3484 <opamp_is_ready+0x18>
		return OPAMP->STATUS.bit.READY0;
	} else if (number == OPAMP_1) {
    3470:	2801      	cmp	r0, #1
    3472:	d00c      	beq.n	348e <opamp_is_ready+0x22>
		return OPAMP->STATUS.bit.READY1;
	} else if (number == OPAMP_2) {
		return OPAMP->STATUS.bit.READY2;
	}

	return false;
    3474:	2000      	movs	r0, #0
	} else if (number == OPAMP_2) {
    3476:	2b02      	cmp	r3, #2
    3478:	d108      	bne.n	348c <opamp_is_ready+0x20>
		return OPAMP->STATUS.bit.READY2;
    347a:	4b07      	ldr	r3, [pc, #28]	; (3498 <opamp_is_ready+0x2c>)
    347c:	7898      	ldrb	r0, [r3, #2]
    347e:	0740      	lsls	r0, r0, #29
    3480:	0fc0      	lsrs	r0, r0, #31
    3482:	e003      	b.n	348c <opamp_is_ready+0x20>
		return OPAMP->STATUS.bit.READY0;
    3484:	4b04      	ldr	r3, [pc, #16]	; (3498 <opamp_is_ready+0x2c>)
    3486:	7898      	ldrb	r0, [r3, #2]
    3488:	07c0      	lsls	r0, r0, #31
    348a:	0fc0      	lsrs	r0, r0, #31
}
    348c:	4770      	bx	lr
		return OPAMP->STATUS.bit.READY1;
    348e:	4b02      	ldr	r3, [pc, #8]	; (3498 <opamp_is_ready+0x2c>)
    3490:	7898      	ldrb	r0, [r3, #2]
    3492:	0780      	lsls	r0, r0, #30
    3494:	0fc0      	lsrs	r0, r0, #31
    3496:	e7f9      	b.n	348c <opamp_is_ready+0x20>
    3498:	43001800 	.word	0x43001800

0000349c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    349c:	b500      	push	{lr}
    349e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    34a0:	ab01      	add	r3, sp, #4
    34a2:	2280      	movs	r2, #128	; 0x80
    34a4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    34a6:	780a      	ldrb	r2, [r1, #0]
    34a8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    34aa:	784a      	ldrb	r2, [r1, #1]
    34ac:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    34ae:	788a      	ldrb	r2, [r1, #2]
    34b0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    34b2:	0019      	movs	r1, r3
    34b4:	4b01      	ldr	r3, [pc, #4]	; (34bc <port_pin_set_config+0x20>)
    34b6:	4798      	blx	r3
}
    34b8:	b003      	add	sp, #12
    34ba:	bd00      	pop	{pc}
    34bc:	0000394d 	.word	0x0000394d

000034c0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    34c0:	b510      	push	{r4, lr}
	switch (clock_source) {
    34c2:	2808      	cmp	r0, #8
    34c4:	d803      	bhi.n	34ce <system_clock_source_get_hz+0xe>
    34c6:	0080      	lsls	r0, r0, #2
    34c8:	4b1c      	ldr	r3, [pc, #112]	; (353c <system_clock_source_get_hz+0x7c>)
    34ca:	581b      	ldr	r3, [r3, r0]
    34cc:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    34ce:	2000      	movs	r0, #0
    34d0:	e032      	b.n	3538 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    34d2:	4b1b      	ldr	r3, [pc, #108]	; (3540 <system_clock_source_get_hz+0x80>)
    34d4:	6918      	ldr	r0, [r3, #16]
    34d6:	e02f      	b.n	3538 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    34d8:	4b1a      	ldr	r3, [pc, #104]	; (3544 <system_clock_source_get_hz+0x84>)
    34da:	7d18      	ldrb	r0, [r3, #20]
    34dc:	0700      	lsls	r0, r0, #28
    34de:	0f80      	lsrs	r0, r0, #30
    34e0:	1c43      	adds	r3, r0, #1
    34e2:	4819      	ldr	r0, [pc, #100]	; (3548 <system_clock_source_get_hz+0x88>)
    34e4:	4358      	muls	r0, r3
    34e6:	e027      	b.n	3538 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    34e8:	4b15      	ldr	r3, [pc, #84]	; (3540 <system_clock_source_get_hz+0x80>)
    34ea:	6958      	ldr	r0, [r3, #20]
    34ec:	e024      	b.n	3538 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    34ee:	4b14      	ldr	r3, [pc, #80]	; (3540 <system_clock_source_get_hz+0x80>)
    34f0:	681b      	ldr	r3, [r3, #0]
			return 0;
    34f2:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    34f4:	079b      	lsls	r3, r3, #30
    34f6:	d51f      	bpl.n	3538 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    34f8:	4912      	ldr	r1, [pc, #72]	; (3544 <system_clock_source_get_hz+0x84>)
    34fa:	2280      	movs	r2, #128	; 0x80
    34fc:	0052      	lsls	r2, r2, #1
    34fe:	68cb      	ldr	r3, [r1, #12]
    3500:	4213      	tst	r3, r2
    3502:	d0fc      	beq.n	34fe <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    3504:	4b0e      	ldr	r3, [pc, #56]	; (3540 <system_clock_source_get_hz+0x80>)
    3506:	681b      	ldr	r3, [r3, #0]
    3508:	075b      	lsls	r3, r3, #29
    350a:	d401      	bmi.n	3510 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    350c:	480f      	ldr	r0, [pc, #60]	; (354c <system_clock_source_get_hz+0x8c>)
    350e:	e013      	b.n	3538 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    3510:	2000      	movs	r0, #0
    3512:	4b0f      	ldr	r3, [pc, #60]	; (3550 <system_clock_source_get_hz+0x90>)
    3514:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    3516:	4b0a      	ldr	r3, [pc, #40]	; (3540 <system_clock_source_get_hz+0x80>)
    3518:	689b      	ldr	r3, [r3, #8]
    351a:	041b      	lsls	r3, r3, #16
    351c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    351e:	4358      	muls	r0, r3
    3520:	e00a      	b.n	3538 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    3522:	2328      	movs	r3, #40	; 0x28
    3524:	4a07      	ldr	r2, [pc, #28]	; (3544 <system_clock_source_get_hz+0x84>)
    3526:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    3528:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    352a:	079b      	lsls	r3, r3, #30
    352c:	d504      	bpl.n	3538 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    352e:	4b04      	ldr	r3, [pc, #16]	; (3540 <system_clock_source_get_hz+0x80>)
    3530:	68d8      	ldr	r0, [r3, #12]
    3532:	e001      	b.n	3538 <system_clock_source_get_hz+0x78>
		return 32768UL;
    3534:	2080      	movs	r0, #128	; 0x80
    3536:	0200      	lsls	r0, r0, #8
	}
}
    3538:	bd10      	pop	{r4, pc}
    353a:	46c0      	nop			; (mov r8, r8)
    353c:	000069e4 	.word	0x000069e4
    3540:	20003cc8 	.word	0x20003cc8
    3544:	40000c00 	.word	0x40000c00
    3548:	003d0900 	.word	0x003d0900
    354c:	02dc6c00 	.word	0x02dc6c00
    3550:	00003875 	.word	0x00003875

00003554 <system_clock_source_osculp32k_set_config>:
 * \param[in] config  OSCULP32K configuration structure containing the new config
 */
void system_clock_source_osculp32k_set_config(
		struct system_clock_source_osculp32k_config *const config)
{
	OSC32KCTRL_OSCULP32K_Type temp = OSC32KCTRL->OSCULP32K;
    3554:	4905      	ldr	r1, [pc, #20]	; (356c <system_clock_source_osculp32k_set_config+0x18>)
    3556:	69cb      	ldr	r3, [r1, #28]
	/* Update settings via a temporary struct to reduce register access */
	temp.bit.WRTLOCK  = config->write_once;
	OSC32KCTRL->OSCULP32K  = temp;
    3558:	7800      	ldrb	r0, [r0, #0]
    355a:	2201      	movs	r2, #1
    355c:	4002      	ands	r2, r0
    355e:	03d2      	lsls	r2, r2, #15
    3560:	4803      	ldr	r0, [pc, #12]	; (3570 <system_clock_source_osculp32k_set_config+0x1c>)
    3562:	4003      	ands	r3, r0
    3564:	4313      	orrs	r3, r2
    3566:	61cb      	str	r3, [r1, #28]
}
    3568:	4770      	bx	lr
    356a:	46c0      	nop			; (mov r8, r8)
    356c:	40001000 	.word	0x40001000
    3570:	ffff7fff 	.word	0xffff7fff

00003574 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3574:	b510      	push	{r4, lr}
    3576:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    3578:	2280      	movs	r2, #128	; 0x80
    357a:	0052      	lsls	r2, r2, #1
    357c:	4b2f      	ldr	r3, [pc, #188]	; (363c <system_clock_init+0xc8>)
    357e:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    3580:	3afd      	subs	r2, #253	; 0xfd
    3582:	4b2f      	ldr	r3, [pc, #188]	; (3640 <system_clock_init+0xcc>)
    3584:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3586:	4a2f      	ldr	r2, [pc, #188]	; (3644 <system_clock_init+0xd0>)
    3588:	6853      	ldr	r3, [r2, #4]
    358a:	211e      	movs	r1, #30
    358c:	438b      	bics	r3, r1
    358e:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    3590:	2380      	movs	r3, #128	; 0x80
    3592:	05db      	lsls	r3, r3, #23
    3594:	789b      	ldrb	r3, [r3, #2]
    3596:	2b02      	cmp	r3, #2
    3598:	d00f      	beq.n	35ba <system_clock_init+0x46>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    359a:	2380      	movs	r3, #128	; 0x80
    359c:	05db      	lsls	r3, r3, #23
    359e:	789b      	ldrb	r3, [r3, #2]
    35a0:	b25b      	sxtb	r3, r3
    35a2:	2b00      	cmp	r3, #0
    35a4:	db09      	blt.n	35ba <system_clock_init+0x46>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    35a6:	2380      	movs	r3, #128	; 0x80
    35a8:	05db      	lsls	r3, r3, #23
    35aa:	2201      	movs	r2, #1
    35ac:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    35ae:	3201      	adds	r2, #1
    35b0:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    35b2:	001a      	movs	r2, r3
    35b4:	7993      	ldrb	r3, [r2, #6]
    35b6:	2b00      	cmp	r3, #0
    35b8:	d0fc      	beq.n	35b4 <system_clock_init+0x40>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    35ba:	4b20      	ldr	r3, [pc, #128]	; (363c <system_clock_init+0xc8>)
    35bc:	7d19      	ldrb	r1, [r3, #20]
    35be:	2280      	movs	r2, #128	; 0x80
    35c0:	4252      	negs	r2, r2
    35c2:	430a      	orrs	r2, r1
    35c4:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    35c6:	7d1a      	ldrb	r2, [r3, #20]
    35c8:	2140      	movs	r1, #64	; 0x40
    35ca:	438a      	bics	r2, r1
    35cc:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    35ce:	4b1e      	ldr	r3, [pc, #120]	; (3648 <system_clock_init+0xd4>)
    35d0:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    35d2:	4c1e      	ldr	r4, [pc, #120]	; (364c <system_clock_init+0xd8>)
    35d4:	2301      	movs	r3, #1
    35d6:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    35d8:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    35da:	7123      	strb	r3, [r4, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    35dc:	a901      	add	r1, sp, #4
    35de:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    35e0:	2300      	movs	r3, #0
    35e2:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
    35e4:	2206      	movs	r2, #6
    35e6:	700a      	strb	r2, [r1, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    35e8:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    35ea:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    35ec:	2000      	movs	r0, #0
    35ee:	4b18      	ldr	r3, [pc, #96]	; (3650 <system_clock_init+0xdc>)
    35f0:	4798      	blx	r3
    35f2:	2000      	movs	r0, #0
    35f4:	4b17      	ldr	r3, [pc, #92]	; (3654 <system_clock_init+0xe0>)
    35f6:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    35f8:	2000      	movs	r0, #0
    35fa:	4b17      	ldr	r3, [pc, #92]	; (3658 <system_clock_init+0xe4>)
    35fc:	4798      	blx	r3
    35fe:	7921      	ldrb	r1, [r4, #4]
    3600:	b2c9      	uxtb	r1, r1
    3602:	4b16      	ldr	r3, [pc, #88]	; (365c <system_clock_init+0xe8>)
    3604:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    3606:	4b16      	ldr	r3, [pc, #88]	; (3660 <system_clock_init+0xec>)
    3608:	4298      	cmp	r0, r3
    360a:	d814      	bhi.n	3636 <system_clock_init+0xc2>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    360c:	2380      	movs	r3, #128	; 0x80
    360e:	05db      	lsls	r3, r3, #23
    3610:	789b      	ldrb	r3, [r3, #2]
    3612:	2b00      	cmp	r3, #0
    3614:	d00f      	beq.n	3636 <system_clock_init+0xc2>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    3616:	2380      	movs	r3, #128	; 0x80
    3618:	05db      	lsls	r3, r3, #23
    361a:	789b      	ldrb	r3, [r3, #2]
    361c:	b25b      	sxtb	r3, r3
    361e:	2b00      	cmp	r3, #0
    3620:	db09      	blt.n	3636 <system_clock_init+0xc2>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    3622:	2380      	movs	r3, #128	; 0x80
    3624:	05db      	lsls	r3, r3, #23
    3626:	2201      	movs	r2, #1
    3628:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    362a:	2200      	movs	r2, #0
    362c:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    362e:	001a      	movs	r2, r3
    3630:	7993      	ldrb	r3, [r2, #6]
    3632:	2b00      	cmp	r3, #0
    3634:	d0fc      	beq.n	3630 <system_clock_init+0xbc>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    3636:	b004      	add	sp, #16
    3638:	bd10      	pop	{r4, pc}
    363a:	46c0      	nop			; (mov r8, r8)
    363c:	40000c00 	.word	0x40000c00
    3640:	40001400 	.word	0x40001400
    3644:	41004000 	.word	0x41004000
    3648:	00003665 	.word	0x00003665
    364c:	40000400 	.word	0x40000400
    3650:	00003689 	.word	0x00003689
    3654:	00003735 	.word	0x00003735
    3658:	00003775 	.word	0x00003775
    365c:	00004429 	.word	0x00004429
    3660:	00b71b00 	.word	0x00b71b00

00003664 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    3664:	4a06      	ldr	r2, [pc, #24]	; (3680 <system_gclk_init+0x1c>)
    3666:	6953      	ldr	r3, [r2, #20]
    3668:	2140      	movs	r1, #64	; 0x40
    366a:	430b      	orrs	r3, r1
    366c:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    366e:	2201      	movs	r2, #1
    3670:	4b04      	ldr	r3, [pc, #16]	; (3684 <system_gclk_init+0x20>)
    3672:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    3674:	0019      	movs	r1, r3
    3676:	780b      	ldrb	r3, [r1, #0]
    3678:	4213      	tst	r3, r2
    367a:	d1fc      	bne.n	3676 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    367c:	4770      	bx	lr
    367e:	46c0      	nop			; (mov r8, r8)
    3680:	40000400 	.word	0x40000400
    3684:	40001800 	.word	0x40001800

00003688 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3688:	b570      	push	{r4, r5, r6, lr}
    368a:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    368c:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    368e:	784b      	ldrb	r3, [r1, #1]
    3690:	2b00      	cmp	r3, #0
    3692:	d002      	beq.n	369a <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3694:	2380      	movs	r3, #128	; 0x80
    3696:	00db      	lsls	r3, r3, #3
    3698:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    369a:	7a4b      	ldrb	r3, [r1, #9]
    369c:	2b00      	cmp	r3, #0
    369e:	d002      	beq.n	36a6 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    36a0:	2380      	movs	r3, #128	; 0x80
    36a2:	011b      	lsls	r3, r3, #4
    36a4:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    36a6:	6848      	ldr	r0, [r1, #4]
    36a8:	2801      	cmp	r0, #1
    36aa:	d90f      	bls.n	36cc <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    36ac:	1e43      	subs	r3, r0, #1
    36ae:	4218      	tst	r0, r3
    36b0:	d131      	bne.n	3716 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    36b2:	2802      	cmp	r0, #2
    36b4:	d92d      	bls.n	3712 <system_gclk_gen_set_config+0x8a>
    36b6:	2302      	movs	r3, #2
    36b8:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    36ba:	3201      	adds	r2, #1
						mask <<= 1) {
    36bc:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    36be:	4298      	cmp	r0, r3
    36c0:	d8fb      	bhi.n	36ba <system_gclk_gen_set_config+0x32>
    36c2:	2380      	movs	r3, #128	; 0x80
    36c4:	015b      	lsls	r3, r3, #5
    36c6:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    36c8:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    36ca:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    36cc:	7a0b      	ldrb	r3, [r1, #8]
    36ce:	2b00      	cmp	r3, #0
    36d0:	d002      	beq.n	36d8 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    36d2:	2380      	movs	r3, #128	; 0x80
    36d4:	019b      	lsls	r3, r3, #6
    36d6:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    36d8:	2604      	movs	r6, #4
    36da:	40a6      	lsls	r6, r4
    36dc:	4911      	ldr	r1, [pc, #68]	; (3724 <system_gclk_gen_set_config+0x9c>)
    36de:	4a12      	ldr	r2, [pc, #72]	; (3728 <system_gclk_gen_set_config+0xa0>)
    36e0:	684b      	ldr	r3, [r1, #4]
    36e2:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    36e4:	421e      	tst	r6, r3
    36e6:	d1fb      	bne.n	36e0 <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    36e8:	4b10      	ldr	r3, [pc, #64]	; (372c <system_gclk_gen_set_config+0xa4>)
    36ea:	4798      	blx	r3
    36ec:	00a4      	lsls	r4, r4, #2
    36ee:	4b0d      	ldr	r3, [pc, #52]	; (3724 <system_gclk_gen_set_config+0x9c>)
    36f0:	469c      	mov	ip, r3
    36f2:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    36f4:	6a22      	ldr	r2, [r4, #32]
    36f6:	2380      	movs	r3, #128	; 0x80
    36f8:	005b      	lsls	r3, r3, #1
    36fa:	401a      	ands	r2, r3
    36fc:	432a      	orrs	r2, r5
    36fe:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3700:	4661      	mov	r1, ip
    3702:	4a09      	ldr	r2, [pc, #36]	; (3728 <system_gclk_gen_set_config+0xa0>)
    3704:	684b      	ldr	r3, [r1, #4]
    3706:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    3708:	421e      	tst	r6, r3
    370a:	d1fb      	bne.n	3704 <system_gclk_gen_set_config+0x7c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    370c:	4b08      	ldr	r3, [pc, #32]	; (3730 <system_gclk_gen_set_config+0xa8>)
    370e:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    3710:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    3712:	2200      	movs	r2, #0
    3714:	e7d5      	b.n	36c2 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    3716:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3718:	2380      	movs	r3, #128	; 0x80
    371a:	009b      	lsls	r3, r3, #2
    371c:	4318      	orrs	r0, r3
    371e:	4305      	orrs	r5, r0
    3720:	e7d4      	b.n	36cc <system_gclk_gen_set_config+0x44>
    3722:	46c0      	nop			; (mov r8, r8)
    3724:	40001800 	.word	0x40001800
    3728:	000007fc 	.word	0x000007fc
    372c:	00002d6d 	.word	0x00002d6d
    3730:	00002dad 	.word	0x00002dad

00003734 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3734:	b510      	push	{r4, lr}
    3736:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3738:	2204      	movs	r2, #4
    373a:	4082      	lsls	r2, r0
    373c:	4809      	ldr	r0, [pc, #36]	; (3764 <system_gclk_gen_enable+0x30>)
    373e:	490a      	ldr	r1, [pc, #40]	; (3768 <system_gclk_gen_enable+0x34>)
    3740:	6843      	ldr	r3, [r0, #4]
    3742:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    3744:	421a      	tst	r2, r3
    3746:	d1fb      	bne.n	3740 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    3748:	4b08      	ldr	r3, [pc, #32]	; (376c <system_gclk_gen_enable+0x38>)
    374a:	4798      	blx	r3
    374c:	00a4      	lsls	r4, r4, #2
    374e:	4b05      	ldr	r3, [pc, #20]	; (3764 <system_gclk_gen_enable+0x30>)
    3750:	469c      	mov	ip, r3
    3752:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    3754:	6a22      	ldr	r2, [r4, #32]
    3756:	2380      	movs	r3, #128	; 0x80
    3758:	005b      	lsls	r3, r3, #1
    375a:	4313      	orrs	r3, r2
    375c:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    375e:	4b04      	ldr	r3, [pc, #16]	; (3770 <system_gclk_gen_enable+0x3c>)
    3760:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3762:	bd10      	pop	{r4, pc}
    3764:	40001800 	.word	0x40001800
    3768:	000007fc 	.word	0x000007fc
    376c:	00002d6d 	.word	0x00002d6d
    3770:	00002dad 	.word	0x00002dad

00003774 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3776:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3778:	2204      	movs	r2, #4
    377a:	4082      	lsls	r2, r0
    377c:	4812      	ldr	r0, [pc, #72]	; (37c8 <system_gclk_gen_get_hz+0x54>)
    377e:	4913      	ldr	r1, [pc, #76]	; (37cc <system_gclk_gen_get_hz+0x58>)
    3780:	6843      	ldr	r3, [r0, #4]
    3782:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    3784:	421a      	tst	r2, r3
    3786:	d1fb      	bne.n	3780 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    3788:	4b11      	ldr	r3, [pc, #68]	; (37d0 <system_gclk_gen_get_hz+0x5c>)
    378a:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    378c:	4f0e      	ldr	r7, [pc, #56]	; (37c8 <system_gclk_gen_get_hz+0x54>)
    378e:	3408      	adds	r4, #8
    3790:	00a4      	lsls	r4, r4, #2
    3792:	59e0      	ldr	r0, [r4, r7]
    3794:	0700      	lsls	r0, r0, #28
    3796:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3798:	4b0e      	ldr	r3, [pc, #56]	; (37d4 <system_gclk_gen_get_hz+0x60>)
    379a:	4798      	blx	r3
    379c:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    379e:	59e5      	ldr	r5, [r4, r7]
    37a0:	04ed      	lsls	r5, r5, #19
    37a2:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    37a4:	59e4      	ldr	r4, [r4, r7]
    37a6:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    37a8:	4b0b      	ldr	r3, [pc, #44]	; (37d8 <system_gclk_gen_get_hz+0x64>)
    37aa:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    37ac:	2d00      	cmp	r5, #0
    37ae:	d107      	bne.n	37c0 <system_gclk_gen_get_hz+0x4c>
    37b0:	2c01      	cmp	r4, #1
    37b2:	d907      	bls.n	37c4 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    37b4:	0021      	movs	r1, r4
    37b6:	0030      	movs	r0, r6
    37b8:	4b08      	ldr	r3, [pc, #32]	; (37dc <system_gclk_gen_get_hz+0x68>)
    37ba:	4798      	blx	r3
    37bc:	0006      	movs	r6, r0
    37be:	e001      	b.n	37c4 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    37c0:	3401      	adds	r4, #1
    37c2:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    37c4:	0030      	movs	r0, r6
    37c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37c8:	40001800 	.word	0x40001800
    37cc:	000007fc 	.word	0x000007fc
    37d0:	00002d6d 	.word	0x00002d6d
    37d4:	000034c1 	.word	0x000034c1
    37d8:	00002dad 	.word	0x00002dad
    37dc:	00004429 	.word	0x00004429

000037e0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    37e0:	b510      	push	{r4, lr}
    37e2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    37e4:	4b09      	ldr	r3, [pc, #36]	; (380c <system_gclk_chan_enable+0x2c>)
    37e6:	4798      	blx	r3
    37e8:	00a0      	lsls	r0, r4, #2
    37ea:	4b09      	ldr	r3, [pc, #36]	; (3810 <system_gclk_chan_enable+0x30>)
    37ec:	469c      	mov	ip, r3
    37ee:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    37f0:	2280      	movs	r2, #128	; 0x80
    37f2:	5883      	ldr	r3, [r0, r2]
    37f4:	2140      	movs	r1, #64	; 0x40
    37f6:	430b      	orrs	r3, r1
    37f8:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    37fa:	3140      	adds	r1, #64	; 0x40
    37fc:	3a40      	subs	r2, #64	; 0x40
    37fe:	5843      	ldr	r3, [r0, r1]
    3800:	421a      	tst	r2, r3
    3802:	d0fc      	beq.n	37fe <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    3804:	4b03      	ldr	r3, [pc, #12]	; (3814 <system_gclk_chan_enable+0x34>)
    3806:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    3808:	bd10      	pop	{r4, pc}
    380a:	46c0      	nop			; (mov r8, r8)
    380c:	00002d6d 	.word	0x00002d6d
    3810:	40001800 	.word	0x40001800
    3814:	00002dad 	.word	0x00002dad

00003818 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3818:	b510      	push	{r4, lr}
    381a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    381c:	4b09      	ldr	r3, [pc, #36]	; (3844 <system_gclk_chan_disable+0x2c>)
    381e:	4798      	blx	r3
    3820:	00a0      	lsls	r0, r4, #2
    3822:	4b09      	ldr	r3, [pc, #36]	; (3848 <system_gclk_chan_disable+0x30>)
    3824:	469c      	mov	ip, r3
    3826:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    3828:	2280      	movs	r2, #128	; 0x80
    382a:	5883      	ldr	r3, [r0, r2]
    382c:	2140      	movs	r1, #64	; 0x40
    382e:	438b      	bics	r3, r1
    3830:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    3832:	3140      	adds	r1, #64	; 0x40
    3834:	3a40      	subs	r2, #64	; 0x40
    3836:	5843      	ldr	r3, [r0, r1]
    3838:	421a      	tst	r2, r3
    383a:	d1fc      	bne.n	3836 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    383c:	4b03      	ldr	r3, [pc, #12]	; (384c <system_gclk_chan_disable+0x34>)
    383e:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    3840:	bd10      	pop	{r4, pc}
    3842:	46c0      	nop			; (mov r8, r8)
    3844:	00002d6d 	.word	0x00002d6d
    3848:	40001800 	.word	0x40001800
    384c:	00002dad 	.word	0x00002dad

00003850 <system_gclk_chan_set_config>:
{
    3850:	b570      	push	{r4, r5, r6, lr}
    3852:	0004      	movs	r4, r0
    3854:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    3856:	4b05      	ldr	r3, [pc, #20]	; (386c <system_gclk_chan_set_config+0x1c>)
    3858:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    385a:	782a      	ldrb	r2, [r5, #0]
    385c:	230f      	movs	r3, #15
    385e:	4013      	ands	r3, r2
    3860:	3420      	adds	r4, #32
    3862:	00a4      	lsls	r4, r4, #2
    3864:	4a02      	ldr	r2, [pc, #8]	; (3870 <system_gclk_chan_set_config+0x20>)
    3866:	50a3      	str	r3, [r4, r2]
}
    3868:	bd70      	pop	{r4, r5, r6, pc}
    386a:	46c0      	nop			; (mov r8, r8)
    386c:	00003819 	.word	0x00003819
    3870:	40001800 	.word	0x40001800

00003874 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3874:	b510      	push	{r4, lr}
    3876:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3878:	4b06      	ldr	r3, [pc, #24]	; (3894 <system_gclk_chan_get_hz+0x20>)
    387a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    387c:	3420      	adds	r4, #32
    387e:	00a4      	lsls	r4, r4, #2
    3880:	4b05      	ldr	r3, [pc, #20]	; (3898 <system_gclk_chan_get_hz+0x24>)
    3882:	58e4      	ldr	r4, [r4, r3]
    3884:	0724      	lsls	r4, r4, #28
    3886:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3888:	4b04      	ldr	r3, [pc, #16]	; (389c <system_gclk_chan_get_hz+0x28>)
    388a:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    388c:	0020      	movs	r0, r4
    388e:	4b04      	ldr	r3, [pc, #16]	; (38a0 <system_gclk_chan_get_hz+0x2c>)
    3890:	4798      	blx	r3
}
    3892:	bd10      	pop	{r4, pc}
    3894:	00002d6d 	.word	0x00002d6d
    3898:	40001800 	.word	0x40001800
    389c:	00002dad 	.word	0x00002dad
    38a0:	00003775 	.word	0x00003775

000038a4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    38a4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    38a6:	78d3      	ldrb	r3, [r2, #3]
    38a8:	2b00      	cmp	r3, #0
    38aa:	d135      	bne.n	3918 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    38ac:	7813      	ldrb	r3, [r2, #0]
    38ae:	2b80      	cmp	r3, #128	; 0x80
    38b0:	d029      	beq.n	3906 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    38b2:	061b      	lsls	r3, r3, #24
    38b4:	2480      	movs	r4, #128	; 0x80
    38b6:	0264      	lsls	r4, r4, #9
    38b8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    38ba:	7854      	ldrb	r4, [r2, #1]
    38bc:	2502      	movs	r5, #2
    38be:	43ac      	bics	r4, r5
    38c0:	d106      	bne.n	38d0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    38c2:	7894      	ldrb	r4, [r2, #2]
    38c4:	2c00      	cmp	r4, #0
    38c6:	d120      	bne.n	390a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    38c8:	2480      	movs	r4, #128	; 0x80
    38ca:	02a4      	lsls	r4, r4, #10
    38cc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    38ce:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    38d0:	7854      	ldrb	r4, [r2, #1]
    38d2:	3c01      	subs	r4, #1
    38d4:	2c01      	cmp	r4, #1
    38d6:	d91c      	bls.n	3912 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    38d8:	040d      	lsls	r5, r1, #16
    38da:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    38dc:	24a0      	movs	r4, #160	; 0xa0
    38de:	05e4      	lsls	r4, r4, #23
    38e0:	432c      	orrs	r4, r5
    38e2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    38e4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    38e6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    38e8:	24d0      	movs	r4, #208	; 0xd0
    38ea:	0624      	lsls	r4, r4, #24
    38ec:	432c      	orrs	r4, r5
    38ee:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    38f0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    38f2:	78d4      	ldrb	r4, [r2, #3]
    38f4:	2c00      	cmp	r4, #0
    38f6:	d122      	bne.n	393e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    38f8:	035b      	lsls	r3, r3, #13
    38fa:	d51c      	bpl.n	3936 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    38fc:	7893      	ldrb	r3, [r2, #2]
    38fe:	2b01      	cmp	r3, #1
    3900:	d01e      	beq.n	3940 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    3902:	6141      	str	r1, [r0, #20]
    3904:	e017      	b.n	3936 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    3906:	2300      	movs	r3, #0
    3908:	e7d7      	b.n	38ba <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    390a:	24c0      	movs	r4, #192	; 0xc0
    390c:	02e4      	lsls	r4, r4, #11
    390e:	4323      	orrs	r3, r4
    3910:	e7dd      	b.n	38ce <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3912:	4c0d      	ldr	r4, [pc, #52]	; (3948 <_system_pinmux_config+0xa4>)
    3914:	4023      	ands	r3, r4
    3916:	e7df      	b.n	38d8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3918:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    391a:	040c      	lsls	r4, r1, #16
    391c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    391e:	23a0      	movs	r3, #160	; 0xa0
    3920:	05db      	lsls	r3, r3, #23
    3922:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3924:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3926:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3928:	23d0      	movs	r3, #208	; 0xd0
    392a:	061b      	lsls	r3, r3, #24
    392c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    392e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3930:	78d3      	ldrb	r3, [r2, #3]
    3932:	2b00      	cmp	r3, #0
    3934:	d103      	bne.n	393e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3936:	7853      	ldrb	r3, [r2, #1]
    3938:	3b01      	subs	r3, #1
    393a:	2b01      	cmp	r3, #1
    393c:	d902      	bls.n	3944 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    393e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3940:	6181      	str	r1, [r0, #24]
    3942:	e7f8      	b.n	3936 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3944:	6081      	str	r1, [r0, #8]
}
    3946:	e7fa      	b.n	393e <_system_pinmux_config+0x9a>
    3948:	fffbffff 	.word	0xfffbffff

0000394c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    394c:	b510      	push	{r4, lr}
    394e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3950:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3952:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3954:	2900      	cmp	r1, #0
    3956:	d104      	bne.n	3962 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3958:	0943      	lsrs	r3, r0, #5
    395a:	01db      	lsls	r3, r3, #7
    395c:	4905      	ldr	r1, [pc, #20]	; (3974 <system_pinmux_pin_set_config+0x28>)
    395e:	468c      	mov	ip, r1
    3960:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3962:	241f      	movs	r4, #31
    3964:	4020      	ands	r0, r4
    3966:	2101      	movs	r1, #1
    3968:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    396a:	0018      	movs	r0, r3
    396c:	4b02      	ldr	r3, [pc, #8]	; (3978 <system_pinmux_pin_set_config+0x2c>)
    396e:	4798      	blx	r3
}
    3970:	bd10      	pop	{r4, pc}
    3972:	46c0      	nop			; (mov r8, r8)
    3974:	40002800 	.word	0x40002800
    3978:	000038a5 	.word	0x000038a5

0000397c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    397c:	4770      	bx	lr
	...

00003980 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3980:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3982:	4b05      	ldr	r3, [pc, #20]	; (3998 <system_init+0x18>)
    3984:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3986:	4b05      	ldr	r3, [pc, #20]	; (399c <system_init+0x1c>)
    3988:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    398a:	4b05      	ldr	r3, [pc, #20]	; (39a0 <system_init+0x20>)
    398c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    398e:	4b05      	ldr	r3, [pc, #20]	; (39a4 <system_init+0x24>)
    3990:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3992:	4b05      	ldr	r3, [pc, #20]	; (39a8 <system_init+0x28>)
    3994:	4798      	blx	r3
}
    3996:	bd10      	pop	{r4, pc}
    3998:	00003575 	.word	0x00003575
    399c:	00002ddd 	.word	0x00002ddd
    39a0:	0000397d 	.word	0x0000397d
    39a4:	0000397d 	.word	0x0000397d
    39a8:	0000397d 	.word	0x0000397d

000039ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    39ac:	e7fe      	b.n	39ac <Dummy_Handler>
	...

000039b0 <Reset_Handler>:
{
    39b0:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    39b2:	4a1a      	ldr	r2, [pc, #104]	; (3a1c <Reset_Handler+0x6c>)
    39b4:	4b1a      	ldr	r3, [pc, #104]	; (3a20 <Reset_Handler+0x70>)
    39b6:	429a      	cmp	r2, r3
    39b8:	d011      	beq.n	39de <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    39ba:	001a      	movs	r2, r3
    39bc:	4b19      	ldr	r3, [pc, #100]	; (3a24 <Reset_Handler+0x74>)
    39be:	429a      	cmp	r2, r3
    39c0:	d20d      	bcs.n	39de <Reset_Handler+0x2e>
    39c2:	4a19      	ldr	r2, [pc, #100]	; (3a28 <Reset_Handler+0x78>)
    39c4:	3303      	adds	r3, #3
    39c6:	1a9b      	subs	r3, r3, r2
    39c8:	089b      	lsrs	r3, r3, #2
    39ca:	3301      	adds	r3, #1
    39cc:	009b      	lsls	r3, r3, #2
    39ce:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    39d0:	4813      	ldr	r0, [pc, #76]	; (3a20 <Reset_Handler+0x70>)
    39d2:	4912      	ldr	r1, [pc, #72]	; (3a1c <Reset_Handler+0x6c>)
    39d4:	588c      	ldr	r4, [r1, r2]
    39d6:	5084      	str	r4, [r0, r2]
    39d8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    39da:	429a      	cmp	r2, r3
    39dc:	d1fa      	bne.n	39d4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    39de:	4a13      	ldr	r2, [pc, #76]	; (3a2c <Reset_Handler+0x7c>)
    39e0:	4b13      	ldr	r3, [pc, #76]	; (3a30 <Reset_Handler+0x80>)
    39e2:	429a      	cmp	r2, r3
    39e4:	d20a      	bcs.n	39fc <Reset_Handler+0x4c>
    39e6:	43d3      	mvns	r3, r2
    39e8:	4911      	ldr	r1, [pc, #68]	; (3a30 <Reset_Handler+0x80>)
    39ea:	185b      	adds	r3, r3, r1
    39ec:	2103      	movs	r1, #3
    39ee:	438b      	bics	r3, r1
    39f0:	3304      	adds	r3, #4
    39f2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    39f4:	2100      	movs	r1, #0
    39f6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    39f8:	4293      	cmp	r3, r2
    39fa:	d1fc      	bne.n	39f6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    39fc:	4a0d      	ldr	r2, [pc, #52]	; (3a34 <Reset_Handler+0x84>)
    39fe:	21ff      	movs	r1, #255	; 0xff
    3a00:	4b0d      	ldr	r3, [pc, #52]	; (3a38 <Reset_Handler+0x88>)
    3a02:	438b      	bics	r3, r1
    3a04:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3a06:	4a0d      	ldr	r2, [pc, #52]	; (3a3c <Reset_Handler+0x8c>)
    3a08:	6853      	ldr	r3, [r2, #4]
    3a0a:	397f      	subs	r1, #127	; 0x7f
    3a0c:	430b      	orrs	r3, r1
    3a0e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3a10:	4b0b      	ldr	r3, [pc, #44]	; (3a40 <Reset_Handler+0x90>)
    3a12:	4798      	blx	r3
        main();
    3a14:	4b0b      	ldr	r3, [pc, #44]	; (3a44 <Reset_Handler+0x94>)
    3a16:	4798      	blx	r3
    3a18:	e7fe      	b.n	3a18 <Reset_Handler+0x68>
    3a1a:	46c0      	nop			; (mov r8, r8)
    3a1c:	00006b40 	.word	0x00006b40
    3a20:	20000000 	.word	0x20000000
    3a24:	200000b0 	.word	0x200000b0
    3a28:	20000004 	.word	0x20000004
    3a2c:	200000b0 	.word	0x200000b0
    3a30:	20004904 	.word	0x20004904
    3a34:	e000ed00 	.word	0xe000ed00
    3a38:	00000000 	.word	0x00000000
    3a3c:	41004000 	.word	0x41004000
    3a40:	00006031 	.word	0x00006031
    3a44:	00003ec9 	.word	0x00003ec9

00003a48 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3a48:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3a4a:	4a06      	ldr	r2, [pc, #24]	; (3a64 <_sbrk+0x1c>)
    3a4c:	6812      	ldr	r2, [r2, #0]
    3a4e:	2a00      	cmp	r2, #0
    3a50:	d004      	beq.n	3a5c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3a52:	4a04      	ldr	r2, [pc, #16]	; (3a64 <_sbrk+0x1c>)
    3a54:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3a56:	18c3      	adds	r3, r0, r3
    3a58:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3a5a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3a5c:	4902      	ldr	r1, [pc, #8]	; (3a68 <_sbrk+0x20>)
    3a5e:	4a01      	ldr	r2, [pc, #4]	; (3a64 <_sbrk+0x1c>)
    3a60:	6011      	str	r1, [r2, #0]
    3a62:	e7f6      	b.n	3a52 <_sbrk+0xa>
    3a64:	20003ce0 	.word	0x20003ce0
    3a68:	20006908 	.word	0x20006908

00003a6c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3a6c:	2001      	movs	r0, #1
    3a6e:	4240      	negs	r0, r0
    3a70:	4770      	bx	lr

00003a72 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    3a72:	2380      	movs	r3, #128	; 0x80
    3a74:	019b      	lsls	r3, r3, #6
    3a76:	604b      	str	r3, [r1, #4]

	return 0;
}
    3a78:	2000      	movs	r0, #0
    3a7a:	4770      	bx	lr

00003a7c <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3a7c:	2000      	movs	r0, #0
    3a7e:	4770      	bx	lr

00003a80 <at24cxx_write_continuous>:

	return;
}


void at24cxx_write_continuous(uint16_t start_address, uint16_t length, uint8_t const *wr_buffer) {
    3a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a82:	b085      	sub	sp, #20
    3a84:	af00      	add	r7, sp, #0
	
	uint8_t pack[2+length];
    3a86:	1c8e      	adds	r6, r1, #2
    3a88:	000b      	movs	r3, r1
    3a8a:	3309      	adds	r3, #9
    3a8c:	08db      	lsrs	r3, r3, #3
    3a8e:	00db      	lsls	r3, r3, #3
    3a90:	466c      	mov	r4, sp
    3a92:	1ae3      	subs	r3, r4, r3
    3a94:	469d      	mov	sp, r3
    3a96:	466d      	mov	r5, sp
	pack[0] = (start_address&0xFF00)>>8;
    3a98:	0a03      	lsrs	r3, r0, #8
    3a9a:	702b      	strb	r3, [r5, #0]
	pack[1] = start_address&0xFF;
    3a9c:	7068      	strb	r0, [r5, #1]
	uint16_t idx;
	for (idx=0;idx<length;idx++)
    3a9e:	2900      	cmp	r1, #0
    3aa0:	d007      	beq.n	3ab2 <at24cxx_write_continuous+0x32>
    3aa2:	2300      	movs	r3, #0
	pack[2+idx] = wr_buffer[idx];
    3aa4:	18e8      	adds	r0, r5, r3
    3aa6:	5cd4      	ldrb	r4, [r2, r3]
    3aa8:	7084      	strb	r4, [r0, #2]
    3aaa:	3301      	adds	r3, #1
	for (idx=0;idx<length;idx++)
    3aac:	b298      	uxth	r0, r3
    3aae:	4281      	cmp	r1, r0
    3ab0:	d8f8      	bhi.n	3aa4 <at24cxx_write_continuous+0x24>
	
	struct i2c_master_packet packet = {
    3ab2:	2350      	movs	r3, #80	; 0x50
    3ab4:	80bb      	strh	r3, [r7, #4]
    3ab6:	80fe      	strh	r6, [r7, #6]
    3ab8:	60bd      	str	r5, [r7, #8]
    3aba:	2300      	movs	r3, #0
    3abc:	733b      	strb	r3, [r7, #12]
    3abe:	737b      	strb	r3, [r7, #13]
    3ac0:	73bb      	strb	r3, [r7, #14]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) != STATUS_OK);
    3ac2:	4d05      	ldr	r5, [pc, #20]	; (3ad8 <at24cxx_write_continuous+0x58>)
    3ac4:	4c05      	ldr	r4, [pc, #20]	; (3adc <at24cxx_write_continuous+0x5c>)
    3ac6:	1d39      	adds	r1, r7, #4
    3ac8:	0028      	movs	r0, r5
    3aca:	47a0      	blx	r4
    3acc:	2800      	cmp	r0, #0
    3ace:	d1fa      	bne.n	3ac6 <at24cxx_write_continuous+0x46>

	return;
}
    3ad0:	46bd      	mov	sp, r7
    3ad2:	b005      	add	sp, #20
    3ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ad6:	46c0      	nop			; (mov r8, r8)
    3ad8:	20004894 	.word	0x20004894
    3adc:	0000085d 	.word	0x0000085d

00003ae0 <rx_handler>:
}



static void rx_handler(uint8_t instance)
{
    3ae0:	b510      	push	{r4, lr}
	// Wait for synch to complete
	#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	while (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY) {
	}
	#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	while (usart_hw->SYNCBUSY.reg) {
    3ae2:	4a15      	ldr	r2, [pc, #84]	; (3b38 <rx_handler+0x58>)
    3ae4:	69d3      	ldr	r3, [r2, #28]
    3ae6:	2b00      	cmp	r3, #0
    3ae8:	d1fc      	bne.n	3ae4 <rx_handler+0x4>
	}
	#endif

	// Read and mask interrupt flag register
	interrupt_status = usart_hw->INTFLAG.reg;
    3aea:	4b13      	ldr	r3, [pc, #76]	; (3b38 <rx_handler+0x58>)
    3aec:	7e1b      	ldrb	r3, [r3, #24]
    3aee:	b2db      	uxtb	r3, r3
    3af0:	4a12      	ldr	r2, [pc, #72]	; (3b3c <rx_handler+0x5c>)
    3af2:	8013      	strh	r3, [r2, #0]

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    3af4:	075b      	lsls	r3, r3, #29
    3af6:	d50d      	bpl.n	3b14 <rx_handler+0x34>
		// Check for errors
		error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3af8:	4b0f      	ldr	r3, [pc, #60]	; (3b38 <rx_handler+0x58>)
    3afa:	8b5a      	ldrh	r2, [r3, #26]
    3afc:	b2d2      	uxtb	r2, r2
    3afe:	233f      	movs	r3, #63	; 0x3f
    3b00:	4013      	ands	r3, r2
    3b02:	490f      	ldr	r1, [pc, #60]	; (3b40 <rx_handler+0x60>)
    3b04:	700b      	strb	r3, [r1, #0]
		if (error_code) {
    3b06:	d006      	beq.n	3b16 <rx_handler+0x36>
			// Only frame error and buffer overflow should be possible
			if (error_code &
    3b08:	2306      	movs	r3, #6
    3b0a:	4213      	tst	r3, r2
    3b0c:	d002      	beq.n	3b14 <rx_handler+0x34>
			(SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF)){
				
				usart_hw->STATUS.reg =
    3b0e:	2206      	movs	r2, #6
    3b10:	4b09      	ldr	r3, [pc, #36]	; (3b38 <rx_handler+0x58>)
    3b12:	835a      	strh	r2, [r3, #26]
			}
		}
		} else {
		// Error: only RX interrupt should be enabled
	}
}
    3b14:	bd10      	pop	{r4, pc}
			data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    3b16:	4b08      	ldr	r3, [pc, #32]	; (3b38 <rx_handler+0x58>)
    3b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3b1a:	490a      	ldr	r1, [pc, #40]	; (3b44 <rx_handler+0x64>)
    3b1c:	05db      	lsls	r3, r3, #23
    3b1e:	0ddb      	lsrs	r3, r3, #23
    3b20:	800b      	strh	r3, [r1, #0]
			count++;
    3b22:	4a09      	ldr	r2, [pc, #36]	; (3b48 <rx_handler+0x68>)
    3b24:	6813      	ldr	r3, [r2, #0]
    3b26:	3301      	adds	r3, #1
    3b28:	6013      	str	r3, [r2, #0]
			if (!xQueueSendFromISR(terminal_in_queue, (uint8_t *)&data,NULL))
    3b2a:	4b08      	ldr	r3, [pc, #32]	; (3b4c <rx_handler+0x6c>)
    3b2c:	6818      	ldr	r0, [r3, #0]
    3b2e:	2300      	movs	r3, #0
    3b30:	2200      	movs	r2, #0
    3b32:	4c07      	ldr	r4, [pc, #28]	; (3b50 <rx_handler+0x70>)
    3b34:	47a0      	blx	r4
}
    3b36:	e7ed      	b.n	3b14 <rx_handler+0x34>
    3b38:	42000c00 	.word	0x42000c00
    3b3c:	20003dfa 	.word	0x20003dfa
    3b40:	200048cc 	.word	0x200048cc
    3b44:	200048bc 	.word	0x200048bc
    3b48:	20003ce8 	.word	0x20003ce8
    3b4c:	20003cf8 	.word	0x20003cf8
    3b50:	00001635 	.word	0x00001635

00003b54 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3b54:	b570      	push	{r4, r5, r6, lr}
    3b56:	b082      	sub	sp, #8
    3b58:	0005      	movs	r5, r0
    3b5a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    3b5c:	2200      	movs	r2, #0
    3b5e:	466b      	mov	r3, sp
    3b60:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    3b62:	4c06      	ldr	r4, [pc, #24]	; (3b7c <usart_serial_getchar+0x28>)
    3b64:	466b      	mov	r3, sp
    3b66:	1d99      	adds	r1, r3, #6
    3b68:	0028      	movs	r0, r5
    3b6a:	47a0      	blx	r4
    3b6c:	2800      	cmp	r0, #0
    3b6e:	d1f9      	bne.n	3b64 <usart_serial_getchar+0x10>

	*c = temp;
    3b70:	466b      	mov	r3, sp
    3b72:	3306      	adds	r3, #6
    3b74:	881b      	ldrh	r3, [r3, #0]
    3b76:	7033      	strb	r3, [r6, #0]
}
    3b78:	b002      	add	sp, #8
    3b7a:	bd70      	pop	{r4, r5, r6, pc}
    3b7c:	0000296d 	.word	0x0000296d

00003b80 <usart_serial_putchar>:
{
    3b80:	b570      	push	{r4, r5, r6, lr}
    3b82:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    3b84:	b28c      	uxth	r4, r1
    3b86:	4e03      	ldr	r6, [pc, #12]	; (3b94 <usart_serial_putchar+0x14>)
    3b88:	0021      	movs	r1, r4
    3b8a:	0028      	movs	r0, r5
    3b8c:	47b0      	blx	r6
    3b8e:	2800      	cmp	r0, #0
    3b90:	d1fa      	bne.n	3b88 <usart_serial_putchar+0x8>
}
    3b92:	bd70      	pop	{r4, r5, r6, pc}
    3b94:	00002941 	.word	0x00002941

00003b98 <configure_opamp2>:
{
    3b98:	b530      	push	{r4, r5, lr}
    3b9a:	b087      	sub	sp, #28
    3b9c:	0005      	movs	r5, r0
	opamp_module_init();
    3b9e:	4b14      	ldr	r3, [pc, #80]	; (3bf0 <configure_opamp2+0x58>)
    3ba0:	4798      	blx	r3
	opamp2_get_config_defaults(&conf);
    3ba2:	ac01      	add	r4, sp, #4
    3ba4:	0020      	movs	r0, r4
    3ba6:	4b13      	ldr	r3, [pc, #76]	; (3bf4 <configure_opamp2+0x5c>)
    3ba8:	4798      	blx	r3
	conf.negative_input           = OPAMP2_NEG_MUX_TAP2;
    3baa:	2380      	movs	r3, #128	; 0x80
    3bac:	035b      	lsls	r3, r3, #13
    3bae:	9301      	str	r3, [sp, #4]
	conf.positive_input           = OPAMP2_POS_MUX_PIN2;
    3bb0:	2200      	movs	r2, #0
    3bb2:	6062      	str	r2, [r4, #4]
	conf.r1_connection            = OPAMP2_RES1_MUX_GND;
    3bb4:	23c0      	movs	r3, #192	; 0xc0
    3bb6:	015b      	lsls	r3, r3, #5
    3bb8:	8123      	strh	r3, [r4, #8]
	conf.config_common.potentiometer_selection = gain;
    3bba:	8165      	strh	r5, [r4, #10]
	conf.config_common.r1_enable  = true;
    3bbc:	2301      	movs	r3, #1
    3bbe:	7323      	strb	r3, [r4, #12]
	conf.config_common.r2_out     = true;
    3bc0:	73a3      	strb	r3, [r4, #14]
	conf.config_common.analog_out = true;
    3bc2:	74a3      	strb	r3, [r4, #18]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3bc4:	4669      	mov	r1, sp
    3bc6:	704a      	strb	r2, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3bc8:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    3bca:	70ca      	strb	r2, [r1, #3]
	opamp2_input_pin_conf.mux_position = OPAMP_INPUT_MUX;
    3bcc:	700b      	strb	r3, [r1, #0]
	system_pinmux_pin_set_config(OPAMP_INPUT_PIN, &opamp2_input_pin_conf);
    3bce:	2006      	movs	r0, #6
    3bd0:	4b09      	ldr	r3, [pc, #36]	; (3bf8 <configure_opamp2+0x60>)
    3bd2:	4798      	blx	r3
	opamp2_set_config(&conf);
    3bd4:	0020      	movs	r0, r4
    3bd6:	4b09      	ldr	r3, [pc, #36]	; (3bfc <configure_opamp2+0x64>)
    3bd8:	4798      	blx	r3
	opamp_enable(OPAMP_2);
    3bda:	2002      	movs	r0, #2
    3bdc:	4b08      	ldr	r3, [pc, #32]	; (3c00 <configure_opamp2+0x68>)
    3bde:	4798      	blx	r3
	while(!opamp_is_ready(OPAMP_2));
    3be0:	4c08      	ldr	r4, [pc, #32]	; (3c04 <configure_opamp2+0x6c>)
    3be2:	2002      	movs	r0, #2
    3be4:	47a0      	blx	r4
    3be6:	2800      	cmp	r0, #0
    3be8:	d0fb      	beq.n	3be2 <configure_opamp2+0x4a>
}
    3bea:	b007      	add	sp, #28
    3bec:	bd30      	pop	{r4, r5, pc}
    3bee:	46c0      	nop			; (mov r8, r8)
    3bf0:	00003379 	.word	0x00003379
    3bf4:	000033b5 	.word	0x000033b5
    3bf8:	0000394d 	.word	0x0000394d
    3bfc:	000033dd 	.word	0x000033dd
    3c00:	00003439 	.word	0x00003439
    3c04:	0000346d 	.word	0x0000346d

00003c08 <configure_adc>:
{
    3c08:	b530      	push	{r4, r5, lr}
    3c0a:	b08d      	sub	sp, #52	; 0x34
	adc_get_config_defaults(&config_adc);
    3c0c:	ac01      	add	r4, sp, #4
    3c0e:	0020      	movs	r0, r4
    3c10:	4b11      	ldr	r3, [pc, #68]	; (3c58 <configure_adc+0x50>)
    3c12:	4798      	blx	r3
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV8;
    3c14:	2302      	movs	r3, #2
    3c16:	70a3      	strb	r3, [r4, #2]
	config_adc.positive_input  = ADC_POSITIVE_INPUT_OPAMP2;//ADC_POSITIVE_INPUT_PIN14;
    3c18:	331d      	adds	r3, #29
    3c1a:	7123      	strb	r3, [r4, #4]
	adc_init(&adc_instance, ADC, &config_adc);
    3c1c:	4d0f      	ldr	r5, [pc, #60]	; (3c5c <configure_adc+0x54>)
    3c1e:	0022      	movs	r2, r4
    3c20:	490f      	ldr	r1, [pc, #60]	; (3c60 <configure_adc+0x58>)
    3c22:	0028      	movs	r0, r5
    3c24:	4b0f      	ldr	r3, [pc, #60]	; (3c64 <configure_adc+0x5c>)
    3c26:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    3c28:	682a      	ldr	r2, [r5, #0]
    3c2a:	8c13      	ldrh	r3, [r2, #32]
    3c2c:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    3c2e:	2b00      	cmp	r3, #0
    3c30:	d1fb      	bne.n	3c2a <configure_adc+0x22>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3c32:	2180      	movs	r1, #128	; 0x80
    3c34:	03c9      	lsls	r1, r1, #15
    3c36:	4b0c      	ldr	r3, [pc, #48]	; (3c68 <configure_adc+0x60>)
    3c38:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    3c3a:	2307      	movs	r3, #7
    3c3c:	7113      	strb	r3, [r2, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    3c3e:	7193      	strb	r3, [r2, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3c40:	7813      	ldrb	r3, [r2, #0]
    3c42:	2102      	movs	r1, #2
    3c44:	430b      	orrs	r3, r1
    3c46:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    3c48:	4b04      	ldr	r3, [pc, #16]	; (3c5c <configure_adc+0x54>)
    3c4a:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    3c4c:	8c13      	ldrh	r3, [r2, #32]
    3c4e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    3c50:	2b00      	cmp	r3, #0
    3c52:	d1fb      	bne.n	3c4c <configure_adc+0x44>
}
    3c54:	b00d      	add	sp, #52	; 0x34
    3c56:	bd30      	pop	{r4, r5, pc}
    3c58:	00002e2d 	.word	0x00002e2d
    3c5c:	200048d0 	.word	0x200048d0
    3c60:	43000c00 	.word	0x43000c00
    3c64:	00002e71 	.word	0x00002e71
    3c68:	e000e100 	.word	0xe000e100

00003c6c <configure_adc_callbacks>:
{
    3c6c:	b510      	push	{r4, lr}
	adc_register_callback(&adc_instance,
    3c6e:	4c05      	ldr	r4, [pc, #20]	; (3c84 <configure_adc_callbacks+0x18>)
    3c70:	2200      	movs	r2, #0
    3c72:	4905      	ldr	r1, [pc, #20]	; (3c88 <configure_adc_callbacks+0x1c>)
    3c74:	0020      	movs	r0, r4
    3c76:	4b05      	ldr	r3, [pc, #20]	; (3c8c <configure_adc_callbacks+0x20>)
    3c78:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    3c7a:	7ee3      	ldrb	r3, [r4, #27]
    3c7c:	2201      	movs	r2, #1
    3c7e:	4313      	orrs	r3, r2
    3c80:	76e3      	strb	r3, [r4, #27]
}
    3c82:	bd10      	pop	{r4, pc}
    3c84:	200048d0 	.word	0x200048d0
    3c88:	00004139 	.word	0x00004139
    3c8c:	00003319 	.word	0x00003319

00003c90 <QueueInit>:
	QueueIn = QueueOut = 0;
    3c90:	2300      	movs	r3, #0
    3c92:	4a02      	ldr	r2, [pc, #8]	; (3c9c <QueueInit+0xc>)
    3c94:	8013      	strh	r3, [r2, #0]
    3c96:	4a02      	ldr	r2, [pc, #8]	; (3ca0 <QueueInit+0x10>)
    3c98:	8013      	strh	r3, [r2, #0]
}
    3c9a:	4770      	bx	lr
    3c9c:	200048be 	.word	0x200048be
    3ca0:	200048c0 	.word	0x200048c0

00003ca4 <QueuePut>:
{
    3ca4:	b570      	push	{r4, r5, r6, lr}
    3ca6:	0005      	movs	r5, r0
	if(QueueIn == (( QueueOut - 1 + QUEUE_SIZE) % QUEUE_SIZE))
    3ca8:	4b0b      	ldr	r3, [pc, #44]	; (3cd8 <QueuePut+0x34>)
    3caa:	881c      	ldrh	r4, [r3, #0]
    3cac:	4b0b      	ldr	r3, [pc, #44]	; (3cdc <QueuePut+0x38>)
    3cae:	8818      	ldrh	r0, [r3, #0]
    3cb0:	3064      	adds	r0, #100	; 0x64
    3cb2:	2165      	movs	r1, #101	; 0x65
    3cb4:	4b0a      	ldr	r3, [pc, #40]	; (3ce0 <QueuePut+0x3c>)
    3cb6:	4798      	blx	r3
    3cb8:	428c      	cmp	r4, r1
    3cba:	d00a      	beq.n	3cd2 <QueuePut+0x2e>
	Queue[QueueIn] = new;
    3cbc:	0062      	lsls	r2, r4, #1
    3cbe:	4b09      	ldr	r3, [pc, #36]	; (3ce4 <QueuePut+0x40>)
    3cc0:	52d5      	strh	r5, [r2, r3]
	QueueIn = (QueueIn + 1) % QUEUE_SIZE;
    3cc2:	1c60      	adds	r0, r4, #1
    3cc4:	2165      	movs	r1, #101	; 0x65
    3cc6:	4b06      	ldr	r3, [pc, #24]	; (3ce0 <QueuePut+0x3c>)
    3cc8:	4798      	blx	r3
    3cca:	4b03      	ldr	r3, [pc, #12]	; (3cd8 <QueuePut+0x34>)
    3ccc:	8019      	strh	r1, [r3, #0]
	return 0; // No errors
    3cce:	2000      	movs	r0, #0
}
    3cd0:	bd70      	pop	{r4, r5, r6, pc}
		return -1; /* Queue Full*/
    3cd2:	2001      	movs	r0, #1
    3cd4:	4240      	negs	r0, r0
    3cd6:	e7fb      	b.n	3cd0 <QueuePut+0x2c>
    3cd8:	200048c0 	.word	0x200048c0
    3cdc:	200048be 	.word	0x200048be
    3ce0:	00004709 	.word	0x00004709
    3ce4:	20003d30 	.word	0x20003d30

00003ce8 <main_task>:
{
    3ce8:	b570      	push	{r4, r5, r6, lr}
	QueueInit();
    3cea:	4b3a      	ldr	r3, [pc, #232]	; (3dd4 <main_task+0xec>)
    3cec:	4798      	blx	r3
	QueuePut(0xAA);
    3cee:	20aa      	movs	r0, #170	; 0xaa
    3cf0:	4b39      	ldr	r3, [pc, #228]	; (3dd8 <main_task+0xf0>)
    3cf2:	4798      	blx	r3
		memset(adc_result_buffer,0,ADC_SAMPLES);
    3cf4:	4c39      	ldr	r4, [pc, #228]	; (3ddc <main_task+0xf4>)
    3cf6:	4e3a      	ldr	r6, [pc, #232]	; (3de0 <main_task+0xf8>)
		adc_read_buffer_job(&adc_instance, adc_result_buffer, n_sample);
    3cf8:	4d3a      	ldr	r5, [pc, #232]	; (3de4 <main_task+0xfc>)
    3cfa:	e034      	b.n	3d66 <main_task+0x7e>
					pick_count_up = 0;
    3cfc:	2200      	movs	r2, #0
    3cfe:	4b3a      	ldr	r3, [pc, #232]	; (3de8 <main_task+0x100>)
    3d00:	601a      	str	r2, [r3, #0]
					pick_count_down = PICK_COUNT_DOWN_DEFAULT;	
    3d02:	3214      	adds	r2, #20
    3d04:	4b39      	ldr	r3, [pc, #228]	; (3dec <main_task+0x104>)
    3d06:	601a      	str	r2, [r3, #0]
					alarm_detected = 1;
    3d08:	3a13      	subs	r2, #19
    3d0a:	4b39      	ldr	r3, [pc, #228]	; (3df0 <main_task+0x108>)
    3d0c:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    3d0e:	2280      	movs	r2, #128	; 0x80
    3d10:	0392      	lsls	r2, r2, #14
    3d12:	4b38      	ldr	r3, [pc, #224]	; (3df4 <main_task+0x10c>)
    3d14:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
    3d16:	2280      	movs	r2, #128	; 0x80
    3d18:	0152      	lsls	r2, r2, #5
    3d1a:	4b37      	ldr	r3, [pc, #220]	; (3df8 <main_task+0x110>)
    3d1c:	615a      	str	r2, [r3, #20]
    3d1e:	e039      	b.n	3d94 <main_task+0xac>
				if(pick_count_down > 0)
    3d20:	4b32      	ldr	r3, [pc, #200]	; (3dec <main_task+0x104>)
    3d22:	681b      	ldr	r3, [r3, #0]
    3d24:	2b00      	cmp	r3, #0
    3d26:	d003      	beq.n	3d30 <main_task+0x48>
					pick_count_down--;
    3d28:	3b01      	subs	r3, #1
    3d2a:	4a30      	ldr	r2, [pc, #192]	; (3dec <main_task+0x104>)
    3d2c:	6013      	str	r3, [r2, #0]
    3d2e:	e031      	b.n	3d94 <main_task+0xac>
					pick_count_down = PICK_COUNT_DOWN_DEFAULT;
    3d30:	2214      	movs	r2, #20
    3d32:	4b2e      	ldr	r3, [pc, #184]	; (3dec <main_task+0x104>)
    3d34:	601a      	str	r2, [r3, #0]
					pick_count_up = 0;
    3d36:	2300      	movs	r3, #0
    3d38:	4a2b      	ldr	r2, [pc, #172]	; (3de8 <main_task+0x100>)
    3d3a:	6013      	str	r3, [r2, #0]
					alarm_detected = 0;
    3d3c:	4a2c      	ldr	r2, [pc, #176]	; (3df0 <main_task+0x108>)
    3d3e:	7013      	strb	r3, [r2, #0]
    3d40:	2280      	movs	r2, #128	; 0x80
    3d42:	0392      	lsls	r2, r2, #14
    3d44:	4b2b      	ldr	r3, [pc, #172]	; (3df4 <main_task+0x10c>)
    3d46:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    3d48:	2280      	movs	r2, #128	; 0x80
    3d4a:	0152      	lsls	r2, r2, #5
    3d4c:	4b2a      	ldr	r3, [pc, #168]	; (3df8 <main_task+0x110>)
    3d4e:	619a      	str	r2, [r3, #24]
    3d50:	e020      	b.n	3d94 <main_task+0xac>
				case MUX_12R_4R:temp_gain = OPAMP_POT_MUX_12R_4R;
    3d52:	2080      	movs	r0, #128	; 0x80
    3d54:	0180      	lsls	r0, r0, #6
			configure_opamp2(temp_gain);
    3d56:	4b29      	ldr	r3, [pc, #164]	; (3dfc <main_task+0x114>)
    3d58:	4798      	blx	r3
			change_gain = false;
    3d5a:	2200      	movs	r2, #0
    3d5c:	4b28      	ldr	r3, [pc, #160]	; (3e00 <main_task+0x118>)
    3d5e:	701a      	strb	r2, [r3, #0]
		vTaskDelay(MAIN_TASK_DELAY);
    3d60:	2032      	movs	r0, #50	; 0x32
    3d62:	4b28      	ldr	r3, [pc, #160]	; (3e04 <main_task+0x11c>)
    3d64:	4798      	blx	r3
		memset(adc_result_buffer,0,ADC_SAMPLES);
    3d66:	2280      	movs	r2, #128	; 0x80
    3d68:	0092      	lsls	r2, r2, #2
    3d6a:	2100      	movs	r1, #0
    3d6c:	0020      	movs	r0, r4
    3d6e:	47b0      	blx	r6
		adc_read_buffer_job(&adc_instance, adc_result_buffer, n_sample);
    3d70:	882a      	ldrh	r2, [r5, #0]
    3d72:	0021      	movs	r1, r4
    3d74:	4824      	ldr	r0, [pc, #144]	; (3e08 <main_task+0x120>)
    3d76:	4b25      	ldr	r3, [pc, #148]	; (3e0c <main_task+0x124>)
    3d78:	4798      	blx	r3
			if(integrale < threshold_value)
    3d7a:	4b25      	ldr	r3, [pc, #148]	; (3e10 <main_task+0x128>)
    3d7c:	881a      	ldrh	r2, [r3, #0]
    3d7e:	4b25      	ldr	r3, [pc, #148]	; (3e14 <main_task+0x12c>)
    3d80:	881b      	ldrh	r3, [r3, #0]
    3d82:	429a      	cmp	r2, r3
    3d84:	d2cc      	bcs.n	3d20 <main_task+0x38>
				if(pick_count_up < PICK_COUNT_UP_DEFAULT)
    3d86:	4b18      	ldr	r3, [pc, #96]	; (3de8 <main_task+0x100>)
    3d88:	681b      	ldr	r3, [r3, #0]
    3d8a:	2b27      	cmp	r3, #39	; 0x27
    3d8c:	d8b6      	bhi.n	3cfc <main_task+0x14>
					pick_count_up++;
    3d8e:	3301      	adds	r3, #1
    3d90:	4a15      	ldr	r2, [pc, #84]	; (3de8 <main_task+0x100>)
    3d92:	6013      	str	r3, [r2, #0]
		if(change_gain == true)
    3d94:	4b1a      	ldr	r3, [pc, #104]	; (3e00 <main_task+0x118>)
    3d96:	781b      	ldrb	r3, [r3, #0]
    3d98:	2b00      	cmp	r3, #0
    3d9a:	d0e1      	beq.n	3d60 <main_task+0x78>
			switch(analog_gain_1){
    3d9c:	4b1e      	ldr	r3, [pc, #120]	; (3e18 <main_task+0x130>)
    3d9e:	781a      	ldrb	r2, [r3, #0]
    3da0:	2a08      	cmp	r2, #8
    3da2:	d815      	bhi.n	3dd0 <main_task+0xe8>
    3da4:	0093      	lsls	r3, r2, #2
    3da6:	4a1d      	ldr	r2, [pc, #116]	; (3e1c <main_task+0x134>)
    3da8:	58d3      	ldr	r3, [r2, r3]
    3daa:	469f      	mov	pc, r3
				case MUX_8R_8R:temp_gain = OPAMP_POT_MUX_8R_8R;
    3dac:	2080      	movs	r0, #128	; 0x80
    3dae:	01c0      	lsls	r0, r0, #7
				break;
    3db0:	e7d1      	b.n	3d56 <main_task+0x6e>
				case MUX_6R_10R:temp_gain = OPAMP_POT_MUX_6R_10R;
    3db2:	20c0      	movs	r0, #192	; 0xc0
    3db4:	01c0      	lsls	r0, r0, #7
				break;
    3db6:	e7ce      	b.n	3d56 <main_task+0x6e>
				case MUX_4R_12R:temp_gain = OPAMP_POT_MUX_4R_12R;
    3db8:	2080      	movs	r0, #128	; 0x80
    3dba:	0200      	lsls	r0, r0, #8
				break;
    3dbc:	e7cb      	b.n	3d56 <main_task+0x6e>
				case MUX_3R_13R:temp_gain = OPAMP_POT_MUX_3R_13R;
    3dbe:	20a0      	movs	r0, #160	; 0xa0
    3dc0:	0200      	lsls	r0, r0, #8
				break;
    3dc2:	e7c8      	b.n	3d56 <main_task+0x6e>
				case MUX_2R_14R:temp_gain = OPAMP_POT_MUX_2R_14R;
    3dc4:	20c0      	movs	r0, #192	; 0xc0
    3dc6:	0200      	lsls	r0, r0, #8
				break;
    3dc8:	e7c5      	b.n	3d56 <main_task+0x6e>
				case MUX_R_15R:temp_gain = OPAMP_POT_MUX_R_15R;
    3dca:	20e0      	movs	r0, #224	; 0xe0
    3dcc:	0200      	lsls	r0, r0, #8
				break;
    3dce:	e7c2      	b.n	3d56 <main_task+0x6e>
			enum opamp_pot_mux temp_gain = OPAMP_POT_MUX_14R_2R;
    3dd0:	2000      	movs	r0, #0
    3dd2:	e7c0      	b.n	3d56 <main_task+0x6e>
    3dd4:	00003c91 	.word	0x00003c91
    3dd8:	00003ca5 	.word	0x00003ca5
    3ddc:	20004494 	.word	0x20004494
    3de0:	0000608b 	.word	0x0000608b
    3de4:	20000034 	.word	0x20000034
    3de8:	20003cf4 	.word	0x20003cf4
    3dec:	20000038 	.word	0x20000038
    3df0:	20003ce4 	.word	0x20003ce4
    3df4:	40002800 	.word	0x40002800
    3df8:	40002880 	.word	0x40002880
    3dfc:	00003b99 	.word	0x00003b99
    3e00:	20003ce5 	.word	0x20003ce5
    3e04:	00001df9 	.word	0x00001df9
    3e08:	200048d0 	.word	0x200048d0
    3e0c:	0000332d 	.word	0x0000332d
    3e10:	20003cf0 	.word	0x20003cf0
    3e14:	20000048 	.word	0x20000048
    3e18:	20000031 	.word	0x20000031
    3e1c:	00006a08 	.word	0x00006a08

00003e20 <configure_i2c_master>:
{
    3e20:	b530      	push	{r4, r5, lr}
    3e22:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    3e24:	aa01      	add	r2, sp, #4
    3e26:	2364      	movs	r3, #100	; 0x64
    3e28:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    3e2a:	4b20      	ldr	r3, [pc, #128]	; (3eac <configure_i2c_master+0x8c>)
    3e2c:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    3e2e:	2300      	movs	r3, #0
    3e30:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    3e32:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    3e34:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    3e36:	2180      	movs	r1, #128	; 0x80
    3e38:	0389      	lsls	r1, r1, #14
    3e3a:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    3e3c:	2101      	movs	r1, #1
    3e3e:	4249      	negs	r1, r1
    3e40:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    3e42:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    3e44:	6213      	str	r3, [r2, #32]
	config->scl_low_timeout  = false;
    3e46:	3125      	adds	r1, #37	; 0x25
    3e48:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    3e4a:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    3e4c:	3108      	adds	r1, #8
    3e4e:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    3e50:	3101      	adds	r1, #1
    3e52:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    3e54:	3101      	adds	r1, #1
    3e56:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    3e58:	33d7      	adds	r3, #215	; 0xd7
    3e5a:	8613      	strh	r3, [r2, #48]	; 0x30
	config_i2c_master.buffer_timeout = 10000;
    3e5c:	4b14      	ldr	r3, [pc, #80]	; (3eb0 <configure_i2c_master+0x90>)
    3e5e:	82d3      	strh	r3, [r2, #22]
	i2c_master_init(&i2c_master_instance, CONF_I2C_MASTER_MODULE, &config_i2c_master);
    3e60:	4c14      	ldr	r4, [pc, #80]	; (3eb4 <configure_i2c_master+0x94>)
    3e62:	4915      	ldr	r1, [pc, #84]	; (3eb8 <configure_i2c_master+0x98>)
    3e64:	0020      	movs	r0, r4
    3e66:	4b15      	ldr	r3, [pc, #84]	; (3ebc <configure_i2c_master+0x9c>)
    3e68:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3e6a:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3e6c:	2207      	movs	r2, #7
    3e6e:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    3e70:	421a      	tst	r2, r3
    3e72:	d1fc      	bne.n	3e6e <configure_i2c_master+0x4e>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    3e74:	6823      	ldr	r3, [r4, #0]
    3e76:	2202      	movs	r2, #2
    3e78:	4313      	orrs	r3, r2
    3e7a:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3e7c:	4d0d      	ldr	r5, [pc, #52]	; (3eb4 <configure_i2c_master+0x94>)
    3e7e:	6828      	ldr	r0, [r5, #0]
    3e80:	4b0f      	ldr	r3, [pc, #60]	; (3ec0 <configure_i2c_master+0xa0>)
    3e82:	4798      	blx	r3
    3e84:	231f      	movs	r3, #31
    3e86:	4018      	ands	r0, r3
    3e88:	3b1e      	subs	r3, #30
    3e8a:	4083      	lsls	r3, r0
    3e8c:	4a0d      	ldr	r2, [pc, #52]	; (3ec4 <configure_i2c_master+0xa4>)
    3e8e:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    3e90:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    3e92:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    3e94:	2110      	movs	r1, #16
    3e96:	8b62      	ldrh	r2, [r4, #26]
    3e98:	420a      	tst	r2, r1
    3e9a:	d104      	bne.n	3ea6 <configure_i2c_master+0x86>
		timeout_counter++;
    3e9c:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    3e9e:	4283      	cmp	r3, r0
    3ea0:	d3f9      	bcc.n	3e96 <configure_i2c_master+0x76>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    3ea2:	2310      	movs	r3, #16
    3ea4:	8363      	strh	r3, [r4, #26]
}
    3ea6:	b00f      	add	sp, #60	; 0x3c
    3ea8:	bd30      	pop	{r4, r5, pc}
    3eaa:	46c0      	nop			; (mov r8, r8)
    3eac:	00000d48 	.word	0x00000d48
    3eb0:	00002710 	.word	0x00002710
    3eb4:	20004894 	.word	0x20004894
    3eb8:	42000800 	.word	0x42000800
    3ebc:	0000022d 	.word	0x0000022d
    3ec0:	00002c71 	.word	0x00002c71
    3ec4:	e000e100 	.word	0xe000e100

00003ec8 <main>:
{
    3ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eca:	b095      	sub	sp, #84	; 0x54
  __ASM volatile ("cpsid i" : : : "memory");
    3ecc:	b672      	cpsid	i
    3ece:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3ed2:	2400      	movs	r4, #0
    3ed4:	2600      	movs	r6, #0
    3ed6:	4b63      	ldr	r3, [pc, #396]	; (4064 <main+0x19c>)
    3ed8:	701c      	strb	r4, [r3, #0]
	system_init();
    3eda:	4b63      	ldr	r3, [pc, #396]	; (4068 <main+0x1a0>)
    3edc:	4798      	blx	r3
	delay_init();
    3ede:	4b63      	ldr	r3, [pc, #396]	; (406c <main+0x1a4>)
    3ee0:	4798      	blx	r3
	configure_i2c_master();
    3ee2:	4b63      	ldr	r3, [pc, #396]	; (4070 <main+0x1a8>)
    3ee4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3ee6:	aa04      	add	r2, sp, #16
    3ee8:	2380      	movs	r3, #128	; 0x80
    3eea:	05db      	lsls	r3, r3, #23
    3eec:	9304      	str	r3, [sp, #16]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3eee:	6054      	str	r4, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    3ef0:	23ff      	movs	r3, #255	; 0xff
    3ef2:	8113      	strh	r3, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    3ef4:	7294      	strb	r4, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3ef6:	72d4      	strb	r4, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    3ef8:	2501      	movs	r5, #1
    3efa:	3bdb      	subs	r3, #219	; 0xdb
    3efc:	54d5      	strb	r5, [r2, r3]
	config->transmitter_enable = true;
    3efe:	3301      	adds	r3, #1
    3f00:	54d5      	strb	r5, [r2, r3]
	config->clock_polarity_inverted = false;
    3f02:	3301      	adds	r3, #1
    3f04:	54d4      	strb	r4, [r2, r3]
	config->use_external_clock = false;
    3f06:	3301      	adds	r3, #1
    3f08:	54d4      	strb	r4, [r2, r3]
	config->ext_clock_freq   = 0;
    3f0a:	6294      	str	r4, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3f0c:	3305      	adds	r3, #5
    3f0e:	54d4      	strb	r4, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    3f10:	3301      	adds	r3, #1
    3f12:	54d4      	strb	r4, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3f14:	6154      	str	r4, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3f16:	8214      	strh	r4, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3f18:	2300      	movs	r3, #0
    3f1a:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3f1c:	7616      	strb	r6, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3f1e:	7716      	strb	r6, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3f20:	7656      	strb	r6, [r2, #25]
	config->receive_pulse_length                    = 19;
    3f22:	2313      	movs	r3, #19
    3f24:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3f26:	7756      	strb	r6, [r2, #29]
	config_usart.baudrate    = 115200;
    3f28:	23e1      	movs	r3, #225	; 0xe1
    3f2a:	025b      	lsls	r3, r3, #9
    3f2c:	6213      	str	r3, [r2, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    3f2e:	2380      	movs	r3, #128	; 0x80
    3f30:	035b      	lsls	r3, r3, #13
    3f32:	60d3      	str	r3, [r2, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    3f34:	4b4f      	ldr	r3, [pc, #316]	; (4074 <main+0x1ac>)
    3f36:	6313      	str	r3, [r2, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    3f38:	4b4f      	ldr	r3, [pc, #316]	; (4078 <main+0x1b0>)
    3f3a:	6353      	str	r3, [r2, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    3f3c:	2301      	movs	r3, #1
    3f3e:	425b      	negs	r3, r3
    3f40:	6393      	str	r3, [r2, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    3f42:	63d3      	str	r3, [r2, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3f44:	4c4d      	ldr	r4, [pc, #308]	; (407c <main+0x1b4>)
    3f46:	4b4e      	ldr	r3, [pc, #312]	; (4080 <main+0x1b8>)
    3f48:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3f4a:	494e      	ldr	r1, [pc, #312]	; (4084 <main+0x1bc>)
    3f4c:	4b4e      	ldr	r3, [pc, #312]	; (4088 <main+0x1c0>)
    3f4e:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3f50:	494e      	ldr	r1, [pc, #312]	; (408c <main+0x1c4>)
    3f52:	4b4f      	ldr	r3, [pc, #316]	; (4090 <main+0x1c8>)
    3f54:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    3f56:	494f      	ldr	r1, [pc, #316]	; (4094 <main+0x1cc>)
    3f58:	0020      	movs	r0, r4
    3f5a:	4b4f      	ldr	r3, [pc, #316]	; (4098 <main+0x1d0>)
    3f5c:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    3f5e:	4e4f      	ldr	r6, [pc, #316]	; (409c <main+0x1d4>)
    3f60:	6833      	ldr	r3, [r6, #0]
    3f62:	6898      	ldr	r0, [r3, #8]
    3f64:	2100      	movs	r1, #0
    3f66:	4f4e      	ldr	r7, [pc, #312]	; (40a0 <main+0x1d8>)
    3f68:	47b8      	blx	r7
	setbuf(stdin, NULL);
    3f6a:	6833      	ldr	r3, [r6, #0]
    3f6c:	6858      	ldr	r0, [r3, #4]
    3f6e:	2100      	movs	r1, #0
    3f70:	47b8      	blx	r7
	instance_index = _sercom_get_sercom_inst_index(EDBG_CDC_MODULE);
    3f72:	4848      	ldr	r0, [pc, #288]	; (4094 <main+0x1cc>)
    3f74:	4b4b      	ldr	r3, [pc, #300]	; (40a4 <main+0x1dc>)
    3f76:	4798      	blx	r3
	_sercom_set_handler(instance_index, rx_handler);
    3f78:	494b      	ldr	r1, [pc, #300]	; (40a8 <main+0x1e0>)
    3f7a:	4b4c      	ldr	r3, [pc, #304]	; (40ac <main+0x1e4>)
    3f7c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3f7e:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3f80:	0030      	movs	r0, r6
    3f82:	4b4b      	ldr	r3, [pc, #300]	; (40b0 <main+0x1e8>)
    3f84:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3f86:	231f      	movs	r3, #31
    3f88:	4018      	ands	r0, r3
    3f8a:	4085      	lsls	r5, r0
    3f8c:	4b49      	ldr	r3, [pc, #292]	; (40b4 <main+0x1ec>)
    3f8e:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3f90:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    3f92:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3f94:	2a00      	cmp	r2, #0
    3f96:	d1fc      	bne.n	3f92 <main+0xca>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3f98:	6833      	ldr	r3, [r6, #0]
    3f9a:	3202      	adds	r2, #2
    3f9c:	4313      	orrs	r3, r2
    3f9e:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3fa0:	4b36      	ldr	r3, [pc, #216]	; (407c <main+0x1b4>)
    3fa2:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    3fa4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3fa6:	2a00      	cmp	r2, #0
    3fa8:	d1fc      	bne.n	3fa4 <main+0xdc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    3faa:	6859      	ldr	r1, [r3, #4]
    3fac:	2280      	movs	r2, #128	; 0x80
    3fae:	0252      	lsls	r2, r2, #9
    3fb0:	430a      	orrs	r2, r1
    3fb2:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    3fb4:	2101      	movs	r1, #1
    3fb6:	4a31      	ldr	r2, [pc, #196]	; (407c <main+0x1b4>)
    3fb8:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    3fba:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3fbc:	2a00      	cmp	r2, #0
    3fbe:	d1fc      	bne.n	3fba <main+0xf2>
	return (usart_hw->SYNCBUSY.reg);
    3fc0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3fc2:	2a00      	cmp	r2, #0
    3fc4:	d1fc      	bne.n	3fc0 <main+0xf8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    3fc6:	6859      	ldr	r1, [r3, #4]
    3fc8:	2280      	movs	r2, #128	; 0x80
    3fca:	0292      	lsls	r2, r2, #10
    3fcc:	430a      	orrs	r2, r1
    3fce:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    3fd0:	2101      	movs	r1, #1
    3fd2:	4a2a      	ldr	r2, [pc, #168]	; (407c <main+0x1b4>)
    3fd4:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    3fd6:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3fd8:	2a00      	cmp	r2, #0
    3fda:	d1fc      	bne.n	3fd6 <main+0x10e>
	((SercomUsart *)EDBG_CDC_MODULE)->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    3fdc:	3204      	adds	r2, #4
    3fde:	4b2d      	ldr	r3, [pc, #180]	; (4094 <main+0x1cc>)
    3fe0:	759a      	strb	r2, [r3, #22]
	configure_adc();
    3fe2:	4b35      	ldr	r3, [pc, #212]	; (40b8 <main+0x1f0>)
    3fe4:	4798      	blx	r3
	configure_adc_callbacks();
    3fe6:	4b35      	ldr	r3, [pc, #212]	; (40bc <main+0x1f4>)
    3fe8:	4798      	blx	r3
	MAX5435M_write_byte(MAX5435_REGISTER_VREG,trimmer_value(analog_gain_2) );
    3fea:	4d35      	ldr	r5, [pc, #212]	; (40c0 <main+0x1f8>)
    3fec:	7828      	ldrb	r0, [r5, #0]
    3fee:	4c35      	ldr	r4, [pc, #212]	; (40c4 <main+0x1fc>)
    3ff0:	47a0      	blx	r4
    3ff2:	0001      	movs	r1, r0
    3ff4:	2011      	movs	r0, #17
    3ff6:	4b34      	ldr	r3, [pc, #208]	; (40c8 <main+0x200>)
    3ff8:	4798      	blx	r3
	MAX5435L_write_byte(MAX5435_REGISTER_VREG,trimmer_value(analog_gain_2) );
    3ffa:	7828      	ldrb	r0, [r5, #0]
    3ffc:	47a0      	blx	r4
    3ffe:	0001      	movs	r1, r0
    4000:	2011      	movs	r0, #17
    4002:	4b32      	ldr	r3, [pc, #200]	; (40cc <main+0x204>)
    4004:	4798      	blx	r3
	lis302dl_write_configuration();
    4006:	4b32      	ldr	r3, [pc, #200]	; (40d0 <main+0x208>)
    4008:	4798      	blx	r3
	uint8_t lis302dl_who = lis302dl_read_byte(LIS302DL_REG_WHO_AM_I);
    400a:	200f      	movs	r0, #15
    400c:	4b31      	ldr	r3, [pc, #196]	; (40d4 <main+0x20c>)
    400e:	4798      	blx	r3
	configure_opamp2(OPAMP_POT_MUX_8R_8R);
    4010:	2080      	movs	r0, #128	; 0x80
    4012:	01c0      	lsls	r0, r0, #7
    4014:	4b30      	ldr	r3, [pc, #192]	; (40d8 <main+0x210>)
    4016:	4798      	blx	r3
	terminal_in_queue = xQueueCreate(64, sizeof(uint8_t));
    4018:	2200      	movs	r2, #0
    401a:	2101      	movs	r1, #1
    401c:	2040      	movs	r0, #64	; 0x40
    401e:	4b2f      	ldr	r3, [pc, #188]	; (40dc <main+0x214>)
    4020:	4798      	blx	r3
    4022:	4b2f      	ldr	r3, [pc, #188]	; (40e0 <main+0x218>)
    4024:	6018      	str	r0, [r3, #0]
	xTaskCreate(main_task,
    4026:	2400      	movs	r4, #0
    4028:	9403      	str	r4, [sp, #12]
    402a:	9402      	str	r4, [sp, #8]
    402c:	9401      	str	r4, [sp, #4]
    402e:	2302      	movs	r3, #2
    4030:	9300      	str	r3, [sp, #0]
    4032:	2300      	movs	r3, #0
    4034:	2264      	movs	r2, #100	; 0x64
    4036:	492b      	ldr	r1, [pc, #172]	; (40e4 <main+0x21c>)
    4038:	482b      	ldr	r0, [pc, #172]	; (40e8 <main+0x220>)
    403a:	4d2c      	ldr	r5, [pc, #176]	; (40ec <main+0x224>)
    403c:	47a8      	blx	r5
	xTaskCreate(uart_task,
    403e:	9403      	str	r4, [sp, #12]
    4040:	9402      	str	r4, [sp, #8]
    4042:	9401      	str	r4, [sp, #4]
    4044:	3401      	adds	r4, #1
    4046:	9400      	str	r4, [sp, #0]
    4048:	2300      	movs	r3, #0
    404a:	2264      	movs	r2, #100	; 0x64
    404c:	4928      	ldr	r1, [pc, #160]	; (40f0 <main+0x228>)
    404e:	4829      	ldr	r0, [pc, #164]	; (40f4 <main+0x22c>)
    4050:	47a8      	blx	r5
	cpu_irq_enable();
    4052:	4b04      	ldr	r3, [pc, #16]	; (4064 <main+0x19c>)
    4054:	701c      	strb	r4, [r3, #0]
    4056:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    405a:	b662      	cpsie	i
	vTaskStartScheduler();
    405c:	4b26      	ldr	r3, [pc, #152]	; (40f8 <main+0x230>)
    405e:	4798      	blx	r3
    4060:	e7fe      	b.n	4060 <main+0x198>
    4062:	46c0      	nop			; (mov r8, r8)
    4064:	20000030 	.word	0x20000030
    4068:	00003981 	.word	0x00003981
    406c:	00002d01 	.word	0x00002d01
    4070:	00003e21 	.word	0x00003e21
    4074:	00160002 	.word	0x00160002
    4078:	00170002 	.word	0x00170002
    407c:	20003dfc 	.word	0x20003dfc
    4080:	20003d10 	.word	0x20003d10
    4084:	00003b81 	.word	0x00003b81
    4088:	20003d0c 	.word	0x20003d0c
    408c:	00003b55 	.word	0x00003b55
    4090:	20003d08 	.word	0x20003d08
    4094:	42000c00 	.word	0x42000c00
    4098:	000025e1 	.word	0x000025e1
    409c:	2000004c 	.word	0x2000004c
    40a0:	0000609b 	.word	0x0000609b
    40a4:	00000ef5 	.word	0x00000ef5
    40a8:	00003ae1 	.word	0x00003ae1
    40ac:	00002c35 	.word	0x00002c35
    40b0:	00002c71 	.word	0x00002c71
    40b4:	e000e100 	.word	0xe000e100
    40b8:	00003c09 	.word	0x00003c09
    40bc:	00003c6d 	.word	0x00003c6d
    40c0:	20000032 	.word	0x20000032
    40c4:	000001a9 	.word	0x000001a9
    40c8:	000001b1 	.word	0x000001b1
    40cc:	000001e9 	.word	0x000001e9
    40d0:	00000115 	.word	0x00000115
    40d4:	00000141 	.word	0x00000141
    40d8:	00003b99 	.word	0x00003b99
    40dc:	00001471 	.word	0x00001471
    40e0:	20003cf8 	.word	0x20003cf8
    40e4:	00006a2c 	.word	0x00006a2c
    40e8:	00003ce9 	.word	0x00003ce9
    40ec:	00001959 	.word	0x00001959
    40f0:	00006a34 	.word	0x00006a34
    40f4:	00004195 	.word	0x00004195
    40f8:	00001b45 	.word	0x00001b45

000040fc <media>:
{
    40fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(i=n_init_camp;i<length_buffer;i++)
    40fe:	000b      	movs	r3, r1
    4100:	4c0b      	ldr	r4, [pc, #44]	; (4130 <media+0x34>)
    4102:	6021      	str	r1, [r4, #0]
    4104:	0016      	movs	r6, r2
    4106:	4291      	cmp	r1, r2
    4108:	d20f      	bcs.n	412a <media+0x2e>
    410a:	004c      	lsls	r4, r1, #1
    410c:	1904      	adds	r4, r0, r4
    410e:	2000      	movs	r0, #0
    4110:	4f07      	ldr	r7, [pc, #28]	; (4130 <media+0x34>)
		tmp += buffer[i];
    4112:	8825      	ldrh	r5, [r4, #0]
    4114:	1940      	adds	r0, r0, r5
	for(i=n_init_camp;i<length_buffer;i++)
    4116:	3301      	adds	r3, #1
    4118:	603b      	str	r3, [r7, #0]
    411a:	3402      	adds	r4, #2
    411c:	42b3      	cmp	r3, r6
    411e:	d3f8      	bcc.n	4112 <media+0x16>
	return (uint16_t)(tmp/(length_buffer-n_init_camp));
    4120:	1a51      	subs	r1, r2, r1
    4122:	4b04      	ldr	r3, [pc, #16]	; (4134 <media+0x38>)
    4124:	4798      	blx	r3
    4126:	b280      	uxth	r0, r0
}
    4128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	long tmp = 0;
    412a:	2000      	movs	r0, #0
    412c:	e7f8      	b.n	4120 <media+0x24>
    412e:	46c0      	nop			; (mov r8, r8)
    4130:	20003cec 	.word	0x20003cec
    4134:	0000453d 	.word	0x0000453d

00004138 <adc_complete_callback>:
{
    4138:	b510      	push	{r4, lr}
	integrale = media(adc_result_buffer,1,ADC_SAMPLES);
    413a:	2280      	movs	r2, #128	; 0x80
    413c:	0092      	lsls	r2, r2, #2
    413e:	2101      	movs	r1, #1
    4140:	4802      	ldr	r0, [pc, #8]	; (414c <adc_complete_callback+0x14>)
    4142:	4b03      	ldr	r3, [pc, #12]	; (4150 <adc_complete_callback+0x18>)
    4144:	4798      	blx	r3
    4146:	4b03      	ldr	r3, [pc, #12]	; (4154 <adc_complete_callback+0x1c>)
    4148:	8018      	strh	r0, [r3, #0]
}
    414a:	bd10      	pop	{r4, pc}
    414c:	20004494 	.word	0x20004494
    4150:	000040fd 	.word	0x000040fd
    4154:	20003cf0 	.word	0x20003cf0

00004158 <save_configuration_param>:


void save_configuration_param(void)
{
    4158:	b510      	push	{r4, lr}
		//sprintf(piezoboard_parameters.STX_EEPROM,"%s",STX_EEPROM_STR);
		//sprintf(piezoboard_parameters.ETX_EEPROM,"%s",ETX_EEPROM_STR);
		
		piezoboard_parameters.STX_EEPROM = STX_EEPROM_STR;
    415a:	4a09      	ldr	r2, [pc, #36]	; (4180 <save_configuration_param+0x28>)
    415c:	2340      	movs	r3, #64	; 0x40
    415e:	7013      	strb	r3, [r2, #0]
		piezoboard_parameters.ETX_EEPROM = ETX_EEPROM_STR;
    4160:	3b1d      	subs	r3, #29
    4162:	71d3      	strb	r3, [r2, #7]
		
		piezoboard_parameters.analog_gain_preset = analog_gain_1;
    4164:	4b07      	ldr	r3, [pc, #28]	; (4184 <save_configuration_param+0x2c>)
    4166:	781b      	ldrb	r3, [r3, #0]
    4168:	7053      	strb	r3, [r2, #1]
		piezoboard_parameters.ncamp_preset = n_sample;
    416a:	4b07      	ldr	r3, [pc, #28]	; (4188 <save_configuration_param+0x30>)
    416c:	881b      	ldrh	r3, [r3, #0]
    416e:	8093      	strh	r3, [r2, #4]
		piezoboard_parameters.threshold_preset = threshold_value;
    4170:	4b06      	ldr	r3, [pc, #24]	; (418c <save_configuration_param+0x34>)
    4172:	881b      	ldrh	r3, [r3, #0]
    4174:	8053      	strh	r3, [r2, #2]
		
		////crc8(&piezoboard_parameters.CRC,piezoboard_parameters.analog_gain_preset);
		////crc8(&piezoboard_parameters.CRC,piezoboard_parameters.ncamp_preset);
		////crc8(&piezoboard_parameters.CRC,piezoboard_parameters.threshold_preset);
		
		at24cxx_write_continuous(0,sizeof(piezoboard_parameters),(uint8_t*)&piezoboard_parameters);
    4176:	2108      	movs	r1, #8
    4178:	2000      	movs	r0, #0
    417a:	4b05      	ldr	r3, [pc, #20]	; (4190 <save_configuration_param+0x38>)
    417c:	4798      	blx	r3
}
    417e:	bd10      	pop	{r4, pc}
    4180:	200048c4 	.word	0x200048c4
    4184:	20000031 	.word	0x20000031
    4188:	20000034 	.word	0x20000034
    418c:	20000048 	.word	0x20000048
    4190:	00003a81 	.word	0x00003a81

00004194 <uart_task>:
{
    4194:	b5f0      	push	{r4, r5, r6, r7, lr}
    4196:	46c6      	mov	lr, r8
    4198:	b500      	push	{lr}
    419a:	b084      	sub	sp, #16
	 memset(buffer_temp,0,sizeof(packet));
    419c:	2208      	movs	r2, #8
    419e:	2100      	movs	r1, #0
    41a0:	a801      	add	r0, sp, #4
    41a2:	4b8b      	ldr	r3, [pc, #556]	; (43d0 <uart_task+0x23c>)
    41a4:	4798      	blx	r3
	uint32_t buffer_temp_index = 0;
    41a6:	2400      	movs	r4, #0
		while (xQueueReceive(terminal_in_queue, current_char_ptr, 0)) 
    41a8:	4f8a      	ldr	r7, [pc, #552]	; (43d4 <uart_task+0x240>)
    41aa:	4e8b      	ldr	r6, [pc, #556]	; (43d8 <uart_task+0x244>)
		vTaskDelay(UART_TASK_DELAY);
    41ac:	4b8b      	ldr	r3, [pc, #556]	; (43dc <uart_task+0x248>)
    41ae:	4698      	mov	r8, r3
    41b0:	e022      	b.n	41f8 <uart_task+0x64>
							if(pkt_temp_ptr->sub_cmd == sb_cmd_array[ping])
    41b2:	ab01      	add	r3, sp, #4
    41b4:	789b      	ldrb	r3, [r3, #2]
    41b6:	4a8a      	ldr	r2, [pc, #552]	; (43e0 <uart_task+0x24c>)
    41b8:	7812      	ldrb	r2, [r2, #0]
    41ba:	429a      	cmp	r2, r3
    41bc:	d075      	beq.n	42aa <uart_task+0x116>
							else if(pkt_temp_ptr->sub_cmd == sb_cmd_array[read_sensor])
    41be:	4a88      	ldr	r2, [pc, #544]	; (43e0 <uart_task+0x24c>)
    41c0:	7852      	ldrb	r2, [r2, #1]
    41c2:	429a      	cmp	r2, r3
    41c4:	d07e      	beq.n	42c4 <uart_task+0x130>
							else if(pkt_temp_ptr->sub_cmd == sb_cmd_array[get_ncamp])
    41c6:	4a86      	ldr	r2, [pc, #536]	; (43e0 <uart_task+0x24c>)
    41c8:	7952      	ldrb	r2, [r2, #5]
    41ca:	429a      	cmp	r2, r3
    41cc:	d100      	bne.n	41d0 <uart_task+0x3c>
    41ce:	e08c      	b.n	42ea <uart_task+0x156>
							else if(pkt_temp_ptr->sub_cmd == sb_cmd_array[get_threshold])
    41d0:	4a83      	ldr	r2, [pc, #524]	; (43e0 <uart_task+0x24c>)
    41d2:	7992      	ldrb	r2, [r2, #6]
    41d4:	429a      	cmp	r2, r3
    41d6:	d100      	bne.n	41da <uart_task+0x46>
    41d8:	e095      	b.n	4306 <uart_task+0x172>
							else if(pkt_temp_ptr->sub_cmd == sb_cmd_array[get_analog_gain_1])
    41da:	4a81      	ldr	r2, [pc, #516]	; (43e0 <uart_task+0x24c>)
    41dc:	79d2      	ldrb	r2, [r2, #7]
    41de:	429a      	cmp	r2, r3
    41e0:	d100      	bne.n	41e4 <uart_task+0x50>
    41e2:	e09e      	b.n	4322 <uart_task+0x18e>
					memset(buffer_temp,0,sizeof(packet));
    41e4:	2208      	movs	r2, #8
    41e6:	2100      	movs	r1, #0
    41e8:	a801      	add	r0, sp, #4
    41ea:	4b79      	ldr	r3, [pc, #484]	; (43d0 <uart_task+0x23c>)
    41ec:	4798      	blx	r3
					buffer_temp_index = 0;
    41ee:	2400      	movs	r4, #0
			*current_char_ptr = '\0';
    41f0:	2200      	movs	r2, #0
    41f2:	230f      	movs	r3, #15
    41f4:	446b      	add	r3, sp
    41f6:	701a      	strb	r2, [r3, #0]
		while (xQueueReceive(terminal_in_queue, current_char_ptr, 0)) 
    41f8:	2300      	movs	r3, #0
    41fa:	2200      	movs	r2, #0
    41fc:	210f      	movs	r1, #15
    41fe:	4469      	add	r1, sp
    4200:	6838      	ldr	r0, [r7, #0]
    4202:	47b0      	blx	r6
    4204:	2800      	cmp	r0, #0
    4206:	d100      	bne.n	420a <uart_task+0x76>
    4208:	e0df      	b.n	43ca <uart_task+0x236>
			r = *current_char_ptr;
    420a:	230f      	movs	r3, #15
    420c:	446b      	add	r3, sp
    420e:	781b      	ldrb	r3, [r3, #0]
			switch(r)
    4210:	2b40      	cmp	r3, #64	; 0x40
    4212:	d000      	beq.n	4216 <uart_task+0x82>
    4214:	e0d2      	b.n	43bc <uart_task+0x228>
					buffer_temp[buffer_temp_index] = r;
    4216:	ad01      	add	r5, sp, #4
    4218:	552b      	strb	r3, [r5, r4]
					pkt = *pkt_temp_ptr;
    421a:	2208      	movs	r2, #8
    421c:	0029      	movs	r1, r5
    421e:	4871      	ldr	r0, [pc, #452]	; (43e4 <uart_task+0x250>)
    4220:	4b71      	ldr	r3, [pc, #452]	; (43e8 <uart_task+0x254>)
    4222:	4798      	blx	r3
					if ((pkt_temp_ptr->STX == STX_STRING) & (pkt_temp_ptr->ETX == ETX_STRING))
    4224:	782b      	ldrb	r3, [r5, #0]
    4226:	2b23      	cmp	r3, #35	; 0x23
    4228:	d1dc      	bne.n	41e4 <uart_task+0x50>
    422a:	ab01      	add	r3, sp, #4
    422c:	79db      	ldrb	r3, [r3, #7]
    422e:	2b40      	cmp	r3, #64	; 0x40
    4230:	d1d8      	bne.n	41e4 <uart_task+0x50>
						switch (pkt_temp_ptr->cmd)
    4232:	ab01      	add	r3, sp, #4
    4234:	785b      	ldrb	r3, [r3, #1]
    4236:	2b52      	cmp	r3, #82	; 0x52
    4238:	d0bb      	beq.n	41b2 <uart_task+0x1e>
    423a:	2b57      	cmp	r3, #87	; 0x57
    423c:	d1d2      	bne.n	41e4 <uart_task+0x50>
							if(pkt_temp_ptr->sub_cmd == sb_cmd_array[set_ncamp])
    423e:	ab01      	add	r3, sp, #4
    4240:	789b      	ldrb	r3, [r3, #2]
    4242:	4a67      	ldr	r2, [pc, #412]	; (43e0 <uart_task+0x24c>)
    4244:	7892      	ldrb	r2, [r2, #2]
    4246:	429a      	cmp	r2, r3
    4248:	d077      	beq.n	433a <uart_task+0x1a6>
							else if(pkt_temp_ptr->sub_cmd == sb_cmd_array[set_threshold])
    424a:	4a65      	ldr	r2, [pc, #404]	; (43e0 <uart_task+0x24c>)
    424c:	78d2      	ldrb	r2, [r2, #3]
    424e:	429a      	cmp	r2, r3
    4250:	d100      	bne.n	4254 <uart_task+0xc0>
    4252:	e084      	b.n	435e <uart_task+0x1ca>
							else if(pkt_temp_ptr->sub_cmd == sb_cmd_array[set_analog_gain_1])
    4254:	4a62      	ldr	r2, [pc, #392]	; (43e0 <uart_task+0x24c>)
    4256:	7912      	ldrb	r2, [r2, #4]
    4258:	429a      	cmp	r2, r3
    425a:	d100      	bne.n	425e <uart_task+0xca>
    425c:	e08f      	b.n	437e <uart_task+0x1ea>
							else if (pkt_temp_ptr->sub_cmd == sb_cmd_array[save_param])
    425e:	4a60      	ldr	r2, [pc, #384]	; (43e0 <uart_task+0x24c>)
    4260:	7a12      	ldrb	r2, [r2, #8]
    4262:	429a      	cmp	r2, r3
    4264:	d100      	bne.n	4268 <uart_task+0xd4>
    4266:	e09e      	b.n	43a6 <uart_task+0x212>
							else if(pkt_temp_ptr->sub_cmd == sb_cmd_array[set_analog_gain_2])
    4268:	4a5d      	ldr	r2, [pc, #372]	; (43e0 <uart_task+0x24c>)
    426a:	7ad2      	ldrb	r2, [r2, #11]
    426c:	429a      	cmp	r2, r3
    426e:	d1b9      	bne.n	41e4 <uart_task+0x50>
								uint8_t temp = pkt_temp_ptr->payload[0];
    4270:	ab01      	add	r3, sp, #4
    4272:	78d8      	ldrb	r0, [r3, #3]
								if(analog_gain_2 != temp)
    4274:	4b5d      	ldr	r3, [pc, #372]	; (43ec <uart_task+0x258>)
    4276:	781b      	ldrb	r3, [r3, #0]
    4278:	4283      	cmp	r3, r0
    427a:	d00d      	beq.n	4298 <uart_task+0x104>
									analog_gain_2 = temp;
    427c:	4d5b      	ldr	r5, [pc, #364]	; (43ec <uart_task+0x258>)
    427e:	7028      	strb	r0, [r5, #0]
									MAX5435M_write_byte(MAX5435_REGISTER_VREG,trimmer_value(analog_gain_2) );
    4280:	4c5b      	ldr	r4, [pc, #364]	; (43f0 <uart_task+0x25c>)
    4282:	47a0      	blx	r4
    4284:	0001      	movs	r1, r0
    4286:	2011      	movs	r0, #17
    4288:	4b5a      	ldr	r3, [pc, #360]	; (43f4 <uart_task+0x260>)
    428a:	4798      	blx	r3
									MAX5435L_write_byte(MAX5435_REGISTER_VREG,trimmer_value(analog_gain_2) );
    428c:	7828      	ldrb	r0, [r5, #0]
    428e:	47a0      	blx	r4
    4290:	0001      	movs	r1, r0
    4292:	2011      	movs	r0, #17
    4294:	4b58      	ldr	r3, [pc, #352]	; (43f8 <uart_task+0x264>)
    4296:	4798      	blx	r3
								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    4298:	2208      	movs	r2, #8
    429a:	4952      	ldr	r1, [pc, #328]	; (43e4 <uart_task+0x250>)
    429c:	4857      	ldr	r0, [pc, #348]	; (43fc <uart_task+0x268>)
    429e:	4b58      	ldr	r3, [pc, #352]	; (4400 <uart_task+0x26c>)
    42a0:	4798      	blx	r3
								delay_ms(25);
    42a2:	2019      	movs	r0, #25
    42a4:	4b57      	ldr	r3, [pc, #348]	; (4404 <uart_task+0x270>)
    42a6:	4798      	blx	r3
    42a8:	e79c      	b.n	41e4 <uart_task+0x50>
									pkt.payload[0]=0xAA;
    42aa:	494e      	ldr	r1, [pc, #312]	; (43e4 <uart_task+0x250>)
    42ac:	23aa      	movs	r3, #170	; 0xaa
    42ae:	70cb      	strb	r3, [r1, #3]
									pkt.payload[1]=0xBB;
    42b0:	3311      	adds	r3, #17
    42b2:	710b      	strb	r3, [r1, #4]
									usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    42b4:	2208      	movs	r2, #8
    42b6:	4851      	ldr	r0, [pc, #324]	; (43fc <uart_task+0x268>)
    42b8:	4b51      	ldr	r3, [pc, #324]	; (4400 <uart_task+0x26c>)
    42ba:	4798      	blx	r3
									delay_ms(25);
    42bc:	2019      	movs	r0, #25
    42be:	4b51      	ldr	r3, [pc, #324]	; (4404 <uart_task+0x270>)
    42c0:	4798      	blx	r3
    42c2:	e78f      	b.n	41e4 <uart_task+0x50>
									pkt.payload[0]=(uint8_t)integrale;
    42c4:	4b50      	ldr	r3, [pc, #320]	; (4408 <uart_task+0x274>)
    42c6:	881b      	ldrh	r3, [r3, #0]
    42c8:	4946      	ldr	r1, [pc, #280]	; (43e4 <uart_task+0x250>)
    42ca:	70cb      	strb	r3, [r1, #3]
									pkt.payload[1]=(uint8_t)(integrale>>8);									
    42cc:	0a1b      	lsrs	r3, r3, #8
    42ce:	710b      	strb	r3, [r1, #4]
									pkt.payload[2]=0x00;
    42d0:	2300      	movs	r3, #0
    42d2:	714b      	strb	r3, [r1, #5]
									pkt.payload[3]=(uint8_t)(alarm_detected);
    42d4:	4b4d      	ldr	r3, [pc, #308]	; (440c <uart_task+0x278>)
    42d6:	781b      	ldrb	r3, [r3, #0]
    42d8:	718b      	strb	r3, [r1, #6]
									usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    42da:	2208      	movs	r2, #8
    42dc:	4847      	ldr	r0, [pc, #284]	; (43fc <uart_task+0x268>)
    42de:	4b48      	ldr	r3, [pc, #288]	; (4400 <uart_task+0x26c>)
    42e0:	4798      	blx	r3
									delay_ms(25);
    42e2:	2019      	movs	r0, #25
    42e4:	4b47      	ldr	r3, [pc, #284]	; (4404 <uart_task+0x270>)
    42e6:	4798      	blx	r3
    42e8:	e77c      	b.n	41e4 <uart_task+0x50>
								pkt.payload[0]=(uint8_t)n_sample;
    42ea:	4b49      	ldr	r3, [pc, #292]	; (4410 <uart_task+0x27c>)
    42ec:	881b      	ldrh	r3, [r3, #0]
    42ee:	493d      	ldr	r1, [pc, #244]	; (43e4 <uart_task+0x250>)
    42f0:	70cb      	strb	r3, [r1, #3]
								pkt.payload[1]=(uint8_t)(n_sample>>8);
    42f2:	0a1b      	lsrs	r3, r3, #8
    42f4:	710b      	strb	r3, [r1, #4]
								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    42f6:	2208      	movs	r2, #8
    42f8:	4840      	ldr	r0, [pc, #256]	; (43fc <uart_task+0x268>)
    42fa:	4b41      	ldr	r3, [pc, #260]	; (4400 <uart_task+0x26c>)
    42fc:	4798      	blx	r3
								delay_ms(25);
    42fe:	2019      	movs	r0, #25
    4300:	4b40      	ldr	r3, [pc, #256]	; (4404 <uart_task+0x270>)
    4302:	4798      	blx	r3
    4304:	e76e      	b.n	41e4 <uart_task+0x50>
								pkt.payload[0]=(uint8_t)threshold_value;
    4306:	4b43      	ldr	r3, [pc, #268]	; (4414 <uart_task+0x280>)
    4308:	881b      	ldrh	r3, [r3, #0]
    430a:	4936      	ldr	r1, [pc, #216]	; (43e4 <uart_task+0x250>)
    430c:	70cb      	strb	r3, [r1, #3]
								pkt.payload[1]=(uint8_t)(threshold_value>>8);
    430e:	0a1b      	lsrs	r3, r3, #8
    4310:	710b      	strb	r3, [r1, #4]
								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    4312:	2208      	movs	r2, #8
    4314:	4839      	ldr	r0, [pc, #228]	; (43fc <uart_task+0x268>)
    4316:	4b3a      	ldr	r3, [pc, #232]	; (4400 <uart_task+0x26c>)
    4318:	4798      	blx	r3
								delay_ms(25);
    431a:	2019      	movs	r0, #25
    431c:	4b39      	ldr	r3, [pc, #228]	; (4404 <uart_task+0x270>)
    431e:	4798      	blx	r3
    4320:	e760      	b.n	41e4 <uart_task+0x50>
								pkt.payload[0]=(uint8_t)analog_gain_1;
    4322:	4930      	ldr	r1, [pc, #192]	; (43e4 <uart_task+0x250>)
    4324:	4b3c      	ldr	r3, [pc, #240]	; (4418 <uart_task+0x284>)
    4326:	781b      	ldrb	r3, [r3, #0]
    4328:	70cb      	strb	r3, [r1, #3]
								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    432a:	2208      	movs	r2, #8
    432c:	4833      	ldr	r0, [pc, #204]	; (43fc <uart_task+0x268>)
    432e:	4b34      	ldr	r3, [pc, #208]	; (4400 <uart_task+0x26c>)
    4330:	4798      	blx	r3
								delay_ms(25);
    4332:	2019      	movs	r0, #25
    4334:	4b33      	ldr	r3, [pc, #204]	; (4404 <uart_task+0x270>)
    4336:	4798      	blx	r3
    4338:	e754      	b.n	41e4 <uart_task+0x50>
								value_rx = (uint16_t)(pkt_temp_ptr->payload[1] << 8 | (pkt_temp_ptr->payload[0]));
    433a:	a901      	add	r1, sp, #4
    433c:	790a      	ldrb	r2, [r1, #4]
    433e:	0212      	lsls	r2, r2, #8
    4340:	78cb      	ldrb	r3, [r1, #3]
    4342:	4313      	orrs	r3, r2
    4344:	4a35      	ldr	r2, [pc, #212]	; (441c <uart_task+0x288>)
    4346:	8013      	strh	r3, [r2, #0]
								n_sample = value_rx;
    4348:	4a31      	ldr	r2, [pc, #196]	; (4410 <uart_task+0x27c>)
    434a:	8013      	strh	r3, [r2, #0]
								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    434c:	2208      	movs	r2, #8
    434e:	4925      	ldr	r1, [pc, #148]	; (43e4 <uart_task+0x250>)
    4350:	482a      	ldr	r0, [pc, #168]	; (43fc <uart_task+0x268>)
    4352:	4b2b      	ldr	r3, [pc, #172]	; (4400 <uart_task+0x26c>)
    4354:	4798      	blx	r3
								delay_ms(25);
    4356:	2019      	movs	r0, #25
    4358:	4b2a      	ldr	r3, [pc, #168]	; (4404 <uart_task+0x270>)
    435a:	4798      	blx	r3
    435c:	e742      	b.n	41e4 <uart_task+0x50>
								threshold_value = pkt_temp_ptr->payload[1] << 8 | (pkt_temp_ptr->payload[0]);
    435e:	a901      	add	r1, sp, #4
    4360:	790a      	ldrb	r2, [r1, #4]
    4362:	0212      	lsls	r2, r2, #8
    4364:	78cb      	ldrb	r3, [r1, #3]
    4366:	4313      	orrs	r3, r2
    4368:	4a2a      	ldr	r2, [pc, #168]	; (4414 <uart_task+0x280>)
    436a:	8013      	strh	r3, [r2, #0]
								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    436c:	2208      	movs	r2, #8
    436e:	491d      	ldr	r1, [pc, #116]	; (43e4 <uart_task+0x250>)
    4370:	4822      	ldr	r0, [pc, #136]	; (43fc <uart_task+0x268>)
    4372:	4b23      	ldr	r3, [pc, #140]	; (4400 <uart_task+0x26c>)
    4374:	4798      	blx	r3
								delay_ms(25);
    4376:	2019      	movs	r0, #25
    4378:	4b22      	ldr	r3, [pc, #136]	; (4404 <uart_task+0x270>)
    437a:	4798      	blx	r3
    437c:	e732      	b.n	41e4 <uart_task+0x50>
								uint8_t temp = pkt_temp_ptr->payload[0];
    437e:	ab01      	add	r3, sp, #4
    4380:	78db      	ldrb	r3, [r3, #3]
								if(analog_gain_1 != temp)
    4382:	4a25      	ldr	r2, [pc, #148]	; (4418 <uart_task+0x284>)
    4384:	7812      	ldrb	r2, [r2, #0]
    4386:	429a      	cmp	r2, r3
    4388:	d004      	beq.n	4394 <uart_task+0x200>
									analog_gain_1 = temp;
    438a:	4a23      	ldr	r2, [pc, #140]	; (4418 <uart_task+0x284>)
    438c:	7013      	strb	r3, [r2, #0]
									change_gain = true;
    438e:	2201      	movs	r2, #1
    4390:	4b23      	ldr	r3, [pc, #140]	; (4420 <uart_task+0x28c>)
    4392:	701a      	strb	r2, [r3, #0]
								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    4394:	2208      	movs	r2, #8
    4396:	4913      	ldr	r1, [pc, #76]	; (43e4 <uart_task+0x250>)
    4398:	4818      	ldr	r0, [pc, #96]	; (43fc <uart_task+0x268>)
    439a:	4b19      	ldr	r3, [pc, #100]	; (4400 <uart_task+0x26c>)
    439c:	4798      	blx	r3
								delay_ms(25);
    439e:	2019      	movs	r0, #25
    43a0:	4b18      	ldr	r3, [pc, #96]	; (4404 <uart_task+0x270>)
    43a2:	4798      	blx	r3
    43a4:	e71e      	b.n	41e4 <uart_task+0x50>
								save_configuration_param();
    43a6:	4b1f      	ldr	r3, [pc, #124]	; (4424 <uart_task+0x290>)
    43a8:	4798      	blx	r3
								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    43aa:	2208      	movs	r2, #8
    43ac:	490d      	ldr	r1, [pc, #52]	; (43e4 <uart_task+0x250>)
    43ae:	4813      	ldr	r0, [pc, #76]	; (43fc <uart_task+0x268>)
    43b0:	4b13      	ldr	r3, [pc, #76]	; (4400 <uart_task+0x26c>)
    43b2:	4798      	blx	r3
								delay_ms(25);
    43b4:	2019      	movs	r0, #25
    43b6:	4b13      	ldr	r3, [pc, #76]	; (4404 <uart_task+0x270>)
    43b8:	4798      	blx	r3
    43ba:	e713      	b.n	41e4 <uart_task+0x50>
					if(buffer_temp_index < sizeof(buffer_temp))
    43bc:	2c07      	cmp	r4, #7
    43be:	d900      	bls.n	43c2 <uart_task+0x22e>
    43c0:	e716      	b.n	41f0 <uart_task+0x5c>
						buffer_temp[buffer_temp_index] = r;
    43c2:	aa01      	add	r2, sp, #4
    43c4:	5513      	strb	r3, [r2, r4]
						buffer_temp_index++;
    43c6:	3401      	adds	r4, #1
    43c8:	e712      	b.n	41f0 <uart_task+0x5c>
		vTaskDelay(UART_TASK_DELAY);
    43ca:	300a      	adds	r0, #10
    43cc:	47c0      	blx	r8
		while (xQueueReceive(terminal_in_queue, current_char_ptr, 0)) 
    43ce:	e713      	b.n	41f8 <uart_task+0x64>
    43d0:	0000608b 	.word	0x0000608b
    43d4:	20003cf8 	.word	0x20003cf8
    43d8:	000016fd 	.word	0x000016fd
    43dc:	00001df9 	.word	0x00001df9
    43e0:	2000003c 	.word	0x2000003c
    43e4:	20003e30 	.word	0x20003e30
    43e8:	00006079 	.word	0x00006079
    43ec:	20000032 	.word	0x20000032
    43f0:	000001a9 	.word	0x000001a9
    43f4:	000001b1 	.word	0x000001b1
    43f8:	000001e9 	.word	0x000001e9
    43fc:	20003dfc 	.word	0x20003dfc
    4400:	000029dd 	.word	0x000029dd
    4404:	00002d41 	.word	0x00002d41
    4408:	20003cf0 	.word	0x20003cf0
    440c:	20003ce4 	.word	0x20003ce4
    4410:	20000034 	.word	0x20000034
    4414:	20000048 	.word	0x20000048
    4418:	20000031 	.word	0x20000031
    441c:	20003cfc 	.word	0x20003cfc
    4420:	20003ce5 	.word	0x20003ce5
    4424:	00004159 	.word	0x00004159

00004428 <__udivsi3>:
    4428:	2200      	movs	r2, #0
    442a:	0843      	lsrs	r3, r0, #1
    442c:	428b      	cmp	r3, r1
    442e:	d374      	bcc.n	451a <__udivsi3+0xf2>
    4430:	0903      	lsrs	r3, r0, #4
    4432:	428b      	cmp	r3, r1
    4434:	d35f      	bcc.n	44f6 <__udivsi3+0xce>
    4436:	0a03      	lsrs	r3, r0, #8
    4438:	428b      	cmp	r3, r1
    443a:	d344      	bcc.n	44c6 <__udivsi3+0x9e>
    443c:	0b03      	lsrs	r3, r0, #12
    443e:	428b      	cmp	r3, r1
    4440:	d328      	bcc.n	4494 <__udivsi3+0x6c>
    4442:	0c03      	lsrs	r3, r0, #16
    4444:	428b      	cmp	r3, r1
    4446:	d30d      	bcc.n	4464 <__udivsi3+0x3c>
    4448:	22ff      	movs	r2, #255	; 0xff
    444a:	0209      	lsls	r1, r1, #8
    444c:	ba12      	rev	r2, r2
    444e:	0c03      	lsrs	r3, r0, #16
    4450:	428b      	cmp	r3, r1
    4452:	d302      	bcc.n	445a <__udivsi3+0x32>
    4454:	1212      	asrs	r2, r2, #8
    4456:	0209      	lsls	r1, r1, #8
    4458:	d065      	beq.n	4526 <__udivsi3+0xfe>
    445a:	0b03      	lsrs	r3, r0, #12
    445c:	428b      	cmp	r3, r1
    445e:	d319      	bcc.n	4494 <__udivsi3+0x6c>
    4460:	e000      	b.n	4464 <__udivsi3+0x3c>
    4462:	0a09      	lsrs	r1, r1, #8
    4464:	0bc3      	lsrs	r3, r0, #15
    4466:	428b      	cmp	r3, r1
    4468:	d301      	bcc.n	446e <__udivsi3+0x46>
    446a:	03cb      	lsls	r3, r1, #15
    446c:	1ac0      	subs	r0, r0, r3
    446e:	4152      	adcs	r2, r2
    4470:	0b83      	lsrs	r3, r0, #14
    4472:	428b      	cmp	r3, r1
    4474:	d301      	bcc.n	447a <__udivsi3+0x52>
    4476:	038b      	lsls	r3, r1, #14
    4478:	1ac0      	subs	r0, r0, r3
    447a:	4152      	adcs	r2, r2
    447c:	0b43      	lsrs	r3, r0, #13
    447e:	428b      	cmp	r3, r1
    4480:	d301      	bcc.n	4486 <__udivsi3+0x5e>
    4482:	034b      	lsls	r3, r1, #13
    4484:	1ac0      	subs	r0, r0, r3
    4486:	4152      	adcs	r2, r2
    4488:	0b03      	lsrs	r3, r0, #12
    448a:	428b      	cmp	r3, r1
    448c:	d301      	bcc.n	4492 <__udivsi3+0x6a>
    448e:	030b      	lsls	r3, r1, #12
    4490:	1ac0      	subs	r0, r0, r3
    4492:	4152      	adcs	r2, r2
    4494:	0ac3      	lsrs	r3, r0, #11
    4496:	428b      	cmp	r3, r1
    4498:	d301      	bcc.n	449e <__udivsi3+0x76>
    449a:	02cb      	lsls	r3, r1, #11
    449c:	1ac0      	subs	r0, r0, r3
    449e:	4152      	adcs	r2, r2
    44a0:	0a83      	lsrs	r3, r0, #10
    44a2:	428b      	cmp	r3, r1
    44a4:	d301      	bcc.n	44aa <__udivsi3+0x82>
    44a6:	028b      	lsls	r3, r1, #10
    44a8:	1ac0      	subs	r0, r0, r3
    44aa:	4152      	adcs	r2, r2
    44ac:	0a43      	lsrs	r3, r0, #9
    44ae:	428b      	cmp	r3, r1
    44b0:	d301      	bcc.n	44b6 <__udivsi3+0x8e>
    44b2:	024b      	lsls	r3, r1, #9
    44b4:	1ac0      	subs	r0, r0, r3
    44b6:	4152      	adcs	r2, r2
    44b8:	0a03      	lsrs	r3, r0, #8
    44ba:	428b      	cmp	r3, r1
    44bc:	d301      	bcc.n	44c2 <__udivsi3+0x9a>
    44be:	020b      	lsls	r3, r1, #8
    44c0:	1ac0      	subs	r0, r0, r3
    44c2:	4152      	adcs	r2, r2
    44c4:	d2cd      	bcs.n	4462 <__udivsi3+0x3a>
    44c6:	09c3      	lsrs	r3, r0, #7
    44c8:	428b      	cmp	r3, r1
    44ca:	d301      	bcc.n	44d0 <__udivsi3+0xa8>
    44cc:	01cb      	lsls	r3, r1, #7
    44ce:	1ac0      	subs	r0, r0, r3
    44d0:	4152      	adcs	r2, r2
    44d2:	0983      	lsrs	r3, r0, #6
    44d4:	428b      	cmp	r3, r1
    44d6:	d301      	bcc.n	44dc <__udivsi3+0xb4>
    44d8:	018b      	lsls	r3, r1, #6
    44da:	1ac0      	subs	r0, r0, r3
    44dc:	4152      	adcs	r2, r2
    44de:	0943      	lsrs	r3, r0, #5
    44e0:	428b      	cmp	r3, r1
    44e2:	d301      	bcc.n	44e8 <__udivsi3+0xc0>
    44e4:	014b      	lsls	r3, r1, #5
    44e6:	1ac0      	subs	r0, r0, r3
    44e8:	4152      	adcs	r2, r2
    44ea:	0903      	lsrs	r3, r0, #4
    44ec:	428b      	cmp	r3, r1
    44ee:	d301      	bcc.n	44f4 <__udivsi3+0xcc>
    44f0:	010b      	lsls	r3, r1, #4
    44f2:	1ac0      	subs	r0, r0, r3
    44f4:	4152      	adcs	r2, r2
    44f6:	08c3      	lsrs	r3, r0, #3
    44f8:	428b      	cmp	r3, r1
    44fa:	d301      	bcc.n	4500 <__udivsi3+0xd8>
    44fc:	00cb      	lsls	r3, r1, #3
    44fe:	1ac0      	subs	r0, r0, r3
    4500:	4152      	adcs	r2, r2
    4502:	0883      	lsrs	r3, r0, #2
    4504:	428b      	cmp	r3, r1
    4506:	d301      	bcc.n	450c <__udivsi3+0xe4>
    4508:	008b      	lsls	r3, r1, #2
    450a:	1ac0      	subs	r0, r0, r3
    450c:	4152      	adcs	r2, r2
    450e:	0843      	lsrs	r3, r0, #1
    4510:	428b      	cmp	r3, r1
    4512:	d301      	bcc.n	4518 <__udivsi3+0xf0>
    4514:	004b      	lsls	r3, r1, #1
    4516:	1ac0      	subs	r0, r0, r3
    4518:	4152      	adcs	r2, r2
    451a:	1a41      	subs	r1, r0, r1
    451c:	d200      	bcs.n	4520 <__udivsi3+0xf8>
    451e:	4601      	mov	r1, r0
    4520:	4152      	adcs	r2, r2
    4522:	4610      	mov	r0, r2
    4524:	4770      	bx	lr
    4526:	e7ff      	b.n	4528 <__udivsi3+0x100>
    4528:	b501      	push	{r0, lr}
    452a:	2000      	movs	r0, #0
    452c:	f000 f8f0 	bl	4710 <__aeabi_idiv0>
    4530:	bd02      	pop	{r1, pc}
    4532:	46c0      	nop			; (mov r8, r8)

00004534 <__aeabi_uidivmod>:
    4534:	2900      	cmp	r1, #0
    4536:	d0f7      	beq.n	4528 <__udivsi3+0x100>
    4538:	e776      	b.n	4428 <__udivsi3>
    453a:	4770      	bx	lr

0000453c <__divsi3>:
    453c:	4603      	mov	r3, r0
    453e:	430b      	orrs	r3, r1
    4540:	d47f      	bmi.n	4642 <__divsi3+0x106>
    4542:	2200      	movs	r2, #0
    4544:	0843      	lsrs	r3, r0, #1
    4546:	428b      	cmp	r3, r1
    4548:	d374      	bcc.n	4634 <__divsi3+0xf8>
    454a:	0903      	lsrs	r3, r0, #4
    454c:	428b      	cmp	r3, r1
    454e:	d35f      	bcc.n	4610 <__divsi3+0xd4>
    4550:	0a03      	lsrs	r3, r0, #8
    4552:	428b      	cmp	r3, r1
    4554:	d344      	bcc.n	45e0 <__divsi3+0xa4>
    4556:	0b03      	lsrs	r3, r0, #12
    4558:	428b      	cmp	r3, r1
    455a:	d328      	bcc.n	45ae <__divsi3+0x72>
    455c:	0c03      	lsrs	r3, r0, #16
    455e:	428b      	cmp	r3, r1
    4560:	d30d      	bcc.n	457e <__divsi3+0x42>
    4562:	22ff      	movs	r2, #255	; 0xff
    4564:	0209      	lsls	r1, r1, #8
    4566:	ba12      	rev	r2, r2
    4568:	0c03      	lsrs	r3, r0, #16
    456a:	428b      	cmp	r3, r1
    456c:	d302      	bcc.n	4574 <__divsi3+0x38>
    456e:	1212      	asrs	r2, r2, #8
    4570:	0209      	lsls	r1, r1, #8
    4572:	d065      	beq.n	4640 <__divsi3+0x104>
    4574:	0b03      	lsrs	r3, r0, #12
    4576:	428b      	cmp	r3, r1
    4578:	d319      	bcc.n	45ae <__divsi3+0x72>
    457a:	e000      	b.n	457e <__divsi3+0x42>
    457c:	0a09      	lsrs	r1, r1, #8
    457e:	0bc3      	lsrs	r3, r0, #15
    4580:	428b      	cmp	r3, r1
    4582:	d301      	bcc.n	4588 <__divsi3+0x4c>
    4584:	03cb      	lsls	r3, r1, #15
    4586:	1ac0      	subs	r0, r0, r3
    4588:	4152      	adcs	r2, r2
    458a:	0b83      	lsrs	r3, r0, #14
    458c:	428b      	cmp	r3, r1
    458e:	d301      	bcc.n	4594 <__divsi3+0x58>
    4590:	038b      	lsls	r3, r1, #14
    4592:	1ac0      	subs	r0, r0, r3
    4594:	4152      	adcs	r2, r2
    4596:	0b43      	lsrs	r3, r0, #13
    4598:	428b      	cmp	r3, r1
    459a:	d301      	bcc.n	45a0 <__divsi3+0x64>
    459c:	034b      	lsls	r3, r1, #13
    459e:	1ac0      	subs	r0, r0, r3
    45a0:	4152      	adcs	r2, r2
    45a2:	0b03      	lsrs	r3, r0, #12
    45a4:	428b      	cmp	r3, r1
    45a6:	d301      	bcc.n	45ac <__divsi3+0x70>
    45a8:	030b      	lsls	r3, r1, #12
    45aa:	1ac0      	subs	r0, r0, r3
    45ac:	4152      	adcs	r2, r2
    45ae:	0ac3      	lsrs	r3, r0, #11
    45b0:	428b      	cmp	r3, r1
    45b2:	d301      	bcc.n	45b8 <__divsi3+0x7c>
    45b4:	02cb      	lsls	r3, r1, #11
    45b6:	1ac0      	subs	r0, r0, r3
    45b8:	4152      	adcs	r2, r2
    45ba:	0a83      	lsrs	r3, r0, #10
    45bc:	428b      	cmp	r3, r1
    45be:	d301      	bcc.n	45c4 <__divsi3+0x88>
    45c0:	028b      	lsls	r3, r1, #10
    45c2:	1ac0      	subs	r0, r0, r3
    45c4:	4152      	adcs	r2, r2
    45c6:	0a43      	lsrs	r3, r0, #9
    45c8:	428b      	cmp	r3, r1
    45ca:	d301      	bcc.n	45d0 <__divsi3+0x94>
    45cc:	024b      	lsls	r3, r1, #9
    45ce:	1ac0      	subs	r0, r0, r3
    45d0:	4152      	adcs	r2, r2
    45d2:	0a03      	lsrs	r3, r0, #8
    45d4:	428b      	cmp	r3, r1
    45d6:	d301      	bcc.n	45dc <__divsi3+0xa0>
    45d8:	020b      	lsls	r3, r1, #8
    45da:	1ac0      	subs	r0, r0, r3
    45dc:	4152      	adcs	r2, r2
    45de:	d2cd      	bcs.n	457c <__divsi3+0x40>
    45e0:	09c3      	lsrs	r3, r0, #7
    45e2:	428b      	cmp	r3, r1
    45e4:	d301      	bcc.n	45ea <__divsi3+0xae>
    45e6:	01cb      	lsls	r3, r1, #7
    45e8:	1ac0      	subs	r0, r0, r3
    45ea:	4152      	adcs	r2, r2
    45ec:	0983      	lsrs	r3, r0, #6
    45ee:	428b      	cmp	r3, r1
    45f0:	d301      	bcc.n	45f6 <__divsi3+0xba>
    45f2:	018b      	lsls	r3, r1, #6
    45f4:	1ac0      	subs	r0, r0, r3
    45f6:	4152      	adcs	r2, r2
    45f8:	0943      	lsrs	r3, r0, #5
    45fa:	428b      	cmp	r3, r1
    45fc:	d301      	bcc.n	4602 <__divsi3+0xc6>
    45fe:	014b      	lsls	r3, r1, #5
    4600:	1ac0      	subs	r0, r0, r3
    4602:	4152      	adcs	r2, r2
    4604:	0903      	lsrs	r3, r0, #4
    4606:	428b      	cmp	r3, r1
    4608:	d301      	bcc.n	460e <__divsi3+0xd2>
    460a:	010b      	lsls	r3, r1, #4
    460c:	1ac0      	subs	r0, r0, r3
    460e:	4152      	adcs	r2, r2
    4610:	08c3      	lsrs	r3, r0, #3
    4612:	428b      	cmp	r3, r1
    4614:	d301      	bcc.n	461a <__divsi3+0xde>
    4616:	00cb      	lsls	r3, r1, #3
    4618:	1ac0      	subs	r0, r0, r3
    461a:	4152      	adcs	r2, r2
    461c:	0883      	lsrs	r3, r0, #2
    461e:	428b      	cmp	r3, r1
    4620:	d301      	bcc.n	4626 <__divsi3+0xea>
    4622:	008b      	lsls	r3, r1, #2
    4624:	1ac0      	subs	r0, r0, r3
    4626:	4152      	adcs	r2, r2
    4628:	0843      	lsrs	r3, r0, #1
    462a:	428b      	cmp	r3, r1
    462c:	d301      	bcc.n	4632 <__divsi3+0xf6>
    462e:	004b      	lsls	r3, r1, #1
    4630:	1ac0      	subs	r0, r0, r3
    4632:	4152      	adcs	r2, r2
    4634:	1a41      	subs	r1, r0, r1
    4636:	d200      	bcs.n	463a <__divsi3+0xfe>
    4638:	4601      	mov	r1, r0
    463a:	4152      	adcs	r2, r2
    463c:	4610      	mov	r0, r2
    463e:	4770      	bx	lr
    4640:	e05d      	b.n	46fe <__divsi3+0x1c2>
    4642:	0fca      	lsrs	r2, r1, #31
    4644:	d000      	beq.n	4648 <__divsi3+0x10c>
    4646:	4249      	negs	r1, r1
    4648:	1003      	asrs	r3, r0, #32
    464a:	d300      	bcc.n	464e <__divsi3+0x112>
    464c:	4240      	negs	r0, r0
    464e:	4053      	eors	r3, r2
    4650:	2200      	movs	r2, #0
    4652:	469c      	mov	ip, r3
    4654:	0903      	lsrs	r3, r0, #4
    4656:	428b      	cmp	r3, r1
    4658:	d32d      	bcc.n	46b6 <__divsi3+0x17a>
    465a:	0a03      	lsrs	r3, r0, #8
    465c:	428b      	cmp	r3, r1
    465e:	d312      	bcc.n	4686 <__divsi3+0x14a>
    4660:	22fc      	movs	r2, #252	; 0xfc
    4662:	0189      	lsls	r1, r1, #6
    4664:	ba12      	rev	r2, r2
    4666:	0a03      	lsrs	r3, r0, #8
    4668:	428b      	cmp	r3, r1
    466a:	d30c      	bcc.n	4686 <__divsi3+0x14a>
    466c:	0189      	lsls	r1, r1, #6
    466e:	1192      	asrs	r2, r2, #6
    4670:	428b      	cmp	r3, r1
    4672:	d308      	bcc.n	4686 <__divsi3+0x14a>
    4674:	0189      	lsls	r1, r1, #6
    4676:	1192      	asrs	r2, r2, #6
    4678:	428b      	cmp	r3, r1
    467a:	d304      	bcc.n	4686 <__divsi3+0x14a>
    467c:	0189      	lsls	r1, r1, #6
    467e:	d03a      	beq.n	46f6 <__divsi3+0x1ba>
    4680:	1192      	asrs	r2, r2, #6
    4682:	e000      	b.n	4686 <__divsi3+0x14a>
    4684:	0989      	lsrs	r1, r1, #6
    4686:	09c3      	lsrs	r3, r0, #7
    4688:	428b      	cmp	r3, r1
    468a:	d301      	bcc.n	4690 <__divsi3+0x154>
    468c:	01cb      	lsls	r3, r1, #7
    468e:	1ac0      	subs	r0, r0, r3
    4690:	4152      	adcs	r2, r2
    4692:	0983      	lsrs	r3, r0, #6
    4694:	428b      	cmp	r3, r1
    4696:	d301      	bcc.n	469c <__divsi3+0x160>
    4698:	018b      	lsls	r3, r1, #6
    469a:	1ac0      	subs	r0, r0, r3
    469c:	4152      	adcs	r2, r2
    469e:	0943      	lsrs	r3, r0, #5
    46a0:	428b      	cmp	r3, r1
    46a2:	d301      	bcc.n	46a8 <__divsi3+0x16c>
    46a4:	014b      	lsls	r3, r1, #5
    46a6:	1ac0      	subs	r0, r0, r3
    46a8:	4152      	adcs	r2, r2
    46aa:	0903      	lsrs	r3, r0, #4
    46ac:	428b      	cmp	r3, r1
    46ae:	d301      	bcc.n	46b4 <__divsi3+0x178>
    46b0:	010b      	lsls	r3, r1, #4
    46b2:	1ac0      	subs	r0, r0, r3
    46b4:	4152      	adcs	r2, r2
    46b6:	08c3      	lsrs	r3, r0, #3
    46b8:	428b      	cmp	r3, r1
    46ba:	d301      	bcc.n	46c0 <__divsi3+0x184>
    46bc:	00cb      	lsls	r3, r1, #3
    46be:	1ac0      	subs	r0, r0, r3
    46c0:	4152      	adcs	r2, r2
    46c2:	0883      	lsrs	r3, r0, #2
    46c4:	428b      	cmp	r3, r1
    46c6:	d301      	bcc.n	46cc <__divsi3+0x190>
    46c8:	008b      	lsls	r3, r1, #2
    46ca:	1ac0      	subs	r0, r0, r3
    46cc:	4152      	adcs	r2, r2
    46ce:	d2d9      	bcs.n	4684 <__divsi3+0x148>
    46d0:	0843      	lsrs	r3, r0, #1
    46d2:	428b      	cmp	r3, r1
    46d4:	d301      	bcc.n	46da <__divsi3+0x19e>
    46d6:	004b      	lsls	r3, r1, #1
    46d8:	1ac0      	subs	r0, r0, r3
    46da:	4152      	adcs	r2, r2
    46dc:	1a41      	subs	r1, r0, r1
    46de:	d200      	bcs.n	46e2 <__divsi3+0x1a6>
    46e0:	4601      	mov	r1, r0
    46e2:	4663      	mov	r3, ip
    46e4:	4152      	adcs	r2, r2
    46e6:	105b      	asrs	r3, r3, #1
    46e8:	4610      	mov	r0, r2
    46ea:	d301      	bcc.n	46f0 <__divsi3+0x1b4>
    46ec:	4240      	negs	r0, r0
    46ee:	2b00      	cmp	r3, #0
    46f0:	d500      	bpl.n	46f4 <__divsi3+0x1b8>
    46f2:	4249      	negs	r1, r1
    46f4:	4770      	bx	lr
    46f6:	4663      	mov	r3, ip
    46f8:	105b      	asrs	r3, r3, #1
    46fa:	d300      	bcc.n	46fe <__divsi3+0x1c2>
    46fc:	4240      	negs	r0, r0
    46fe:	b501      	push	{r0, lr}
    4700:	2000      	movs	r0, #0
    4702:	f000 f805 	bl	4710 <__aeabi_idiv0>
    4706:	bd02      	pop	{r1, pc}

00004708 <__aeabi_idivmod>:
    4708:	2900      	cmp	r1, #0
    470a:	d0f8      	beq.n	46fe <__divsi3+0x1c2>
    470c:	e716      	b.n	453c <__divsi3>
    470e:	4770      	bx	lr

00004710 <__aeabi_idiv0>:
    4710:	4770      	bx	lr
    4712:	46c0      	nop			; (mov r8, r8)

00004714 <__aeabi_lmul>:
    4714:	b5f0      	push	{r4, r5, r6, r7, lr}
    4716:	46ce      	mov	lr, r9
    4718:	4647      	mov	r7, r8
    471a:	0415      	lsls	r5, r2, #16
    471c:	0c2d      	lsrs	r5, r5, #16
    471e:	002e      	movs	r6, r5
    4720:	b580      	push	{r7, lr}
    4722:	0407      	lsls	r7, r0, #16
    4724:	0c14      	lsrs	r4, r2, #16
    4726:	0c3f      	lsrs	r7, r7, #16
    4728:	4699      	mov	r9, r3
    472a:	0c03      	lsrs	r3, r0, #16
    472c:	437e      	muls	r6, r7
    472e:	435d      	muls	r5, r3
    4730:	4367      	muls	r7, r4
    4732:	4363      	muls	r3, r4
    4734:	197f      	adds	r7, r7, r5
    4736:	0c34      	lsrs	r4, r6, #16
    4738:	19e4      	adds	r4, r4, r7
    473a:	469c      	mov	ip, r3
    473c:	42a5      	cmp	r5, r4
    473e:	d903      	bls.n	4748 <__aeabi_lmul+0x34>
    4740:	2380      	movs	r3, #128	; 0x80
    4742:	025b      	lsls	r3, r3, #9
    4744:	4698      	mov	r8, r3
    4746:	44c4      	add	ip, r8
    4748:	464b      	mov	r3, r9
    474a:	4351      	muls	r1, r2
    474c:	4343      	muls	r3, r0
    474e:	0436      	lsls	r6, r6, #16
    4750:	0c36      	lsrs	r6, r6, #16
    4752:	0c25      	lsrs	r5, r4, #16
    4754:	0424      	lsls	r4, r4, #16
    4756:	4465      	add	r5, ip
    4758:	19a4      	adds	r4, r4, r6
    475a:	1859      	adds	r1, r3, r1
    475c:	1949      	adds	r1, r1, r5
    475e:	0020      	movs	r0, r4
    4760:	bc0c      	pop	{r2, r3}
    4762:	4690      	mov	r8, r2
    4764:	4699      	mov	r9, r3
    4766:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004768 <__aeabi_dadd>:
    4768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    476a:	4645      	mov	r5, r8
    476c:	46de      	mov	lr, fp
    476e:	4657      	mov	r7, sl
    4770:	464e      	mov	r6, r9
    4772:	030c      	lsls	r4, r1, #12
    4774:	b5e0      	push	{r5, r6, r7, lr}
    4776:	004e      	lsls	r6, r1, #1
    4778:	0fc9      	lsrs	r1, r1, #31
    477a:	4688      	mov	r8, r1
    477c:	000d      	movs	r5, r1
    477e:	0a61      	lsrs	r1, r4, #9
    4780:	0f44      	lsrs	r4, r0, #29
    4782:	430c      	orrs	r4, r1
    4784:	00c7      	lsls	r7, r0, #3
    4786:	0319      	lsls	r1, r3, #12
    4788:	0058      	lsls	r0, r3, #1
    478a:	0fdb      	lsrs	r3, r3, #31
    478c:	469b      	mov	fp, r3
    478e:	0a4b      	lsrs	r3, r1, #9
    4790:	0f51      	lsrs	r1, r2, #29
    4792:	430b      	orrs	r3, r1
    4794:	0d76      	lsrs	r6, r6, #21
    4796:	0d40      	lsrs	r0, r0, #21
    4798:	0019      	movs	r1, r3
    479a:	00d2      	lsls	r2, r2, #3
    479c:	45d8      	cmp	r8, fp
    479e:	d100      	bne.n	47a2 <__aeabi_dadd+0x3a>
    47a0:	e0ae      	b.n	4900 <__aeabi_dadd+0x198>
    47a2:	1a35      	subs	r5, r6, r0
    47a4:	2d00      	cmp	r5, #0
    47a6:	dc00      	bgt.n	47aa <__aeabi_dadd+0x42>
    47a8:	e0f6      	b.n	4998 <__aeabi_dadd+0x230>
    47aa:	2800      	cmp	r0, #0
    47ac:	d10f      	bne.n	47ce <__aeabi_dadd+0x66>
    47ae:	4313      	orrs	r3, r2
    47b0:	d100      	bne.n	47b4 <__aeabi_dadd+0x4c>
    47b2:	e0db      	b.n	496c <__aeabi_dadd+0x204>
    47b4:	1e6b      	subs	r3, r5, #1
    47b6:	2b00      	cmp	r3, #0
    47b8:	d000      	beq.n	47bc <__aeabi_dadd+0x54>
    47ba:	e137      	b.n	4a2c <__aeabi_dadd+0x2c4>
    47bc:	1aba      	subs	r2, r7, r2
    47be:	4297      	cmp	r7, r2
    47c0:	41bf      	sbcs	r7, r7
    47c2:	1a64      	subs	r4, r4, r1
    47c4:	427f      	negs	r7, r7
    47c6:	1be4      	subs	r4, r4, r7
    47c8:	2601      	movs	r6, #1
    47ca:	0017      	movs	r7, r2
    47cc:	e024      	b.n	4818 <__aeabi_dadd+0xb0>
    47ce:	4bc6      	ldr	r3, [pc, #792]	; (4ae8 <__aeabi_dadd+0x380>)
    47d0:	429e      	cmp	r6, r3
    47d2:	d04d      	beq.n	4870 <__aeabi_dadd+0x108>
    47d4:	2380      	movs	r3, #128	; 0x80
    47d6:	041b      	lsls	r3, r3, #16
    47d8:	4319      	orrs	r1, r3
    47da:	2d38      	cmp	r5, #56	; 0x38
    47dc:	dd00      	ble.n	47e0 <__aeabi_dadd+0x78>
    47de:	e107      	b.n	49f0 <__aeabi_dadd+0x288>
    47e0:	2d1f      	cmp	r5, #31
    47e2:	dd00      	ble.n	47e6 <__aeabi_dadd+0x7e>
    47e4:	e138      	b.n	4a58 <__aeabi_dadd+0x2f0>
    47e6:	2020      	movs	r0, #32
    47e8:	1b43      	subs	r3, r0, r5
    47ea:	469a      	mov	sl, r3
    47ec:	000b      	movs	r3, r1
    47ee:	4650      	mov	r0, sl
    47f0:	4083      	lsls	r3, r0
    47f2:	4699      	mov	r9, r3
    47f4:	0013      	movs	r3, r2
    47f6:	4648      	mov	r0, r9
    47f8:	40eb      	lsrs	r3, r5
    47fa:	4318      	orrs	r0, r3
    47fc:	0003      	movs	r3, r0
    47fe:	4650      	mov	r0, sl
    4800:	4082      	lsls	r2, r0
    4802:	1e50      	subs	r0, r2, #1
    4804:	4182      	sbcs	r2, r0
    4806:	40e9      	lsrs	r1, r5
    4808:	431a      	orrs	r2, r3
    480a:	1aba      	subs	r2, r7, r2
    480c:	1a61      	subs	r1, r4, r1
    480e:	4297      	cmp	r7, r2
    4810:	41a4      	sbcs	r4, r4
    4812:	0017      	movs	r7, r2
    4814:	4264      	negs	r4, r4
    4816:	1b0c      	subs	r4, r1, r4
    4818:	0223      	lsls	r3, r4, #8
    481a:	d562      	bpl.n	48e2 <__aeabi_dadd+0x17a>
    481c:	0264      	lsls	r4, r4, #9
    481e:	0a65      	lsrs	r5, r4, #9
    4820:	2d00      	cmp	r5, #0
    4822:	d100      	bne.n	4826 <__aeabi_dadd+0xbe>
    4824:	e0df      	b.n	49e6 <__aeabi_dadd+0x27e>
    4826:	0028      	movs	r0, r5
    4828:	f001 fbe4 	bl	5ff4 <__clzsi2>
    482c:	0003      	movs	r3, r0
    482e:	3b08      	subs	r3, #8
    4830:	2b1f      	cmp	r3, #31
    4832:	dd00      	ble.n	4836 <__aeabi_dadd+0xce>
    4834:	e0d2      	b.n	49dc <__aeabi_dadd+0x274>
    4836:	2220      	movs	r2, #32
    4838:	003c      	movs	r4, r7
    483a:	1ad2      	subs	r2, r2, r3
    483c:	409d      	lsls	r5, r3
    483e:	40d4      	lsrs	r4, r2
    4840:	409f      	lsls	r7, r3
    4842:	4325      	orrs	r5, r4
    4844:	429e      	cmp	r6, r3
    4846:	dd00      	ble.n	484a <__aeabi_dadd+0xe2>
    4848:	e0c4      	b.n	49d4 <__aeabi_dadd+0x26c>
    484a:	1b9e      	subs	r6, r3, r6
    484c:	1c73      	adds	r3, r6, #1
    484e:	2b1f      	cmp	r3, #31
    4850:	dd00      	ble.n	4854 <__aeabi_dadd+0xec>
    4852:	e0f1      	b.n	4a38 <__aeabi_dadd+0x2d0>
    4854:	2220      	movs	r2, #32
    4856:	0038      	movs	r0, r7
    4858:	0029      	movs	r1, r5
    485a:	1ad2      	subs	r2, r2, r3
    485c:	40d8      	lsrs	r0, r3
    485e:	4091      	lsls	r1, r2
    4860:	4097      	lsls	r7, r2
    4862:	002c      	movs	r4, r5
    4864:	4301      	orrs	r1, r0
    4866:	1e78      	subs	r0, r7, #1
    4868:	4187      	sbcs	r7, r0
    486a:	40dc      	lsrs	r4, r3
    486c:	2600      	movs	r6, #0
    486e:	430f      	orrs	r7, r1
    4870:	077b      	lsls	r3, r7, #29
    4872:	d009      	beq.n	4888 <__aeabi_dadd+0x120>
    4874:	230f      	movs	r3, #15
    4876:	403b      	ands	r3, r7
    4878:	2b04      	cmp	r3, #4
    487a:	d005      	beq.n	4888 <__aeabi_dadd+0x120>
    487c:	1d3b      	adds	r3, r7, #4
    487e:	42bb      	cmp	r3, r7
    4880:	41bf      	sbcs	r7, r7
    4882:	427f      	negs	r7, r7
    4884:	19e4      	adds	r4, r4, r7
    4886:	001f      	movs	r7, r3
    4888:	0223      	lsls	r3, r4, #8
    488a:	d52c      	bpl.n	48e6 <__aeabi_dadd+0x17e>
    488c:	4b96      	ldr	r3, [pc, #600]	; (4ae8 <__aeabi_dadd+0x380>)
    488e:	3601      	adds	r6, #1
    4890:	429e      	cmp	r6, r3
    4892:	d100      	bne.n	4896 <__aeabi_dadd+0x12e>
    4894:	e09a      	b.n	49cc <__aeabi_dadd+0x264>
    4896:	4645      	mov	r5, r8
    4898:	4b94      	ldr	r3, [pc, #592]	; (4aec <__aeabi_dadd+0x384>)
    489a:	08ff      	lsrs	r7, r7, #3
    489c:	401c      	ands	r4, r3
    489e:	0760      	lsls	r0, r4, #29
    48a0:	0576      	lsls	r6, r6, #21
    48a2:	0264      	lsls	r4, r4, #9
    48a4:	4307      	orrs	r7, r0
    48a6:	0b24      	lsrs	r4, r4, #12
    48a8:	0d76      	lsrs	r6, r6, #21
    48aa:	2100      	movs	r1, #0
    48ac:	0324      	lsls	r4, r4, #12
    48ae:	0b23      	lsrs	r3, r4, #12
    48b0:	0d0c      	lsrs	r4, r1, #20
    48b2:	4a8f      	ldr	r2, [pc, #572]	; (4af0 <__aeabi_dadd+0x388>)
    48b4:	0524      	lsls	r4, r4, #20
    48b6:	431c      	orrs	r4, r3
    48b8:	4014      	ands	r4, r2
    48ba:	0533      	lsls	r3, r6, #20
    48bc:	4323      	orrs	r3, r4
    48be:	005b      	lsls	r3, r3, #1
    48c0:	07ed      	lsls	r5, r5, #31
    48c2:	085b      	lsrs	r3, r3, #1
    48c4:	432b      	orrs	r3, r5
    48c6:	0038      	movs	r0, r7
    48c8:	0019      	movs	r1, r3
    48ca:	bc3c      	pop	{r2, r3, r4, r5}
    48cc:	4690      	mov	r8, r2
    48ce:	4699      	mov	r9, r3
    48d0:	46a2      	mov	sl, r4
    48d2:	46ab      	mov	fp, r5
    48d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48d6:	4664      	mov	r4, ip
    48d8:	4304      	orrs	r4, r0
    48da:	d100      	bne.n	48de <__aeabi_dadd+0x176>
    48dc:	e211      	b.n	4d02 <__aeabi_dadd+0x59a>
    48de:	0004      	movs	r4, r0
    48e0:	4667      	mov	r7, ip
    48e2:	077b      	lsls	r3, r7, #29
    48e4:	d1c6      	bne.n	4874 <__aeabi_dadd+0x10c>
    48e6:	4645      	mov	r5, r8
    48e8:	0760      	lsls	r0, r4, #29
    48ea:	08ff      	lsrs	r7, r7, #3
    48ec:	4307      	orrs	r7, r0
    48ee:	08e4      	lsrs	r4, r4, #3
    48f0:	4b7d      	ldr	r3, [pc, #500]	; (4ae8 <__aeabi_dadd+0x380>)
    48f2:	429e      	cmp	r6, r3
    48f4:	d030      	beq.n	4958 <__aeabi_dadd+0x1f0>
    48f6:	0324      	lsls	r4, r4, #12
    48f8:	0576      	lsls	r6, r6, #21
    48fa:	0b24      	lsrs	r4, r4, #12
    48fc:	0d76      	lsrs	r6, r6, #21
    48fe:	e7d4      	b.n	48aa <__aeabi_dadd+0x142>
    4900:	1a33      	subs	r3, r6, r0
    4902:	469a      	mov	sl, r3
    4904:	2b00      	cmp	r3, #0
    4906:	dd78      	ble.n	49fa <__aeabi_dadd+0x292>
    4908:	2800      	cmp	r0, #0
    490a:	d031      	beq.n	4970 <__aeabi_dadd+0x208>
    490c:	4876      	ldr	r0, [pc, #472]	; (4ae8 <__aeabi_dadd+0x380>)
    490e:	4286      	cmp	r6, r0
    4910:	d0ae      	beq.n	4870 <__aeabi_dadd+0x108>
    4912:	2080      	movs	r0, #128	; 0x80
    4914:	0400      	lsls	r0, r0, #16
    4916:	4301      	orrs	r1, r0
    4918:	4653      	mov	r3, sl
    491a:	2b38      	cmp	r3, #56	; 0x38
    491c:	dc00      	bgt.n	4920 <__aeabi_dadd+0x1b8>
    491e:	e0e9      	b.n	4af4 <__aeabi_dadd+0x38c>
    4920:	430a      	orrs	r2, r1
    4922:	1e51      	subs	r1, r2, #1
    4924:	418a      	sbcs	r2, r1
    4926:	2100      	movs	r1, #0
    4928:	19d2      	adds	r2, r2, r7
    492a:	42ba      	cmp	r2, r7
    492c:	41bf      	sbcs	r7, r7
    492e:	1909      	adds	r1, r1, r4
    4930:	427c      	negs	r4, r7
    4932:	0017      	movs	r7, r2
    4934:	190c      	adds	r4, r1, r4
    4936:	0223      	lsls	r3, r4, #8
    4938:	d5d3      	bpl.n	48e2 <__aeabi_dadd+0x17a>
    493a:	4b6b      	ldr	r3, [pc, #428]	; (4ae8 <__aeabi_dadd+0x380>)
    493c:	3601      	adds	r6, #1
    493e:	429e      	cmp	r6, r3
    4940:	d100      	bne.n	4944 <__aeabi_dadd+0x1dc>
    4942:	e13a      	b.n	4bba <__aeabi_dadd+0x452>
    4944:	2001      	movs	r0, #1
    4946:	4b69      	ldr	r3, [pc, #420]	; (4aec <__aeabi_dadd+0x384>)
    4948:	401c      	ands	r4, r3
    494a:	087b      	lsrs	r3, r7, #1
    494c:	4007      	ands	r7, r0
    494e:	431f      	orrs	r7, r3
    4950:	07e0      	lsls	r0, r4, #31
    4952:	4307      	orrs	r7, r0
    4954:	0864      	lsrs	r4, r4, #1
    4956:	e78b      	b.n	4870 <__aeabi_dadd+0x108>
    4958:	0023      	movs	r3, r4
    495a:	433b      	orrs	r3, r7
    495c:	d100      	bne.n	4960 <__aeabi_dadd+0x1f8>
    495e:	e1cb      	b.n	4cf8 <__aeabi_dadd+0x590>
    4960:	2280      	movs	r2, #128	; 0x80
    4962:	0312      	lsls	r2, r2, #12
    4964:	4314      	orrs	r4, r2
    4966:	0324      	lsls	r4, r4, #12
    4968:	0b24      	lsrs	r4, r4, #12
    496a:	e79e      	b.n	48aa <__aeabi_dadd+0x142>
    496c:	002e      	movs	r6, r5
    496e:	e77f      	b.n	4870 <__aeabi_dadd+0x108>
    4970:	0008      	movs	r0, r1
    4972:	4310      	orrs	r0, r2
    4974:	d100      	bne.n	4978 <__aeabi_dadd+0x210>
    4976:	e0b4      	b.n	4ae2 <__aeabi_dadd+0x37a>
    4978:	1e58      	subs	r0, r3, #1
    497a:	2800      	cmp	r0, #0
    497c:	d000      	beq.n	4980 <__aeabi_dadd+0x218>
    497e:	e0de      	b.n	4b3e <__aeabi_dadd+0x3d6>
    4980:	18ba      	adds	r2, r7, r2
    4982:	42ba      	cmp	r2, r7
    4984:	419b      	sbcs	r3, r3
    4986:	1864      	adds	r4, r4, r1
    4988:	425b      	negs	r3, r3
    498a:	18e4      	adds	r4, r4, r3
    498c:	0017      	movs	r7, r2
    498e:	2601      	movs	r6, #1
    4990:	0223      	lsls	r3, r4, #8
    4992:	d5a6      	bpl.n	48e2 <__aeabi_dadd+0x17a>
    4994:	2602      	movs	r6, #2
    4996:	e7d5      	b.n	4944 <__aeabi_dadd+0x1dc>
    4998:	2d00      	cmp	r5, #0
    499a:	d16e      	bne.n	4a7a <__aeabi_dadd+0x312>
    499c:	1c70      	adds	r0, r6, #1
    499e:	0540      	lsls	r0, r0, #21
    49a0:	0d40      	lsrs	r0, r0, #21
    49a2:	2801      	cmp	r0, #1
    49a4:	dc00      	bgt.n	49a8 <__aeabi_dadd+0x240>
    49a6:	e0f9      	b.n	4b9c <__aeabi_dadd+0x434>
    49a8:	1ab8      	subs	r0, r7, r2
    49aa:	4684      	mov	ip, r0
    49ac:	4287      	cmp	r7, r0
    49ae:	4180      	sbcs	r0, r0
    49b0:	1ae5      	subs	r5, r4, r3
    49b2:	4240      	negs	r0, r0
    49b4:	1a2d      	subs	r5, r5, r0
    49b6:	0228      	lsls	r0, r5, #8
    49b8:	d400      	bmi.n	49bc <__aeabi_dadd+0x254>
    49ba:	e089      	b.n	4ad0 <__aeabi_dadd+0x368>
    49bc:	1bd7      	subs	r7, r2, r7
    49be:	42ba      	cmp	r2, r7
    49c0:	4192      	sbcs	r2, r2
    49c2:	1b1c      	subs	r4, r3, r4
    49c4:	4252      	negs	r2, r2
    49c6:	1aa5      	subs	r5, r4, r2
    49c8:	46d8      	mov	r8, fp
    49ca:	e729      	b.n	4820 <__aeabi_dadd+0xb8>
    49cc:	4645      	mov	r5, r8
    49ce:	2400      	movs	r4, #0
    49d0:	2700      	movs	r7, #0
    49d2:	e76a      	b.n	48aa <__aeabi_dadd+0x142>
    49d4:	4c45      	ldr	r4, [pc, #276]	; (4aec <__aeabi_dadd+0x384>)
    49d6:	1af6      	subs	r6, r6, r3
    49d8:	402c      	ands	r4, r5
    49da:	e749      	b.n	4870 <__aeabi_dadd+0x108>
    49dc:	003d      	movs	r5, r7
    49de:	3828      	subs	r0, #40	; 0x28
    49e0:	4085      	lsls	r5, r0
    49e2:	2700      	movs	r7, #0
    49e4:	e72e      	b.n	4844 <__aeabi_dadd+0xdc>
    49e6:	0038      	movs	r0, r7
    49e8:	f001 fb04 	bl	5ff4 <__clzsi2>
    49ec:	3020      	adds	r0, #32
    49ee:	e71d      	b.n	482c <__aeabi_dadd+0xc4>
    49f0:	430a      	orrs	r2, r1
    49f2:	1e51      	subs	r1, r2, #1
    49f4:	418a      	sbcs	r2, r1
    49f6:	2100      	movs	r1, #0
    49f8:	e707      	b.n	480a <__aeabi_dadd+0xa2>
    49fa:	2b00      	cmp	r3, #0
    49fc:	d000      	beq.n	4a00 <__aeabi_dadd+0x298>
    49fe:	e0f3      	b.n	4be8 <__aeabi_dadd+0x480>
    4a00:	1c70      	adds	r0, r6, #1
    4a02:	0543      	lsls	r3, r0, #21
    4a04:	0d5b      	lsrs	r3, r3, #21
    4a06:	2b01      	cmp	r3, #1
    4a08:	dc00      	bgt.n	4a0c <__aeabi_dadd+0x2a4>
    4a0a:	e0ad      	b.n	4b68 <__aeabi_dadd+0x400>
    4a0c:	4b36      	ldr	r3, [pc, #216]	; (4ae8 <__aeabi_dadd+0x380>)
    4a0e:	4298      	cmp	r0, r3
    4a10:	d100      	bne.n	4a14 <__aeabi_dadd+0x2ac>
    4a12:	e0d1      	b.n	4bb8 <__aeabi_dadd+0x450>
    4a14:	18ba      	adds	r2, r7, r2
    4a16:	42ba      	cmp	r2, r7
    4a18:	41bf      	sbcs	r7, r7
    4a1a:	1864      	adds	r4, r4, r1
    4a1c:	427f      	negs	r7, r7
    4a1e:	19e4      	adds	r4, r4, r7
    4a20:	07e7      	lsls	r7, r4, #31
    4a22:	0852      	lsrs	r2, r2, #1
    4a24:	4317      	orrs	r7, r2
    4a26:	0864      	lsrs	r4, r4, #1
    4a28:	0006      	movs	r6, r0
    4a2a:	e721      	b.n	4870 <__aeabi_dadd+0x108>
    4a2c:	482e      	ldr	r0, [pc, #184]	; (4ae8 <__aeabi_dadd+0x380>)
    4a2e:	4285      	cmp	r5, r0
    4a30:	d100      	bne.n	4a34 <__aeabi_dadd+0x2cc>
    4a32:	e093      	b.n	4b5c <__aeabi_dadd+0x3f4>
    4a34:	001d      	movs	r5, r3
    4a36:	e6d0      	b.n	47da <__aeabi_dadd+0x72>
    4a38:	0029      	movs	r1, r5
    4a3a:	3e1f      	subs	r6, #31
    4a3c:	40f1      	lsrs	r1, r6
    4a3e:	2b20      	cmp	r3, #32
    4a40:	d100      	bne.n	4a44 <__aeabi_dadd+0x2dc>
    4a42:	e08d      	b.n	4b60 <__aeabi_dadd+0x3f8>
    4a44:	2240      	movs	r2, #64	; 0x40
    4a46:	1ad3      	subs	r3, r2, r3
    4a48:	409d      	lsls	r5, r3
    4a4a:	432f      	orrs	r7, r5
    4a4c:	1e7d      	subs	r5, r7, #1
    4a4e:	41af      	sbcs	r7, r5
    4a50:	2400      	movs	r4, #0
    4a52:	430f      	orrs	r7, r1
    4a54:	2600      	movs	r6, #0
    4a56:	e744      	b.n	48e2 <__aeabi_dadd+0x17a>
    4a58:	002b      	movs	r3, r5
    4a5a:	0008      	movs	r0, r1
    4a5c:	3b20      	subs	r3, #32
    4a5e:	40d8      	lsrs	r0, r3
    4a60:	0003      	movs	r3, r0
    4a62:	2d20      	cmp	r5, #32
    4a64:	d100      	bne.n	4a68 <__aeabi_dadd+0x300>
    4a66:	e07d      	b.n	4b64 <__aeabi_dadd+0x3fc>
    4a68:	2040      	movs	r0, #64	; 0x40
    4a6a:	1b45      	subs	r5, r0, r5
    4a6c:	40a9      	lsls	r1, r5
    4a6e:	430a      	orrs	r2, r1
    4a70:	1e51      	subs	r1, r2, #1
    4a72:	418a      	sbcs	r2, r1
    4a74:	2100      	movs	r1, #0
    4a76:	431a      	orrs	r2, r3
    4a78:	e6c7      	b.n	480a <__aeabi_dadd+0xa2>
    4a7a:	2e00      	cmp	r6, #0
    4a7c:	d050      	beq.n	4b20 <__aeabi_dadd+0x3b8>
    4a7e:	4e1a      	ldr	r6, [pc, #104]	; (4ae8 <__aeabi_dadd+0x380>)
    4a80:	42b0      	cmp	r0, r6
    4a82:	d057      	beq.n	4b34 <__aeabi_dadd+0x3cc>
    4a84:	2680      	movs	r6, #128	; 0x80
    4a86:	426b      	negs	r3, r5
    4a88:	4699      	mov	r9, r3
    4a8a:	0436      	lsls	r6, r6, #16
    4a8c:	4334      	orrs	r4, r6
    4a8e:	464b      	mov	r3, r9
    4a90:	2b38      	cmp	r3, #56	; 0x38
    4a92:	dd00      	ble.n	4a96 <__aeabi_dadd+0x32e>
    4a94:	e0d6      	b.n	4c44 <__aeabi_dadd+0x4dc>
    4a96:	2b1f      	cmp	r3, #31
    4a98:	dd00      	ble.n	4a9c <__aeabi_dadd+0x334>
    4a9a:	e135      	b.n	4d08 <__aeabi_dadd+0x5a0>
    4a9c:	2620      	movs	r6, #32
    4a9e:	1af5      	subs	r5, r6, r3
    4aa0:	0026      	movs	r6, r4
    4aa2:	40ae      	lsls	r6, r5
    4aa4:	46b2      	mov	sl, r6
    4aa6:	003e      	movs	r6, r7
    4aa8:	40de      	lsrs	r6, r3
    4aaa:	46ac      	mov	ip, r5
    4aac:	0035      	movs	r5, r6
    4aae:	4656      	mov	r6, sl
    4ab0:	432e      	orrs	r6, r5
    4ab2:	4665      	mov	r5, ip
    4ab4:	40af      	lsls	r7, r5
    4ab6:	1e7d      	subs	r5, r7, #1
    4ab8:	41af      	sbcs	r7, r5
    4aba:	40dc      	lsrs	r4, r3
    4abc:	4337      	orrs	r7, r6
    4abe:	1bd7      	subs	r7, r2, r7
    4ac0:	42ba      	cmp	r2, r7
    4ac2:	4192      	sbcs	r2, r2
    4ac4:	1b0c      	subs	r4, r1, r4
    4ac6:	4252      	negs	r2, r2
    4ac8:	1aa4      	subs	r4, r4, r2
    4aca:	0006      	movs	r6, r0
    4acc:	46d8      	mov	r8, fp
    4ace:	e6a3      	b.n	4818 <__aeabi_dadd+0xb0>
    4ad0:	4664      	mov	r4, ip
    4ad2:	4667      	mov	r7, ip
    4ad4:	432c      	orrs	r4, r5
    4ad6:	d000      	beq.n	4ada <__aeabi_dadd+0x372>
    4ad8:	e6a2      	b.n	4820 <__aeabi_dadd+0xb8>
    4ada:	2500      	movs	r5, #0
    4adc:	2600      	movs	r6, #0
    4ade:	2700      	movs	r7, #0
    4ae0:	e706      	b.n	48f0 <__aeabi_dadd+0x188>
    4ae2:	001e      	movs	r6, r3
    4ae4:	e6c4      	b.n	4870 <__aeabi_dadd+0x108>
    4ae6:	46c0      	nop			; (mov r8, r8)
    4ae8:	000007ff 	.word	0x000007ff
    4aec:	ff7fffff 	.word	0xff7fffff
    4af0:	800fffff 	.word	0x800fffff
    4af4:	2b1f      	cmp	r3, #31
    4af6:	dc63      	bgt.n	4bc0 <__aeabi_dadd+0x458>
    4af8:	2020      	movs	r0, #32
    4afa:	1ac3      	subs	r3, r0, r3
    4afc:	0008      	movs	r0, r1
    4afe:	4098      	lsls	r0, r3
    4b00:	469c      	mov	ip, r3
    4b02:	4683      	mov	fp, r0
    4b04:	4653      	mov	r3, sl
    4b06:	0010      	movs	r0, r2
    4b08:	40d8      	lsrs	r0, r3
    4b0a:	0003      	movs	r3, r0
    4b0c:	4658      	mov	r0, fp
    4b0e:	4318      	orrs	r0, r3
    4b10:	4663      	mov	r3, ip
    4b12:	409a      	lsls	r2, r3
    4b14:	1e53      	subs	r3, r2, #1
    4b16:	419a      	sbcs	r2, r3
    4b18:	4653      	mov	r3, sl
    4b1a:	4302      	orrs	r2, r0
    4b1c:	40d9      	lsrs	r1, r3
    4b1e:	e703      	b.n	4928 <__aeabi_dadd+0x1c0>
    4b20:	0026      	movs	r6, r4
    4b22:	433e      	orrs	r6, r7
    4b24:	d006      	beq.n	4b34 <__aeabi_dadd+0x3cc>
    4b26:	43eb      	mvns	r3, r5
    4b28:	4699      	mov	r9, r3
    4b2a:	2b00      	cmp	r3, #0
    4b2c:	d0c7      	beq.n	4abe <__aeabi_dadd+0x356>
    4b2e:	4e94      	ldr	r6, [pc, #592]	; (4d80 <__aeabi_dadd+0x618>)
    4b30:	42b0      	cmp	r0, r6
    4b32:	d1ac      	bne.n	4a8e <__aeabi_dadd+0x326>
    4b34:	000c      	movs	r4, r1
    4b36:	0017      	movs	r7, r2
    4b38:	0006      	movs	r6, r0
    4b3a:	46d8      	mov	r8, fp
    4b3c:	e698      	b.n	4870 <__aeabi_dadd+0x108>
    4b3e:	4b90      	ldr	r3, [pc, #576]	; (4d80 <__aeabi_dadd+0x618>)
    4b40:	459a      	cmp	sl, r3
    4b42:	d00b      	beq.n	4b5c <__aeabi_dadd+0x3f4>
    4b44:	4682      	mov	sl, r0
    4b46:	e6e7      	b.n	4918 <__aeabi_dadd+0x1b0>
    4b48:	2800      	cmp	r0, #0
    4b4a:	d000      	beq.n	4b4e <__aeabi_dadd+0x3e6>
    4b4c:	e09e      	b.n	4c8c <__aeabi_dadd+0x524>
    4b4e:	0018      	movs	r0, r3
    4b50:	4310      	orrs	r0, r2
    4b52:	d100      	bne.n	4b56 <__aeabi_dadd+0x3ee>
    4b54:	e0e9      	b.n	4d2a <__aeabi_dadd+0x5c2>
    4b56:	001c      	movs	r4, r3
    4b58:	0017      	movs	r7, r2
    4b5a:	46d8      	mov	r8, fp
    4b5c:	4e88      	ldr	r6, [pc, #544]	; (4d80 <__aeabi_dadd+0x618>)
    4b5e:	e687      	b.n	4870 <__aeabi_dadd+0x108>
    4b60:	2500      	movs	r5, #0
    4b62:	e772      	b.n	4a4a <__aeabi_dadd+0x2e2>
    4b64:	2100      	movs	r1, #0
    4b66:	e782      	b.n	4a6e <__aeabi_dadd+0x306>
    4b68:	0023      	movs	r3, r4
    4b6a:	433b      	orrs	r3, r7
    4b6c:	2e00      	cmp	r6, #0
    4b6e:	d000      	beq.n	4b72 <__aeabi_dadd+0x40a>
    4b70:	e0ab      	b.n	4cca <__aeabi_dadd+0x562>
    4b72:	2b00      	cmp	r3, #0
    4b74:	d100      	bne.n	4b78 <__aeabi_dadd+0x410>
    4b76:	e0e7      	b.n	4d48 <__aeabi_dadd+0x5e0>
    4b78:	000b      	movs	r3, r1
    4b7a:	4313      	orrs	r3, r2
    4b7c:	d100      	bne.n	4b80 <__aeabi_dadd+0x418>
    4b7e:	e677      	b.n	4870 <__aeabi_dadd+0x108>
    4b80:	18ba      	adds	r2, r7, r2
    4b82:	42ba      	cmp	r2, r7
    4b84:	41bf      	sbcs	r7, r7
    4b86:	1864      	adds	r4, r4, r1
    4b88:	427f      	negs	r7, r7
    4b8a:	19e4      	adds	r4, r4, r7
    4b8c:	0223      	lsls	r3, r4, #8
    4b8e:	d400      	bmi.n	4b92 <__aeabi_dadd+0x42a>
    4b90:	e0f2      	b.n	4d78 <__aeabi_dadd+0x610>
    4b92:	4b7c      	ldr	r3, [pc, #496]	; (4d84 <__aeabi_dadd+0x61c>)
    4b94:	0017      	movs	r7, r2
    4b96:	401c      	ands	r4, r3
    4b98:	0006      	movs	r6, r0
    4b9a:	e669      	b.n	4870 <__aeabi_dadd+0x108>
    4b9c:	0020      	movs	r0, r4
    4b9e:	4338      	orrs	r0, r7
    4ba0:	2e00      	cmp	r6, #0
    4ba2:	d1d1      	bne.n	4b48 <__aeabi_dadd+0x3e0>
    4ba4:	2800      	cmp	r0, #0
    4ba6:	d15b      	bne.n	4c60 <__aeabi_dadd+0x4f8>
    4ba8:	001c      	movs	r4, r3
    4baa:	4314      	orrs	r4, r2
    4bac:	d100      	bne.n	4bb0 <__aeabi_dadd+0x448>
    4bae:	e0a8      	b.n	4d02 <__aeabi_dadd+0x59a>
    4bb0:	001c      	movs	r4, r3
    4bb2:	0017      	movs	r7, r2
    4bb4:	46d8      	mov	r8, fp
    4bb6:	e65b      	b.n	4870 <__aeabi_dadd+0x108>
    4bb8:	0006      	movs	r6, r0
    4bba:	2400      	movs	r4, #0
    4bbc:	2700      	movs	r7, #0
    4bbe:	e697      	b.n	48f0 <__aeabi_dadd+0x188>
    4bc0:	4650      	mov	r0, sl
    4bc2:	000b      	movs	r3, r1
    4bc4:	3820      	subs	r0, #32
    4bc6:	40c3      	lsrs	r3, r0
    4bc8:	4699      	mov	r9, r3
    4bca:	4653      	mov	r3, sl
    4bcc:	2b20      	cmp	r3, #32
    4bce:	d100      	bne.n	4bd2 <__aeabi_dadd+0x46a>
    4bd0:	e095      	b.n	4cfe <__aeabi_dadd+0x596>
    4bd2:	2340      	movs	r3, #64	; 0x40
    4bd4:	4650      	mov	r0, sl
    4bd6:	1a1b      	subs	r3, r3, r0
    4bd8:	4099      	lsls	r1, r3
    4bda:	430a      	orrs	r2, r1
    4bdc:	1e51      	subs	r1, r2, #1
    4bde:	418a      	sbcs	r2, r1
    4be0:	464b      	mov	r3, r9
    4be2:	2100      	movs	r1, #0
    4be4:	431a      	orrs	r2, r3
    4be6:	e69f      	b.n	4928 <__aeabi_dadd+0x1c0>
    4be8:	2e00      	cmp	r6, #0
    4bea:	d130      	bne.n	4c4e <__aeabi_dadd+0x4e6>
    4bec:	0026      	movs	r6, r4
    4bee:	433e      	orrs	r6, r7
    4bf0:	d067      	beq.n	4cc2 <__aeabi_dadd+0x55a>
    4bf2:	43db      	mvns	r3, r3
    4bf4:	469a      	mov	sl, r3
    4bf6:	2b00      	cmp	r3, #0
    4bf8:	d01c      	beq.n	4c34 <__aeabi_dadd+0x4cc>
    4bfa:	4e61      	ldr	r6, [pc, #388]	; (4d80 <__aeabi_dadd+0x618>)
    4bfc:	42b0      	cmp	r0, r6
    4bfe:	d060      	beq.n	4cc2 <__aeabi_dadd+0x55a>
    4c00:	4653      	mov	r3, sl
    4c02:	2b38      	cmp	r3, #56	; 0x38
    4c04:	dd00      	ble.n	4c08 <__aeabi_dadd+0x4a0>
    4c06:	e096      	b.n	4d36 <__aeabi_dadd+0x5ce>
    4c08:	2b1f      	cmp	r3, #31
    4c0a:	dd00      	ble.n	4c0e <__aeabi_dadd+0x4a6>
    4c0c:	e09f      	b.n	4d4e <__aeabi_dadd+0x5e6>
    4c0e:	2620      	movs	r6, #32
    4c10:	1af3      	subs	r3, r6, r3
    4c12:	0026      	movs	r6, r4
    4c14:	409e      	lsls	r6, r3
    4c16:	469c      	mov	ip, r3
    4c18:	46b3      	mov	fp, r6
    4c1a:	4653      	mov	r3, sl
    4c1c:	003e      	movs	r6, r7
    4c1e:	40de      	lsrs	r6, r3
    4c20:	0033      	movs	r3, r6
    4c22:	465e      	mov	r6, fp
    4c24:	431e      	orrs	r6, r3
    4c26:	4663      	mov	r3, ip
    4c28:	409f      	lsls	r7, r3
    4c2a:	1e7b      	subs	r3, r7, #1
    4c2c:	419f      	sbcs	r7, r3
    4c2e:	4653      	mov	r3, sl
    4c30:	40dc      	lsrs	r4, r3
    4c32:	4337      	orrs	r7, r6
    4c34:	18bf      	adds	r7, r7, r2
    4c36:	4297      	cmp	r7, r2
    4c38:	4192      	sbcs	r2, r2
    4c3a:	1864      	adds	r4, r4, r1
    4c3c:	4252      	negs	r2, r2
    4c3e:	18a4      	adds	r4, r4, r2
    4c40:	0006      	movs	r6, r0
    4c42:	e678      	b.n	4936 <__aeabi_dadd+0x1ce>
    4c44:	4327      	orrs	r7, r4
    4c46:	1e7c      	subs	r4, r7, #1
    4c48:	41a7      	sbcs	r7, r4
    4c4a:	2400      	movs	r4, #0
    4c4c:	e737      	b.n	4abe <__aeabi_dadd+0x356>
    4c4e:	4e4c      	ldr	r6, [pc, #304]	; (4d80 <__aeabi_dadd+0x618>)
    4c50:	42b0      	cmp	r0, r6
    4c52:	d036      	beq.n	4cc2 <__aeabi_dadd+0x55a>
    4c54:	2680      	movs	r6, #128	; 0x80
    4c56:	425b      	negs	r3, r3
    4c58:	0436      	lsls	r6, r6, #16
    4c5a:	469a      	mov	sl, r3
    4c5c:	4334      	orrs	r4, r6
    4c5e:	e7cf      	b.n	4c00 <__aeabi_dadd+0x498>
    4c60:	0018      	movs	r0, r3
    4c62:	4310      	orrs	r0, r2
    4c64:	d100      	bne.n	4c68 <__aeabi_dadd+0x500>
    4c66:	e603      	b.n	4870 <__aeabi_dadd+0x108>
    4c68:	1ab8      	subs	r0, r7, r2
    4c6a:	4684      	mov	ip, r0
    4c6c:	4567      	cmp	r7, ip
    4c6e:	41ad      	sbcs	r5, r5
    4c70:	1ae0      	subs	r0, r4, r3
    4c72:	426d      	negs	r5, r5
    4c74:	1b40      	subs	r0, r0, r5
    4c76:	0205      	lsls	r5, r0, #8
    4c78:	d400      	bmi.n	4c7c <__aeabi_dadd+0x514>
    4c7a:	e62c      	b.n	48d6 <__aeabi_dadd+0x16e>
    4c7c:	1bd7      	subs	r7, r2, r7
    4c7e:	42ba      	cmp	r2, r7
    4c80:	4192      	sbcs	r2, r2
    4c82:	1b1c      	subs	r4, r3, r4
    4c84:	4252      	negs	r2, r2
    4c86:	1aa4      	subs	r4, r4, r2
    4c88:	46d8      	mov	r8, fp
    4c8a:	e5f1      	b.n	4870 <__aeabi_dadd+0x108>
    4c8c:	0018      	movs	r0, r3
    4c8e:	4310      	orrs	r0, r2
    4c90:	d100      	bne.n	4c94 <__aeabi_dadd+0x52c>
    4c92:	e763      	b.n	4b5c <__aeabi_dadd+0x3f4>
    4c94:	08f8      	lsrs	r0, r7, #3
    4c96:	0767      	lsls	r7, r4, #29
    4c98:	4307      	orrs	r7, r0
    4c9a:	2080      	movs	r0, #128	; 0x80
    4c9c:	08e4      	lsrs	r4, r4, #3
    4c9e:	0300      	lsls	r0, r0, #12
    4ca0:	4204      	tst	r4, r0
    4ca2:	d008      	beq.n	4cb6 <__aeabi_dadd+0x54e>
    4ca4:	08dd      	lsrs	r5, r3, #3
    4ca6:	4205      	tst	r5, r0
    4ca8:	d105      	bne.n	4cb6 <__aeabi_dadd+0x54e>
    4caa:	08d2      	lsrs	r2, r2, #3
    4cac:	0759      	lsls	r1, r3, #29
    4cae:	4311      	orrs	r1, r2
    4cb0:	000f      	movs	r7, r1
    4cb2:	002c      	movs	r4, r5
    4cb4:	46d8      	mov	r8, fp
    4cb6:	0f7b      	lsrs	r3, r7, #29
    4cb8:	00e4      	lsls	r4, r4, #3
    4cba:	431c      	orrs	r4, r3
    4cbc:	00ff      	lsls	r7, r7, #3
    4cbe:	4e30      	ldr	r6, [pc, #192]	; (4d80 <__aeabi_dadd+0x618>)
    4cc0:	e5d6      	b.n	4870 <__aeabi_dadd+0x108>
    4cc2:	000c      	movs	r4, r1
    4cc4:	0017      	movs	r7, r2
    4cc6:	0006      	movs	r6, r0
    4cc8:	e5d2      	b.n	4870 <__aeabi_dadd+0x108>
    4cca:	2b00      	cmp	r3, #0
    4ccc:	d038      	beq.n	4d40 <__aeabi_dadd+0x5d8>
    4cce:	000b      	movs	r3, r1
    4cd0:	4313      	orrs	r3, r2
    4cd2:	d100      	bne.n	4cd6 <__aeabi_dadd+0x56e>
    4cd4:	e742      	b.n	4b5c <__aeabi_dadd+0x3f4>
    4cd6:	08f8      	lsrs	r0, r7, #3
    4cd8:	0767      	lsls	r7, r4, #29
    4cda:	4307      	orrs	r7, r0
    4cdc:	2080      	movs	r0, #128	; 0x80
    4cde:	08e4      	lsrs	r4, r4, #3
    4ce0:	0300      	lsls	r0, r0, #12
    4ce2:	4204      	tst	r4, r0
    4ce4:	d0e7      	beq.n	4cb6 <__aeabi_dadd+0x54e>
    4ce6:	08cb      	lsrs	r3, r1, #3
    4ce8:	4203      	tst	r3, r0
    4cea:	d1e4      	bne.n	4cb6 <__aeabi_dadd+0x54e>
    4cec:	08d2      	lsrs	r2, r2, #3
    4cee:	0749      	lsls	r1, r1, #29
    4cf0:	4311      	orrs	r1, r2
    4cf2:	000f      	movs	r7, r1
    4cf4:	001c      	movs	r4, r3
    4cf6:	e7de      	b.n	4cb6 <__aeabi_dadd+0x54e>
    4cf8:	2700      	movs	r7, #0
    4cfa:	2400      	movs	r4, #0
    4cfc:	e5d5      	b.n	48aa <__aeabi_dadd+0x142>
    4cfe:	2100      	movs	r1, #0
    4d00:	e76b      	b.n	4bda <__aeabi_dadd+0x472>
    4d02:	2500      	movs	r5, #0
    4d04:	2700      	movs	r7, #0
    4d06:	e5f3      	b.n	48f0 <__aeabi_dadd+0x188>
    4d08:	464e      	mov	r6, r9
    4d0a:	0025      	movs	r5, r4
    4d0c:	3e20      	subs	r6, #32
    4d0e:	40f5      	lsrs	r5, r6
    4d10:	464b      	mov	r3, r9
    4d12:	002e      	movs	r6, r5
    4d14:	2b20      	cmp	r3, #32
    4d16:	d02d      	beq.n	4d74 <__aeabi_dadd+0x60c>
    4d18:	2540      	movs	r5, #64	; 0x40
    4d1a:	1aed      	subs	r5, r5, r3
    4d1c:	40ac      	lsls	r4, r5
    4d1e:	4327      	orrs	r7, r4
    4d20:	1e7c      	subs	r4, r7, #1
    4d22:	41a7      	sbcs	r7, r4
    4d24:	2400      	movs	r4, #0
    4d26:	4337      	orrs	r7, r6
    4d28:	e6c9      	b.n	4abe <__aeabi_dadd+0x356>
    4d2a:	2480      	movs	r4, #128	; 0x80
    4d2c:	2500      	movs	r5, #0
    4d2e:	0324      	lsls	r4, r4, #12
    4d30:	4e13      	ldr	r6, [pc, #76]	; (4d80 <__aeabi_dadd+0x618>)
    4d32:	2700      	movs	r7, #0
    4d34:	e5dc      	b.n	48f0 <__aeabi_dadd+0x188>
    4d36:	4327      	orrs	r7, r4
    4d38:	1e7c      	subs	r4, r7, #1
    4d3a:	41a7      	sbcs	r7, r4
    4d3c:	2400      	movs	r4, #0
    4d3e:	e779      	b.n	4c34 <__aeabi_dadd+0x4cc>
    4d40:	000c      	movs	r4, r1
    4d42:	0017      	movs	r7, r2
    4d44:	4e0e      	ldr	r6, [pc, #56]	; (4d80 <__aeabi_dadd+0x618>)
    4d46:	e593      	b.n	4870 <__aeabi_dadd+0x108>
    4d48:	000c      	movs	r4, r1
    4d4a:	0017      	movs	r7, r2
    4d4c:	e590      	b.n	4870 <__aeabi_dadd+0x108>
    4d4e:	4656      	mov	r6, sl
    4d50:	0023      	movs	r3, r4
    4d52:	3e20      	subs	r6, #32
    4d54:	40f3      	lsrs	r3, r6
    4d56:	4699      	mov	r9, r3
    4d58:	4653      	mov	r3, sl
    4d5a:	2b20      	cmp	r3, #32
    4d5c:	d00e      	beq.n	4d7c <__aeabi_dadd+0x614>
    4d5e:	2340      	movs	r3, #64	; 0x40
    4d60:	4656      	mov	r6, sl
    4d62:	1b9b      	subs	r3, r3, r6
    4d64:	409c      	lsls	r4, r3
    4d66:	4327      	orrs	r7, r4
    4d68:	1e7c      	subs	r4, r7, #1
    4d6a:	41a7      	sbcs	r7, r4
    4d6c:	464b      	mov	r3, r9
    4d6e:	2400      	movs	r4, #0
    4d70:	431f      	orrs	r7, r3
    4d72:	e75f      	b.n	4c34 <__aeabi_dadd+0x4cc>
    4d74:	2400      	movs	r4, #0
    4d76:	e7d2      	b.n	4d1e <__aeabi_dadd+0x5b6>
    4d78:	0017      	movs	r7, r2
    4d7a:	e5b2      	b.n	48e2 <__aeabi_dadd+0x17a>
    4d7c:	2400      	movs	r4, #0
    4d7e:	e7f2      	b.n	4d66 <__aeabi_dadd+0x5fe>
    4d80:	000007ff 	.word	0x000007ff
    4d84:	ff7fffff 	.word	0xff7fffff

00004d88 <__aeabi_ddiv>:
    4d88:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d8a:	4657      	mov	r7, sl
    4d8c:	4645      	mov	r5, r8
    4d8e:	46de      	mov	lr, fp
    4d90:	464e      	mov	r6, r9
    4d92:	b5e0      	push	{r5, r6, r7, lr}
    4d94:	004c      	lsls	r4, r1, #1
    4d96:	030e      	lsls	r6, r1, #12
    4d98:	b087      	sub	sp, #28
    4d9a:	4683      	mov	fp, r0
    4d9c:	4692      	mov	sl, r2
    4d9e:	001d      	movs	r5, r3
    4da0:	4680      	mov	r8, r0
    4da2:	0b36      	lsrs	r6, r6, #12
    4da4:	0d64      	lsrs	r4, r4, #21
    4da6:	0fcf      	lsrs	r7, r1, #31
    4da8:	2c00      	cmp	r4, #0
    4daa:	d04f      	beq.n	4e4c <__aeabi_ddiv+0xc4>
    4dac:	4b6f      	ldr	r3, [pc, #444]	; (4f6c <__aeabi_ddiv+0x1e4>)
    4dae:	429c      	cmp	r4, r3
    4db0:	d035      	beq.n	4e1e <__aeabi_ddiv+0x96>
    4db2:	2380      	movs	r3, #128	; 0x80
    4db4:	0f42      	lsrs	r2, r0, #29
    4db6:	041b      	lsls	r3, r3, #16
    4db8:	00f6      	lsls	r6, r6, #3
    4dba:	4313      	orrs	r3, r2
    4dbc:	4333      	orrs	r3, r6
    4dbe:	4699      	mov	r9, r3
    4dc0:	00c3      	lsls	r3, r0, #3
    4dc2:	4698      	mov	r8, r3
    4dc4:	4b6a      	ldr	r3, [pc, #424]	; (4f70 <__aeabi_ddiv+0x1e8>)
    4dc6:	2600      	movs	r6, #0
    4dc8:	469c      	mov	ip, r3
    4dca:	2300      	movs	r3, #0
    4dcc:	4464      	add	r4, ip
    4dce:	9303      	str	r3, [sp, #12]
    4dd0:	032b      	lsls	r3, r5, #12
    4dd2:	0b1b      	lsrs	r3, r3, #12
    4dd4:	469b      	mov	fp, r3
    4dd6:	006b      	lsls	r3, r5, #1
    4dd8:	0fed      	lsrs	r5, r5, #31
    4dda:	4650      	mov	r0, sl
    4ddc:	0d5b      	lsrs	r3, r3, #21
    4dde:	9501      	str	r5, [sp, #4]
    4de0:	d05e      	beq.n	4ea0 <__aeabi_ddiv+0x118>
    4de2:	4a62      	ldr	r2, [pc, #392]	; (4f6c <__aeabi_ddiv+0x1e4>)
    4de4:	4293      	cmp	r3, r2
    4de6:	d053      	beq.n	4e90 <__aeabi_ddiv+0x108>
    4de8:	465a      	mov	r2, fp
    4dea:	00d1      	lsls	r1, r2, #3
    4dec:	2280      	movs	r2, #128	; 0x80
    4dee:	0f40      	lsrs	r0, r0, #29
    4df0:	0412      	lsls	r2, r2, #16
    4df2:	4302      	orrs	r2, r0
    4df4:	430a      	orrs	r2, r1
    4df6:	4693      	mov	fp, r2
    4df8:	4652      	mov	r2, sl
    4dfa:	00d1      	lsls	r1, r2, #3
    4dfc:	4a5c      	ldr	r2, [pc, #368]	; (4f70 <__aeabi_ddiv+0x1e8>)
    4dfe:	4694      	mov	ip, r2
    4e00:	2200      	movs	r2, #0
    4e02:	4463      	add	r3, ip
    4e04:	0038      	movs	r0, r7
    4e06:	4068      	eors	r0, r5
    4e08:	4684      	mov	ip, r0
    4e0a:	9002      	str	r0, [sp, #8]
    4e0c:	1ae4      	subs	r4, r4, r3
    4e0e:	4316      	orrs	r6, r2
    4e10:	2e0f      	cmp	r6, #15
    4e12:	d900      	bls.n	4e16 <__aeabi_ddiv+0x8e>
    4e14:	e0b4      	b.n	4f80 <__aeabi_ddiv+0x1f8>
    4e16:	4b57      	ldr	r3, [pc, #348]	; (4f74 <__aeabi_ddiv+0x1ec>)
    4e18:	00b6      	lsls	r6, r6, #2
    4e1a:	599b      	ldr	r3, [r3, r6]
    4e1c:	469f      	mov	pc, r3
    4e1e:	0003      	movs	r3, r0
    4e20:	4333      	orrs	r3, r6
    4e22:	4699      	mov	r9, r3
    4e24:	d16c      	bne.n	4f00 <__aeabi_ddiv+0x178>
    4e26:	2300      	movs	r3, #0
    4e28:	4698      	mov	r8, r3
    4e2a:	3302      	adds	r3, #2
    4e2c:	2608      	movs	r6, #8
    4e2e:	9303      	str	r3, [sp, #12]
    4e30:	e7ce      	b.n	4dd0 <__aeabi_ddiv+0x48>
    4e32:	46cb      	mov	fp, r9
    4e34:	4641      	mov	r1, r8
    4e36:	9a03      	ldr	r2, [sp, #12]
    4e38:	9701      	str	r7, [sp, #4]
    4e3a:	2a02      	cmp	r2, #2
    4e3c:	d165      	bne.n	4f0a <__aeabi_ddiv+0x182>
    4e3e:	9b01      	ldr	r3, [sp, #4]
    4e40:	4c4a      	ldr	r4, [pc, #296]	; (4f6c <__aeabi_ddiv+0x1e4>)
    4e42:	469c      	mov	ip, r3
    4e44:	2300      	movs	r3, #0
    4e46:	2200      	movs	r2, #0
    4e48:	4698      	mov	r8, r3
    4e4a:	e06b      	b.n	4f24 <__aeabi_ddiv+0x19c>
    4e4c:	0003      	movs	r3, r0
    4e4e:	4333      	orrs	r3, r6
    4e50:	4699      	mov	r9, r3
    4e52:	d04e      	beq.n	4ef2 <__aeabi_ddiv+0x16a>
    4e54:	2e00      	cmp	r6, #0
    4e56:	d100      	bne.n	4e5a <__aeabi_ddiv+0xd2>
    4e58:	e1bc      	b.n	51d4 <__aeabi_ddiv+0x44c>
    4e5a:	0030      	movs	r0, r6
    4e5c:	f001 f8ca 	bl	5ff4 <__clzsi2>
    4e60:	0003      	movs	r3, r0
    4e62:	3b0b      	subs	r3, #11
    4e64:	2b1c      	cmp	r3, #28
    4e66:	dd00      	ble.n	4e6a <__aeabi_ddiv+0xe2>
    4e68:	e1ac      	b.n	51c4 <__aeabi_ddiv+0x43c>
    4e6a:	221d      	movs	r2, #29
    4e6c:	1ad3      	subs	r3, r2, r3
    4e6e:	465a      	mov	r2, fp
    4e70:	0001      	movs	r1, r0
    4e72:	40da      	lsrs	r2, r3
    4e74:	3908      	subs	r1, #8
    4e76:	408e      	lsls	r6, r1
    4e78:	0013      	movs	r3, r2
    4e7a:	4333      	orrs	r3, r6
    4e7c:	4699      	mov	r9, r3
    4e7e:	465b      	mov	r3, fp
    4e80:	408b      	lsls	r3, r1
    4e82:	4698      	mov	r8, r3
    4e84:	2300      	movs	r3, #0
    4e86:	4c3c      	ldr	r4, [pc, #240]	; (4f78 <__aeabi_ddiv+0x1f0>)
    4e88:	2600      	movs	r6, #0
    4e8a:	1a24      	subs	r4, r4, r0
    4e8c:	9303      	str	r3, [sp, #12]
    4e8e:	e79f      	b.n	4dd0 <__aeabi_ddiv+0x48>
    4e90:	4651      	mov	r1, sl
    4e92:	465a      	mov	r2, fp
    4e94:	4311      	orrs	r1, r2
    4e96:	d129      	bne.n	4eec <__aeabi_ddiv+0x164>
    4e98:	2200      	movs	r2, #0
    4e9a:	4693      	mov	fp, r2
    4e9c:	3202      	adds	r2, #2
    4e9e:	e7b1      	b.n	4e04 <__aeabi_ddiv+0x7c>
    4ea0:	4659      	mov	r1, fp
    4ea2:	4301      	orrs	r1, r0
    4ea4:	d01e      	beq.n	4ee4 <__aeabi_ddiv+0x15c>
    4ea6:	465b      	mov	r3, fp
    4ea8:	2b00      	cmp	r3, #0
    4eaa:	d100      	bne.n	4eae <__aeabi_ddiv+0x126>
    4eac:	e19e      	b.n	51ec <__aeabi_ddiv+0x464>
    4eae:	4658      	mov	r0, fp
    4eb0:	f001 f8a0 	bl	5ff4 <__clzsi2>
    4eb4:	0003      	movs	r3, r0
    4eb6:	3b0b      	subs	r3, #11
    4eb8:	2b1c      	cmp	r3, #28
    4eba:	dd00      	ble.n	4ebe <__aeabi_ddiv+0x136>
    4ebc:	e18f      	b.n	51de <__aeabi_ddiv+0x456>
    4ebe:	0002      	movs	r2, r0
    4ec0:	4659      	mov	r1, fp
    4ec2:	3a08      	subs	r2, #8
    4ec4:	4091      	lsls	r1, r2
    4ec6:	468b      	mov	fp, r1
    4ec8:	211d      	movs	r1, #29
    4eca:	1acb      	subs	r3, r1, r3
    4ecc:	4651      	mov	r1, sl
    4ece:	40d9      	lsrs	r1, r3
    4ed0:	000b      	movs	r3, r1
    4ed2:	4659      	mov	r1, fp
    4ed4:	430b      	orrs	r3, r1
    4ed6:	4651      	mov	r1, sl
    4ed8:	469b      	mov	fp, r3
    4eda:	4091      	lsls	r1, r2
    4edc:	4b26      	ldr	r3, [pc, #152]	; (4f78 <__aeabi_ddiv+0x1f0>)
    4ede:	2200      	movs	r2, #0
    4ee0:	1a1b      	subs	r3, r3, r0
    4ee2:	e78f      	b.n	4e04 <__aeabi_ddiv+0x7c>
    4ee4:	2300      	movs	r3, #0
    4ee6:	2201      	movs	r2, #1
    4ee8:	469b      	mov	fp, r3
    4eea:	e78b      	b.n	4e04 <__aeabi_ddiv+0x7c>
    4eec:	4651      	mov	r1, sl
    4eee:	2203      	movs	r2, #3
    4ef0:	e788      	b.n	4e04 <__aeabi_ddiv+0x7c>
    4ef2:	2300      	movs	r3, #0
    4ef4:	4698      	mov	r8, r3
    4ef6:	3301      	adds	r3, #1
    4ef8:	2604      	movs	r6, #4
    4efa:	2400      	movs	r4, #0
    4efc:	9303      	str	r3, [sp, #12]
    4efe:	e767      	b.n	4dd0 <__aeabi_ddiv+0x48>
    4f00:	2303      	movs	r3, #3
    4f02:	46b1      	mov	r9, r6
    4f04:	9303      	str	r3, [sp, #12]
    4f06:	260c      	movs	r6, #12
    4f08:	e762      	b.n	4dd0 <__aeabi_ddiv+0x48>
    4f0a:	2a03      	cmp	r2, #3
    4f0c:	d100      	bne.n	4f10 <__aeabi_ddiv+0x188>
    4f0e:	e25c      	b.n	53ca <__aeabi_ddiv+0x642>
    4f10:	9b01      	ldr	r3, [sp, #4]
    4f12:	2a01      	cmp	r2, #1
    4f14:	d000      	beq.n	4f18 <__aeabi_ddiv+0x190>
    4f16:	e1e4      	b.n	52e2 <__aeabi_ddiv+0x55a>
    4f18:	4013      	ands	r3, r2
    4f1a:	469c      	mov	ip, r3
    4f1c:	2300      	movs	r3, #0
    4f1e:	2400      	movs	r4, #0
    4f20:	2200      	movs	r2, #0
    4f22:	4698      	mov	r8, r3
    4f24:	2100      	movs	r1, #0
    4f26:	0312      	lsls	r2, r2, #12
    4f28:	0b13      	lsrs	r3, r2, #12
    4f2a:	0d0a      	lsrs	r2, r1, #20
    4f2c:	0512      	lsls	r2, r2, #20
    4f2e:	431a      	orrs	r2, r3
    4f30:	0523      	lsls	r3, r4, #20
    4f32:	4c12      	ldr	r4, [pc, #72]	; (4f7c <__aeabi_ddiv+0x1f4>)
    4f34:	4640      	mov	r0, r8
    4f36:	4022      	ands	r2, r4
    4f38:	4313      	orrs	r3, r2
    4f3a:	4662      	mov	r2, ip
    4f3c:	005b      	lsls	r3, r3, #1
    4f3e:	07d2      	lsls	r2, r2, #31
    4f40:	085b      	lsrs	r3, r3, #1
    4f42:	4313      	orrs	r3, r2
    4f44:	0019      	movs	r1, r3
    4f46:	b007      	add	sp, #28
    4f48:	bc3c      	pop	{r2, r3, r4, r5}
    4f4a:	4690      	mov	r8, r2
    4f4c:	4699      	mov	r9, r3
    4f4e:	46a2      	mov	sl, r4
    4f50:	46ab      	mov	fp, r5
    4f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f54:	2300      	movs	r3, #0
    4f56:	2280      	movs	r2, #128	; 0x80
    4f58:	469c      	mov	ip, r3
    4f5a:	0312      	lsls	r2, r2, #12
    4f5c:	4698      	mov	r8, r3
    4f5e:	4c03      	ldr	r4, [pc, #12]	; (4f6c <__aeabi_ddiv+0x1e4>)
    4f60:	e7e0      	b.n	4f24 <__aeabi_ddiv+0x19c>
    4f62:	2300      	movs	r3, #0
    4f64:	4c01      	ldr	r4, [pc, #4]	; (4f6c <__aeabi_ddiv+0x1e4>)
    4f66:	2200      	movs	r2, #0
    4f68:	4698      	mov	r8, r3
    4f6a:	e7db      	b.n	4f24 <__aeabi_ddiv+0x19c>
    4f6c:	000007ff 	.word	0x000007ff
    4f70:	fffffc01 	.word	0xfffffc01
    4f74:	00006a3c 	.word	0x00006a3c
    4f78:	fffffc0d 	.word	0xfffffc0d
    4f7c:	800fffff 	.word	0x800fffff
    4f80:	45d9      	cmp	r9, fp
    4f82:	d900      	bls.n	4f86 <__aeabi_ddiv+0x1fe>
    4f84:	e139      	b.n	51fa <__aeabi_ddiv+0x472>
    4f86:	d100      	bne.n	4f8a <__aeabi_ddiv+0x202>
    4f88:	e134      	b.n	51f4 <__aeabi_ddiv+0x46c>
    4f8a:	2300      	movs	r3, #0
    4f8c:	4646      	mov	r6, r8
    4f8e:	464d      	mov	r5, r9
    4f90:	469a      	mov	sl, r3
    4f92:	3c01      	subs	r4, #1
    4f94:	465b      	mov	r3, fp
    4f96:	0e0a      	lsrs	r2, r1, #24
    4f98:	021b      	lsls	r3, r3, #8
    4f9a:	431a      	orrs	r2, r3
    4f9c:	020b      	lsls	r3, r1, #8
    4f9e:	0c17      	lsrs	r7, r2, #16
    4fa0:	9303      	str	r3, [sp, #12]
    4fa2:	0413      	lsls	r3, r2, #16
    4fa4:	0c1b      	lsrs	r3, r3, #16
    4fa6:	0039      	movs	r1, r7
    4fa8:	0028      	movs	r0, r5
    4faa:	4690      	mov	r8, r2
    4fac:	9301      	str	r3, [sp, #4]
    4fae:	f7ff fa3b 	bl	4428 <__udivsi3>
    4fb2:	0002      	movs	r2, r0
    4fb4:	9b01      	ldr	r3, [sp, #4]
    4fb6:	4683      	mov	fp, r0
    4fb8:	435a      	muls	r2, r3
    4fba:	0028      	movs	r0, r5
    4fbc:	0039      	movs	r1, r7
    4fbe:	4691      	mov	r9, r2
    4fc0:	f7ff fab8 	bl	4534 <__aeabi_uidivmod>
    4fc4:	0c35      	lsrs	r5, r6, #16
    4fc6:	0409      	lsls	r1, r1, #16
    4fc8:	430d      	orrs	r5, r1
    4fca:	45a9      	cmp	r9, r5
    4fcc:	d90d      	bls.n	4fea <__aeabi_ddiv+0x262>
    4fce:	465b      	mov	r3, fp
    4fd0:	4445      	add	r5, r8
    4fd2:	3b01      	subs	r3, #1
    4fd4:	45a8      	cmp	r8, r5
    4fd6:	d900      	bls.n	4fda <__aeabi_ddiv+0x252>
    4fd8:	e13a      	b.n	5250 <__aeabi_ddiv+0x4c8>
    4fda:	45a9      	cmp	r9, r5
    4fdc:	d800      	bhi.n	4fe0 <__aeabi_ddiv+0x258>
    4fde:	e137      	b.n	5250 <__aeabi_ddiv+0x4c8>
    4fe0:	2302      	movs	r3, #2
    4fe2:	425b      	negs	r3, r3
    4fe4:	469c      	mov	ip, r3
    4fe6:	4445      	add	r5, r8
    4fe8:	44e3      	add	fp, ip
    4fea:	464b      	mov	r3, r9
    4fec:	1aeb      	subs	r3, r5, r3
    4fee:	0039      	movs	r1, r7
    4ff0:	0018      	movs	r0, r3
    4ff2:	9304      	str	r3, [sp, #16]
    4ff4:	f7ff fa18 	bl	4428 <__udivsi3>
    4ff8:	9b01      	ldr	r3, [sp, #4]
    4ffa:	0005      	movs	r5, r0
    4ffc:	4343      	muls	r3, r0
    4ffe:	0039      	movs	r1, r7
    5000:	9804      	ldr	r0, [sp, #16]
    5002:	4699      	mov	r9, r3
    5004:	f7ff fa96 	bl	4534 <__aeabi_uidivmod>
    5008:	0433      	lsls	r3, r6, #16
    500a:	0409      	lsls	r1, r1, #16
    500c:	0c1b      	lsrs	r3, r3, #16
    500e:	430b      	orrs	r3, r1
    5010:	4599      	cmp	r9, r3
    5012:	d909      	bls.n	5028 <__aeabi_ddiv+0x2a0>
    5014:	4443      	add	r3, r8
    5016:	1e6a      	subs	r2, r5, #1
    5018:	4598      	cmp	r8, r3
    501a:	d900      	bls.n	501e <__aeabi_ddiv+0x296>
    501c:	e11a      	b.n	5254 <__aeabi_ddiv+0x4cc>
    501e:	4599      	cmp	r9, r3
    5020:	d800      	bhi.n	5024 <__aeabi_ddiv+0x29c>
    5022:	e117      	b.n	5254 <__aeabi_ddiv+0x4cc>
    5024:	3d02      	subs	r5, #2
    5026:	4443      	add	r3, r8
    5028:	464a      	mov	r2, r9
    502a:	1a9b      	subs	r3, r3, r2
    502c:	465a      	mov	r2, fp
    502e:	0412      	lsls	r2, r2, #16
    5030:	432a      	orrs	r2, r5
    5032:	9903      	ldr	r1, [sp, #12]
    5034:	4693      	mov	fp, r2
    5036:	0c10      	lsrs	r0, r2, #16
    5038:	0c0a      	lsrs	r2, r1, #16
    503a:	4691      	mov	r9, r2
    503c:	0409      	lsls	r1, r1, #16
    503e:	465a      	mov	r2, fp
    5040:	0c09      	lsrs	r1, r1, #16
    5042:	464e      	mov	r6, r9
    5044:	000d      	movs	r5, r1
    5046:	0412      	lsls	r2, r2, #16
    5048:	0c12      	lsrs	r2, r2, #16
    504a:	4345      	muls	r5, r0
    504c:	9105      	str	r1, [sp, #20]
    504e:	4351      	muls	r1, r2
    5050:	4372      	muls	r2, r6
    5052:	4370      	muls	r0, r6
    5054:	1952      	adds	r2, r2, r5
    5056:	0c0e      	lsrs	r6, r1, #16
    5058:	18b2      	adds	r2, r6, r2
    505a:	4295      	cmp	r5, r2
    505c:	d903      	bls.n	5066 <__aeabi_ddiv+0x2de>
    505e:	2580      	movs	r5, #128	; 0x80
    5060:	026d      	lsls	r5, r5, #9
    5062:	46ac      	mov	ip, r5
    5064:	4460      	add	r0, ip
    5066:	0c15      	lsrs	r5, r2, #16
    5068:	0409      	lsls	r1, r1, #16
    506a:	0412      	lsls	r2, r2, #16
    506c:	0c09      	lsrs	r1, r1, #16
    506e:	1828      	adds	r0, r5, r0
    5070:	1852      	adds	r2, r2, r1
    5072:	4283      	cmp	r3, r0
    5074:	d200      	bcs.n	5078 <__aeabi_ddiv+0x2f0>
    5076:	e0ce      	b.n	5216 <__aeabi_ddiv+0x48e>
    5078:	d100      	bne.n	507c <__aeabi_ddiv+0x2f4>
    507a:	e0c8      	b.n	520e <__aeabi_ddiv+0x486>
    507c:	1a1d      	subs	r5, r3, r0
    507e:	4653      	mov	r3, sl
    5080:	1a9e      	subs	r6, r3, r2
    5082:	45b2      	cmp	sl, r6
    5084:	4192      	sbcs	r2, r2
    5086:	4252      	negs	r2, r2
    5088:	1aab      	subs	r3, r5, r2
    508a:	469a      	mov	sl, r3
    508c:	4598      	cmp	r8, r3
    508e:	d100      	bne.n	5092 <__aeabi_ddiv+0x30a>
    5090:	e117      	b.n	52c2 <__aeabi_ddiv+0x53a>
    5092:	0039      	movs	r1, r7
    5094:	0018      	movs	r0, r3
    5096:	f7ff f9c7 	bl	4428 <__udivsi3>
    509a:	9b01      	ldr	r3, [sp, #4]
    509c:	0005      	movs	r5, r0
    509e:	4343      	muls	r3, r0
    50a0:	0039      	movs	r1, r7
    50a2:	4650      	mov	r0, sl
    50a4:	9304      	str	r3, [sp, #16]
    50a6:	f7ff fa45 	bl	4534 <__aeabi_uidivmod>
    50aa:	9804      	ldr	r0, [sp, #16]
    50ac:	040b      	lsls	r3, r1, #16
    50ae:	0c31      	lsrs	r1, r6, #16
    50b0:	4319      	orrs	r1, r3
    50b2:	4288      	cmp	r0, r1
    50b4:	d909      	bls.n	50ca <__aeabi_ddiv+0x342>
    50b6:	4441      	add	r1, r8
    50b8:	1e6b      	subs	r3, r5, #1
    50ba:	4588      	cmp	r8, r1
    50bc:	d900      	bls.n	50c0 <__aeabi_ddiv+0x338>
    50be:	e107      	b.n	52d0 <__aeabi_ddiv+0x548>
    50c0:	4288      	cmp	r0, r1
    50c2:	d800      	bhi.n	50c6 <__aeabi_ddiv+0x33e>
    50c4:	e104      	b.n	52d0 <__aeabi_ddiv+0x548>
    50c6:	3d02      	subs	r5, #2
    50c8:	4441      	add	r1, r8
    50ca:	9b04      	ldr	r3, [sp, #16]
    50cc:	1acb      	subs	r3, r1, r3
    50ce:	0018      	movs	r0, r3
    50d0:	0039      	movs	r1, r7
    50d2:	9304      	str	r3, [sp, #16]
    50d4:	f7ff f9a8 	bl	4428 <__udivsi3>
    50d8:	9b01      	ldr	r3, [sp, #4]
    50da:	4682      	mov	sl, r0
    50dc:	4343      	muls	r3, r0
    50de:	0039      	movs	r1, r7
    50e0:	9804      	ldr	r0, [sp, #16]
    50e2:	9301      	str	r3, [sp, #4]
    50e4:	f7ff fa26 	bl	4534 <__aeabi_uidivmod>
    50e8:	9801      	ldr	r0, [sp, #4]
    50ea:	040b      	lsls	r3, r1, #16
    50ec:	0431      	lsls	r1, r6, #16
    50ee:	0c09      	lsrs	r1, r1, #16
    50f0:	4319      	orrs	r1, r3
    50f2:	4288      	cmp	r0, r1
    50f4:	d90d      	bls.n	5112 <__aeabi_ddiv+0x38a>
    50f6:	4653      	mov	r3, sl
    50f8:	4441      	add	r1, r8
    50fa:	3b01      	subs	r3, #1
    50fc:	4588      	cmp	r8, r1
    50fe:	d900      	bls.n	5102 <__aeabi_ddiv+0x37a>
    5100:	e0e8      	b.n	52d4 <__aeabi_ddiv+0x54c>
    5102:	4288      	cmp	r0, r1
    5104:	d800      	bhi.n	5108 <__aeabi_ddiv+0x380>
    5106:	e0e5      	b.n	52d4 <__aeabi_ddiv+0x54c>
    5108:	2302      	movs	r3, #2
    510a:	425b      	negs	r3, r3
    510c:	469c      	mov	ip, r3
    510e:	4441      	add	r1, r8
    5110:	44e2      	add	sl, ip
    5112:	9b01      	ldr	r3, [sp, #4]
    5114:	042d      	lsls	r5, r5, #16
    5116:	1ace      	subs	r6, r1, r3
    5118:	4651      	mov	r1, sl
    511a:	4329      	orrs	r1, r5
    511c:	9d05      	ldr	r5, [sp, #20]
    511e:	464f      	mov	r7, r9
    5120:	002a      	movs	r2, r5
    5122:	040b      	lsls	r3, r1, #16
    5124:	0c08      	lsrs	r0, r1, #16
    5126:	0c1b      	lsrs	r3, r3, #16
    5128:	435a      	muls	r2, r3
    512a:	4345      	muls	r5, r0
    512c:	437b      	muls	r3, r7
    512e:	4378      	muls	r0, r7
    5130:	195b      	adds	r3, r3, r5
    5132:	0c17      	lsrs	r7, r2, #16
    5134:	18fb      	adds	r3, r7, r3
    5136:	429d      	cmp	r5, r3
    5138:	d903      	bls.n	5142 <__aeabi_ddiv+0x3ba>
    513a:	2580      	movs	r5, #128	; 0x80
    513c:	026d      	lsls	r5, r5, #9
    513e:	46ac      	mov	ip, r5
    5140:	4460      	add	r0, ip
    5142:	0c1d      	lsrs	r5, r3, #16
    5144:	0412      	lsls	r2, r2, #16
    5146:	041b      	lsls	r3, r3, #16
    5148:	0c12      	lsrs	r2, r2, #16
    514a:	1828      	adds	r0, r5, r0
    514c:	189b      	adds	r3, r3, r2
    514e:	4286      	cmp	r6, r0
    5150:	d200      	bcs.n	5154 <__aeabi_ddiv+0x3cc>
    5152:	e093      	b.n	527c <__aeabi_ddiv+0x4f4>
    5154:	d100      	bne.n	5158 <__aeabi_ddiv+0x3d0>
    5156:	e08e      	b.n	5276 <__aeabi_ddiv+0x4ee>
    5158:	2301      	movs	r3, #1
    515a:	4319      	orrs	r1, r3
    515c:	4ba0      	ldr	r3, [pc, #640]	; (53e0 <__aeabi_ddiv+0x658>)
    515e:	18e3      	adds	r3, r4, r3
    5160:	2b00      	cmp	r3, #0
    5162:	dc00      	bgt.n	5166 <__aeabi_ddiv+0x3de>
    5164:	e099      	b.n	529a <__aeabi_ddiv+0x512>
    5166:	074a      	lsls	r2, r1, #29
    5168:	d000      	beq.n	516c <__aeabi_ddiv+0x3e4>
    516a:	e09e      	b.n	52aa <__aeabi_ddiv+0x522>
    516c:	465a      	mov	r2, fp
    516e:	01d2      	lsls	r2, r2, #7
    5170:	d506      	bpl.n	5180 <__aeabi_ddiv+0x3f8>
    5172:	465a      	mov	r2, fp
    5174:	4b9b      	ldr	r3, [pc, #620]	; (53e4 <__aeabi_ddiv+0x65c>)
    5176:	401a      	ands	r2, r3
    5178:	2380      	movs	r3, #128	; 0x80
    517a:	4693      	mov	fp, r2
    517c:	00db      	lsls	r3, r3, #3
    517e:	18e3      	adds	r3, r4, r3
    5180:	4a99      	ldr	r2, [pc, #612]	; (53e8 <__aeabi_ddiv+0x660>)
    5182:	4293      	cmp	r3, r2
    5184:	dd68      	ble.n	5258 <__aeabi_ddiv+0x4d0>
    5186:	2301      	movs	r3, #1
    5188:	9a02      	ldr	r2, [sp, #8]
    518a:	4c98      	ldr	r4, [pc, #608]	; (53ec <__aeabi_ddiv+0x664>)
    518c:	401a      	ands	r2, r3
    518e:	2300      	movs	r3, #0
    5190:	4694      	mov	ip, r2
    5192:	4698      	mov	r8, r3
    5194:	2200      	movs	r2, #0
    5196:	e6c5      	b.n	4f24 <__aeabi_ddiv+0x19c>
    5198:	2280      	movs	r2, #128	; 0x80
    519a:	464b      	mov	r3, r9
    519c:	0312      	lsls	r2, r2, #12
    519e:	4213      	tst	r3, r2
    51a0:	d00a      	beq.n	51b8 <__aeabi_ddiv+0x430>
    51a2:	465b      	mov	r3, fp
    51a4:	4213      	tst	r3, r2
    51a6:	d106      	bne.n	51b6 <__aeabi_ddiv+0x42e>
    51a8:	431a      	orrs	r2, r3
    51aa:	0312      	lsls	r2, r2, #12
    51ac:	0b12      	lsrs	r2, r2, #12
    51ae:	46ac      	mov	ip, r5
    51b0:	4688      	mov	r8, r1
    51b2:	4c8e      	ldr	r4, [pc, #568]	; (53ec <__aeabi_ddiv+0x664>)
    51b4:	e6b6      	b.n	4f24 <__aeabi_ddiv+0x19c>
    51b6:	464b      	mov	r3, r9
    51b8:	431a      	orrs	r2, r3
    51ba:	0312      	lsls	r2, r2, #12
    51bc:	0b12      	lsrs	r2, r2, #12
    51be:	46bc      	mov	ip, r7
    51c0:	4c8a      	ldr	r4, [pc, #552]	; (53ec <__aeabi_ddiv+0x664>)
    51c2:	e6af      	b.n	4f24 <__aeabi_ddiv+0x19c>
    51c4:	0003      	movs	r3, r0
    51c6:	465a      	mov	r2, fp
    51c8:	3b28      	subs	r3, #40	; 0x28
    51ca:	409a      	lsls	r2, r3
    51cc:	2300      	movs	r3, #0
    51ce:	4691      	mov	r9, r2
    51d0:	4698      	mov	r8, r3
    51d2:	e657      	b.n	4e84 <__aeabi_ddiv+0xfc>
    51d4:	4658      	mov	r0, fp
    51d6:	f000 ff0d 	bl	5ff4 <__clzsi2>
    51da:	3020      	adds	r0, #32
    51dc:	e640      	b.n	4e60 <__aeabi_ddiv+0xd8>
    51de:	0003      	movs	r3, r0
    51e0:	4652      	mov	r2, sl
    51e2:	3b28      	subs	r3, #40	; 0x28
    51e4:	409a      	lsls	r2, r3
    51e6:	2100      	movs	r1, #0
    51e8:	4693      	mov	fp, r2
    51ea:	e677      	b.n	4edc <__aeabi_ddiv+0x154>
    51ec:	f000 ff02 	bl	5ff4 <__clzsi2>
    51f0:	3020      	adds	r0, #32
    51f2:	e65f      	b.n	4eb4 <__aeabi_ddiv+0x12c>
    51f4:	4588      	cmp	r8, r1
    51f6:	d200      	bcs.n	51fa <__aeabi_ddiv+0x472>
    51f8:	e6c7      	b.n	4f8a <__aeabi_ddiv+0x202>
    51fa:	464b      	mov	r3, r9
    51fc:	07de      	lsls	r6, r3, #31
    51fe:	085d      	lsrs	r5, r3, #1
    5200:	4643      	mov	r3, r8
    5202:	085b      	lsrs	r3, r3, #1
    5204:	431e      	orrs	r6, r3
    5206:	4643      	mov	r3, r8
    5208:	07db      	lsls	r3, r3, #31
    520a:	469a      	mov	sl, r3
    520c:	e6c2      	b.n	4f94 <__aeabi_ddiv+0x20c>
    520e:	2500      	movs	r5, #0
    5210:	4592      	cmp	sl, r2
    5212:	d300      	bcc.n	5216 <__aeabi_ddiv+0x48e>
    5214:	e733      	b.n	507e <__aeabi_ddiv+0x2f6>
    5216:	9e03      	ldr	r6, [sp, #12]
    5218:	4659      	mov	r1, fp
    521a:	46b4      	mov	ip, r6
    521c:	44e2      	add	sl, ip
    521e:	45b2      	cmp	sl, r6
    5220:	41ad      	sbcs	r5, r5
    5222:	426d      	negs	r5, r5
    5224:	4445      	add	r5, r8
    5226:	18eb      	adds	r3, r5, r3
    5228:	3901      	subs	r1, #1
    522a:	4598      	cmp	r8, r3
    522c:	d207      	bcs.n	523e <__aeabi_ddiv+0x4b6>
    522e:	4298      	cmp	r0, r3
    5230:	d900      	bls.n	5234 <__aeabi_ddiv+0x4ac>
    5232:	e07f      	b.n	5334 <__aeabi_ddiv+0x5ac>
    5234:	d100      	bne.n	5238 <__aeabi_ddiv+0x4b0>
    5236:	e0bc      	b.n	53b2 <__aeabi_ddiv+0x62a>
    5238:	1a1d      	subs	r5, r3, r0
    523a:	468b      	mov	fp, r1
    523c:	e71f      	b.n	507e <__aeabi_ddiv+0x2f6>
    523e:	4598      	cmp	r8, r3
    5240:	d1fa      	bne.n	5238 <__aeabi_ddiv+0x4b0>
    5242:	9d03      	ldr	r5, [sp, #12]
    5244:	4555      	cmp	r5, sl
    5246:	d9f2      	bls.n	522e <__aeabi_ddiv+0x4a6>
    5248:	4643      	mov	r3, r8
    524a:	468b      	mov	fp, r1
    524c:	1a1d      	subs	r5, r3, r0
    524e:	e716      	b.n	507e <__aeabi_ddiv+0x2f6>
    5250:	469b      	mov	fp, r3
    5252:	e6ca      	b.n	4fea <__aeabi_ddiv+0x262>
    5254:	0015      	movs	r5, r2
    5256:	e6e7      	b.n	5028 <__aeabi_ddiv+0x2a0>
    5258:	465a      	mov	r2, fp
    525a:	08c9      	lsrs	r1, r1, #3
    525c:	0752      	lsls	r2, r2, #29
    525e:	430a      	orrs	r2, r1
    5260:	055b      	lsls	r3, r3, #21
    5262:	4690      	mov	r8, r2
    5264:	0d5c      	lsrs	r4, r3, #21
    5266:	465a      	mov	r2, fp
    5268:	2301      	movs	r3, #1
    526a:	9902      	ldr	r1, [sp, #8]
    526c:	0252      	lsls	r2, r2, #9
    526e:	4019      	ands	r1, r3
    5270:	0b12      	lsrs	r2, r2, #12
    5272:	468c      	mov	ip, r1
    5274:	e656      	b.n	4f24 <__aeabi_ddiv+0x19c>
    5276:	2b00      	cmp	r3, #0
    5278:	d100      	bne.n	527c <__aeabi_ddiv+0x4f4>
    527a:	e76f      	b.n	515c <__aeabi_ddiv+0x3d4>
    527c:	4446      	add	r6, r8
    527e:	1e4a      	subs	r2, r1, #1
    5280:	45b0      	cmp	r8, r6
    5282:	d929      	bls.n	52d8 <__aeabi_ddiv+0x550>
    5284:	0011      	movs	r1, r2
    5286:	4286      	cmp	r6, r0
    5288:	d000      	beq.n	528c <__aeabi_ddiv+0x504>
    528a:	e765      	b.n	5158 <__aeabi_ddiv+0x3d0>
    528c:	9a03      	ldr	r2, [sp, #12]
    528e:	4293      	cmp	r3, r2
    5290:	d000      	beq.n	5294 <__aeabi_ddiv+0x50c>
    5292:	e761      	b.n	5158 <__aeabi_ddiv+0x3d0>
    5294:	e762      	b.n	515c <__aeabi_ddiv+0x3d4>
    5296:	2101      	movs	r1, #1
    5298:	4249      	negs	r1, r1
    529a:	2001      	movs	r0, #1
    529c:	1ac2      	subs	r2, r0, r3
    529e:	2a38      	cmp	r2, #56	; 0x38
    52a0:	dd21      	ble.n	52e6 <__aeabi_ddiv+0x55e>
    52a2:	9b02      	ldr	r3, [sp, #8]
    52a4:	4003      	ands	r3, r0
    52a6:	469c      	mov	ip, r3
    52a8:	e638      	b.n	4f1c <__aeabi_ddiv+0x194>
    52aa:	220f      	movs	r2, #15
    52ac:	400a      	ands	r2, r1
    52ae:	2a04      	cmp	r2, #4
    52b0:	d100      	bne.n	52b4 <__aeabi_ddiv+0x52c>
    52b2:	e75b      	b.n	516c <__aeabi_ddiv+0x3e4>
    52b4:	000a      	movs	r2, r1
    52b6:	1d11      	adds	r1, r2, #4
    52b8:	4291      	cmp	r1, r2
    52ba:	4192      	sbcs	r2, r2
    52bc:	4252      	negs	r2, r2
    52be:	4493      	add	fp, r2
    52c0:	e754      	b.n	516c <__aeabi_ddiv+0x3e4>
    52c2:	4b47      	ldr	r3, [pc, #284]	; (53e0 <__aeabi_ddiv+0x658>)
    52c4:	18e3      	adds	r3, r4, r3
    52c6:	2b00      	cmp	r3, #0
    52c8:	dde5      	ble.n	5296 <__aeabi_ddiv+0x50e>
    52ca:	2201      	movs	r2, #1
    52cc:	4252      	negs	r2, r2
    52ce:	e7f2      	b.n	52b6 <__aeabi_ddiv+0x52e>
    52d0:	001d      	movs	r5, r3
    52d2:	e6fa      	b.n	50ca <__aeabi_ddiv+0x342>
    52d4:	469a      	mov	sl, r3
    52d6:	e71c      	b.n	5112 <__aeabi_ddiv+0x38a>
    52d8:	42b0      	cmp	r0, r6
    52da:	d839      	bhi.n	5350 <__aeabi_ddiv+0x5c8>
    52dc:	d06e      	beq.n	53bc <__aeabi_ddiv+0x634>
    52de:	0011      	movs	r1, r2
    52e0:	e73a      	b.n	5158 <__aeabi_ddiv+0x3d0>
    52e2:	9302      	str	r3, [sp, #8]
    52e4:	e73a      	b.n	515c <__aeabi_ddiv+0x3d4>
    52e6:	2a1f      	cmp	r2, #31
    52e8:	dc3c      	bgt.n	5364 <__aeabi_ddiv+0x5dc>
    52ea:	2320      	movs	r3, #32
    52ec:	1a9b      	subs	r3, r3, r2
    52ee:	000c      	movs	r4, r1
    52f0:	4658      	mov	r0, fp
    52f2:	4099      	lsls	r1, r3
    52f4:	4098      	lsls	r0, r3
    52f6:	1e4b      	subs	r3, r1, #1
    52f8:	4199      	sbcs	r1, r3
    52fa:	465b      	mov	r3, fp
    52fc:	40d4      	lsrs	r4, r2
    52fe:	40d3      	lsrs	r3, r2
    5300:	4320      	orrs	r0, r4
    5302:	4308      	orrs	r0, r1
    5304:	001a      	movs	r2, r3
    5306:	0743      	lsls	r3, r0, #29
    5308:	d009      	beq.n	531e <__aeabi_ddiv+0x596>
    530a:	230f      	movs	r3, #15
    530c:	4003      	ands	r3, r0
    530e:	2b04      	cmp	r3, #4
    5310:	d005      	beq.n	531e <__aeabi_ddiv+0x596>
    5312:	0001      	movs	r1, r0
    5314:	1d08      	adds	r0, r1, #4
    5316:	4288      	cmp	r0, r1
    5318:	419b      	sbcs	r3, r3
    531a:	425b      	negs	r3, r3
    531c:	18d2      	adds	r2, r2, r3
    531e:	0213      	lsls	r3, r2, #8
    5320:	d53a      	bpl.n	5398 <__aeabi_ddiv+0x610>
    5322:	2301      	movs	r3, #1
    5324:	9a02      	ldr	r2, [sp, #8]
    5326:	2401      	movs	r4, #1
    5328:	401a      	ands	r2, r3
    532a:	2300      	movs	r3, #0
    532c:	4694      	mov	ip, r2
    532e:	4698      	mov	r8, r3
    5330:	2200      	movs	r2, #0
    5332:	e5f7      	b.n	4f24 <__aeabi_ddiv+0x19c>
    5334:	2102      	movs	r1, #2
    5336:	4249      	negs	r1, r1
    5338:	468c      	mov	ip, r1
    533a:	9d03      	ldr	r5, [sp, #12]
    533c:	44e3      	add	fp, ip
    533e:	46ac      	mov	ip, r5
    5340:	44e2      	add	sl, ip
    5342:	45aa      	cmp	sl, r5
    5344:	41ad      	sbcs	r5, r5
    5346:	426d      	negs	r5, r5
    5348:	4445      	add	r5, r8
    534a:	18ed      	adds	r5, r5, r3
    534c:	1a2d      	subs	r5, r5, r0
    534e:	e696      	b.n	507e <__aeabi_ddiv+0x2f6>
    5350:	1e8a      	subs	r2, r1, #2
    5352:	9903      	ldr	r1, [sp, #12]
    5354:	004d      	lsls	r5, r1, #1
    5356:	428d      	cmp	r5, r1
    5358:	4189      	sbcs	r1, r1
    535a:	4249      	negs	r1, r1
    535c:	4441      	add	r1, r8
    535e:	1876      	adds	r6, r6, r1
    5360:	9503      	str	r5, [sp, #12]
    5362:	e78f      	b.n	5284 <__aeabi_ddiv+0x4fc>
    5364:	201f      	movs	r0, #31
    5366:	4240      	negs	r0, r0
    5368:	1ac3      	subs	r3, r0, r3
    536a:	4658      	mov	r0, fp
    536c:	40d8      	lsrs	r0, r3
    536e:	0003      	movs	r3, r0
    5370:	2a20      	cmp	r2, #32
    5372:	d028      	beq.n	53c6 <__aeabi_ddiv+0x63e>
    5374:	2040      	movs	r0, #64	; 0x40
    5376:	465d      	mov	r5, fp
    5378:	1a82      	subs	r2, r0, r2
    537a:	4095      	lsls	r5, r2
    537c:	4329      	orrs	r1, r5
    537e:	1e4a      	subs	r2, r1, #1
    5380:	4191      	sbcs	r1, r2
    5382:	4319      	orrs	r1, r3
    5384:	2307      	movs	r3, #7
    5386:	2200      	movs	r2, #0
    5388:	400b      	ands	r3, r1
    538a:	d009      	beq.n	53a0 <__aeabi_ddiv+0x618>
    538c:	230f      	movs	r3, #15
    538e:	2200      	movs	r2, #0
    5390:	400b      	ands	r3, r1
    5392:	0008      	movs	r0, r1
    5394:	2b04      	cmp	r3, #4
    5396:	d1bd      	bne.n	5314 <__aeabi_ddiv+0x58c>
    5398:	0001      	movs	r1, r0
    539a:	0753      	lsls	r3, r2, #29
    539c:	0252      	lsls	r2, r2, #9
    539e:	0b12      	lsrs	r2, r2, #12
    53a0:	08c9      	lsrs	r1, r1, #3
    53a2:	4319      	orrs	r1, r3
    53a4:	2301      	movs	r3, #1
    53a6:	4688      	mov	r8, r1
    53a8:	9902      	ldr	r1, [sp, #8]
    53aa:	2400      	movs	r4, #0
    53ac:	4019      	ands	r1, r3
    53ae:	468c      	mov	ip, r1
    53b0:	e5b8      	b.n	4f24 <__aeabi_ddiv+0x19c>
    53b2:	4552      	cmp	r2, sl
    53b4:	d8be      	bhi.n	5334 <__aeabi_ddiv+0x5ac>
    53b6:	468b      	mov	fp, r1
    53b8:	2500      	movs	r5, #0
    53ba:	e660      	b.n	507e <__aeabi_ddiv+0x2f6>
    53bc:	9d03      	ldr	r5, [sp, #12]
    53be:	429d      	cmp	r5, r3
    53c0:	d3c6      	bcc.n	5350 <__aeabi_ddiv+0x5c8>
    53c2:	0011      	movs	r1, r2
    53c4:	e762      	b.n	528c <__aeabi_ddiv+0x504>
    53c6:	2500      	movs	r5, #0
    53c8:	e7d8      	b.n	537c <__aeabi_ddiv+0x5f4>
    53ca:	2280      	movs	r2, #128	; 0x80
    53cc:	465b      	mov	r3, fp
    53ce:	0312      	lsls	r2, r2, #12
    53d0:	431a      	orrs	r2, r3
    53d2:	9b01      	ldr	r3, [sp, #4]
    53d4:	0312      	lsls	r2, r2, #12
    53d6:	0b12      	lsrs	r2, r2, #12
    53d8:	469c      	mov	ip, r3
    53da:	4688      	mov	r8, r1
    53dc:	4c03      	ldr	r4, [pc, #12]	; (53ec <__aeabi_ddiv+0x664>)
    53de:	e5a1      	b.n	4f24 <__aeabi_ddiv+0x19c>
    53e0:	000003ff 	.word	0x000003ff
    53e4:	feffffff 	.word	0xfeffffff
    53e8:	000007fe 	.word	0x000007fe
    53ec:	000007ff 	.word	0x000007ff

000053f0 <__aeabi_dmul>:
    53f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    53f2:	4657      	mov	r7, sl
    53f4:	4645      	mov	r5, r8
    53f6:	46de      	mov	lr, fp
    53f8:	464e      	mov	r6, r9
    53fa:	b5e0      	push	{r5, r6, r7, lr}
    53fc:	030c      	lsls	r4, r1, #12
    53fe:	4698      	mov	r8, r3
    5400:	004e      	lsls	r6, r1, #1
    5402:	0b23      	lsrs	r3, r4, #12
    5404:	b087      	sub	sp, #28
    5406:	0007      	movs	r7, r0
    5408:	4692      	mov	sl, r2
    540a:	469b      	mov	fp, r3
    540c:	0d76      	lsrs	r6, r6, #21
    540e:	0fcd      	lsrs	r5, r1, #31
    5410:	2e00      	cmp	r6, #0
    5412:	d06b      	beq.n	54ec <__aeabi_dmul+0xfc>
    5414:	4b6d      	ldr	r3, [pc, #436]	; (55cc <__aeabi_dmul+0x1dc>)
    5416:	429e      	cmp	r6, r3
    5418:	d035      	beq.n	5486 <__aeabi_dmul+0x96>
    541a:	2480      	movs	r4, #128	; 0x80
    541c:	465b      	mov	r3, fp
    541e:	0f42      	lsrs	r2, r0, #29
    5420:	0424      	lsls	r4, r4, #16
    5422:	00db      	lsls	r3, r3, #3
    5424:	4314      	orrs	r4, r2
    5426:	431c      	orrs	r4, r3
    5428:	00c3      	lsls	r3, r0, #3
    542a:	4699      	mov	r9, r3
    542c:	4b68      	ldr	r3, [pc, #416]	; (55d0 <__aeabi_dmul+0x1e0>)
    542e:	46a3      	mov	fp, r4
    5430:	469c      	mov	ip, r3
    5432:	2300      	movs	r3, #0
    5434:	2700      	movs	r7, #0
    5436:	4466      	add	r6, ip
    5438:	9302      	str	r3, [sp, #8]
    543a:	4643      	mov	r3, r8
    543c:	031c      	lsls	r4, r3, #12
    543e:	005a      	lsls	r2, r3, #1
    5440:	0fdb      	lsrs	r3, r3, #31
    5442:	4650      	mov	r0, sl
    5444:	0b24      	lsrs	r4, r4, #12
    5446:	0d52      	lsrs	r2, r2, #21
    5448:	4698      	mov	r8, r3
    544a:	d100      	bne.n	544e <__aeabi_dmul+0x5e>
    544c:	e076      	b.n	553c <__aeabi_dmul+0x14c>
    544e:	4b5f      	ldr	r3, [pc, #380]	; (55cc <__aeabi_dmul+0x1dc>)
    5450:	429a      	cmp	r2, r3
    5452:	d06d      	beq.n	5530 <__aeabi_dmul+0x140>
    5454:	2380      	movs	r3, #128	; 0x80
    5456:	0f41      	lsrs	r1, r0, #29
    5458:	041b      	lsls	r3, r3, #16
    545a:	430b      	orrs	r3, r1
    545c:	495c      	ldr	r1, [pc, #368]	; (55d0 <__aeabi_dmul+0x1e0>)
    545e:	00e4      	lsls	r4, r4, #3
    5460:	468c      	mov	ip, r1
    5462:	431c      	orrs	r4, r3
    5464:	00c3      	lsls	r3, r0, #3
    5466:	2000      	movs	r0, #0
    5468:	4462      	add	r2, ip
    546a:	4641      	mov	r1, r8
    546c:	18b6      	adds	r6, r6, r2
    546e:	4069      	eors	r1, r5
    5470:	1c72      	adds	r2, r6, #1
    5472:	9101      	str	r1, [sp, #4]
    5474:	4694      	mov	ip, r2
    5476:	4307      	orrs	r7, r0
    5478:	2f0f      	cmp	r7, #15
    547a:	d900      	bls.n	547e <__aeabi_dmul+0x8e>
    547c:	e0b0      	b.n	55e0 <__aeabi_dmul+0x1f0>
    547e:	4a55      	ldr	r2, [pc, #340]	; (55d4 <__aeabi_dmul+0x1e4>)
    5480:	00bf      	lsls	r7, r7, #2
    5482:	59d2      	ldr	r2, [r2, r7]
    5484:	4697      	mov	pc, r2
    5486:	465b      	mov	r3, fp
    5488:	4303      	orrs	r3, r0
    548a:	4699      	mov	r9, r3
    548c:	d000      	beq.n	5490 <__aeabi_dmul+0xa0>
    548e:	e087      	b.n	55a0 <__aeabi_dmul+0x1b0>
    5490:	2300      	movs	r3, #0
    5492:	469b      	mov	fp, r3
    5494:	3302      	adds	r3, #2
    5496:	2708      	movs	r7, #8
    5498:	9302      	str	r3, [sp, #8]
    549a:	e7ce      	b.n	543a <__aeabi_dmul+0x4a>
    549c:	4642      	mov	r2, r8
    549e:	9201      	str	r2, [sp, #4]
    54a0:	2802      	cmp	r0, #2
    54a2:	d067      	beq.n	5574 <__aeabi_dmul+0x184>
    54a4:	2803      	cmp	r0, #3
    54a6:	d100      	bne.n	54aa <__aeabi_dmul+0xba>
    54a8:	e20e      	b.n	58c8 <__aeabi_dmul+0x4d8>
    54aa:	2801      	cmp	r0, #1
    54ac:	d000      	beq.n	54b0 <__aeabi_dmul+0xc0>
    54ae:	e162      	b.n	5776 <__aeabi_dmul+0x386>
    54b0:	2300      	movs	r3, #0
    54b2:	2400      	movs	r4, #0
    54b4:	2200      	movs	r2, #0
    54b6:	4699      	mov	r9, r3
    54b8:	9901      	ldr	r1, [sp, #4]
    54ba:	4001      	ands	r1, r0
    54bc:	b2cd      	uxtb	r5, r1
    54be:	2100      	movs	r1, #0
    54c0:	0312      	lsls	r2, r2, #12
    54c2:	0d0b      	lsrs	r3, r1, #20
    54c4:	0b12      	lsrs	r2, r2, #12
    54c6:	051b      	lsls	r3, r3, #20
    54c8:	4313      	orrs	r3, r2
    54ca:	4a43      	ldr	r2, [pc, #268]	; (55d8 <__aeabi_dmul+0x1e8>)
    54cc:	0524      	lsls	r4, r4, #20
    54ce:	4013      	ands	r3, r2
    54d0:	431c      	orrs	r4, r3
    54d2:	0064      	lsls	r4, r4, #1
    54d4:	07ed      	lsls	r5, r5, #31
    54d6:	0864      	lsrs	r4, r4, #1
    54d8:	432c      	orrs	r4, r5
    54da:	4648      	mov	r0, r9
    54dc:	0021      	movs	r1, r4
    54de:	b007      	add	sp, #28
    54e0:	bc3c      	pop	{r2, r3, r4, r5}
    54e2:	4690      	mov	r8, r2
    54e4:	4699      	mov	r9, r3
    54e6:	46a2      	mov	sl, r4
    54e8:	46ab      	mov	fp, r5
    54ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54ec:	4303      	orrs	r3, r0
    54ee:	4699      	mov	r9, r3
    54f0:	d04f      	beq.n	5592 <__aeabi_dmul+0x1a2>
    54f2:	465b      	mov	r3, fp
    54f4:	2b00      	cmp	r3, #0
    54f6:	d100      	bne.n	54fa <__aeabi_dmul+0x10a>
    54f8:	e189      	b.n	580e <__aeabi_dmul+0x41e>
    54fa:	4658      	mov	r0, fp
    54fc:	f000 fd7a 	bl	5ff4 <__clzsi2>
    5500:	0003      	movs	r3, r0
    5502:	3b0b      	subs	r3, #11
    5504:	2b1c      	cmp	r3, #28
    5506:	dd00      	ble.n	550a <__aeabi_dmul+0x11a>
    5508:	e17a      	b.n	5800 <__aeabi_dmul+0x410>
    550a:	221d      	movs	r2, #29
    550c:	1ad3      	subs	r3, r2, r3
    550e:	003a      	movs	r2, r7
    5510:	0001      	movs	r1, r0
    5512:	465c      	mov	r4, fp
    5514:	40da      	lsrs	r2, r3
    5516:	3908      	subs	r1, #8
    5518:	408c      	lsls	r4, r1
    551a:	0013      	movs	r3, r2
    551c:	408f      	lsls	r7, r1
    551e:	4323      	orrs	r3, r4
    5520:	469b      	mov	fp, r3
    5522:	46b9      	mov	r9, r7
    5524:	2300      	movs	r3, #0
    5526:	4e2d      	ldr	r6, [pc, #180]	; (55dc <__aeabi_dmul+0x1ec>)
    5528:	2700      	movs	r7, #0
    552a:	1a36      	subs	r6, r6, r0
    552c:	9302      	str	r3, [sp, #8]
    552e:	e784      	b.n	543a <__aeabi_dmul+0x4a>
    5530:	4653      	mov	r3, sl
    5532:	4323      	orrs	r3, r4
    5534:	d12a      	bne.n	558c <__aeabi_dmul+0x19c>
    5536:	2400      	movs	r4, #0
    5538:	2002      	movs	r0, #2
    553a:	e796      	b.n	546a <__aeabi_dmul+0x7a>
    553c:	4653      	mov	r3, sl
    553e:	4323      	orrs	r3, r4
    5540:	d020      	beq.n	5584 <__aeabi_dmul+0x194>
    5542:	2c00      	cmp	r4, #0
    5544:	d100      	bne.n	5548 <__aeabi_dmul+0x158>
    5546:	e157      	b.n	57f8 <__aeabi_dmul+0x408>
    5548:	0020      	movs	r0, r4
    554a:	f000 fd53 	bl	5ff4 <__clzsi2>
    554e:	0003      	movs	r3, r0
    5550:	3b0b      	subs	r3, #11
    5552:	2b1c      	cmp	r3, #28
    5554:	dd00      	ble.n	5558 <__aeabi_dmul+0x168>
    5556:	e149      	b.n	57ec <__aeabi_dmul+0x3fc>
    5558:	211d      	movs	r1, #29
    555a:	1acb      	subs	r3, r1, r3
    555c:	4651      	mov	r1, sl
    555e:	0002      	movs	r2, r0
    5560:	40d9      	lsrs	r1, r3
    5562:	4653      	mov	r3, sl
    5564:	3a08      	subs	r2, #8
    5566:	4094      	lsls	r4, r2
    5568:	4093      	lsls	r3, r2
    556a:	430c      	orrs	r4, r1
    556c:	4a1b      	ldr	r2, [pc, #108]	; (55dc <__aeabi_dmul+0x1ec>)
    556e:	1a12      	subs	r2, r2, r0
    5570:	2000      	movs	r0, #0
    5572:	e77a      	b.n	546a <__aeabi_dmul+0x7a>
    5574:	2501      	movs	r5, #1
    5576:	9b01      	ldr	r3, [sp, #4]
    5578:	4c14      	ldr	r4, [pc, #80]	; (55cc <__aeabi_dmul+0x1dc>)
    557a:	401d      	ands	r5, r3
    557c:	2300      	movs	r3, #0
    557e:	2200      	movs	r2, #0
    5580:	4699      	mov	r9, r3
    5582:	e79c      	b.n	54be <__aeabi_dmul+0xce>
    5584:	2400      	movs	r4, #0
    5586:	2200      	movs	r2, #0
    5588:	2001      	movs	r0, #1
    558a:	e76e      	b.n	546a <__aeabi_dmul+0x7a>
    558c:	4653      	mov	r3, sl
    558e:	2003      	movs	r0, #3
    5590:	e76b      	b.n	546a <__aeabi_dmul+0x7a>
    5592:	2300      	movs	r3, #0
    5594:	469b      	mov	fp, r3
    5596:	3301      	adds	r3, #1
    5598:	2704      	movs	r7, #4
    559a:	2600      	movs	r6, #0
    559c:	9302      	str	r3, [sp, #8]
    559e:	e74c      	b.n	543a <__aeabi_dmul+0x4a>
    55a0:	2303      	movs	r3, #3
    55a2:	4681      	mov	r9, r0
    55a4:	270c      	movs	r7, #12
    55a6:	9302      	str	r3, [sp, #8]
    55a8:	e747      	b.n	543a <__aeabi_dmul+0x4a>
    55aa:	2280      	movs	r2, #128	; 0x80
    55ac:	2300      	movs	r3, #0
    55ae:	2500      	movs	r5, #0
    55b0:	0312      	lsls	r2, r2, #12
    55b2:	4699      	mov	r9, r3
    55b4:	4c05      	ldr	r4, [pc, #20]	; (55cc <__aeabi_dmul+0x1dc>)
    55b6:	e782      	b.n	54be <__aeabi_dmul+0xce>
    55b8:	465c      	mov	r4, fp
    55ba:	464b      	mov	r3, r9
    55bc:	9802      	ldr	r0, [sp, #8]
    55be:	e76f      	b.n	54a0 <__aeabi_dmul+0xb0>
    55c0:	465c      	mov	r4, fp
    55c2:	464b      	mov	r3, r9
    55c4:	9501      	str	r5, [sp, #4]
    55c6:	9802      	ldr	r0, [sp, #8]
    55c8:	e76a      	b.n	54a0 <__aeabi_dmul+0xb0>
    55ca:	46c0      	nop			; (mov r8, r8)
    55cc:	000007ff 	.word	0x000007ff
    55d0:	fffffc01 	.word	0xfffffc01
    55d4:	00006a7c 	.word	0x00006a7c
    55d8:	800fffff 	.word	0x800fffff
    55dc:	fffffc0d 	.word	0xfffffc0d
    55e0:	464a      	mov	r2, r9
    55e2:	4649      	mov	r1, r9
    55e4:	0c17      	lsrs	r7, r2, #16
    55e6:	0c1a      	lsrs	r2, r3, #16
    55e8:	041b      	lsls	r3, r3, #16
    55ea:	0c1b      	lsrs	r3, r3, #16
    55ec:	0408      	lsls	r0, r1, #16
    55ee:	0019      	movs	r1, r3
    55f0:	0c00      	lsrs	r0, r0, #16
    55f2:	4341      	muls	r1, r0
    55f4:	0015      	movs	r5, r2
    55f6:	4688      	mov	r8, r1
    55f8:	0019      	movs	r1, r3
    55fa:	437d      	muls	r5, r7
    55fc:	4379      	muls	r1, r7
    55fe:	9503      	str	r5, [sp, #12]
    5600:	4689      	mov	r9, r1
    5602:	0029      	movs	r1, r5
    5604:	0015      	movs	r5, r2
    5606:	4345      	muls	r5, r0
    5608:	444d      	add	r5, r9
    560a:	9502      	str	r5, [sp, #8]
    560c:	4645      	mov	r5, r8
    560e:	0c2d      	lsrs	r5, r5, #16
    5610:	46aa      	mov	sl, r5
    5612:	9d02      	ldr	r5, [sp, #8]
    5614:	4455      	add	r5, sl
    5616:	45a9      	cmp	r9, r5
    5618:	d906      	bls.n	5628 <__aeabi_dmul+0x238>
    561a:	468a      	mov	sl, r1
    561c:	2180      	movs	r1, #128	; 0x80
    561e:	0249      	lsls	r1, r1, #9
    5620:	4689      	mov	r9, r1
    5622:	44ca      	add	sl, r9
    5624:	4651      	mov	r1, sl
    5626:	9103      	str	r1, [sp, #12]
    5628:	0c29      	lsrs	r1, r5, #16
    562a:	9104      	str	r1, [sp, #16]
    562c:	4641      	mov	r1, r8
    562e:	0409      	lsls	r1, r1, #16
    5630:	042d      	lsls	r5, r5, #16
    5632:	0c09      	lsrs	r1, r1, #16
    5634:	4688      	mov	r8, r1
    5636:	0029      	movs	r1, r5
    5638:	0c25      	lsrs	r5, r4, #16
    563a:	0424      	lsls	r4, r4, #16
    563c:	4441      	add	r1, r8
    563e:	0c24      	lsrs	r4, r4, #16
    5640:	9105      	str	r1, [sp, #20]
    5642:	0021      	movs	r1, r4
    5644:	4341      	muls	r1, r0
    5646:	4688      	mov	r8, r1
    5648:	0021      	movs	r1, r4
    564a:	4379      	muls	r1, r7
    564c:	468a      	mov	sl, r1
    564e:	4368      	muls	r0, r5
    5650:	4641      	mov	r1, r8
    5652:	4450      	add	r0, sl
    5654:	4681      	mov	r9, r0
    5656:	0c08      	lsrs	r0, r1, #16
    5658:	4448      	add	r0, r9
    565a:	436f      	muls	r7, r5
    565c:	4582      	cmp	sl, r0
    565e:	d903      	bls.n	5668 <__aeabi_dmul+0x278>
    5660:	2180      	movs	r1, #128	; 0x80
    5662:	0249      	lsls	r1, r1, #9
    5664:	4689      	mov	r9, r1
    5666:	444f      	add	r7, r9
    5668:	0c01      	lsrs	r1, r0, #16
    566a:	4689      	mov	r9, r1
    566c:	0039      	movs	r1, r7
    566e:	4449      	add	r1, r9
    5670:	9102      	str	r1, [sp, #8]
    5672:	4641      	mov	r1, r8
    5674:	040f      	lsls	r7, r1, #16
    5676:	9904      	ldr	r1, [sp, #16]
    5678:	0c3f      	lsrs	r7, r7, #16
    567a:	4688      	mov	r8, r1
    567c:	0400      	lsls	r0, r0, #16
    567e:	19c0      	adds	r0, r0, r7
    5680:	4480      	add	r8, r0
    5682:	4641      	mov	r1, r8
    5684:	9104      	str	r1, [sp, #16]
    5686:	4659      	mov	r1, fp
    5688:	0c0f      	lsrs	r7, r1, #16
    568a:	0409      	lsls	r1, r1, #16
    568c:	0c09      	lsrs	r1, r1, #16
    568e:	4688      	mov	r8, r1
    5690:	4359      	muls	r1, r3
    5692:	468a      	mov	sl, r1
    5694:	0039      	movs	r1, r7
    5696:	4351      	muls	r1, r2
    5698:	4689      	mov	r9, r1
    569a:	4641      	mov	r1, r8
    569c:	434a      	muls	r2, r1
    569e:	4651      	mov	r1, sl
    56a0:	0c09      	lsrs	r1, r1, #16
    56a2:	468b      	mov	fp, r1
    56a4:	437b      	muls	r3, r7
    56a6:	18d2      	adds	r2, r2, r3
    56a8:	445a      	add	r2, fp
    56aa:	4293      	cmp	r3, r2
    56ac:	d903      	bls.n	56b6 <__aeabi_dmul+0x2c6>
    56ae:	2380      	movs	r3, #128	; 0x80
    56b0:	025b      	lsls	r3, r3, #9
    56b2:	469b      	mov	fp, r3
    56b4:	44d9      	add	r9, fp
    56b6:	4651      	mov	r1, sl
    56b8:	0409      	lsls	r1, r1, #16
    56ba:	0c09      	lsrs	r1, r1, #16
    56bc:	468a      	mov	sl, r1
    56be:	4641      	mov	r1, r8
    56c0:	4361      	muls	r1, r4
    56c2:	437c      	muls	r4, r7
    56c4:	0c13      	lsrs	r3, r2, #16
    56c6:	0412      	lsls	r2, r2, #16
    56c8:	444b      	add	r3, r9
    56ca:	4452      	add	r2, sl
    56cc:	46a1      	mov	r9, r4
    56ce:	468a      	mov	sl, r1
    56d0:	003c      	movs	r4, r7
    56d2:	4641      	mov	r1, r8
    56d4:	436c      	muls	r4, r5
    56d6:	434d      	muls	r5, r1
    56d8:	4651      	mov	r1, sl
    56da:	444d      	add	r5, r9
    56dc:	0c0f      	lsrs	r7, r1, #16
    56de:	197d      	adds	r5, r7, r5
    56e0:	45a9      	cmp	r9, r5
    56e2:	d903      	bls.n	56ec <__aeabi_dmul+0x2fc>
    56e4:	2180      	movs	r1, #128	; 0x80
    56e6:	0249      	lsls	r1, r1, #9
    56e8:	4688      	mov	r8, r1
    56ea:	4444      	add	r4, r8
    56ec:	9f04      	ldr	r7, [sp, #16]
    56ee:	9903      	ldr	r1, [sp, #12]
    56f0:	46b8      	mov	r8, r7
    56f2:	4441      	add	r1, r8
    56f4:	468b      	mov	fp, r1
    56f6:	4583      	cmp	fp, r0
    56f8:	4180      	sbcs	r0, r0
    56fa:	4241      	negs	r1, r0
    56fc:	4688      	mov	r8, r1
    56fe:	4651      	mov	r1, sl
    5700:	0408      	lsls	r0, r1, #16
    5702:	042f      	lsls	r7, r5, #16
    5704:	0c00      	lsrs	r0, r0, #16
    5706:	183f      	adds	r7, r7, r0
    5708:	4658      	mov	r0, fp
    570a:	9902      	ldr	r1, [sp, #8]
    570c:	1810      	adds	r0, r2, r0
    570e:	4689      	mov	r9, r1
    5710:	4290      	cmp	r0, r2
    5712:	4192      	sbcs	r2, r2
    5714:	444f      	add	r7, r9
    5716:	46ba      	mov	sl, r7
    5718:	4252      	negs	r2, r2
    571a:	4699      	mov	r9, r3
    571c:	4693      	mov	fp, r2
    571e:	44c2      	add	sl, r8
    5720:	44d1      	add	r9, sl
    5722:	44cb      	add	fp, r9
    5724:	428f      	cmp	r7, r1
    5726:	41bf      	sbcs	r7, r7
    5728:	45c2      	cmp	sl, r8
    572a:	4189      	sbcs	r1, r1
    572c:	4599      	cmp	r9, r3
    572e:	419b      	sbcs	r3, r3
    5730:	4593      	cmp	fp, r2
    5732:	4192      	sbcs	r2, r2
    5734:	427f      	negs	r7, r7
    5736:	4249      	negs	r1, r1
    5738:	0c2d      	lsrs	r5, r5, #16
    573a:	4252      	negs	r2, r2
    573c:	430f      	orrs	r7, r1
    573e:	425b      	negs	r3, r3
    5740:	4313      	orrs	r3, r2
    5742:	197f      	adds	r7, r7, r5
    5744:	18ff      	adds	r7, r7, r3
    5746:	465b      	mov	r3, fp
    5748:	193c      	adds	r4, r7, r4
    574a:	0ddb      	lsrs	r3, r3, #23
    574c:	9a05      	ldr	r2, [sp, #20]
    574e:	0264      	lsls	r4, r4, #9
    5750:	431c      	orrs	r4, r3
    5752:	0243      	lsls	r3, r0, #9
    5754:	4313      	orrs	r3, r2
    5756:	1e5d      	subs	r5, r3, #1
    5758:	41ab      	sbcs	r3, r5
    575a:	465a      	mov	r2, fp
    575c:	0dc0      	lsrs	r0, r0, #23
    575e:	4303      	orrs	r3, r0
    5760:	0252      	lsls	r2, r2, #9
    5762:	4313      	orrs	r3, r2
    5764:	01e2      	lsls	r2, r4, #7
    5766:	d556      	bpl.n	5816 <__aeabi_dmul+0x426>
    5768:	2001      	movs	r0, #1
    576a:	085a      	lsrs	r2, r3, #1
    576c:	4003      	ands	r3, r0
    576e:	4313      	orrs	r3, r2
    5770:	07e2      	lsls	r2, r4, #31
    5772:	4313      	orrs	r3, r2
    5774:	0864      	lsrs	r4, r4, #1
    5776:	485a      	ldr	r0, [pc, #360]	; (58e0 <__aeabi_dmul+0x4f0>)
    5778:	4460      	add	r0, ip
    577a:	2800      	cmp	r0, #0
    577c:	dd4d      	ble.n	581a <__aeabi_dmul+0x42a>
    577e:	075a      	lsls	r2, r3, #29
    5780:	d009      	beq.n	5796 <__aeabi_dmul+0x3a6>
    5782:	220f      	movs	r2, #15
    5784:	401a      	ands	r2, r3
    5786:	2a04      	cmp	r2, #4
    5788:	d005      	beq.n	5796 <__aeabi_dmul+0x3a6>
    578a:	1d1a      	adds	r2, r3, #4
    578c:	429a      	cmp	r2, r3
    578e:	419b      	sbcs	r3, r3
    5790:	425b      	negs	r3, r3
    5792:	18e4      	adds	r4, r4, r3
    5794:	0013      	movs	r3, r2
    5796:	01e2      	lsls	r2, r4, #7
    5798:	d504      	bpl.n	57a4 <__aeabi_dmul+0x3b4>
    579a:	2080      	movs	r0, #128	; 0x80
    579c:	4a51      	ldr	r2, [pc, #324]	; (58e4 <__aeabi_dmul+0x4f4>)
    579e:	00c0      	lsls	r0, r0, #3
    57a0:	4014      	ands	r4, r2
    57a2:	4460      	add	r0, ip
    57a4:	4a50      	ldr	r2, [pc, #320]	; (58e8 <__aeabi_dmul+0x4f8>)
    57a6:	4290      	cmp	r0, r2
    57a8:	dd00      	ble.n	57ac <__aeabi_dmul+0x3bc>
    57aa:	e6e3      	b.n	5574 <__aeabi_dmul+0x184>
    57ac:	2501      	movs	r5, #1
    57ae:	08db      	lsrs	r3, r3, #3
    57b0:	0762      	lsls	r2, r4, #29
    57b2:	431a      	orrs	r2, r3
    57b4:	0264      	lsls	r4, r4, #9
    57b6:	9b01      	ldr	r3, [sp, #4]
    57b8:	4691      	mov	r9, r2
    57ba:	0b22      	lsrs	r2, r4, #12
    57bc:	0544      	lsls	r4, r0, #21
    57be:	0d64      	lsrs	r4, r4, #21
    57c0:	401d      	ands	r5, r3
    57c2:	e67c      	b.n	54be <__aeabi_dmul+0xce>
    57c4:	2280      	movs	r2, #128	; 0x80
    57c6:	4659      	mov	r1, fp
    57c8:	0312      	lsls	r2, r2, #12
    57ca:	4211      	tst	r1, r2
    57cc:	d008      	beq.n	57e0 <__aeabi_dmul+0x3f0>
    57ce:	4214      	tst	r4, r2
    57d0:	d106      	bne.n	57e0 <__aeabi_dmul+0x3f0>
    57d2:	4322      	orrs	r2, r4
    57d4:	0312      	lsls	r2, r2, #12
    57d6:	0b12      	lsrs	r2, r2, #12
    57d8:	4645      	mov	r5, r8
    57da:	4699      	mov	r9, r3
    57dc:	4c43      	ldr	r4, [pc, #268]	; (58ec <__aeabi_dmul+0x4fc>)
    57de:	e66e      	b.n	54be <__aeabi_dmul+0xce>
    57e0:	465b      	mov	r3, fp
    57e2:	431a      	orrs	r2, r3
    57e4:	0312      	lsls	r2, r2, #12
    57e6:	0b12      	lsrs	r2, r2, #12
    57e8:	4c40      	ldr	r4, [pc, #256]	; (58ec <__aeabi_dmul+0x4fc>)
    57ea:	e668      	b.n	54be <__aeabi_dmul+0xce>
    57ec:	0003      	movs	r3, r0
    57ee:	4654      	mov	r4, sl
    57f0:	3b28      	subs	r3, #40	; 0x28
    57f2:	409c      	lsls	r4, r3
    57f4:	2300      	movs	r3, #0
    57f6:	e6b9      	b.n	556c <__aeabi_dmul+0x17c>
    57f8:	f000 fbfc 	bl	5ff4 <__clzsi2>
    57fc:	3020      	adds	r0, #32
    57fe:	e6a6      	b.n	554e <__aeabi_dmul+0x15e>
    5800:	0003      	movs	r3, r0
    5802:	3b28      	subs	r3, #40	; 0x28
    5804:	409f      	lsls	r7, r3
    5806:	2300      	movs	r3, #0
    5808:	46bb      	mov	fp, r7
    580a:	4699      	mov	r9, r3
    580c:	e68a      	b.n	5524 <__aeabi_dmul+0x134>
    580e:	f000 fbf1 	bl	5ff4 <__clzsi2>
    5812:	3020      	adds	r0, #32
    5814:	e674      	b.n	5500 <__aeabi_dmul+0x110>
    5816:	46b4      	mov	ip, r6
    5818:	e7ad      	b.n	5776 <__aeabi_dmul+0x386>
    581a:	2501      	movs	r5, #1
    581c:	1a2a      	subs	r2, r5, r0
    581e:	2a38      	cmp	r2, #56	; 0x38
    5820:	dd06      	ble.n	5830 <__aeabi_dmul+0x440>
    5822:	9b01      	ldr	r3, [sp, #4]
    5824:	2400      	movs	r4, #0
    5826:	401d      	ands	r5, r3
    5828:	2300      	movs	r3, #0
    582a:	2200      	movs	r2, #0
    582c:	4699      	mov	r9, r3
    582e:	e646      	b.n	54be <__aeabi_dmul+0xce>
    5830:	2a1f      	cmp	r2, #31
    5832:	dc21      	bgt.n	5878 <__aeabi_dmul+0x488>
    5834:	2520      	movs	r5, #32
    5836:	0020      	movs	r0, r4
    5838:	1aad      	subs	r5, r5, r2
    583a:	001e      	movs	r6, r3
    583c:	40ab      	lsls	r3, r5
    583e:	40a8      	lsls	r0, r5
    5840:	40d6      	lsrs	r6, r2
    5842:	1e5d      	subs	r5, r3, #1
    5844:	41ab      	sbcs	r3, r5
    5846:	4330      	orrs	r0, r6
    5848:	4318      	orrs	r0, r3
    584a:	40d4      	lsrs	r4, r2
    584c:	0743      	lsls	r3, r0, #29
    584e:	d009      	beq.n	5864 <__aeabi_dmul+0x474>
    5850:	230f      	movs	r3, #15
    5852:	4003      	ands	r3, r0
    5854:	2b04      	cmp	r3, #4
    5856:	d005      	beq.n	5864 <__aeabi_dmul+0x474>
    5858:	0003      	movs	r3, r0
    585a:	1d18      	adds	r0, r3, #4
    585c:	4298      	cmp	r0, r3
    585e:	419b      	sbcs	r3, r3
    5860:	425b      	negs	r3, r3
    5862:	18e4      	adds	r4, r4, r3
    5864:	0223      	lsls	r3, r4, #8
    5866:	d521      	bpl.n	58ac <__aeabi_dmul+0x4bc>
    5868:	2501      	movs	r5, #1
    586a:	9b01      	ldr	r3, [sp, #4]
    586c:	2401      	movs	r4, #1
    586e:	401d      	ands	r5, r3
    5870:	2300      	movs	r3, #0
    5872:	2200      	movs	r2, #0
    5874:	4699      	mov	r9, r3
    5876:	e622      	b.n	54be <__aeabi_dmul+0xce>
    5878:	251f      	movs	r5, #31
    587a:	0021      	movs	r1, r4
    587c:	426d      	negs	r5, r5
    587e:	1a28      	subs	r0, r5, r0
    5880:	40c1      	lsrs	r1, r0
    5882:	0008      	movs	r0, r1
    5884:	2a20      	cmp	r2, #32
    5886:	d01d      	beq.n	58c4 <__aeabi_dmul+0x4d4>
    5888:	355f      	adds	r5, #95	; 0x5f
    588a:	1aaa      	subs	r2, r5, r2
    588c:	4094      	lsls	r4, r2
    588e:	4323      	orrs	r3, r4
    5890:	1e5c      	subs	r4, r3, #1
    5892:	41a3      	sbcs	r3, r4
    5894:	2507      	movs	r5, #7
    5896:	4303      	orrs	r3, r0
    5898:	401d      	ands	r5, r3
    589a:	2200      	movs	r2, #0
    589c:	2d00      	cmp	r5, #0
    589e:	d009      	beq.n	58b4 <__aeabi_dmul+0x4c4>
    58a0:	220f      	movs	r2, #15
    58a2:	2400      	movs	r4, #0
    58a4:	401a      	ands	r2, r3
    58a6:	0018      	movs	r0, r3
    58a8:	2a04      	cmp	r2, #4
    58aa:	d1d6      	bne.n	585a <__aeabi_dmul+0x46a>
    58ac:	0003      	movs	r3, r0
    58ae:	0765      	lsls	r5, r4, #29
    58b0:	0264      	lsls	r4, r4, #9
    58b2:	0b22      	lsrs	r2, r4, #12
    58b4:	08db      	lsrs	r3, r3, #3
    58b6:	432b      	orrs	r3, r5
    58b8:	2501      	movs	r5, #1
    58ba:	4699      	mov	r9, r3
    58bc:	9b01      	ldr	r3, [sp, #4]
    58be:	2400      	movs	r4, #0
    58c0:	401d      	ands	r5, r3
    58c2:	e5fc      	b.n	54be <__aeabi_dmul+0xce>
    58c4:	2400      	movs	r4, #0
    58c6:	e7e2      	b.n	588e <__aeabi_dmul+0x49e>
    58c8:	2280      	movs	r2, #128	; 0x80
    58ca:	2501      	movs	r5, #1
    58cc:	0312      	lsls	r2, r2, #12
    58ce:	4322      	orrs	r2, r4
    58d0:	9901      	ldr	r1, [sp, #4]
    58d2:	0312      	lsls	r2, r2, #12
    58d4:	0b12      	lsrs	r2, r2, #12
    58d6:	400d      	ands	r5, r1
    58d8:	4699      	mov	r9, r3
    58da:	4c04      	ldr	r4, [pc, #16]	; (58ec <__aeabi_dmul+0x4fc>)
    58dc:	e5ef      	b.n	54be <__aeabi_dmul+0xce>
    58de:	46c0      	nop			; (mov r8, r8)
    58e0:	000003ff 	.word	0x000003ff
    58e4:	feffffff 	.word	0xfeffffff
    58e8:	000007fe 	.word	0x000007fe
    58ec:	000007ff 	.word	0x000007ff

000058f0 <__aeabi_dsub>:
    58f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    58f2:	4646      	mov	r6, r8
    58f4:	46d6      	mov	lr, sl
    58f6:	464f      	mov	r7, r9
    58f8:	030c      	lsls	r4, r1, #12
    58fa:	b5c0      	push	{r6, r7, lr}
    58fc:	0fcd      	lsrs	r5, r1, #31
    58fe:	004e      	lsls	r6, r1, #1
    5900:	0a61      	lsrs	r1, r4, #9
    5902:	0f44      	lsrs	r4, r0, #29
    5904:	430c      	orrs	r4, r1
    5906:	00c1      	lsls	r1, r0, #3
    5908:	0058      	lsls	r0, r3, #1
    590a:	0d40      	lsrs	r0, r0, #21
    590c:	4684      	mov	ip, r0
    590e:	468a      	mov	sl, r1
    5910:	000f      	movs	r7, r1
    5912:	0319      	lsls	r1, r3, #12
    5914:	0f50      	lsrs	r0, r2, #29
    5916:	0a49      	lsrs	r1, r1, #9
    5918:	4301      	orrs	r1, r0
    591a:	48c6      	ldr	r0, [pc, #792]	; (5c34 <__aeabi_dsub+0x344>)
    591c:	0d76      	lsrs	r6, r6, #21
    591e:	46a8      	mov	r8, r5
    5920:	0fdb      	lsrs	r3, r3, #31
    5922:	00d2      	lsls	r2, r2, #3
    5924:	4584      	cmp	ip, r0
    5926:	d100      	bne.n	592a <__aeabi_dsub+0x3a>
    5928:	e0d8      	b.n	5adc <__aeabi_dsub+0x1ec>
    592a:	2001      	movs	r0, #1
    592c:	4043      	eors	r3, r0
    592e:	42ab      	cmp	r3, r5
    5930:	d100      	bne.n	5934 <__aeabi_dsub+0x44>
    5932:	e0a6      	b.n	5a82 <__aeabi_dsub+0x192>
    5934:	4660      	mov	r0, ip
    5936:	1a35      	subs	r5, r6, r0
    5938:	2d00      	cmp	r5, #0
    593a:	dc00      	bgt.n	593e <__aeabi_dsub+0x4e>
    593c:	e105      	b.n	5b4a <__aeabi_dsub+0x25a>
    593e:	2800      	cmp	r0, #0
    5940:	d110      	bne.n	5964 <__aeabi_dsub+0x74>
    5942:	000b      	movs	r3, r1
    5944:	4313      	orrs	r3, r2
    5946:	d100      	bne.n	594a <__aeabi_dsub+0x5a>
    5948:	e0d7      	b.n	5afa <__aeabi_dsub+0x20a>
    594a:	1e6b      	subs	r3, r5, #1
    594c:	2b00      	cmp	r3, #0
    594e:	d000      	beq.n	5952 <__aeabi_dsub+0x62>
    5950:	e14b      	b.n	5bea <__aeabi_dsub+0x2fa>
    5952:	4653      	mov	r3, sl
    5954:	1a9f      	subs	r7, r3, r2
    5956:	45ba      	cmp	sl, r7
    5958:	4180      	sbcs	r0, r0
    595a:	1a64      	subs	r4, r4, r1
    595c:	4240      	negs	r0, r0
    595e:	1a24      	subs	r4, r4, r0
    5960:	2601      	movs	r6, #1
    5962:	e01e      	b.n	59a2 <__aeabi_dsub+0xb2>
    5964:	4bb3      	ldr	r3, [pc, #716]	; (5c34 <__aeabi_dsub+0x344>)
    5966:	429e      	cmp	r6, r3
    5968:	d048      	beq.n	59fc <__aeabi_dsub+0x10c>
    596a:	2380      	movs	r3, #128	; 0x80
    596c:	041b      	lsls	r3, r3, #16
    596e:	4319      	orrs	r1, r3
    5970:	2d38      	cmp	r5, #56	; 0x38
    5972:	dd00      	ble.n	5976 <__aeabi_dsub+0x86>
    5974:	e119      	b.n	5baa <__aeabi_dsub+0x2ba>
    5976:	2d1f      	cmp	r5, #31
    5978:	dd00      	ble.n	597c <__aeabi_dsub+0x8c>
    597a:	e14c      	b.n	5c16 <__aeabi_dsub+0x326>
    597c:	2320      	movs	r3, #32
    597e:	000f      	movs	r7, r1
    5980:	1b5b      	subs	r3, r3, r5
    5982:	0010      	movs	r0, r2
    5984:	409a      	lsls	r2, r3
    5986:	409f      	lsls	r7, r3
    5988:	40e8      	lsrs	r0, r5
    598a:	1e53      	subs	r3, r2, #1
    598c:	419a      	sbcs	r2, r3
    598e:	40e9      	lsrs	r1, r5
    5990:	4307      	orrs	r7, r0
    5992:	4317      	orrs	r7, r2
    5994:	4653      	mov	r3, sl
    5996:	1bdf      	subs	r7, r3, r7
    5998:	1a61      	subs	r1, r4, r1
    599a:	45ba      	cmp	sl, r7
    599c:	41a4      	sbcs	r4, r4
    599e:	4264      	negs	r4, r4
    59a0:	1b0c      	subs	r4, r1, r4
    59a2:	0223      	lsls	r3, r4, #8
    59a4:	d400      	bmi.n	59a8 <__aeabi_dsub+0xb8>
    59a6:	e0c5      	b.n	5b34 <__aeabi_dsub+0x244>
    59a8:	0264      	lsls	r4, r4, #9
    59aa:	0a65      	lsrs	r5, r4, #9
    59ac:	2d00      	cmp	r5, #0
    59ae:	d100      	bne.n	59b2 <__aeabi_dsub+0xc2>
    59b0:	e0f6      	b.n	5ba0 <__aeabi_dsub+0x2b0>
    59b2:	0028      	movs	r0, r5
    59b4:	f000 fb1e 	bl	5ff4 <__clzsi2>
    59b8:	0003      	movs	r3, r0
    59ba:	3b08      	subs	r3, #8
    59bc:	2b1f      	cmp	r3, #31
    59be:	dd00      	ble.n	59c2 <__aeabi_dsub+0xd2>
    59c0:	e0e9      	b.n	5b96 <__aeabi_dsub+0x2a6>
    59c2:	2220      	movs	r2, #32
    59c4:	003c      	movs	r4, r7
    59c6:	1ad2      	subs	r2, r2, r3
    59c8:	409d      	lsls	r5, r3
    59ca:	40d4      	lsrs	r4, r2
    59cc:	409f      	lsls	r7, r3
    59ce:	4325      	orrs	r5, r4
    59d0:	429e      	cmp	r6, r3
    59d2:	dd00      	ble.n	59d6 <__aeabi_dsub+0xe6>
    59d4:	e0db      	b.n	5b8e <__aeabi_dsub+0x29e>
    59d6:	1b9e      	subs	r6, r3, r6
    59d8:	1c73      	adds	r3, r6, #1
    59da:	2b1f      	cmp	r3, #31
    59dc:	dd00      	ble.n	59e0 <__aeabi_dsub+0xf0>
    59de:	e10a      	b.n	5bf6 <__aeabi_dsub+0x306>
    59e0:	2220      	movs	r2, #32
    59e2:	0038      	movs	r0, r7
    59e4:	1ad2      	subs	r2, r2, r3
    59e6:	0029      	movs	r1, r5
    59e8:	4097      	lsls	r7, r2
    59ea:	002c      	movs	r4, r5
    59ec:	4091      	lsls	r1, r2
    59ee:	40d8      	lsrs	r0, r3
    59f0:	1e7a      	subs	r2, r7, #1
    59f2:	4197      	sbcs	r7, r2
    59f4:	40dc      	lsrs	r4, r3
    59f6:	2600      	movs	r6, #0
    59f8:	4301      	orrs	r1, r0
    59fa:	430f      	orrs	r7, r1
    59fc:	077b      	lsls	r3, r7, #29
    59fe:	d009      	beq.n	5a14 <__aeabi_dsub+0x124>
    5a00:	230f      	movs	r3, #15
    5a02:	403b      	ands	r3, r7
    5a04:	2b04      	cmp	r3, #4
    5a06:	d005      	beq.n	5a14 <__aeabi_dsub+0x124>
    5a08:	1d3b      	adds	r3, r7, #4
    5a0a:	42bb      	cmp	r3, r7
    5a0c:	41bf      	sbcs	r7, r7
    5a0e:	427f      	negs	r7, r7
    5a10:	19e4      	adds	r4, r4, r7
    5a12:	001f      	movs	r7, r3
    5a14:	0223      	lsls	r3, r4, #8
    5a16:	d525      	bpl.n	5a64 <__aeabi_dsub+0x174>
    5a18:	4b86      	ldr	r3, [pc, #536]	; (5c34 <__aeabi_dsub+0x344>)
    5a1a:	3601      	adds	r6, #1
    5a1c:	429e      	cmp	r6, r3
    5a1e:	d100      	bne.n	5a22 <__aeabi_dsub+0x132>
    5a20:	e0af      	b.n	5b82 <__aeabi_dsub+0x292>
    5a22:	4b85      	ldr	r3, [pc, #532]	; (5c38 <__aeabi_dsub+0x348>)
    5a24:	2501      	movs	r5, #1
    5a26:	401c      	ands	r4, r3
    5a28:	4643      	mov	r3, r8
    5a2a:	0762      	lsls	r2, r4, #29
    5a2c:	08ff      	lsrs	r7, r7, #3
    5a2e:	0264      	lsls	r4, r4, #9
    5a30:	0576      	lsls	r6, r6, #21
    5a32:	4317      	orrs	r7, r2
    5a34:	0b24      	lsrs	r4, r4, #12
    5a36:	0d76      	lsrs	r6, r6, #21
    5a38:	401d      	ands	r5, r3
    5a3a:	2100      	movs	r1, #0
    5a3c:	0324      	lsls	r4, r4, #12
    5a3e:	0b23      	lsrs	r3, r4, #12
    5a40:	0d0c      	lsrs	r4, r1, #20
    5a42:	4a7e      	ldr	r2, [pc, #504]	; (5c3c <__aeabi_dsub+0x34c>)
    5a44:	0524      	lsls	r4, r4, #20
    5a46:	431c      	orrs	r4, r3
    5a48:	4014      	ands	r4, r2
    5a4a:	0533      	lsls	r3, r6, #20
    5a4c:	4323      	orrs	r3, r4
    5a4e:	005b      	lsls	r3, r3, #1
    5a50:	07ed      	lsls	r5, r5, #31
    5a52:	085b      	lsrs	r3, r3, #1
    5a54:	432b      	orrs	r3, r5
    5a56:	0038      	movs	r0, r7
    5a58:	0019      	movs	r1, r3
    5a5a:	bc1c      	pop	{r2, r3, r4}
    5a5c:	4690      	mov	r8, r2
    5a5e:	4699      	mov	r9, r3
    5a60:	46a2      	mov	sl, r4
    5a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a64:	2501      	movs	r5, #1
    5a66:	4643      	mov	r3, r8
    5a68:	0762      	lsls	r2, r4, #29
    5a6a:	08ff      	lsrs	r7, r7, #3
    5a6c:	4317      	orrs	r7, r2
    5a6e:	08e4      	lsrs	r4, r4, #3
    5a70:	401d      	ands	r5, r3
    5a72:	4b70      	ldr	r3, [pc, #448]	; (5c34 <__aeabi_dsub+0x344>)
    5a74:	429e      	cmp	r6, r3
    5a76:	d036      	beq.n	5ae6 <__aeabi_dsub+0x1f6>
    5a78:	0324      	lsls	r4, r4, #12
    5a7a:	0576      	lsls	r6, r6, #21
    5a7c:	0b24      	lsrs	r4, r4, #12
    5a7e:	0d76      	lsrs	r6, r6, #21
    5a80:	e7db      	b.n	5a3a <__aeabi_dsub+0x14a>
    5a82:	4663      	mov	r3, ip
    5a84:	1af3      	subs	r3, r6, r3
    5a86:	2b00      	cmp	r3, #0
    5a88:	dc00      	bgt.n	5a8c <__aeabi_dsub+0x19c>
    5a8a:	e094      	b.n	5bb6 <__aeabi_dsub+0x2c6>
    5a8c:	4660      	mov	r0, ip
    5a8e:	2800      	cmp	r0, #0
    5a90:	d035      	beq.n	5afe <__aeabi_dsub+0x20e>
    5a92:	4868      	ldr	r0, [pc, #416]	; (5c34 <__aeabi_dsub+0x344>)
    5a94:	4286      	cmp	r6, r0
    5a96:	d0b1      	beq.n	59fc <__aeabi_dsub+0x10c>
    5a98:	2780      	movs	r7, #128	; 0x80
    5a9a:	043f      	lsls	r7, r7, #16
    5a9c:	4339      	orrs	r1, r7
    5a9e:	2b38      	cmp	r3, #56	; 0x38
    5aa0:	dc00      	bgt.n	5aa4 <__aeabi_dsub+0x1b4>
    5aa2:	e0fd      	b.n	5ca0 <__aeabi_dsub+0x3b0>
    5aa4:	430a      	orrs	r2, r1
    5aa6:	0017      	movs	r7, r2
    5aa8:	2100      	movs	r1, #0
    5aaa:	1e7a      	subs	r2, r7, #1
    5aac:	4197      	sbcs	r7, r2
    5aae:	4457      	add	r7, sl
    5ab0:	4557      	cmp	r7, sl
    5ab2:	4180      	sbcs	r0, r0
    5ab4:	1909      	adds	r1, r1, r4
    5ab6:	4244      	negs	r4, r0
    5ab8:	190c      	adds	r4, r1, r4
    5aba:	0223      	lsls	r3, r4, #8
    5abc:	d53a      	bpl.n	5b34 <__aeabi_dsub+0x244>
    5abe:	4b5d      	ldr	r3, [pc, #372]	; (5c34 <__aeabi_dsub+0x344>)
    5ac0:	3601      	adds	r6, #1
    5ac2:	429e      	cmp	r6, r3
    5ac4:	d100      	bne.n	5ac8 <__aeabi_dsub+0x1d8>
    5ac6:	e14b      	b.n	5d60 <__aeabi_dsub+0x470>
    5ac8:	2201      	movs	r2, #1
    5aca:	4b5b      	ldr	r3, [pc, #364]	; (5c38 <__aeabi_dsub+0x348>)
    5acc:	401c      	ands	r4, r3
    5ace:	087b      	lsrs	r3, r7, #1
    5ad0:	4017      	ands	r7, r2
    5ad2:	431f      	orrs	r7, r3
    5ad4:	07e2      	lsls	r2, r4, #31
    5ad6:	4317      	orrs	r7, r2
    5ad8:	0864      	lsrs	r4, r4, #1
    5ada:	e78f      	b.n	59fc <__aeabi_dsub+0x10c>
    5adc:	0008      	movs	r0, r1
    5ade:	4310      	orrs	r0, r2
    5ae0:	d000      	beq.n	5ae4 <__aeabi_dsub+0x1f4>
    5ae2:	e724      	b.n	592e <__aeabi_dsub+0x3e>
    5ae4:	e721      	b.n	592a <__aeabi_dsub+0x3a>
    5ae6:	0023      	movs	r3, r4
    5ae8:	433b      	orrs	r3, r7
    5aea:	d100      	bne.n	5aee <__aeabi_dsub+0x1fe>
    5aec:	e1b9      	b.n	5e62 <__aeabi_dsub+0x572>
    5aee:	2280      	movs	r2, #128	; 0x80
    5af0:	0312      	lsls	r2, r2, #12
    5af2:	4314      	orrs	r4, r2
    5af4:	0324      	lsls	r4, r4, #12
    5af6:	0b24      	lsrs	r4, r4, #12
    5af8:	e79f      	b.n	5a3a <__aeabi_dsub+0x14a>
    5afa:	002e      	movs	r6, r5
    5afc:	e77e      	b.n	59fc <__aeabi_dsub+0x10c>
    5afe:	0008      	movs	r0, r1
    5b00:	4310      	orrs	r0, r2
    5b02:	d100      	bne.n	5b06 <__aeabi_dsub+0x216>
    5b04:	e0ca      	b.n	5c9c <__aeabi_dsub+0x3ac>
    5b06:	1e58      	subs	r0, r3, #1
    5b08:	4684      	mov	ip, r0
    5b0a:	2800      	cmp	r0, #0
    5b0c:	d000      	beq.n	5b10 <__aeabi_dsub+0x220>
    5b0e:	e0e7      	b.n	5ce0 <__aeabi_dsub+0x3f0>
    5b10:	4452      	add	r2, sl
    5b12:	4552      	cmp	r2, sl
    5b14:	4180      	sbcs	r0, r0
    5b16:	1864      	adds	r4, r4, r1
    5b18:	4240      	negs	r0, r0
    5b1a:	1824      	adds	r4, r4, r0
    5b1c:	0017      	movs	r7, r2
    5b1e:	2601      	movs	r6, #1
    5b20:	0223      	lsls	r3, r4, #8
    5b22:	d507      	bpl.n	5b34 <__aeabi_dsub+0x244>
    5b24:	2602      	movs	r6, #2
    5b26:	e7cf      	b.n	5ac8 <__aeabi_dsub+0x1d8>
    5b28:	4664      	mov	r4, ip
    5b2a:	432c      	orrs	r4, r5
    5b2c:	d100      	bne.n	5b30 <__aeabi_dsub+0x240>
    5b2e:	e1b3      	b.n	5e98 <__aeabi_dsub+0x5a8>
    5b30:	002c      	movs	r4, r5
    5b32:	4667      	mov	r7, ip
    5b34:	077b      	lsls	r3, r7, #29
    5b36:	d000      	beq.n	5b3a <__aeabi_dsub+0x24a>
    5b38:	e762      	b.n	5a00 <__aeabi_dsub+0x110>
    5b3a:	0763      	lsls	r3, r4, #29
    5b3c:	08ff      	lsrs	r7, r7, #3
    5b3e:	431f      	orrs	r7, r3
    5b40:	2501      	movs	r5, #1
    5b42:	4643      	mov	r3, r8
    5b44:	08e4      	lsrs	r4, r4, #3
    5b46:	401d      	ands	r5, r3
    5b48:	e793      	b.n	5a72 <__aeabi_dsub+0x182>
    5b4a:	2d00      	cmp	r5, #0
    5b4c:	d178      	bne.n	5c40 <__aeabi_dsub+0x350>
    5b4e:	1c75      	adds	r5, r6, #1
    5b50:	056d      	lsls	r5, r5, #21
    5b52:	0d6d      	lsrs	r5, r5, #21
    5b54:	2d01      	cmp	r5, #1
    5b56:	dc00      	bgt.n	5b5a <__aeabi_dsub+0x26a>
    5b58:	e0f2      	b.n	5d40 <__aeabi_dsub+0x450>
    5b5a:	4650      	mov	r0, sl
    5b5c:	1a80      	subs	r0, r0, r2
    5b5e:	4582      	cmp	sl, r0
    5b60:	41bf      	sbcs	r7, r7
    5b62:	1a65      	subs	r5, r4, r1
    5b64:	427f      	negs	r7, r7
    5b66:	1bed      	subs	r5, r5, r7
    5b68:	4684      	mov	ip, r0
    5b6a:	0228      	lsls	r0, r5, #8
    5b6c:	d400      	bmi.n	5b70 <__aeabi_dsub+0x280>
    5b6e:	e08c      	b.n	5c8a <__aeabi_dsub+0x39a>
    5b70:	4650      	mov	r0, sl
    5b72:	1a17      	subs	r7, r2, r0
    5b74:	42ba      	cmp	r2, r7
    5b76:	4192      	sbcs	r2, r2
    5b78:	1b0c      	subs	r4, r1, r4
    5b7a:	4255      	negs	r5, r2
    5b7c:	1b65      	subs	r5, r4, r5
    5b7e:	4698      	mov	r8, r3
    5b80:	e714      	b.n	59ac <__aeabi_dsub+0xbc>
    5b82:	2501      	movs	r5, #1
    5b84:	4643      	mov	r3, r8
    5b86:	2400      	movs	r4, #0
    5b88:	401d      	ands	r5, r3
    5b8a:	2700      	movs	r7, #0
    5b8c:	e755      	b.n	5a3a <__aeabi_dsub+0x14a>
    5b8e:	4c2a      	ldr	r4, [pc, #168]	; (5c38 <__aeabi_dsub+0x348>)
    5b90:	1af6      	subs	r6, r6, r3
    5b92:	402c      	ands	r4, r5
    5b94:	e732      	b.n	59fc <__aeabi_dsub+0x10c>
    5b96:	003d      	movs	r5, r7
    5b98:	3828      	subs	r0, #40	; 0x28
    5b9a:	4085      	lsls	r5, r0
    5b9c:	2700      	movs	r7, #0
    5b9e:	e717      	b.n	59d0 <__aeabi_dsub+0xe0>
    5ba0:	0038      	movs	r0, r7
    5ba2:	f000 fa27 	bl	5ff4 <__clzsi2>
    5ba6:	3020      	adds	r0, #32
    5ba8:	e706      	b.n	59b8 <__aeabi_dsub+0xc8>
    5baa:	430a      	orrs	r2, r1
    5bac:	0017      	movs	r7, r2
    5bae:	2100      	movs	r1, #0
    5bb0:	1e7a      	subs	r2, r7, #1
    5bb2:	4197      	sbcs	r7, r2
    5bb4:	e6ee      	b.n	5994 <__aeabi_dsub+0xa4>
    5bb6:	2b00      	cmp	r3, #0
    5bb8:	d000      	beq.n	5bbc <__aeabi_dsub+0x2cc>
    5bba:	e0e5      	b.n	5d88 <__aeabi_dsub+0x498>
    5bbc:	1c73      	adds	r3, r6, #1
    5bbe:	469c      	mov	ip, r3
    5bc0:	055b      	lsls	r3, r3, #21
    5bc2:	0d5b      	lsrs	r3, r3, #21
    5bc4:	2b01      	cmp	r3, #1
    5bc6:	dc00      	bgt.n	5bca <__aeabi_dsub+0x2da>
    5bc8:	e09f      	b.n	5d0a <__aeabi_dsub+0x41a>
    5bca:	4b1a      	ldr	r3, [pc, #104]	; (5c34 <__aeabi_dsub+0x344>)
    5bcc:	459c      	cmp	ip, r3
    5bce:	d100      	bne.n	5bd2 <__aeabi_dsub+0x2e2>
    5bd0:	e0c5      	b.n	5d5e <__aeabi_dsub+0x46e>
    5bd2:	4452      	add	r2, sl
    5bd4:	4552      	cmp	r2, sl
    5bd6:	4180      	sbcs	r0, r0
    5bd8:	1864      	adds	r4, r4, r1
    5bda:	4240      	negs	r0, r0
    5bdc:	1824      	adds	r4, r4, r0
    5bde:	07e7      	lsls	r7, r4, #31
    5be0:	0852      	lsrs	r2, r2, #1
    5be2:	4317      	orrs	r7, r2
    5be4:	0864      	lsrs	r4, r4, #1
    5be6:	4666      	mov	r6, ip
    5be8:	e708      	b.n	59fc <__aeabi_dsub+0x10c>
    5bea:	4812      	ldr	r0, [pc, #72]	; (5c34 <__aeabi_dsub+0x344>)
    5bec:	4285      	cmp	r5, r0
    5bee:	d100      	bne.n	5bf2 <__aeabi_dsub+0x302>
    5bf0:	e085      	b.n	5cfe <__aeabi_dsub+0x40e>
    5bf2:	001d      	movs	r5, r3
    5bf4:	e6bc      	b.n	5970 <__aeabi_dsub+0x80>
    5bf6:	0029      	movs	r1, r5
    5bf8:	3e1f      	subs	r6, #31
    5bfa:	40f1      	lsrs	r1, r6
    5bfc:	2b20      	cmp	r3, #32
    5bfe:	d100      	bne.n	5c02 <__aeabi_dsub+0x312>
    5c00:	e07f      	b.n	5d02 <__aeabi_dsub+0x412>
    5c02:	2240      	movs	r2, #64	; 0x40
    5c04:	1ad3      	subs	r3, r2, r3
    5c06:	409d      	lsls	r5, r3
    5c08:	432f      	orrs	r7, r5
    5c0a:	1e7d      	subs	r5, r7, #1
    5c0c:	41af      	sbcs	r7, r5
    5c0e:	2400      	movs	r4, #0
    5c10:	430f      	orrs	r7, r1
    5c12:	2600      	movs	r6, #0
    5c14:	e78e      	b.n	5b34 <__aeabi_dsub+0x244>
    5c16:	002b      	movs	r3, r5
    5c18:	000f      	movs	r7, r1
    5c1a:	3b20      	subs	r3, #32
    5c1c:	40df      	lsrs	r7, r3
    5c1e:	2d20      	cmp	r5, #32
    5c20:	d071      	beq.n	5d06 <__aeabi_dsub+0x416>
    5c22:	2340      	movs	r3, #64	; 0x40
    5c24:	1b5d      	subs	r5, r3, r5
    5c26:	40a9      	lsls	r1, r5
    5c28:	430a      	orrs	r2, r1
    5c2a:	1e51      	subs	r1, r2, #1
    5c2c:	418a      	sbcs	r2, r1
    5c2e:	2100      	movs	r1, #0
    5c30:	4317      	orrs	r7, r2
    5c32:	e6af      	b.n	5994 <__aeabi_dsub+0xa4>
    5c34:	000007ff 	.word	0x000007ff
    5c38:	ff7fffff 	.word	0xff7fffff
    5c3c:	800fffff 	.word	0x800fffff
    5c40:	2e00      	cmp	r6, #0
    5c42:	d03e      	beq.n	5cc2 <__aeabi_dsub+0x3d2>
    5c44:	4eb3      	ldr	r6, [pc, #716]	; (5f14 <__aeabi_dsub+0x624>)
    5c46:	45b4      	cmp	ip, r6
    5c48:	d045      	beq.n	5cd6 <__aeabi_dsub+0x3e6>
    5c4a:	2680      	movs	r6, #128	; 0x80
    5c4c:	0436      	lsls	r6, r6, #16
    5c4e:	426d      	negs	r5, r5
    5c50:	4334      	orrs	r4, r6
    5c52:	2d38      	cmp	r5, #56	; 0x38
    5c54:	dd00      	ble.n	5c58 <__aeabi_dsub+0x368>
    5c56:	e0a8      	b.n	5daa <__aeabi_dsub+0x4ba>
    5c58:	2d1f      	cmp	r5, #31
    5c5a:	dd00      	ble.n	5c5e <__aeabi_dsub+0x36e>
    5c5c:	e11f      	b.n	5e9e <__aeabi_dsub+0x5ae>
    5c5e:	2620      	movs	r6, #32
    5c60:	0027      	movs	r7, r4
    5c62:	4650      	mov	r0, sl
    5c64:	1b76      	subs	r6, r6, r5
    5c66:	40b7      	lsls	r7, r6
    5c68:	40e8      	lsrs	r0, r5
    5c6a:	4307      	orrs	r7, r0
    5c6c:	4650      	mov	r0, sl
    5c6e:	40b0      	lsls	r0, r6
    5c70:	1e46      	subs	r6, r0, #1
    5c72:	41b0      	sbcs	r0, r6
    5c74:	40ec      	lsrs	r4, r5
    5c76:	4338      	orrs	r0, r7
    5c78:	1a17      	subs	r7, r2, r0
    5c7a:	42ba      	cmp	r2, r7
    5c7c:	4192      	sbcs	r2, r2
    5c7e:	1b0c      	subs	r4, r1, r4
    5c80:	4252      	negs	r2, r2
    5c82:	1aa4      	subs	r4, r4, r2
    5c84:	4666      	mov	r6, ip
    5c86:	4698      	mov	r8, r3
    5c88:	e68b      	b.n	59a2 <__aeabi_dsub+0xb2>
    5c8a:	4664      	mov	r4, ip
    5c8c:	4667      	mov	r7, ip
    5c8e:	432c      	orrs	r4, r5
    5c90:	d000      	beq.n	5c94 <__aeabi_dsub+0x3a4>
    5c92:	e68b      	b.n	59ac <__aeabi_dsub+0xbc>
    5c94:	2500      	movs	r5, #0
    5c96:	2600      	movs	r6, #0
    5c98:	2700      	movs	r7, #0
    5c9a:	e6ea      	b.n	5a72 <__aeabi_dsub+0x182>
    5c9c:	001e      	movs	r6, r3
    5c9e:	e6ad      	b.n	59fc <__aeabi_dsub+0x10c>
    5ca0:	2b1f      	cmp	r3, #31
    5ca2:	dc60      	bgt.n	5d66 <__aeabi_dsub+0x476>
    5ca4:	2720      	movs	r7, #32
    5ca6:	1af8      	subs	r0, r7, r3
    5ca8:	000f      	movs	r7, r1
    5caa:	4684      	mov	ip, r0
    5cac:	4087      	lsls	r7, r0
    5cae:	0010      	movs	r0, r2
    5cb0:	40d8      	lsrs	r0, r3
    5cb2:	4307      	orrs	r7, r0
    5cb4:	4660      	mov	r0, ip
    5cb6:	4082      	lsls	r2, r0
    5cb8:	1e50      	subs	r0, r2, #1
    5cba:	4182      	sbcs	r2, r0
    5cbc:	40d9      	lsrs	r1, r3
    5cbe:	4317      	orrs	r7, r2
    5cc0:	e6f5      	b.n	5aae <__aeabi_dsub+0x1be>
    5cc2:	0026      	movs	r6, r4
    5cc4:	4650      	mov	r0, sl
    5cc6:	4306      	orrs	r6, r0
    5cc8:	d005      	beq.n	5cd6 <__aeabi_dsub+0x3e6>
    5cca:	43ed      	mvns	r5, r5
    5ccc:	2d00      	cmp	r5, #0
    5cce:	d0d3      	beq.n	5c78 <__aeabi_dsub+0x388>
    5cd0:	4e90      	ldr	r6, [pc, #576]	; (5f14 <__aeabi_dsub+0x624>)
    5cd2:	45b4      	cmp	ip, r6
    5cd4:	d1bd      	bne.n	5c52 <__aeabi_dsub+0x362>
    5cd6:	000c      	movs	r4, r1
    5cd8:	0017      	movs	r7, r2
    5cda:	4666      	mov	r6, ip
    5cdc:	4698      	mov	r8, r3
    5cde:	e68d      	b.n	59fc <__aeabi_dsub+0x10c>
    5ce0:	488c      	ldr	r0, [pc, #560]	; (5f14 <__aeabi_dsub+0x624>)
    5ce2:	4283      	cmp	r3, r0
    5ce4:	d00b      	beq.n	5cfe <__aeabi_dsub+0x40e>
    5ce6:	4663      	mov	r3, ip
    5ce8:	e6d9      	b.n	5a9e <__aeabi_dsub+0x1ae>
    5cea:	2d00      	cmp	r5, #0
    5cec:	d000      	beq.n	5cf0 <__aeabi_dsub+0x400>
    5cee:	e096      	b.n	5e1e <__aeabi_dsub+0x52e>
    5cf0:	0008      	movs	r0, r1
    5cf2:	4310      	orrs	r0, r2
    5cf4:	d100      	bne.n	5cf8 <__aeabi_dsub+0x408>
    5cf6:	e0e2      	b.n	5ebe <__aeabi_dsub+0x5ce>
    5cf8:	000c      	movs	r4, r1
    5cfa:	0017      	movs	r7, r2
    5cfc:	4698      	mov	r8, r3
    5cfe:	4e85      	ldr	r6, [pc, #532]	; (5f14 <__aeabi_dsub+0x624>)
    5d00:	e67c      	b.n	59fc <__aeabi_dsub+0x10c>
    5d02:	2500      	movs	r5, #0
    5d04:	e780      	b.n	5c08 <__aeabi_dsub+0x318>
    5d06:	2100      	movs	r1, #0
    5d08:	e78e      	b.n	5c28 <__aeabi_dsub+0x338>
    5d0a:	0023      	movs	r3, r4
    5d0c:	4650      	mov	r0, sl
    5d0e:	4303      	orrs	r3, r0
    5d10:	2e00      	cmp	r6, #0
    5d12:	d000      	beq.n	5d16 <__aeabi_dsub+0x426>
    5d14:	e0a8      	b.n	5e68 <__aeabi_dsub+0x578>
    5d16:	2b00      	cmp	r3, #0
    5d18:	d100      	bne.n	5d1c <__aeabi_dsub+0x42c>
    5d1a:	e0de      	b.n	5eda <__aeabi_dsub+0x5ea>
    5d1c:	000b      	movs	r3, r1
    5d1e:	4313      	orrs	r3, r2
    5d20:	d100      	bne.n	5d24 <__aeabi_dsub+0x434>
    5d22:	e66b      	b.n	59fc <__aeabi_dsub+0x10c>
    5d24:	4452      	add	r2, sl
    5d26:	4552      	cmp	r2, sl
    5d28:	4180      	sbcs	r0, r0
    5d2a:	1864      	adds	r4, r4, r1
    5d2c:	4240      	negs	r0, r0
    5d2e:	1824      	adds	r4, r4, r0
    5d30:	0017      	movs	r7, r2
    5d32:	0223      	lsls	r3, r4, #8
    5d34:	d400      	bmi.n	5d38 <__aeabi_dsub+0x448>
    5d36:	e6fd      	b.n	5b34 <__aeabi_dsub+0x244>
    5d38:	4b77      	ldr	r3, [pc, #476]	; (5f18 <__aeabi_dsub+0x628>)
    5d3a:	4666      	mov	r6, ip
    5d3c:	401c      	ands	r4, r3
    5d3e:	e65d      	b.n	59fc <__aeabi_dsub+0x10c>
    5d40:	0025      	movs	r5, r4
    5d42:	4650      	mov	r0, sl
    5d44:	4305      	orrs	r5, r0
    5d46:	2e00      	cmp	r6, #0
    5d48:	d1cf      	bne.n	5cea <__aeabi_dsub+0x3fa>
    5d4a:	2d00      	cmp	r5, #0
    5d4c:	d14f      	bne.n	5dee <__aeabi_dsub+0x4fe>
    5d4e:	000c      	movs	r4, r1
    5d50:	4314      	orrs	r4, r2
    5d52:	d100      	bne.n	5d56 <__aeabi_dsub+0x466>
    5d54:	e0a0      	b.n	5e98 <__aeabi_dsub+0x5a8>
    5d56:	000c      	movs	r4, r1
    5d58:	0017      	movs	r7, r2
    5d5a:	4698      	mov	r8, r3
    5d5c:	e64e      	b.n	59fc <__aeabi_dsub+0x10c>
    5d5e:	4666      	mov	r6, ip
    5d60:	2400      	movs	r4, #0
    5d62:	2700      	movs	r7, #0
    5d64:	e685      	b.n	5a72 <__aeabi_dsub+0x182>
    5d66:	001f      	movs	r7, r3
    5d68:	0008      	movs	r0, r1
    5d6a:	3f20      	subs	r7, #32
    5d6c:	40f8      	lsrs	r0, r7
    5d6e:	0007      	movs	r7, r0
    5d70:	2b20      	cmp	r3, #32
    5d72:	d100      	bne.n	5d76 <__aeabi_dsub+0x486>
    5d74:	e08e      	b.n	5e94 <__aeabi_dsub+0x5a4>
    5d76:	2040      	movs	r0, #64	; 0x40
    5d78:	1ac3      	subs	r3, r0, r3
    5d7a:	4099      	lsls	r1, r3
    5d7c:	430a      	orrs	r2, r1
    5d7e:	1e51      	subs	r1, r2, #1
    5d80:	418a      	sbcs	r2, r1
    5d82:	2100      	movs	r1, #0
    5d84:	4317      	orrs	r7, r2
    5d86:	e692      	b.n	5aae <__aeabi_dsub+0x1be>
    5d88:	2e00      	cmp	r6, #0
    5d8a:	d114      	bne.n	5db6 <__aeabi_dsub+0x4c6>
    5d8c:	0026      	movs	r6, r4
    5d8e:	4650      	mov	r0, sl
    5d90:	4306      	orrs	r6, r0
    5d92:	d062      	beq.n	5e5a <__aeabi_dsub+0x56a>
    5d94:	43db      	mvns	r3, r3
    5d96:	2b00      	cmp	r3, #0
    5d98:	d15c      	bne.n	5e54 <__aeabi_dsub+0x564>
    5d9a:	1887      	adds	r7, r0, r2
    5d9c:	4297      	cmp	r7, r2
    5d9e:	4192      	sbcs	r2, r2
    5da0:	1864      	adds	r4, r4, r1
    5da2:	4252      	negs	r2, r2
    5da4:	18a4      	adds	r4, r4, r2
    5da6:	4666      	mov	r6, ip
    5da8:	e687      	b.n	5aba <__aeabi_dsub+0x1ca>
    5daa:	4650      	mov	r0, sl
    5dac:	4320      	orrs	r0, r4
    5dae:	1e44      	subs	r4, r0, #1
    5db0:	41a0      	sbcs	r0, r4
    5db2:	2400      	movs	r4, #0
    5db4:	e760      	b.n	5c78 <__aeabi_dsub+0x388>
    5db6:	4e57      	ldr	r6, [pc, #348]	; (5f14 <__aeabi_dsub+0x624>)
    5db8:	45b4      	cmp	ip, r6
    5dba:	d04e      	beq.n	5e5a <__aeabi_dsub+0x56a>
    5dbc:	2680      	movs	r6, #128	; 0x80
    5dbe:	0436      	lsls	r6, r6, #16
    5dc0:	425b      	negs	r3, r3
    5dc2:	4334      	orrs	r4, r6
    5dc4:	2b38      	cmp	r3, #56	; 0x38
    5dc6:	dd00      	ble.n	5dca <__aeabi_dsub+0x4da>
    5dc8:	e07f      	b.n	5eca <__aeabi_dsub+0x5da>
    5dca:	2b1f      	cmp	r3, #31
    5dcc:	dd00      	ble.n	5dd0 <__aeabi_dsub+0x4e0>
    5dce:	e08b      	b.n	5ee8 <__aeabi_dsub+0x5f8>
    5dd0:	2620      	movs	r6, #32
    5dd2:	0027      	movs	r7, r4
    5dd4:	4650      	mov	r0, sl
    5dd6:	1af6      	subs	r6, r6, r3
    5dd8:	40b7      	lsls	r7, r6
    5dda:	40d8      	lsrs	r0, r3
    5ddc:	4307      	orrs	r7, r0
    5dde:	4650      	mov	r0, sl
    5de0:	40b0      	lsls	r0, r6
    5de2:	1e46      	subs	r6, r0, #1
    5de4:	41b0      	sbcs	r0, r6
    5de6:	4307      	orrs	r7, r0
    5de8:	40dc      	lsrs	r4, r3
    5dea:	18bf      	adds	r7, r7, r2
    5dec:	e7d6      	b.n	5d9c <__aeabi_dsub+0x4ac>
    5dee:	000d      	movs	r5, r1
    5df0:	4315      	orrs	r5, r2
    5df2:	d100      	bne.n	5df6 <__aeabi_dsub+0x506>
    5df4:	e602      	b.n	59fc <__aeabi_dsub+0x10c>
    5df6:	4650      	mov	r0, sl
    5df8:	1a80      	subs	r0, r0, r2
    5dfa:	4582      	cmp	sl, r0
    5dfc:	41bf      	sbcs	r7, r7
    5dfe:	1a65      	subs	r5, r4, r1
    5e00:	427f      	negs	r7, r7
    5e02:	1bed      	subs	r5, r5, r7
    5e04:	4684      	mov	ip, r0
    5e06:	0228      	lsls	r0, r5, #8
    5e08:	d400      	bmi.n	5e0c <__aeabi_dsub+0x51c>
    5e0a:	e68d      	b.n	5b28 <__aeabi_dsub+0x238>
    5e0c:	4650      	mov	r0, sl
    5e0e:	1a17      	subs	r7, r2, r0
    5e10:	42ba      	cmp	r2, r7
    5e12:	4192      	sbcs	r2, r2
    5e14:	1b0c      	subs	r4, r1, r4
    5e16:	4252      	negs	r2, r2
    5e18:	1aa4      	subs	r4, r4, r2
    5e1a:	4698      	mov	r8, r3
    5e1c:	e5ee      	b.n	59fc <__aeabi_dsub+0x10c>
    5e1e:	000d      	movs	r5, r1
    5e20:	4315      	orrs	r5, r2
    5e22:	d100      	bne.n	5e26 <__aeabi_dsub+0x536>
    5e24:	e76b      	b.n	5cfe <__aeabi_dsub+0x40e>
    5e26:	4650      	mov	r0, sl
    5e28:	0767      	lsls	r7, r4, #29
    5e2a:	08c0      	lsrs	r0, r0, #3
    5e2c:	4307      	orrs	r7, r0
    5e2e:	2080      	movs	r0, #128	; 0x80
    5e30:	08e4      	lsrs	r4, r4, #3
    5e32:	0300      	lsls	r0, r0, #12
    5e34:	4204      	tst	r4, r0
    5e36:	d007      	beq.n	5e48 <__aeabi_dsub+0x558>
    5e38:	08cd      	lsrs	r5, r1, #3
    5e3a:	4205      	tst	r5, r0
    5e3c:	d104      	bne.n	5e48 <__aeabi_dsub+0x558>
    5e3e:	002c      	movs	r4, r5
    5e40:	4698      	mov	r8, r3
    5e42:	08d7      	lsrs	r7, r2, #3
    5e44:	0749      	lsls	r1, r1, #29
    5e46:	430f      	orrs	r7, r1
    5e48:	0f7b      	lsrs	r3, r7, #29
    5e4a:	00e4      	lsls	r4, r4, #3
    5e4c:	431c      	orrs	r4, r3
    5e4e:	00ff      	lsls	r7, r7, #3
    5e50:	4e30      	ldr	r6, [pc, #192]	; (5f14 <__aeabi_dsub+0x624>)
    5e52:	e5d3      	b.n	59fc <__aeabi_dsub+0x10c>
    5e54:	4e2f      	ldr	r6, [pc, #188]	; (5f14 <__aeabi_dsub+0x624>)
    5e56:	45b4      	cmp	ip, r6
    5e58:	d1b4      	bne.n	5dc4 <__aeabi_dsub+0x4d4>
    5e5a:	000c      	movs	r4, r1
    5e5c:	0017      	movs	r7, r2
    5e5e:	4666      	mov	r6, ip
    5e60:	e5cc      	b.n	59fc <__aeabi_dsub+0x10c>
    5e62:	2700      	movs	r7, #0
    5e64:	2400      	movs	r4, #0
    5e66:	e5e8      	b.n	5a3a <__aeabi_dsub+0x14a>
    5e68:	2b00      	cmp	r3, #0
    5e6a:	d039      	beq.n	5ee0 <__aeabi_dsub+0x5f0>
    5e6c:	000b      	movs	r3, r1
    5e6e:	4313      	orrs	r3, r2
    5e70:	d100      	bne.n	5e74 <__aeabi_dsub+0x584>
    5e72:	e744      	b.n	5cfe <__aeabi_dsub+0x40e>
    5e74:	08c0      	lsrs	r0, r0, #3
    5e76:	0767      	lsls	r7, r4, #29
    5e78:	4307      	orrs	r7, r0
    5e7a:	2080      	movs	r0, #128	; 0x80
    5e7c:	08e4      	lsrs	r4, r4, #3
    5e7e:	0300      	lsls	r0, r0, #12
    5e80:	4204      	tst	r4, r0
    5e82:	d0e1      	beq.n	5e48 <__aeabi_dsub+0x558>
    5e84:	08cb      	lsrs	r3, r1, #3
    5e86:	4203      	tst	r3, r0
    5e88:	d1de      	bne.n	5e48 <__aeabi_dsub+0x558>
    5e8a:	08d7      	lsrs	r7, r2, #3
    5e8c:	0749      	lsls	r1, r1, #29
    5e8e:	430f      	orrs	r7, r1
    5e90:	001c      	movs	r4, r3
    5e92:	e7d9      	b.n	5e48 <__aeabi_dsub+0x558>
    5e94:	2100      	movs	r1, #0
    5e96:	e771      	b.n	5d7c <__aeabi_dsub+0x48c>
    5e98:	2500      	movs	r5, #0
    5e9a:	2700      	movs	r7, #0
    5e9c:	e5e9      	b.n	5a72 <__aeabi_dsub+0x182>
    5e9e:	002e      	movs	r6, r5
    5ea0:	0027      	movs	r7, r4
    5ea2:	3e20      	subs	r6, #32
    5ea4:	40f7      	lsrs	r7, r6
    5ea6:	2d20      	cmp	r5, #32
    5ea8:	d02f      	beq.n	5f0a <__aeabi_dsub+0x61a>
    5eaa:	2640      	movs	r6, #64	; 0x40
    5eac:	1b75      	subs	r5, r6, r5
    5eae:	40ac      	lsls	r4, r5
    5eb0:	4650      	mov	r0, sl
    5eb2:	4320      	orrs	r0, r4
    5eb4:	1e44      	subs	r4, r0, #1
    5eb6:	41a0      	sbcs	r0, r4
    5eb8:	2400      	movs	r4, #0
    5eba:	4338      	orrs	r0, r7
    5ebc:	e6dc      	b.n	5c78 <__aeabi_dsub+0x388>
    5ebe:	2480      	movs	r4, #128	; 0x80
    5ec0:	2500      	movs	r5, #0
    5ec2:	0324      	lsls	r4, r4, #12
    5ec4:	4e13      	ldr	r6, [pc, #76]	; (5f14 <__aeabi_dsub+0x624>)
    5ec6:	2700      	movs	r7, #0
    5ec8:	e5d3      	b.n	5a72 <__aeabi_dsub+0x182>
    5eca:	4650      	mov	r0, sl
    5ecc:	4320      	orrs	r0, r4
    5ece:	0007      	movs	r7, r0
    5ed0:	1e78      	subs	r0, r7, #1
    5ed2:	4187      	sbcs	r7, r0
    5ed4:	2400      	movs	r4, #0
    5ed6:	18bf      	adds	r7, r7, r2
    5ed8:	e760      	b.n	5d9c <__aeabi_dsub+0x4ac>
    5eda:	000c      	movs	r4, r1
    5edc:	0017      	movs	r7, r2
    5ede:	e58d      	b.n	59fc <__aeabi_dsub+0x10c>
    5ee0:	000c      	movs	r4, r1
    5ee2:	0017      	movs	r7, r2
    5ee4:	4e0b      	ldr	r6, [pc, #44]	; (5f14 <__aeabi_dsub+0x624>)
    5ee6:	e589      	b.n	59fc <__aeabi_dsub+0x10c>
    5ee8:	001e      	movs	r6, r3
    5eea:	0027      	movs	r7, r4
    5eec:	3e20      	subs	r6, #32
    5eee:	40f7      	lsrs	r7, r6
    5ef0:	2b20      	cmp	r3, #32
    5ef2:	d00c      	beq.n	5f0e <__aeabi_dsub+0x61e>
    5ef4:	2640      	movs	r6, #64	; 0x40
    5ef6:	1af3      	subs	r3, r6, r3
    5ef8:	409c      	lsls	r4, r3
    5efa:	4650      	mov	r0, sl
    5efc:	4320      	orrs	r0, r4
    5efe:	1e44      	subs	r4, r0, #1
    5f00:	41a0      	sbcs	r0, r4
    5f02:	4307      	orrs	r7, r0
    5f04:	2400      	movs	r4, #0
    5f06:	18bf      	adds	r7, r7, r2
    5f08:	e748      	b.n	5d9c <__aeabi_dsub+0x4ac>
    5f0a:	2400      	movs	r4, #0
    5f0c:	e7d0      	b.n	5eb0 <__aeabi_dsub+0x5c0>
    5f0e:	2400      	movs	r4, #0
    5f10:	e7f3      	b.n	5efa <__aeabi_dsub+0x60a>
    5f12:	46c0      	nop			; (mov r8, r8)
    5f14:	000007ff 	.word	0x000007ff
    5f18:	ff7fffff 	.word	0xff7fffff

00005f1c <__aeabi_d2iz>:
    5f1c:	b530      	push	{r4, r5, lr}
    5f1e:	4d13      	ldr	r5, [pc, #76]	; (5f6c <__aeabi_d2iz+0x50>)
    5f20:	030a      	lsls	r2, r1, #12
    5f22:	004b      	lsls	r3, r1, #1
    5f24:	0b12      	lsrs	r2, r2, #12
    5f26:	0d5b      	lsrs	r3, r3, #21
    5f28:	0fc9      	lsrs	r1, r1, #31
    5f2a:	2400      	movs	r4, #0
    5f2c:	42ab      	cmp	r3, r5
    5f2e:	dd10      	ble.n	5f52 <__aeabi_d2iz+0x36>
    5f30:	4c0f      	ldr	r4, [pc, #60]	; (5f70 <__aeabi_d2iz+0x54>)
    5f32:	42a3      	cmp	r3, r4
    5f34:	dc0f      	bgt.n	5f56 <__aeabi_d2iz+0x3a>
    5f36:	2480      	movs	r4, #128	; 0x80
    5f38:	4d0e      	ldr	r5, [pc, #56]	; (5f74 <__aeabi_d2iz+0x58>)
    5f3a:	0364      	lsls	r4, r4, #13
    5f3c:	4322      	orrs	r2, r4
    5f3e:	1aed      	subs	r5, r5, r3
    5f40:	2d1f      	cmp	r5, #31
    5f42:	dd0b      	ble.n	5f5c <__aeabi_d2iz+0x40>
    5f44:	480c      	ldr	r0, [pc, #48]	; (5f78 <__aeabi_d2iz+0x5c>)
    5f46:	1ac3      	subs	r3, r0, r3
    5f48:	40da      	lsrs	r2, r3
    5f4a:	4254      	negs	r4, r2
    5f4c:	2900      	cmp	r1, #0
    5f4e:	d100      	bne.n	5f52 <__aeabi_d2iz+0x36>
    5f50:	0014      	movs	r4, r2
    5f52:	0020      	movs	r0, r4
    5f54:	bd30      	pop	{r4, r5, pc}
    5f56:	4b09      	ldr	r3, [pc, #36]	; (5f7c <__aeabi_d2iz+0x60>)
    5f58:	18cc      	adds	r4, r1, r3
    5f5a:	e7fa      	b.n	5f52 <__aeabi_d2iz+0x36>
    5f5c:	4c08      	ldr	r4, [pc, #32]	; (5f80 <__aeabi_d2iz+0x64>)
    5f5e:	40e8      	lsrs	r0, r5
    5f60:	46a4      	mov	ip, r4
    5f62:	4463      	add	r3, ip
    5f64:	409a      	lsls	r2, r3
    5f66:	4302      	orrs	r2, r0
    5f68:	e7ef      	b.n	5f4a <__aeabi_d2iz+0x2e>
    5f6a:	46c0      	nop			; (mov r8, r8)
    5f6c:	000003fe 	.word	0x000003fe
    5f70:	0000041d 	.word	0x0000041d
    5f74:	00000433 	.word	0x00000433
    5f78:	00000413 	.word	0x00000413
    5f7c:	7fffffff 	.word	0x7fffffff
    5f80:	fffffbed 	.word	0xfffffbed

00005f84 <__aeabi_ui2d>:
    5f84:	b510      	push	{r4, lr}
    5f86:	1e04      	subs	r4, r0, #0
    5f88:	d028      	beq.n	5fdc <__aeabi_ui2d+0x58>
    5f8a:	f000 f833 	bl	5ff4 <__clzsi2>
    5f8e:	4b15      	ldr	r3, [pc, #84]	; (5fe4 <__aeabi_ui2d+0x60>)
    5f90:	4a15      	ldr	r2, [pc, #84]	; (5fe8 <__aeabi_ui2d+0x64>)
    5f92:	1a1b      	subs	r3, r3, r0
    5f94:	1ad2      	subs	r2, r2, r3
    5f96:	2a1f      	cmp	r2, #31
    5f98:	dd15      	ble.n	5fc6 <__aeabi_ui2d+0x42>
    5f9a:	4a14      	ldr	r2, [pc, #80]	; (5fec <__aeabi_ui2d+0x68>)
    5f9c:	1ad2      	subs	r2, r2, r3
    5f9e:	4094      	lsls	r4, r2
    5fa0:	2200      	movs	r2, #0
    5fa2:	0324      	lsls	r4, r4, #12
    5fa4:	055b      	lsls	r3, r3, #21
    5fa6:	0b24      	lsrs	r4, r4, #12
    5fa8:	0d5b      	lsrs	r3, r3, #21
    5faa:	2100      	movs	r1, #0
    5fac:	0010      	movs	r0, r2
    5fae:	0324      	lsls	r4, r4, #12
    5fb0:	0d0a      	lsrs	r2, r1, #20
    5fb2:	0b24      	lsrs	r4, r4, #12
    5fb4:	0512      	lsls	r2, r2, #20
    5fb6:	4322      	orrs	r2, r4
    5fb8:	4c0d      	ldr	r4, [pc, #52]	; (5ff0 <__aeabi_ui2d+0x6c>)
    5fba:	051b      	lsls	r3, r3, #20
    5fbc:	4022      	ands	r2, r4
    5fbe:	4313      	orrs	r3, r2
    5fc0:	005b      	lsls	r3, r3, #1
    5fc2:	0859      	lsrs	r1, r3, #1
    5fc4:	bd10      	pop	{r4, pc}
    5fc6:	0021      	movs	r1, r4
    5fc8:	4091      	lsls	r1, r2
    5fca:	000a      	movs	r2, r1
    5fcc:	210b      	movs	r1, #11
    5fce:	1a08      	subs	r0, r1, r0
    5fd0:	40c4      	lsrs	r4, r0
    5fd2:	055b      	lsls	r3, r3, #21
    5fd4:	0324      	lsls	r4, r4, #12
    5fd6:	0b24      	lsrs	r4, r4, #12
    5fd8:	0d5b      	lsrs	r3, r3, #21
    5fda:	e7e6      	b.n	5faa <__aeabi_ui2d+0x26>
    5fdc:	2300      	movs	r3, #0
    5fde:	2400      	movs	r4, #0
    5fe0:	2200      	movs	r2, #0
    5fe2:	e7e2      	b.n	5faa <__aeabi_ui2d+0x26>
    5fe4:	0000041e 	.word	0x0000041e
    5fe8:	00000433 	.word	0x00000433
    5fec:	00000413 	.word	0x00000413
    5ff0:	800fffff 	.word	0x800fffff

00005ff4 <__clzsi2>:
    5ff4:	211c      	movs	r1, #28
    5ff6:	2301      	movs	r3, #1
    5ff8:	041b      	lsls	r3, r3, #16
    5ffa:	4298      	cmp	r0, r3
    5ffc:	d301      	bcc.n	6002 <__clzsi2+0xe>
    5ffe:	0c00      	lsrs	r0, r0, #16
    6000:	3910      	subs	r1, #16
    6002:	0a1b      	lsrs	r3, r3, #8
    6004:	4298      	cmp	r0, r3
    6006:	d301      	bcc.n	600c <__clzsi2+0x18>
    6008:	0a00      	lsrs	r0, r0, #8
    600a:	3908      	subs	r1, #8
    600c:	091b      	lsrs	r3, r3, #4
    600e:	4298      	cmp	r0, r3
    6010:	d301      	bcc.n	6016 <__clzsi2+0x22>
    6012:	0900      	lsrs	r0, r0, #4
    6014:	3904      	subs	r1, #4
    6016:	a202      	add	r2, pc, #8	; (adr r2, 6020 <__clzsi2+0x2c>)
    6018:	5c10      	ldrb	r0, [r2, r0]
    601a:	1840      	adds	r0, r0, r1
    601c:	4770      	bx	lr
    601e:	46c0      	nop			; (mov r8, r8)
    6020:	02020304 	.word	0x02020304
    6024:	01010101 	.word	0x01010101
	...

00006030 <__libc_init_array>:
    6030:	b570      	push	{r4, r5, r6, lr}
    6032:	2600      	movs	r6, #0
    6034:	4d0c      	ldr	r5, [pc, #48]	; (6068 <__libc_init_array+0x38>)
    6036:	4c0d      	ldr	r4, [pc, #52]	; (606c <__libc_init_array+0x3c>)
    6038:	1b64      	subs	r4, r4, r5
    603a:	10a4      	asrs	r4, r4, #2
    603c:	42a6      	cmp	r6, r4
    603e:	d109      	bne.n	6054 <__libc_init_array+0x24>
    6040:	2600      	movs	r6, #0
    6042:	f000 fd6d 	bl	6b20 <_init>
    6046:	4d0a      	ldr	r5, [pc, #40]	; (6070 <__libc_init_array+0x40>)
    6048:	4c0a      	ldr	r4, [pc, #40]	; (6074 <__libc_init_array+0x44>)
    604a:	1b64      	subs	r4, r4, r5
    604c:	10a4      	asrs	r4, r4, #2
    604e:	42a6      	cmp	r6, r4
    6050:	d105      	bne.n	605e <__libc_init_array+0x2e>
    6052:	bd70      	pop	{r4, r5, r6, pc}
    6054:	00b3      	lsls	r3, r6, #2
    6056:	58eb      	ldr	r3, [r5, r3]
    6058:	4798      	blx	r3
    605a:	3601      	adds	r6, #1
    605c:	e7ee      	b.n	603c <__libc_init_array+0xc>
    605e:	00b3      	lsls	r3, r6, #2
    6060:	58eb      	ldr	r3, [r5, r3]
    6062:	4798      	blx	r3
    6064:	3601      	adds	r6, #1
    6066:	e7f2      	b.n	604e <__libc_init_array+0x1e>
    6068:	00006b2c 	.word	0x00006b2c
    606c:	00006b2c 	.word	0x00006b2c
    6070:	00006b2c 	.word	0x00006b2c
    6074:	00006b30 	.word	0x00006b30

00006078 <memcpy>:
    6078:	2300      	movs	r3, #0
    607a:	b510      	push	{r4, lr}
    607c:	429a      	cmp	r2, r3
    607e:	d100      	bne.n	6082 <memcpy+0xa>
    6080:	bd10      	pop	{r4, pc}
    6082:	5ccc      	ldrb	r4, [r1, r3]
    6084:	54c4      	strb	r4, [r0, r3]
    6086:	3301      	adds	r3, #1
    6088:	e7f8      	b.n	607c <memcpy+0x4>

0000608a <memset>:
    608a:	0003      	movs	r3, r0
    608c:	1882      	adds	r2, r0, r2
    608e:	4293      	cmp	r3, r2
    6090:	d100      	bne.n	6094 <memset+0xa>
    6092:	4770      	bx	lr
    6094:	7019      	strb	r1, [r3, #0]
    6096:	3301      	adds	r3, #1
    6098:	e7f9      	b.n	608e <memset+0x4>

0000609a <setbuf>:
    609a:	424a      	negs	r2, r1
    609c:	414a      	adcs	r2, r1
    609e:	2380      	movs	r3, #128	; 0x80
    60a0:	b510      	push	{r4, lr}
    60a2:	0052      	lsls	r2, r2, #1
    60a4:	00db      	lsls	r3, r3, #3
    60a6:	f000 f801 	bl	60ac <setvbuf>
    60aa:	bd10      	pop	{r4, pc}

000060ac <setvbuf>:
    60ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    60ae:	001d      	movs	r5, r3
    60b0:	4b4f      	ldr	r3, [pc, #316]	; (61f0 <setvbuf+0x144>)
    60b2:	b085      	sub	sp, #20
    60b4:	681e      	ldr	r6, [r3, #0]
    60b6:	0004      	movs	r4, r0
    60b8:	000f      	movs	r7, r1
    60ba:	9200      	str	r2, [sp, #0]
    60bc:	2e00      	cmp	r6, #0
    60be:	d005      	beq.n	60cc <setvbuf+0x20>
    60c0:	69b3      	ldr	r3, [r6, #24]
    60c2:	2b00      	cmp	r3, #0
    60c4:	d102      	bne.n	60cc <setvbuf+0x20>
    60c6:	0030      	movs	r0, r6
    60c8:	f000 f994 	bl	63f4 <__sinit>
    60cc:	4b49      	ldr	r3, [pc, #292]	; (61f4 <setvbuf+0x148>)
    60ce:	429c      	cmp	r4, r3
    60d0:	d150      	bne.n	6174 <setvbuf+0xc8>
    60d2:	6874      	ldr	r4, [r6, #4]
    60d4:	9b00      	ldr	r3, [sp, #0]
    60d6:	2b02      	cmp	r3, #2
    60d8:	d005      	beq.n	60e6 <setvbuf+0x3a>
    60da:	2b01      	cmp	r3, #1
    60dc:	d900      	bls.n	60e0 <setvbuf+0x34>
    60de:	e084      	b.n	61ea <setvbuf+0x13e>
    60e0:	2d00      	cmp	r5, #0
    60e2:	da00      	bge.n	60e6 <setvbuf+0x3a>
    60e4:	e081      	b.n	61ea <setvbuf+0x13e>
    60e6:	0021      	movs	r1, r4
    60e8:	0030      	movs	r0, r6
    60ea:	f000 f915 	bl	6318 <_fflush_r>
    60ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
    60f0:	2900      	cmp	r1, #0
    60f2:	d008      	beq.n	6106 <setvbuf+0x5a>
    60f4:	0023      	movs	r3, r4
    60f6:	3344      	adds	r3, #68	; 0x44
    60f8:	4299      	cmp	r1, r3
    60fa:	d002      	beq.n	6102 <setvbuf+0x56>
    60fc:	0030      	movs	r0, r6
    60fe:	f000 fa41 	bl	6584 <_free_r>
    6102:	2300      	movs	r3, #0
    6104:	6363      	str	r3, [r4, #52]	; 0x34
    6106:	2300      	movs	r3, #0
    6108:	61a3      	str	r3, [r4, #24]
    610a:	6063      	str	r3, [r4, #4]
    610c:	89a3      	ldrh	r3, [r4, #12]
    610e:	061b      	lsls	r3, r3, #24
    6110:	d503      	bpl.n	611a <setvbuf+0x6e>
    6112:	6921      	ldr	r1, [r4, #16]
    6114:	0030      	movs	r0, r6
    6116:	f000 fa35 	bl	6584 <_free_r>
    611a:	89a3      	ldrh	r3, [r4, #12]
    611c:	4a36      	ldr	r2, [pc, #216]	; (61f8 <setvbuf+0x14c>)
    611e:	4013      	ands	r3, r2
    6120:	81a3      	strh	r3, [r4, #12]
    6122:	9b00      	ldr	r3, [sp, #0]
    6124:	2b02      	cmp	r3, #2
    6126:	d05a      	beq.n	61de <setvbuf+0x132>
    6128:	ab03      	add	r3, sp, #12
    612a:	aa02      	add	r2, sp, #8
    612c:	0021      	movs	r1, r4
    612e:	0030      	movs	r0, r6
    6130:	f000 f9f6 	bl	6520 <__swhatbuf_r>
    6134:	89a3      	ldrh	r3, [r4, #12]
    6136:	4318      	orrs	r0, r3
    6138:	81a0      	strh	r0, [r4, #12]
    613a:	2d00      	cmp	r5, #0
    613c:	d124      	bne.n	6188 <setvbuf+0xdc>
    613e:	9d02      	ldr	r5, [sp, #8]
    6140:	0028      	movs	r0, r5
    6142:	f000 fa15 	bl	6570 <malloc>
    6146:	9501      	str	r5, [sp, #4]
    6148:	1e07      	subs	r7, r0, #0
    614a:	d142      	bne.n	61d2 <setvbuf+0x126>
    614c:	9b02      	ldr	r3, [sp, #8]
    614e:	9301      	str	r3, [sp, #4]
    6150:	42ab      	cmp	r3, r5
    6152:	d139      	bne.n	61c8 <setvbuf+0x11c>
    6154:	2001      	movs	r0, #1
    6156:	4240      	negs	r0, r0
    6158:	2302      	movs	r3, #2
    615a:	89a2      	ldrh	r2, [r4, #12]
    615c:	4313      	orrs	r3, r2
    615e:	81a3      	strh	r3, [r4, #12]
    6160:	2300      	movs	r3, #0
    6162:	60a3      	str	r3, [r4, #8]
    6164:	0023      	movs	r3, r4
    6166:	3347      	adds	r3, #71	; 0x47
    6168:	6023      	str	r3, [r4, #0]
    616a:	6123      	str	r3, [r4, #16]
    616c:	2301      	movs	r3, #1
    616e:	6163      	str	r3, [r4, #20]
    6170:	b005      	add	sp, #20
    6172:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6174:	4b21      	ldr	r3, [pc, #132]	; (61fc <setvbuf+0x150>)
    6176:	429c      	cmp	r4, r3
    6178:	d101      	bne.n	617e <setvbuf+0xd2>
    617a:	68b4      	ldr	r4, [r6, #8]
    617c:	e7aa      	b.n	60d4 <setvbuf+0x28>
    617e:	4b20      	ldr	r3, [pc, #128]	; (6200 <setvbuf+0x154>)
    6180:	429c      	cmp	r4, r3
    6182:	d1a7      	bne.n	60d4 <setvbuf+0x28>
    6184:	68f4      	ldr	r4, [r6, #12]
    6186:	e7a5      	b.n	60d4 <setvbuf+0x28>
    6188:	2f00      	cmp	r7, #0
    618a:	d0d9      	beq.n	6140 <setvbuf+0x94>
    618c:	69b3      	ldr	r3, [r6, #24]
    618e:	2b00      	cmp	r3, #0
    6190:	d102      	bne.n	6198 <setvbuf+0xec>
    6192:	0030      	movs	r0, r6
    6194:	f000 f92e 	bl	63f4 <__sinit>
    6198:	9b00      	ldr	r3, [sp, #0]
    619a:	2b01      	cmp	r3, #1
    619c:	d103      	bne.n	61a6 <setvbuf+0xfa>
    619e:	89a3      	ldrh	r3, [r4, #12]
    61a0:	9a00      	ldr	r2, [sp, #0]
    61a2:	431a      	orrs	r2, r3
    61a4:	81a2      	strh	r2, [r4, #12]
    61a6:	2008      	movs	r0, #8
    61a8:	89a3      	ldrh	r3, [r4, #12]
    61aa:	6027      	str	r7, [r4, #0]
    61ac:	6127      	str	r7, [r4, #16]
    61ae:	6165      	str	r5, [r4, #20]
    61b0:	4018      	ands	r0, r3
    61b2:	d018      	beq.n	61e6 <setvbuf+0x13a>
    61b4:	2001      	movs	r0, #1
    61b6:	4018      	ands	r0, r3
    61b8:	2300      	movs	r3, #0
    61ba:	4298      	cmp	r0, r3
    61bc:	d011      	beq.n	61e2 <setvbuf+0x136>
    61be:	426d      	negs	r5, r5
    61c0:	60a3      	str	r3, [r4, #8]
    61c2:	61a5      	str	r5, [r4, #24]
    61c4:	0018      	movs	r0, r3
    61c6:	e7d3      	b.n	6170 <setvbuf+0xc4>
    61c8:	9801      	ldr	r0, [sp, #4]
    61ca:	f000 f9d1 	bl	6570 <malloc>
    61ce:	1e07      	subs	r7, r0, #0
    61d0:	d0c0      	beq.n	6154 <setvbuf+0xa8>
    61d2:	2380      	movs	r3, #128	; 0x80
    61d4:	89a2      	ldrh	r2, [r4, #12]
    61d6:	9d01      	ldr	r5, [sp, #4]
    61d8:	4313      	orrs	r3, r2
    61da:	81a3      	strh	r3, [r4, #12]
    61dc:	e7d6      	b.n	618c <setvbuf+0xe0>
    61de:	2000      	movs	r0, #0
    61e0:	e7ba      	b.n	6158 <setvbuf+0xac>
    61e2:	60a5      	str	r5, [r4, #8]
    61e4:	e7c4      	b.n	6170 <setvbuf+0xc4>
    61e6:	60a0      	str	r0, [r4, #8]
    61e8:	e7c2      	b.n	6170 <setvbuf+0xc4>
    61ea:	2001      	movs	r0, #1
    61ec:	4240      	negs	r0, r0
    61ee:	e7bf      	b.n	6170 <setvbuf+0xc4>
    61f0:	2000004c 	.word	0x2000004c
    61f4:	00006ae0 	.word	0x00006ae0
    61f8:	fffff35c 	.word	0xfffff35c
    61fc:	00006b00 	.word	0x00006b00
    6200:	00006ac0 	.word	0x00006ac0

00006204 <__sflush_r>:
    6204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6206:	898a      	ldrh	r2, [r1, #12]
    6208:	0005      	movs	r5, r0
    620a:	000c      	movs	r4, r1
    620c:	0713      	lsls	r3, r2, #28
    620e:	d460      	bmi.n	62d2 <__sflush_r+0xce>
    6210:	684b      	ldr	r3, [r1, #4]
    6212:	2b00      	cmp	r3, #0
    6214:	dc04      	bgt.n	6220 <__sflush_r+0x1c>
    6216:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6218:	2b00      	cmp	r3, #0
    621a:	dc01      	bgt.n	6220 <__sflush_r+0x1c>
    621c:	2000      	movs	r0, #0
    621e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6220:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6222:	2f00      	cmp	r7, #0
    6224:	d0fa      	beq.n	621c <__sflush_r+0x18>
    6226:	2300      	movs	r3, #0
    6228:	682e      	ldr	r6, [r5, #0]
    622a:	602b      	str	r3, [r5, #0]
    622c:	2380      	movs	r3, #128	; 0x80
    622e:	015b      	lsls	r3, r3, #5
    6230:	401a      	ands	r2, r3
    6232:	d034      	beq.n	629e <__sflush_r+0x9a>
    6234:	6d60      	ldr	r0, [r4, #84]	; 0x54
    6236:	89a3      	ldrh	r3, [r4, #12]
    6238:	075b      	lsls	r3, r3, #29
    623a:	d506      	bpl.n	624a <__sflush_r+0x46>
    623c:	6863      	ldr	r3, [r4, #4]
    623e:	1ac0      	subs	r0, r0, r3
    6240:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6242:	2b00      	cmp	r3, #0
    6244:	d001      	beq.n	624a <__sflush_r+0x46>
    6246:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6248:	1ac0      	subs	r0, r0, r3
    624a:	0002      	movs	r2, r0
    624c:	6a21      	ldr	r1, [r4, #32]
    624e:	2300      	movs	r3, #0
    6250:	0028      	movs	r0, r5
    6252:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6254:	47b8      	blx	r7
    6256:	89a1      	ldrh	r1, [r4, #12]
    6258:	1c43      	adds	r3, r0, #1
    625a:	d106      	bne.n	626a <__sflush_r+0x66>
    625c:	682b      	ldr	r3, [r5, #0]
    625e:	2b1d      	cmp	r3, #29
    6260:	d831      	bhi.n	62c6 <__sflush_r+0xc2>
    6262:	4a2c      	ldr	r2, [pc, #176]	; (6314 <__sflush_r+0x110>)
    6264:	40da      	lsrs	r2, r3
    6266:	07d3      	lsls	r3, r2, #31
    6268:	d52d      	bpl.n	62c6 <__sflush_r+0xc2>
    626a:	2300      	movs	r3, #0
    626c:	6063      	str	r3, [r4, #4]
    626e:	6923      	ldr	r3, [r4, #16]
    6270:	6023      	str	r3, [r4, #0]
    6272:	04cb      	lsls	r3, r1, #19
    6274:	d505      	bpl.n	6282 <__sflush_r+0x7e>
    6276:	1c43      	adds	r3, r0, #1
    6278:	d102      	bne.n	6280 <__sflush_r+0x7c>
    627a:	682b      	ldr	r3, [r5, #0]
    627c:	2b00      	cmp	r3, #0
    627e:	d100      	bne.n	6282 <__sflush_r+0x7e>
    6280:	6560      	str	r0, [r4, #84]	; 0x54
    6282:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6284:	602e      	str	r6, [r5, #0]
    6286:	2900      	cmp	r1, #0
    6288:	d0c8      	beq.n	621c <__sflush_r+0x18>
    628a:	0023      	movs	r3, r4
    628c:	3344      	adds	r3, #68	; 0x44
    628e:	4299      	cmp	r1, r3
    6290:	d002      	beq.n	6298 <__sflush_r+0x94>
    6292:	0028      	movs	r0, r5
    6294:	f000 f976 	bl	6584 <_free_r>
    6298:	2000      	movs	r0, #0
    629a:	6360      	str	r0, [r4, #52]	; 0x34
    629c:	e7bf      	b.n	621e <__sflush_r+0x1a>
    629e:	2301      	movs	r3, #1
    62a0:	6a21      	ldr	r1, [r4, #32]
    62a2:	0028      	movs	r0, r5
    62a4:	47b8      	blx	r7
    62a6:	1c43      	adds	r3, r0, #1
    62a8:	d1c5      	bne.n	6236 <__sflush_r+0x32>
    62aa:	682b      	ldr	r3, [r5, #0]
    62ac:	2b00      	cmp	r3, #0
    62ae:	d0c2      	beq.n	6236 <__sflush_r+0x32>
    62b0:	2b1d      	cmp	r3, #29
    62b2:	d001      	beq.n	62b8 <__sflush_r+0xb4>
    62b4:	2b16      	cmp	r3, #22
    62b6:	d101      	bne.n	62bc <__sflush_r+0xb8>
    62b8:	602e      	str	r6, [r5, #0]
    62ba:	e7af      	b.n	621c <__sflush_r+0x18>
    62bc:	2340      	movs	r3, #64	; 0x40
    62be:	89a2      	ldrh	r2, [r4, #12]
    62c0:	4313      	orrs	r3, r2
    62c2:	81a3      	strh	r3, [r4, #12]
    62c4:	e7ab      	b.n	621e <__sflush_r+0x1a>
    62c6:	2340      	movs	r3, #64	; 0x40
    62c8:	430b      	orrs	r3, r1
    62ca:	2001      	movs	r0, #1
    62cc:	81a3      	strh	r3, [r4, #12]
    62ce:	4240      	negs	r0, r0
    62d0:	e7a5      	b.n	621e <__sflush_r+0x1a>
    62d2:	690f      	ldr	r7, [r1, #16]
    62d4:	2f00      	cmp	r7, #0
    62d6:	d0a1      	beq.n	621c <__sflush_r+0x18>
    62d8:	680b      	ldr	r3, [r1, #0]
    62da:	600f      	str	r7, [r1, #0]
    62dc:	1bdb      	subs	r3, r3, r7
    62de:	9301      	str	r3, [sp, #4]
    62e0:	2300      	movs	r3, #0
    62e2:	0792      	lsls	r2, r2, #30
    62e4:	d100      	bne.n	62e8 <__sflush_r+0xe4>
    62e6:	694b      	ldr	r3, [r1, #20]
    62e8:	60a3      	str	r3, [r4, #8]
    62ea:	9b01      	ldr	r3, [sp, #4]
    62ec:	2b00      	cmp	r3, #0
    62ee:	dc00      	bgt.n	62f2 <__sflush_r+0xee>
    62f0:	e794      	b.n	621c <__sflush_r+0x18>
    62f2:	9b01      	ldr	r3, [sp, #4]
    62f4:	003a      	movs	r2, r7
    62f6:	6a21      	ldr	r1, [r4, #32]
    62f8:	0028      	movs	r0, r5
    62fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    62fc:	47b0      	blx	r6
    62fe:	2800      	cmp	r0, #0
    6300:	dc03      	bgt.n	630a <__sflush_r+0x106>
    6302:	2340      	movs	r3, #64	; 0x40
    6304:	89a2      	ldrh	r2, [r4, #12]
    6306:	4313      	orrs	r3, r2
    6308:	e7df      	b.n	62ca <__sflush_r+0xc6>
    630a:	9b01      	ldr	r3, [sp, #4]
    630c:	183f      	adds	r7, r7, r0
    630e:	1a1b      	subs	r3, r3, r0
    6310:	9301      	str	r3, [sp, #4]
    6312:	e7ea      	b.n	62ea <__sflush_r+0xe6>
    6314:	20400001 	.word	0x20400001

00006318 <_fflush_r>:
    6318:	690b      	ldr	r3, [r1, #16]
    631a:	b570      	push	{r4, r5, r6, lr}
    631c:	0005      	movs	r5, r0
    631e:	000c      	movs	r4, r1
    6320:	2b00      	cmp	r3, #0
    6322:	d101      	bne.n	6328 <_fflush_r+0x10>
    6324:	2000      	movs	r0, #0
    6326:	bd70      	pop	{r4, r5, r6, pc}
    6328:	2800      	cmp	r0, #0
    632a:	d004      	beq.n	6336 <_fflush_r+0x1e>
    632c:	6983      	ldr	r3, [r0, #24]
    632e:	2b00      	cmp	r3, #0
    6330:	d101      	bne.n	6336 <_fflush_r+0x1e>
    6332:	f000 f85f 	bl	63f4 <__sinit>
    6336:	4b0b      	ldr	r3, [pc, #44]	; (6364 <_fflush_r+0x4c>)
    6338:	429c      	cmp	r4, r3
    633a:	d109      	bne.n	6350 <_fflush_r+0x38>
    633c:	686c      	ldr	r4, [r5, #4]
    633e:	220c      	movs	r2, #12
    6340:	5ea3      	ldrsh	r3, [r4, r2]
    6342:	2b00      	cmp	r3, #0
    6344:	d0ee      	beq.n	6324 <_fflush_r+0xc>
    6346:	0021      	movs	r1, r4
    6348:	0028      	movs	r0, r5
    634a:	f7ff ff5b 	bl	6204 <__sflush_r>
    634e:	e7ea      	b.n	6326 <_fflush_r+0xe>
    6350:	4b05      	ldr	r3, [pc, #20]	; (6368 <_fflush_r+0x50>)
    6352:	429c      	cmp	r4, r3
    6354:	d101      	bne.n	635a <_fflush_r+0x42>
    6356:	68ac      	ldr	r4, [r5, #8]
    6358:	e7f1      	b.n	633e <_fflush_r+0x26>
    635a:	4b04      	ldr	r3, [pc, #16]	; (636c <_fflush_r+0x54>)
    635c:	429c      	cmp	r4, r3
    635e:	d1ee      	bne.n	633e <_fflush_r+0x26>
    6360:	68ec      	ldr	r4, [r5, #12]
    6362:	e7ec      	b.n	633e <_fflush_r+0x26>
    6364:	00006ae0 	.word	0x00006ae0
    6368:	00006b00 	.word	0x00006b00
    636c:	00006ac0 	.word	0x00006ac0

00006370 <_cleanup_r>:
    6370:	b510      	push	{r4, lr}
    6372:	4902      	ldr	r1, [pc, #8]	; (637c <_cleanup_r+0xc>)
    6374:	f000 f8b2 	bl	64dc <_fwalk_reent>
    6378:	bd10      	pop	{r4, pc}
    637a:	46c0      	nop			; (mov r8, r8)
    637c:	00006319 	.word	0x00006319

00006380 <std.isra.0>:
    6380:	2300      	movs	r3, #0
    6382:	b510      	push	{r4, lr}
    6384:	0004      	movs	r4, r0
    6386:	6003      	str	r3, [r0, #0]
    6388:	6043      	str	r3, [r0, #4]
    638a:	6083      	str	r3, [r0, #8]
    638c:	8181      	strh	r1, [r0, #12]
    638e:	6643      	str	r3, [r0, #100]	; 0x64
    6390:	81c2      	strh	r2, [r0, #14]
    6392:	6103      	str	r3, [r0, #16]
    6394:	6143      	str	r3, [r0, #20]
    6396:	6183      	str	r3, [r0, #24]
    6398:	0019      	movs	r1, r3
    639a:	2208      	movs	r2, #8
    639c:	305c      	adds	r0, #92	; 0x5c
    639e:	f7ff fe74 	bl	608a <memset>
    63a2:	4b05      	ldr	r3, [pc, #20]	; (63b8 <std.isra.0+0x38>)
    63a4:	6224      	str	r4, [r4, #32]
    63a6:	6263      	str	r3, [r4, #36]	; 0x24
    63a8:	4b04      	ldr	r3, [pc, #16]	; (63bc <std.isra.0+0x3c>)
    63aa:	62a3      	str	r3, [r4, #40]	; 0x28
    63ac:	4b04      	ldr	r3, [pc, #16]	; (63c0 <std.isra.0+0x40>)
    63ae:	62e3      	str	r3, [r4, #44]	; 0x2c
    63b0:	4b04      	ldr	r3, [pc, #16]	; (63c4 <std.isra.0+0x44>)
    63b2:	6323      	str	r3, [r4, #48]	; 0x30
    63b4:	bd10      	pop	{r4, pc}
    63b6:	46c0      	nop			; (mov r8, r8)
    63b8:	000066f9 	.word	0x000066f9
    63bc:	00006721 	.word	0x00006721
    63c0:	00006759 	.word	0x00006759
    63c4:	00006785 	.word	0x00006785

000063c8 <__sfmoreglue>:
    63c8:	b570      	push	{r4, r5, r6, lr}
    63ca:	2568      	movs	r5, #104	; 0x68
    63cc:	1e4a      	subs	r2, r1, #1
    63ce:	4355      	muls	r5, r2
    63d0:	000e      	movs	r6, r1
    63d2:	0029      	movs	r1, r5
    63d4:	3174      	adds	r1, #116	; 0x74
    63d6:	f000 f91f 	bl	6618 <_malloc_r>
    63da:	1e04      	subs	r4, r0, #0
    63dc:	d008      	beq.n	63f0 <__sfmoreglue+0x28>
    63de:	2100      	movs	r1, #0
    63e0:	002a      	movs	r2, r5
    63e2:	6001      	str	r1, [r0, #0]
    63e4:	6046      	str	r6, [r0, #4]
    63e6:	300c      	adds	r0, #12
    63e8:	60a0      	str	r0, [r4, #8]
    63ea:	3268      	adds	r2, #104	; 0x68
    63ec:	f7ff fe4d 	bl	608a <memset>
    63f0:	0020      	movs	r0, r4
    63f2:	bd70      	pop	{r4, r5, r6, pc}

000063f4 <__sinit>:
    63f4:	6983      	ldr	r3, [r0, #24]
    63f6:	b513      	push	{r0, r1, r4, lr}
    63f8:	0004      	movs	r4, r0
    63fa:	2b00      	cmp	r3, #0
    63fc:	d128      	bne.n	6450 <__sinit+0x5c>
    63fe:	6483      	str	r3, [r0, #72]	; 0x48
    6400:	64c3      	str	r3, [r0, #76]	; 0x4c
    6402:	6503      	str	r3, [r0, #80]	; 0x50
    6404:	4b13      	ldr	r3, [pc, #76]	; (6454 <__sinit+0x60>)
    6406:	4a14      	ldr	r2, [pc, #80]	; (6458 <__sinit+0x64>)
    6408:	681b      	ldr	r3, [r3, #0]
    640a:	6282      	str	r2, [r0, #40]	; 0x28
    640c:	9301      	str	r3, [sp, #4]
    640e:	4298      	cmp	r0, r3
    6410:	d101      	bne.n	6416 <__sinit+0x22>
    6412:	2301      	movs	r3, #1
    6414:	6183      	str	r3, [r0, #24]
    6416:	0020      	movs	r0, r4
    6418:	f000 f820 	bl	645c <__sfp>
    641c:	6060      	str	r0, [r4, #4]
    641e:	0020      	movs	r0, r4
    6420:	f000 f81c 	bl	645c <__sfp>
    6424:	60a0      	str	r0, [r4, #8]
    6426:	0020      	movs	r0, r4
    6428:	f000 f818 	bl	645c <__sfp>
    642c:	2200      	movs	r2, #0
    642e:	60e0      	str	r0, [r4, #12]
    6430:	2104      	movs	r1, #4
    6432:	6860      	ldr	r0, [r4, #4]
    6434:	f7ff ffa4 	bl	6380 <std.isra.0>
    6438:	2201      	movs	r2, #1
    643a:	2109      	movs	r1, #9
    643c:	68a0      	ldr	r0, [r4, #8]
    643e:	f7ff ff9f 	bl	6380 <std.isra.0>
    6442:	2202      	movs	r2, #2
    6444:	2112      	movs	r1, #18
    6446:	68e0      	ldr	r0, [r4, #12]
    6448:	f7ff ff9a 	bl	6380 <std.isra.0>
    644c:	2301      	movs	r3, #1
    644e:	61a3      	str	r3, [r4, #24]
    6450:	bd13      	pop	{r0, r1, r4, pc}
    6452:	46c0      	nop			; (mov r8, r8)
    6454:	00006abc 	.word	0x00006abc
    6458:	00006371 	.word	0x00006371

0000645c <__sfp>:
    645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    645e:	4b1e      	ldr	r3, [pc, #120]	; (64d8 <__sfp+0x7c>)
    6460:	0007      	movs	r7, r0
    6462:	681e      	ldr	r6, [r3, #0]
    6464:	69b3      	ldr	r3, [r6, #24]
    6466:	2b00      	cmp	r3, #0
    6468:	d102      	bne.n	6470 <__sfp+0x14>
    646a:	0030      	movs	r0, r6
    646c:	f7ff ffc2 	bl	63f4 <__sinit>
    6470:	3648      	adds	r6, #72	; 0x48
    6472:	68b4      	ldr	r4, [r6, #8]
    6474:	6873      	ldr	r3, [r6, #4]
    6476:	3b01      	subs	r3, #1
    6478:	d504      	bpl.n	6484 <__sfp+0x28>
    647a:	6833      	ldr	r3, [r6, #0]
    647c:	2b00      	cmp	r3, #0
    647e:	d007      	beq.n	6490 <__sfp+0x34>
    6480:	6836      	ldr	r6, [r6, #0]
    6482:	e7f6      	b.n	6472 <__sfp+0x16>
    6484:	220c      	movs	r2, #12
    6486:	5ea5      	ldrsh	r5, [r4, r2]
    6488:	2d00      	cmp	r5, #0
    648a:	d00d      	beq.n	64a8 <__sfp+0x4c>
    648c:	3468      	adds	r4, #104	; 0x68
    648e:	e7f2      	b.n	6476 <__sfp+0x1a>
    6490:	2104      	movs	r1, #4
    6492:	0038      	movs	r0, r7
    6494:	f7ff ff98 	bl	63c8 <__sfmoreglue>
    6498:	6030      	str	r0, [r6, #0]
    649a:	2800      	cmp	r0, #0
    649c:	d1f0      	bne.n	6480 <__sfp+0x24>
    649e:	230c      	movs	r3, #12
    64a0:	0004      	movs	r4, r0
    64a2:	603b      	str	r3, [r7, #0]
    64a4:	0020      	movs	r0, r4
    64a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64a8:	2301      	movs	r3, #1
    64aa:	0020      	movs	r0, r4
    64ac:	425b      	negs	r3, r3
    64ae:	81e3      	strh	r3, [r4, #14]
    64b0:	3302      	adds	r3, #2
    64b2:	81a3      	strh	r3, [r4, #12]
    64b4:	6665      	str	r5, [r4, #100]	; 0x64
    64b6:	6025      	str	r5, [r4, #0]
    64b8:	60a5      	str	r5, [r4, #8]
    64ba:	6065      	str	r5, [r4, #4]
    64bc:	6125      	str	r5, [r4, #16]
    64be:	6165      	str	r5, [r4, #20]
    64c0:	61a5      	str	r5, [r4, #24]
    64c2:	2208      	movs	r2, #8
    64c4:	0029      	movs	r1, r5
    64c6:	305c      	adds	r0, #92	; 0x5c
    64c8:	f7ff fddf 	bl	608a <memset>
    64cc:	6365      	str	r5, [r4, #52]	; 0x34
    64ce:	63a5      	str	r5, [r4, #56]	; 0x38
    64d0:	64a5      	str	r5, [r4, #72]	; 0x48
    64d2:	64e5      	str	r5, [r4, #76]	; 0x4c
    64d4:	e7e6      	b.n	64a4 <__sfp+0x48>
    64d6:	46c0      	nop			; (mov r8, r8)
    64d8:	00006abc 	.word	0x00006abc

000064dc <_fwalk_reent>:
    64dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    64de:	0004      	movs	r4, r0
    64e0:	0007      	movs	r7, r0
    64e2:	2600      	movs	r6, #0
    64e4:	9101      	str	r1, [sp, #4]
    64e6:	3448      	adds	r4, #72	; 0x48
    64e8:	2c00      	cmp	r4, #0
    64ea:	d101      	bne.n	64f0 <_fwalk_reent+0x14>
    64ec:	0030      	movs	r0, r6
    64ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    64f0:	6863      	ldr	r3, [r4, #4]
    64f2:	68a5      	ldr	r5, [r4, #8]
    64f4:	9300      	str	r3, [sp, #0]
    64f6:	9b00      	ldr	r3, [sp, #0]
    64f8:	3b01      	subs	r3, #1
    64fa:	9300      	str	r3, [sp, #0]
    64fc:	d501      	bpl.n	6502 <_fwalk_reent+0x26>
    64fe:	6824      	ldr	r4, [r4, #0]
    6500:	e7f2      	b.n	64e8 <_fwalk_reent+0xc>
    6502:	89ab      	ldrh	r3, [r5, #12]
    6504:	2b01      	cmp	r3, #1
    6506:	d908      	bls.n	651a <_fwalk_reent+0x3e>
    6508:	220e      	movs	r2, #14
    650a:	5eab      	ldrsh	r3, [r5, r2]
    650c:	3301      	adds	r3, #1
    650e:	d004      	beq.n	651a <_fwalk_reent+0x3e>
    6510:	0029      	movs	r1, r5
    6512:	0038      	movs	r0, r7
    6514:	9b01      	ldr	r3, [sp, #4]
    6516:	4798      	blx	r3
    6518:	4306      	orrs	r6, r0
    651a:	3568      	adds	r5, #104	; 0x68
    651c:	e7eb      	b.n	64f6 <_fwalk_reent+0x1a>
	...

00006520 <__swhatbuf_r>:
    6520:	b570      	push	{r4, r5, r6, lr}
    6522:	000e      	movs	r6, r1
    6524:	001d      	movs	r5, r3
    6526:	230e      	movs	r3, #14
    6528:	5ec9      	ldrsh	r1, [r1, r3]
    652a:	b090      	sub	sp, #64	; 0x40
    652c:	0014      	movs	r4, r2
    652e:	2900      	cmp	r1, #0
    6530:	da07      	bge.n	6542 <__swhatbuf_r+0x22>
    6532:	2300      	movs	r3, #0
    6534:	602b      	str	r3, [r5, #0]
    6536:	89b3      	ldrh	r3, [r6, #12]
    6538:	061b      	lsls	r3, r3, #24
    653a:	d411      	bmi.n	6560 <__swhatbuf_r+0x40>
    653c:	2380      	movs	r3, #128	; 0x80
    653e:	00db      	lsls	r3, r3, #3
    6540:	e00f      	b.n	6562 <__swhatbuf_r+0x42>
    6542:	aa01      	add	r2, sp, #4
    6544:	f000 f94a 	bl	67dc <_fstat_r>
    6548:	2800      	cmp	r0, #0
    654a:	dbf2      	blt.n	6532 <__swhatbuf_r+0x12>
    654c:	22f0      	movs	r2, #240	; 0xf0
    654e:	9b02      	ldr	r3, [sp, #8]
    6550:	0212      	lsls	r2, r2, #8
    6552:	4013      	ands	r3, r2
    6554:	4a05      	ldr	r2, [pc, #20]	; (656c <__swhatbuf_r+0x4c>)
    6556:	189b      	adds	r3, r3, r2
    6558:	425a      	negs	r2, r3
    655a:	4153      	adcs	r3, r2
    655c:	602b      	str	r3, [r5, #0]
    655e:	e7ed      	b.n	653c <__swhatbuf_r+0x1c>
    6560:	2340      	movs	r3, #64	; 0x40
    6562:	2000      	movs	r0, #0
    6564:	6023      	str	r3, [r4, #0]
    6566:	b010      	add	sp, #64	; 0x40
    6568:	bd70      	pop	{r4, r5, r6, pc}
    656a:	46c0      	nop			; (mov r8, r8)
    656c:	ffffe000 	.word	0xffffe000

00006570 <malloc>:
    6570:	b510      	push	{r4, lr}
    6572:	4b03      	ldr	r3, [pc, #12]	; (6580 <malloc+0x10>)
    6574:	0001      	movs	r1, r0
    6576:	6818      	ldr	r0, [r3, #0]
    6578:	f000 f84e 	bl	6618 <_malloc_r>
    657c:	bd10      	pop	{r4, pc}
    657e:	46c0      	nop			; (mov r8, r8)
    6580:	2000004c 	.word	0x2000004c

00006584 <_free_r>:
    6584:	b570      	push	{r4, r5, r6, lr}
    6586:	0005      	movs	r5, r0
    6588:	2900      	cmp	r1, #0
    658a:	d010      	beq.n	65ae <_free_r+0x2a>
    658c:	1f0c      	subs	r4, r1, #4
    658e:	6823      	ldr	r3, [r4, #0]
    6590:	2b00      	cmp	r3, #0
    6592:	da00      	bge.n	6596 <_free_r+0x12>
    6594:	18e4      	adds	r4, r4, r3
    6596:	0028      	movs	r0, r5
    6598:	f000 f946 	bl	6828 <__malloc_lock>
    659c:	4a1d      	ldr	r2, [pc, #116]	; (6614 <_free_r+0x90>)
    659e:	6813      	ldr	r3, [r2, #0]
    65a0:	2b00      	cmp	r3, #0
    65a2:	d105      	bne.n	65b0 <_free_r+0x2c>
    65a4:	6063      	str	r3, [r4, #4]
    65a6:	6014      	str	r4, [r2, #0]
    65a8:	0028      	movs	r0, r5
    65aa:	f000 f93e 	bl	682a <__malloc_unlock>
    65ae:	bd70      	pop	{r4, r5, r6, pc}
    65b0:	42a3      	cmp	r3, r4
    65b2:	d909      	bls.n	65c8 <_free_r+0x44>
    65b4:	6821      	ldr	r1, [r4, #0]
    65b6:	1860      	adds	r0, r4, r1
    65b8:	4283      	cmp	r3, r0
    65ba:	d1f3      	bne.n	65a4 <_free_r+0x20>
    65bc:	6818      	ldr	r0, [r3, #0]
    65be:	685b      	ldr	r3, [r3, #4]
    65c0:	1841      	adds	r1, r0, r1
    65c2:	6021      	str	r1, [r4, #0]
    65c4:	e7ee      	b.n	65a4 <_free_r+0x20>
    65c6:	0013      	movs	r3, r2
    65c8:	685a      	ldr	r2, [r3, #4]
    65ca:	2a00      	cmp	r2, #0
    65cc:	d001      	beq.n	65d2 <_free_r+0x4e>
    65ce:	42a2      	cmp	r2, r4
    65d0:	d9f9      	bls.n	65c6 <_free_r+0x42>
    65d2:	6819      	ldr	r1, [r3, #0]
    65d4:	1858      	adds	r0, r3, r1
    65d6:	42a0      	cmp	r0, r4
    65d8:	d10b      	bne.n	65f2 <_free_r+0x6e>
    65da:	6820      	ldr	r0, [r4, #0]
    65dc:	1809      	adds	r1, r1, r0
    65de:	1858      	adds	r0, r3, r1
    65e0:	6019      	str	r1, [r3, #0]
    65e2:	4282      	cmp	r2, r0
    65e4:	d1e0      	bne.n	65a8 <_free_r+0x24>
    65e6:	6810      	ldr	r0, [r2, #0]
    65e8:	6852      	ldr	r2, [r2, #4]
    65ea:	1841      	adds	r1, r0, r1
    65ec:	6019      	str	r1, [r3, #0]
    65ee:	605a      	str	r2, [r3, #4]
    65f0:	e7da      	b.n	65a8 <_free_r+0x24>
    65f2:	42a0      	cmp	r0, r4
    65f4:	d902      	bls.n	65fc <_free_r+0x78>
    65f6:	230c      	movs	r3, #12
    65f8:	602b      	str	r3, [r5, #0]
    65fa:	e7d5      	b.n	65a8 <_free_r+0x24>
    65fc:	6821      	ldr	r1, [r4, #0]
    65fe:	1860      	adds	r0, r4, r1
    6600:	4282      	cmp	r2, r0
    6602:	d103      	bne.n	660c <_free_r+0x88>
    6604:	6810      	ldr	r0, [r2, #0]
    6606:	6852      	ldr	r2, [r2, #4]
    6608:	1841      	adds	r1, r0, r1
    660a:	6021      	str	r1, [r4, #0]
    660c:	6062      	str	r2, [r4, #4]
    660e:	605c      	str	r4, [r3, #4]
    6610:	e7ca      	b.n	65a8 <_free_r+0x24>
    6612:	46c0      	nop			; (mov r8, r8)
    6614:	20003d00 	.word	0x20003d00

00006618 <_malloc_r>:
    6618:	2303      	movs	r3, #3
    661a:	b570      	push	{r4, r5, r6, lr}
    661c:	1ccd      	adds	r5, r1, #3
    661e:	439d      	bics	r5, r3
    6620:	3508      	adds	r5, #8
    6622:	0006      	movs	r6, r0
    6624:	2d0c      	cmp	r5, #12
    6626:	d21e      	bcs.n	6666 <_malloc_r+0x4e>
    6628:	250c      	movs	r5, #12
    662a:	42a9      	cmp	r1, r5
    662c:	d81d      	bhi.n	666a <_malloc_r+0x52>
    662e:	0030      	movs	r0, r6
    6630:	f000 f8fa 	bl	6828 <__malloc_lock>
    6634:	4a25      	ldr	r2, [pc, #148]	; (66cc <_malloc_r+0xb4>)
    6636:	6814      	ldr	r4, [r2, #0]
    6638:	0021      	movs	r1, r4
    663a:	2900      	cmp	r1, #0
    663c:	d119      	bne.n	6672 <_malloc_r+0x5a>
    663e:	4c24      	ldr	r4, [pc, #144]	; (66d0 <_malloc_r+0xb8>)
    6640:	6823      	ldr	r3, [r4, #0]
    6642:	2b00      	cmp	r3, #0
    6644:	d103      	bne.n	664e <_malloc_r+0x36>
    6646:	0030      	movs	r0, r6
    6648:	f000 f844 	bl	66d4 <_sbrk_r>
    664c:	6020      	str	r0, [r4, #0]
    664e:	0029      	movs	r1, r5
    6650:	0030      	movs	r0, r6
    6652:	f000 f83f 	bl	66d4 <_sbrk_r>
    6656:	1c43      	adds	r3, r0, #1
    6658:	d12c      	bne.n	66b4 <_malloc_r+0x9c>
    665a:	230c      	movs	r3, #12
    665c:	0030      	movs	r0, r6
    665e:	6033      	str	r3, [r6, #0]
    6660:	f000 f8e3 	bl	682a <__malloc_unlock>
    6664:	e003      	b.n	666e <_malloc_r+0x56>
    6666:	2d00      	cmp	r5, #0
    6668:	dadf      	bge.n	662a <_malloc_r+0x12>
    666a:	230c      	movs	r3, #12
    666c:	6033      	str	r3, [r6, #0]
    666e:	2000      	movs	r0, #0
    6670:	bd70      	pop	{r4, r5, r6, pc}
    6672:	680b      	ldr	r3, [r1, #0]
    6674:	1b5b      	subs	r3, r3, r5
    6676:	d41a      	bmi.n	66ae <_malloc_r+0x96>
    6678:	2b0b      	cmp	r3, #11
    667a:	d903      	bls.n	6684 <_malloc_r+0x6c>
    667c:	600b      	str	r3, [r1, #0]
    667e:	18cc      	adds	r4, r1, r3
    6680:	6025      	str	r5, [r4, #0]
    6682:	e003      	b.n	668c <_malloc_r+0x74>
    6684:	428c      	cmp	r4, r1
    6686:	d10e      	bne.n	66a6 <_malloc_r+0x8e>
    6688:	6863      	ldr	r3, [r4, #4]
    668a:	6013      	str	r3, [r2, #0]
    668c:	0030      	movs	r0, r6
    668e:	f000 f8cc 	bl	682a <__malloc_unlock>
    6692:	0020      	movs	r0, r4
    6694:	2207      	movs	r2, #7
    6696:	300b      	adds	r0, #11
    6698:	1d23      	adds	r3, r4, #4
    669a:	4390      	bics	r0, r2
    669c:	1ac3      	subs	r3, r0, r3
    669e:	d0e7      	beq.n	6670 <_malloc_r+0x58>
    66a0:	425a      	negs	r2, r3
    66a2:	50e2      	str	r2, [r4, r3]
    66a4:	e7e4      	b.n	6670 <_malloc_r+0x58>
    66a6:	684b      	ldr	r3, [r1, #4]
    66a8:	6063      	str	r3, [r4, #4]
    66aa:	000c      	movs	r4, r1
    66ac:	e7ee      	b.n	668c <_malloc_r+0x74>
    66ae:	000c      	movs	r4, r1
    66b0:	6849      	ldr	r1, [r1, #4]
    66b2:	e7c2      	b.n	663a <_malloc_r+0x22>
    66b4:	2303      	movs	r3, #3
    66b6:	1cc4      	adds	r4, r0, #3
    66b8:	439c      	bics	r4, r3
    66ba:	42a0      	cmp	r0, r4
    66bc:	d0e0      	beq.n	6680 <_malloc_r+0x68>
    66be:	1a21      	subs	r1, r4, r0
    66c0:	0030      	movs	r0, r6
    66c2:	f000 f807 	bl	66d4 <_sbrk_r>
    66c6:	1c43      	adds	r3, r0, #1
    66c8:	d1da      	bne.n	6680 <_malloc_r+0x68>
    66ca:	e7c6      	b.n	665a <_malloc_r+0x42>
    66cc:	20003d00 	.word	0x20003d00
    66d0:	20003d04 	.word	0x20003d04

000066d4 <_sbrk_r>:
    66d4:	2300      	movs	r3, #0
    66d6:	b570      	push	{r4, r5, r6, lr}
    66d8:	4c06      	ldr	r4, [pc, #24]	; (66f4 <_sbrk_r+0x20>)
    66da:	0005      	movs	r5, r0
    66dc:	0008      	movs	r0, r1
    66de:	6023      	str	r3, [r4, #0]
    66e0:	f7fd f9b2 	bl	3a48 <_sbrk>
    66e4:	1c43      	adds	r3, r0, #1
    66e6:	d103      	bne.n	66f0 <_sbrk_r+0x1c>
    66e8:	6823      	ldr	r3, [r4, #0]
    66ea:	2b00      	cmp	r3, #0
    66ec:	d000      	beq.n	66f0 <_sbrk_r+0x1c>
    66ee:	602b      	str	r3, [r5, #0]
    66f0:	bd70      	pop	{r4, r5, r6, pc}
    66f2:	46c0      	nop			; (mov r8, r8)
    66f4:	20004900 	.word	0x20004900

000066f8 <__sread>:
    66f8:	b570      	push	{r4, r5, r6, lr}
    66fa:	000c      	movs	r4, r1
    66fc:	250e      	movs	r5, #14
    66fe:	5f49      	ldrsh	r1, [r1, r5]
    6700:	f000 f894 	bl	682c <_read_r>
    6704:	2800      	cmp	r0, #0
    6706:	db03      	blt.n	6710 <__sread+0x18>
    6708:	6d63      	ldr	r3, [r4, #84]	; 0x54
    670a:	181b      	adds	r3, r3, r0
    670c:	6563      	str	r3, [r4, #84]	; 0x54
    670e:	bd70      	pop	{r4, r5, r6, pc}
    6710:	89a3      	ldrh	r3, [r4, #12]
    6712:	4a02      	ldr	r2, [pc, #8]	; (671c <__sread+0x24>)
    6714:	4013      	ands	r3, r2
    6716:	81a3      	strh	r3, [r4, #12]
    6718:	e7f9      	b.n	670e <__sread+0x16>
    671a:	46c0      	nop			; (mov r8, r8)
    671c:	ffffefff 	.word	0xffffefff

00006720 <__swrite>:
    6720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6722:	001f      	movs	r7, r3
    6724:	898b      	ldrh	r3, [r1, #12]
    6726:	0005      	movs	r5, r0
    6728:	000c      	movs	r4, r1
    672a:	0016      	movs	r6, r2
    672c:	05db      	lsls	r3, r3, #23
    672e:	d505      	bpl.n	673c <__swrite+0x1c>
    6730:	230e      	movs	r3, #14
    6732:	5ec9      	ldrsh	r1, [r1, r3]
    6734:	2200      	movs	r2, #0
    6736:	2302      	movs	r3, #2
    6738:	f000 f862 	bl	6800 <_lseek_r>
    673c:	89a3      	ldrh	r3, [r4, #12]
    673e:	4a05      	ldr	r2, [pc, #20]	; (6754 <__swrite+0x34>)
    6740:	0028      	movs	r0, r5
    6742:	4013      	ands	r3, r2
    6744:	81a3      	strh	r3, [r4, #12]
    6746:	0032      	movs	r2, r6
    6748:	230e      	movs	r3, #14
    674a:	5ee1      	ldrsh	r1, [r4, r3]
    674c:	003b      	movs	r3, r7
    674e:	f000 f81f 	bl	6790 <_write_r>
    6752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6754:	ffffefff 	.word	0xffffefff

00006758 <__sseek>:
    6758:	b570      	push	{r4, r5, r6, lr}
    675a:	000c      	movs	r4, r1
    675c:	250e      	movs	r5, #14
    675e:	5f49      	ldrsh	r1, [r1, r5]
    6760:	f000 f84e 	bl	6800 <_lseek_r>
    6764:	89a3      	ldrh	r3, [r4, #12]
    6766:	1c42      	adds	r2, r0, #1
    6768:	d103      	bne.n	6772 <__sseek+0x1a>
    676a:	4a05      	ldr	r2, [pc, #20]	; (6780 <__sseek+0x28>)
    676c:	4013      	ands	r3, r2
    676e:	81a3      	strh	r3, [r4, #12]
    6770:	bd70      	pop	{r4, r5, r6, pc}
    6772:	2280      	movs	r2, #128	; 0x80
    6774:	0152      	lsls	r2, r2, #5
    6776:	4313      	orrs	r3, r2
    6778:	81a3      	strh	r3, [r4, #12]
    677a:	6560      	str	r0, [r4, #84]	; 0x54
    677c:	e7f8      	b.n	6770 <__sseek+0x18>
    677e:	46c0      	nop			; (mov r8, r8)
    6780:	ffffefff 	.word	0xffffefff

00006784 <__sclose>:
    6784:	b510      	push	{r4, lr}
    6786:	230e      	movs	r3, #14
    6788:	5ec9      	ldrsh	r1, [r1, r3]
    678a:	f000 f815 	bl	67b8 <_close_r>
    678e:	bd10      	pop	{r4, pc}

00006790 <_write_r>:
    6790:	b570      	push	{r4, r5, r6, lr}
    6792:	0005      	movs	r5, r0
    6794:	0008      	movs	r0, r1
    6796:	0011      	movs	r1, r2
    6798:	2200      	movs	r2, #0
    679a:	4c06      	ldr	r4, [pc, #24]	; (67b4 <_write_r+0x24>)
    679c:	6022      	str	r2, [r4, #0]
    679e:	001a      	movs	r2, r3
    67a0:	f7fa fbe6 	bl	f70 <_write>
    67a4:	1c43      	adds	r3, r0, #1
    67a6:	d103      	bne.n	67b0 <_write_r+0x20>
    67a8:	6823      	ldr	r3, [r4, #0]
    67aa:	2b00      	cmp	r3, #0
    67ac:	d000      	beq.n	67b0 <_write_r+0x20>
    67ae:	602b      	str	r3, [r5, #0]
    67b0:	bd70      	pop	{r4, r5, r6, pc}
    67b2:	46c0      	nop			; (mov r8, r8)
    67b4:	20004900 	.word	0x20004900

000067b8 <_close_r>:
    67b8:	2300      	movs	r3, #0
    67ba:	b570      	push	{r4, r5, r6, lr}
    67bc:	4c06      	ldr	r4, [pc, #24]	; (67d8 <_close_r+0x20>)
    67be:	0005      	movs	r5, r0
    67c0:	0008      	movs	r0, r1
    67c2:	6023      	str	r3, [r4, #0]
    67c4:	f7fd f952 	bl	3a6c <_close>
    67c8:	1c43      	adds	r3, r0, #1
    67ca:	d103      	bne.n	67d4 <_close_r+0x1c>
    67cc:	6823      	ldr	r3, [r4, #0]
    67ce:	2b00      	cmp	r3, #0
    67d0:	d000      	beq.n	67d4 <_close_r+0x1c>
    67d2:	602b      	str	r3, [r5, #0]
    67d4:	bd70      	pop	{r4, r5, r6, pc}
    67d6:	46c0      	nop			; (mov r8, r8)
    67d8:	20004900 	.word	0x20004900

000067dc <_fstat_r>:
    67dc:	2300      	movs	r3, #0
    67de:	b570      	push	{r4, r5, r6, lr}
    67e0:	4c06      	ldr	r4, [pc, #24]	; (67fc <_fstat_r+0x20>)
    67e2:	0005      	movs	r5, r0
    67e4:	0008      	movs	r0, r1
    67e6:	0011      	movs	r1, r2
    67e8:	6023      	str	r3, [r4, #0]
    67ea:	f7fd f942 	bl	3a72 <_fstat>
    67ee:	1c43      	adds	r3, r0, #1
    67f0:	d103      	bne.n	67fa <_fstat_r+0x1e>
    67f2:	6823      	ldr	r3, [r4, #0]
    67f4:	2b00      	cmp	r3, #0
    67f6:	d000      	beq.n	67fa <_fstat_r+0x1e>
    67f8:	602b      	str	r3, [r5, #0]
    67fa:	bd70      	pop	{r4, r5, r6, pc}
    67fc:	20004900 	.word	0x20004900

00006800 <_lseek_r>:
    6800:	b570      	push	{r4, r5, r6, lr}
    6802:	0005      	movs	r5, r0
    6804:	0008      	movs	r0, r1
    6806:	0011      	movs	r1, r2
    6808:	2200      	movs	r2, #0
    680a:	4c06      	ldr	r4, [pc, #24]	; (6824 <_lseek_r+0x24>)
    680c:	6022      	str	r2, [r4, #0]
    680e:	001a      	movs	r2, r3
    6810:	f7fd f934 	bl	3a7c <_lseek>
    6814:	1c43      	adds	r3, r0, #1
    6816:	d103      	bne.n	6820 <_lseek_r+0x20>
    6818:	6823      	ldr	r3, [r4, #0]
    681a:	2b00      	cmp	r3, #0
    681c:	d000      	beq.n	6820 <_lseek_r+0x20>
    681e:	602b      	str	r3, [r5, #0]
    6820:	bd70      	pop	{r4, r5, r6, pc}
    6822:	46c0      	nop			; (mov r8, r8)
    6824:	20004900 	.word	0x20004900

00006828 <__malloc_lock>:
    6828:	4770      	bx	lr

0000682a <__malloc_unlock>:
    682a:	4770      	bx	lr

0000682c <_read_r>:
    682c:	b570      	push	{r4, r5, r6, lr}
    682e:	0005      	movs	r5, r0
    6830:	0008      	movs	r0, r1
    6832:	0011      	movs	r1, r2
    6834:	2200      	movs	r2, #0
    6836:	4c06      	ldr	r4, [pc, #24]	; (6850 <_read_r+0x24>)
    6838:	6022      	str	r2, [r4, #0]
    683a:	001a      	movs	r2, r3
    683c:	f7fa fb76 	bl	f2c <_read>
    6840:	1c43      	adds	r3, r0, #1
    6842:	d103      	bne.n	684c <_read_r+0x20>
    6844:	6823      	ldr	r3, [r4, #0]
    6846:	2b00      	cmp	r3, #0
    6848:	d000      	beq.n	684c <_read_r+0x20>
    684a:	602b      	str	r3, [r5, #0]
    684c:	bd70      	pop	{r4, r5, r6, pc}
    684e:	46c0      	nop			; (mov r8, r8)
    6850:	20004900 	.word	0x20004900
    6854:	001e001c 	.word	0x001e001c
    6858:	20000000 	.word	0x20000000
    685c:	00000000 	.word	0x00000000
    6860:	42000000 	.word	0x42000000
    6864:	42000400 	.word	0x42000400
    6868:	42000800 	.word	0x42000800
    686c:	42000c00 	.word	0x42000c00
    6870:	42001000 	.word	0x42001000
    6874:	43000400 	.word	0x43000400
    6878:	454c4449 	.word	0x454c4449
    687c:	00000000 	.word	0x00000000
    6880:	0000252c 	.word	0x0000252c
    6884:	0000252c 	.word	0x0000252c
    6888:	0000252c 	.word	0x0000252c
    688c:	000024a8 	.word	0x000024a8
    6890:	0000256e 	.word	0x0000256e
    6894:	00002588 	.word	0x00002588
    6898:	0000252c 	.word	0x0000252c
    689c:	0000252c 	.word	0x0000252c
    68a0:	000024a8 	.word	0x000024a8
    68a4:	0000256e 	.word	0x0000256e
    68a8:	20726d54 	.word	0x20726d54
    68ac:	00637653 	.word	0x00637653
    68b0:	00002ffc 	.word	0x00002ffc
    68b4:	00003246 	.word	0x00003246
    68b8:	00003246 	.word	0x00003246
    68bc:	00003246 	.word	0x00003246
    68c0:	00003246 	.word	0x00003246
    68c4:	00003246 	.word	0x00003246
    68c8:	00003246 	.word	0x00003246
    68cc:	00003246 	.word	0x00003246
    68d0:	00003246 	.word	0x00003246
    68d4:	00003246 	.word	0x00003246
    68d8:	00003246 	.word	0x00003246
    68dc:	00003246 	.word	0x00003246
    68e0:	00003246 	.word	0x00003246
    68e4:	00003246 	.word	0x00003246
    68e8:	00003246 	.word	0x00003246
    68ec:	00003246 	.word	0x00003246
    68f0:	00002fe4 	.word	0x00002fe4
    68f4:	00003246 	.word	0x00003246
    68f8:	00003246 	.word	0x00003246
    68fc:	00003246 	.word	0x00003246
    6900:	00003246 	.word	0x00003246
    6904:	00003246 	.word	0x00003246
    6908:	00003246 	.word	0x00003246
    690c:	00003246 	.word	0x00003246
    6910:	00003246 	.word	0x00003246
    6914:	00003246 	.word	0x00003246
    6918:	00003246 	.word	0x00003246
    691c:	00003246 	.word	0x00003246
    6920:	00003246 	.word	0x00003246
    6924:	00003246 	.word	0x00003246
    6928:	00003246 	.word	0x00003246
    692c:	00003246 	.word	0x00003246
    6930:	00002ff4 	.word	0x00002ff4
    6934:	00003246 	.word	0x00003246
    6938:	00003246 	.word	0x00003246
    693c:	00003246 	.word	0x00003246
    6940:	00003246 	.word	0x00003246
    6944:	00003246 	.word	0x00003246
    6948:	00003246 	.word	0x00003246
    694c:	00003246 	.word	0x00003246
    6950:	00003246 	.word	0x00003246
    6954:	00003246 	.word	0x00003246
    6958:	00003246 	.word	0x00003246
    695c:	00003246 	.word	0x00003246
    6960:	00003246 	.word	0x00003246
    6964:	00003246 	.word	0x00003246
    6968:	00003246 	.word	0x00003246
    696c:	00003246 	.word	0x00003246
    6970:	00002fec 	.word	0x00002fec
    6974:	00003004 	.word	0x00003004
    6978:	00002fcc 	.word	0x00002fcc
    697c:	00002fdc 	.word	0x00002fdc
    6980:	00002fd4 	.word	0x00002fd4
    6984:	00000002 	.word	0x00000002
    6988:	00000003 	.word	0x00000003
    698c:	00000028 	.word	0x00000028
    6990:	00000029 	.word	0x00000029
    6994:	00000004 	.word	0x00000004
    6998:	00000005 	.word	0x00000005
    699c:	00000006 	.word	0x00000006
    69a0:	00000007 	.word	0x00000007
    69a4:	00000020 	.word	0x00000020
    69a8:	00000021 	.word	0x00000021
    69ac:	00000022 	.word	0x00000022
    69b0:	00000023 	.word	0x00000023
    69b4:	00000024 	.word	0x00000024
    69b8:	00000025 	.word	0x00000025
    69bc:	00000026 	.word	0x00000026
    69c0:	00000027 	.word	0x00000027
    69c4:	00000008 	.word	0x00000008
    69c8:	00000009 	.word	0x00000009
    69cc:	0000000a 	.word	0x0000000a
    69d0:	0000000b 	.word	0x0000000b
    69d4:	0000ffff 	.word	0x0000ffff
    69d8:	0000ffff 	.word	0x0000ffff
    69dc:	0000ffff 	.word	0x0000ffff
    69e0:	0000ffff 	.word	0x0000ffff
    69e4:	000034d2 	.word	0x000034d2
    69e8:	000034ce 	.word	0x000034ce
    69ec:	000034ce 	.word	0x000034ce
    69f0:	00003534 	.word	0x00003534
    69f4:	00003534 	.word	0x00003534
    69f8:	000034e8 	.word	0x000034e8
    69fc:	000034d8 	.word	0x000034d8
    6a00:	000034ee 	.word	0x000034ee
    6a04:	00003522 	.word	0x00003522
    6a08:	00003dd0 	.word	0x00003dd0
    6a0c:	00003dd0 	.word	0x00003dd0
    6a10:	00003d52 	.word	0x00003d52
    6a14:	00003dac 	.word	0x00003dac
    6a18:	00003db2 	.word	0x00003db2
    6a1c:	00003db8 	.word	0x00003db8
    6a20:	00003dbe 	.word	0x00003dbe
    6a24:	00003dc4 	.word	0x00003dc4
    6a28:	00003dca 	.word	0x00003dca
    6a2c:	6e69614d 	.word	0x6e69614d
    6a30:	00000000 	.word	0x00000000
    6a34:	54524155 	.word	0x54524155
    6a38:	00000000 	.word	0x00000000
    6a3c:	00004f80 	.word	0x00004f80
    6a40:	00004f62 	.word	0x00004f62
    6a44:	00004f1c 	.word	0x00004f1c
    6a48:	00004e3a 	.word	0x00004e3a
    6a4c:	00004f1c 	.word	0x00004f1c
    6a50:	00004f54 	.word	0x00004f54
    6a54:	00004f1c 	.word	0x00004f1c
    6a58:	00004e3a 	.word	0x00004e3a
    6a5c:	00004f62 	.word	0x00004f62
    6a60:	00004f62 	.word	0x00004f62
    6a64:	00004f54 	.word	0x00004f54
    6a68:	00004e3a 	.word	0x00004e3a
    6a6c:	00004e32 	.word	0x00004e32
    6a70:	00004e32 	.word	0x00004e32
    6a74:	00004e32 	.word	0x00004e32
    6a78:	00005198 	.word	0x00005198
    6a7c:	000055e0 	.word	0x000055e0
    6a80:	000054a0 	.word	0x000054a0
    6a84:	000054a0 	.word	0x000054a0
    6a88:	0000549c 	.word	0x0000549c
    6a8c:	000055b8 	.word	0x000055b8
    6a90:	000055b8 	.word	0x000055b8
    6a94:	000055aa 	.word	0x000055aa
    6a98:	0000549c 	.word	0x0000549c
    6a9c:	000055b8 	.word	0x000055b8
    6aa0:	000055aa 	.word	0x000055aa
    6aa4:	000055b8 	.word	0x000055b8
    6aa8:	0000549c 	.word	0x0000549c
    6aac:	000055c0 	.word	0x000055c0
    6ab0:	000055c0 	.word	0x000055c0
    6ab4:	000055c0 	.word	0x000055c0
    6ab8:	000057c4 	.word	0x000057c4

00006abc <_global_impure_ptr>:
    6abc:	20000050                                P.. 

00006ac0 <__sf_fake_stderr>:
	...

00006ae0 <__sf_fake_stdin>:
	...

00006b00 <__sf_fake_stdout>:
	...

00006b20 <_init>:
    6b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b22:	46c0      	nop			; (mov r8, r8)
    6b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6b26:	bc08      	pop	{r3}
    6b28:	469e      	mov	lr, r3
    6b2a:	4770      	bx	lr

00006b2c <__init_array_start>:
    6b2c:	000000dd 	.word	0x000000dd

00006b30 <_fini>:
    6b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b32:	46c0      	nop			; (mov r8, r8)
    6b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6b36:	bc08      	pop	{r3}
    6b38:	469e      	mov	lr, r3
    6b3a:	4770      	bx	lr

00006b3c <__fini_array_start>:
    6b3c:	000000b5 	.word	0x000000b5
