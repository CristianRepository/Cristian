
PiezoBoard_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006908  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000b0  20000000  00006908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  000200b0  2**0
                  CONTENTS
  3 .bss          00004d88  200000b0  000069b8  000200b0  2**2
                  ALLOC
  4 .stack        00002000  20004e38  0000b740  000200b0  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
  6 .comment      000000c9  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002c070  00000000  00000000  000201a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000491d  00000000  00000000  0004c211  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000b1e6  00000000  00000000  00050b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ad8  00000000  00000000  0005bd14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d30  00000000  00000000  0005c7ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000201e5  00000000  00000000  0005d51c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012a8e  00000000  00000000  0007d701  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a501a  00000000  00000000  0009018f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000021c4  00000000  00000000  001351ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20006e38 	.word	0x20006e38
       4:	00001d81 	.word	0x00001d81
       8:	00001d7d 	.word	0x00001d7d
       c:	00001d7d 	.word	0x00001d7d
	...
      2c:	00001f45 	.word	0x00001f45
	...
      38:	00001fad 	.word	0x00001fad
      3c:	00001ff1 	.word	0x00001ff1
      40:	00001d7d 	.word	0x00001d7d
      44:	00001d7d 	.word	0x00001d7d
      48:	00001d7d 	.word	0x00001d7d
      4c:	00001d7d 	.word	0x00001d7d
      50:	00001d7d 	.word	0x00001d7d
      54:	00001d7d 	.word	0x00001d7d
      58:	00001d7d 	.word	0x00001d7d
      5c:	00001d7d 	.word	0x00001d7d
      60:	00001115 	.word	0x00001115
      64:	00001125 	.word	0x00001125
      68:	00001135 	.word	0x00001135
      6c:	00001145 	.word	0x00001145
      70:	00001155 	.word	0x00001155
      74:	00001165 	.word	0x00001165
      78:	00001d7d 	.word	0x00001d7d
      7c:	00001d7d 	.word	0x00001d7d
      80:	00001d7d 	.word	0x00001d7d
      84:	00001d7d 	.word	0x00001d7d
      88:	00001d7d 	.word	0x00001d7d
      8c:	00001d7d 	.word	0x00001d7d
      90:	00001d7d 	.word	0x00001d7d
      94:	00001d7d 	.word	0x00001d7d
      98:	00001639 	.word	0x00001639
      9c:	00001d7d 	.word	0x00001d7d
      a0:	00001d7d 	.word	0x00001d7d
      a4:	00001d7d 	.word	0x00001d7d
      a8:	00001d7d 	.word	0x00001d7d
      ac:	00001d7d 	.word	0x00001d7d
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000b0 	.word	0x200000b0
      d4:	00000000 	.word	0x00000000
      d8:	00006908 	.word	0x00006908

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000b4 	.word	0x200000b4
     108:	00006908 	.word	0x00006908
     10c:	00006908 	.word	0x00006908
     110:	00000000 	.word	0x00000000

00000114 <dac_is_syncing>:
		struct dac_module *const dev_inst)
{
	/* Sanity check arguments */
	Assert(dev_inst);

	Dac *const dac_module = dev_inst->hw;
     114:	6803      	ldr	r3, [r0, #0]

	if (dac_module->SYNCBUSY.reg) {
     116:	6898      	ldr	r0, [r3, #8]
     118:	1e43      	subs	r3, r0, #1
     11a:	4198      	sbcs	r0, r3
     11c:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
     11e:	4770      	bx	lr

00000120 <dac_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->differential_mode = false;
     120:	2300      	movs	r3, #0
     122:	7003      	strb	r3, [r0, #0]
    config->reference      = DAC_REFERENCE_INTREF;
     124:	2206      	movs	r2, #6
     126:	7042      	strb	r2, [r0, #1]
	config->clock_source   = GCLK_GENERATOR_0;
     128:	7083      	strb	r3, [r0, #2]
}
     12a:	4770      	bx	lr

0000012c <dac_init>:
 */
enum status_code dac_init(
		struct dac_module *const module_inst,
		Dac *const module,
		struct dac_config *const config)
{
     12c:	b530      	push	{r4, r5, lr}
     12e:	b083      	sub	sp, #12
     130:	0005      	movs	r5, r0
     132:	0014      	movs	r4, r2
	Assert(module_inst);
	Assert(module);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = module;
     134:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     136:	4a12      	ldr	r2, [pc, #72]	; (180 <dac_init+0x54>)
     138:	69d3      	ldr	r3, [r2, #28]
     13a:	2080      	movs	r0, #128	; 0x80
     13c:	0140      	lsls	r0, r0, #5
     13e:	4303      	orrs	r3, r0
     140:	61d3      	str	r3, [r2, #28]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_DAC);

	/* Check if module is enabled. */
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
     142:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     144:	201c      	movs	r0, #28

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_DAC);

	/* Check if module is enabled. */
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
     146:	079b      	lsls	r3, r3, #30
     148:	d417      	bmi.n	17a <dac_init+0x4e>
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
     14a:	780b      	ldrb	r3, [r1, #0]
		return STATUS_BUSY;
     14c:	3817      	subs	r0, #23
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
     14e:	07db      	lsls	r3, r3, #31
     150:	d413      	bmi.n	17a <dac_init+0x4e>
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     152:	a901      	add	r1, sp, #4
     154:	78a3      	ldrb	r3, [r4, #2]
     156:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(DAC_GCLK_ID, &gclk_chan_conf);
     158:	301b      	adds	r0, #27
     15a:	4b0a      	ldr	r3, [pc, #40]	; (184 <dac_init+0x58>)
     15c:	4798      	blx	r3
	system_gclk_chan_enable(DAC_GCLK_ID);
     15e:	2020      	movs	r0, #32
     160:	4b09      	ldr	r3, [pc, #36]	; (188 <dac_init+0x5c>)
     162:	4798      	blx	r3
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;

	/* Set selected DAC start on event to be disable when enabling the module */
	module_inst->start_on_event[DAC_CHANNEL_0] = false;
     164:	2300      	movs	r3, #0
     166:	716b      	strb	r3, [r5, #5]
	module_inst->start_on_event[DAC_CHANNEL_1] = false;
     168:	71ab      	strb	r3, [r5, #6]

	/* Set reference voltage */
	new_ctrlb |= config->reference;

	/* Apply the new configuration to the hardware module */
	dac_module->CTRLB.reg = new_ctrlb;
     16a:	7862      	ldrb	r2, [r4, #1]
     16c:	7823      	ldrb	r3, [r4, #0]
     16e:	4313      	orrs	r3, r2
     170:	682a      	ldr	r2, [r5, #0]
     172:	7053      	strb	r3, [r2, #1]

	/* Write configuration to module */
	_dac_set_config(module_inst, config);

	/* Store reference selection for later use */
	module_inst->reference = config->reference;
     174:	7863      	ldrb	r3, [r4, #1]
     176:	712b      	strb	r3, [r5, #4]
	};

	_dac_instances[0] = module_inst;
#endif

	return STATUS_OK;
     178:	2000      	movs	r0, #0
}
     17a:	b003      	add	sp, #12
     17c:	bd30      	pop	{r4, r5, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	40000400 	.word	0x40000400
     184:	00001c21 	.word	0x00001c21
     188:	00001bb1 	.word	0x00001bb1

0000018c <dac_enable>:
 * \param[in] module_inst  Pointer to the DAC software instance struct
 *
 */
void dac_enable(
		struct dac_module *const module_inst)
{
     18c:	b570      	push	{r4, r5, r6, lr}
     18e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
     190:	6805      	ldr	r5, [r0, #0]

	while (dac_is_syncing(module_inst)) {
     192:	4e10      	ldr	r6, [pc, #64]	; (1d4 <dac_enable+0x48>)
     194:	0020      	movs	r0, r4
     196:	47b0      	blx	r6
     198:	2800      	cmp	r0, #0
     19a:	d1fb      	bne.n	194 <dac_enable+0x8>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	dac_module->CTRLA.reg |= DAC_CTRLA_ENABLE;
     19c:	782a      	ldrb	r2, [r5, #0]
     19e:	2302      	movs	r3, #2
     1a0:	4313      	orrs	r3, r2
     1a2:	702b      	strb	r3, [r5, #0]

	/* Enable internal bandgap reference if selected in the configuration */
	if (module_inst->reference == DAC_REFERENCE_INTREF) {
     1a4:	7923      	ldrb	r3, [r4, #4]
     1a6:	2b06      	cmp	r3, #6
     1a8:	d104      	bne.n	1b4 <dac_enable+0x28>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     1aa:	4a0b      	ldr	r2, [pc, #44]	; (1d8 <dac_enable+0x4c>)
     1ac:	69d1      	ldr	r1, [r2, #28]
     1ae:	3b02      	subs	r3, #2
     1b0:	430b      	orrs	r3, r1
     1b2:	61d3      	str	r3, [r2, #28]
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
	}

	if(dac_module->DACCTRL[DAC_CHANNEL_0].reg & DAC_DACCTRL_ENABLE) {
     1b4:	89ab      	ldrh	r3, [r5, #12]
     1b6:	079b      	lsls	r3, r3, #30
     1b8:	d504      	bpl.n	1c4 <dac_enable+0x38>
		while(! (dac_module->STATUS.reg & DAC_STATUS_READY(DAC_CHANNEL_0 + 1))) {
     1ba:	2201      	movs	r2, #1
     1bc:	79eb      	ldrb	r3, [r5, #7]
     1be:	4213      	tst	r3, r2
     1c0:	d0fc      	beq.n	1bc <dac_enable+0x30>
     1c2:	e006      	b.n	1d2 <dac_enable+0x46>
		};
	} else if(dac_module->DACCTRL[DAC_CHANNEL_1].reg & DAC_DACCTRL_ENABLE) {
     1c4:	89eb      	ldrh	r3, [r5, #14]
     1c6:	079b      	lsls	r3, r3, #30
     1c8:	d503      	bpl.n	1d2 <dac_enable+0x46>
		while(! (dac_module->STATUS.reg & DAC_STATUS_READY(DAC_CHANNEL_1 + 1))) {
     1ca:	2202      	movs	r2, #2
     1cc:	79eb      	ldrb	r3, [r5, #7]
     1ce:	4213      	tst	r3, r2
     1d0:	d0fc      	beq.n	1cc <dac_enable+0x40>
		};
	}
}
     1d2:	bd70      	pop	{r4, r5, r6, pc}
     1d4:	00000115 	.word	0x00000115
     1d8:	40001400 	.word	0x40001400

000001dc <dac_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Dac channel default configuration values */
	config->left_adjust    = false;
     1dc:	2300      	movs	r3, #0
     1de:	7003      	strb	r3, [r0, #0]
	config->current        = DAC_CURRENT_12M;
     1e0:	7043      	strb	r3, [r0, #1]
	config->run_in_standby = false;
     1e2:	7083      	strb	r3, [r0, #2]
	config->dither_mode    = false;
     1e4:	70c3      	strb	r3, [r0, #3]
	config->refresh_period = 2;
     1e6:	3302      	adds	r3, #2
     1e8:	7103      	strb	r3, [r0, #4]
}
     1ea:	4770      	bx	lr

000001ec <dac_chan_set_config>:
 */
void dac_chan_set_config(
		struct dac_module *const module_inst,
		const enum dac_channel channel,
		struct dac_chan_config *const config)
{
     1ec:	b570      	push	{r4, r5, r6, lr}
     1ee:	b082      	sub	sp, #8
     1f0:	0006      	movs	r6, r0
     1f2:	000c      	movs	r4, r1
     1f4:	0015      	movs	r5, r2
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1f6:	ab01      	add	r3, sp, #4
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1f8:	2200      	movs	r2, #0
     1fa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     1fc:	70da      	strb	r2, [r3, #3]
	/* MUX the DAC VOUT pin */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     1fe:	709a      	strb	r2, [r3, #2]

	if(channel == DAC_CHANNEL_0) {
     200:	2900      	cmp	r1, #0
     202:	d106      	bne.n	212 <dac_chan_set_config+0x26>
		/* Set up the DAC VOUT0 pin */
		pin_conf.mux_position = MUX_PA02B_DAC_VOUT0;
     204:	0019      	movs	r1, r3
     206:	2301      	movs	r3, #1
     208:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(PIN_PA02B_DAC_VOUT0, &pin_conf);
     20a:	2002      	movs	r0, #2
     20c:	4b12      	ldr	r3, [pc, #72]	; (258 <dac_chan_set_config+0x6c>)
     20e:	4798      	blx	r3
     210:	e007      	b.n	222 <dac_chan_set_config+0x36>
	}
	else if(channel == DAC_CHANNEL_1) {
     212:	2901      	cmp	r1, #1
     214:	d105      	bne.n	222 <dac_chan_set_config+0x36>
		/* Set up the DAC VOUT1 pin */
		pin_conf.mux_position = MUX_PA05B_DAC_VOUT1;
     216:	a901      	add	r1, sp, #4
     218:	2301      	movs	r3, #1
     21a:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(PIN_PA05B_DAC_VOUT1, &pin_conf);
     21c:	2005      	movs	r0, #5
     21e:	4b0e      	ldr	r3, [pc, #56]	; (258 <dac_chan_set_config+0x6c>)
     220:	4798      	blx	r3
	}

	Dac *const dac_module = module_inst->hw;
     222:	6830      	ldr	r0, [r6, #0]
	if (config->left_adjust) {
		new_dacctrl |= DAC_DACCTRL_LEFTADJ;
	}

	/* Set current control */
	new_dacctrl |= config->current;
     224:	786a      	ldrb	r2, [r5, #1]
     226:	782b      	ldrb	r3, [r5, #0]
     228:	4313      	orrs	r3, r2

	/* Enable DAC in standby sleep mode if configured */
	if (config->run_in_standby) {
     22a:	78aa      	ldrb	r2, [r5, #2]
     22c:	2a00      	cmp	r2, #0
     22e:	d001      	beq.n	234 <dac_chan_set_config+0x48>
		new_dacctrl |= DAC_DACCTRL_RUNSTDBY;
     230:	2240      	movs	r2, #64	; 0x40
     232:	4313      	orrs	r3, r2
	}

	/* Voltage pump disable if configured */
	if (config->dither_mode) {
     234:	78ea      	ldrb	r2, [r5, #3]
     236:	2a00      	cmp	r2, #0
     238:	d001      	beq.n	23e <dac_chan_set_config+0x52>
		new_dacctrl |= DAC_DACCTRL_DITHER;
     23a:	2280      	movs	r2, #128	; 0x80
     23c:	4313      	orrs	r3, r2
	}

	new_dacctrl |= DAC_DACCTRL_REFRESH(config->refresh_period);

	/* Apply the new configuration to the hardware module */
	dac_module->DACCTRL[channel].reg = new_dacctrl;
     23e:	792a      	ldrb	r2, [r5, #4]
     240:	0212      	lsls	r2, r2, #8
     242:	21f0      	movs	r1, #240	; 0xf0
     244:	0109      	lsls	r1, r1, #4
     246:	400a      	ands	r2, r1
     248:	4313      	orrs	r3, r2
     24a:	b29b      	uxth	r3, r3
     24c:	3404      	adds	r4, #4
     24e:	0064      	lsls	r4, r4, #1
     250:	1904      	adds	r4, r0, r4
     252:	80a3      	strh	r3, [r4, #4]
}
     254:	b002      	add	sp, #8
     256:	bd70      	pop	{r4, r5, r6, pc}
     258:	00001d1d 	.word	0x00001d1d

0000025c <dac_chan_enable>:
 *
 */
void dac_chan_enable(
		struct dac_module *const module_inst,
		enum dac_channel channel)
{
     25c:	0049      	lsls	r1, r1, #1
     25e:	6803      	ldr	r3, [r0, #0]
     260:	1859      	adds	r1, r3, r1
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;

	/* Enable the module */
	dac_module->DACCTRL[channel].reg |= DAC_DACCTRL_ENABLE;
     262:	898a      	ldrh	r2, [r1, #12]
     264:	2302      	movs	r3, #2
     266:	4313      	orrs	r3, r2
     268:	818b      	strh	r3, [r1, #12]
}
     26a:	4770      	bx	lr

0000026c <dac_chan_write>:
 */
enum status_code dac_chan_write(
		struct dac_module *const module_inst,
		enum dac_channel channel,
		const uint16_t data)
{
     26c:	b5f0      	push	{r4, r5, r6, r7, lr}
     26e:	4647      	mov	r7, r8
     270:	b480      	push	{r7}
     272:	0004      	movs	r4, r0
     274:	000e      	movs	r6, r1
     276:	4690      	mov	r8, r2
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
     278:	6807      	ldr	r7, [r0, #0]

	while (dac_is_syncing(module_inst)) {
     27a:	4d0b      	ldr	r5, [pc, #44]	; (2a8 <dac_chan_write+0x3c>)
     27c:	0020      	movs	r0, r4
     27e:	47a8      	blx	r5
     280:	2800      	cmp	r0, #0
     282:	d1fb      	bne.n	27c <dac_chan_write+0x10>
		/* Wait until the synchronization is complete */
	}

	if (module_inst->start_on_event[channel]) {
     284:	19a4      	adds	r4, r4, r6
     286:	7963      	ldrb	r3, [r4, #5]
     288:	2b00      	cmp	r3, #0
     28a:	d005      	beq.n	298 <dac_chan_write+0x2c>
		/* Write the new value to the buffered DAC data register */
		dac_module->DATABUF[channel].reg = data;
     28c:	3608      	adds	r6, #8
     28e:	0076      	lsls	r6, r6, #1
     290:	19bf      	adds	r7, r7, r6
     292:	4643      	mov	r3, r8
     294:	80bb      	strh	r3, [r7, #4]
     296:	e003      	b.n	2a0 <dac_chan_write+0x34>
	} else {
		/* Write the new value to the DAC data register */
		dac_module->DATA[channel].reg = data;
     298:	3608      	adds	r6, #8
     29a:	0076      	lsls	r6, r6, #1
     29c:	4643      	mov	r3, r8
     29e:	53f3      	strh	r3, [r6, r7]
	}

	return STATUS_OK;
}
     2a0:	2000      	movs	r0, #0
     2a2:	bc04      	pop	{r2}
     2a4:	4690      	mov	r8, r2
     2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2a8:	00000115 	.word	0x00000115

000002ac <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ae:	465f      	mov	r7, fp
     2b0:	4656      	mov	r6, sl
     2b2:	4645      	mov	r5, r8
     2b4:	b4e0      	push	{r5, r6, r7}
     2b6:	b08a      	sub	sp, #40	; 0x28
     2b8:	0007      	movs	r7, r0
     2ba:	000d      	movs	r5, r1
     2bc:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     2be:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     2c0:	0008      	movs	r0, r1
     2c2:	4b95      	ldr	r3, [pc, #596]	; (518 <i2c_master_init+0x26c>)
     2c4:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
     2c6:	2805      	cmp	r0, #5
     2c8:	d100      	bne.n	2cc <i2c_master_init+0x20>
     2ca:	e105      	b.n	4d8 <i2c_master_init+0x22c>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     2cc:	0004      	movs	r4, r0
     2ce:	3412      	adds	r4, #18
     2d0:	4992      	ldr	r1, [pc, #584]	; (51c <i2c_master_init+0x270>)
     2d2:	69ca      	ldr	r2, [r1, #28]
     2d4:	2301      	movs	r3, #1
     2d6:	4083      	lsls	r3, r0
     2d8:	4313      	orrs	r3, r2
     2da:	61cb      	str	r3, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     2dc:	a909      	add	r1, sp, #36	; 0x24
     2de:	7b33      	ldrb	r3, [r6, #12]
     2e0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     2e2:	b2e4      	uxtb	r4, r4
     2e4:	0020      	movs	r0, r4
     2e6:	4b8e      	ldr	r3, [pc, #568]	; (520 <i2c_master_init+0x274>)
     2e8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     2ea:	0020      	movs	r0, r4
     2ec:	4b8d      	ldr	r3, [pc, #564]	; (524 <i2c_master_init+0x278>)
     2ee:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     2f0:	7b30      	ldrb	r0, [r6, #12]
     2f2:	2100      	movs	r1, #0
     2f4:	4b8c      	ldr	r3, [pc, #560]	; (528 <i2c_master_init+0x27c>)
     2f6:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     2f8:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
     2fa:	201c      	movs	r0, #28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     2fc:	079b      	lsls	r3, r3, #30
     2fe:	d500      	bpl.n	302 <i2c_master_init+0x56>
     300:	e104      	b.n	50c <i2c_master_init+0x260>
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     302:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
     304:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     306:	07db      	lsls	r3, r3, #31
     308:	d500      	bpl.n	30c <i2c_master_init+0x60>
     30a:	e0ff      	b.n	50c <i2c_master_init+0x260>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     30c:	2314      	movs	r3, #20
     30e:	602b      	str	r3, [r5, #0]
	int32_t tmp_baud = 0;
	int32_t tmp_baud_hs = 0;
	int32_t tmp_baudlow_hs = 0;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     310:	683b      	ldr	r3, [r7, #0]
     312:	4698      	mov	r8, r3
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     314:	0018      	movs	r0, r3
     316:	4b80      	ldr	r3, [pc, #512]	; (518 <i2c_master_init+0x26c>)
     318:	4798      	blx	r3
     31a:	0004      	movs	r4, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     31c:	2380      	movs	r3, #128	; 0x80
     31e:	aa08      	add	r2, sp, #32
     320:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     322:	2300      	movs	r3, #0
     324:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     326:	2201      	movs	r2, #1
     328:	a908      	add	r1, sp, #32
     32a:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     32c:	70cb      	strb	r3, [r1, #3]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
     32e:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     330:	6a35      	ldr	r5, [r6, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     332:	2800      	cmp	r0, #0
     334:	d103      	bne.n	33e <i2c_master_init+0x92>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     336:	2100      	movs	r1, #0
     338:	4640      	mov	r0, r8
     33a:	4b7c      	ldr	r3, [pc, #496]	; (52c <i2c_master_init+0x280>)
     33c:	4798      	blx	r3
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     33e:	ab08      	add	r3, sp, #32
     340:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     342:	2302      	movs	r3, #2
     344:	aa08      	add	r2, sp, #32
     346:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     348:	0c00      	lsrs	r0, r0, #16
     34a:	b2c0      	uxtb	r0, r0
     34c:	0011      	movs	r1, r2
     34e:	4b78      	ldr	r3, [pc, #480]	; (530 <i2c_master_init+0x284>)
     350:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     352:	2d00      	cmp	r5, #0
     354:	d104      	bne.n	360 <i2c_master_init+0xb4>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     356:	2101      	movs	r1, #1
     358:	4640      	mov	r0, r8
     35a:	4b74      	ldr	r3, [pc, #464]	; (52c <i2c_master_init+0x280>)
     35c:	4798      	blx	r3
     35e:	0005      	movs	r5, r0
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     360:	ab08      	add	r3, sp, #32
     362:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     364:	2302      	movs	r3, #2
     366:	aa08      	add	r2, sp, #32
     368:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     36a:	0c28      	lsrs	r0, r5, #16
     36c:	b2c0      	uxtb	r0, r0
     36e:	0011      	movs	r1, r2
     370:	4b6f      	ldr	r3, [pc, #444]	; (530 <i2c_master_init+0x284>)
     372:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     374:	8ab3      	ldrh	r3, [r6, #20]
     376:	80fb      	strh	r3, [r7, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     378:	8af3      	ldrh	r3, [r6, #22]
     37a:	813b      	strh	r3, [r7, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     37c:	7e32      	ldrb	r2, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     37e:	2380      	movs	r3, #128	; 0x80

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     380:	2a00      	cmp	r2, #0
     382:	d104      	bne.n	38e <i2c_master_init+0xe2>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     384:	4b6b      	ldr	r3, [pc, #428]	; (534 <i2c_master_init+0x288>)
     386:	789b      	ldrb	r3, [r3, #2]
     388:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     38a:	0fdb      	lsrs	r3, r3, #31
     38c:	01db      	lsls	r3, r3, #7
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
		tmp_ctrla |= config->start_hold_time;
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     38e:	68b1      	ldr	r1, [r6, #8]
     390:	6932      	ldr	r2, [r6, #16]
     392:	430a      	orrs	r2, r1
     394:	4313      	orrs	r3, r2

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     396:	2224      	movs	r2, #36	; 0x24
     398:	5cb2      	ldrb	r2, [r6, r2]
     39a:	2a00      	cmp	r2, #0
     39c:	d002      	beq.n	3a4 <i2c_master_init+0xf8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     39e:	2280      	movs	r2, #128	; 0x80
     3a0:	05d2      	lsls	r2, r2, #23
     3a2:	4313      	orrs	r3, r2
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
		tmp_ctrla |= config->inactive_timeout;
     3a4:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     3a6:	4313      	orrs	r3, r2
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     3a8:	222c      	movs	r2, #44	; 0x2c
     3aa:	5cb2      	ldrb	r2, [r6, r2]
     3ac:	2a00      	cmp	r2, #0
     3ae:	d103      	bne.n	3b8 <i2c_master_init+0x10c>
     3b0:	2280      	movs	r2, #128	; 0x80
     3b2:	0492      	lsls	r2, r2, #18
     3b4:	4291      	cmp	r1, r2
     3b6:	d102      	bne.n	3be <i2c_master_init+0x112>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     3b8:	2280      	movs	r2, #128	; 0x80
     3ba:	0512      	lsls	r2, r2, #20
     3bc:	4313      	orrs	r3, r2
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     3be:	222d      	movs	r2, #45	; 0x2d
     3c0:	5cb2      	ldrb	r2, [r6, r2]
     3c2:	2a00      	cmp	r2, #0
     3c4:	d002      	beq.n	3cc <i2c_master_init+0x120>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     3c6:	2280      	movs	r2, #128	; 0x80
     3c8:	0412      	lsls	r2, r2, #16
     3ca:	4313      	orrs	r3, r2
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     3cc:	222e      	movs	r2, #46	; 0x2e
     3ce:	5cb2      	ldrb	r2, [r6, r2]
     3d0:	2a00      	cmp	r2, #0
     3d2:	d002      	beq.n	3da <i2c_master_init+0x12e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     3d4:	2280      	movs	r2, #128	; 0x80
     3d6:	03d2      	lsls	r2, r2, #15
     3d8:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     3da:	4642      	mov	r2, r8
     3dc:	6812      	ldr	r2, [r2, #0]
     3de:	4313      	orrs	r3, r2
     3e0:	4642      	mov	r2, r8
     3e2:	6013      	str	r3, [r2, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     3e4:	2380      	movs	r3, #128	; 0x80
     3e6:	005b      	lsls	r3, r3, #1
     3e8:	6053      	str	r3, [r2, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     3ea:	3412      	adds	r4, #18
     3ec:	b2e0      	uxtb	r0, r4
     3ee:	4b52      	ldr	r3, [pc, #328]	; (538 <i2c_master_init+0x28c>)
     3f0:	4798      	blx	r3
     3f2:	0005      	movs	r5, r0
     3f4:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     3f6:	27fa      	movs	r7, #250	; 0xfa
     3f8:	00bf      	lsls	r7, r7, #2
     3fa:	6833      	ldr	r3, [r6, #0]
     3fc:	435f      	muls	r7, r3
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     3fe:	6873      	ldr	r3, [r6, #4]
     400:	469a      	mov	sl, r3
	uint32_t trise       = config->sda_scl_rise_time_ns;
	
	tmp_baud = (int32_t)(div_ceil(
     402:	4c4e      	ldr	r4, [pc, #312]	; (53c <i2c_master_init+0x290>)
     404:	47a0      	blx	r4
     406:	9002      	str	r0, [sp, #8]
     408:	9103      	str	r1, [sp, #12]
     40a:	0078      	lsls	r0, r7, #1
     40c:	47a0      	blx	r4
     40e:	9000      	str	r0, [sp, #0]
     410:	9101      	str	r1, [sp, #4]
     412:	8e30      	ldrh	r0, [r6, #48]	; 0x30
     414:	4368      	muls	r0, r5
     416:	47a0      	blx	r4
     418:	4b49      	ldr	r3, [pc, #292]	; (540 <i2c_master_init+0x294>)
     41a:	469b      	mov	fp, r3
     41c:	4a49      	ldr	r2, [pc, #292]	; (544 <i2c_master_init+0x298>)
     41e:	4b4a      	ldr	r3, [pc, #296]	; (548 <i2c_master_init+0x29c>)
     420:	47d8      	blx	fp
     422:	4d4a      	ldr	r5, [pc, #296]	; (54c <i2c_master_init+0x2a0>)
     424:	2200      	movs	r2, #0
     426:	4b4a      	ldr	r3, [pc, #296]	; (550 <i2c_master_init+0x2a4>)
     428:	47a8      	blx	r5
     42a:	9004      	str	r0, [sp, #16]
     42c:	9105      	str	r1, [sp, #20]
     42e:	0038      	movs	r0, r7
     430:	47a0      	blx	r4
     432:	0002      	movs	r2, r0
     434:	000b      	movs	r3, r1
     436:	9804      	ldr	r0, [sp, #16]
     438:	9905      	ldr	r1, [sp, #20]
     43a:	47d8      	blx	fp
     43c:	0002      	movs	r2, r0
     43e:	000b      	movs	r3, r1
     440:	4c44      	ldr	r4, [pc, #272]	; (554 <i2c_master_init+0x2a8>)
     442:	9802      	ldr	r0, [sp, #8]
     444:	9903      	ldr	r1, [sp, #12]
     446:	47a0      	blx	r4
     448:	9a00      	ldr	r2, [sp, #0]
     44a:	9b01      	ldr	r3, [sp, #4]
     44c:	47a8      	blx	r5
     44e:	2200      	movs	r2, #0
     450:	4b41      	ldr	r3, [pc, #260]	; (558 <i2c_master_init+0x2ac>)
     452:	47a0      	blx	r4
     454:	9a00      	ldr	r2, [sp, #0]
     456:	9b01      	ldr	r3, [sp, #4]
     458:	4c40      	ldr	r4, [pc, #256]	; (55c <i2c_master_init+0x2b0>)
     45a:	47a0      	blx	r4
     45c:	4b40      	ldr	r3, [pc, #256]	; (560 <i2c_master_init+0x2b4>)
     45e:	4798      	blx	r3
     460:	0004      	movs	r4, r0
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     462:	68b2      	ldr	r2, [r6, #8]
     464:	2380      	movs	r3, #128	; 0x80
     466:	049b      	lsls	r3, r3, #18
     468:	429a      	cmp	r2, r3
     46a:	d149      	bne.n	500 <i2c_master_init+0x254>
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
	uint32_t fscl        = 1000 * config->baud_rate;
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     46c:	21fa      	movs	r1, #250	; 0xfa
     46e:	0089      	lsls	r1, r1, #2
     470:	4657      	mov	r7, sl
     472:	434f      	muls	r7, r1
	tmp_baud = (int32_t)(div_ceil(
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     474:	9802      	ldr	r0, [sp, #8]
     476:	9903      	ldr	r1, [sp, #12]
     478:	0002      	movs	r2, r0
     47a:	000b      	movs	r3, r1
     47c:	47a8      	blx	r5
     47e:	9000      	str	r0, [sp, #0]
     480:	9101      	str	r1, [sp, #4]
     482:	0038      	movs	r0, r7
     484:	4b2d      	ldr	r3, [pc, #180]	; (53c <i2c_master_init+0x290>)
     486:	4798      	blx	r3
     488:	2200      	movs	r2, #0
     48a:	4b36      	ldr	r3, [pc, #216]	; (564 <i2c_master_init+0x2b8>)
     48c:	47d8      	blx	fp
     48e:	0002      	movs	r2, r0
     490:	000b      	movs	r3, r1
     492:	9800      	ldr	r0, [sp, #0]
     494:	9901      	ldr	r1, [sp, #4]
     496:	4e31      	ldr	r6, [pc, #196]	; (55c <i2c_master_init+0x2b0>)
     498:	47b0      	blx	r6
     49a:	2200      	movs	r2, #0
     49c:	4b2e      	ldr	r3, [pc, #184]	; (558 <i2c_master_init+0x2ac>)
     49e:	4e2d      	ldr	r6, [pc, #180]	; (554 <i2c_master_init+0x2a8>)
     4a0:	47b0      	blx	r6
     4a2:	4b2f      	ldr	r3, [pc, #188]	; (560 <i2c_master_init+0x2b4>)
     4a4:	4798      	blx	r3
     4a6:	1e06      	subs	r6, r0, #0
		if (tmp_baudlow_hs) {
     4a8:	d006      	beq.n	4b8 <i2c_master_init+0x20c>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     4aa:	0039      	movs	r1, r7
     4ac:	9807      	ldr	r0, [sp, #28]
     4ae:	4b2e      	ldr	r3, [pc, #184]	; (568 <i2c_master_init+0x2bc>)
     4b0:	4798      	blx	r3
     4b2:	3802      	subs	r0, #2
     4b4:	1b83      	subs	r3, r0, r6
     4b6:	e007      	b.n	4c8 <i2c_master_init+0x21c>
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     4b8:	0079      	lsls	r1, r7, #1
     4ba:	1e48      	subs	r0, r1, #1
     4bc:	9b07      	ldr	r3, [sp, #28]
     4be:	469c      	mov	ip, r3
     4c0:	4460      	add	r0, ip
     4c2:	4b29      	ldr	r3, [pc, #164]	; (568 <i2c_master_init+0x2bc>)
     4c4:	4798      	blx	r3
     4c6:	1e43      	subs	r3, r0, #1
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     4c8:	2cff      	cmp	r4, #255	; 0xff
     4ca:	d803      	bhi.n	4d4 <i2c_master_init+0x228>
     4cc:	2bff      	cmp	r3, #255	; 0xff
     4ce:	d90a      	bls.n	4e6 <i2c_master_init+0x23a>
     4d0:	2040      	movs	r0, #64	; 0x40
     4d2:	e01b      	b.n	50c <i2c_master_init+0x260>
     4d4:	2040      	movs	r0, #64	; 0x40

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
     4d6:	e019      	b.n	50c <i2c_master_init+0x260>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     4d8:	4a10      	ldr	r2, [pc, #64]	; (51c <i2c_master_init+0x270>)
     4da:	6a11      	ldr	r1, [r2, #32]
     4dc:	2302      	movs	r3, #2
     4de:	430b      	orrs	r3, r1
     4e0:	6213      	str	r3, [r2, #32]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     4e2:	2418      	movs	r4, #24
     4e4:	e6fa      	b.n	2dc <i2c_master_init+0x30>
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     4e6:	22ff      	movs	r2, #255	; 0xff
     4e8:	4014      	ands	r4, r2
     4ea:	0636      	lsls	r6, r6, #24
     4ec:	4334      	orrs	r4, r6
     4ee:	041b      	lsls	r3, r3, #16
     4f0:	22ff      	movs	r2, #255	; 0xff
     4f2:	0412      	lsls	r2, r2, #16
     4f4:	4013      	ands	r3, r2
     4f6:	431c      	orrs	r4, r3
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     4f8:	4643      	mov	r3, r8
     4fa:	60dc      	str	r4, [r3, #12]
	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
	int32_t tmp_baud_hs = 0;
	int32_t tmp_baudlow_hs = 0;
	enum status_code tmp_status_code = STATUS_OK;
     4fc:	2000      	movs	r0, #0
     4fe:	e005      	b.n	50c <i2c_master_init+0x260>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     500:	2040      	movs	r0, #64	; 0x40
     502:	2cff      	cmp	r4, #255	; 0xff
     504:	d802      	bhi.n	50c <i2c_master_init+0x260>

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
	int32_t tmp_baud_hs = 0;
	int32_t tmp_baudlow_hs = 0;
     506:	2600      	movs	r6, #0
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
	int32_t tmp_baud_hs = 0;
     508:	2300      	movs	r3, #0
     50a:	e7ec      	b.n	4e6 <i2c_master_init+0x23a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     50c:	b00a      	add	sp, #40	; 0x28
     50e:	bc1c      	pop	{r2, r3, r4}
     510:	4690      	mov	r8, r2
     512:	469a      	mov	sl, r3
     514:	46a3      	mov	fp, r4
     516:	bdf0      	pop	{r4, r5, r6, r7, pc}
     518:	00000999 	.word	0x00000999
     51c:	40000400 	.word	0x40000400
     520:	00001c21 	.word	0x00001c21
     524:	00001bb1 	.word	0x00001bb1
     528:	000007c9 	.word	0x000007c9
     52c:	00000815 	.word	0x00000815
     530:	00001d1d 	.word	0x00001d1d
     534:	41002000 	.word	0x41002000
     538:	00001c45 	.word	0x00001c45
     53c:	00005d6d 	.word	0x00005d6d
     540:	00005165 	.word	0x00005165
     544:	e826d695 	.word	0xe826d695
     548:	3e112e0b 	.word	0x3e112e0b
     54c:	000044e1 	.word	0x000044e1
     550:	40240000 	.word	0x40240000
     554:	00005659 	.word	0x00005659
     558:	3ff00000 	.word	0x3ff00000
     55c:	00004b39 	.word	0x00004b39
     560:	00005d01 	.word	0x00005d01
     564:	40080000 	.word	0x40080000
     568:	00004371 	.word	0x00004371

0000056c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     56c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     56e:	2000      	movs	r0, #0
     570:	4b08      	ldr	r3, [pc, #32]	; (594 <delay_init+0x28>)
     572:	4798      	blx	r3
     574:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     576:	4c08      	ldr	r4, [pc, #32]	; (598 <delay_init+0x2c>)
     578:	21fa      	movs	r1, #250	; 0xfa
     57a:	0089      	lsls	r1, r1, #2
     57c:	47a0      	blx	r4
     57e:	4b07      	ldr	r3, [pc, #28]	; (59c <delay_init+0x30>)
     580:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     582:	4907      	ldr	r1, [pc, #28]	; (5a0 <delay_init+0x34>)
     584:	0028      	movs	r0, r5
     586:	47a0      	blx	r4
     588:	4b06      	ldr	r3, [pc, #24]	; (5a4 <delay_init+0x38>)
     58a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     58c:	2205      	movs	r2, #5
     58e:	4b06      	ldr	r3, [pc, #24]	; (5a8 <delay_init+0x3c>)
     590:	601a      	str	r2, [r3, #0]
}
     592:	bd70      	pop	{r4, r5, r6, pc}
     594:	00001b45 	.word	0x00001b45
     598:	00004371 	.word	0x00004371
     59c:	20000004 	.word	0x20000004
     5a0:	000f4240 	.word	0x000f4240
     5a4:	20000000 	.word	0x20000000
     5a8:	e000e010 	.word	0xe000e010

000005ac <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     5ac:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     5ae:	4b08      	ldr	r3, [pc, #32]	; (5d0 <delay_cycles_ms+0x24>)
     5b0:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     5b2:	4a08      	ldr	r2, [pc, #32]	; (5d4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     5b4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     5b6:	2180      	movs	r1, #128	; 0x80
     5b8:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     5ba:	e006      	b.n	5ca <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     5bc:	2c00      	cmp	r4, #0
     5be:	d004      	beq.n	5ca <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     5c0:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     5c2:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     5c4:	6813      	ldr	r3, [r2, #0]
     5c6:	420b      	tst	r3, r1
     5c8:	d0fc      	beq.n	5c4 <delay_cycles_ms+0x18>
     5ca:	3801      	subs	r0, #1
     5cc:	d2f6      	bcs.n	5bc <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     5ce:	bd30      	pop	{r4, r5, pc}
     5d0:	20000004 	.word	0x20000004
     5d4:	e000e010 	.word	0xe000e010

000005d8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     5d8:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     5da:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5dc:	2340      	movs	r3, #64	; 0x40
     5de:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     5e0:	4281      	cmp	r1, r0
     5e2:	d201      	bcs.n	5e8 <_sercom_get_sync_baud_val+0x10>
     5e4:	e00a      	b.n	5fc <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     5e6:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     5e8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     5ea:	1c63      	adds	r3, r4, #1
     5ec:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     5ee:	4288      	cmp	r0, r1
     5f0:	d9f9      	bls.n	5e6 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5f2:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     5f4:	2cff      	cmp	r4, #255	; 0xff
     5f6:	d801      	bhi.n	5fc <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     5f8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     5fa:	2300      	movs	r3, #0
	}
}
     5fc:	0018      	movs	r0, r3
     5fe:	bd10      	pop	{r4, pc}

00000600 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     600:	b5f0      	push	{r4, r5, r6, r7, lr}
     602:	465f      	mov	r7, fp
     604:	4656      	mov	r6, sl
     606:	464d      	mov	r5, r9
     608:	4644      	mov	r4, r8
     60a:	b4f0      	push	{r4, r5, r6, r7}
     60c:	b089      	sub	sp, #36	; 0x24
     60e:	000c      	movs	r4, r1
     610:	9205      	str	r2, [sp, #20]
     612:	aa12      	add	r2, sp, #72	; 0x48
     614:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     616:	0002      	movs	r2, r0
     618:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     61a:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     61c:	42a2      	cmp	r2, r4
     61e:	d900      	bls.n	622 <_sercom_get_async_baud_val+0x22>
     620:	e0c6      	b.n	7b0 <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     622:	2b00      	cmp	r3, #0
     624:	d151      	bne.n	6ca <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     626:	0002      	movs	r2, r0
     628:	0008      	movs	r0, r1
     62a:	2100      	movs	r1, #0
     62c:	4d64      	ldr	r5, [pc, #400]	; (7c0 <_sercom_get_async_baud_val+0x1c0>)
     62e:	47a8      	blx	r5
     630:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     632:	0026      	movs	r6, r4
     634:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     636:	2300      	movs	r3, #0
     638:	2400      	movs	r4, #0
     63a:	9300      	str	r3, [sp, #0]
     63c:	9401      	str	r4, [sp, #4]
     63e:	2200      	movs	r2, #0
     640:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     642:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     644:	2120      	movs	r1, #32
     646:	468c      	mov	ip, r1
     648:	391f      	subs	r1, #31
     64a:	9602      	str	r6, [sp, #8]
     64c:	9703      	str	r7, [sp, #12]
     64e:	2420      	movs	r4, #32
     650:	4264      	negs	r4, r4
     652:	1904      	adds	r4, r0, r4
     654:	d403      	bmi.n	65e <_sercom_get_async_baud_val+0x5e>
     656:	000d      	movs	r5, r1
     658:	40a5      	lsls	r5, r4
     65a:	46a8      	mov	r8, r5
     65c:	e004      	b.n	668 <_sercom_get_async_baud_val+0x68>
     65e:	4664      	mov	r4, ip
     660:	1a24      	subs	r4, r4, r0
     662:	000d      	movs	r5, r1
     664:	40e5      	lsrs	r5, r4
     666:	46a8      	mov	r8, r5
     668:	000c      	movs	r4, r1
     66a:	4084      	lsls	r4, r0
     66c:	46a1      	mov	r9, r4

		r = r << 1;
     66e:	0014      	movs	r4, r2
     670:	001d      	movs	r5, r3
     672:	18a4      	adds	r4, r4, r2
     674:	415d      	adcs	r5, r3
     676:	0022      	movs	r2, r4
     678:	002b      	movs	r3, r5

		if (n & bit_shift) {
     67a:	4646      	mov	r6, r8
     67c:	465f      	mov	r7, fp
     67e:	423e      	tst	r6, r7
     680:	d003      	beq.n	68a <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
     682:	000e      	movs	r6, r1
     684:	4326      	orrs	r6, r4
     686:	0032      	movs	r2, r6
     688:	002b      	movs	r3, r5
		}

		if (r >= d) {
     68a:	9c02      	ldr	r4, [sp, #8]
     68c:	9d03      	ldr	r5, [sp, #12]
     68e:	429d      	cmp	r5, r3
     690:	d80f      	bhi.n	6b2 <_sercom_get_async_baud_val+0xb2>
     692:	d101      	bne.n	698 <_sercom_get_async_baud_val+0x98>
     694:	4294      	cmp	r4, r2
     696:	d80c      	bhi.n	6b2 <_sercom_get_async_baud_val+0xb2>
			r = r - d;
     698:	9c02      	ldr	r4, [sp, #8]
     69a:	9d03      	ldr	r5, [sp, #12]
     69c:	1b12      	subs	r2, r2, r4
     69e:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     6a0:	464d      	mov	r5, r9
     6a2:	9e00      	ldr	r6, [sp, #0]
     6a4:	9f01      	ldr	r7, [sp, #4]
     6a6:	4335      	orrs	r5, r6
     6a8:	003c      	movs	r4, r7
     6aa:	4646      	mov	r6, r8
     6ac:	4334      	orrs	r4, r6
     6ae:	9500      	str	r5, [sp, #0]
     6b0:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     6b2:	3801      	subs	r0, #1
     6b4:	d2cb      	bcs.n	64e <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
     6b6:	2200      	movs	r2, #0
     6b8:	2301      	movs	r3, #1
     6ba:	9800      	ldr	r0, [sp, #0]
     6bc:	9901      	ldr	r1, [sp, #4]
     6be:	1a12      	subs	r2, r2, r0
     6c0:	418b      	sbcs	r3, r1
     6c2:	0c12      	lsrs	r2, r2, #16
     6c4:	041b      	lsls	r3, r3, #16
     6c6:	431a      	orrs	r2, r3
     6c8:	e06f      	b.n	7aa <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     6ca:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     6cc:	2b01      	cmp	r3, #1
     6ce:	d16c      	bne.n	7aa <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     6d0:	0f63      	lsrs	r3, r4, #29
     6d2:	9304      	str	r3, [sp, #16]
     6d4:	00e3      	lsls	r3, r4, #3
     6d6:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     6d8:	000a      	movs	r2, r1
     6da:	2300      	movs	r3, #0
     6dc:	2100      	movs	r1, #0
     6de:	4c38      	ldr	r4, [pc, #224]	; (7c0 <_sercom_get_async_baud_val+0x1c0>)
     6e0:	47a0      	blx	r4
     6e2:	0004      	movs	r4, r0
     6e4:	000d      	movs	r5, r1
     6e6:	2300      	movs	r3, #0
     6e8:	469c      	mov	ip, r3
     6ea:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     6ec:	3320      	adds	r3, #32
     6ee:	469b      	mov	fp, r3
     6f0:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     6f2:	4663      	mov	r3, ip
     6f4:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     6f6:	2300      	movs	r3, #0
     6f8:	9302      	str	r3, [sp, #8]
     6fa:	2200      	movs	r2, #0
     6fc:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     6fe:	213f      	movs	r1, #63	; 0x3f
     700:	9400      	str	r4, [sp, #0]
     702:	9501      	str	r5, [sp, #4]
     704:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
     706:	2120      	movs	r1, #32
     708:	4249      	negs	r1, r1
     70a:	1879      	adds	r1, r7, r1
     70c:	d403      	bmi.n	716 <_sercom_get_async_baud_val+0x116>
     70e:	0030      	movs	r0, r6
     710:	4088      	lsls	r0, r1
     712:	4684      	mov	ip, r0
     714:	e004      	b.n	720 <_sercom_get_async_baud_val+0x120>
     716:	4659      	mov	r1, fp
     718:	1bc9      	subs	r1, r1, r7
     71a:	0030      	movs	r0, r6
     71c:	40c8      	lsrs	r0, r1
     71e:	4684      	mov	ip, r0
     720:	0031      	movs	r1, r6
     722:	40b9      	lsls	r1, r7
     724:	4689      	mov	r9, r1

		r = r << 1;
     726:	0010      	movs	r0, r2
     728:	0019      	movs	r1, r3
     72a:	1880      	adds	r0, r0, r2
     72c:	4159      	adcs	r1, r3
     72e:	0002      	movs	r2, r0
     730:	000b      	movs	r3, r1

		if (n & bit_shift) {
     732:	4644      	mov	r4, r8
     734:	464d      	mov	r5, r9
     736:	402c      	ands	r4, r5
     738:	46a2      	mov	sl, r4
     73a:	4664      	mov	r4, ip
     73c:	9d04      	ldr	r5, [sp, #16]
     73e:	402c      	ands	r4, r5
     740:	46a4      	mov	ip, r4
     742:	4654      	mov	r4, sl
     744:	4665      	mov	r5, ip
     746:	432c      	orrs	r4, r5
     748:	d003      	beq.n	752 <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
     74a:	0034      	movs	r4, r6
     74c:	4304      	orrs	r4, r0
     74e:	0022      	movs	r2, r4
     750:	000b      	movs	r3, r1
		}

		if (r >= d) {
     752:	9800      	ldr	r0, [sp, #0]
     754:	9901      	ldr	r1, [sp, #4]
     756:	4299      	cmp	r1, r3
     758:	d80a      	bhi.n	770 <_sercom_get_async_baud_val+0x170>
     75a:	d101      	bne.n	760 <_sercom_get_async_baud_val+0x160>
     75c:	4290      	cmp	r0, r2
     75e:	d807      	bhi.n	770 <_sercom_get_async_baud_val+0x170>
			r = r - d;
     760:	9800      	ldr	r0, [sp, #0]
     762:	9901      	ldr	r1, [sp, #4]
     764:	1a12      	subs	r2, r2, r0
     766:	418b      	sbcs	r3, r1
			q |= bit_shift;
     768:	9902      	ldr	r1, [sp, #8]
     76a:	4648      	mov	r0, r9
     76c:	4301      	orrs	r1, r0
     76e:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     770:	3f01      	subs	r7, #1
     772:	d2c8      	bcs.n	706 <_sercom_get_async_baud_val+0x106>
     774:	9c00      	ldr	r4, [sp, #0]
     776:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     778:	9902      	ldr	r1, [sp, #8]
     77a:	9a07      	ldr	r2, [sp, #28]
     77c:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     77e:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     780:	4910      	ldr	r1, [pc, #64]	; (7c4 <_sercom_get_async_baud_val+0x1c4>)
     782:	428b      	cmp	r3, r1
     784:	d90b      	bls.n	79e <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     786:	9b06      	ldr	r3, [sp, #24]
     788:	3301      	adds	r3, #1
     78a:	b2db      	uxtb	r3, r3
     78c:	0019      	movs	r1, r3
     78e:	9306      	str	r3, [sp, #24]
     790:	0013      	movs	r3, r2
     792:	3301      	adds	r3, #1
     794:	9307      	str	r3, [sp, #28]
     796:	2908      	cmp	r1, #8
     798:	d1ad      	bne.n	6f6 <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     79a:	2540      	movs	r5, #64	; 0x40
     79c:	e008      	b.n	7b0 <_sercom_get_async_baud_val+0x1b0>
     79e:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     7a0:	9a06      	ldr	r2, [sp, #24]
     7a2:	2a08      	cmp	r2, #8
     7a4:	d004      	beq.n	7b0 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     7a6:	0352      	lsls	r2, r2, #13
     7a8:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     7aa:	9b05      	ldr	r3, [sp, #20]
     7ac:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     7ae:	2500      	movs	r5, #0
}
     7b0:	0028      	movs	r0, r5
     7b2:	b009      	add	sp, #36	; 0x24
     7b4:	bc3c      	pop	{r2, r3, r4, r5}
     7b6:	4690      	mov	r8, r2
     7b8:	4699      	mov	r9, r3
     7ba:	46a2      	mov	sl, r4
     7bc:	46ab      	mov	fp, r5
     7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7c0:	00004489 	.word	0x00004489
     7c4:	00001fff 	.word	0x00001fff

000007c8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     7c8:	b510      	push	{r4, lr}
     7ca:	b082      	sub	sp, #8
     7cc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     7ce:	4b0e      	ldr	r3, [pc, #56]	; (808 <sercom_set_gclk_generator+0x40>)
     7d0:	781b      	ldrb	r3, [r3, #0]
     7d2:	2b00      	cmp	r3, #0
     7d4:	d001      	beq.n	7da <sercom_set_gclk_generator+0x12>
     7d6:	2900      	cmp	r1, #0
     7d8:	d00d      	beq.n	7f6 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     7da:	a901      	add	r1, sp, #4
     7dc:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     7de:	2011      	movs	r0, #17
     7e0:	4b0a      	ldr	r3, [pc, #40]	; (80c <sercom_set_gclk_generator+0x44>)
     7e2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     7e4:	2011      	movs	r0, #17
     7e6:	4b0a      	ldr	r3, [pc, #40]	; (810 <sercom_set_gclk_generator+0x48>)
     7e8:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     7ea:	4b07      	ldr	r3, [pc, #28]	; (808 <sercom_set_gclk_generator+0x40>)
     7ec:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     7ee:	2201      	movs	r2, #1
     7f0:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     7f2:	2000      	movs	r0, #0
     7f4:	e006      	b.n	804 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     7f6:	4b04      	ldr	r3, [pc, #16]	; (808 <sercom_set_gclk_generator+0x40>)
     7f8:	785b      	ldrb	r3, [r3, #1]
     7fa:	4283      	cmp	r3, r0
     7fc:	d001      	beq.n	802 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     7fe:	201d      	movs	r0, #29
     800:	e000      	b.n	804 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     802:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     804:	b002      	add	sp, #8
     806:	bd10      	pop	{r4, pc}
     808:	200000cc 	.word	0x200000cc
     80c:	00001c21 	.word	0x00001c21
     810:	00001bb1 	.word	0x00001bb1

00000814 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     814:	4b44      	ldr	r3, [pc, #272]	; (928 <_sercom_get_default_pad+0x114>)
     816:	4298      	cmp	r0, r3
     818:	d034      	beq.n	884 <_sercom_get_default_pad+0x70>
     81a:	d807      	bhi.n	82c <_sercom_get_default_pad+0x18>
     81c:	2384      	movs	r3, #132	; 0x84
     81e:	05db      	lsls	r3, r3, #23
     820:	4298      	cmp	r0, r3
     822:	d00d      	beq.n	840 <_sercom_get_default_pad+0x2c>
     824:	4b41      	ldr	r3, [pc, #260]	; (92c <_sercom_get_default_pad+0x118>)
     826:	4298      	cmp	r0, r3
     828:	d01b      	beq.n	862 <_sercom_get_default_pad+0x4e>
     82a:	e06f      	b.n	90c <_sercom_get_default_pad+0xf8>
     82c:	4b40      	ldr	r3, [pc, #256]	; (930 <_sercom_get_default_pad+0x11c>)
     82e:	4298      	cmp	r0, r3
     830:	d04a      	beq.n	8c8 <_sercom_get_default_pad+0xb4>
     832:	4b40      	ldr	r3, [pc, #256]	; (934 <_sercom_get_default_pad+0x120>)
     834:	4298      	cmp	r0, r3
     836:	d058      	beq.n	8ea <_sercom_get_default_pad+0xd6>
     838:	4b3f      	ldr	r3, [pc, #252]	; (938 <_sercom_get_default_pad+0x124>)
     83a:	4298      	cmp	r0, r3
     83c:	d166      	bne.n	90c <_sercom_get_default_pad+0xf8>
     83e:	e032      	b.n	8a6 <_sercom_get_default_pad+0x92>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     840:	2901      	cmp	r1, #1
     842:	d006      	beq.n	852 <_sercom_get_default_pad+0x3e>
     844:	2900      	cmp	r1, #0
     846:	d063      	beq.n	910 <_sercom_get_default_pad+0xfc>
     848:	2902      	cmp	r1, #2
     84a:	d006      	beq.n	85a <_sercom_get_default_pad+0x46>
     84c:	2903      	cmp	r1, #3
     84e:	d006      	beq.n	85e <_sercom_get_default_pad+0x4a>
     850:	e001      	b.n	856 <_sercom_get_default_pad+0x42>
     852:	483a      	ldr	r0, [pc, #232]	; (93c <_sercom_get_default_pad+0x128>)
     854:	e067      	b.n	926 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     856:	2000      	movs	r0, #0
     858:	e065      	b.n	926 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     85a:	4839      	ldr	r0, [pc, #228]	; (940 <_sercom_get_default_pad+0x12c>)
     85c:	e063      	b.n	926 <_sercom_get_default_pad+0x112>
     85e:	4839      	ldr	r0, [pc, #228]	; (944 <_sercom_get_default_pad+0x130>)
     860:	e061      	b.n	926 <_sercom_get_default_pad+0x112>
     862:	2901      	cmp	r1, #1
     864:	d006      	beq.n	874 <_sercom_get_default_pad+0x60>
     866:	2900      	cmp	r1, #0
     868:	d054      	beq.n	914 <_sercom_get_default_pad+0x100>
     86a:	2902      	cmp	r1, #2
     86c:	d006      	beq.n	87c <_sercom_get_default_pad+0x68>
     86e:	2903      	cmp	r1, #3
     870:	d006      	beq.n	880 <_sercom_get_default_pad+0x6c>
     872:	e001      	b.n	878 <_sercom_get_default_pad+0x64>
     874:	4834      	ldr	r0, [pc, #208]	; (948 <_sercom_get_default_pad+0x134>)
     876:	e056      	b.n	926 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     878:	2000      	movs	r0, #0
     87a:	e054      	b.n	926 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     87c:	4833      	ldr	r0, [pc, #204]	; (94c <_sercom_get_default_pad+0x138>)
     87e:	e052      	b.n	926 <_sercom_get_default_pad+0x112>
     880:	4833      	ldr	r0, [pc, #204]	; (950 <_sercom_get_default_pad+0x13c>)
     882:	e050      	b.n	926 <_sercom_get_default_pad+0x112>
     884:	2901      	cmp	r1, #1
     886:	d006      	beq.n	896 <_sercom_get_default_pad+0x82>
     888:	2900      	cmp	r1, #0
     88a:	d045      	beq.n	918 <_sercom_get_default_pad+0x104>
     88c:	2902      	cmp	r1, #2
     88e:	d006      	beq.n	89e <_sercom_get_default_pad+0x8a>
     890:	2903      	cmp	r1, #3
     892:	d006      	beq.n	8a2 <_sercom_get_default_pad+0x8e>
     894:	e001      	b.n	89a <_sercom_get_default_pad+0x86>
     896:	482f      	ldr	r0, [pc, #188]	; (954 <_sercom_get_default_pad+0x140>)
     898:	e045      	b.n	926 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     89a:	2000      	movs	r0, #0
     89c:	e043      	b.n	926 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     89e:	482e      	ldr	r0, [pc, #184]	; (958 <_sercom_get_default_pad+0x144>)
     8a0:	e041      	b.n	926 <_sercom_get_default_pad+0x112>
     8a2:	482e      	ldr	r0, [pc, #184]	; (95c <_sercom_get_default_pad+0x148>)
     8a4:	e03f      	b.n	926 <_sercom_get_default_pad+0x112>
     8a6:	2901      	cmp	r1, #1
     8a8:	d006      	beq.n	8b8 <_sercom_get_default_pad+0xa4>
     8aa:	2900      	cmp	r1, #0
     8ac:	d036      	beq.n	91c <_sercom_get_default_pad+0x108>
     8ae:	2902      	cmp	r1, #2
     8b0:	d006      	beq.n	8c0 <_sercom_get_default_pad+0xac>
     8b2:	2903      	cmp	r1, #3
     8b4:	d006      	beq.n	8c4 <_sercom_get_default_pad+0xb0>
     8b6:	e001      	b.n	8bc <_sercom_get_default_pad+0xa8>
     8b8:	4829      	ldr	r0, [pc, #164]	; (960 <_sercom_get_default_pad+0x14c>)
     8ba:	e034      	b.n	926 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     8bc:	2000      	movs	r0, #0
     8be:	e032      	b.n	926 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8c0:	4828      	ldr	r0, [pc, #160]	; (964 <_sercom_get_default_pad+0x150>)
     8c2:	e030      	b.n	926 <_sercom_get_default_pad+0x112>
     8c4:	4828      	ldr	r0, [pc, #160]	; (968 <_sercom_get_default_pad+0x154>)
     8c6:	e02e      	b.n	926 <_sercom_get_default_pad+0x112>
     8c8:	2901      	cmp	r1, #1
     8ca:	d006      	beq.n	8da <_sercom_get_default_pad+0xc6>
     8cc:	2900      	cmp	r1, #0
     8ce:	d027      	beq.n	920 <_sercom_get_default_pad+0x10c>
     8d0:	2902      	cmp	r1, #2
     8d2:	d006      	beq.n	8e2 <_sercom_get_default_pad+0xce>
     8d4:	2903      	cmp	r1, #3
     8d6:	d006      	beq.n	8e6 <_sercom_get_default_pad+0xd2>
     8d8:	e001      	b.n	8de <_sercom_get_default_pad+0xca>
     8da:	4824      	ldr	r0, [pc, #144]	; (96c <_sercom_get_default_pad+0x158>)
     8dc:	e023      	b.n	926 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     8de:	2000      	movs	r0, #0
     8e0:	e021      	b.n	926 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8e2:	4823      	ldr	r0, [pc, #140]	; (970 <_sercom_get_default_pad+0x15c>)
     8e4:	e01f      	b.n	926 <_sercom_get_default_pad+0x112>
     8e6:	4823      	ldr	r0, [pc, #140]	; (974 <_sercom_get_default_pad+0x160>)
     8e8:	e01d      	b.n	926 <_sercom_get_default_pad+0x112>
     8ea:	2901      	cmp	r1, #1
     8ec:	d006      	beq.n	8fc <_sercom_get_default_pad+0xe8>
     8ee:	2900      	cmp	r1, #0
     8f0:	d018      	beq.n	924 <_sercom_get_default_pad+0x110>
     8f2:	2902      	cmp	r1, #2
     8f4:	d006      	beq.n	904 <_sercom_get_default_pad+0xf0>
     8f6:	2903      	cmp	r1, #3
     8f8:	d006      	beq.n	908 <_sercom_get_default_pad+0xf4>
     8fa:	e001      	b.n	900 <_sercom_get_default_pad+0xec>
     8fc:	481e      	ldr	r0, [pc, #120]	; (978 <_sercom_get_default_pad+0x164>)
     8fe:	e012      	b.n	926 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     900:	2000      	movs	r0, #0
     902:	e010      	b.n	926 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     904:	481d      	ldr	r0, [pc, #116]	; (97c <_sercom_get_default_pad+0x168>)
     906:	e00e      	b.n	926 <_sercom_get_default_pad+0x112>
     908:	481d      	ldr	r0, [pc, #116]	; (980 <_sercom_get_default_pad+0x16c>)
     90a:	e00c      	b.n	926 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     90c:	2000      	movs	r0, #0
     90e:	e00a      	b.n	926 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     910:	481c      	ldr	r0, [pc, #112]	; (984 <_sercom_get_default_pad+0x170>)
     912:	e008      	b.n	926 <_sercom_get_default_pad+0x112>
     914:	2003      	movs	r0, #3
     916:	e006      	b.n	926 <_sercom_get_default_pad+0x112>
     918:	481b      	ldr	r0, [pc, #108]	; (988 <_sercom_get_default_pad+0x174>)
     91a:	e004      	b.n	926 <_sercom_get_default_pad+0x112>
     91c:	481b      	ldr	r0, [pc, #108]	; (98c <_sercom_get_default_pad+0x178>)
     91e:	e002      	b.n	926 <_sercom_get_default_pad+0x112>
     920:	481b      	ldr	r0, [pc, #108]	; (990 <_sercom_get_default_pad+0x17c>)
     922:	e000      	b.n	926 <_sercom_get_default_pad+0x112>
     924:	481b      	ldr	r0, [pc, #108]	; (994 <_sercom_get_default_pad+0x180>)
	}

	Assert(false);
	return 0;
}
     926:	4770      	bx	lr
     928:	42000800 	.word	0x42000800
     92c:	42000400 	.word	0x42000400
     930:	42001000 	.word	0x42001000
     934:	43000400 	.word	0x43000400
     938:	42000c00 	.word	0x42000c00
     93c:	00050003 	.word	0x00050003
     940:	00060003 	.word	0x00060003
     944:	00070003 	.word	0x00070003
     948:	00010003 	.word	0x00010003
     94c:	001e0003 	.word	0x001e0003
     950:	001f0003 	.word	0x001f0003
     954:	00090003 	.word	0x00090003
     958:	000a0003 	.word	0x000a0003
     95c:	000b0003 	.word	0x000b0003
     960:	00110003 	.word	0x00110003
     964:	00120003 	.word	0x00120003
     968:	00130003 	.word	0x00130003
     96c:	000d0003 	.word	0x000d0003
     970:	000e0003 	.word	0x000e0003
     974:	000f0003 	.word	0x000f0003
     978:	00170003 	.word	0x00170003
     97c:	00180003 	.word	0x00180003
     980:	00190003 	.word	0x00190003
     984:	00040003 	.word	0x00040003
     988:	00080003 	.word	0x00080003
     98c:	00100003 	.word	0x00100003
     990:	000c0003 	.word	0x000c0003
     994:	00160003 	.word	0x00160003

00000998 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     998:	b530      	push	{r4, r5, lr}
     99a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     99c:	4b0c      	ldr	r3, [pc, #48]	; (9d0 <_sercom_get_sercom_inst_index+0x38>)
     99e:	466a      	mov	r2, sp
     9a0:	cb32      	ldmia	r3!, {r1, r4, r5}
     9a2:	c232      	stmia	r2!, {r1, r4, r5}
     9a4:	cb32      	ldmia	r3!, {r1, r4, r5}
     9a6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     9a8:	9b00      	ldr	r3, [sp, #0]
     9aa:	4283      	cmp	r3, r0
     9ac:	d006      	beq.n	9bc <_sercom_get_sercom_inst_index+0x24>
     9ae:	2301      	movs	r3, #1
     9b0:	009a      	lsls	r2, r3, #2
     9b2:	4669      	mov	r1, sp
     9b4:	5852      	ldr	r2, [r2, r1]
     9b6:	4282      	cmp	r2, r0
     9b8:	d103      	bne.n	9c2 <_sercom_get_sercom_inst_index+0x2a>
     9ba:	e000      	b.n	9be <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9bc:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     9be:	b2d8      	uxtb	r0, r3
     9c0:	e003      	b.n	9ca <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9c2:	3301      	adds	r3, #1
     9c4:	2b06      	cmp	r3, #6
     9c6:	d1f3      	bne.n	9b0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     9c8:	2000      	movs	r0, #0
}
     9ca:	b007      	add	sp, #28
     9cc:	bd30      	pop	{r4, r5, pc}
     9ce:	46c0      	nop			; (mov r8, r8)
     9d0:	0000661c 	.word	0x0000661c

000009d4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9d6:	4647      	mov	r7, r8
     9d8:	b480      	push	{r7}
     9da:	000c      	movs	r4, r1
     9dc:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     9de:	2800      	cmp	r0, #0
     9e0:	d10d      	bne.n	9fe <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
     9e2:	2a00      	cmp	r2, #0
     9e4:	dd0e      	ble.n	a04 <_read+0x30>
     9e6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     9e8:	4e08      	ldr	r6, [pc, #32]	; (a0c <_read+0x38>)
     9ea:	4d09      	ldr	r5, [pc, #36]	; (a10 <_read+0x3c>)
     9ec:	6830      	ldr	r0, [r6, #0]
     9ee:	0021      	movs	r1, r4
     9f0:	682b      	ldr	r3, [r5, #0]
     9f2:	4798      	blx	r3
		ptr++;
     9f4:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     9f6:	42a7      	cmp	r7, r4
     9f8:	d1f8      	bne.n	9ec <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     9fa:	4640      	mov	r0, r8
     9fc:	e003      	b.n	a06 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     9fe:	2001      	movs	r0, #1
     a00:	4240      	negs	r0, r0
     a02:	e000      	b.n	a06 <_read+0x32>
	}

	for (; len > 0; --len) {
     a04:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     a06:	bc04      	pop	{r2}
     a08:	4690      	mov	r8, r2
     a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a0c:	20003d0c 	.word	0x20003d0c
     a10:	20003d04 	.word	0x20003d04

00000a14 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     a14:	b5f0      	push	{r4, r5, r6, r7, lr}
     a16:	4647      	mov	r7, r8
     a18:	b480      	push	{r7}
     a1a:	000e      	movs	r6, r1
     a1c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     a1e:	3801      	subs	r0, #1
     a20:	2802      	cmp	r0, #2
     a22:	d811      	bhi.n	a48 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
     a24:	2a00      	cmp	r2, #0
     a26:	d012      	beq.n	a4e <_write+0x3a>
     a28:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     a2a:	4b0c      	ldr	r3, [pc, #48]	; (a5c <_write+0x48>)
     a2c:	4698      	mov	r8, r3
     a2e:	4f0c      	ldr	r7, [pc, #48]	; (a60 <_write+0x4c>)
     a30:	4643      	mov	r3, r8
     a32:	6818      	ldr	r0, [r3, #0]
     a34:	5d31      	ldrb	r1, [r6, r4]
     a36:	683b      	ldr	r3, [r7, #0]
     a38:	4798      	blx	r3
     a3a:	2800      	cmp	r0, #0
     a3c:	db09      	blt.n	a52 <_write+0x3e>
			return -1;
		}
		++nChars;
     a3e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     a40:	42a5      	cmp	r5, r4
     a42:	d1f5      	bne.n	a30 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
     a44:	0020      	movs	r0, r4
     a46:	e006      	b.n	a56 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     a48:	2001      	movs	r0, #1
     a4a:	4240      	negs	r0, r0
     a4c:	e003      	b.n	a56 <_write+0x42>
	}

	for (; len != 0; --len) {
     a4e:	2000      	movs	r0, #0
     a50:	e001      	b.n	a56 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     a52:	2001      	movs	r0, #1
     a54:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
     a56:	bc04      	pop	{r2}
     a58:	4690      	mov	r8, r2
     a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a5c:	20003d0c 	.word	0x20003d0c
     a60:	20003d08 	.word	0x20003d08

00000a64 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     a64:	b5f0      	push	{r4, r5, r6, r7, lr}
     a66:	465f      	mov	r7, fp
     a68:	4656      	mov	r6, sl
     a6a:	464d      	mov	r5, r9
     a6c:	4644      	mov	r4, r8
     a6e:	b4f0      	push	{r4, r5, r6, r7}
     a70:	b091      	sub	sp, #68	; 0x44
     a72:	0005      	movs	r5, r0
     a74:	000c      	movs	r4, r1
     a76:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     a78:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a7a:	0008      	movs	r0, r1
     a7c:	4bc4      	ldr	r3, [pc, #784]	; (d90 <usart_init+0x32c>)
     a7e:	4798      	blx	r3
     a80:	1e02      	subs	r2, r0, #0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
     a82:	2a05      	cmp	r2, #5
     a84:	d003      	beq.n	a8e <usart_init+0x2a>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a86:	0007      	movs	r7, r0
     a88:	3712      	adds	r7, #18
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     a8a:	0003      	movs	r3, r0
     a8c:	e001      	b.n	a92 <usart_init+0x2e>
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     a8e:	2718      	movs	r7, #24
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
     a90:	2301      	movs	r3, #1
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     a92:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     a94:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     a96:	07c9      	lsls	r1, r1, #31
     a98:	d500      	bpl.n	a9c <usart_init+0x38>
     a9a:	e171      	b.n	d80 <usart_init+0x31c>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     a9c:	6821      	ldr	r1, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     a9e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     aa0:	0789      	lsls	r1, r1, #30
     aa2:	d500      	bpl.n	aa6 <usart_init+0x42>
     aa4:	e16c      	b.n	d80 <usart_init+0x31c>
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
     aa6:	2a05      	cmp	r2, #5
     aa8:	d107      	bne.n	aba <usart_init+0x56>
     aaa:	48ba      	ldr	r0, [pc, #744]	; (d94 <usart_init+0x330>)
     aac:	6a02      	ldr	r2, [r0, #32]
     aae:	2101      	movs	r1, #1
     ab0:	4099      	lsls	r1, r3
     ab2:	000b      	movs	r3, r1
     ab4:	4313      	orrs	r3, r2
     ab6:	6203      	str	r3, [r0, #32]
     ab8:	e006      	b.n	ac8 <usart_init+0x64>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     aba:	48b6      	ldr	r0, [pc, #728]	; (d94 <usart_init+0x330>)
     abc:	69c2      	ldr	r2, [r0, #28]
     abe:	2101      	movs	r1, #1
     ac0:	4099      	lsls	r1, r3
     ac2:	000b      	movs	r3, r1
     ac4:	4313      	orrs	r3, r2
     ac6:	61c3      	str	r3, [r0, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     ac8:	a90f      	add	r1, sp, #60	; 0x3c
     aca:	232d      	movs	r3, #45	; 0x2d
     acc:	4698      	mov	r8, r3
     ace:	5cf3      	ldrb	r3, [r6, r3]
     ad0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ad2:	b2ff      	uxtb	r7, r7
     ad4:	0038      	movs	r0, r7
     ad6:	4bb0      	ldr	r3, [pc, #704]	; (d98 <usart_init+0x334>)
     ad8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     ada:	0038      	movs	r0, r7
     adc:	4baf      	ldr	r3, [pc, #700]	; (d9c <usart_init+0x338>)
     ade:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     ae0:	4643      	mov	r3, r8
     ae2:	5cf0      	ldrb	r0, [r6, r3]
     ae4:	2100      	movs	r1, #0
     ae6:	4bae      	ldr	r3, [pc, #696]	; (da0 <usart_init+0x33c>)
     ae8:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     aea:	7af3      	ldrb	r3, [r6, #11]
     aec:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     aee:	2324      	movs	r3, #36	; 0x24
     af0:	5cf3      	ldrb	r3, [r6, r3]
     af2:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     af4:	2325      	movs	r3, #37	; 0x25
     af6:	5cf3      	ldrb	r3, [r6, r3]
     af8:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     afa:	7ef3      	ldrb	r3, [r6, #27]
     afc:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     afe:	7f33      	ldrb	r3, [r6, #28]
     b00:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b02:	682b      	ldr	r3, [r5, #0]
     b04:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b06:	0018      	movs	r0, r3
     b08:	4ba1      	ldr	r3, [pc, #644]	; (d90 <usart_init+0x32c>)
     b0a:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b0c:	3012      	adds	r0, #18
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     b0e:	2200      	movs	r2, #0
     b10:	230e      	movs	r3, #14
     b12:	a906      	add	r1, sp, #24
     b14:	468c      	mov	ip, r1
     b16:	4463      	add	r3, ip
     b18:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     b1a:	8a32      	ldrh	r2, [r6, #16]
     b1c:	9202      	str	r2, [sp, #8]
     b1e:	2380      	movs	r3, #128	; 0x80
     b20:	01db      	lsls	r3, r3, #7
     b22:	429a      	cmp	r2, r3
     b24:	d01a      	beq.n	b5c <usart_init+0xf8>
     b26:	d804      	bhi.n	b32 <usart_init+0xce>
     b28:	2380      	movs	r3, #128	; 0x80
     b2a:	019b      	lsls	r3, r3, #6
     b2c:	429a      	cmp	r2, r3
     b2e:	d00b      	beq.n	b48 <usart_init+0xe4>
     b30:	e107      	b.n	d42 <usart_init+0x2de>
     b32:	23c0      	movs	r3, #192	; 0xc0
     b34:	01db      	lsls	r3, r3, #7
     b36:	9a02      	ldr	r2, [sp, #8]
     b38:	429a      	cmp	r2, r3
     b3a:	d00a      	beq.n	b52 <usart_init+0xee>
     b3c:	2380      	movs	r3, #128	; 0x80
     b3e:	021b      	lsls	r3, r3, #8
     b40:	429a      	cmp	r2, r3
     b42:	d100      	bne.n	b46 <usart_init+0xe2>
     b44:	e102      	b.n	d4c <usart_init+0x2e8>
     b46:	e0fc      	b.n	d42 <usart_init+0x2de>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     b48:	2310      	movs	r3, #16
     b4a:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     b4c:	3b0f      	subs	r3, #15
     b4e:	9307      	str	r3, [sp, #28]
     b50:	e100      	b.n	d54 <usart_init+0x2f0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     b52:	2308      	movs	r3, #8
     b54:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     b56:	3b07      	subs	r3, #7
     b58:	9307      	str	r3, [sp, #28]
     b5a:	e0fb      	b.n	d54 <usart_init+0x2f0>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     b5c:	6833      	ldr	r3, [r6, #0]
     b5e:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
     b60:	68f3      	ldr	r3, [r6, #12]
     b62:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     b64:	6973      	ldr	r3, [r6, #20]
     b66:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     b68:	7e33      	ldrb	r3, [r6, #24]
     b6a:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     b6c:	2326      	movs	r3, #38	; 0x26
     b6e:	5cf3      	ldrb	r3, [r6, r3]
     b70:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     b72:	6873      	ldr	r3, [r6, #4]
     b74:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     b76:	2b00      	cmp	r3, #0
     b78:	d016      	beq.n	ba8 <usart_init+0x144>
     b7a:	2380      	movs	r3, #128	; 0x80
     b7c:	055b      	lsls	r3, r3, #21
     b7e:	459a      	cmp	sl, r3
     b80:	d139      	bne.n	bf6 <usart_init+0x192>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     b82:	2327      	movs	r3, #39	; 0x27
     b84:	5cf3      	ldrb	r3, [r6, r3]
     b86:	2b00      	cmp	r3, #0
     b88:	d139      	bne.n	bfe <usart_init+0x19a>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     b8a:	6a33      	ldr	r3, [r6, #32]
     b8c:	001f      	movs	r7, r3
     b8e:	b2c0      	uxtb	r0, r0
     b90:	4b84      	ldr	r3, [pc, #528]	; (da4 <usart_init+0x340>)
     b92:	4798      	blx	r3
     b94:	0001      	movs	r1, r0
     b96:	220e      	movs	r2, #14
     b98:	ab06      	add	r3, sp, #24
     b9a:	469c      	mov	ip, r3
     b9c:	4462      	add	r2, ip
     b9e:	0038      	movs	r0, r7
     ba0:	4b81      	ldr	r3, [pc, #516]	; (da8 <usart_init+0x344>)
     ba2:	4798      	blx	r3
     ba4:	0003      	movs	r3, r0
     ba6:	e027      	b.n	bf8 <usart_init+0x194>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     ba8:	2308      	movs	r3, #8
     baa:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     bac:	2300      	movs	r3, #0
     bae:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     bb0:	2327      	movs	r3, #39	; 0x27
     bb2:	5cf3      	ldrb	r3, [r6, r3]
     bb4:	2b00      	cmp	r3, #0
     bb6:	d00c      	beq.n	bd2 <usart_init+0x16e>
				status_code =
     bb8:	9b06      	ldr	r3, [sp, #24]
     bba:	9300      	str	r3, [sp, #0]
     bbc:	9b07      	ldr	r3, [sp, #28]
     bbe:	220e      	movs	r2, #14
     bc0:	a906      	add	r1, sp, #24
     bc2:	468c      	mov	ip, r1
     bc4:	4462      	add	r2, ip
     bc6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     bc8:	6a30      	ldr	r0, [r6, #32]
     bca:	4f78      	ldr	r7, [pc, #480]	; (dac <usart_init+0x348>)
     bcc:	47b8      	blx	r7
     bce:	0003      	movs	r3, r0
     bd0:	e012      	b.n	bf8 <usart_init+0x194>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     bd2:	6a33      	ldr	r3, [r6, #32]
     bd4:	001f      	movs	r7, r3
     bd6:	b2c0      	uxtb	r0, r0
     bd8:	4b72      	ldr	r3, [pc, #456]	; (da4 <usart_init+0x340>)
     bda:	4798      	blx	r3
     bdc:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     bde:	9b06      	ldr	r3, [sp, #24]
     be0:	9300      	str	r3, [sp, #0]
     be2:	9b07      	ldr	r3, [sp, #28]
     be4:	220e      	movs	r2, #14
     be6:	a806      	add	r0, sp, #24
     be8:	4684      	mov	ip, r0
     bea:	4462      	add	r2, ip
     bec:	0038      	movs	r0, r7
     bee:	4f6f      	ldr	r7, [pc, #444]	; (dac <usart_init+0x348>)
     bf0:	47b8      	blx	r7
     bf2:	0003      	movs	r3, r0
     bf4:	e000      	b.n	bf8 <usart_init+0x194>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     bf6:	2300      	movs	r3, #0
     bf8:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     bfa:	d000      	beq.n	bfe <usart_init+0x19a>
     bfc:	e0c0      	b.n	d80 <usart_init+0x31c>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     bfe:	7e73      	ldrb	r3, [r6, #25]
     c00:	2b00      	cmp	r3, #0
     c02:	d002      	beq.n	c0a <usart_init+0x1a6>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     c04:	7eb3      	ldrb	r3, [r6, #26]
     c06:	464a      	mov	r2, r9
     c08:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     c0a:	682a      	ldr	r2, [r5, #0]
     c0c:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     c0e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     c10:	2b00      	cmp	r3, #0
     c12:	d1fc      	bne.n	c0e <usart_init+0x1aa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     c14:	330e      	adds	r3, #14
     c16:	aa06      	add	r2, sp, #24
     c18:	4694      	mov	ip, r2
     c1a:	4463      	add	r3, ip
     c1c:	881b      	ldrh	r3, [r3, #0]
     c1e:	464a      	mov	r2, r9
     c20:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     c22:	9b04      	ldr	r3, [sp, #16]
     c24:	465a      	mov	r2, fp
     c26:	4313      	orrs	r3, r2
     c28:	9a03      	ldr	r2, [sp, #12]
     c2a:	4313      	orrs	r3, r2
     c2c:	4652      	mov	r2, sl
     c2e:	4313      	orrs	r3, r2
     c30:	433b      	orrs	r3, r7
     c32:	4642      	mov	r2, r8
     c34:	0212      	lsls	r2, r2, #8
     c36:	4313      	orrs	r3, r2
     c38:	9a05      	ldr	r2, [sp, #20]
     c3a:	0757      	lsls	r7, r2, #29
     c3c:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     c3e:	2327      	movs	r3, #39	; 0x27
     c40:	5cf3      	ldrb	r3, [r6, r3]
     c42:	2b00      	cmp	r3, #0
     c44:	d101      	bne.n	c4a <usart_init+0x1e6>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     c46:	3304      	adds	r3, #4
     c48:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     c4a:	7e71      	ldrb	r1, [r6, #25]
     c4c:	0289      	lsls	r1, r1, #10
     c4e:	7f33      	ldrb	r3, [r6, #28]
     c50:	025b      	lsls	r3, r3, #9
     c52:	4319      	orrs	r1, r3
     c54:	7f73      	ldrb	r3, [r6, #29]
     c56:	021b      	lsls	r3, r3, #8
     c58:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c5a:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     c5c:	5cf3      	ldrb	r3, [r6, r3]
     c5e:	045b      	lsls	r3, r3, #17
     c60:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     c62:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     c64:	5cf2      	ldrb	r2, [r6, r3]
     c66:	0412      	lsls	r2, r2, #16
     c68:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     c6a:	7af3      	ldrb	r3, [r6, #11]
     c6c:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     c6e:	8933      	ldrh	r3, [r6, #8]
     c70:	2bff      	cmp	r3, #255	; 0xff
     c72:	d004      	beq.n	c7e <usart_init+0x21a>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     c74:	2280      	movs	r2, #128	; 0x80
     c76:	0452      	lsls	r2, r2, #17
     c78:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     c7a:	4319      	orrs	r1, r3
     c7c:	e005      	b.n	c8a <usart_init+0x226>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     c7e:	7ef3      	ldrb	r3, [r6, #27]
     c80:	2b00      	cmp	r3, #0
     c82:	d002      	beq.n	c8a <usart_init+0x226>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     c84:	2380      	movs	r3, #128	; 0x80
     c86:	04db      	lsls	r3, r3, #19
     c88:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     c8a:	232c      	movs	r3, #44	; 0x2c
     c8c:	5cf3      	ldrb	r3, [r6, r3]
     c8e:	2b00      	cmp	r3, #0
     c90:	d103      	bne.n	c9a <usart_init+0x236>
     c92:	4b47      	ldr	r3, [pc, #284]	; (db0 <usart_init+0x34c>)
     c94:	789b      	ldrb	r3, [r3, #2]
     c96:	079b      	lsls	r3, r3, #30
     c98:	d501      	bpl.n	c9e <usart_init+0x23a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     c9a:	2380      	movs	r3, #128	; 0x80
     c9c:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     c9e:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     ca0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     ca2:	2b00      	cmp	r3, #0
     ca4:	d1fc      	bne.n	ca0 <usart_init+0x23c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     ca6:	464b      	mov	r3, r9
     ca8:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     caa:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     cac:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     cae:	2b00      	cmp	r3, #0
     cb0:	d1fc      	bne.n	cac <usart_init+0x248>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     cb2:	464b      	mov	r3, r9
     cb4:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     cb6:	ab0e      	add	r3, sp, #56	; 0x38
     cb8:	2280      	movs	r2, #128	; 0x80
     cba:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     cbc:	2200      	movs	r2, #0
     cbe:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     cc0:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     cc2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     cc4:	6b33      	ldr	r3, [r6, #48]	; 0x30
     cc6:	930a      	str	r3, [sp, #40]	; 0x28
     cc8:	6b73      	ldr	r3, [r6, #52]	; 0x34
     cca:	930b      	str	r3, [sp, #44]	; 0x2c
     ccc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     cce:	930c      	str	r3, [sp, #48]	; 0x30
     cd0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     cd2:	9302      	str	r3, [sp, #8]
     cd4:	930d      	str	r3, [sp, #52]	; 0x34
     cd6:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     cd8:	ae0e      	add	r6, sp, #56	; 0x38
     cda:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     cdc:	00bb      	lsls	r3, r7, #2
     cde:	aa0a      	add	r2, sp, #40	; 0x28
     ce0:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     ce2:	2800      	cmp	r0, #0
     ce4:	d102      	bne.n	cec <usart_init+0x288>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     ce6:	0020      	movs	r0, r4
     ce8:	4b32      	ldr	r3, [pc, #200]	; (db4 <usart_init+0x350>)
     cea:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     cec:	1c43      	adds	r3, r0, #1
     cee:	d005      	beq.n	cfc <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     cf0:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     cf2:	0c00      	lsrs	r0, r0, #16
     cf4:	b2c0      	uxtb	r0, r0
     cf6:	0031      	movs	r1, r6
     cf8:	4b2f      	ldr	r3, [pc, #188]	; (db8 <usart_init+0x354>)
     cfa:	4798      	blx	r3
     cfc:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     cfe:	2f04      	cmp	r7, #4
     d00:	d1eb      	bne.n	cda <usart_init+0x276>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     d02:	2300      	movs	r3, #0
     d04:	60eb      	str	r3, [r5, #12]
     d06:	612b      	str	r3, [r5, #16]
     d08:	616b      	str	r3, [r5, #20]
     d0a:	61ab      	str	r3, [r5, #24]
     d0c:	61eb      	str	r3, [r5, #28]
     d0e:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     d10:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     d12:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     d14:	2200      	movs	r2, #0
     d16:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     d18:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     d1a:	3330      	adds	r3, #48	; 0x30
     d1c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     d1e:	3301      	adds	r3, #1
     d20:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     d22:	3301      	adds	r3, #1
     d24:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     d26:	3301      	adds	r3, #1
     d28:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     d2a:	6828      	ldr	r0, [r5, #0]
     d2c:	4b18      	ldr	r3, [pc, #96]	; (d90 <usart_init+0x32c>)
     d2e:	4798      	blx	r3
     d30:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     d32:	4922      	ldr	r1, [pc, #136]	; (dbc <usart_init+0x358>)
     d34:	4b22      	ldr	r3, [pc, #136]	; (dc0 <usart_init+0x35c>)
     d36:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     d38:	00a4      	lsls	r4, r4, #2
     d3a:	4b22      	ldr	r3, [pc, #136]	; (dc4 <usart_init+0x360>)
     d3c:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     d3e:	2000      	movs	r0, #0
     d40:	e01e      	b.n	d80 <usart_init+0x31c>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     d42:	2310      	movs	r3, #16
     d44:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     d46:	2300      	movs	r3, #0
     d48:	9307      	str	r3, [sp, #28]
     d4a:	e003      	b.n	d54 <usart_init+0x2f0>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     d4c:	2303      	movs	r3, #3
     d4e:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     d50:	2300      	movs	r3, #0
     d52:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     d54:	6833      	ldr	r3, [r6, #0]
     d56:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
     d58:	68f3      	ldr	r3, [r6, #12]
     d5a:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     d5c:	6973      	ldr	r3, [r6, #20]
     d5e:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     d60:	7e33      	ldrb	r3, [r6, #24]
     d62:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     d64:	2326      	movs	r3, #38	; 0x26
     d66:	5cf3      	ldrb	r3, [r6, r3]
     d68:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     d6a:	6873      	ldr	r3, [r6, #4]
     d6c:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     d6e:	2b00      	cmp	r3, #0
     d70:	d100      	bne.n	d74 <usart_init+0x310>
     d72:	e71d      	b.n	bb0 <usart_init+0x14c>
     d74:	2380      	movs	r3, #128	; 0x80
     d76:	055b      	lsls	r3, r3, #21
     d78:	459a      	cmp	sl, r3
     d7a:	d100      	bne.n	d7e <usart_init+0x31a>
     d7c:	e701      	b.n	b82 <usart_init+0x11e>
     d7e:	e73e      	b.n	bfe <usart_init+0x19a>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     d80:	b011      	add	sp, #68	; 0x44
     d82:	bc3c      	pop	{r2, r3, r4, r5}
     d84:	4690      	mov	r8, r2
     d86:	4699      	mov	r9, r3
     d88:	46a2      	mov	sl, r4
     d8a:	46ab      	mov	fp, r5
     d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d8e:	46c0      	nop			; (mov r8, r8)
     d90:	00000999 	.word	0x00000999
     d94:	40000400 	.word	0x40000400
     d98:	00001c21 	.word	0x00001c21
     d9c:	00001bb1 	.word	0x00001bb1
     da0:	000007c9 	.word	0x000007c9
     da4:	00001c45 	.word	0x00001c45
     da8:	000005d9 	.word	0x000005d9
     dac:	00000601 	.word	0x00000601
     db0:	41002000 	.word	0x41002000
     db4:	00000815 	.word	0x00000815
     db8:	00001d1d 	.word	0x00001d1d
     dbc:	00000f1d 	.word	0x00000f1d
     dc0:	000010ad 	.word	0x000010ad
     dc4:	20003d10 	.word	0x20003d10

00000dc8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     dc8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     dca:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     dcc:	2a00      	cmp	r2, #0
     dce:	d00e      	beq.n	dee <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     dd0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     dd2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     dd4:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     dd6:	2a00      	cmp	r2, #0
     dd8:	d109      	bne.n	dee <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     dda:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     ddc:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     dde:	2a00      	cmp	r2, #0
     de0:	d1fc      	bne.n	ddc <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     de2:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     de4:	2102      	movs	r1, #2
     de6:	7e1a      	ldrb	r2, [r3, #24]
     de8:	420a      	tst	r2, r1
     dea:	d0fc      	beq.n	de6 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     dec:	2300      	movs	r3, #0
}
     dee:	0018      	movs	r0, r3
     df0:	4770      	bx	lr
     df2:	46c0      	nop			; (mov r8, r8)

00000df4 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     df4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     df6:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     df8:	2a00      	cmp	r2, #0
     dfa:	d030      	beq.n	e5e <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     dfc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     dfe:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     e00:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     e02:	2a00      	cmp	r2, #0
     e04:	d12b      	bne.n	e5e <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     e06:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     e08:	7e10      	ldrb	r0, [r2, #24]
     e0a:	0740      	lsls	r0, r0, #29
     e0c:	d527      	bpl.n	e5e <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     e0e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     e10:	2b00      	cmp	r3, #0
     e12:	d1fc      	bne.n	e0e <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     e14:	8b53      	ldrh	r3, [r2, #26]
     e16:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     e18:	0698      	lsls	r0, r3, #26
     e1a:	d01d      	beq.n	e58 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     e1c:	0798      	lsls	r0, r3, #30
     e1e:	d503      	bpl.n	e28 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     e20:	2302      	movs	r3, #2
     e22:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
     e24:	3318      	adds	r3, #24
     e26:	e01a      	b.n	e5e <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     e28:	0758      	lsls	r0, r3, #29
     e2a:	d503      	bpl.n	e34 <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     e2c:	2304      	movs	r3, #4
     e2e:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
     e30:	331a      	adds	r3, #26
     e32:	e014      	b.n	e5e <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     e34:	07d8      	lsls	r0, r3, #31
     e36:	d503      	bpl.n	e40 <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     e38:	2301      	movs	r3, #1
     e3a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
     e3c:	3312      	adds	r3, #18
     e3e:	e00e      	b.n	e5e <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     e40:	06d8      	lsls	r0, r3, #27
     e42:	d503      	bpl.n	e4c <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     e44:	2310      	movs	r3, #16
     e46:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
     e48:	3332      	adds	r3, #50	; 0x32
     e4a:	e008      	b.n	e5e <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     e4c:	069b      	lsls	r3, r3, #26
     e4e:	d503      	bpl.n	e58 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     e50:	2320      	movs	r3, #32
     e52:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
     e54:	3321      	adds	r3, #33	; 0x21
     e56:	e002      	b.n	e5e <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     e58:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     e5a:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     e5c:	2300      	movs	r3, #0
}
     e5e:	0018      	movs	r0, r3
     e60:	4770      	bx	lr
     e62:	46c0      	nop			; (mov r8, r8)

00000e64 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     e64:	b5f0      	push	{r4, r5, r6, r7, lr}
     e66:	464f      	mov	r7, r9
     e68:	b480      	push	{r7}
     e6a:	b082      	sub	sp, #8
     e6c:	0004      	movs	r4, r0
     e6e:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     e70:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     e72:	2a00      	cmp	r2, #0
     e74:	d049      	beq.n	f0a <usart_write_buffer_wait+0xa6>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     e76:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
     e78:	3005      	adds	r0, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     e7a:	2b00      	cmp	r3, #0
     e7c:	d045      	beq.n	f0a <usart_write_buffer_wait+0xa6>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     e7e:	6827      	ldr	r7, [r4, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     e80:	69fb      	ldr	r3, [r7, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     e82:	2b00      	cmp	r3, #0
     e84:	d1fc      	bne.n	e80 <usart_write_buffer_wait+0x1c>
     e86:	4691      	mov	r9, r2
     e88:	2500      	movs	r5, #0
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     e8a:	2601      	movs	r6, #1
     e8c:	e020      	b.n	ed0 <usart_write_buffer_wait+0x6c>
     e8e:	7e3a      	ldrb	r2, [r7, #24]
     e90:	4232      	tst	r2, r6
     e92:	d104      	bne.n	e9e <usart_write_buffer_wait+0x3a>
				break;
			} else if (i == USART_TIMEOUT) {
     e94:	2b01      	cmp	r3, #1
     e96:	d02a      	beq.n	eee <usart_write_buffer_wait+0x8a>
     e98:	3b01      	subs	r3, #1

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     e9a:	2b00      	cmp	r3, #0
     e9c:	d1f7      	bne.n	e8e <usart_write_buffer_wait+0x2a>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     e9e:	1c6a      	adds	r2, r5, #1
     ea0:	b292      	uxth	r2, r2
     ea2:	9b01      	ldr	r3, [sp, #4]
     ea4:	5d5b      	ldrb	r3, [r3, r5]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     ea6:	7961      	ldrb	r1, [r4, #5]
     ea8:	2901      	cmp	r1, #1
     eaa:	d002      	beq.n	eb2 <usart_write_buffer_wait+0x4e>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     eac:	b299      	uxth	r1, r3
     eae:	0015      	movs	r5, r2
     eb0:	e005      	b.n	ebe <usart_write_buffer_wait+0x5a>

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     eb2:	1ca9      	adds	r1, r5, #2
     eb4:	b28d      	uxth	r5, r1
     eb6:	9901      	ldr	r1, [sp, #4]
     eb8:	5c89      	ldrb	r1, [r1, r2]
     eba:	0209      	lsls	r1, r1, #8
     ebc:	4319      	orrs	r1, r3
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
     ebe:	0020      	movs	r0, r4
     ec0:	4b14      	ldr	r3, [pc, #80]	; (f14 <usart_write_buffer_wait+0xb0>)
     ec2:	4798      	blx	r3
     ec4:	464a      	mov	r2, r9
     ec6:	3a01      	subs	r2, #1
     ec8:	b293      	uxth	r3, r2
     eca:	4699      	mov	r9, r3
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
     ecc:	2b00      	cmp	r3, #0
     ece:	d016      	beq.n	efe <usart_write_buffer_wait+0x9a>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     ed0:	7e3b      	ldrb	r3, [r7, #24]
     ed2:	4233      	tst	r3, r6
     ed4:	d1e3      	bne.n	e9e <usart_write_buffer_wait+0x3a>
     ed6:	4b10      	ldr	r3, [pc, #64]	; (f18 <usart_write_buffer_wait+0xb4>)
     ed8:	e7d9      	b.n	e8e <usart_write_buffer_wait+0x2a>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     eda:	7e3a      	ldrb	r2, [r7, #24]
     edc:	420a      	tst	r2, r1
     ede:	d108      	bne.n	ef2 <usart_write_buffer_wait+0x8e>
			break;
		} else if (i == USART_TIMEOUT) {
     ee0:	2b01      	cmp	r3, #1
     ee2:	d008      	beq.n	ef6 <usart_write_buffer_wait+0x92>
     ee4:	3b01      	subs	r3, #1
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     ee6:	2b00      	cmp	r3, #0
     ee8:	d1f7      	bne.n	eda <usart_write_buffer_wait+0x76>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
     eea:	2000      	movs	r0, #0
     eec:	e00d      	b.n	f0a <usart_write_buffer_wait+0xa6>
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
     eee:	2012      	movs	r0, #18
     ef0:	e00b      	b.n	f0a <usart_write_buffer_wait+0xa6>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
     ef2:	2000      	movs	r0, #0
     ef4:	e009      	b.n	f0a <usart_write_buffer_wait+0xa6>
	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
     ef6:	2012      	movs	r0, #18
     ef8:	e007      	b.n	f0a <usart_write_buffer_wait+0xa6>
		}
	}

	return STATUS_OK;
     efa:	2000      	movs	r0, #0
     efc:	e005      	b.n	f0a <usart_write_buffer_wait+0xa6>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     efe:	7e3b      	ldrb	r3, [r7, #24]
     f00:	079b      	lsls	r3, r3, #30
     f02:	d4fa      	bmi.n	efa <usart_write_buffer_wait+0x96>
     f04:	4b04      	ldr	r3, [pc, #16]	; (f18 <usart_write_buffer_wait+0xb4>)
     f06:	2102      	movs	r1, #2
     f08:	e7e7      	b.n	eda <usart_write_buffer_wait+0x76>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     f0a:	b002      	add	sp, #8
     f0c:	bc04      	pop	{r2}
     f0e:	4691      	mov	r9, r2
     f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	00000dc9 	.word	0x00000dc9
     f18:	0000ffff 	.word	0x0000ffff

00000f1c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     f1e:	0080      	lsls	r0, r0, #2
     f20:	4b60      	ldr	r3, [pc, #384]	; (10a4 <_usart_interrupt_handler+0x188>)
     f22:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     f24:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f26:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     f28:	2b00      	cmp	r3, #0
     f2a:	d1fc      	bne.n	f26 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     f2c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     f2e:	7da6      	ldrb	r6, [r4, #22]
     f30:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     f32:	2330      	movs	r3, #48	; 0x30
     f34:	5ceb      	ldrb	r3, [r5, r3]
     f36:	2231      	movs	r2, #49	; 0x31
     f38:	5caf      	ldrb	r7, [r5, r2]
     f3a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     f3c:	07f3      	lsls	r3, r6, #31
     f3e:	d522      	bpl.n	f86 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     f40:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     f42:	b29b      	uxth	r3, r3
     f44:	2b00      	cmp	r3, #0
     f46:	d01c      	beq.n	f82 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     f48:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     f4a:	7813      	ldrb	r3, [r2, #0]
     f4c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     f4e:	1c51      	adds	r1, r2, #1
     f50:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     f52:	7969      	ldrb	r1, [r5, #5]
     f54:	2901      	cmp	r1, #1
     f56:	d001      	beq.n	f5c <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     f58:	b29b      	uxth	r3, r3
     f5a:	e004      	b.n	f66 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     f5c:	7851      	ldrb	r1, [r2, #1]
     f5e:	0209      	lsls	r1, r1, #8
     f60:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     f62:	3202      	adds	r2, #2
     f64:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     f66:	05db      	lsls	r3, r3, #23
     f68:	0ddb      	lsrs	r3, r3, #23
     f6a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     f6c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     f6e:	3b01      	subs	r3, #1
     f70:	b29b      	uxth	r3, r3
     f72:	85eb      	strh	r3, [r5, #46]	; 0x2e
     f74:	2b00      	cmp	r3, #0
     f76:	d106      	bne.n	f86 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     f78:	3301      	adds	r3, #1
     f7a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     f7c:	3301      	adds	r3, #1
     f7e:	75a3      	strb	r3, [r4, #22]
     f80:	e001      	b.n	f86 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     f82:	2301      	movs	r3, #1
     f84:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     f86:	07b3      	lsls	r3, r6, #30
     f88:	d509      	bpl.n	f9e <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     f8a:	2302      	movs	r3, #2
     f8c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     f8e:	2200      	movs	r2, #0
     f90:	3331      	adds	r3, #49	; 0x31
     f92:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     f94:	07fb      	lsls	r3, r7, #31
     f96:	d502      	bpl.n	f9e <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     f98:	0028      	movs	r0, r5
     f9a:	68eb      	ldr	r3, [r5, #12]
     f9c:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     f9e:	0773      	lsls	r3, r6, #29
     fa0:	d560      	bpl.n	1064 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
     fa2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     fa4:	b29b      	uxth	r3, r3
     fa6:	2b00      	cmp	r3, #0
     fa8:	d05a      	beq.n	1060 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     faa:	8b63      	ldrh	r3, [r4, #26]
     fac:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     fae:	071a      	lsls	r2, r3, #28
     fb0:	d402      	bmi.n	fb8 <_usart_interrupt_handler+0x9c>
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     fb2:	223f      	movs	r2, #63	; 0x3f
     fb4:	4013      	ands	r3, r2
     fb6:	e001      	b.n	fbc <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     fb8:	2237      	movs	r2, #55	; 0x37
     fba:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     fbc:	2b00      	cmp	r3, #0
     fbe:	d02d      	beq.n	101c <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     fc0:	079a      	lsls	r2, r3, #30
     fc2:	d505      	bpl.n	fd0 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     fc4:	221a      	movs	r2, #26
     fc6:	2332      	movs	r3, #50	; 0x32
     fc8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     fca:	3b30      	subs	r3, #48	; 0x30
     fcc:	8363      	strh	r3, [r4, #26]
     fce:	e01f      	b.n	1010 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     fd0:	075a      	lsls	r2, r3, #29
     fd2:	d505      	bpl.n	fe0 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     fd4:	221e      	movs	r2, #30
     fd6:	2332      	movs	r3, #50	; 0x32
     fd8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     fda:	3b2e      	subs	r3, #46	; 0x2e
     fdc:	8363      	strh	r3, [r4, #26]
     fde:	e017      	b.n	1010 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     fe0:	07da      	lsls	r2, r3, #31
     fe2:	d505      	bpl.n	ff0 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     fe4:	2213      	movs	r2, #19
     fe6:	2332      	movs	r3, #50	; 0x32
     fe8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     fea:	3b31      	subs	r3, #49	; 0x31
     fec:	8363      	strh	r3, [r4, #26]
     fee:	e00f      	b.n	1010 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     ff0:	06da      	lsls	r2, r3, #27
     ff2:	d505      	bpl.n	1000 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     ff4:	2242      	movs	r2, #66	; 0x42
     ff6:	2332      	movs	r3, #50	; 0x32
     ff8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     ffa:	3b22      	subs	r3, #34	; 0x22
     ffc:	8363      	strh	r3, [r4, #26]
     ffe:	e007      	b.n	1010 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1000:	2220      	movs	r2, #32
    1002:	421a      	tst	r2, r3
    1004:	d004      	beq.n	1010 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1006:	3221      	adds	r2, #33	; 0x21
    1008:	2332      	movs	r3, #50	; 0x32
    100a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    100c:	3b12      	subs	r3, #18
    100e:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1010:	077b      	lsls	r3, r7, #29
    1012:	d527      	bpl.n	1064 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1014:	0028      	movs	r0, r5
    1016:	696b      	ldr	r3, [r5, #20]
    1018:	4798      	blx	r3
    101a:	e023      	b.n	1064 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    101c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    101e:	05db      	lsls	r3, r3, #23
    1020:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1022:	b2da      	uxtb	r2, r3
    1024:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1026:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1028:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    102a:	1c51      	adds	r1, r2, #1
    102c:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    102e:	7969      	ldrb	r1, [r5, #5]
    1030:	2901      	cmp	r1, #1
    1032:	d104      	bne.n	103e <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1034:	0a1b      	lsrs	r3, r3, #8
    1036:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1038:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    103a:	3301      	adds	r3, #1
    103c:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    103e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1040:	3b01      	subs	r3, #1
    1042:	b29b      	uxth	r3, r3
    1044:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1046:	2b00      	cmp	r3, #0
    1048:	d10c      	bne.n	1064 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    104a:	3304      	adds	r3, #4
    104c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    104e:	2200      	movs	r2, #0
    1050:	332e      	adds	r3, #46	; 0x2e
    1052:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1054:	07bb      	lsls	r3, r7, #30
    1056:	d505      	bpl.n	1064 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1058:	0028      	movs	r0, r5
    105a:	692b      	ldr	r3, [r5, #16]
    105c:	4798      	blx	r3
    105e:	e001      	b.n	1064 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1060:	2304      	movs	r3, #4
    1062:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1064:	06f3      	lsls	r3, r6, #27
    1066:	d507      	bpl.n	1078 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1068:	2310      	movs	r3, #16
    106a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    106c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    106e:	06fb      	lsls	r3, r7, #27
    1070:	d502      	bpl.n	1078 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1072:	0028      	movs	r0, r5
    1074:	69eb      	ldr	r3, [r5, #28]
    1076:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1078:	06b3      	lsls	r3, r6, #26
    107a:	d507      	bpl.n	108c <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    107c:	2320      	movs	r3, #32
    107e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1080:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1082:	073b      	lsls	r3, r7, #28
    1084:	d502      	bpl.n	108c <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1086:	0028      	movs	r0, r5
    1088:	69ab      	ldr	r3, [r5, #24]
    108a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    108c:	0733      	lsls	r3, r6, #28
    108e:	d507      	bpl.n	10a0 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1090:	2308      	movs	r3, #8
    1092:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1094:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1096:	06bb      	lsls	r3, r7, #26
    1098:	d502      	bpl.n	10a0 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    109a:	6a2b      	ldr	r3, [r5, #32]
    109c:	0028      	movs	r0, r5
    109e:	4798      	blx	r3
		}
	}
#endif
}
    10a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10a2:	46c0      	nop			; (mov r8, r8)
    10a4:	20003d10 	.word	0x20003d10

000010a8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    10a8:	4770      	bx	lr
    10aa:	46c0      	nop			; (mov r8, r8)

000010ac <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    10ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    10ae:	4b0a      	ldr	r3, [pc, #40]	; (10d8 <_sercom_set_handler+0x2c>)
    10b0:	781b      	ldrb	r3, [r3, #0]
    10b2:	2b00      	cmp	r3, #0
    10b4:	d10c      	bne.n	10d0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    10b6:	4f09      	ldr	r7, [pc, #36]	; (10dc <_sercom_set_handler+0x30>)
    10b8:	4e09      	ldr	r6, [pc, #36]	; (10e0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    10ba:	4d0a      	ldr	r5, [pc, #40]	; (10e4 <_sercom_set_handler+0x38>)
    10bc:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    10be:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    10c0:	195a      	adds	r2, r3, r5
    10c2:	6014      	str	r4, [r2, #0]
    10c4:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10c6:	2b18      	cmp	r3, #24
    10c8:	d1f9      	bne.n	10be <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    10ca:	2201      	movs	r2, #1
    10cc:	4b02      	ldr	r3, [pc, #8]	; (10d8 <_sercom_set_handler+0x2c>)
    10ce:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    10d0:	0080      	lsls	r0, r0, #2
    10d2:	4b02      	ldr	r3, [pc, #8]	; (10dc <_sercom_set_handler+0x30>)
    10d4:	50c1      	str	r1, [r0, r3]
}
    10d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10d8:	200000ce 	.word	0x200000ce
    10dc:	200000d0 	.word	0x200000d0
    10e0:	000010a9 	.word	0x000010a9
    10e4:	20003d10 	.word	0x20003d10

000010e8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    10e8:	b510      	push	{r4, lr}
    10ea:	b082      	sub	sp, #8
    10ec:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    10ee:	2206      	movs	r2, #6
    10f0:	4905      	ldr	r1, [pc, #20]	; (1108 <_sercom_get_interrupt_vector+0x20>)
    10f2:	4668      	mov	r0, sp
    10f4:	4b05      	ldr	r3, [pc, #20]	; (110c <_sercom_get_interrupt_vector+0x24>)
    10f6:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    10f8:	0020      	movs	r0, r4
    10fa:	4b05      	ldr	r3, [pc, #20]	; (1110 <_sercom_get_interrupt_vector+0x28>)
    10fc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    10fe:	466b      	mov	r3, sp
    1100:	5618      	ldrsb	r0, [r3, r0]
}
    1102:	b002      	add	sp, #8
    1104:	bd10      	pop	{r4, pc}
    1106:	46c0      	nop			; (mov r8, r8)
    1108:	00006634 	.word	0x00006634
    110c:	00005e65 	.word	0x00005e65
    1110:	00000999 	.word	0x00000999

00001114 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1114:	b510      	push	{r4, lr}
    1116:	4b02      	ldr	r3, [pc, #8]	; (1120 <SERCOM0_Handler+0xc>)
    1118:	681b      	ldr	r3, [r3, #0]
    111a:	2000      	movs	r0, #0
    111c:	4798      	blx	r3
    111e:	bd10      	pop	{r4, pc}
    1120:	200000d0 	.word	0x200000d0

00001124 <SERCOM1_Handler>:
    1124:	b510      	push	{r4, lr}
    1126:	4b02      	ldr	r3, [pc, #8]	; (1130 <SERCOM1_Handler+0xc>)
    1128:	685b      	ldr	r3, [r3, #4]
    112a:	2001      	movs	r0, #1
    112c:	4798      	blx	r3
    112e:	bd10      	pop	{r4, pc}
    1130:	200000d0 	.word	0x200000d0

00001134 <SERCOM2_Handler>:
    1134:	b510      	push	{r4, lr}
    1136:	4b02      	ldr	r3, [pc, #8]	; (1140 <SERCOM2_Handler+0xc>)
    1138:	689b      	ldr	r3, [r3, #8]
    113a:	2002      	movs	r0, #2
    113c:	4798      	blx	r3
    113e:	bd10      	pop	{r4, pc}
    1140:	200000d0 	.word	0x200000d0

00001144 <SERCOM3_Handler>:
    1144:	b510      	push	{r4, lr}
    1146:	4b02      	ldr	r3, [pc, #8]	; (1150 <SERCOM3_Handler+0xc>)
    1148:	68db      	ldr	r3, [r3, #12]
    114a:	2003      	movs	r0, #3
    114c:	4798      	blx	r3
    114e:	bd10      	pop	{r4, pc}
    1150:	200000d0 	.word	0x200000d0

00001154 <SERCOM4_Handler>:
    1154:	b510      	push	{r4, lr}
    1156:	4b02      	ldr	r3, [pc, #8]	; (1160 <SERCOM4_Handler+0xc>)
    1158:	691b      	ldr	r3, [r3, #16]
    115a:	2004      	movs	r0, #4
    115c:	4798      	blx	r3
    115e:	bd10      	pop	{r4, pc}
    1160:	200000d0 	.word	0x200000d0

00001164 <SERCOM5_Handler>:
    1164:	b510      	push	{r4, lr}
    1166:	4b02      	ldr	r3, [pc, #8]	; (1170 <SERCOM5_Handler+0xc>)
    1168:	695b      	ldr	r3, [r3, #20]
    116a:	2005      	movs	r0, #5
    116c:	4798      	blx	r3
    116e:	bd10      	pop	{r4, pc}
    1170:	200000d0 	.word	0x200000d0

00001174 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1174:	4b0c      	ldr	r3, [pc, #48]	; (11a8 <cpu_irq_enter_critical+0x34>)
    1176:	681b      	ldr	r3, [r3, #0]
    1178:	2b00      	cmp	r3, #0
    117a:	d110      	bne.n	119e <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    117c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1180:	2b00      	cmp	r3, #0
    1182:	d109      	bne.n	1198 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1184:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1186:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    118a:	2200      	movs	r2, #0
    118c:	4b07      	ldr	r3, [pc, #28]	; (11ac <cpu_irq_enter_critical+0x38>)
    118e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1190:	3201      	adds	r2, #1
    1192:	4b07      	ldr	r3, [pc, #28]	; (11b0 <cpu_irq_enter_critical+0x3c>)
    1194:	701a      	strb	r2, [r3, #0]
    1196:	e002      	b.n	119e <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1198:	2200      	movs	r2, #0
    119a:	4b05      	ldr	r3, [pc, #20]	; (11b0 <cpu_irq_enter_critical+0x3c>)
    119c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    119e:	4a02      	ldr	r2, [pc, #8]	; (11a8 <cpu_irq_enter_critical+0x34>)
    11a0:	6813      	ldr	r3, [r2, #0]
    11a2:	3301      	adds	r3, #1
    11a4:	6013      	str	r3, [r2, #0]
}
    11a6:	4770      	bx	lr
    11a8:	200000e8 	.word	0x200000e8
    11ac:	20000008 	.word	0x20000008
    11b0:	200000ec 	.word	0x200000ec

000011b4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    11b4:	4b08      	ldr	r3, [pc, #32]	; (11d8 <cpu_irq_leave_critical+0x24>)
    11b6:	681a      	ldr	r2, [r3, #0]
    11b8:	3a01      	subs	r2, #1
    11ba:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    11bc:	681b      	ldr	r3, [r3, #0]
    11be:	2b00      	cmp	r3, #0
    11c0:	d109      	bne.n	11d6 <cpu_irq_leave_critical+0x22>
    11c2:	4b06      	ldr	r3, [pc, #24]	; (11dc <cpu_irq_leave_critical+0x28>)
    11c4:	781b      	ldrb	r3, [r3, #0]
    11c6:	2b00      	cmp	r3, #0
    11c8:	d005      	beq.n	11d6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    11ca:	2201      	movs	r2, #1
    11cc:	4b04      	ldr	r3, [pc, #16]	; (11e0 <cpu_irq_leave_critical+0x2c>)
    11ce:	701a      	strb	r2, [r3, #0]
    11d0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    11d4:	b662      	cpsie	i
	}
}
    11d6:	4770      	bx	lr
    11d8:	200000e8 	.word	0x200000e8
    11dc:	200000ec 	.word	0x200000ec
    11e0:	20000008 	.word	0x20000008

000011e4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    11e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11e6:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    11e8:	ac01      	add	r4, sp, #4
    11ea:	2501      	movs	r5, #1
    11ec:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    11ee:	2700      	movs	r7, #0
    11f0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    11f2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    11f4:	0021      	movs	r1, r4
    11f6:	202a      	movs	r0, #42	; 0x2a
    11f8:	4e06      	ldr	r6, [pc, #24]	; (1214 <system_board_init+0x30>)
    11fa:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    11fc:	2280      	movs	r2, #128	; 0x80
    11fe:	00d2      	lsls	r2, r2, #3
    1200:	4b05      	ldr	r3, [pc, #20]	; (1218 <system_board_init+0x34>)
    1202:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1204:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1206:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1208:	0021      	movs	r1, r4
    120a:	2002      	movs	r0, #2
    120c:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    120e:	b003      	add	sp, #12
    1210:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1212:	46c0      	nop			; (mov r8, r8)
    1214:	0000187d 	.word	0x0000187d
    1218:	40002880 	.word	0x40002880

0000121c <_adc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    121c:	2000      	movs	r0, #0
    121e:	4770      	bx	lr

00001220 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    1220:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    1222:	2300      	movs	r3, #0
    1224:	2200      	movs	r2, #0
    1226:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
    1228:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
    122a:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    122c:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    122e:	2100      	movs	r1, #0
    1230:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    1232:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
    1234:	61c3      	str	r3, [r0, #28]
#if SAMR30
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
    1236:	2401      	movs	r4, #1
    1238:	7104      	strb	r4, [r0, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
    123a:	24c0      	movs	r4, #192	; 0xc0
    123c:	0164      	lsls	r4, r4, #5
    123e:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    1240:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    1242:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
    1244:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
    1246:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
    1248:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    124a:	242a      	movs	r4, #42	; 0x2a
    124c:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
    124e:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
    1250:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
    1252:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
    1254:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
    1256:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
    1258:	3c06      	subs	r4, #6
    125a:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    125c:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    125e:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    1260:	7541      	strb	r1, [r0, #21]
}
    1262:	bd10      	pop	{r4, pc}

00001264 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    1264:	b5f0      	push	{r4, r5, r6, r7, lr}
    1266:	464f      	mov	r7, r9
    1268:	b480      	push	{r7}
    126a:	b09a      	sub	sp, #104	; 0x68
    126c:	0005      	movs	r5, r0
    126e:	000c      	movs	r4, r1
    1270:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
    1272:	0008      	movs	r0, r1
    1274:	4ba9      	ldr	r3, [pc, #676]	; (151c <adc_init+0x2b8>)
    1276:	4798      	blx	r3

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    1278:	602c      	str	r4, [r5, #0]
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    127a:	4aa9      	ldr	r2, [pc, #676]	; (1520 <adc_init+0x2bc>)
    127c:	6a11      	ldr	r1, [r2, #32]
    127e:	2308      	movs	r3, #8
    1280:	430b      	orrs	r3, r1
    1282:	6213      	str	r3, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1284:	7822      	ldrb	r2, [r4, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1286:	2305      	movs	r3, #5
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1288:	07d2      	lsls	r2, r2, #31
    128a:	d500      	bpl.n	128e <adc_init+0x2a>
    128c:	e1c9      	b.n	1622 <adc_init+0x3be>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    128e:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    1290:	8c13      	ldrh	r3, [r2, #32]
    1292:	b29b      	uxth	r3, r3
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	while (adc_is_syncing(module_inst)) {
    1294:	2b00      	cmp	r3, #0
    1296:	d1fb      	bne.n	1290 <adc_init+0x2c>
		/* Wait for synchronization */
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1298:	7822      	ldrb	r2, [r4, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    129a:	331c      	adds	r3, #28

	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    129c:	0792      	lsls	r2, r2, #30
    129e:	d500      	bpl.n	12a2 <adc_init+0x3e>
    12a0:	e1bf      	b.n	1622 <adc_init+0x3be>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    12a2:	7873      	ldrb	r3, [r6, #1]
    12a4:	712b      	strb	r3, [r5, #4]

	/* Make sure the voltage reference is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
    12a6:	2b00      	cmp	r3, #0
    12a8:	d104      	bne.n	12b4 <adc_init+0x50>
    12aa:	4a9e      	ldr	r2, [pc, #632]	; (1524 <adc_init+0x2c0>)
    12ac:	69d1      	ldr	r1, [r2, #28]
    12ae:	3304      	adds	r3, #4
    12b0:	430b      	orrs	r3, r1
    12b2:	61d3      	str	r3, [r2, #28]
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
		module_inst->callback[i] = NULL;
    12b4:	2300      	movs	r3, #0
    12b6:	60ab      	str	r3, [r5, #8]
    12b8:	60eb      	str	r3, [r5, #12]
    12ba:	612b      	str	r3, [r5, #16]
	};

	module_inst->registered_callback_mask = 0;
    12bc:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
    12be:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
    12c0:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
    12c2:	772b      	strb	r3, [r5, #28]

	_adc_instances[instance] = module_inst;
    12c4:	0080      	lsls	r0, r0, #2
    12c6:	4b98      	ldr	r3, [pc, #608]	; (1528 <adc_init+0x2c4>)
    12c8:	50c5      	str	r5, [r0, r3]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    12ca:	232a      	movs	r3, #42	; 0x2a
    12cc:	5cf3      	ldrb	r3, [r6, r3]
    12ce:	2b00      	cmp	r3, #0
    12d0:	d105      	bne.n	12de <adc_init+0x7a>
    12d2:	7b33      	ldrb	r3, [r6, #12]
    12d4:	2b00      	cmp	r3, #0
    12d6:	d102      	bne.n	12de <adc_init+0x7a>
			!config->freerunning) {
		module_inst->software_trigger = true;
    12d8:	3301      	adds	r3, #1
    12da:	776b      	strb	r3, [r5, #29]
    12dc:	e001      	b.n	12e2 <adc_init+0x7e>
	} else {
		module_inst->software_trigger = false;
    12de:	2300      	movs	r3, #0
    12e0:	776b      	strb	r3, [r5, #29]
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    12e2:	682f      	ldr	r7, [r5, #0]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
    12e4:	7833      	ldrb	r3, [r6, #0]
    12e6:	466a      	mov	r2, sp
    12e8:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
    12ea:	4669      	mov	r1, sp
    12ec:	201e      	movs	r0, #30
    12ee:	4b8f      	ldr	r3, [pc, #572]	; (152c <adc_init+0x2c8>)
    12f0:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
    12f2:	201e      	movs	r0, #30
    12f4:	4b8e      	ldr	r3, [pc, #568]	; (1530 <adc_init+0x2cc>)
    12f6:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
    12f8:	7934      	ldrb	r4, [r6, #4]
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30)
	const uint32_t pinmapping[] = {
    12fa:	2260      	movs	r2, #96	; 0x60
    12fc:	498d      	ldr	r1, [pc, #564]	; (1534 <adc_init+0x2d0>)
    12fe:	a802      	add	r0, sp, #8
    1300:	4b8d      	ldr	r3, [pc, #564]	; (1538 <adc_init+0x2d4>)
    1302:	4798      	blx	r3
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
    1304:	2c13      	cmp	r4, #19
    1306:	d80c      	bhi.n	1322 <adc_init+0xbe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1308:	00a4      	lsls	r4, r4, #2
    130a:	ab02      	add	r3, sp, #8
    130c:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    130e:	a901      	add	r1, sp, #4
    1310:	2300      	movs	r3, #0
    1312:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1314:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1316:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1318:	3301      	adds	r3, #1
    131a:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    131c:	b2c0      	uxtb	r0, r0
    131e:	4b87      	ldr	r3, [pc, #540]	; (153c <adc_init+0x2d8>)
    1320:	4798      	blx	r3
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
	system_gclk_chan_enable(_adc_gclk_ids[index]);

	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);
    1322:	88f4      	ldrh	r4, [r6, #6]
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30)
	const uint32_t pinmapping[] = {
    1324:	2260      	movs	r2, #96	; 0x60
    1326:	4983      	ldr	r1, [pc, #524]	; (1534 <adc_init+0x2d0>)
    1328:	a802      	add	r0, sp, #8
    132a:	4b83      	ldr	r3, [pc, #524]	; (1538 <adc_init+0x2d4>)
    132c:	4798      	blx	r3
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
    132e:	2c13      	cmp	r4, #19
    1330:	d80c      	bhi.n	134c <adc_init+0xe8>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1332:	00a4      	lsls	r4, r4, #2
    1334:	ab02      	add	r3, sp, #8
    1336:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1338:	a901      	add	r1, sp, #4
    133a:	2300      	movs	r3, #0
    133c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    133e:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1340:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1342:	3301      	adds	r3, #1
    1344:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    1346:	b2c0      	uxtb	r0, r0
    1348:	4b7c      	ldr	r3, [pc, #496]	; (153c <adc_init+0x2d8>)
    134a:	4798      	blx	r3
    134c:	2400      	movs	r4, #0
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30)
	const uint32_t pinmapping[] = {
    134e:	4b7a      	ldr	r3, [pc, #488]	; (1538 <adc_init+0x2d4>)
    1350:	4699      	mov	r9, r3
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
		if(config->positive_input_sequence_mask_enable & (1 << i)){
    1352:	2301      	movs	r3, #1
    1354:	40a3      	lsls	r3, r4
    1356:	6932      	ldr	r2, [r6, #16]
    1358:	421a      	tst	r2, r3
    135a:	d012      	beq.n	1382 <adc_init+0x11e>
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30)
	const uint32_t pinmapping[] = {
    135c:	2260      	movs	r2, #96	; 0x60
    135e:	4975      	ldr	r1, [pc, #468]	; (1534 <adc_init+0x2d0>)
    1360:	a802      	add	r0, sp, #8
    1362:	47c8      	blx	r9
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
    1364:	2c13      	cmp	r4, #19
    1366:	d80c      	bhi.n	1382 <adc_init+0x11e>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1368:	00a3      	lsls	r3, r4, #2
    136a:	aa02      	add	r2, sp, #8
    136c:	5898      	ldr	r0, [r3, r2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    136e:	a901      	add	r1, sp, #4
    1370:	2300      	movs	r3, #0
    1372:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1374:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1376:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1378:	3301      	adds	r3, #1
    137a:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    137c:	b2c0      	uxtb	r0, r0
    137e:	4b6f      	ldr	r3, [pc, #444]	; (153c <adc_init+0x2d8>)
    1380:	4798      	blx	r3
    1382:	3401      	adds	r4, #1
	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
    1384:	2c14      	cmp	r4, #20
    1386:	d1e4      	bne.n	1352 <adc_init+0xee>
			_adc_configure_ain_pin(index, i);
		}
	}

	/* Configure run in standby and on demand */
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
    1388:	7b73      	ldrb	r3, [r6, #13]
    138a:	019a      	lsls	r2, r3, #6
    138c:	7bb3      	ldrb	r3, [r6, #14]
    138e:	01db      	lsls	r3, r3, #7
    1390:	4313      	orrs	r3, r2
    1392:	b2db      	uxtb	r3, r3
    1394:	703b      	strb	r3, [r7, #0]
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;

	/* Configure reference */
	adc_module->REFCTRL.reg =
    1396:	7d33      	ldrb	r3, [r6, #20]
    1398:	01db      	lsls	r3, r3, #7
    139a:	7872      	ldrb	r2, [r6, #1]
    139c:	4313      	orrs	r3, r2
    139e:	b2db      	uxtb	r3, r3
    13a0:	70bb      	strb	r3, [r7, #2]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
			| (config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    13a2:	78f3      	ldrb	r3, [r6, #3]
    13a4:	2b34      	cmp	r3, #52	; 0x34
    13a6:	d900      	bls.n	13aa <adc_init+0x146>
    13a8:	e13a      	b.n	1620 <adc_init+0x3bc>
    13aa:	009b      	lsls	r3, r3, #2
    13ac:	4a64      	ldr	r2, [pc, #400]	; (1540 <adc_init+0x2dc>)
    13ae:	58d3      	ldr	r3, [r2, r3]
    13b0:	469f      	mov	pc, r3
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    13b2:	2004      	movs	r0, #4
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    13b4:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    13b6:	2202      	movs	r2, #2
    13b8:	e01a      	b.n	13f0 <adc_init+0x18c>

	/* Set adjusting result and number of samples */
	switch (config->resolution) {

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    13ba:	7a72      	ldrb	r2, [r6, #9]
		accumulate = config->accumulate_samples;
    13bc:	7a30      	ldrb	r0, [r6, #8]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    13be:	2110      	movs	r1, #16
    13c0:	e016      	b.n	13f0 <adc_init+0x18c>
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    13c2:	2006      	movs	r0, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    13c4:	2110      	movs	r1, #16
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    13c6:	2201      	movs	r2, #1
    13c8:	e012      	b.n	13f0 <adc_init+0x18c>
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    13ca:	2008      	movs	r0, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    13cc:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    13ce:	2200      	movs	r2, #0
    13d0:	e00e      	b.n	13f0 <adc_init+0x18c>
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    13d2:	2000      	movs	r0, #0
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    13d4:	2130      	movs	r1, #48	; 0x30
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    13d6:	2200      	movs	r2, #0
    13d8:	e00a      	b.n	13f0 <adc_init+0x18c>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    13da:	2000      	movs	r0, #0
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    13dc:	2120      	movs	r1, #32
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    13de:	2200      	movs	r2, #0
    13e0:	e006      	b.n	13f0 <adc_init+0x18c>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    13e2:	2000      	movs	r0, #0
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    13e4:	2100      	movs	r1, #0
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    13e6:	2200      	movs	r2, #0
    13e8:	e002      	b.n	13f0 <adc_init+0x18c>
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    13ea:	2002      	movs	r0, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    13ec:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    13ee:	2201      	movs	r2, #1
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    13f0:	0112      	lsls	r2, r2, #4
    13f2:	2370      	movs	r3, #112	; 0x70
    13f4:	4013      	ands	r3, r2
    13f6:	4303      	orrs	r3, r0
    13f8:	733b      	strb	r3, [r7, #12]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    13fa:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    13fc:	8c13      	ldrh	r3, [r2, #32]
    13fe:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    1400:	2b00      	cmp	r3, #0
    1402:	d1fb      	bne.n	13fc <adc_init+0x198>
		/* Wait for synchronization */
	}

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    1404:	7d72      	ldrb	r2, [r6, #21]
		return STATUS_ERR_INVALID_ARG;
    1406:	3317      	adds	r3, #23
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    1408:	2a3f      	cmp	r2, #63	; 0x3f
    140a:	d900      	bls.n	140e <adc_init+0x1aa>
    140c:	e109      	b.n	1622 <adc_init+0x3be>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
    140e:	7bf3      	ldrb	r3, [r6, #15]
    1410:	01db      	lsls	r3, r3, #7
    1412:	431a      	orrs	r2, r3
    1414:	b2d2      	uxtb	r2, r2
    1416:	737a      	strb	r2, [r7, #13]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1418:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    141a:	8c13      	ldrh	r3, [r2, #32]
    141c:	b29b      	uxth	r3, r3
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos)
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
	}

	while (adc_is_syncing(module_inst)) {
    141e:	2b00      	cmp	r3, #0
    1420:	d1fb      	bne.n	141a <adc_init+0x1b6>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler;
    1422:	78b3      	ldrb	r3, [r6, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    1424:	707b      	strb	r3, [r7, #1]
			config->clock_prescaler;
	adc_module->CTRLC.reg =
			resolution |
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
    1426:	2324      	movs	r3, #36	; 0x24
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler;
	adc_module->CTRLC.reg =
    1428:	5cf2      	ldrb	r2, [r6, r3]
    142a:	00d2      	lsls	r2, r2, #3
    142c:	7b33      	ldrb	r3, [r6, #12]
    142e:	009b      	lsls	r3, r3, #2
    1430:	4313      	orrs	r3, r2
    1432:	7af2      	ldrb	r2, [r6, #11]
    1434:	431a      	orrs	r2, r3
    1436:	7ab3      	ldrb	r3, [r6, #10]
    1438:	005b      	lsls	r3, r3, #1
    143a:	4313      	orrs	r3, r2
    143c:	430b      	orrs	r3, r1
    143e:	817b      	strh	r3, [r7, #10]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1440:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    1442:	8c13      	ldrh	r3, [r2, #32]
    1444:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);

	while (adc_is_syncing(module_inst)) {
    1446:	2b00      	cmp	r3, #0
    1448:	d1fb      	bne.n	1442 <adc_init+0x1de>
		/* Wait for synchronization */
	}

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    144a:	8b32      	ldrh	r2, [r6, #24]
    144c:	2a00      	cmp	r2, #0
    144e:	d100      	bne.n	1452 <adc_init+0x1ee>
    1450:	e098      	b.n	1584 <adc_init+0x320>
		switch (resolution) {
    1452:	2910      	cmp	r1, #16
    1454:	d07a      	beq.n	154c <adc_init+0x2e8>
    1456:	d802      	bhi.n	145e <adc_init+0x1fa>
    1458:	2900      	cmp	r1, #0
    145a:	d03e      	beq.n	14da <adc_init+0x276>
    145c:	e092      	b.n	1584 <adc_init+0x320>
    145e:	2920      	cmp	r1, #32
    1460:	d01a      	beq.n	1498 <adc_init+0x234>
    1462:	2930      	cmp	r1, #48	; 0x30
    1464:	d000      	beq.n	1468 <adc_init+0x204>
    1466:	e08d      	b.n	1584 <adc_init+0x320>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    1468:	7af3      	ldrb	r3, [r6, #11]
    146a:	2b00      	cmp	r3, #0
    146c:	d00a      	beq.n	1484 <adc_init+0x220>
    146e:	69f1      	ldr	r1, [r6, #28]
    1470:	3180      	adds	r1, #128	; 0x80
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1472:	2317      	movs	r3, #23

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    1474:	29ff      	cmp	r1, #255	; 0xff
    1476:	d900      	bls.n	147a <adc_init+0x216>
    1478:	e0d3      	b.n	1622 <adc_init+0x3be>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    147a:	6a31      	ldr	r1, [r6, #32]
    147c:	3180      	adds	r1, #128	; 0x80
    147e:	29ff      	cmp	r1, #255	; 0xff
    1480:	d900      	bls.n	1484 <adc_init+0x220>
    1482:	e0ce      	b.n	1622 <adc_init+0x3be>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1484:	2317      	movs	r3, #23
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
    1486:	69f1      	ldr	r1, [r6, #28]
    1488:	29ff      	cmp	r1, #255	; 0xff
    148a:	dd00      	ble.n	148e <adc_init+0x22a>
    148c:	e0c9      	b.n	1622 <adc_init+0x3be>
    148e:	6a31      	ldr	r1, [r6, #32]
    1490:	29ff      	cmp	r1, #255	; 0xff
    1492:	dd00      	ble.n	1496 <adc_init+0x232>
    1494:	e0c5      	b.n	1622 <adc_init+0x3be>
    1496:	e075      	b.n	1584 <adc_init+0x320>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    1498:	7af3      	ldrb	r3, [r6, #11]
    149a:	2b00      	cmp	r3, #0
    149c:	d012      	beq.n	14c4 <adc_init+0x260>
    149e:	69f3      	ldr	r3, [r6, #28]
    14a0:	2080      	movs	r0, #128	; 0x80
    14a2:	0080      	lsls	r0, r0, #2
    14a4:	4684      	mov	ip, r0
    14a6:	4463      	add	r3, ip
    14a8:	0019      	movs	r1, r3
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    14aa:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    14ac:	4825      	ldr	r0, [pc, #148]	; (1544 <adc_init+0x2e0>)
    14ae:	4281      	cmp	r1, r0
    14b0:	d900      	bls.n	14b4 <adc_init+0x250>
    14b2:	e0b6      	b.n	1622 <adc_init+0x3be>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    14b4:	6a33      	ldr	r3, [r6, #32]
    14b6:	4463      	add	r3, ip
    14b8:	0019      	movs	r1, r3
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    14ba:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    14bc:	4821      	ldr	r0, [pc, #132]	; (1544 <adc_init+0x2e0>)
    14be:	4281      	cmp	r1, r0
    14c0:	d900      	bls.n	14c4 <adc_init+0x260>
    14c2:	e0ae      	b.n	1622 <adc_init+0x3be>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    14c4:	2317      	movs	r3, #23
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
    14c6:	491f      	ldr	r1, [pc, #124]	; (1544 <adc_init+0x2e0>)
    14c8:	69f0      	ldr	r0, [r6, #28]
    14ca:	4288      	cmp	r0, r1
    14cc:	dd00      	ble.n	14d0 <adc_init+0x26c>
    14ce:	e0a8      	b.n	1622 <adc_init+0x3be>
    14d0:	6a30      	ldr	r0, [r6, #32]
    14d2:	4288      	cmp	r0, r1
    14d4:	dd00      	ble.n	14d8 <adc_init+0x274>
    14d6:	e0a4      	b.n	1622 <adc_init+0x3be>
    14d8:	e054      	b.n	1584 <adc_init+0x320>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    14da:	7af3      	ldrb	r3, [r6, #11]
    14dc:	2b00      	cmp	r3, #0
    14de:	d012      	beq.n	1506 <adc_init+0x2a2>
    14e0:	69f3      	ldr	r3, [r6, #28]
    14e2:	2080      	movs	r0, #128	; 0x80
    14e4:	0100      	lsls	r0, r0, #4
    14e6:	4684      	mov	ip, r0
    14e8:	4463      	add	r3, ip
    14ea:	0019      	movs	r1, r3
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    14ec:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    14ee:	4816      	ldr	r0, [pc, #88]	; (1548 <adc_init+0x2e4>)
    14f0:	4281      	cmp	r1, r0
    14f2:	d900      	bls.n	14f6 <adc_init+0x292>
    14f4:	e095      	b.n	1622 <adc_init+0x3be>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    14f6:	6a33      	ldr	r3, [r6, #32]
    14f8:	4463      	add	r3, ip
    14fa:	0019      	movs	r1, r3
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    14fc:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    14fe:	4812      	ldr	r0, [pc, #72]	; (1548 <adc_init+0x2e4>)
    1500:	4281      	cmp	r1, r0
    1502:	d900      	bls.n	1506 <adc_init+0x2a2>
    1504:	e08d      	b.n	1622 <adc_init+0x3be>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1506:	2317      	movs	r3, #23
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
    1508:	490f      	ldr	r1, [pc, #60]	; (1548 <adc_init+0x2e4>)
    150a:	69f0      	ldr	r0, [r6, #28]
    150c:	4288      	cmp	r0, r1
    150e:	dd00      	ble.n	1512 <adc_init+0x2ae>
    1510:	e087      	b.n	1622 <adc_init+0x3be>
    1512:	6a30      	ldr	r0, [r6, #32]
    1514:	4288      	cmp	r0, r1
    1516:	dd00      	ble.n	151a <adc_init+0x2b6>
    1518:	e083      	b.n	1622 <adc_init+0x3be>
    151a:	e033      	b.n	1584 <adc_init+0x320>
    151c:	0000121d 	.word	0x0000121d
    1520:	40000400 	.word	0x40000400
    1524:	40001400 	.word	0x40001400
    1528:	20003d28 	.word	0x20003d28
    152c:	00001c21 	.word	0x00001c21
    1530:	00001bb1 	.word	0x00001bb1
    1534:	00006710 	.word	0x00006710
    1538:	00005e65 	.word	0x00005e65
    153c:	00001d1d 	.word	0x00001d1d
    1540:	0000663c 	.word	0x0000663c
    1544:	000003ff 	.word	0x000003ff
    1548:	00000fff 	.word	0x00000fff
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    154c:	7af3      	ldrb	r3, [r6, #11]
    154e:	2b00      	cmp	r3, #0
    1550:	d010      	beq.n	1574 <adc_init+0x310>
    1552:	69f3      	ldr	r3, [r6, #28]
    1554:	2080      	movs	r0, #128	; 0x80
    1556:	0200      	lsls	r0, r0, #8
    1558:	4684      	mov	ip, r0
    155a:	4463      	add	r3, ip
    155c:	0019      	movs	r1, r3
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    155e:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    1560:	4832      	ldr	r0, [pc, #200]	; (162c <adc_init+0x3c8>)
    1562:	4281      	cmp	r1, r0
    1564:	d85d      	bhi.n	1622 <adc_init+0x3be>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    1566:	6a33      	ldr	r3, [r6, #32]
    1568:	4463      	add	r3, ip
    156a:	0019      	movs	r1, r3
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    156c:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    156e:	482f      	ldr	r0, [pc, #188]	; (162c <adc_init+0x3c8>)
    1570:	4281      	cmp	r1, r0
    1572:	d856      	bhi.n	1622 <adc_init+0x3be>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1574:	2317      	movs	r3, #23
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
    1576:	492d      	ldr	r1, [pc, #180]	; (162c <adc_init+0x3c8>)
    1578:	69f0      	ldr	r0, [r6, #28]
    157a:	4288      	cmp	r0, r1
    157c:	dc51      	bgt.n	1622 <adc_init+0x3be>
    157e:	6a30      	ldr	r0, [r6, #32]
    1580:	4288      	cmp	r0, r1
    1582:	dc4e      	bgt.n	1622 <adc_init+0x3be>
			break;
		}
	}

	/* Configure window mode */
	adc_module->CTRLC.reg |= config->window.window_mode;
    1584:	897b      	ldrh	r3, [r7, #10]
    1586:	431a      	orrs	r2, r3
    1588:	817a      	strh	r2, [r7, #10]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    158a:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    158c:	8c13      	ldrh	r3, [r2, #32]
    158e:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    1590:	2b00      	cmp	r3, #0
    1592:	d1fb      	bne.n	158c <adc_init+0x328>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
    1594:	8bb3      	ldrh	r3, [r6, #28]
    1596:	81fb      	strh	r3, [r7, #14]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1598:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    159a:	8c13      	ldrh	r3, [r2, #32]
    159c:	b29b      	uxth	r3, r3
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
    159e:	2b00      	cmp	r3, #0
    15a0:	d1fb      	bne.n	159a <adc_init+0x336>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    15a2:	8c33      	ldrh	r3, [r6, #32]
    15a4:	823b      	strh	r3, [r7, #16]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    15a6:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    15a8:	8c13      	ldrh	r3, [r2, #32]
    15aa:	b29b      	uxth	r3, r3
			ADC_WINUT_WINUT_Pos;

	while (adc_is_syncing(module_inst)) {
    15ac:	2b00      	cmp	r3, #0
    15ae:	d1fb      	bne.n	15a8 <adc_init+0x344>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    15b0:	7932      	ldrb	r2, [r6, #4]
    15b2:	88f3      	ldrh	r3, [r6, #6]
    15b4:	4313      	orrs	r3, r2
    15b6:	813b      	strh	r3, [r7, #8]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    15b8:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    15ba:	8c13      	ldrh	r3, [r2, #32]
    15bc:	b29b      	uxth	r3, r3
			config->negative_input |
			config->positive_input;

	while (adc_is_syncing(module_inst)) {
    15be:	2b00      	cmp	r3, #0
    15c0:	d1fb      	bne.n	15ba <adc_init+0x356>
		/* Wait for synchronization */
	}

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    15c2:	332a      	adds	r3, #42	; 0x2a
    15c4:	5cf3      	ldrb	r3, [r6, r3]
    15c6:	70fb      	strb	r3, [r7, #3]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    15c8:	2307      	movs	r3, #7
    15ca:	713b      	strb	r3, [r7, #4]
			(1 << ADC_INTENCLR_WINMON_Pos) |(1 << ADC_INTENCLR_OVERRUN_Pos)
			| (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    15cc:	331d      	adds	r3, #29
    15ce:	5cf3      	ldrb	r3, [r6, r3]
    15d0:	2b00      	cmp	r3, #0
    15d2:	d019      	beq.n	1608 <adc_init+0x3a4>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    15d4:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
			return STATUS_ERR_INVALID_ARG;
    15d6:	2317      	movs	r3, #23
			(1 << ADC_INTENCLR_WINMON_Pos) |(1 << ADC_INTENCLR_OVERRUN_Pos)
			| (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    15d8:	4915      	ldr	r1, [pc, #84]	; (1630 <adc_init+0x3cc>)
    15da:	428a      	cmp	r2, r1
    15dc:	d821      	bhi.n	1622 <adc_init+0x3be>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    15de:	827a      	strh	r2, [r7, #18]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    15e0:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    15e2:	8c13      	ldrh	r3, [r2, #32]
    15e4:	b29b      	uxth	r3, r3
					ADC_GAINCORR_GAINCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
    15e6:	2b00      	cmp	r3, #0
    15e8:	d1fb      	bne.n	15e2 <adc_init+0x37e>
			/* Wait for synchronization */
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    15ea:	8d31      	ldrh	r1, [r6, #40]	; 0x28
    15ec:	2380      	movs	r3, #128	; 0x80
    15ee:	011b      	lsls	r3, r3, #4
    15f0:	18ca      	adds	r2, r1, r3
    15f2:	b292      	uxth	r2, r2
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
    15f4:	2317      	movs	r3, #23
		while (adc_is_syncing(module_inst)) {
			/* Wait for synchronization */
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    15f6:	480e      	ldr	r0, [pc, #56]	; (1630 <adc_init+0x3cc>)
    15f8:	4282      	cmp	r2, r0
    15fa:	d812      	bhi.n	1622 <adc_init+0x3be>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    15fc:	82b9      	strh	r1, [r7, #20]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    15fe:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    1600:	8c13      	ldrh	r3, [r2, #32]
    1602:	b29b      	uxth	r3, r3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
    1604:	2b00      	cmp	r3, #0
    1606:	d1fb      	bne.n	1600 <adc_init+0x39c>
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIASREFBUF(
    1608:	4b0a      	ldr	r3, [pc, #40]	; (1634 <adc_init+0x3d0>)
    160a:	681b      	ldr	r3, [r3, #0]
			/* Wait for synchronization */
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    160c:	0219      	lsls	r1, r3, #8
    160e:	22e0      	movs	r2, #224	; 0xe0
    1610:	00d2      	lsls	r2, r2, #3
    1612:	400a      	ands	r2, r1
    1614:	069b      	lsls	r3, r3, #26
    1616:	0f5b      	lsrs	r3, r3, #29
    1618:	4313      	orrs	r3, r2
    161a:	85bb      	strh	r3, [r7, #44]	; 0x2c
			) |
			ADC_CALIB_BIASCOMP(
				(*(uint32_t *)_adc_biascomp_addr[index] >> _adc_biascomp_pos[index])
			);

	return STATUS_OK;
    161c:	2300      	movs	r3, #0
    161e:	e000      	b.n	1622 <adc_init+0x3be>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    1620:	2317      	movs	r3, #23
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
    1622:	0018      	movs	r0, r3
    1624:	b01a      	add	sp, #104	; 0x68
    1626:	bc04      	pop	{r2}
    1628:	4691      	mov	r9, r2
    162a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    162c:	0000ffff 	.word	0x0000ffff
    1630:	00000fff 	.word	0x00000fff
    1634:	00806020 	.word	0x00806020

00001638 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
    1638:	b570      	push	{r4, r5, r6, lr}

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
	struct adc_module *module = _adc_instances[instance];
    163a:	4b2d      	ldr	r3, [pc, #180]	; (16f0 <ADC_Handler+0xb8>)
    163c:	681c      	ldr	r4, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    163e:	6823      	ldr	r3, [r4, #0]
    1640:	799d      	ldrb	r5, [r3, #6]
    1642:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
    1644:	07ea      	lsls	r2, r5, #31
    1646:	d535      	bpl.n	16b4 <ADC_Handler+0x7c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    1648:	7ee2      	ldrb	r2, [r4, #27]
    164a:	07d2      	lsls	r2, r2, #31
    164c:	d532      	bpl.n	16b4 <ADC_Handler+0x7c>
    164e:	7ea2      	ldrb	r2, [r4, #26]
    1650:	07d2      	lsls	r2, r2, #31
    1652:	d52f      	bpl.n	16b4 <ADC_Handler+0x7c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    1654:	2201      	movs	r2, #1
    1656:	719a      	strb	r2, [r3, #6]

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    1658:	6962      	ldr	r2, [r4, #20]
    165a:	1c93      	adds	r3, r2, #2
    165c:	6163      	str	r3, [r4, #20]
    165e:	6823      	ldr	r3, [r4, #0]
    1660:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1662:	b29b      	uxth	r3, r3
    1664:	8013      	strh	r3, [r2, #0]

			if (--module->remaining_conversions > 0) {
    1666:	8b23      	ldrh	r3, [r4, #24]
    1668:	3b01      	subs	r3, #1
    166a:	b29b      	uxth	r3, r3
    166c:	8323      	strh	r3, [r4, #24]
    166e:	2b00      	cmp	r3, #0
    1670:	d015      	beq.n	169e <ADC_Handler+0x66>
				if (module->software_trigger == true
    1672:	7f63      	ldrb	r3, [r4, #29]
    1674:	2b00      	cmp	r3, #0
    1676:	d01d      	beq.n	16b4 <ADC_Handler+0x7c>
					&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
    1678:	6822      	ldr	r2, [r4, #0]
    167a:	79d3      	ldrb	r3, [r2, #7]
    167c:	b25b      	sxtb	r3, r3
    167e:	2b00      	cmp	r3, #0
    1680:	db18      	blt.n	16b4 <ADC_Handler+0x7c>
    1682:	8c13      	ldrh	r3, [r2, #32]
    1684:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    1686:	2b00      	cmp	r3, #0
    1688:	d1fb      	bne.n	1682 <ADC_Handler+0x4a>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    168a:	7e11      	ldrb	r1, [r2, #24]
    168c:	3302      	adds	r3, #2
    168e:	430b      	orrs	r3, r1
    1690:	7613      	strb	r3, [r2, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1692:	6822      	ldr	r2, [r4, #0]

	if (adc_module->SYNCBUSY.reg) {
    1694:	8c13      	ldrh	r3, [r2, #32]
    1696:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    1698:	2b00      	cmp	r3, #0
    169a:	d1fb      	bne.n	1694 <ADC_Handler+0x5c>
    169c:	e00a      	b.n	16b4 <ADC_Handler+0x7c>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    169e:	7f23      	ldrb	r3, [r4, #28]
    16a0:	2b05      	cmp	r3, #5
    16a2:	d107      	bne.n	16b4 <ADC_Handler+0x7c>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    16a4:	2300      	movs	r3, #0
    16a6:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    16a8:	3301      	adds	r3, #1
    16aa:	6822      	ldr	r2, [r4, #0]
    16ac:	7113      	strb	r3, [r2, #4]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    16ae:	0020      	movs	r0, r4
    16b0:	68a3      	ldr	r3, [r4, #8]
    16b2:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    16b4:	076b      	lsls	r3, r5, #29
    16b6:	d50b      	bpl.n	16d0 <ADC_Handler+0x98>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    16b8:	2304      	movs	r3, #4
    16ba:	6822      	ldr	r2, [r4, #0]
    16bc:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    16be:	7ee3      	ldrb	r3, [r4, #27]
    16c0:	079b      	lsls	r3, r3, #30
    16c2:	d505      	bpl.n	16d0 <ADC_Handler+0x98>
    16c4:	7ea3      	ldrb	r3, [r4, #26]
    16c6:	079b      	lsls	r3, r3, #30
    16c8:	d502      	bpl.n	16d0 <ADC_Handler+0x98>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    16ca:	0020      	movs	r0, r4
    16cc:	68e3      	ldr	r3, [r4, #12]
    16ce:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    16d0:	07ab      	lsls	r3, r5, #30
    16d2:	d50b      	bpl.n	16ec <ADC_Handler+0xb4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    16d4:	2302      	movs	r3, #2
    16d6:	6822      	ldr	r2, [r4, #0]
    16d8:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    16da:	7ee3      	ldrb	r3, [r4, #27]
    16dc:	075b      	lsls	r3, r3, #29
    16de:	d505      	bpl.n	16ec <ADC_Handler+0xb4>
    16e0:	7ea3      	ldrb	r3, [r4, #26]
    16e2:	075b      	lsls	r3, r3, #29
    16e4:	d502      	bpl.n	16ec <ADC_Handler+0xb4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    16e6:	6923      	ldr	r3, [r4, #16]
    16e8:	0020      	movs	r0, r4
    16ea:	4798      	blx	r3
	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
	_adc_interrupt_handler(0);
}
    16ec:	bd70      	pop	{r4, r5, r6, pc}
    16ee:	46c0      	nop			; (mov r8, r8)
    16f0:	20003d28 	.word	0x20003d28

000016f4 <adc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    16f4:	1c93      	adds	r3, r2, #2
    16f6:	009b      	lsls	r3, r3, #2
    16f8:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
    16fa:	2301      	movs	r3, #1
    16fc:	4093      	lsls	r3, r2
    16fe:	7e82      	ldrb	r2, [r0, #26]
    1700:	4313      	orrs	r3, r2
    1702:	7683      	strb	r3, [r0, #26]
}
    1704:	4770      	bx	lr
    1706:	46c0      	nop			; (mov r8, r8)

00001708 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
    1708:	b510      	push	{r4, lr}
    170a:	0004      	movs	r4, r0
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    170c:	8b03      	ldrh	r3, [r0, #24]
    170e:	b29b      	uxth	r3, r3
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
    1710:	2005      	movs	r0, #5
{
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    1712:	2b00      	cmp	r3, #0
    1714:	d11d      	bne.n	1752 <adc_read_buffer_job+0x4a>
			module_inst->job_status == STATUS_BUSY){
    1716:	7f23      	ldrb	r3, [r4, #28]
    1718:	b2d8      	uxtb	r0, r3
{
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    171a:	2805      	cmp	r0, #5
    171c:	d019      	beq.n	1752 <adc_read_buffer_job+0x4a>
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
	}

	module_inst->job_status = STATUS_BUSY;
    171e:	2305      	movs	r3, #5
    1720:	7723      	strb	r3, [r4, #28]
	module_inst->remaining_conversions = samples;
    1722:	8322      	strh	r2, [r4, #24]
	module_inst->job_buffer = buffer;
    1724:	6161      	str	r1, [r4, #20]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
    1726:	3b04      	subs	r3, #4
    1728:	6822      	ldr	r2, [r4, #0]
    172a:	7153      	strb	r3, [r2, #5]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);

	if(module_inst->software_trigger == true) {
    172c:	7f63      	ldrb	r3, [r4, #29]
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
    172e:	2000      	movs	r0, #0
	module_inst->remaining_conversions = samples;
	module_inst->job_buffer = buffer;

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);

	if(module_inst->software_trigger == true) {
    1730:	2b00      	cmp	r3, #0
    1732:	d00e      	beq.n	1752 <adc_read_buffer_job+0x4a>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1734:	6822      	ldr	r2, [r4, #0]
    1736:	8c13      	ldrh	r3, [r2, #32]
    1738:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    173a:	2b00      	cmp	r3, #0
    173c:	d1fb      	bne.n	1736 <adc_read_buffer_job+0x2e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    173e:	7e11      	ldrb	r1, [r2, #24]
    1740:	3302      	adds	r3, #2
    1742:	430b      	orrs	r3, r1
    1744:	7613      	strb	r3, [r2, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1746:	6822      	ldr	r2, [r4, #0]

	if (adc_module->SYNCBUSY.reg) {
    1748:	8c13      	ldrh	r3, [r2, #32]
    174a:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    174c:	2b00      	cmp	r3, #0
    174e:	d1fb      	bne.n	1748 <adc_read_buffer_job+0x40>
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
    1750:	2000      	movs	r0, #0
}
    1752:	bd10      	pop	{r4, pc}

00001754 <opamp_module_init>:
 */

#include "opamp.h"

void opamp_module_init(void)
{
    1754:	b500      	push	{lr}
    1756:	b083      	sub	sp, #12
static inline void system_clock_source_osculp32k_get_config_defaults(
		struct system_clock_source_osculp32k_config *const config)
{
	Assert(config);

	config->write_once          = false;
    1758:	a801      	add	r0, sp, #4
    175a:	2300      	movs	r3, #0
    175c:	7003      	strb	r3, [r0, #0]
	struct system_clock_source_osculp32k_config config;

	/* Enable the OSCULP32K clock. */
	system_clock_source_osculp32k_get_config_defaults(&config);
	system_clock_source_osculp32k_set_config(&config);
    175e:	4b09      	ldr	r3, [pc, #36]	; (1784 <opamp_module_init+0x30>)
    1760:	4798      	blx	r3

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    1762:	4a09      	ldr	r2, [pc, #36]	; (1788 <opamp_module_init+0x34>)
    1764:	6a11      	ldr	r1, [r2, #32]
    1766:	2340      	movs	r3, #64	; 0x40
    1768:	430b      	orrs	r3, r1
    176a:	6213      	str	r3, [r2, #32]
 * and the OPAMP will be disabled.
 */
static inline void opamp_module_reset(void)
{
	/* Reset OPAMP. */
	OPAMP->CTRLA.reg |= OPAMP_CTRLA_SWRST;
    176c:	4b07      	ldr	r3, [pc, #28]	; (178c <opamp_module_init+0x38>)
    176e:	7819      	ldrb	r1, [r3, #0]
    1770:	2201      	movs	r2, #1
    1772:	430a      	orrs	r2, r1
    1774:	701a      	strb	r2, [r3, #0]
 *
 */
static inline void opamp_module_enable(void)
{
	/* Enable OPAMP. */
	OPAMP->CTRLA.reg |= OPAMP_CTRLA_ENABLE;
    1776:	7819      	ldrb	r1, [r3, #0]
    1778:	2202      	movs	r2, #2
    177a:	430a      	orrs	r2, r1
    177c:	701a      	strb	r2, [r3, #0]
	/* Reset module. */
	opamp_module_reset();

	/* Enable module. */
	opamp_module_enable();
}
    177e:	b003      	add	sp, #12
    1780:	bd00      	pop	{pc}
    1782:	46c0      	nop			; (mov r8, r8)
    1784:	00001935 	.word	0x00001935
    1788:	40000400 	.word	0x40000400
    178c:	43001800 	.word	0x43001800

00001790 <opamp2_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->potentiometer_selection = OPAMP_POT_MUX_8R_8R;
    1790:	2380      	movs	r3, #128	; 0x80
    1792:	01db      	lsls	r3, r3, #7
    1794:	8143      	strh	r3, [r0, #10]
	config->r1_enable = false;
    1796:	2300      	movs	r3, #0
    1798:	7303      	strb	r3, [r0, #12]
	config->r2_vcc = false;
    179a:	7343      	strb	r3, [r0, #13]
	config->r2_out = false;
    179c:	7383      	strb	r3, [r0, #14]
	config->on_demand = false;
    179e:	73c3      	strb	r3, [r0, #15]
	config->run_in_standby = false;
    17a0:	7403      	strb	r3, [r0, #16]
	config->bias_value = OPAMP_BIAS_MODE_0;
    17a2:	7443      	strb	r3, [r0, #17]
	config->analog_out = false;
    17a4:	7483      	strb	r3, [r0, #18]
	Assert(config);

	_opamp_get_config_common_defaults(&(config->config_common));

	/* Default configuration values */
	config->negative_input = OPAMP2_NEG_MUX_OUT2;
    17a6:	2280      	movs	r2, #128	; 0x80
    17a8:	0392      	lsls	r2, r2, #14
    17aa:	6002      	str	r2, [r0, #0]
	config->positive_input = OPAMP2_POS_MUX_PIN2;
    17ac:	6043      	str	r3, [r0, #4]
	config->r1_connection = OPAMP2_RES1_MUX_GND;
    17ae:	23c0      	movs	r3, #192	; 0xc0
    17b0:	015b      	lsls	r3, r3, #5
    17b2:	8103      	strh	r3, [r0, #8]
}
    17b4:	4770      	bx	lr
    17b6:	46c0      	nop			; (mov r8, r8)

000017b8 <opamp2_set_config>:

void opamp2_set_config(struct opamp2_config *const config)
{
	uint32_t temp = 0;

	if (config->config_common.r1_enable) {
    17b8:	7b03      	ldrb	r3, [r0, #12]
		temp |= OPAMP_OPAMPCTRL_RES1EN;
    17ba:	1e5a      	subs	r2, r3, #1
    17bc:	4193      	sbcs	r3, r2
    17be:	029b      	lsls	r3, r3, #10
	}

	if (config->config_common.r2_vcc) {
    17c0:	7b42      	ldrb	r2, [r0, #13]
    17c2:	2a00      	cmp	r2, #0
    17c4:	d002      	beq.n	17cc <opamp2_set_config+0x14>
		temp |= OPAMP_OPAMPCTRL_RES2VCC;
    17c6:	2280      	movs	r2, #128	; 0x80
    17c8:	0092      	lsls	r2, r2, #2
    17ca:	4313      	orrs	r3, r2
	}

	if (config->config_common.r2_out) {
    17cc:	7b82      	ldrb	r2, [r0, #14]
    17ce:	2a00      	cmp	r2, #0
    17d0:	d002      	beq.n	17d8 <opamp2_set_config+0x20>
		temp |= OPAMP_OPAMPCTRL_RES2OUT;
    17d2:	2280      	movs	r2, #128	; 0x80
    17d4:	0052      	lsls	r2, r2, #1
    17d6:	4313      	orrs	r3, r2
	}

	if (config->config_common.on_demand) {
    17d8:	7bc2      	ldrb	r2, [r0, #15]
    17da:	2a00      	cmp	r2, #0
    17dc:	d001      	beq.n	17e2 <opamp2_set_config+0x2a>
		temp |= OPAMP_OPAMPCTRL_ONDEMAND;
    17de:	2280      	movs	r2, #128	; 0x80
    17e0:	4313      	orrs	r3, r2
	}

	if (config->config_common.run_in_standby) {
    17e2:	7c02      	ldrb	r2, [r0, #16]
    17e4:	2a00      	cmp	r2, #0
    17e6:	d001      	beq.n	17ec <opamp2_set_config+0x34>
		temp |= OPAMP_OPAMPCTRL_RUNSTDBY;
    17e8:	2240      	movs	r2, #64	; 0x40
    17ea:	4313      	orrs	r3, r2
	}

	if (config->config_common.analog_out) {
    17ec:	7c82      	ldrb	r2, [r0, #18]
    17ee:	2a00      	cmp	r2, #0
    17f0:	d001      	beq.n	17f6 <opamp2_set_config+0x3e>
		temp |= OPAMP_OPAMPCTRL_ANAOUT;
    17f2:	2204      	movs	r2, #4
    17f4:	4313      	orrs	r3, r2

	OPAMP->OPAMPCTRL[2].reg = temp |
		config->config_common.potentiometer_selection |
		config->config_common.bias_value |
		config->negative_input |
		config->positive_input|
    17f6:	6801      	ldr	r1, [r0, #0]
    17f8:	6842      	ldr	r2, [r0, #4]
    17fa:	4311      	orrs	r1, r2
    17fc:	8942      	ldrh	r2, [r0, #10]
    17fe:	430a      	orrs	r2, r1
    1800:	7c41      	ldrb	r1, [r0, #17]
    1802:	430a      	orrs	r2, r1
    1804:	8901      	ldrh	r1, [r0, #8]
    1806:	430a      	orrs	r2, r1
    1808:	4313      	orrs	r3, r2

	if (config->config_common.analog_out) {
		temp |= OPAMP_OPAMPCTRL_ANAOUT;
	}

	OPAMP->OPAMPCTRL[2].reg = temp |
    180a:	4a01      	ldr	r2, [pc, #4]	; (1810 <opamp2_set_config+0x58>)
    180c:	60d3      	str	r3, [r2, #12]
		config->config_common.potentiometer_selection |
		config->config_common.bias_value |
		config->negative_input |
		config->positive_input|
		config->r1_connection;
}
    180e:	4770      	bx	lr
    1810:	43001800 	.word	0x43001800

00001814 <opamp_enable>:
{
	/* Sanity check arguments */
	Assert(number);

	/* Enable the OPAMP */
	if (number == OPAMP_0) {
    1814:	2800      	cmp	r0, #0
    1816:	d105      	bne.n	1824 <opamp_enable+0x10>
		OPAMP->OPAMPCTRL[0].reg |= OPAMP_OPAMPCTRL_ENABLE;
    1818:	4a0a      	ldr	r2, [pc, #40]	; (1844 <opamp_enable+0x30>)
    181a:	6851      	ldr	r1, [r2, #4]
    181c:	2302      	movs	r3, #2
    181e:	430b      	orrs	r3, r1
    1820:	6053      	str	r3, [r2, #4]
    1822:	e00e      	b.n	1842 <opamp_enable+0x2e>
	} else if (number == OPAMP_1) {
    1824:	2801      	cmp	r0, #1
    1826:	d105      	bne.n	1834 <opamp_enable+0x20>
		OPAMP->OPAMPCTRL[1].reg |= OPAMP_OPAMPCTRL_ENABLE;
    1828:	4a06      	ldr	r2, [pc, #24]	; (1844 <opamp_enable+0x30>)
    182a:	6891      	ldr	r1, [r2, #8]
    182c:	2302      	movs	r3, #2
    182e:	430b      	orrs	r3, r1
    1830:	6093      	str	r3, [r2, #8]
    1832:	e006      	b.n	1842 <opamp_enable+0x2e>
	} else if (number == OPAMP_2) {
    1834:	2802      	cmp	r0, #2
    1836:	d104      	bne.n	1842 <opamp_enable+0x2e>
		OPAMP->OPAMPCTRL[2].reg |= OPAMP_OPAMPCTRL_ENABLE;
    1838:	4a02      	ldr	r2, [pc, #8]	; (1844 <opamp_enable+0x30>)
    183a:	68d1      	ldr	r1, [r2, #12]
    183c:	2302      	movs	r3, #2
    183e:	430b      	orrs	r3, r1
    1840:	60d3      	str	r3, [r2, #12]
	}
}
    1842:	4770      	bx	lr
    1844:	43001800 	.word	0x43001800

00001848 <opamp_is_ready>:
		OPAMP->OPAMPCTRL[2].reg &= ~OPAMP_OPAMPCTRL_ENABLE;
	}
}

bool opamp_is_ready(const enum opamp_id number)
{
    1848:	1e03      	subs	r3, r0, #0
	/* Sanity check arguments */
	Assert(number);

	/* Get the OPAMP output ready status*/
	if (number == OPAMP_0) {
    184a:	d105      	bne.n	1858 <opamp_is_ready+0x10>
		return OPAMP->STATUS.bit.READY0;
    184c:	4b0a      	ldr	r3, [pc, #40]	; (1878 <opamp_is_ready+0x30>)
    184e:	7898      	ldrb	r0, [r3, #2]
    1850:	07c0      	lsls	r0, r0, #31
    1852:	0fc0      	lsrs	r0, r0, #31
    1854:	b2c0      	uxtb	r0, r0
    1856:	e00d      	b.n	1874 <opamp_is_ready+0x2c>
	} else if (number == OPAMP_1) {
    1858:	2801      	cmp	r0, #1
    185a:	d104      	bne.n	1866 <opamp_is_ready+0x1e>
		return OPAMP->STATUS.bit.READY1;
    185c:	4b06      	ldr	r3, [pc, #24]	; (1878 <opamp_is_ready+0x30>)
    185e:	7898      	ldrb	r0, [r3, #2]
    1860:	0780      	lsls	r0, r0, #30
    1862:	0fc0      	lsrs	r0, r0, #31
    1864:	e006      	b.n	1874 <opamp_is_ready+0x2c>
	} else if (number == OPAMP_2) {
		return OPAMP->STATUS.bit.READY2;
	}

	return false;
    1866:	2000      	movs	r0, #0
	/* Get the OPAMP output ready status*/
	if (number == OPAMP_0) {
		return OPAMP->STATUS.bit.READY0;
	} else if (number == OPAMP_1) {
		return OPAMP->STATUS.bit.READY1;
	} else if (number == OPAMP_2) {
    1868:	2b02      	cmp	r3, #2
    186a:	d103      	bne.n	1874 <opamp_is_ready+0x2c>
		return OPAMP->STATUS.bit.READY2;
    186c:	4b02      	ldr	r3, [pc, #8]	; (1878 <opamp_is_ready+0x30>)
    186e:	7898      	ldrb	r0, [r3, #2]
    1870:	0740      	lsls	r0, r0, #29
    1872:	0fc0      	lsrs	r0, r0, #31
	}

	return false;
}
    1874:	4770      	bx	lr
    1876:	46c0      	nop			; (mov r8, r8)
    1878:	43001800 	.word	0x43001800

0000187c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    187c:	b500      	push	{lr}
    187e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1880:	ab01      	add	r3, sp, #4
    1882:	2280      	movs	r2, #128	; 0x80
    1884:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1886:	780a      	ldrb	r2, [r1, #0]
    1888:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    188a:	784a      	ldrb	r2, [r1, #1]
    188c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    188e:	788a      	ldrb	r2, [r1, #2]
    1890:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1892:	0019      	movs	r1, r3
    1894:	4b01      	ldr	r3, [pc, #4]	; (189c <port_pin_set_config+0x20>)
    1896:	4798      	blx	r3
}
    1898:	b003      	add	sp, #12
    189a:	bd00      	pop	{pc}
    189c:	00001d1d 	.word	0x00001d1d

000018a0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    18a0:	b510      	push	{r4, lr}
	switch (clock_source) {
    18a2:	2808      	cmp	r0, #8
    18a4:	d803      	bhi.n	18ae <system_clock_source_get_hz+0xe>
    18a6:	0080      	lsls	r0, r0, #2
    18a8:	4b1c      	ldr	r3, [pc, #112]	; (191c <system_clock_source_get_hz+0x7c>)
    18aa:	581b      	ldr	r3, [r3, r0]
    18ac:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    18ae:	2000      	movs	r0, #0
    18b0:	e032      	b.n	1918 <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    18b2:	4b1b      	ldr	r3, [pc, #108]	; (1920 <system_clock_source_get_hz+0x80>)
    18b4:	6918      	ldr	r0, [r3, #16]
    18b6:	e02f      	b.n	1918 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    18b8:	4b1a      	ldr	r3, [pc, #104]	; (1924 <system_clock_source_get_hz+0x84>)
    18ba:	7d18      	ldrb	r0, [r3, #20]
    18bc:	0700      	lsls	r0, r0, #28
    18be:	0f80      	lsrs	r0, r0, #30
    18c0:	3001      	adds	r0, #1
    18c2:	4b19      	ldr	r3, [pc, #100]	; (1928 <system_clock_source_get_hz+0x88>)
    18c4:	4358      	muls	r0, r3
    18c6:	e027      	b.n	1918 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    18c8:	4b15      	ldr	r3, [pc, #84]	; (1920 <system_clock_source_get_hz+0x80>)
    18ca:	6958      	ldr	r0, [r3, #20]
    18cc:	e024      	b.n	1918 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    18ce:	4b14      	ldr	r3, [pc, #80]	; (1920 <system_clock_source_get_hz+0x80>)
    18d0:	681b      	ldr	r3, [r3, #0]
    18d2:	2002      	movs	r0, #2
    18d4:	4018      	ands	r0, r3
    18d6:	d01f      	beq.n	1918 <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    18d8:	4912      	ldr	r1, [pc, #72]	; (1924 <system_clock_source_get_hz+0x84>)
    18da:	2280      	movs	r2, #128	; 0x80
    18dc:	0052      	lsls	r2, r2, #1
    18de:	68cb      	ldr	r3, [r1, #12]
    18e0:	4213      	tst	r3, r2
    18e2:	d0fc      	beq.n	18de <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    18e4:	4b0e      	ldr	r3, [pc, #56]	; (1920 <system_clock_source_get_hz+0x80>)
    18e6:	681b      	ldr	r3, [r3, #0]
    18e8:	075b      	lsls	r3, r3, #29
    18ea:	d514      	bpl.n	1916 <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    18ec:	2000      	movs	r0, #0
    18ee:	4b0f      	ldr	r3, [pc, #60]	; (192c <system_clock_source_get_hz+0x8c>)
    18f0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    18f2:	4b0b      	ldr	r3, [pc, #44]	; (1920 <system_clock_source_get_hz+0x80>)
    18f4:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    18f6:	041b      	lsls	r3, r3, #16
    18f8:	0c1b      	lsrs	r3, r3, #16
    18fa:	4358      	muls	r0, r3
    18fc:	e00c      	b.n	1918 <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    18fe:	2328      	movs	r3, #40	; 0x28
    1900:	4a08      	ldr	r2, [pc, #32]	; (1924 <system_clock_source_get_hz+0x84>)
    1902:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1904:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1906:	079b      	lsls	r3, r3, #30
    1908:	d506      	bpl.n	1918 <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    190a:	4b05      	ldr	r3, [pc, #20]	; (1920 <system_clock_source_get_hz+0x80>)
    190c:	68d8      	ldr	r0, [r3, #12]
    190e:	e003      	b.n	1918 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1910:	2080      	movs	r0, #128	; 0x80
    1912:	0200      	lsls	r0, r0, #8
    1914:	e000      	b.n	1918 <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1916:	4806      	ldr	r0, [pc, #24]	; (1930 <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    1918:	bd10      	pop	{r4, pc}
    191a:	46c0      	nop			; (mov r8, r8)
    191c:	00006770 	.word	0x00006770
    1920:	200000f0 	.word	0x200000f0
    1924:	40000c00 	.word	0x40000c00
    1928:	003d0900 	.word	0x003d0900
    192c:	00001c45 	.word	0x00001c45
    1930:	02dc6c00 	.word	0x02dc6c00

00001934 <system_clock_source_osculp32k_set_config>:
 *
 * \param[in] config  OSCULP32K configuration structure containing the new config
 */
void system_clock_source_osculp32k_set_config(
		struct system_clock_source_osculp32k_config *const config)
{
    1934:	b510      	push	{r4, lr}
	OSC32KCTRL_OSCULP32K_Type temp = OSC32KCTRL->OSCULP32K;
    1936:	4905      	ldr	r1, [pc, #20]	; (194c <system_clock_source_osculp32k_set_config+0x18>)
    1938:	69cc      	ldr	r4, [r1, #28]
	/* Update settings via a temporary struct to reduce register access */
	temp.bit.WRTLOCK  = config->write_once;
	OSC32KCTRL->OSCULP32K  = temp;
    193a:	7802      	ldrb	r2, [r0, #0]
    193c:	2301      	movs	r3, #1
    193e:	401a      	ands	r2, r3
    1940:	03d2      	lsls	r2, r2, #15
    1942:	4b03      	ldr	r3, [pc, #12]	; (1950 <system_clock_source_osculp32k_set_config+0x1c>)
    1944:	4023      	ands	r3, r4
    1946:	4313      	orrs	r3, r2
    1948:	61cb      	str	r3, [r1, #28]
}
    194a:	bd10      	pop	{r4, pc}
    194c:	40001000 	.word	0x40001000
    1950:	ffff7fff 	.word	0xffff7fff

00001954 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1954:	b510      	push	{r4, lr}
    1956:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    1958:	2280      	movs	r2, #128	; 0x80
    195a:	0052      	lsls	r2, r2, #1
    195c:	4b2b      	ldr	r3, [pc, #172]	; (1a0c <system_clock_init+0xb8>)
    195e:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    1960:	3afd      	subs	r2, #253	; 0xfd
    1962:	4b2b      	ldr	r3, [pc, #172]	; (1a10 <system_clock_init+0xbc>)
    1964:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1966:	4a2b      	ldr	r2, [pc, #172]	; (1a14 <system_clock_init+0xc0>)
    1968:	6853      	ldr	r3, [r2, #4]
    196a:	211e      	movs	r1, #30
    196c:	438b      	bics	r3, r1
    196e:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    1970:	2380      	movs	r3, #128	; 0x80
    1972:	05db      	lsls	r3, r3, #23
    1974:	789b      	ldrb	r3, [r3, #2]
    1976:	2b02      	cmp	r3, #2
    1978:	d009      	beq.n	198e <system_clock_init+0x3a>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    197a:	2380      	movs	r3, #128	; 0x80
    197c:	05db      	lsls	r3, r3, #23
    197e:	2201      	movs	r2, #1
    1980:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    1982:	3201      	adds	r2, #1
    1984:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    1986:	001a      	movs	r2, r3
    1988:	7993      	ldrb	r3, [r2, #6]
    198a:	2b00      	cmp	r3, #0
    198c:	d0fc      	beq.n	1988 <system_clock_init+0x34>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    198e:	4b1f      	ldr	r3, [pc, #124]	; (1a0c <system_clock_init+0xb8>)
    1990:	7d1a      	ldrb	r2, [r3, #20]
    1992:	2180      	movs	r1, #128	; 0x80
    1994:	4249      	negs	r1, r1
    1996:	430a      	orrs	r2, r1
    1998:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    199a:	7d1a      	ldrb	r2, [r3, #20]
    199c:	31c0      	adds	r1, #192	; 0xc0
    199e:	438a      	bics	r2, r1
    19a0:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    19a2:	4b1d      	ldr	r3, [pc, #116]	; (1a18 <system_clock_init+0xc4>)
    19a4:	4798      	blx	r3
 * \param[in] divider  CPU clock divider
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    19a6:	4c1d      	ldr	r4, [pc, #116]	; (1a1c <system_clock_init+0xc8>)
    19a8:	2301      	movs	r3, #1
    19aa:	71a3      	strb	r3, [r4, #6]
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_low_power_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    19ac:	7163      	strb	r3, [r4, #5]
 * \param[in] divider  CPU clock divider
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    19ae:	7123      	strb	r3, [r4, #4]
{
#ifdef  MCLK_CTRLA_CFDEN
	if (enable) {
		MCLK->CTRLA.reg |=  MCLK_CTRLA_CFDEN;
	} else {
		MCLK->CTRLA.reg &= ~MCLK_CTRLA_CFDEN;
    19b0:	7822      	ldrb	r2, [r4, #0]
    19b2:	2104      	movs	r1, #4
    19b4:	438a      	bics	r2, r1
    19b6:	7022      	strb	r2, [r4, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    19b8:	a901      	add	r1, sp, #4
    19ba:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    19bc:	2300      	movs	r3, #0
    19be:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
    19c0:	2206      	movs	r2, #6
    19c2:	700a      	strb	r2, [r1, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    19c4:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    19c6:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    19c8:	2000      	movs	r0, #0
    19ca:	4b15      	ldr	r3, [pc, #84]	; (1a20 <system_clock_init+0xcc>)
    19cc:	4798      	blx	r3
    19ce:	2000      	movs	r0, #0
    19d0:	4b14      	ldr	r3, [pc, #80]	; (1a24 <system_clock_init+0xd0>)
    19d2:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    19d4:	2000      	movs	r0, #0
    19d6:	4b14      	ldr	r3, [pc, #80]	; (1a28 <system_clock_init+0xd4>)
    19d8:	4798      	blx	r3
    19da:	7921      	ldrb	r1, [r4, #4]
    19dc:	b2c9      	uxtb	r1, r1
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    19de:	4b13      	ldr	r3, [pc, #76]	; (1a2c <system_clock_init+0xd8>)
    19e0:	4798      	blx	r3
    19e2:	4b13      	ldr	r3, [pc, #76]	; (1a30 <system_clock_init+0xdc>)
    19e4:	4298      	cmp	r0, r3
    19e6:	d80e      	bhi.n	1a06 <system_clock_init+0xb2>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    19e8:	2380      	movs	r3, #128	; 0x80
    19ea:	05db      	lsls	r3, r3, #23
    19ec:	789b      	ldrb	r3, [r3, #2]
    19ee:	2b00      	cmp	r3, #0
    19f0:	d009      	beq.n	1a06 <system_clock_init+0xb2>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    19f2:	2380      	movs	r3, #128	; 0x80
    19f4:	05db      	lsls	r3, r3, #23
    19f6:	2201      	movs	r2, #1
    19f8:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    19fa:	2200      	movs	r2, #0
    19fc:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    19fe:	001a      	movs	r2, r3
    1a00:	7993      	ldrb	r3, [r2, #6]
    1a02:	2b00      	cmp	r3, #0
    1a04:	d0fc      	beq.n	1a00 <system_clock_init+0xac>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    1a06:	b004      	add	sp, #16
    1a08:	bd10      	pop	{r4, pc}
    1a0a:	46c0      	nop			; (mov r8, r8)
    1a0c:	40000c00 	.word	0x40000c00
    1a10:	40001400 	.word	0x40001400
    1a14:	41004000 	.word	0x41004000
    1a18:	00001a35 	.word	0x00001a35
    1a1c:	40000400 	.word	0x40000400
    1a20:	00001a59 	.word	0x00001a59
    1a24:	00001b05 	.word	0x00001b05
    1a28:	00001b45 	.word	0x00001b45
    1a2c:	00004371 	.word	0x00004371
    1a30:	00b71b00 	.word	0x00b71b00

00001a34 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    1a34:	4a06      	ldr	r2, [pc, #24]	; (1a50 <system_gclk_init+0x1c>)
    1a36:	6951      	ldr	r1, [r2, #20]
    1a38:	2340      	movs	r3, #64	; 0x40
    1a3a:	430b      	orrs	r3, r1
    1a3c:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    1a3e:	2201      	movs	r2, #1
    1a40:	4b04      	ldr	r3, [pc, #16]	; (1a54 <system_gclk_init+0x20>)
    1a42:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    1a44:	0019      	movs	r1, r3
    1a46:	780b      	ldrb	r3, [r1, #0]
    1a48:	4213      	tst	r3, r2
    1a4a:	d1fc      	bne.n	1a46 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1a4c:	4770      	bx	lr
    1a4e:	46c0      	nop			; (mov r8, r8)
    1a50:	40000400 	.word	0x40000400
    1a54:	40001800 	.word	0x40001800

00001a58 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1a58:	b570      	push	{r4, r5, r6, lr}
    1a5a:	0005      	movs	r5, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1a5c:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1a5e:	784b      	ldrb	r3, [r1, #1]
    1a60:	2b00      	cmp	r3, #0
    1a62:	d002      	beq.n	1a6a <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1a64:	2380      	movs	r3, #128	; 0x80
    1a66:	00db      	lsls	r3, r3, #3
    1a68:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1a6a:	7a4b      	ldrb	r3, [r1, #9]
    1a6c:	2b00      	cmp	r3, #0
    1a6e:	d002      	beq.n	1a76 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1a70:	2380      	movs	r3, #128	; 0x80
    1a72:	011b      	lsls	r3, r3, #4
    1a74:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1a76:	684a      	ldr	r2, [r1, #4]
    1a78:	2a01      	cmp	r2, #1
    1a7a:	d917      	bls.n	1aac <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1a7c:	1e53      	subs	r3, r2, #1
    1a7e:	421a      	tst	r2, r3
    1a80:	d10f      	bne.n	1aa2 <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a82:	2a02      	cmp	r2, #2
    1a84:	d906      	bls.n	1a94 <system_gclk_gen_set_config+0x3c>
    1a86:	2302      	movs	r3, #2
    1a88:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    1a8a:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1a8c:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a8e:	429a      	cmp	r2, r3
    1a90:	d8fb      	bhi.n	1a8a <system_gclk_gen_set_config+0x32>
    1a92:	e000      	b.n	1a96 <system_gclk_gen_set_config+0x3e>
    1a94:	2000      	movs	r0, #0
    1a96:	2380      	movs	r3, #128	; 0x80
    1a98:	015b      	lsls	r3, r3, #5
    1a9a:	431c      	orrs	r4, r3
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1a9c:	0400      	lsls	r0, r0, #16
    1a9e:	4304      	orrs	r4, r0
    1aa0:	e004      	b.n	1aac <system_gclk_gen_set_config+0x54>

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1aa2:	0412      	lsls	r2, r2, #16
    1aa4:	2380      	movs	r3, #128	; 0x80
    1aa6:	009b      	lsls	r3, r3, #2
    1aa8:	431a      	orrs	r2, r3
    1aaa:	4314      	orrs	r4, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1aac:	7a0b      	ldrb	r3, [r1, #8]
    1aae:	2b00      	cmp	r3, #0
    1ab0:	d002      	beq.n	1ab8 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1ab2:	2380      	movs	r3, #128	; 0x80
    1ab4:	019b      	lsls	r3, r3, #6
    1ab6:	431c      	orrs	r4, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1ab8:	2604      	movs	r6, #4
    1aba:	40ae      	lsls	r6, r5
    1abc:	490d      	ldr	r1, [pc, #52]	; (1af4 <system_gclk_gen_set_config+0x9c>)
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    1abe:	4a0e      	ldr	r2, [pc, #56]	; (1af8 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1ac0:	684b      	ldr	r3, [r1, #4]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    1ac2:	4013      	ands	r3, r2
    1ac4:	421e      	tst	r6, r3
    1ac6:	d1fb      	bne.n	1ac0 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1ac8:	4b0c      	ldr	r3, [pc, #48]	; (1afc <system_gclk_gen_set_config+0xa4>)
    1aca:	4798      	blx	r3
    1acc:	00ad      	lsls	r5, r5, #2
    1ace:	4b09      	ldr	r3, [pc, #36]	; (1af4 <system_gclk_gen_set_config+0x9c>)
    1ad0:	469c      	mov	ip, r3
    1ad2:	4465      	add	r5, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    1ad4:	6a28      	ldr	r0, [r5, #32]
    1ad6:	2380      	movs	r3, #128	; 0x80
    1ad8:	005b      	lsls	r3, r3, #1
    1ada:	4018      	ands	r0, r3
    1adc:	4320      	orrs	r0, r4
    1ade:	6228      	str	r0, [r5, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1ae0:	4661      	mov	r1, ip

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    1ae2:	4a05      	ldr	r2, [pc, #20]	; (1af8 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1ae4:	684b      	ldr	r3, [r1, #4]

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    1ae6:	4013      	ands	r3, r2
    1ae8:	421e      	tst	r6, r3
    1aea:	d1fb      	bne.n	1ae4 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1aec:	4b04      	ldr	r3, [pc, #16]	; (1b00 <system_gclk_gen_set_config+0xa8>)
    1aee:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    1af0:	bd70      	pop	{r4, r5, r6, pc}
    1af2:	46c0      	nop			; (mov r8, r8)
    1af4:	40001800 	.word	0x40001800
    1af8:	000007fc 	.word	0x000007fc
    1afc:	00001175 	.word	0x00001175
    1b00:	000011b5 	.word	0x000011b5

00001b04 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1b04:	b510      	push	{r4, lr}
    1b06:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1b08:	2204      	movs	r2, #4
    1b0a:	4082      	lsls	r2, r0
    1b0c:	4809      	ldr	r0, [pc, #36]	; (1b34 <system_gclk_gen_enable+0x30>)
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    1b0e:	490a      	ldr	r1, [pc, #40]	; (1b38 <system_gclk_gen_enable+0x34>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1b10:	6843      	ldr	r3, [r0, #4]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    1b12:	400b      	ands	r3, r1
    1b14:	421a      	tst	r2, r3
    1b16:	d1fb      	bne.n	1b10 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1b18:	4b08      	ldr	r3, [pc, #32]	; (1b3c <system_gclk_gen_enable+0x38>)
    1b1a:	4798      	blx	r3
    1b1c:	00a4      	lsls	r4, r4, #2
    1b1e:	4b05      	ldr	r3, [pc, #20]	; (1b34 <system_gclk_gen_enable+0x30>)
    1b20:	469c      	mov	ip, r3
    1b22:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    1b24:	6a23      	ldr	r3, [r4, #32]
    1b26:	2280      	movs	r2, #128	; 0x80
    1b28:	0052      	lsls	r2, r2, #1
    1b2a:	4313      	orrs	r3, r2
    1b2c:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1b2e:	4b04      	ldr	r3, [pc, #16]	; (1b40 <system_gclk_gen_enable+0x3c>)
    1b30:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b32:	bd10      	pop	{r4, pc}
    1b34:	40001800 	.word	0x40001800
    1b38:	000007fc 	.word	0x000007fc
    1b3c:	00001175 	.word	0x00001175
    1b40:	000011b5 	.word	0x000011b5

00001b44 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b46:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1b48:	2204      	movs	r2, #4
    1b4a:	4082      	lsls	r2, r0
    1b4c:	4812      	ldr	r0, [pc, #72]	; (1b98 <system_gclk_gen_get_hz+0x54>)
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    1b4e:	4913      	ldr	r1, [pc, #76]	; (1b9c <system_gclk_gen_get_hz+0x58>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1b50:	6843      	ldr	r3, [r0, #4]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    1b52:	400b      	ands	r3, r1
    1b54:	421a      	tst	r2, r3
    1b56:	d1fb      	bne.n	1b50 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1b58:	4b11      	ldr	r3, [pc, #68]	; (1ba0 <system_gclk_gen_get_hz+0x5c>)
    1b5a:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    1b5c:	4f0e      	ldr	r7, [pc, #56]	; (1b98 <system_gclk_gen_get_hz+0x54>)
    1b5e:	3408      	adds	r4, #8
    1b60:	00a4      	lsls	r4, r4, #2
    1b62:	59e0      	ldr	r0, [r4, r7]
    1b64:	06c0      	lsls	r0, r0, #27
    1b66:	0ec0      	lsrs	r0, r0, #27
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1b68:	4b0e      	ldr	r3, [pc, #56]	; (1ba4 <system_gclk_gen_get_hz+0x60>)
    1b6a:	4798      	blx	r3
    1b6c:	0006      	movs	r6, r0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    1b6e:	59e5      	ldr	r5, [r4, r7]
    1b70:	04ed      	lsls	r5, r5, #19
    1b72:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    1b74:	59e4      	ldr	r4, [r4, r7]
    1b76:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1b78:	4b0b      	ldr	r3, [pc, #44]	; (1ba8 <system_gclk_gen_get_hz+0x64>)
    1b7a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1b7c:	2d00      	cmp	r5, #0
    1b7e:	d107      	bne.n	1b90 <system_gclk_gen_get_hz+0x4c>
    1b80:	2c01      	cmp	r4, #1
    1b82:	d907      	bls.n	1b94 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1b84:	0021      	movs	r1, r4
    1b86:	0030      	movs	r0, r6
    1b88:	4b08      	ldr	r3, [pc, #32]	; (1bac <system_gclk_gen_get_hz+0x68>)
    1b8a:	4798      	blx	r3
    1b8c:	0006      	movs	r6, r0
    1b8e:	e001      	b.n	1b94 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1b90:	3401      	adds	r4, #1
    1b92:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1b94:	0030      	movs	r0, r6
    1b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b98:	40001800 	.word	0x40001800
    1b9c:	000007fc 	.word	0x000007fc
    1ba0:	00001175 	.word	0x00001175
    1ba4:	000018a1 	.word	0x000018a1
    1ba8:	000011b5 	.word	0x000011b5
    1bac:	00004371 	.word	0x00004371

00001bb0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1bb0:	b510      	push	{r4, lr}
    1bb2:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1bb4:	4b09      	ldr	r3, [pc, #36]	; (1bdc <system_gclk_chan_enable+0x2c>)
    1bb6:	4798      	blx	r3
    1bb8:	00a0      	lsls	r0, r4, #2
    1bba:	4b09      	ldr	r3, [pc, #36]	; (1be0 <system_gclk_chan_enable+0x30>)
    1bbc:	469c      	mov	ip, r3
    1bbe:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    1bc0:	2280      	movs	r2, #128	; 0x80
    1bc2:	5881      	ldr	r1, [r0, r2]
    1bc4:	2340      	movs	r3, #64	; 0x40
    1bc6:	430b      	orrs	r3, r1
    1bc8:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    1bca:	2180      	movs	r1, #128	; 0x80
    1bcc:	3a40      	subs	r2, #64	; 0x40
    1bce:	5843      	ldr	r3, [r0, r1]
    1bd0:	421a      	tst	r2, r3
    1bd2:	d0fc      	beq.n	1bce <system_gclk_chan_enable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1bd4:	4b03      	ldr	r3, [pc, #12]	; (1be4 <system_gclk_chan_enable+0x34>)
    1bd6:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1bd8:	bd10      	pop	{r4, pc}
    1bda:	46c0      	nop			; (mov r8, r8)
    1bdc:	00001175 	.word	0x00001175
    1be0:	40001800 	.word	0x40001800
    1be4:	000011b5 	.word	0x000011b5

00001be8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1be8:	b510      	push	{r4, lr}
    1bea:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1bec:	4b09      	ldr	r3, [pc, #36]	; (1c14 <system_gclk_chan_disable+0x2c>)
    1bee:	4798      	blx	r3
    1bf0:	00a0      	lsls	r0, r4, #2
    1bf2:	4b09      	ldr	r3, [pc, #36]	; (1c18 <system_gclk_chan_disable+0x30>)
    1bf4:	469c      	mov	ip, r3
    1bf6:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    1bf8:	2280      	movs	r2, #128	; 0x80
    1bfa:	5883      	ldr	r3, [r0, r2]
    1bfc:	2140      	movs	r1, #64	; 0x40
    1bfe:	438b      	bics	r3, r1
    1c00:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    1c02:	3140      	adds	r1, #64	; 0x40
    1c04:	3a40      	subs	r2, #64	; 0x40
    1c06:	5843      	ldr	r3, [r0, r1]
    1c08:	421a      	tst	r2, r3
    1c0a:	d1fc      	bne.n	1c06 <system_gclk_chan_disable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1c0c:	4b03      	ldr	r3, [pc, #12]	; (1c1c <system_gclk_chan_disable+0x34>)
    1c0e:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1c10:	bd10      	pop	{r4, pc}
    1c12:	46c0      	nop			; (mov r8, r8)
    1c14:	00001175 	.word	0x00001175
    1c18:	40001800 	.word	0x40001800
    1c1c:	000011b5 	.word	0x000011b5

00001c20 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1c20:	b570      	push	{r4, r5, r6, lr}
    1c22:	0004      	movs	r4, r0
    1c24:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1c26:	4b05      	ldr	r3, [pc, #20]	; (1c3c <system_gclk_chan_set_config+0x1c>)
    1c28:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    1c2a:	782b      	ldrb	r3, [r5, #0]
    1c2c:	220f      	movs	r2, #15
    1c2e:	4013      	ands	r3, r2
    1c30:	3420      	adds	r4, #32
    1c32:	00a4      	lsls	r4, r4, #2
    1c34:	4a02      	ldr	r2, [pc, #8]	; (1c40 <system_gclk_chan_set_config+0x20>)
    1c36:	50a3      	str	r3, [r4, r2]


}
    1c38:	bd70      	pop	{r4, r5, r6, pc}
    1c3a:	46c0      	nop			; (mov r8, r8)
    1c3c:	00001be9 	.word	0x00001be9
    1c40:	40001800 	.word	0x40001800

00001c44 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1c44:	b510      	push	{r4, lr}
    1c46:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1c48:	4b06      	ldr	r3, [pc, #24]	; (1c64 <system_gclk_chan_get_hz+0x20>)
    1c4a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    1c4c:	3420      	adds	r4, #32
    1c4e:	00a4      	lsls	r4, r4, #2
    1c50:	4b05      	ldr	r3, [pc, #20]	; (1c68 <system_gclk_chan_get_hz+0x24>)
    1c52:	58e4      	ldr	r4, [r4, r3]
    1c54:	0724      	lsls	r4, r4, #28
    1c56:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1c58:	4b04      	ldr	r3, [pc, #16]	; (1c6c <system_gclk_chan_get_hz+0x28>)
    1c5a:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1c5c:	0020      	movs	r0, r4
    1c5e:	4b04      	ldr	r3, [pc, #16]	; (1c70 <system_gclk_chan_get_hz+0x2c>)
    1c60:	4798      	blx	r3
}
    1c62:	bd10      	pop	{r4, pc}
    1c64:	00001175 	.word	0x00001175
    1c68:	40001800 	.word	0x40001800
    1c6c:	000011b5 	.word	0x000011b5
    1c70:	00001b45 	.word	0x00001b45

00001c74 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1c74:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1c76:	78d3      	ldrb	r3, [r2, #3]
    1c78:	2b00      	cmp	r3, #0
    1c7a:	d11e      	bne.n	1cba <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1c7c:	7813      	ldrb	r3, [r2, #0]
    1c7e:	2b80      	cmp	r3, #128	; 0x80
    1c80:	d004      	beq.n	1c8c <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1c82:	061b      	lsls	r3, r3, #24
    1c84:	2480      	movs	r4, #128	; 0x80
    1c86:	0264      	lsls	r4, r4, #9
    1c88:	4323      	orrs	r3, r4
    1c8a:	e000      	b.n	1c8e <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1c8c:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1c8e:	7854      	ldrb	r4, [r2, #1]
    1c90:	2502      	movs	r5, #2
    1c92:	43ac      	bics	r4, r5
    1c94:	d10a      	bne.n	1cac <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1c96:	7894      	ldrb	r4, [r2, #2]
    1c98:	2c00      	cmp	r4, #0
    1c9a:	d103      	bne.n	1ca4 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1c9c:	2480      	movs	r4, #128	; 0x80
    1c9e:	02a4      	lsls	r4, r4, #10
    1ca0:	4323      	orrs	r3, r4
    1ca2:	e002      	b.n	1caa <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1ca4:	24c0      	movs	r4, #192	; 0xc0
    1ca6:	02e4      	lsls	r4, r4, #11
    1ca8:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1caa:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1cac:	7854      	ldrb	r4, [r2, #1]
    1cae:	3c01      	subs	r4, #1
    1cb0:	2c01      	cmp	r4, #1
    1cb2:	d812      	bhi.n	1cda <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1cb4:	4c18      	ldr	r4, [pc, #96]	; (1d18 <_system_pinmux_config+0xa4>)
    1cb6:	4023      	ands	r3, r4
    1cb8:	e00f      	b.n	1cda <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1cba:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1cbc:	040b      	lsls	r3, r1, #16
    1cbe:	0c1b      	lsrs	r3, r3, #16
    1cc0:	24a0      	movs	r4, #160	; 0xa0
    1cc2:	05e4      	lsls	r4, r4, #23
    1cc4:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cc6:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1cc8:	0c0b      	lsrs	r3, r1, #16
    1cca:	24d0      	movs	r4, #208	; 0xd0
    1ccc:	0624      	lsls	r4, r4, #24
    1cce:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cd0:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1cd2:	78d3      	ldrb	r3, [r2, #3]
    1cd4:	2b00      	cmp	r3, #0
    1cd6:	d018      	beq.n	1d0a <_system_pinmux_config+0x96>
    1cd8:	e01c      	b.n	1d14 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1cda:	040c      	lsls	r4, r1, #16
    1cdc:	0c24      	lsrs	r4, r4, #16
    1cde:	25a0      	movs	r5, #160	; 0xa0
    1ce0:	05ed      	lsls	r5, r5, #23
    1ce2:	432c      	orrs	r4, r5
    1ce4:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ce6:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1ce8:	0c0c      	lsrs	r4, r1, #16
    1cea:	25d0      	movs	r5, #208	; 0xd0
    1cec:	062d      	lsls	r5, r5, #24
    1cee:	432c      	orrs	r4, r5
    1cf0:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cf2:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1cf4:	78d4      	ldrb	r4, [r2, #3]
    1cf6:	2c00      	cmp	r4, #0
    1cf8:	d10c      	bne.n	1d14 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1cfa:	035b      	lsls	r3, r3, #13
    1cfc:	d505      	bpl.n	1d0a <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1cfe:	7893      	ldrb	r3, [r2, #2]
    1d00:	2b01      	cmp	r3, #1
    1d02:	d101      	bne.n	1d08 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    1d04:	6181      	str	r1, [r0, #24]
    1d06:	e000      	b.n	1d0a <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    1d08:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d0a:	7853      	ldrb	r3, [r2, #1]
    1d0c:	3b01      	subs	r3, #1
    1d0e:	2b01      	cmp	r3, #1
    1d10:	d800      	bhi.n	1d14 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1d12:	6081      	str	r1, [r0, #8]
		}
	}
}
    1d14:	bd30      	pop	{r4, r5, pc}
    1d16:	46c0      	nop			; (mov r8, r8)
    1d18:	fffbffff 	.word	0xfffbffff

00001d1c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1d1c:	b510      	push	{r4, lr}
    1d1e:	0003      	movs	r3, r0
    1d20:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1d22:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1d24:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1d26:	2900      	cmp	r1, #0
    1d28:	d104      	bne.n	1d34 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    1d2a:	0958      	lsrs	r0, r3, #5
    1d2c:	01c0      	lsls	r0, r0, #7
    1d2e:	4905      	ldr	r1, [pc, #20]	; (1d44 <system_pinmux_pin_set_config+0x28>)
    1d30:	468c      	mov	ip, r1
    1d32:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    1d34:	211f      	movs	r1, #31
    1d36:	400b      	ands	r3, r1
    1d38:	391e      	subs	r1, #30
    1d3a:	4099      	lsls	r1, r3
    1d3c:	4b02      	ldr	r3, [pc, #8]	; (1d48 <system_pinmux_pin_set_config+0x2c>)
    1d3e:	4798      	blx	r3
}
    1d40:	bd10      	pop	{r4, pc}
    1d42:	46c0      	nop			; (mov r8, r8)
    1d44:	40002800 	.word	0x40002800
    1d48:	00001c75 	.word	0x00001c75

00001d4c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1d4c:	4770      	bx	lr
    1d4e:	46c0      	nop			; (mov r8, r8)

00001d50 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1d50:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1d52:	4b05      	ldr	r3, [pc, #20]	; (1d68 <system_init+0x18>)
    1d54:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1d56:	4b05      	ldr	r3, [pc, #20]	; (1d6c <system_init+0x1c>)
    1d58:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1d5a:	4b05      	ldr	r3, [pc, #20]	; (1d70 <system_init+0x20>)
    1d5c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1d5e:	4b05      	ldr	r3, [pc, #20]	; (1d74 <system_init+0x24>)
    1d60:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1d62:	4b05      	ldr	r3, [pc, #20]	; (1d78 <system_init+0x28>)
    1d64:	4798      	blx	r3
}
    1d66:	bd10      	pop	{r4, pc}
    1d68:	00001955 	.word	0x00001955
    1d6c:	000011e5 	.word	0x000011e5
    1d70:	00001d4d 	.word	0x00001d4d
    1d74:	00001d4d 	.word	0x00001d4d
    1d78:	00001d4d 	.word	0x00001d4d

00001d7c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1d7c:	e7fe      	b.n	1d7c <Dummy_Handler>
    1d7e:	46c0      	nop			; (mov r8, r8)

00001d80 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1d80:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1d82:	4b1d      	ldr	r3, [pc, #116]	; (1df8 <Reset_Handler+0x78>)
    1d84:	4a1d      	ldr	r2, [pc, #116]	; (1dfc <Reset_Handler+0x7c>)
    1d86:	429a      	cmp	r2, r3
    1d88:	d003      	beq.n	1d92 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1d8a:	4b1d      	ldr	r3, [pc, #116]	; (1e00 <Reset_Handler+0x80>)
    1d8c:	4a1a      	ldr	r2, [pc, #104]	; (1df8 <Reset_Handler+0x78>)
    1d8e:	429a      	cmp	r2, r3
    1d90:	d304      	bcc.n	1d9c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1d92:	4b1c      	ldr	r3, [pc, #112]	; (1e04 <Reset_Handler+0x84>)
    1d94:	4a1c      	ldr	r2, [pc, #112]	; (1e08 <Reset_Handler+0x88>)
    1d96:	429a      	cmp	r2, r3
    1d98:	d310      	bcc.n	1dbc <Reset_Handler+0x3c>
    1d9a:	e01e      	b.n	1dda <Reset_Handler+0x5a>
    1d9c:	4a1b      	ldr	r2, [pc, #108]	; (1e0c <Reset_Handler+0x8c>)
    1d9e:	4b18      	ldr	r3, [pc, #96]	; (1e00 <Reset_Handler+0x80>)
    1da0:	3303      	adds	r3, #3
    1da2:	1a9b      	subs	r3, r3, r2
    1da4:	089b      	lsrs	r3, r3, #2
    1da6:	3301      	adds	r3, #1
    1da8:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1daa:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1dac:	4812      	ldr	r0, [pc, #72]	; (1df8 <Reset_Handler+0x78>)
    1dae:	4913      	ldr	r1, [pc, #76]	; (1dfc <Reset_Handler+0x7c>)
    1db0:	588c      	ldr	r4, [r1, r2]
    1db2:	5084      	str	r4, [r0, r2]
    1db4:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1db6:	429a      	cmp	r2, r3
    1db8:	d1fa      	bne.n	1db0 <Reset_Handler+0x30>
    1dba:	e7ea      	b.n	1d92 <Reset_Handler+0x12>
    1dbc:	4a14      	ldr	r2, [pc, #80]	; (1e10 <Reset_Handler+0x90>)
    1dbe:	4b11      	ldr	r3, [pc, #68]	; (1e04 <Reset_Handler+0x84>)
    1dc0:	3303      	adds	r3, #3
    1dc2:	1a9b      	subs	r3, r3, r2
    1dc4:	089b      	lsrs	r3, r3, #2
    1dc6:	3301      	adds	r3, #1
    1dc8:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1dca:	2200      	movs	r2, #0
                *pDest++ = 0;
    1dcc:	480e      	ldr	r0, [pc, #56]	; (1e08 <Reset_Handler+0x88>)
    1dce:	2100      	movs	r1, #0
    1dd0:	1814      	adds	r4, r2, r0
    1dd2:	6021      	str	r1, [r4, #0]
    1dd4:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1dd6:	429a      	cmp	r2, r3
    1dd8:	d1fa      	bne.n	1dd0 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1dda:	4a0e      	ldr	r2, [pc, #56]	; (1e14 <Reset_Handler+0x94>)
    1ddc:	21ff      	movs	r1, #255	; 0xff
    1dde:	4b0e      	ldr	r3, [pc, #56]	; (1e18 <Reset_Handler+0x98>)
    1de0:	438b      	bics	r3, r1
    1de2:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1de4:	4a0d      	ldr	r2, [pc, #52]	; (1e1c <Reset_Handler+0x9c>)
    1de6:	6851      	ldr	r1, [r2, #4]
    1de8:	2380      	movs	r3, #128	; 0x80
    1dea:	430b      	orrs	r3, r1
    1dec:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1dee:	4b0c      	ldr	r3, [pc, #48]	; (1e20 <Reset_Handler+0xa0>)
    1df0:	4798      	blx	r3

        /* Branch to main function */
        main();
    1df2:	4b0c      	ldr	r3, [pc, #48]	; (1e24 <Reset_Handler+0xa4>)
    1df4:	4798      	blx	r3
    1df6:	e7fe      	b.n	1df6 <Reset_Handler+0x76>
    1df8:	20000000 	.word	0x20000000
    1dfc:	00006908 	.word	0x00006908
    1e00:	200000b0 	.word	0x200000b0
    1e04:	20004e38 	.word	0x20004e38
    1e08:	200000b0 	.word	0x200000b0
    1e0c:	20000004 	.word	0x20000004
    1e10:	200000b4 	.word	0x200000b4
    1e14:	e000ed00 	.word	0xe000ed00
    1e18:	00000000 	.word	0x00000000
    1e1c:	41004000 	.word	0x41004000
    1e20:	00005e19 	.word	0x00005e19
    1e24:	00003a05 	.word	0x00003a05

00001e28 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1e28:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1e2a:	4a06      	ldr	r2, [pc, #24]	; (1e44 <_sbrk+0x1c>)
    1e2c:	6812      	ldr	r2, [r2, #0]
    1e2e:	2a00      	cmp	r2, #0
    1e30:	d102      	bne.n	1e38 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    1e32:	4905      	ldr	r1, [pc, #20]	; (1e48 <_sbrk+0x20>)
    1e34:	4a03      	ldr	r2, [pc, #12]	; (1e44 <_sbrk+0x1c>)
    1e36:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    1e38:	4a02      	ldr	r2, [pc, #8]	; (1e44 <_sbrk+0x1c>)
    1e3a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1e3c:	18c3      	adds	r3, r0, r3
    1e3e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1e40:	4770      	bx	lr
    1e42:	46c0      	nop			; (mov r8, r8)
    1e44:	20000108 	.word	0x20000108
    1e48:	20006e38 	.word	0x20006e38

00001e4c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1e4c:	2001      	movs	r0, #1
    1e4e:	4240      	negs	r0, r0
    1e50:	4770      	bx	lr
    1e52:	46c0      	nop			; (mov r8, r8)

00001e54 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1e54:	2380      	movs	r3, #128	; 0x80
    1e56:	019b      	lsls	r3, r3, #6
    1e58:	604b      	str	r3, [r1, #4]

	return 0;
}
    1e5a:	2000      	movs	r0, #0
    1e5c:	4770      	bx	lr
    1e5e:	46c0      	nop			; (mov r8, r8)

00001e60 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1e60:	2000      	movs	r0, #0
    1e62:	4770      	bx	lr

00001e64 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1e64:	0003      	movs	r3, r0
    1e66:	3308      	adds	r3, #8
    1e68:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1e6a:	2201      	movs	r2, #1
    1e6c:	4252      	negs	r2, r2
    1e6e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1e70:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1e72:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1e74:	2300      	movs	r3, #0
    1e76:	6003      	str	r3, [r0, #0]
}
    1e78:	4770      	bx	lr
    1e7a:	46c0      	nop			; (mov r8, r8)

00001e7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1e7c:	2300      	movs	r3, #0
    1e7e:	6103      	str	r3, [r0, #16]
}
    1e80:	4770      	bx	lr
    1e82:	46c0      	nop			; (mov r8, r8)

00001e84 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    1e84:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1e86:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1e88:	689a      	ldr	r2, [r3, #8]
    1e8a:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1e8c:	689a      	ldr	r2, [r3, #8]
    1e8e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    1e90:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1e92:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1e94:	6803      	ldr	r3, [r0, #0]
    1e96:	3301      	adds	r3, #1
    1e98:	6003      	str	r3, [r0, #0]
}
    1e9a:	4770      	bx	lr

00001e9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1e9c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1e9e:	680c      	ldr	r4, [r1, #0]
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1ea0:	0002      	movs	r2, r0
    1ea2:	3208      	adds	r2, #8
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1ea4:	1c63      	adds	r3, r4, #1
    1ea6:	d102      	bne.n	1eae <vListInsert+0x12>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1ea8:	6902      	ldr	r2, [r0, #16]
    1eaa:	e004      	b.n	1eb6 <vListInsert+0x1a>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1eac:	001a      	movs	r2, r3
    1eae:	6853      	ldr	r3, [r2, #4]
    1eb0:	681d      	ldr	r5, [r3, #0]
    1eb2:	42ac      	cmp	r4, r5
    1eb4:	d2fa      	bcs.n	1eac <vListInsert+0x10>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1eb6:	6853      	ldr	r3, [r2, #4]
    1eb8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1eba:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    1ebc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    1ebe:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1ec0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1ec2:	6803      	ldr	r3, [r0, #0]
    1ec4:	3301      	adds	r3, #1
    1ec6:	6003      	str	r3, [r0, #0]
}
    1ec8:	bd30      	pop	{r4, r5, pc}
    1eca:	46c0      	nop			; (mov r8, r8)

00001ecc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1ecc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1ece:	6842      	ldr	r2, [r0, #4]
    1ed0:	6881      	ldr	r1, [r0, #8]
    1ed2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1ed4:	6882      	ldr	r2, [r0, #8]
    1ed6:	6841      	ldr	r1, [r0, #4]
    1ed8:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1eda:	685a      	ldr	r2, [r3, #4]
    1edc:	4290      	cmp	r0, r2
    1ede:	d101      	bne.n	1ee4 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1ee0:	6882      	ldr	r2, [r0, #8]
    1ee2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1ee4:	2200      	movs	r2, #0
    1ee6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    1ee8:	681a      	ldr	r2, [r3, #0]
    1eea:	1e50      	subs	r0, r2, #1
    1eec:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
    1eee:	4770      	bx	lr

00001ef0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    1ef0:	4b03      	ldr	r3, [pc, #12]	; (1f00 <prvTaskExitError+0x10>)
    1ef2:	681b      	ldr	r3, [r3, #0]
    1ef4:	3301      	adds	r3, #1
    1ef6:	d001      	beq.n	1efc <prvTaskExitError+0xc>
    1ef8:	b672      	cpsid	i
    1efa:	e7fe      	b.n	1efa <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
    1efc:	b672      	cpsid	i
    1efe:	e7fe      	b.n	1efe <prvTaskExitError+0xe>
    1f00:	2000000c 	.word	0x2000000c

00001f04 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    1f04:	4a06      	ldr	r2, [pc, #24]	; (1f20 <pxCurrentTCBConst2>)
    1f06:	6813      	ldr	r3, [r2, #0]
    1f08:	6818      	ldr	r0, [r3, #0]
    1f0a:	3020      	adds	r0, #32
    1f0c:	f380 8809 	msr	PSP, r0
    1f10:	2002      	movs	r0, #2
    1f12:	f380 8814 	msr	CONTROL, r0
    1f16:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    1f18:	46ae      	mov	lr, r5
    1f1a:	b662      	cpsie	i
    1f1c:	bd00      	pop	{pc}
    1f1e:	46c0      	nop			; (mov r8, r8)

00001f20 <pxCurrentTCBConst2>:
    1f20:	20003c60 	.word	0x20003c60

00001f24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    1f24:	b510      	push	{r4, lr}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    1f26:	1f03      	subs	r3, r0, #4
    1f28:	2480      	movs	r4, #128	; 0x80
    1f2a:	0464      	lsls	r4, r4, #17
    1f2c:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    1f2e:	3b04      	subs	r3, #4
    1f30:	6019      	str	r1, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    1f32:	3b04      	subs	r3, #4
    1f34:	4902      	ldr	r1, [pc, #8]	; (1f40 <pxPortInitialiseStack+0x1c>)
    1f36:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    1f38:	3b14      	subs	r3, #20
    1f3a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    1f3c:	3840      	subs	r0, #64	; 0x40

	return pxTopOfStack;
}
    1f3e:	bd10      	pop	{r4, pc}
    1f40:	00001ef1 	.word	0x00001ef1

00001f44 <SVC_Handler>:

void vPortSVCHandler( void )
{
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    1f44:	4770      	bx	lr
    1f46:	46c0      	nop			; (mov r8, r8)

00001f48 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    1f48:	2280      	movs	r2, #128	; 0x80
    1f4a:	0552      	lsls	r2, r2, #21
    1f4c:	4b03      	ldr	r3, [pc, #12]	; (1f5c <vPortYield+0x14>)
    1f4e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    1f50:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1f54:	f3bf 8f6f 	isb	sy
}
    1f58:	4770      	bx	lr
    1f5a:	46c0      	nop			; (mov r8, r8)
    1f5c:	e000ed04 	.word	0xe000ed04

00001f60 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    1f60:	b672      	cpsid	i
    uxCriticalNesting++;
    1f62:	4a04      	ldr	r2, [pc, #16]	; (1f74 <vPortEnterCritical+0x14>)
    1f64:	6813      	ldr	r3, [r2, #0]
    1f66:	3301      	adds	r3, #1
    1f68:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
    1f6a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1f6e:	f3bf 8f6f 	isb	sy
}
    1f72:	4770      	bx	lr
    1f74:	2000000c 	.word	0x2000000c

00001f78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
    1f78:	4b06      	ldr	r3, [pc, #24]	; (1f94 <vPortExitCritical+0x1c>)
    1f7a:	681b      	ldr	r3, [r3, #0]
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	d101      	bne.n	1f84 <vPortExitCritical+0xc>
    1f80:	b672      	cpsid	i
    1f82:	e7fe      	b.n	1f82 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    1f84:	3b01      	subs	r3, #1
    1f86:	4a03      	ldr	r2, [pc, #12]	; (1f94 <vPortExitCritical+0x1c>)
    1f88:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    1f8a:	2b00      	cmp	r3, #0
    1f8c:	d100      	bne.n	1f90 <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
    1f8e:	b662      	cpsie	i
    }
}
    1f90:	4770      	bx	lr
    1f92:	46c0      	nop			; (mov r8, r8)
    1f94:	2000000c 	.word	0x2000000c

00001f98 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    1f98:	f3ef 8010 	mrs	r0, PRIMASK
    1f9c:	b672      	cpsid	i
    1f9e:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
    1fa0:	2000      	movs	r0, #0
    1fa2:	46c0      	nop			; (mov r8, r8)

00001fa4 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    1fa4:	f380 8810 	msr	PRIMASK, r0
    1fa8:	4770      	bx	lr
    1faa:	46c0      	nop			; (mov r8, r8)

00001fac <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    1fac:	f3ef 8009 	mrs	r0, PSP
    1fb0:	4b0e      	ldr	r3, [pc, #56]	; (1fec <pxCurrentTCBConst>)
    1fb2:	681a      	ldr	r2, [r3, #0]
    1fb4:	3820      	subs	r0, #32
    1fb6:	6010      	str	r0, [r2, #0]
    1fb8:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1fba:	4644      	mov	r4, r8
    1fbc:	464d      	mov	r5, r9
    1fbe:	4656      	mov	r6, sl
    1fc0:	465f      	mov	r7, fp
    1fc2:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1fc4:	b508      	push	{r3, lr}
    1fc6:	b672      	cpsid	i
    1fc8:	f000 feda 	bl	2d80 <vTaskSwitchContext>
    1fcc:	b662      	cpsie	i
    1fce:	bc0c      	pop	{r2, r3}
    1fd0:	6811      	ldr	r1, [r2, #0]
    1fd2:	6808      	ldr	r0, [r1, #0]
    1fd4:	3010      	adds	r0, #16
    1fd6:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1fd8:	46a0      	mov	r8, r4
    1fda:	46a9      	mov	r9, r5
    1fdc:	46b2      	mov	sl, r6
    1fde:	46bb      	mov	fp, r7
    1fe0:	f380 8809 	msr	PSP, r0
    1fe4:	3820      	subs	r0, #32
    1fe6:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1fe8:	4718      	bx	r3
    1fea:	46c0      	nop			; (mov r8, r8)

00001fec <pxCurrentTCBConst>:
    1fec:	20003c60 	.word	0x20003c60

00001ff0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    1ff0:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    1ff2:	4b07      	ldr	r3, [pc, #28]	; (2010 <STACK_SIZE+0x10>)
    1ff4:	4798      	blx	r3
    1ff6:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    1ff8:	4b06      	ldr	r3, [pc, #24]	; (2014 <STACK_SIZE+0x14>)
    1ffa:	4798      	blx	r3
    1ffc:	2800      	cmp	r0, #0
    1ffe:	d003      	beq.n	2008 <STACK_SIZE+0x8>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    2000:	2280      	movs	r2, #128	; 0x80
    2002:	0552      	lsls	r2, r2, #21
    2004:	4b04      	ldr	r3, [pc, #16]	; (2018 <STACK_SIZE+0x18>)
    2006:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    2008:	0020      	movs	r0, r4
    200a:	4b04      	ldr	r3, [pc, #16]	; (201c <STACK_SIZE+0x1c>)
    200c:	4798      	blx	r3
}
    200e:	bd10      	pop	{r4, pc}
    2010:	00001f99 	.word	0x00001f99
    2014:	00002a7d 	.word	0x00002a7d
    2018:	e000ed04 	.word	0xe000ed04
    201c:	00001fa5 	.word	0x00001fa5

00002020 <vPortSetupTimerInterrupt>:
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
    2020:	2200      	movs	r2, #0
    2022:	4b04      	ldr	r3, [pc, #16]	; (2034 <vPortSetupTimerInterrupt+0x14>)
    2024:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    2026:	4a04      	ldr	r2, [pc, #16]	; (2038 <vPortSetupTimerInterrupt+0x18>)
    2028:	4b04      	ldr	r3, [pc, #16]	; (203c <vPortSetupTimerInterrupt+0x1c>)
    202a:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    202c:	2207      	movs	r2, #7
    202e:	4b04      	ldr	r3, [pc, #16]	; (2040 <vPortSetupTimerInterrupt+0x20>)
    2030:	601a      	str	r2, [r3, #0]
}
    2032:	4770      	bx	lr
    2034:	e000e018 	.word	0xe000e018
    2038:	00001f3f 	.word	0x00001f3f
    203c:	e000e014 	.word	0xe000e014
    2040:	e000e010 	.word	0xe000e010

00002044 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    2044:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    2046:	4b0a      	ldr	r3, [pc, #40]	; (2070 <xPortStartScheduler+0x2c>)
    2048:	681a      	ldr	r2, [r3, #0]
    204a:	21ff      	movs	r1, #255	; 0xff
    204c:	0409      	lsls	r1, r1, #16
    204e:	430a      	orrs	r2, r1
    2050:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    2052:	681a      	ldr	r2, [r3, #0]
    2054:	21ff      	movs	r1, #255	; 0xff
    2056:	0609      	lsls	r1, r1, #24
    2058:	430a      	orrs	r2, r1
    205a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    205c:	4b05      	ldr	r3, [pc, #20]	; (2074 <xPortStartScheduler+0x30>)
    205e:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    2060:	2200      	movs	r2, #0
    2062:	4b05      	ldr	r3, [pc, #20]	; (2078 <xPortStartScheduler+0x34>)
    2064:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    2066:	4b05      	ldr	r3, [pc, #20]	; (207c <xPortStartScheduler+0x38>)
    2068:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    206a:	4b05      	ldr	r3, [pc, #20]	; (2080 <xPortStartScheduler+0x3c>)
    206c:	4798      	blx	r3
    206e:	46c0      	nop			; (mov r8, r8)
    2070:	e000ed20 	.word	0xe000ed20
    2074:	00002021 	.word	0x00002021
    2078:	2000000c 	.word	0x2000000c
    207c:	00001f05 	.word	0x00001f05
    2080:	00001ef1 	.word	0x00001ef1

00002084 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2084:	b570      	push	{r4, r5, r6, lr}
    2086:	0004      	movs	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    2088:	0743      	lsls	r3, r0, #29
    208a:	d002      	beq.n	2092 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    208c:	2307      	movs	r3, #7
    208e:	439c      	bics	r4, r3
    2090:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
    2092:	4b10      	ldr	r3, [pc, #64]	; (20d4 <pvPortMalloc+0x50>)
    2094:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    2096:	4b10      	ldr	r3, [pc, #64]	; (20d8 <pvPortMalloc+0x54>)
    2098:	681b      	ldr	r3, [r3, #0]
    209a:	2b00      	cmp	r3, #0
    209c:	d105      	bne.n	20aa <pvPortMalloc+0x26>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    209e:	2207      	movs	r2, #7
    20a0:	4b0e      	ldr	r3, [pc, #56]	; (20dc <pvPortMalloc+0x58>)
    20a2:	3308      	adds	r3, #8
    20a4:	4393      	bics	r3, r2
    20a6:	4a0c      	ldr	r2, [pc, #48]	; (20d8 <pvPortMalloc+0x54>)
    20a8:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    20aa:	4b0d      	ldr	r3, [pc, #52]	; (20e0 <pvPortMalloc+0x5c>)
    20ac:	681b      	ldr	r3, [r3, #0]
    20ae:	18e4      	adds	r4, r4, r3
    20b0:	4a0c      	ldr	r2, [pc, #48]	; (20e4 <pvPortMalloc+0x60>)
    20b2:	4294      	cmp	r4, r2
    20b4:	d807      	bhi.n	20c6 <pvPortMalloc+0x42>
    20b6:	42a3      	cmp	r3, r4
    20b8:	d207      	bcs.n	20ca <pvPortMalloc+0x46>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    20ba:	4a07      	ldr	r2, [pc, #28]	; (20d8 <pvPortMalloc+0x54>)
    20bc:	6815      	ldr	r5, [r2, #0]
    20be:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
    20c0:	4b07      	ldr	r3, [pc, #28]	; (20e0 <pvPortMalloc+0x5c>)
    20c2:	601c      	str	r4, [r3, #0]
    20c4:	e002      	b.n	20cc <pvPortMalloc+0x48>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    20c6:	2500      	movs	r5, #0
    20c8:	e000      	b.n	20cc <pvPortMalloc+0x48>
    20ca:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    20cc:	4b06      	ldr	r3, [pc, #24]	; (20e8 <pvPortMalloc+0x64>)
    20ce:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    20d0:	0028      	movs	r0, r5
    20d2:	bd70      	pop	{r4, r5, r6, pc}
    20d4:	00002a4d 	.word	0x00002a4d
    20d8:	20003ba8 	.word	0x20003ba8
    20dc:	20000110 	.word	0x20000110
    20e0:	2000010c 	.word	0x2000010c
    20e4:	00003a8f 	.word	0x00003a8f
    20e8:	00002ba1 	.word	0x00002ba1

000020ec <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    20ec:	2800      	cmp	r0, #0
    20ee:	d001      	beq.n	20f4 <vPortFree+0x8>
    20f0:	b672      	cpsid	i
    20f2:	e7fe      	b.n	20f2 <vPortFree+0x6>
}
    20f4:	4770      	bx	lr
    20f6:	46c0      	nop			; (mov r8, r8)

000020f8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    20f8:	b570      	push	{r4, r5, r6, lr}
    20fa:	0004      	movs	r4, r0
    20fc:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    20fe:	6c02      	ldr	r2, [r0, #64]	; 0x40
    2100:	2a00      	cmp	r2, #0
    2102:	d108      	bne.n	2116 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2104:	6803      	ldr	r3, [r0, #0]
    2106:	2b00      	cmp	r3, #0
    2108:	d12c      	bne.n	2164 <prvCopyDataToQueue+0x6c>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    210a:	6840      	ldr	r0, [r0, #4]
    210c:	4b17      	ldr	r3, [pc, #92]	; (216c <prvCopyDataToQueue+0x74>)
    210e:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    2110:	2300      	movs	r3, #0
    2112:	6063      	str	r3, [r4, #4]
    2114:	e026      	b.n	2164 <prvCopyDataToQueue+0x6c>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    2116:	2d00      	cmp	r5, #0
    2118:	d10d      	bne.n	2136 <prvCopyDataToQueue+0x3e>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    211a:	6880      	ldr	r0, [r0, #8]
    211c:	4b14      	ldr	r3, [pc, #80]	; (2170 <prvCopyDataToQueue+0x78>)
    211e:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2120:	68a3      	ldr	r3, [r4, #8]
    2122:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2124:	4694      	mov	ip, r2
    2126:	4463      	add	r3, ip
    2128:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    212a:	6862      	ldr	r2, [r4, #4]
    212c:	4293      	cmp	r3, r2
    212e:	d319      	bcc.n	2164 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2130:	6823      	ldr	r3, [r4, #0]
    2132:	60a3      	str	r3, [r4, #8]
    2134:	e016      	b.n	2164 <prvCopyDataToQueue+0x6c>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2136:	68c0      	ldr	r0, [r0, #12]
    2138:	4b0d      	ldr	r3, [pc, #52]	; (2170 <prvCopyDataToQueue+0x78>)
    213a:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    213c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    213e:	425b      	negs	r3, r3
    2140:	68e2      	ldr	r2, [r4, #12]
    2142:	18d2      	adds	r2, r2, r3
    2144:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2146:	6821      	ldr	r1, [r4, #0]
    2148:	428a      	cmp	r2, r1
    214a:	d203      	bcs.n	2154 <prvCopyDataToQueue+0x5c>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    214c:	6862      	ldr	r2, [r4, #4]
    214e:	4694      	mov	ip, r2
    2150:	4463      	add	r3, ip
    2152:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    2154:	2d02      	cmp	r5, #2
    2156:	d105      	bne.n	2164 <prvCopyDataToQueue+0x6c>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2158:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    215a:	2b00      	cmp	r3, #0
    215c:	d002      	beq.n	2164 <prvCopyDataToQueue+0x6c>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    215e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2160:	3b01      	subs	r3, #1
    2162:	63a3      	str	r3, [r4, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    2164:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2166:	3301      	adds	r3, #1
    2168:	63a3      	str	r3, [r4, #56]	; 0x38
}
    216a:	bd70      	pop	{r4, r5, r6, pc}
    216c:	00003095 	.word	0x00003095
    2170:	00005e65 	.word	0x00005e65

00002174 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    2174:	b510      	push	{r4, lr}
    2176:	b082      	sub	sp, #8
    2178:	9001      	str	r0, [sp, #4]
    217a:	000a      	movs	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    217c:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    217e:	2c00      	cmp	r4, #0
    2180:	d101      	bne.n	2186 <prvNotifyQueueSetContainer+0x12>
    2182:	b672      	cpsid	i
    2184:	e7fe      	b.n	2184 <prvNotifyQueueSetContainer+0x10>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    2186:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    2188:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    218a:	4299      	cmp	r1, r3
    218c:	d301      	bcc.n	2192 <prvNotifyQueueSetContainer+0x1e>
    218e:	b672      	cpsid	i
    2190:	e7fe      	b.n	2190 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    2192:	6ba1      	ldr	r1, [r4, #56]	; 0x38
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    2194:	2000      	movs	r0, #0
		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    2196:	428b      	cmp	r3, r1
    2198:	d90d      	bls.n	21b6 <prvNotifyQueueSetContainer+0x42>
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    219a:	a901      	add	r1, sp, #4
    219c:	0020      	movs	r0, r4
    219e:	4b07      	ldr	r3, [pc, #28]	; (21bc <prvNotifyQueueSetContainer+0x48>)
    21a0:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    21a2:	2000      	movs	r0, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    21a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    21a6:	2b00      	cmp	r3, #0
    21a8:	d005      	beq.n	21b6 <prvNotifyQueueSetContainer+0x42>
			{
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    21aa:	0020      	movs	r0, r4
    21ac:	3024      	adds	r0, #36	; 0x24
    21ae:	4b04      	ldr	r3, [pc, #16]	; (21c0 <prvNotifyQueueSetContainer+0x4c>)
    21b0:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    21b2:	1e43      	subs	r3, r0, #1
    21b4:	4198      	sbcs	r0, r3
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    21b6:	b002      	add	sp, #8
    21b8:	bd10      	pop	{r4, pc}
    21ba:	46c0      	nop			; (mov r8, r8)
    21bc:	000020f9 	.word	0x000020f9
    21c0:	00002ec5 	.word	0x00002ec5

000021c4 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    21c4:	b570      	push	{r4, r5, r6, lr}
    21c6:	000c      	movs	r4, r1
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    21c8:	6801      	ldr	r1, [r0, #0]
    21ca:	2900      	cmp	r1, #0
    21cc:	d00b      	beq.n	21e6 <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    21ce:	6c02      	ldr	r2, [r0, #64]	; 0x40
    21d0:	68c3      	ldr	r3, [r0, #12]
    21d2:	189b      	adds	r3, r3, r2
    21d4:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    21d6:	6845      	ldr	r5, [r0, #4]
    21d8:	42ab      	cmp	r3, r5
    21da:	d300      	bcc.n	21de <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    21dc:	60c1      	str	r1, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    21de:	68c1      	ldr	r1, [r0, #12]
    21e0:	0020      	movs	r0, r4
    21e2:	4b01      	ldr	r3, [pc, #4]	; (21e8 <prvCopyDataFromQueue+0x24>)
    21e4:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    21e6:	bd70      	pop	{r4, r5, r6, pc}
    21e8:	00005e65 	.word	0x00005e65

000021ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    21ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21ee:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    21f0:	4b24      	ldr	r3, [pc, #144]	; (2284 <prvUnlockQueue+0x98>)
    21f2:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    21f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    21f6:	2b00      	cmp	r3, #0
    21f8:	dd1c      	ble.n	2234 <prvUnlockQueue+0x48>
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    21fa:	4d23      	ldr	r5, [pc, #140]	; (2288 <prvUnlockQueue+0x9c>)
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    21fc:	4e23      	ldr	r6, [pc, #140]	; (228c <prvUnlockQueue+0xa0>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    21fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    2200:	2b00      	cmp	r3, #0
    2202:	d007      	beq.n	2214 <prvUnlockQueue+0x28>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    2204:	2100      	movs	r1, #0
    2206:	0020      	movs	r0, r4
    2208:	47a8      	blx	r5
    220a:	2801      	cmp	r0, #1
    220c:	d10c      	bne.n	2228 <prvUnlockQueue+0x3c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    220e:	4b20      	ldr	r3, [pc, #128]	; (2290 <prvUnlockQueue+0xa4>)
    2210:	4798      	blx	r3
    2212:	e009      	b.n	2228 <prvUnlockQueue+0x3c>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2214:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2216:	2b00      	cmp	r3, #0
    2218:	d00c      	beq.n	2234 <prvUnlockQueue+0x48>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    221a:	0020      	movs	r0, r4
    221c:	3024      	adds	r0, #36	; 0x24
    221e:	47b0      	blx	r6
    2220:	2800      	cmp	r0, #0
    2222:	d001      	beq.n	2228 <prvUnlockQueue+0x3c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    2224:	4b1a      	ldr	r3, [pc, #104]	; (2290 <prvUnlockQueue+0xa4>)
    2226:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    2228:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    222a:	3b01      	subs	r3, #1
    222c:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    222e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2230:	2b00      	cmp	r3, #0
    2232:	dce4      	bgt.n	21fe <prvUnlockQueue+0x12>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    2234:	2301      	movs	r3, #1
    2236:	425b      	negs	r3, r3
    2238:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    223a:	4b16      	ldr	r3, [pc, #88]	; (2294 <prvUnlockQueue+0xa8>)
    223c:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    223e:	4b11      	ldr	r3, [pc, #68]	; (2284 <prvUnlockQueue+0x98>)
    2240:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2242:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2244:	2b00      	cmp	r3, #0
    2246:	dd16      	ble.n	2276 <prvUnlockQueue+0x8a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2248:	6923      	ldr	r3, [r4, #16]
    224a:	2b00      	cmp	r3, #0
    224c:	d104      	bne.n	2258 <prvUnlockQueue+0x6c>
    224e:	e012      	b.n	2276 <prvUnlockQueue+0x8a>
    2250:	6923      	ldr	r3, [r4, #16]
    2252:	2b00      	cmp	r3, #0
    2254:	d104      	bne.n	2260 <prvUnlockQueue+0x74>
    2256:	e00e      	b.n	2276 <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2258:	0025      	movs	r5, r4
    225a:	3510      	adds	r5, #16
    225c:	4f0b      	ldr	r7, [pc, #44]	; (228c <prvUnlockQueue+0xa0>)
				{
					vTaskMissedYield();
    225e:	4e0c      	ldr	r6, [pc, #48]	; (2290 <prvUnlockQueue+0xa4>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2260:	0028      	movs	r0, r5
    2262:	47b8      	blx	r7
    2264:	2800      	cmp	r0, #0
    2266:	d000      	beq.n	226a <prvUnlockQueue+0x7e>
				{
					vTaskMissedYield();
    2268:	47b0      	blx	r6
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    226a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    226c:	3b01      	subs	r3, #1
    226e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2270:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2272:	2b00      	cmp	r3, #0
    2274:	dcec      	bgt.n	2250 <prvUnlockQueue+0x64>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    2276:	2301      	movs	r3, #1
    2278:	425b      	negs	r3, r3
    227a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    227c:	4b05      	ldr	r3, [pc, #20]	; (2294 <prvUnlockQueue+0xa8>)
    227e:	4798      	blx	r3
}
    2280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2282:	46c0      	nop			; (mov r8, r8)
    2284:	00001f61 	.word	0x00001f61
    2288:	00002175 	.word	0x00002175
    228c:	00002ec5 	.word	0x00002ec5
    2290:	00002fdd 	.word	0x00002fdd
    2294:	00001f79 	.word	0x00001f79

00002298 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    2298:	b570      	push	{r4, r5, r6, lr}
    229a:	0004      	movs	r4, r0
    229c:	000d      	movs	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    229e:	2800      	cmp	r0, #0
    22a0:	d101      	bne.n	22a6 <xQueueGenericReset+0xe>
    22a2:	b672      	cpsid	i
    22a4:	e7fe      	b.n	22a4 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
    22a6:	4b15      	ldr	r3, [pc, #84]	; (22fc <xQueueGenericReset+0x64>)
    22a8:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    22aa:	6822      	ldr	r2, [r4, #0]
    22ac:	6c21      	ldr	r1, [r4, #64]	; 0x40
    22ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    22b0:	434b      	muls	r3, r1
    22b2:	18d0      	adds	r0, r2, r3
    22b4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    22b6:	2000      	movs	r0, #0
    22b8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    22ba:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    22bc:	1a5b      	subs	r3, r3, r1
    22be:	18d3      	adds	r3, r2, r3
    22c0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    22c2:	2301      	movs	r3, #1
    22c4:	425b      	negs	r3, r3
    22c6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    22c8:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
    22ca:	2d00      	cmp	r5, #0
    22cc:	d10b      	bne.n	22e6 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    22ce:	6923      	ldr	r3, [r4, #16]
    22d0:	2b00      	cmp	r3, #0
    22d2:	d00f      	beq.n	22f4 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    22d4:	0020      	movs	r0, r4
    22d6:	3010      	adds	r0, #16
    22d8:	4b09      	ldr	r3, [pc, #36]	; (2300 <xQueueGenericReset+0x68>)
    22da:	4798      	blx	r3
    22dc:	2801      	cmp	r0, #1
    22de:	d109      	bne.n	22f4 <xQueueGenericReset+0x5c>
				{
					queueYIELD_IF_USING_PREEMPTION();
    22e0:	4b08      	ldr	r3, [pc, #32]	; (2304 <xQueueGenericReset+0x6c>)
    22e2:	4798      	blx	r3
    22e4:	e006      	b.n	22f4 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    22e6:	0020      	movs	r0, r4
    22e8:	3010      	adds	r0, #16
    22ea:	4d07      	ldr	r5, [pc, #28]	; (2308 <xQueueGenericReset+0x70>)
    22ec:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    22ee:	0020      	movs	r0, r4
    22f0:	3024      	adds	r0, #36	; 0x24
    22f2:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
    22f4:	4b05      	ldr	r3, [pc, #20]	; (230c <xQueueGenericReset+0x74>)
    22f6:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    22f8:	2001      	movs	r0, #1
    22fa:	bd70      	pop	{r4, r5, r6, pc}
    22fc:	00001f61 	.word	0x00001f61
    2300:	00002ec5 	.word	0x00002ec5
    2304:	00001f49 	.word	0x00001f49
    2308:	00001e65 	.word	0x00001e65
    230c:	00001f79 	.word	0x00001f79

00002310 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    2310:	b570      	push	{r4, r5, r6, lr}
    2312:	0005      	movs	r5, r0
    2314:	000e      	movs	r6, r1
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    2316:	2800      	cmp	r0, #0
    2318:	d011      	beq.n	233e <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    231a:	2050      	movs	r0, #80	; 0x50
    231c:	4b0e      	ldr	r3, [pc, #56]	; (2358 <xQueueGenericCreate+0x48>)
    231e:	4798      	blx	r3
    2320:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    2322:	d00c      	beq.n	233e <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    2324:	0030      	movs	r0, r6
    2326:	4368      	muls	r0, r5
    2328:	3001      	adds	r0, #1
    232a:	4b0b      	ldr	r3, [pc, #44]	; (2358 <xQueueGenericCreate+0x48>)
    232c:	4798      	blx	r3
    232e:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
    2330:	2800      	cmp	r0, #0
    2332:	d106      	bne.n	2342 <xQueueGenericCreate+0x32>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    2334:	0020      	movs	r0, r4
    2336:	4b09      	ldr	r3, [pc, #36]	; (235c <xQueueGenericCreate+0x4c>)
    2338:	4798      	blx	r3
    233a:	e000      	b.n	233e <xQueueGenericCreate+0x2e>
    233c:	e7fe      	b.n	233c <xQueueGenericCreate+0x2c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    233e:	b672      	cpsid	i
    2340:	e7fc      	b.n	233c <xQueueGenericCreate+0x2c>
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    2342:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    2344:	6426      	str	r6, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    2346:	2101      	movs	r1, #1
    2348:	0020      	movs	r0, r4
    234a:	4b05      	ldr	r3, [pc, #20]	; (2360 <xQueueGenericCreate+0x50>)
    234c:	4798      	blx	r3
				}
				#endif /* configUSE_TRACE_FACILITY */

				#if( configUSE_QUEUE_SETS == 1 )
				{
					pxNewQueue->pxQueueSetContainer = NULL;
    234e:	2300      	movs	r3, #0
    2350:	64e3      	str	r3, [r4, #76]	; 0x4c
	}

	configASSERT( xReturn );

	return xReturn;
}
    2352:	0020      	movs	r0, r4
    2354:	bd70      	pop	{r4, r5, r6, pc}
    2356:	46c0      	nop			; (mov r8, r8)
    2358:	00002085 	.word	0x00002085
    235c:	000020ed 	.word	0x000020ed
    2360:	00002299 	.word	0x00002299

00002364 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    2364:	b5f0      	push	{r4, r5, r6, r7, lr}
    2366:	4657      	mov	r7, sl
    2368:	464e      	mov	r6, r9
    236a:	4645      	mov	r5, r8
    236c:	b4e0      	push	{r5, r6, r7}
    236e:	b084      	sub	sp, #16
    2370:	0004      	movs	r4, r0
    2372:	000f      	movs	r7, r1
    2374:	9201      	str	r2, [sp, #4]
    2376:	001d      	movs	r5, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    2378:	2800      	cmp	r0, #0
    237a:	d101      	bne.n	2380 <xQueueGenericSend+0x1c>
    237c:	b672      	cpsid	i
    237e:	e7fe      	b.n	237e <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2380:	2900      	cmp	r1, #0
    2382:	d104      	bne.n	238e <xQueueGenericSend+0x2a>
    2384:	6c03      	ldr	r3, [r0, #64]	; 0x40
    2386:	2b00      	cmp	r3, #0
    2388:	d001      	beq.n	238e <xQueueGenericSend+0x2a>
    238a:	b672      	cpsid	i
    238c:	e7fe      	b.n	238c <xQueueGenericSend+0x28>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    238e:	2d02      	cmp	r5, #2
    2390:	d104      	bne.n	239c <xQueueGenericSend+0x38>
    2392:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2394:	2b01      	cmp	r3, #1
    2396:	d001      	beq.n	239c <xQueueGenericSend+0x38>
    2398:	b672      	cpsid	i
    239a:	e7fe      	b.n	239a <xQueueGenericSend+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    239c:	4b42      	ldr	r3, [pc, #264]	; (24a8 <xQueueGenericSend+0x144>)
    239e:	4798      	blx	r3
    23a0:	2800      	cmp	r0, #0
    23a2:	d104      	bne.n	23ae <xQueueGenericSend+0x4a>
    23a4:	9b01      	ldr	r3, [sp, #4]
    23a6:	2b00      	cmp	r3, #0
    23a8:	d003      	beq.n	23b2 <xQueueGenericSend+0x4e>
    23aa:	b672      	cpsid	i
    23ac:	e7fe      	b.n	23ac <xQueueGenericSend+0x48>
    23ae:	2600      	movs	r6, #0
    23b0:	e000      	b.n	23b4 <xQueueGenericSend+0x50>
    23b2:	2600      	movs	r6, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    23b4:	4b3d      	ldr	r3, [pc, #244]	; (24ac <xQueueGenericSend+0x148>)
    23b6:	4698      	mov	r8, r3
    23b8:	47c0      	blx	r8
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    23ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    23bc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    23be:	4293      	cmp	r3, r2
    23c0:	d301      	bcc.n	23c6 <xQueueGenericSend+0x62>
    23c2:	2d02      	cmp	r5, #2
    23c4:	d11f      	bne.n	2406 <xQueueGenericSend+0xa2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    23c6:	002a      	movs	r2, r5
    23c8:	0039      	movs	r1, r7
    23ca:	0020      	movs	r0, r4
    23cc:	4b38      	ldr	r3, [pc, #224]	; (24b0 <xQueueGenericSend+0x14c>)
    23ce:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    23d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    23d2:	2b00      	cmp	r3, #0
    23d4:	d008      	beq.n	23e8 <xQueueGenericSend+0x84>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    23d6:	0029      	movs	r1, r5
    23d8:	0020      	movs	r0, r4
    23da:	4b36      	ldr	r3, [pc, #216]	; (24b4 <xQueueGenericSend+0x150>)
    23dc:	4798      	blx	r3
    23de:	2801      	cmp	r0, #1
    23e0:	d10d      	bne.n	23fe <xQueueGenericSend+0x9a>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    23e2:	4b35      	ldr	r3, [pc, #212]	; (24b8 <xQueueGenericSend+0x154>)
    23e4:	4798      	blx	r3
    23e6:	e00a      	b.n	23fe <xQueueGenericSend+0x9a>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    23e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    23ea:	2b00      	cmp	r3, #0
    23ec:	d007      	beq.n	23fe <xQueueGenericSend+0x9a>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    23ee:	0020      	movs	r0, r4
    23f0:	3024      	adds	r0, #36	; 0x24
    23f2:	4b32      	ldr	r3, [pc, #200]	; (24bc <xQueueGenericSend+0x158>)
    23f4:	4798      	blx	r3
    23f6:	2801      	cmp	r0, #1
    23f8:	d101      	bne.n	23fe <xQueueGenericSend+0x9a>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    23fa:	4b2f      	ldr	r3, [pc, #188]	; (24b8 <xQueueGenericSend+0x154>)
    23fc:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    23fe:	4b30      	ldr	r3, [pc, #192]	; (24c0 <xQueueGenericSend+0x15c>)
    2400:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    2402:	2001      	movs	r0, #1
    2404:	e049      	b.n	249a <xQueueGenericSend+0x136>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2406:	9b01      	ldr	r3, [sp, #4]
    2408:	2b00      	cmp	r3, #0
    240a:	d103      	bne.n	2414 <xQueueGenericSend+0xb0>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    240c:	4b2c      	ldr	r3, [pc, #176]	; (24c0 <xQueueGenericSend+0x15c>)
    240e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    2410:	2000      	movs	r0, #0
    2412:	e042      	b.n	249a <xQueueGenericSend+0x136>
				}
				else if( xEntryTimeSet == pdFALSE )
    2414:	2e00      	cmp	r6, #0
    2416:	d103      	bne.n	2420 <xQueueGenericSend+0xbc>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2418:	a802      	add	r0, sp, #8
    241a:	4b2a      	ldr	r3, [pc, #168]	; (24c4 <xQueueGenericSend+0x160>)
    241c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    241e:	3601      	adds	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2420:	4b27      	ldr	r3, [pc, #156]	; (24c0 <xQueueGenericSend+0x15c>)
    2422:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2424:	4b28      	ldr	r3, [pc, #160]	; (24c8 <xQueueGenericSend+0x164>)
    2426:	4798      	blx	r3
		prvLockQueue( pxQueue );
    2428:	4b20      	ldr	r3, [pc, #128]	; (24ac <xQueueGenericSend+0x148>)
    242a:	4798      	blx	r3
    242c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    242e:	3301      	adds	r3, #1
    2430:	d101      	bne.n	2436 <xQueueGenericSend+0xd2>
    2432:	2300      	movs	r3, #0
    2434:	6463      	str	r3, [r4, #68]	; 0x44
    2436:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2438:	3301      	adds	r3, #1
    243a:	d101      	bne.n	2440 <xQueueGenericSend+0xdc>
    243c:	2300      	movs	r3, #0
    243e:	64a3      	str	r3, [r4, #72]	; 0x48
    2440:	4b1f      	ldr	r3, [pc, #124]	; (24c0 <xQueueGenericSend+0x15c>)
    2442:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2444:	a901      	add	r1, sp, #4
    2446:	a802      	add	r0, sp, #8
    2448:	4b20      	ldr	r3, [pc, #128]	; (24cc <xQueueGenericSend+0x168>)
    244a:	4798      	blx	r3
    244c:	2800      	cmp	r0, #0
    244e:	d11e      	bne.n	248e <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2450:	4b16      	ldr	r3, [pc, #88]	; (24ac <xQueueGenericSend+0x148>)
    2452:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2454:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2456:	469a      	mov	sl, r3
    2458:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    245a:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    245c:	4b18      	ldr	r3, [pc, #96]	; (24c0 <xQueueGenericSend+0x15c>)
    245e:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2460:	45ca      	cmp	sl, r9
    2462:	d10e      	bne.n	2482 <xQueueGenericSend+0x11e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2464:	0020      	movs	r0, r4
    2466:	3010      	adds	r0, #16
    2468:	9901      	ldr	r1, [sp, #4]
    246a:	4b19      	ldr	r3, [pc, #100]	; (24d0 <xQueueGenericSend+0x16c>)
    246c:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    246e:	0020      	movs	r0, r4
    2470:	4b18      	ldr	r3, [pc, #96]	; (24d4 <xQueueGenericSend+0x170>)
    2472:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2474:	4b18      	ldr	r3, [pc, #96]	; (24d8 <xQueueGenericSend+0x174>)
    2476:	4798      	blx	r3
    2478:	2800      	cmp	r0, #0
    247a:	d19d      	bne.n	23b8 <xQueueGenericSend+0x54>
				{
					portYIELD_WITHIN_API();
    247c:	4b0e      	ldr	r3, [pc, #56]	; (24b8 <xQueueGenericSend+0x154>)
    247e:	4798      	blx	r3
    2480:	e79a      	b.n	23b8 <xQueueGenericSend+0x54>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2482:	0020      	movs	r0, r4
    2484:	4b13      	ldr	r3, [pc, #76]	; (24d4 <xQueueGenericSend+0x170>)
    2486:	4798      	blx	r3
				( void ) xTaskResumeAll();
    2488:	4b13      	ldr	r3, [pc, #76]	; (24d8 <xQueueGenericSend+0x174>)
    248a:	4798      	blx	r3
    248c:	e794      	b.n	23b8 <xQueueGenericSend+0x54>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    248e:	0020      	movs	r0, r4
    2490:	4b10      	ldr	r3, [pc, #64]	; (24d4 <xQueueGenericSend+0x170>)
    2492:	4798      	blx	r3
			( void ) xTaskResumeAll();
    2494:	4b10      	ldr	r3, [pc, #64]	; (24d8 <xQueueGenericSend+0x174>)
    2496:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2498:	2000      	movs	r0, #0
		}
	}
}
    249a:	b004      	add	sp, #16
    249c:	bc1c      	pop	{r2, r3, r4}
    249e:	4690      	mov	r8, r2
    24a0:	4699      	mov	r9, r3
    24a2:	46a2      	mov	sl, r4
    24a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24a6:	46c0      	nop			; (mov r8, r8)
    24a8:	00002ff5 	.word	0x00002ff5
    24ac:	00001f61 	.word	0x00001f61
    24b0:	000020f9 	.word	0x000020f9
    24b4:	00002175 	.word	0x00002175
    24b8:	00001f49 	.word	0x00001f49
    24bc:	00002ec5 	.word	0x00002ec5
    24c0:	00001f79 	.word	0x00001f79
    24c4:	00002f4d 	.word	0x00002f4d
    24c8:	00002a4d 	.word	0x00002a4d
    24cc:	00002f6d 	.word	0x00002f6d
    24d0:	00002e2d 	.word	0x00002e2d
    24d4:	000021ed 	.word	0x000021ed
    24d8:	00002ba1 	.word	0x00002ba1

000024dc <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    24dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    24de:	b083      	sub	sp, #12
    24e0:	0004      	movs	r4, r0
    24e2:	000f      	movs	r7, r1
    24e4:	0016      	movs	r6, r2
    24e6:	001d      	movs	r5, r3
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    24e8:	2800      	cmp	r0, #0
    24ea:	d101      	bne.n	24f0 <xQueueGenericSendFromISR+0x14>
    24ec:	b672      	cpsid	i
    24ee:	e7fe      	b.n	24ee <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    24f0:	2900      	cmp	r1, #0
    24f2:	d104      	bne.n	24fe <xQueueGenericSendFromISR+0x22>
    24f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
    24f6:	2b00      	cmp	r3, #0
    24f8:	d001      	beq.n	24fe <xQueueGenericSendFromISR+0x22>
    24fa:	b672      	cpsid	i
    24fc:	e7fe      	b.n	24fc <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    24fe:	2d02      	cmp	r5, #2
    2500:	d138      	bne.n	2574 <xQueueGenericSendFromISR+0x98>
    2502:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2504:	2b01      	cmp	r3, #1
    2506:	d030      	beq.n	256a <xQueueGenericSendFromISR+0x8e>
    2508:	b672      	cpsid	i
    250a:	e7fe      	b.n	250a <xQueueGenericSendFromISR+0x2e>
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    250c:	002a      	movs	r2, r5
    250e:	0039      	movs	r1, r7
    2510:	0020      	movs	r0, r4
    2512:	4b1f      	ldr	r3, [pc, #124]	; (2590 <xQueueGenericSendFromISR+0xb4>)
    2514:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2516:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2518:	3301      	adds	r3, #1
    251a:	d11d      	bne.n	2558 <xQueueGenericSendFromISR+0x7c>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    251c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    251e:	2b00      	cmp	r3, #0
    2520:	d00b      	beq.n	253a <xQueueGenericSendFromISR+0x5e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    2522:	0029      	movs	r1, r5
    2524:	0020      	movs	r0, r4
    2526:	4b1b      	ldr	r3, [pc, #108]	; (2594 <xQueueGenericSendFromISR+0xb8>)
    2528:	4798      	blx	r3
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    252a:	2501      	movs	r5, #1
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    252c:	2801      	cmp	r0, #1
    252e:	d129      	bne.n	2584 <xQueueGenericSendFromISR+0xa8>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2530:	2e00      	cmp	r6, #0
    2532:	d016      	beq.n	2562 <xQueueGenericSendFromISR+0x86>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2534:	2301      	movs	r3, #1
    2536:	6033      	str	r3, [r6, #0]
    2538:	e024      	b.n	2584 <xQueueGenericSendFromISR+0xa8>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    253a:	2501      	movs	r5, #1
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    253c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    253e:	2b00      	cmp	r3, #0
    2540:	d020      	beq.n	2584 <xQueueGenericSendFromISR+0xa8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2542:	0020      	movs	r0, r4
    2544:	3024      	adds	r0, #36	; 0x24
    2546:	4b14      	ldr	r3, [pc, #80]	; (2598 <xQueueGenericSendFromISR+0xbc>)
    2548:	4798      	blx	r3
    254a:	2800      	cmp	r0, #0
    254c:	d01a      	beq.n	2584 <xQueueGenericSendFromISR+0xa8>
							{
								/* The task waiting has a higher priority so record that a
								context	switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    254e:	2e00      	cmp	r6, #0
    2550:	d009      	beq.n	2566 <xQueueGenericSendFromISR+0x8a>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    2552:	2301      	movs	r3, #1
    2554:	6033      	str	r3, [r6, #0]
    2556:	e015      	b.n	2584 <xQueueGenericSendFromISR+0xa8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2558:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    255a:	3301      	adds	r3, #1
    255c:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
    255e:	2501      	movs	r5, #1
    2560:	e010      	b.n	2584 <xQueueGenericSendFromISR+0xa8>
    2562:	2501      	movs	r5, #1
    2564:	e00e      	b.n	2584 <xQueueGenericSendFromISR+0xa8>
    2566:	2501      	movs	r5, #1
    2568:	e00c      	b.n	2584 <xQueueGenericSendFromISR+0xa8>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    256a:	4b0c      	ldr	r3, [pc, #48]	; (259c <xQueueGenericSendFromISR+0xc0>)
    256c:	4798      	blx	r3
    256e:	9001      	str	r0, [sp, #4]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2570:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2572:	e7cb      	b.n	250c <xQueueGenericSendFromISR+0x30>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2574:	4b09      	ldr	r3, [pc, #36]	; (259c <xQueueGenericSendFromISR+0xc0>)
    2576:	4798      	blx	r3
    2578:	9001      	str	r0, [sp, #4]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    257a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    257c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    257e:	429a      	cmp	r2, r3
    2580:	d8c4      	bhi.n	250c <xQueueGenericSendFromISR+0x30>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2582:	2500      	movs	r5, #0
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    2584:	9801      	ldr	r0, [sp, #4]
    2586:	4b06      	ldr	r3, [pc, #24]	; (25a0 <xQueueGenericSendFromISR+0xc4>)
    2588:	4798      	blx	r3

	return xReturn;
}
    258a:	0028      	movs	r0, r5
    258c:	b003      	add	sp, #12
    258e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2590:	000020f9 	.word	0x000020f9
    2594:	00002175 	.word	0x00002175
    2598:	00002ec5 	.word	0x00002ec5
    259c:	00001f99 	.word	0x00001f99
    25a0:	00001fa5 	.word	0x00001fa5

000025a4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    25a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25a6:	464f      	mov	r7, r9
    25a8:	4646      	mov	r6, r8
    25aa:	b4c0      	push	{r6, r7}
    25ac:	b085      	sub	sp, #20
    25ae:	0004      	movs	r4, r0
    25b0:	000e      	movs	r6, r1
    25b2:	9201      	str	r2, [sp, #4]
    25b4:	001f      	movs	r7, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    25b6:	2800      	cmp	r0, #0
    25b8:	d101      	bne.n	25be <xQueueGenericReceive+0x1a>
    25ba:	b672      	cpsid	i
    25bc:	e7fe      	b.n	25bc <xQueueGenericReceive+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    25be:	2900      	cmp	r1, #0
    25c0:	d104      	bne.n	25cc <xQueueGenericReceive+0x28>
    25c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
    25c4:	2b00      	cmp	r3, #0
    25c6:	d001      	beq.n	25cc <xQueueGenericReceive+0x28>
    25c8:	b672      	cpsid	i
    25ca:	e7fe      	b.n	25ca <xQueueGenericReceive+0x26>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    25cc:	4b4a      	ldr	r3, [pc, #296]	; (26f8 <xQueueGenericReceive+0x154>)
    25ce:	4798      	blx	r3
    25d0:	2800      	cmp	r0, #0
    25d2:	d104      	bne.n	25de <xQueueGenericReceive+0x3a>
    25d4:	9b01      	ldr	r3, [sp, #4]
    25d6:	2b00      	cmp	r3, #0
    25d8:	d003      	beq.n	25e2 <xQueueGenericReceive+0x3e>
    25da:	b672      	cpsid	i
    25dc:	e7fe      	b.n	25dc <xQueueGenericReceive+0x38>
    25de:	2500      	movs	r5, #0
    25e0:	e000      	b.n	25e4 <xQueueGenericReceive+0x40>
    25e2:	2500      	movs	r5, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    25e4:	4b45      	ldr	r3, [pc, #276]	; (26fc <xQueueGenericReceive+0x158>)
    25e6:	4698      	mov	r8, r3
    25e8:	47c0      	blx	r8
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    25ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    25ec:	2b00      	cmp	r3, #0
    25ee:	d02b      	beq.n	2648 <xQueueGenericReceive+0xa4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    25f0:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    25f2:	0031      	movs	r1, r6
    25f4:	0020      	movs	r0, r4
    25f6:	4b42      	ldr	r3, [pc, #264]	; (2700 <xQueueGenericReceive+0x15c>)
    25f8:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    25fa:	2f00      	cmp	r7, #0
    25fc:	d114      	bne.n	2628 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    25fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2600:	3b01      	subs	r3, #1
    2602:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2604:	6823      	ldr	r3, [r4, #0]
    2606:	2b00      	cmp	r3, #0
    2608:	d102      	bne.n	2610 <xQueueGenericReceive+0x6c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    260a:	4b3e      	ldr	r3, [pc, #248]	; (2704 <xQueueGenericReceive+0x160>)
    260c:	4798      	blx	r3
    260e:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2610:	6923      	ldr	r3, [r4, #16]
    2612:	2b00      	cmp	r3, #0
    2614:	d014      	beq.n	2640 <xQueueGenericReceive+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2616:	0020      	movs	r0, r4
    2618:	3010      	adds	r0, #16
    261a:	4b3b      	ldr	r3, [pc, #236]	; (2708 <xQueueGenericReceive+0x164>)
    261c:	4798      	blx	r3
    261e:	2801      	cmp	r0, #1
    2620:	d10e      	bne.n	2640 <xQueueGenericReceive+0x9c>
						{
							queueYIELD_IF_USING_PREEMPTION();
    2622:	4b3a      	ldr	r3, [pc, #232]	; (270c <xQueueGenericReceive+0x168>)
    2624:	4798      	blx	r3
    2626:	e00b      	b.n	2640 <xQueueGenericReceive+0x9c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    2628:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    262a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    262c:	2b00      	cmp	r3, #0
    262e:	d007      	beq.n	2640 <xQueueGenericReceive+0x9c>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2630:	0020      	movs	r0, r4
    2632:	3024      	adds	r0, #36	; 0x24
    2634:	4b34      	ldr	r3, [pc, #208]	; (2708 <xQueueGenericReceive+0x164>)
    2636:	4798      	blx	r3
    2638:	2800      	cmp	r0, #0
    263a:	d001      	beq.n	2640 <xQueueGenericReceive+0x9c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    263c:	4b33      	ldr	r3, [pc, #204]	; (270c <xQueueGenericReceive+0x168>)
    263e:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    2640:	4b33      	ldr	r3, [pc, #204]	; (2710 <xQueueGenericReceive+0x16c>)
    2642:	4798      	blx	r3
				return pdPASS;
    2644:	2001      	movs	r0, #1
    2646:	e052      	b.n	26ee <xQueueGenericReceive+0x14a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2648:	9b01      	ldr	r3, [sp, #4]
    264a:	2b00      	cmp	r3, #0
    264c:	d103      	bne.n	2656 <xQueueGenericReceive+0xb2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    264e:	4b30      	ldr	r3, [pc, #192]	; (2710 <xQueueGenericReceive+0x16c>)
    2650:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2652:	2000      	movs	r0, #0
    2654:	e04b      	b.n	26ee <xQueueGenericReceive+0x14a>
				}
				else if( xEntryTimeSet == pdFALSE )
    2656:	2d00      	cmp	r5, #0
    2658:	d103      	bne.n	2662 <xQueueGenericReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    265a:	a802      	add	r0, sp, #8
    265c:	4b2d      	ldr	r3, [pc, #180]	; (2714 <xQueueGenericReceive+0x170>)
    265e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    2660:	3501      	adds	r5, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2662:	4b2b      	ldr	r3, [pc, #172]	; (2710 <xQueueGenericReceive+0x16c>)
    2664:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2666:	4b2c      	ldr	r3, [pc, #176]	; (2718 <xQueueGenericReceive+0x174>)
    2668:	4798      	blx	r3
		prvLockQueue( pxQueue );
    266a:	4b24      	ldr	r3, [pc, #144]	; (26fc <xQueueGenericReceive+0x158>)
    266c:	4798      	blx	r3
    266e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2670:	3301      	adds	r3, #1
    2672:	d101      	bne.n	2678 <xQueueGenericReceive+0xd4>
    2674:	2300      	movs	r3, #0
    2676:	6463      	str	r3, [r4, #68]	; 0x44
    2678:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    267a:	3301      	adds	r3, #1
    267c:	d101      	bne.n	2682 <xQueueGenericReceive+0xde>
    267e:	2300      	movs	r3, #0
    2680:	64a3      	str	r3, [r4, #72]	; 0x48
    2682:	4b23      	ldr	r3, [pc, #140]	; (2710 <xQueueGenericReceive+0x16c>)
    2684:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2686:	a901      	add	r1, sp, #4
    2688:	a802      	add	r0, sp, #8
    268a:	4b24      	ldr	r3, [pc, #144]	; (271c <xQueueGenericReceive+0x178>)
    268c:	4798      	blx	r3
    268e:	2800      	cmp	r0, #0
    2690:	d127      	bne.n	26e2 <xQueueGenericReceive+0x13e>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2692:	4b1a      	ldr	r3, [pc, #104]	; (26fc <xQueueGenericReceive+0x158>)
    2694:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    2696:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2698:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    269a:	4b1d      	ldr	r3, [pc, #116]	; (2710 <xQueueGenericReceive+0x16c>)
    269c:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    269e:	464b      	mov	r3, r9
    26a0:	2b00      	cmp	r3, #0
    26a2:	d118      	bne.n	26d6 <xQueueGenericReceive+0x132>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    26a4:	6823      	ldr	r3, [r4, #0]
    26a6:	2b00      	cmp	r3, #0
    26a8:	d106      	bne.n	26b8 <xQueueGenericReceive+0x114>
					{
						taskENTER_CRITICAL();
    26aa:	4b14      	ldr	r3, [pc, #80]	; (26fc <xQueueGenericReceive+0x158>)
    26ac:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    26ae:	6860      	ldr	r0, [r4, #4]
    26b0:	4b1b      	ldr	r3, [pc, #108]	; (2720 <xQueueGenericReceive+0x17c>)
    26b2:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    26b4:	4b16      	ldr	r3, [pc, #88]	; (2710 <xQueueGenericReceive+0x16c>)
    26b6:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    26b8:	0020      	movs	r0, r4
    26ba:	3024      	adds	r0, #36	; 0x24
    26bc:	9901      	ldr	r1, [sp, #4]
    26be:	4b19      	ldr	r3, [pc, #100]	; (2724 <xQueueGenericReceive+0x180>)
    26c0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    26c2:	0020      	movs	r0, r4
    26c4:	4b18      	ldr	r3, [pc, #96]	; (2728 <xQueueGenericReceive+0x184>)
    26c6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    26c8:	4b18      	ldr	r3, [pc, #96]	; (272c <xQueueGenericReceive+0x188>)
    26ca:	4798      	blx	r3
    26cc:	2800      	cmp	r0, #0
    26ce:	d18b      	bne.n	25e8 <xQueueGenericReceive+0x44>
				{
					portYIELD_WITHIN_API();
    26d0:	4b0e      	ldr	r3, [pc, #56]	; (270c <xQueueGenericReceive+0x168>)
    26d2:	4798      	blx	r3
    26d4:	e788      	b.n	25e8 <xQueueGenericReceive+0x44>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    26d6:	0020      	movs	r0, r4
    26d8:	4b13      	ldr	r3, [pc, #76]	; (2728 <xQueueGenericReceive+0x184>)
    26da:	4798      	blx	r3
				( void ) xTaskResumeAll();
    26dc:	4b13      	ldr	r3, [pc, #76]	; (272c <xQueueGenericReceive+0x188>)
    26de:	4798      	blx	r3
    26e0:	e782      	b.n	25e8 <xQueueGenericReceive+0x44>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    26e2:	0020      	movs	r0, r4
    26e4:	4b10      	ldr	r3, [pc, #64]	; (2728 <xQueueGenericReceive+0x184>)
    26e6:	4798      	blx	r3
			( void ) xTaskResumeAll();
    26e8:	4b10      	ldr	r3, [pc, #64]	; (272c <xQueueGenericReceive+0x188>)
    26ea:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    26ec:	2000      	movs	r0, #0
		}
	}
}
    26ee:	b005      	add	sp, #20
    26f0:	bc0c      	pop	{r2, r3}
    26f2:	4690      	mov	r8, r2
    26f4:	4699      	mov	r9, r3
    26f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26f8:	00002ff5 	.word	0x00002ff5
    26fc:	00001f61 	.word	0x00001f61
    2700:	000021c5 	.word	0x000021c5
    2704:	00002fe9 	.word	0x00002fe9
    2708:	00002ec5 	.word	0x00002ec5
    270c:	00001f49 	.word	0x00001f49
    2710:	00001f79 	.word	0x00001f79
    2714:	00002f4d 	.word	0x00002f4d
    2718:	00002a4d 	.word	0x00002a4d
    271c:	00002f6d 	.word	0x00002f6d
    2720:	00003015 	.word	0x00003015
    2724:	00002e2d 	.word	0x00002e2d
    2728:	000021ed 	.word	0x000021ed
    272c:	00002ba1 	.word	0x00002ba1

00002730 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    2730:	b570      	push	{r4, r5, r6, lr}
    2732:	0004      	movs	r4, r0
    2734:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    2736:	4b0d      	ldr	r3, [pc, #52]	; (276c <vQueueWaitForMessageRestricted+0x3c>)
    2738:	4798      	blx	r3
    273a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    273c:	3301      	adds	r3, #1
    273e:	d101      	bne.n	2744 <vQueueWaitForMessageRestricted+0x14>
    2740:	2300      	movs	r3, #0
    2742:	6463      	str	r3, [r4, #68]	; 0x44
    2744:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2746:	3301      	adds	r3, #1
    2748:	d101      	bne.n	274e <vQueueWaitForMessageRestricted+0x1e>
    274a:	2300      	movs	r3, #0
    274c:	64a3      	str	r3, [r4, #72]	; 0x48
    274e:	4b08      	ldr	r3, [pc, #32]	; (2770 <vQueueWaitForMessageRestricted+0x40>)
    2750:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2752:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2754:	2b00      	cmp	r3, #0
    2756:	d104      	bne.n	2762 <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2758:	0020      	movs	r0, r4
    275a:	3024      	adds	r0, #36	; 0x24
    275c:	0029      	movs	r1, r5
    275e:	4b05      	ldr	r3, [pc, #20]	; (2774 <vQueueWaitForMessageRestricted+0x44>)
    2760:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    2762:	0020      	movs	r0, r4
    2764:	4b04      	ldr	r3, [pc, #16]	; (2778 <vQueueWaitForMessageRestricted+0x48>)
    2766:	4798      	blx	r3
	}
    2768:	bd70      	pop	{r4, r5, r6, pc}
    276a:	46c0      	nop			; (mov r8, r8)
    276c:	00001f61 	.word	0x00001f61
    2770:	00001f79 	.word	0x00001f79
    2774:	00002e85 	.word	0x00002e85
    2778:	000021ed 	.word	0x000021ed

0000277c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    277c:	4b08      	ldr	r3, [pc, #32]	; (27a0 <prvResetNextTaskUnblockTime+0x24>)
    277e:	681b      	ldr	r3, [r3, #0]
    2780:	681b      	ldr	r3, [r3, #0]
    2782:	2b00      	cmp	r3, #0
    2784:	d104      	bne.n	2790 <prvResetNextTaskUnblockTime+0x14>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    2786:	2201      	movs	r2, #1
    2788:	4252      	negs	r2, r2
    278a:	4b06      	ldr	r3, [pc, #24]	; (27a4 <prvResetNextTaskUnblockTime+0x28>)
    278c:	601a      	str	r2, [r3, #0]
    278e:	e006      	b.n	279e <prvResetNextTaskUnblockTime+0x22>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2790:	4b03      	ldr	r3, [pc, #12]	; (27a0 <prvResetNextTaskUnblockTime+0x24>)
    2792:	681b      	ldr	r3, [r3, #0]
    2794:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    2796:	68db      	ldr	r3, [r3, #12]
    2798:	685a      	ldr	r2, [r3, #4]
    279a:	4b02      	ldr	r3, [pc, #8]	; (27a4 <prvResetNextTaskUnblockTime+0x28>)
    279c:	601a      	str	r2, [r3, #0]
	}
}
    279e:	4770      	bx	lr
    27a0:	20003bb0 	.word	0x20003bb0
    27a4:	20000010 	.word	0x20000010

000027a8 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    27a8:	b510      	push	{r4, lr}
    27aa:	1e04      	subs	r4, r0, #0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    27ac:	4b0e      	ldr	r3, [pc, #56]	; (27e8 <prvAddCurrentTaskToDelayedList+0x40>)
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
    27b2:	4b0e      	ldr	r3, [pc, #56]	; (27ec <prvAddCurrentTaskToDelayedList+0x44>)
    27b4:	681b      	ldr	r3, [r3, #0]
    27b6:	429c      	cmp	r4, r3
    27b8:	d207      	bcs.n	27ca <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    27ba:	4b0d      	ldr	r3, [pc, #52]	; (27f0 <prvAddCurrentTaskToDelayedList+0x48>)
    27bc:	6818      	ldr	r0, [r3, #0]
    27be:	4b0a      	ldr	r3, [pc, #40]	; (27e8 <prvAddCurrentTaskToDelayedList+0x40>)
    27c0:	6819      	ldr	r1, [r3, #0]
    27c2:	3104      	adds	r1, #4
    27c4:	4b0b      	ldr	r3, [pc, #44]	; (27f4 <prvAddCurrentTaskToDelayedList+0x4c>)
    27c6:	4798      	blx	r3
    27c8:	e00c      	b.n	27e4 <prvAddCurrentTaskToDelayedList+0x3c>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    27ca:	4b0b      	ldr	r3, [pc, #44]	; (27f8 <prvAddCurrentTaskToDelayedList+0x50>)
    27cc:	6818      	ldr	r0, [r3, #0]
    27ce:	4b06      	ldr	r3, [pc, #24]	; (27e8 <prvAddCurrentTaskToDelayedList+0x40>)
    27d0:	6819      	ldr	r1, [r3, #0]
    27d2:	3104      	adds	r1, #4
    27d4:	4b07      	ldr	r3, [pc, #28]	; (27f4 <prvAddCurrentTaskToDelayedList+0x4c>)
    27d6:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    27d8:	4b08      	ldr	r3, [pc, #32]	; (27fc <prvAddCurrentTaskToDelayedList+0x54>)
    27da:	681b      	ldr	r3, [r3, #0]
    27dc:	429c      	cmp	r4, r3
    27de:	d201      	bcs.n	27e4 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
    27e0:	4b06      	ldr	r3, [pc, #24]	; (27fc <prvAddCurrentTaskToDelayedList+0x54>)
    27e2:	601c      	str	r4, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    27e4:	bd10      	pop	{r4, pc}
    27e6:	46c0      	nop			; (mov r8, r8)
    27e8:	20003c60 	.word	0x20003c60
    27ec:	20003c7c 	.word	0x20003c7c
    27f0:	20003c80 	.word	0x20003c80
    27f4:	00001e9d 	.word	0x00001e9d
    27f8:	20003bb0 	.word	0x20003bb0
    27fc:	20000010 	.word	0x20000010

00002800 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    2800:	b5f0      	push	{r4, r5, r6, r7, lr}
    2802:	464f      	mov	r7, r9
    2804:	4646      	mov	r6, r8
    2806:	b4c0      	push	{r6, r7}
    2808:	b085      	sub	sp, #20
    280a:	9002      	str	r0, [sp, #8]
    280c:	000f      	movs	r7, r1
    280e:	0016      	movs	r6, r2
    2810:	9303      	str	r3, [sp, #12]
    2812:	9c0c      	ldr	r4, [sp, #48]	; 0x30
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
    2814:	2800      	cmp	r0, #0
    2816:	d101      	bne.n	281c <xTaskGenericCreate+0x1c>
    2818:	b672      	cpsid	i
    281a:	e7fe      	b.n	281a <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    281c:	2c04      	cmp	r4, #4
    281e:	d901      	bls.n	2824 <xTaskGenericCreate+0x24>
    2820:	b672      	cpsid	i
    2822:	e7fe      	b.n	2822 <xTaskGenericCreate+0x22>
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    2824:	2040      	movs	r0, #64	; 0x40
    2826:	4b5a      	ldr	r3, [pc, #360]	; (2990 <xTaskGenericCreate+0x190>)
    2828:	4798      	blx	r3
    282a:	1e05      	subs	r5, r0, #0

	if( pxNewTCB != NULL )
    282c:	d100      	bne.n	2830 <xTaskGenericCreate+0x30>
    282e:	e0a8      	b.n	2982 <xTaskGenericCreate+0x182>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2832:	2b00      	cmp	r3, #0
    2834:	d000      	beq.n	2838 <xTaskGenericCreate+0x38>
    2836:	e0a1      	b.n	297c <xTaskGenericCreate+0x17c>
    2838:	00b0      	lsls	r0, r6, #2
    283a:	4b55      	ldr	r3, [pc, #340]	; (2990 <xTaskGenericCreate+0x190>)
    283c:	4798      	blx	r3
    283e:	6328      	str	r0, [r5, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    2840:	2800      	cmp	r0, #0
    2842:	d103      	bne.n	284c <xTaskGenericCreate+0x4c>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    2844:	0028      	movs	r0, r5
    2846:	4b53      	ldr	r3, [pc, #332]	; (2994 <xTaskGenericCreate+0x194>)
    2848:	4798      	blx	r3
    284a:	e09a      	b.n	2982 <xTaskGenericCreate+0x182>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    284c:	4b52      	ldr	r3, [pc, #328]	; (2998 <xTaskGenericCreate+0x198>)
    284e:	18f3      	adds	r3, r6, r3
    2850:	009b      	lsls	r3, r3, #2
    2852:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    2854:	4694      	mov	ip, r2
    2856:	4463      	add	r3, ip
    2858:	2207      	movs	r2, #7
    285a:	4393      	bics	r3, r2
    285c:	4698      	mov	r8, r3
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    285e:	783a      	ldrb	r2, [r7, #0]
    2860:	2334      	movs	r3, #52	; 0x34
    2862:	54ea      	strb	r2, [r5, r3]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    2864:	783b      	ldrb	r3, [r7, #0]
    2866:	2b00      	cmp	r3, #0
    2868:	d00d      	beq.n	2886 <xTaskGenericCreate+0x86>
    286a:	1c7a      	adds	r2, r7, #1
    286c:	002b      	movs	r3, r5
    286e:	3335      	adds	r3, #53	; 0x35
    2870:	0029      	movs	r1, r5
    2872:	313c      	adds	r1, #60	; 0x3c
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    2874:	7810      	ldrb	r0, [r2, #0]
    2876:	7018      	strb	r0, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    2878:	7810      	ldrb	r0, [r2, #0]
    287a:	2800      	cmp	r0, #0
    287c:	d003      	beq.n	2886 <xTaskGenericCreate+0x86>
    287e:	3201      	adds	r2, #1
    2880:	3301      	adds	r3, #1
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    2882:	4299      	cmp	r1, r3
    2884:	d1f6      	bne.n	2874 <xTaskGenericCreate+0x74>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    2886:	2200      	movs	r2, #0
    2888:	233b      	movs	r3, #59	; 0x3b
    288a:	54ea      	strb	r2, [r5, r3]
    288c:	1e27      	subs	r7, r4, #0
    288e:	2f04      	cmp	r7, #4
    2890:	d900      	bls.n	2894 <xTaskGenericCreate+0x94>
    2892:	2704      	movs	r7, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    2894:	62ef      	str	r7, [r5, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    2896:	63ef      	str	r7, [r5, #60]	; 0x3c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    2898:	1d2b      	adds	r3, r5, #4
    289a:	9301      	str	r3, [sp, #4]
    289c:	0018      	movs	r0, r3
    289e:	4e3f      	ldr	r6, [pc, #252]	; (299c <xTaskGenericCreate+0x19c>)
    28a0:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    28a2:	0028      	movs	r0, r5
    28a4:	3018      	adds	r0, #24
    28a6:	47b0      	blx	r6

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    28a8:	612d      	str	r5, [r5, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    28aa:	2305      	movs	r3, #5
    28ac:	1bdb      	subs	r3, r3, r7
    28ae:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    28b0:	626d      	str	r5, [r5, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    28b2:	9a03      	ldr	r2, [sp, #12]
    28b4:	9902      	ldr	r1, [sp, #8]
    28b6:	4640      	mov	r0, r8
    28b8:	4b39      	ldr	r3, [pc, #228]	; (29a0 <xTaskGenericCreate+0x1a0>)
    28ba:	4798      	blx	r3
    28bc:	6028      	str	r0, [r5, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    28be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    28c0:	2b00      	cmp	r3, #0
    28c2:	d000      	beq.n	28c6 <xTaskGenericCreate+0xc6>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    28c4:	601d      	str	r5, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    28c6:	4b37      	ldr	r3, [pc, #220]	; (29a4 <xTaskGenericCreate+0x1a4>)
    28c8:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
    28ca:	4a37      	ldr	r2, [pc, #220]	; (29a8 <xTaskGenericCreate+0x1a8>)
    28cc:	6813      	ldr	r3, [r2, #0]
    28ce:	3301      	adds	r3, #1
    28d0:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
    28d2:	4b36      	ldr	r3, [pc, #216]	; (29ac <xTaskGenericCreate+0x1ac>)
    28d4:	681b      	ldr	r3, [r3, #0]
    28d6:	2b00      	cmp	r3, #0
    28d8:	d122      	bne.n	2920 <xTaskGenericCreate+0x120>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    28da:	4b34      	ldr	r3, [pc, #208]	; (29ac <xTaskGenericCreate+0x1ac>)
    28dc:	601d      	str	r5, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    28de:	6813      	ldr	r3, [r2, #0]
    28e0:	2b01      	cmp	r3, #1
    28e2:	d128      	bne.n	2936 <xTaskGenericCreate+0x136>
    28e4:	4e32      	ldr	r6, [pc, #200]	; (29b0 <xTaskGenericCreate+0x1b0>)
    28e6:	3363      	adds	r3, #99	; 0x63
    28e8:	4699      	mov	r9, r3
    28ea:	44b1      	add	r9, r6
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    28ec:	4f31      	ldr	r7, [pc, #196]	; (29b4 <xTaskGenericCreate+0x1b4>)
    28ee:	0030      	movs	r0, r6
    28f0:	47b8      	blx	r7
    28f2:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    28f4:	454e      	cmp	r6, r9
    28f6:	d1fa      	bne.n	28ee <xTaskGenericCreate+0xee>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    28f8:	4b2f      	ldr	r3, [pc, #188]	; (29b8 <xTaskGenericCreate+0x1b8>)
    28fa:	4699      	mov	r9, r3
    28fc:	0018      	movs	r0, r3
    28fe:	4e2d      	ldr	r6, [pc, #180]	; (29b4 <xTaskGenericCreate+0x1b4>)
    2900:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    2902:	4f2e      	ldr	r7, [pc, #184]	; (29bc <xTaskGenericCreate+0x1bc>)
    2904:	0038      	movs	r0, r7
    2906:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    2908:	482d      	ldr	r0, [pc, #180]	; (29c0 <xTaskGenericCreate+0x1c0>)
    290a:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    290c:	482d      	ldr	r0, [pc, #180]	; (29c4 <xTaskGenericCreate+0x1c4>)
    290e:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    2910:	482d      	ldr	r0, [pc, #180]	; (29c8 <xTaskGenericCreate+0x1c8>)
    2912:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    2914:	4b2d      	ldr	r3, [pc, #180]	; (29cc <xTaskGenericCreate+0x1cc>)
    2916:	464a      	mov	r2, r9
    2918:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    291a:	4b2d      	ldr	r3, [pc, #180]	; (29d0 <xTaskGenericCreate+0x1d0>)
    291c:	601f      	str	r7, [r3, #0]
    291e:	e00a      	b.n	2936 <xTaskGenericCreate+0x136>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    2920:	4b2c      	ldr	r3, [pc, #176]	; (29d4 <xTaskGenericCreate+0x1d4>)
    2922:	681b      	ldr	r3, [r3, #0]
    2924:	2b00      	cmp	r3, #0
    2926:	d106      	bne.n	2936 <xTaskGenericCreate+0x136>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    2928:	4b20      	ldr	r3, [pc, #128]	; (29ac <xTaskGenericCreate+0x1ac>)
    292a:	681b      	ldr	r3, [r3, #0]
    292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    292e:	429c      	cmp	r4, r3
    2930:	d301      	bcc.n	2936 <xTaskGenericCreate+0x136>
					{
						pxCurrentTCB = pxNewTCB;
    2932:	4b1e      	ldr	r3, [pc, #120]	; (29ac <xTaskGenericCreate+0x1ac>)
    2934:	601d      	str	r5, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    2936:	4a28      	ldr	r2, [pc, #160]	; (29d8 <xTaskGenericCreate+0x1d8>)
    2938:	6813      	ldr	r3, [r2, #0]
    293a:	3301      	adds	r3, #1
    293c:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    293e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    2940:	4a26      	ldr	r2, [pc, #152]	; (29dc <xTaskGenericCreate+0x1dc>)
    2942:	6812      	ldr	r2, [r2, #0]
    2944:	4293      	cmp	r3, r2
    2946:	d901      	bls.n	294c <xTaskGenericCreate+0x14c>
    2948:	4a24      	ldr	r2, [pc, #144]	; (29dc <xTaskGenericCreate+0x1dc>)
    294a:	6013      	str	r3, [r2, #0]
    294c:	0098      	lsls	r0, r3, #2
    294e:	18c3      	adds	r3, r0, r3
    2950:	009b      	lsls	r3, r3, #2
    2952:	4817      	ldr	r0, [pc, #92]	; (29b0 <xTaskGenericCreate+0x1b0>)
    2954:	18c0      	adds	r0, r0, r3
    2956:	9901      	ldr	r1, [sp, #4]
    2958:	4b21      	ldr	r3, [pc, #132]	; (29e0 <xTaskGenericCreate+0x1e0>)
    295a:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    295c:	4b21      	ldr	r3, [pc, #132]	; (29e4 <xTaskGenericCreate+0x1e4>)
    295e:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    2960:	4b1c      	ldr	r3, [pc, #112]	; (29d4 <xTaskGenericCreate+0x1d4>)
    2962:	681b      	ldr	r3, [r3, #0]
    2964:	2001      	movs	r0, #1
    2966:	2b00      	cmp	r3, #0
    2968:	d00d      	beq.n	2986 <xTaskGenericCreate+0x186>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    296a:	4b10      	ldr	r3, [pc, #64]	; (29ac <xTaskGenericCreate+0x1ac>)
    296c:	681b      	ldr	r3, [r3, #0]
    296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2970:	429c      	cmp	r4, r3
    2972:	d908      	bls.n	2986 <xTaskGenericCreate+0x186>
			{
				taskYIELD_IF_USING_PREEMPTION();
    2974:	4b1c      	ldr	r3, [pc, #112]	; (29e8 <xTaskGenericCreate+0x1e8>)
    2976:	4798      	blx	r3
    2978:	2001      	movs	r0, #1
    297a:	e004      	b.n	2986 <xTaskGenericCreate+0x186>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    297c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    297e:	6303      	str	r3, [r0, #48]	; 0x30
    2980:	e764      	b.n	284c <xTaskGenericCreate+0x4c>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2982:	2001      	movs	r0, #1
    2984:	4240      	negs	r0, r0
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
    2986:	b005      	add	sp, #20
    2988:	bc0c      	pop	{r2, r3}
    298a:	4690      	mov	r8, r2
    298c:	4699      	mov	r9, r3
    298e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2990:	00002085 	.word	0x00002085
    2994:	000020ed 	.word	0x000020ed
    2998:	3fffffff 	.word	0x3fffffff
    299c:	00001e7d 	.word	0x00001e7d
    29a0:	00001f25 	.word	0x00001f25
    29a4:	00001f61 	.word	0x00001f61
    29a8:	20003c88 	.word	0x20003c88
    29ac:	20003c60 	.word	0x20003c60
    29b0:	20003be8 	.word	0x20003be8
    29b4:	00001e65 	.word	0x00001e65
    29b8:	20003bbc 	.word	0x20003bbc
    29bc:	20003bd0 	.word	0x20003bd0
    29c0:	20003c64 	.word	0x20003c64
    29c4:	20003c4c 	.word	0x20003c4c
    29c8:	20003c8c 	.word	0x20003c8c
    29cc:	20003bb0 	.word	0x20003bb0
    29d0:	20003c80 	.word	0x20003c80
    29d4:	20003bb4 	.word	0x20003bb4
    29d8:	20003c84 	.word	0x20003c84
    29dc:	20003ca0 	.word	0x20003ca0
    29e0:	00001e85 	.word	0x00001e85
    29e4:	00001f79 	.word	0x00001f79
    29e8:	00001f49 	.word	0x00001f49

000029ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    29ec:	b510      	push	{r4, lr}
    29ee:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    29f0:	2300      	movs	r3, #0
    29f2:	9303      	str	r3, [sp, #12]
    29f4:	9302      	str	r3, [sp, #8]
    29f6:	9301      	str	r3, [sp, #4]
    29f8:	9300      	str	r3, [sp, #0]
    29fa:	2264      	movs	r2, #100	; 0x64
    29fc:	490c      	ldr	r1, [pc, #48]	; (2a30 <vTaskStartScheduler+0x44>)
    29fe:	480d      	ldr	r0, [pc, #52]	; (2a34 <vTaskStartScheduler+0x48>)
    2a00:	4c0d      	ldr	r4, [pc, #52]	; (2a38 <vTaskStartScheduler+0x4c>)
    2a02:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    2a04:	2801      	cmp	r0, #1
    2a06:	d10d      	bne.n	2a24 <vTaskStartScheduler+0x38>
		{
			xReturn = xTimerCreateTimerTask();
    2a08:	4b0c      	ldr	r3, [pc, #48]	; (2a3c <vTaskStartScheduler+0x50>)
    2a0a:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    2a0c:	2801      	cmp	r0, #1
    2a0e:	d109      	bne.n	2a24 <vTaskStartScheduler+0x38>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    2a10:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    2a12:	2201      	movs	r2, #1
    2a14:	4b0a      	ldr	r3, [pc, #40]	; (2a40 <vTaskStartScheduler+0x54>)
    2a16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    2a18:	2200      	movs	r2, #0
    2a1a:	4b0a      	ldr	r3, [pc, #40]	; (2a44 <vTaskStartScheduler+0x58>)
    2a1c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2a1e:	4b0a      	ldr	r3, [pc, #40]	; (2a48 <vTaskStartScheduler+0x5c>)
    2a20:	4798      	blx	r3
    2a22:	e003      	b.n	2a2c <vTaskStartScheduler+0x40>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
    2a24:	2800      	cmp	r0, #0
    2a26:	d101      	bne.n	2a2c <vTaskStartScheduler+0x40>
    2a28:	b672      	cpsid	i
    2a2a:	e7fe      	b.n	2a2a <vTaskStartScheduler+0x3e>
	}
}
    2a2c:	b004      	add	sp, #16
    2a2e:	bd10      	pop	{r4, pc}
    2a30:	00006794 	.word	0x00006794
    2a34:	00002cf5 	.word	0x00002cf5
    2a38:	00002801 	.word	0x00002801
    2a3c:	00003199 	.word	0x00003199
    2a40:	20003bb4 	.word	0x20003bb4
    2a44:	20003c7c 	.word	0x20003c7c
    2a48:	00002045 	.word	0x00002045

00002a4c <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    2a4c:	4a02      	ldr	r2, [pc, #8]	; (2a58 <vTaskSuspendAll+0xc>)
    2a4e:	6813      	ldr	r3, [r2, #0]
    2a50:	3301      	adds	r3, #1
    2a52:	6013      	str	r3, [r2, #0]
}
    2a54:	4770      	bx	lr
    2a56:	46c0      	nop			; (mov r8, r8)
    2a58:	20003c78 	.word	0x20003c78

00002a5c <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    2a5c:	b510      	push	{r4, lr}
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    2a5e:	4b04      	ldr	r3, [pc, #16]	; (2a70 <xTaskGetTickCount+0x14>)
    2a60:	4798      	blx	r3
	{
		xTicks = xTickCount;
    2a62:	4b04      	ldr	r3, [pc, #16]	; (2a74 <xTaskGetTickCount+0x18>)
    2a64:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
    2a66:	4b04      	ldr	r3, [pc, #16]	; (2a78 <xTaskGetTickCount+0x1c>)
    2a68:	4798      	blx	r3

	return xTicks;
}
    2a6a:	0020      	movs	r0, r4
    2a6c:	bd10      	pop	{r4, pc}
    2a6e:	46c0      	nop			; (mov r8, r8)
    2a70:	00001f61 	.word	0x00001f61
    2a74:	20003c7c 	.word	0x20003c7c
    2a78:	00001f79 	.word	0x00001f79

00002a7c <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    2a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a7e:	b083      	sub	sp, #12

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2a80:	4b39      	ldr	r3, [pc, #228]	; (2b68 <xTaskIncrementTick+0xec>)
    2a82:	681b      	ldr	r3, [r3, #0]
    2a84:	2b00      	cmp	r3, #0
    2a86:	d162      	bne.n	2b4e <xTaskIncrementTick+0xd2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    2a88:	4b38      	ldr	r3, [pc, #224]	; (2b6c <xTaskIncrementTick+0xf0>)
    2a8a:	681a      	ldr	r2, [r3, #0]
    2a8c:	3201      	adds	r2, #1
    2a8e:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    2a90:	681c      	ldr	r4, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
    2a92:	2c00      	cmp	r4, #0
    2a94:	d112      	bne.n	2abc <xTaskIncrementTick+0x40>
			{
				taskSWITCH_DELAYED_LISTS();
    2a96:	4b36      	ldr	r3, [pc, #216]	; (2b70 <xTaskIncrementTick+0xf4>)
    2a98:	681b      	ldr	r3, [r3, #0]
    2a9a:	681b      	ldr	r3, [r3, #0]
    2a9c:	2b00      	cmp	r3, #0
    2a9e:	d001      	beq.n	2aa4 <xTaskIncrementTick+0x28>
    2aa0:	b672      	cpsid	i
    2aa2:	e7fe      	b.n	2aa2 <xTaskIncrementTick+0x26>
    2aa4:	4a32      	ldr	r2, [pc, #200]	; (2b70 <xTaskIncrementTick+0xf4>)
    2aa6:	6811      	ldr	r1, [r2, #0]
    2aa8:	4b32      	ldr	r3, [pc, #200]	; (2b74 <xTaskIncrementTick+0xf8>)
    2aaa:	6818      	ldr	r0, [r3, #0]
    2aac:	6010      	str	r0, [r2, #0]
    2aae:	6019      	str	r1, [r3, #0]
    2ab0:	4a31      	ldr	r2, [pc, #196]	; (2b78 <xTaskIncrementTick+0xfc>)
    2ab2:	6813      	ldr	r3, [r2, #0]
    2ab4:	3301      	adds	r3, #1
    2ab6:	6013      	str	r3, [r2, #0]
    2ab8:	4b30      	ldr	r3, [pc, #192]	; (2b7c <xTaskIncrementTick+0x100>)
    2aba:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    2abc:	4b30      	ldr	r3, [pc, #192]	; (2b80 <xTaskIncrementTick+0x104>)
    2abe:	681b      	ldr	r3, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    2ac0:	2600      	movs	r6, #0

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    2ac2:	429c      	cmp	r4, r3
    2ac4:	d337      	bcc.n	2b36 <xTaskIncrementTick+0xba>
    2ac6:	2600      	movs	r6, #0
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2ac8:	4d29      	ldr	r5, [pc, #164]	; (2b70 <xTaskIncrementTick+0xf4>)
    2aca:	682b      	ldr	r3, [r5, #0]
    2acc:	681b      	ldr	r3, [r3, #0]
    2ace:	2b00      	cmp	r3, #0
    2ad0:	d104      	bne.n	2adc <xTaskIncrementTick+0x60>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    2ad2:	2201      	movs	r2, #1
    2ad4:	4252      	negs	r2, r2
    2ad6:	4b2a      	ldr	r3, [pc, #168]	; (2b80 <xTaskIncrementTick+0x104>)
    2ad8:	601a      	str	r2, [r3, #0]
						break;
    2ada:	e02c      	b.n	2b36 <xTaskIncrementTick+0xba>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2adc:	4b24      	ldr	r3, [pc, #144]	; (2b70 <xTaskIncrementTick+0xf4>)
    2ade:	681b      	ldr	r3, [r3, #0]
    2ae0:	68db      	ldr	r3, [r3, #12]
    2ae2:	68df      	ldr	r7, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    2ae4:	687b      	ldr	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
    2ae6:	429c      	cmp	r4, r3
    2ae8:	d202      	bcs.n	2af0 <xTaskIncrementTick+0x74>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    2aea:	4a25      	ldr	r2, [pc, #148]	; (2b80 <xTaskIncrementTick+0x104>)
    2aec:	6013      	str	r3, [r2, #0]
							break;
    2aee:	e022      	b.n	2b36 <xTaskIncrementTick+0xba>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2af0:	1d3b      	adds	r3, r7, #4
    2af2:	9301      	str	r3, [sp, #4]
    2af4:	0018      	movs	r0, r3
    2af6:	4b23      	ldr	r3, [pc, #140]	; (2b84 <xTaskIncrementTick+0x108>)
    2af8:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2afc:	2b00      	cmp	r3, #0
    2afe:	d003      	beq.n	2b08 <xTaskIncrementTick+0x8c>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2b00:	0038      	movs	r0, r7
    2b02:	3018      	adds	r0, #24
    2b04:	4b1f      	ldr	r3, [pc, #124]	; (2b84 <xTaskIncrementTick+0x108>)
    2b06:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    2b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b0a:	4a1f      	ldr	r2, [pc, #124]	; (2b88 <xTaskIncrementTick+0x10c>)
    2b0c:	6812      	ldr	r2, [r2, #0]
    2b0e:	4293      	cmp	r3, r2
    2b10:	d901      	bls.n	2b16 <xTaskIncrementTick+0x9a>
    2b12:	4a1d      	ldr	r2, [pc, #116]	; (2b88 <xTaskIncrementTick+0x10c>)
    2b14:	6013      	str	r3, [r2, #0]
    2b16:	0098      	lsls	r0, r3, #2
    2b18:	18c3      	adds	r3, r0, r3
    2b1a:	009b      	lsls	r3, r3, #2
    2b1c:	481b      	ldr	r0, [pc, #108]	; (2b8c <xTaskIncrementTick+0x110>)
    2b1e:	18c0      	adds	r0, r0, r3
    2b20:	9901      	ldr	r1, [sp, #4]
    2b22:	4b1b      	ldr	r3, [pc, #108]	; (2b90 <xTaskIncrementTick+0x114>)
    2b24:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2b26:	4b1b      	ldr	r3, [pc, #108]	; (2b94 <xTaskIncrementTick+0x118>)
    2b28:	681b      	ldr	r3, [r3, #0]
    2b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b2e:	429a      	cmp	r2, r3
    2b30:	d3cb      	bcc.n	2aca <xTaskIncrementTick+0x4e>
							{
								xSwitchRequired = pdTRUE;
    2b32:	2601      	movs	r6, #1
    2b34:	e7c9      	b.n	2aca <xTaskIncrementTick+0x4e>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    2b36:	4b17      	ldr	r3, [pc, #92]	; (2b94 <xTaskIncrementTick+0x118>)
    2b38:	681b      	ldr	r3, [r3, #0]
    2b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b3c:	009a      	lsls	r2, r3, #2
    2b3e:	18d3      	adds	r3, r2, r3
    2b40:	009b      	lsls	r3, r3, #2
    2b42:	4a12      	ldr	r2, [pc, #72]	; (2b8c <xTaskIncrementTick+0x110>)
    2b44:	589b      	ldr	r3, [r3, r2]
    2b46:	2b01      	cmp	r3, #1
    2b48:	d906      	bls.n	2b58 <xTaskIncrementTick+0xdc>
			{
				xSwitchRequired = pdTRUE;
    2b4a:	2601      	movs	r6, #1
    2b4c:	e004      	b.n	2b58 <xTaskIncrementTick+0xdc>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    2b4e:	4a12      	ldr	r2, [pc, #72]	; (2b98 <xTaskIncrementTick+0x11c>)
    2b50:	6813      	ldr	r3, [r2, #0]
    2b52:	3301      	adds	r3, #1
    2b54:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    2b56:	2600      	movs	r6, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    2b58:	4b10      	ldr	r3, [pc, #64]	; (2b9c <xTaskIncrementTick+0x120>)
    2b5a:	681b      	ldr	r3, [r3, #0]
    2b5c:	2b00      	cmp	r3, #0
    2b5e:	d000      	beq.n	2b62 <xTaskIncrementTick+0xe6>
		{
			xSwitchRequired = pdTRUE;
    2b60:	2601      	movs	r6, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    2b62:	0030      	movs	r0, r6
    2b64:	b003      	add	sp, #12
    2b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b68:	20003c78 	.word	0x20003c78
    2b6c:	20003c7c 	.word	0x20003c7c
    2b70:	20003bb0 	.word	0x20003bb0
    2b74:	20003c80 	.word	0x20003c80
    2b78:	20003bac 	.word	0x20003bac
    2b7c:	0000277d 	.word	0x0000277d
    2b80:	20000010 	.word	0x20000010
    2b84:	00001ecd 	.word	0x00001ecd
    2b88:	20003ca0 	.word	0x20003ca0
    2b8c:	20003be8 	.word	0x20003be8
    2b90:	00001e85 	.word	0x00001e85
    2b94:	20003c60 	.word	0x20003c60
    2b98:	20003be4 	.word	0x20003be4
    2b9c:	20003ca4 	.word	0x20003ca4

00002ba0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    2ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    2ba2:	4b2f      	ldr	r3, [pc, #188]	; (2c60 <xTaskResumeAll+0xc0>)
    2ba4:	681b      	ldr	r3, [r3, #0]
    2ba6:	2b00      	cmp	r3, #0
    2ba8:	d101      	bne.n	2bae <xTaskResumeAll+0xe>
    2baa:	b672      	cpsid	i
    2bac:	e7fe      	b.n	2bac <xTaskResumeAll+0xc>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    2bae:	4b2d      	ldr	r3, [pc, #180]	; (2c64 <xTaskResumeAll+0xc4>)
    2bb0:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    2bb2:	4b2b      	ldr	r3, [pc, #172]	; (2c60 <xTaskResumeAll+0xc0>)
    2bb4:	681a      	ldr	r2, [r3, #0]
    2bb6:	3a01      	subs	r2, #1
    2bb8:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2bba:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    2bbc:	2400      	movs	r4, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2bbe:	2b00      	cmp	r3, #0
    2bc0:	d14a      	bne.n	2c58 <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    2bc2:	4b29      	ldr	r3, [pc, #164]	; (2c68 <xTaskResumeAll+0xc8>)
    2bc4:	681b      	ldr	r3, [r3, #0]
    2bc6:	2b00      	cmp	r3, #0
    2bc8:	d123      	bne.n	2c12 <xTaskResumeAll+0x72>
    2bca:	e045      	b.n	2c58 <xTaskResumeAll+0xb8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2bcc:	68fb      	ldr	r3, [r7, #12]
    2bce:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2bd0:	0030      	movs	r0, r6
    2bd2:	3018      	adds	r0, #24
    2bd4:	4b25      	ldr	r3, [pc, #148]	; (2c6c <xTaskResumeAll+0xcc>)
    2bd6:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2bd8:	1d35      	adds	r5, r6, #4
    2bda:	0028      	movs	r0, r5
    2bdc:	4b23      	ldr	r3, [pc, #140]	; (2c6c <xTaskResumeAll+0xcc>)
    2bde:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    2be0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2be2:	4a23      	ldr	r2, [pc, #140]	; (2c70 <xTaskResumeAll+0xd0>)
    2be4:	6812      	ldr	r2, [r2, #0]
    2be6:	4293      	cmp	r3, r2
    2be8:	d901      	bls.n	2bee <xTaskResumeAll+0x4e>
    2bea:	4a21      	ldr	r2, [pc, #132]	; (2c70 <xTaskResumeAll+0xd0>)
    2bec:	6013      	str	r3, [r2, #0]
    2bee:	0098      	lsls	r0, r3, #2
    2bf0:	18c3      	adds	r3, r0, r3
    2bf2:	009b      	lsls	r3, r3, #2
    2bf4:	481f      	ldr	r0, [pc, #124]	; (2c74 <xTaskResumeAll+0xd4>)
    2bf6:	18c0      	adds	r0, r0, r3
    2bf8:	0029      	movs	r1, r5
    2bfa:	4b1f      	ldr	r3, [pc, #124]	; (2c78 <xTaskResumeAll+0xd8>)
    2bfc:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2bfe:	4b1f      	ldr	r3, [pc, #124]	; (2c7c <xTaskResumeAll+0xdc>)
    2c00:	681b      	ldr	r3, [r3, #0]
    2c02:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    2c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c06:	429a      	cmp	r2, r3
    2c08:	d305      	bcc.n	2c16 <xTaskResumeAll+0x76>
					{
						xYieldPending = pdTRUE;
    2c0a:	2201      	movs	r2, #1
    2c0c:	4b1c      	ldr	r3, [pc, #112]	; (2c80 <xTaskResumeAll+0xe0>)
    2c0e:	601a      	str	r2, [r3, #0]
    2c10:	e001      	b.n	2c16 <xTaskResumeAll+0x76>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2c12:	4c1c      	ldr	r4, [pc, #112]	; (2c84 <xTaskResumeAll+0xe4>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2c14:	0027      	movs	r7, r4
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2c16:	6823      	ldr	r3, [r4, #0]
    2c18:	2b00      	cmp	r3, #0
    2c1a:	d1d7      	bne.n	2bcc <xTaskResumeAll+0x2c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    2c1c:	4b1a      	ldr	r3, [pc, #104]	; (2c88 <xTaskResumeAll+0xe8>)
    2c1e:	681b      	ldr	r3, [r3, #0]
    2c20:	2b00      	cmp	r3, #0
    2c22:	d011      	beq.n	2c48 <xTaskResumeAll+0xa8>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    2c24:	4b18      	ldr	r3, [pc, #96]	; (2c88 <xTaskResumeAll+0xe8>)
    2c26:	681b      	ldr	r3, [r3, #0]
    2c28:	2b00      	cmp	r3, #0
    2c2a:	d00d      	beq.n	2c48 <xTaskResumeAll+0xa8>
					{
						if( xTaskIncrementTick() != pdFALSE )
    2c2c:	4e17      	ldr	r6, [pc, #92]	; (2c8c <xTaskResumeAll+0xec>)
						{
							xYieldPending = pdTRUE;
    2c2e:	4d14      	ldr	r5, [pc, #80]	; (2c80 <xTaskResumeAll+0xe0>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    2c30:	4c15      	ldr	r4, [pc, #84]	; (2c88 <xTaskResumeAll+0xe8>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
    2c32:	47b0      	blx	r6
    2c34:	2800      	cmp	r0, #0
    2c36:	d001      	beq.n	2c3c <xTaskResumeAll+0x9c>
						{
							xYieldPending = pdTRUE;
    2c38:	2301      	movs	r3, #1
    2c3a:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    2c3c:	6823      	ldr	r3, [r4, #0]
    2c3e:	3b01      	subs	r3, #1
    2c40:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    2c42:	6823      	ldr	r3, [r4, #0]
    2c44:	2b00      	cmp	r3, #0
    2c46:	d1f4      	bne.n	2c32 <xTaskResumeAll+0x92>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    2c48:	4b0d      	ldr	r3, [pc, #52]	; (2c80 <xTaskResumeAll+0xe0>)
    2c4a:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    2c4c:	2400      	movs	r4, #0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    2c4e:	2b01      	cmp	r3, #1
    2c50:	d102      	bne.n	2c58 <xTaskResumeAll+0xb8>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    2c52:	4b0f      	ldr	r3, [pc, #60]	; (2c90 <xTaskResumeAll+0xf0>)
    2c54:	4798      	blx	r3

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    2c56:	3401      	adds	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    2c58:	4b0e      	ldr	r3, [pc, #56]	; (2c94 <xTaskResumeAll+0xf4>)
    2c5a:	4798      	blx	r3

	return xAlreadyYielded;
}
    2c5c:	0020      	movs	r0, r4
    2c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c60:	20003c78 	.word	0x20003c78
    2c64:	00001f61 	.word	0x00001f61
    2c68:	20003c88 	.word	0x20003c88
    2c6c:	00001ecd 	.word	0x00001ecd
    2c70:	20003ca0 	.word	0x20003ca0
    2c74:	20003be8 	.word	0x20003be8
    2c78:	00001e85 	.word	0x00001e85
    2c7c:	20003c60 	.word	0x20003c60
    2c80:	20003ca4 	.word	0x20003ca4
    2c84:	20003c64 	.word	0x20003c64
    2c88:	20003be4 	.word	0x20003be4
    2c8c:	00002a7d 	.word	0x00002a7d
    2c90:	00001f49 	.word	0x00001f49
    2c94:	00001f79 	.word	0x00001f79

00002c98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    2c98:	b510      	push	{r4, lr}
    2c9a:	1e04      	subs	r4, r0, #0
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    2c9c:	d016      	beq.n	2ccc <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    2c9e:	4b0d      	ldr	r3, [pc, #52]	; (2cd4 <vTaskDelay+0x3c>)
    2ca0:	681b      	ldr	r3, [r3, #0]
    2ca2:	2b00      	cmp	r3, #0
    2ca4:	d001      	beq.n	2caa <vTaskDelay+0x12>
    2ca6:	b672      	cpsid	i
    2ca8:	e7fe      	b.n	2ca8 <vTaskDelay+0x10>
			vTaskSuspendAll();
    2caa:	4b0b      	ldr	r3, [pc, #44]	; (2cd8 <vTaskDelay+0x40>)
    2cac:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2cae:	4b0b      	ldr	r3, [pc, #44]	; (2cdc <vTaskDelay+0x44>)
    2cb0:	681b      	ldr	r3, [r3, #0]
    2cb2:	18e4      	adds	r4, r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2cb4:	4b0a      	ldr	r3, [pc, #40]	; (2ce0 <vTaskDelay+0x48>)
    2cb6:	6818      	ldr	r0, [r3, #0]
    2cb8:	3004      	adds	r0, #4
    2cba:	4b0a      	ldr	r3, [pc, #40]	; (2ce4 <vTaskDelay+0x4c>)
    2cbc:	4798      	blx	r3
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2cbe:	0020      	movs	r0, r4
    2cc0:	4b09      	ldr	r3, [pc, #36]	; (2ce8 <vTaskDelay+0x50>)
    2cc2:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    2cc4:	4b09      	ldr	r3, [pc, #36]	; (2cec <vTaskDelay+0x54>)
    2cc6:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2cc8:	2800      	cmp	r0, #0
    2cca:	d101      	bne.n	2cd0 <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    2ccc:	4b08      	ldr	r3, [pc, #32]	; (2cf0 <vTaskDelay+0x58>)
    2cce:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2cd0:	bd10      	pop	{r4, pc}
    2cd2:	46c0      	nop			; (mov r8, r8)
    2cd4:	20003c78 	.word	0x20003c78
    2cd8:	00002a4d 	.word	0x00002a4d
    2cdc:	20003c7c 	.word	0x20003c7c
    2ce0:	20003c60 	.word	0x20003c60
    2ce4:	00001ecd 	.word	0x00001ecd
    2ce8:	000027a9 	.word	0x000027a9
    2cec:	00002ba1 	.word	0x00002ba1
    2cf0:	00001f49 	.word	0x00001f49

00002cf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    2cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cf6:	4647      	mov	r7, r8
    2cf8:	b480      	push	{r7}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    2cfa:	4d16      	ldr	r5, [pc, #88]	; (2d54 <prvIdleTask+0x60>)
		{
			vTaskSuspendAll();
    2cfc:	4f16      	ldr	r7, [pc, #88]	; (2d58 <prvIdleTask+0x64>)
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2cfe:	4e17      	ldr	r6, [pc, #92]	; (2d5c <prvIdleTask+0x68>)
    2d00:	e01d      	b.n	2d3e <prvIdleTask+0x4a>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    2d02:	47b8      	blx	r7
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2d04:	6834      	ldr	r4, [r6, #0]
			}
			( void ) xTaskResumeAll();
    2d06:	4b16      	ldr	r3, [pc, #88]	; (2d60 <prvIdleTask+0x6c>)
    2d08:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    2d0a:	2c00      	cmp	r4, #0
    2d0c:	d017      	beq.n	2d3e <prvIdleTask+0x4a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    2d0e:	4b15      	ldr	r3, [pc, #84]	; (2d64 <prvIdleTask+0x70>)
    2d10:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    2d12:	4b12      	ldr	r3, [pc, #72]	; (2d5c <prvIdleTask+0x68>)
    2d14:	68db      	ldr	r3, [r3, #12]
    2d16:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2d18:	1d20      	adds	r0, r4, #4
    2d1a:	4b13      	ldr	r3, [pc, #76]	; (2d68 <prvIdleTask+0x74>)
    2d1c:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    2d1e:	4a13      	ldr	r2, [pc, #76]	; (2d6c <prvIdleTask+0x78>)
    2d20:	6813      	ldr	r3, [r2, #0]
    2d22:	3b01      	subs	r3, #1
    2d24:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
    2d26:	4a0b      	ldr	r2, [pc, #44]	; (2d54 <prvIdleTask+0x60>)
    2d28:	6813      	ldr	r3, [r2, #0]
    2d2a:	3b01      	subs	r3, #1
    2d2c:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
    2d2e:	4b10      	ldr	r3, [pc, #64]	; (2d70 <prvIdleTask+0x7c>)
    2d30:	4798      	blx	r3
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    2d32:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2d34:	4b0f      	ldr	r3, [pc, #60]	; (2d74 <prvIdleTask+0x80>)
    2d36:	4698      	mov	r8, r3
    2d38:	4798      	blx	r3
		vPortFree( pxTCB );
    2d3a:	0020      	movs	r0, r4
    2d3c:	47c0      	blx	r8
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    2d3e:	682b      	ldr	r3, [r5, #0]
    2d40:	2b00      	cmp	r3, #0
    2d42:	d1de      	bne.n	2d02 <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    2d44:	4b0c      	ldr	r3, [pc, #48]	; (2d78 <prvIdleTask+0x84>)
    2d46:	681b      	ldr	r3, [r3, #0]
    2d48:	2b01      	cmp	r3, #1
    2d4a:	d9f8      	bls.n	2d3e <prvIdleTask+0x4a>
			{
				taskYIELD();
    2d4c:	4b0b      	ldr	r3, [pc, #44]	; (2d7c <prvIdleTask+0x88>)
    2d4e:	4798      	blx	r3
    2d50:	e7f5      	b.n	2d3e <prvIdleTask+0x4a>
    2d52:	46c0      	nop			; (mov r8, r8)
    2d54:	20003bb8 	.word	0x20003bb8
    2d58:	00002a4d 	.word	0x00002a4d
    2d5c:	20003c4c 	.word	0x20003c4c
    2d60:	00002ba1 	.word	0x00002ba1
    2d64:	00001f61 	.word	0x00001f61
    2d68:	00001ecd 	.word	0x00001ecd
    2d6c:	20003c88 	.word	0x20003c88
    2d70:	00001f79 	.word	0x00001f79
    2d74:	000020ed 	.word	0x000020ed
    2d78:	20003be8 	.word	0x20003be8
    2d7c:	00001f49 	.word	0x00001f49

00002d80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    2d80:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    2d82:	4b25      	ldr	r3, [pc, #148]	; (2e18 <vTaskSwitchContext+0x98>)
    2d84:	681b      	ldr	r3, [r3, #0]
    2d86:	2b00      	cmp	r3, #0
    2d88:	d003      	beq.n	2d92 <vTaskSwitchContext+0x12>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    2d8a:	2201      	movs	r2, #1
    2d8c:	4b23      	ldr	r3, [pc, #140]	; (2e1c <vTaskSwitchContext+0x9c>)
    2d8e:	601a      	str	r2, [r3, #0]
    2d90:	e041      	b.n	2e16 <vTaskSwitchContext+0x96>
	}
	else
	{
		xYieldPending = pdFALSE;
    2d92:	2200      	movs	r2, #0
    2d94:	4b21      	ldr	r3, [pc, #132]	; (2e1c <vTaskSwitchContext+0x9c>)
    2d96:	601a      	str	r2, [r3, #0]
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    2d98:	4b21      	ldr	r3, [pc, #132]	; (2e20 <vTaskSwitchContext+0xa0>)
    2d9a:	681b      	ldr	r3, [r3, #0]
    2d9c:	009a      	lsls	r2, r3, #2
    2d9e:	18d3      	adds	r3, r2, r3
    2da0:	009b      	lsls	r3, r3, #2
    2da2:	4a20      	ldr	r2, [pc, #128]	; (2e24 <vTaskSwitchContext+0xa4>)
    2da4:	589b      	ldr	r3, [r3, r2]
    2da6:	2b00      	cmp	r3, #0
    2da8:	d116      	bne.n	2dd8 <vTaskSwitchContext+0x58>
    2daa:	4b1d      	ldr	r3, [pc, #116]	; (2e20 <vTaskSwitchContext+0xa0>)
    2dac:	681b      	ldr	r3, [r3, #0]
    2dae:	2b00      	cmp	r3, #0
    2db0:	d006      	beq.n	2dc0 <vTaskSwitchContext+0x40>
    2db2:	4a1b      	ldr	r2, [pc, #108]	; (2e20 <vTaskSwitchContext+0xa0>)
    2db4:	4c1b      	ldr	r4, [pc, #108]	; (2e24 <vTaskSwitchContext+0xa4>)
    2db6:	0010      	movs	r0, r2
    2db8:	e004      	b.n	2dc4 <vTaskSwitchContext+0x44>
    2dba:	6803      	ldr	r3, [r0, #0]
    2dbc:	2b00      	cmp	r3, #0
    2dbe:	d101      	bne.n	2dc4 <vTaskSwitchContext+0x44>
    2dc0:	b672      	cpsid	i
    2dc2:	e7fe      	b.n	2dc2 <vTaskSwitchContext+0x42>
    2dc4:	6813      	ldr	r3, [r2, #0]
    2dc6:	3b01      	subs	r3, #1
    2dc8:	6013      	str	r3, [r2, #0]
    2dca:	6813      	ldr	r3, [r2, #0]
    2dcc:	0099      	lsls	r1, r3, #2
    2dce:	18cb      	adds	r3, r1, r3
    2dd0:	009b      	lsls	r3, r3, #2
    2dd2:	591b      	ldr	r3, [r3, r4]
    2dd4:	2b00      	cmp	r3, #0
    2dd6:	d0f0      	beq.n	2dba <vTaskSwitchContext+0x3a>
    2dd8:	4b11      	ldr	r3, [pc, #68]	; (2e20 <vTaskSwitchContext+0xa0>)
    2dda:	681b      	ldr	r3, [r3, #0]
    2ddc:	4c11      	ldr	r4, [pc, #68]	; (2e24 <vTaskSwitchContext+0xa4>)
    2dde:	009a      	lsls	r2, r3, #2
    2de0:	18d1      	adds	r1, r2, r3
    2de2:	0089      	lsls	r1, r1, #2
    2de4:	1861      	adds	r1, r4, r1
    2de6:	6848      	ldr	r0, [r1, #4]
    2de8:	6840      	ldr	r0, [r0, #4]
    2dea:	6048      	str	r0, [r1, #4]
    2dec:	18d2      	adds	r2, r2, r3
    2dee:	0092      	lsls	r2, r2, #2
    2df0:	3208      	adds	r2, #8
    2df2:	18a2      	adds	r2, r4, r2
    2df4:	4290      	cmp	r0, r2
    2df6:	d105      	bne.n	2e04 <vTaskSwitchContext+0x84>
    2df8:	6841      	ldr	r1, [r0, #4]
    2dfa:	009a      	lsls	r2, r3, #2
    2dfc:	18d2      	adds	r2, r2, r3
    2dfe:	0092      	lsls	r2, r2, #2
    2e00:	18a2      	adds	r2, r4, r2
    2e02:	6051      	str	r1, [r2, #4]
    2e04:	009a      	lsls	r2, r3, #2
    2e06:	18d3      	adds	r3, r2, r3
    2e08:	009b      	lsls	r3, r3, #2
    2e0a:	4a06      	ldr	r2, [pc, #24]	; (2e24 <vTaskSwitchContext+0xa4>)
    2e0c:	18d3      	adds	r3, r2, r3
    2e0e:	685b      	ldr	r3, [r3, #4]
    2e10:	68da      	ldr	r2, [r3, #12]
    2e12:	4b05      	ldr	r3, [pc, #20]	; (2e28 <vTaskSwitchContext+0xa8>)
    2e14:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    2e16:	bd10      	pop	{r4, pc}
    2e18:	20003c78 	.word	0x20003c78
    2e1c:	20003ca4 	.word	0x20003ca4
    2e20:	20003ca0 	.word	0x20003ca0
    2e24:	20003be8 	.word	0x20003be8
    2e28:	20003c60 	.word	0x20003c60

00002e2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    2e2c:	b570      	push	{r4, r5, r6, lr}
    2e2e:	000c      	movs	r4, r1
TickType_t xTimeToWake;

	configASSERT( pxEventList );
    2e30:	2800      	cmp	r0, #0
    2e32:	d101      	bne.n	2e38 <vTaskPlaceOnEventList+0xc>
    2e34:	b672      	cpsid	i
    2e36:	e7fe      	b.n	2e36 <vTaskPlaceOnEventList+0xa>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2e38:	4d0b      	ldr	r5, [pc, #44]	; (2e68 <vTaskPlaceOnEventList+0x3c>)
    2e3a:	6829      	ldr	r1, [r5, #0]
    2e3c:	3118      	adds	r1, #24
    2e3e:	4b0b      	ldr	r3, [pc, #44]	; (2e6c <vTaskPlaceOnEventList+0x40>)
    2e40:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2e42:	6828      	ldr	r0, [r5, #0]
    2e44:	3004      	adds	r0, #4
    2e46:	4b0a      	ldr	r3, [pc, #40]	; (2e70 <vTaskPlaceOnEventList+0x44>)
    2e48:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    2e4a:	1c63      	adds	r3, r4, #1
    2e4c:	d106      	bne.n	2e5c <vTaskPlaceOnEventList+0x30>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    2e4e:	4b06      	ldr	r3, [pc, #24]	; (2e68 <vTaskPlaceOnEventList+0x3c>)
    2e50:	6819      	ldr	r1, [r3, #0]
    2e52:	3104      	adds	r1, #4
    2e54:	4807      	ldr	r0, [pc, #28]	; (2e74 <vTaskPlaceOnEventList+0x48>)
    2e56:	4b08      	ldr	r3, [pc, #32]	; (2e78 <vTaskPlaceOnEventList+0x4c>)
    2e58:	4798      	blx	r3
    2e5a:	e004      	b.n	2e66 <vTaskPlaceOnEventList+0x3a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    2e5c:	4b07      	ldr	r3, [pc, #28]	; (2e7c <vTaskPlaceOnEventList+0x50>)
    2e5e:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    2e60:	1820      	adds	r0, r4, r0
    2e62:	4b07      	ldr	r3, [pc, #28]	; (2e80 <vTaskPlaceOnEventList+0x54>)
    2e64:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2e66:	bd70      	pop	{r4, r5, r6, pc}
    2e68:	20003c60 	.word	0x20003c60
    2e6c:	00001e9d 	.word	0x00001e9d
    2e70:	00001ecd 	.word	0x00001ecd
    2e74:	20003c8c 	.word	0x20003c8c
    2e78:	00001e85 	.word	0x00001e85
    2e7c:	20003c7c 	.word	0x20003c7c
    2e80:	000027a9 	.word	0x000027a9

00002e84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    2e84:	b570      	push	{r4, r5, r6, lr}
    2e86:	000c      	movs	r4, r1
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
    2e88:	2800      	cmp	r0, #0
    2e8a:	d101      	bne.n	2e90 <vTaskPlaceOnEventListRestricted+0xc>
    2e8c:	b672      	cpsid	i
    2e8e:	e7fe      	b.n	2e8e <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2e90:	4d07      	ldr	r5, [pc, #28]	; (2eb0 <vTaskPlaceOnEventListRestricted+0x2c>)
    2e92:	6829      	ldr	r1, [r5, #0]
    2e94:	3118      	adds	r1, #24
    2e96:	4b07      	ldr	r3, [pc, #28]	; (2eb4 <vTaskPlaceOnEventListRestricted+0x30>)
    2e98:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2e9a:	6828      	ldr	r0, [r5, #0]
    2e9c:	3004      	adds	r0, #4
    2e9e:	4b06      	ldr	r3, [pc, #24]	; (2eb8 <vTaskPlaceOnEventListRestricted+0x34>)
    2ea0:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    2ea2:	4b06      	ldr	r3, [pc, #24]	; (2ebc <vTaskPlaceOnEventListRestricted+0x38>)
    2ea4:	6818      	ldr	r0, [r3, #0]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    2ea6:	1900      	adds	r0, r0, r4
    2ea8:	4b05      	ldr	r3, [pc, #20]	; (2ec0 <vTaskPlaceOnEventListRestricted+0x3c>)
    2eaa:	4798      	blx	r3
	}
    2eac:	bd70      	pop	{r4, r5, r6, pc}
    2eae:	46c0      	nop			; (mov r8, r8)
    2eb0:	20003c60 	.word	0x20003c60
    2eb4:	00001e85 	.word	0x00001e85
    2eb8:	00001ecd 	.word	0x00001ecd
    2ebc:	20003c7c 	.word	0x20003c7c
    2ec0:	000027a9 	.word	0x000027a9

00002ec4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    2ec4:	b570      	push	{r4, r5, r6, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2ec6:	68c3      	ldr	r3, [r0, #12]
    2ec8:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
    2eca:	2d00      	cmp	r5, #0
    2ecc:	d101      	bne.n	2ed2 <xTaskRemoveFromEventList+0xe>
    2ece:	b672      	cpsid	i
    2ed0:	e7fe      	b.n	2ed0 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    2ed2:	002c      	movs	r4, r5
    2ed4:	3418      	adds	r4, #24
    2ed6:	0020      	movs	r0, r4
    2ed8:	4b14      	ldr	r3, [pc, #80]	; (2f2c <xTaskRemoveFromEventList+0x68>)
    2eda:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2edc:	4b14      	ldr	r3, [pc, #80]	; (2f30 <xTaskRemoveFromEventList+0x6c>)
    2ede:	681b      	ldr	r3, [r3, #0]
    2ee0:	2b00      	cmp	r3, #0
    2ee2:	d113      	bne.n	2f0c <xTaskRemoveFromEventList+0x48>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    2ee4:	1d2c      	adds	r4, r5, #4
    2ee6:	0020      	movs	r0, r4
    2ee8:	4b10      	ldr	r3, [pc, #64]	; (2f2c <xTaskRemoveFromEventList+0x68>)
    2eea:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    2eec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    2eee:	4a11      	ldr	r2, [pc, #68]	; (2f34 <xTaskRemoveFromEventList+0x70>)
    2ef0:	6812      	ldr	r2, [r2, #0]
    2ef2:	4293      	cmp	r3, r2
    2ef4:	d901      	bls.n	2efa <xTaskRemoveFromEventList+0x36>
    2ef6:	4a0f      	ldr	r2, [pc, #60]	; (2f34 <xTaskRemoveFromEventList+0x70>)
    2ef8:	6013      	str	r3, [r2, #0]
    2efa:	0098      	lsls	r0, r3, #2
    2efc:	18c3      	adds	r3, r0, r3
    2efe:	009b      	lsls	r3, r3, #2
    2f00:	480d      	ldr	r0, [pc, #52]	; (2f38 <xTaskRemoveFromEventList+0x74>)
    2f02:	18c0      	adds	r0, r0, r3
    2f04:	0021      	movs	r1, r4
    2f06:	4b0d      	ldr	r3, [pc, #52]	; (2f3c <xTaskRemoveFromEventList+0x78>)
    2f08:	4798      	blx	r3
    2f0a:	e003      	b.n	2f14 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2f0c:	0021      	movs	r1, r4
    2f0e:	480c      	ldr	r0, [pc, #48]	; (2f40 <xTaskRemoveFromEventList+0x7c>)
    2f10:	4b0a      	ldr	r3, [pc, #40]	; (2f3c <xTaskRemoveFromEventList+0x78>)
    2f12:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2f14:	4b0b      	ldr	r3, [pc, #44]	; (2f44 <xTaskRemoveFromEventList+0x80>)
    2f16:	681b      	ldr	r3, [r3, #0]
    2f18:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    2f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xReturn = pdFALSE;
    2f1c:	2000      	movs	r0, #0
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2f1e:	429a      	cmp	r2, r3
    2f20:	d903      	bls.n	2f2a <xTaskRemoveFromEventList+0x66>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    2f22:	2201      	movs	r2, #1
    2f24:	4b08      	ldr	r3, [pc, #32]	; (2f48 <xTaskRemoveFromEventList+0x84>)
    2f26:	601a      	str	r2, [r3, #0]
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    2f28:	3001      	adds	r0, #1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    2f2a:	bd70      	pop	{r4, r5, r6, pc}
    2f2c:	00001ecd 	.word	0x00001ecd
    2f30:	20003c78 	.word	0x20003c78
    2f34:	20003ca0 	.word	0x20003ca0
    2f38:	20003be8 	.word	0x20003be8
    2f3c:	00001e85 	.word	0x00001e85
    2f40:	20003c64 	.word	0x20003c64
    2f44:	20003c60 	.word	0x20003c60
    2f48:	20003ca4 	.word	0x20003ca4

00002f4c <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
    2f4c:	2800      	cmp	r0, #0
    2f4e:	d101      	bne.n	2f54 <vTaskSetTimeOutState+0x8>
    2f50:	b672      	cpsid	i
    2f52:	e7fe      	b.n	2f52 <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2f54:	4b03      	ldr	r3, [pc, #12]	; (2f64 <vTaskSetTimeOutState+0x18>)
    2f56:	681b      	ldr	r3, [r3, #0]
    2f58:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    2f5a:	4b03      	ldr	r3, [pc, #12]	; (2f68 <vTaskSetTimeOutState+0x1c>)
    2f5c:	681b      	ldr	r3, [r3, #0]
    2f5e:	6043      	str	r3, [r0, #4]
}
    2f60:	4770      	bx	lr
    2f62:	46c0      	nop			; (mov r8, r8)
    2f64:	20003bac 	.word	0x20003bac
    2f68:	20003c7c 	.word	0x20003c7c

00002f6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    2f6c:	b570      	push	{r4, r5, r6, lr}
    2f6e:	0004      	movs	r4, r0
    2f70:	000e      	movs	r6, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    2f72:	2800      	cmp	r0, #0
    2f74:	d101      	bne.n	2f7a <xTaskCheckForTimeOut+0xe>
    2f76:	b672      	cpsid	i
    2f78:	e7fe      	b.n	2f78 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
    2f7a:	2900      	cmp	r1, #0
    2f7c:	d101      	bne.n	2f82 <xTaskCheckForTimeOut+0x16>
    2f7e:	b672      	cpsid	i
    2f80:	e7fe      	b.n	2f80 <xTaskCheckForTimeOut+0x14>

	taskENTER_CRITICAL();
    2f82:	4b11      	ldr	r3, [pc, #68]	; (2fc8 <xTaskCheckForTimeOut+0x5c>)
    2f84:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    2f86:	4b11      	ldr	r3, [pc, #68]	; (2fcc <xTaskCheckForTimeOut+0x60>)
    2f88:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    2f8a:	6833      	ldr	r3, [r6, #0]
    2f8c:	1c5a      	adds	r2, r3, #1
    2f8e:	d015      	beq.n	2fbc <xTaskCheckForTimeOut+0x50>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2f90:	4a0f      	ldr	r2, [pc, #60]	; (2fd0 <xTaskCheckForTimeOut+0x64>)
    2f92:	6812      	ldr	r2, [r2, #0]
    2f94:	6820      	ldr	r0, [r4, #0]
    2f96:	4290      	cmp	r0, r2
    2f98:	d003      	beq.n	2fa2 <xTaskCheckForTimeOut+0x36>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    2f9a:	2501      	movs	r5, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2f9c:	6862      	ldr	r2, [r4, #4]
    2f9e:	4291      	cmp	r1, r2
    2fa0:	d20d      	bcs.n	2fbe <xTaskCheckForTimeOut+0x52>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    2fa2:	6862      	ldr	r2, [r4, #4]
    2fa4:	1a88      	subs	r0, r1, r2
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    2fa6:	2501      	movs	r5, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    2fa8:	4283      	cmp	r3, r0
    2faa:	d908      	bls.n	2fbe <xTaskCheckForTimeOut+0x52>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    2fac:	1a52      	subs	r2, r2, r1
    2fae:	18d3      	adds	r3, r2, r3
    2fb0:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
    2fb2:	0020      	movs	r0, r4
    2fb4:	4b07      	ldr	r3, [pc, #28]	; (2fd4 <xTaskCheckForTimeOut+0x68>)
    2fb6:	4798      	blx	r3
			xReturn = pdFALSE;
    2fb8:	2500      	movs	r5, #0
    2fba:	e000      	b.n	2fbe <xTaskCheckForTimeOut+0x52>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
    2fbc:	2500      	movs	r5, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    2fbe:	4b06      	ldr	r3, [pc, #24]	; (2fd8 <xTaskCheckForTimeOut+0x6c>)
    2fc0:	4798      	blx	r3

	return xReturn;
}
    2fc2:	0028      	movs	r0, r5
    2fc4:	bd70      	pop	{r4, r5, r6, pc}
    2fc6:	46c0      	nop			; (mov r8, r8)
    2fc8:	00001f61 	.word	0x00001f61
    2fcc:	20003c7c 	.word	0x20003c7c
    2fd0:	20003bac 	.word	0x20003bac
    2fd4:	00002f4d 	.word	0x00002f4d
    2fd8:	00001f79 	.word	0x00001f79

00002fdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    2fdc:	2201      	movs	r2, #1
    2fde:	4b01      	ldr	r3, [pc, #4]	; (2fe4 <vTaskMissedYield+0x8>)
    2fe0:	601a      	str	r2, [r3, #0]
}
    2fe2:	4770      	bx	lr
    2fe4:	20003ca4 	.word	0x20003ca4

00002fe8 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    2fe8:	4b01      	ldr	r3, [pc, #4]	; (2ff0 <xTaskGetCurrentTaskHandle+0x8>)
    2fea:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    2fec:	4770      	bx	lr
    2fee:	46c0      	nop			; (mov r8, r8)
    2ff0:	20003c60 	.word	0x20003c60

00002ff4 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    2ff4:	4b05      	ldr	r3, [pc, #20]	; (300c <xTaskGetSchedulerState+0x18>)
    2ff6:	681b      	ldr	r3, [r3, #0]
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    2ff8:	2001      	movs	r0, #1

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    2ffa:	2b00      	cmp	r3, #0
    2ffc:	d004      	beq.n	3008 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2ffe:	4b04      	ldr	r3, [pc, #16]	; (3010 <xTaskGetSchedulerState+0x1c>)
    3000:	6818      	ldr	r0, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    3002:	4243      	negs	r3, r0
    3004:	4158      	adcs	r0, r3
    3006:	0040      	lsls	r0, r0, #1
			}
		}

		return xReturn;
	}
    3008:	4770      	bx	lr
    300a:	46c0      	nop			; (mov r8, r8)
    300c:	20003bb4 	.word	0x20003bb4
    3010:	20003c78 	.word	0x20003c78

00003014 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    3014:	b570      	push	{r4, r5, r6, lr}
    3016:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    3018:	d031      	beq.n	307e <vTaskPriorityInherit+0x6a>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    301a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    301c:	4a18      	ldr	r2, [pc, #96]	; (3080 <vTaskPriorityInherit+0x6c>)
    301e:	6812      	ldr	r2, [r2, #0]
    3020:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    3022:	4293      	cmp	r3, r2
    3024:	d22b      	bcs.n	307e <vTaskPriorityInherit+0x6a>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3026:	6982      	ldr	r2, [r0, #24]
    3028:	2a00      	cmp	r2, #0
    302a:	db05      	blt.n	3038 <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    302c:	4a14      	ldr	r2, [pc, #80]	; (3080 <vTaskPriorityInherit+0x6c>)
    302e:	6812      	ldr	r2, [r2, #0]
    3030:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    3032:	2205      	movs	r2, #5
    3034:	1a52      	subs	r2, r2, r1
    3036:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3038:	009a      	lsls	r2, r3, #2
    303a:	18d3      	adds	r3, r2, r3
    303c:	009b      	lsls	r3, r3, #2
    303e:	4a11      	ldr	r2, [pc, #68]	; (3084 <vTaskPriorityInherit+0x70>)
    3040:	18d3      	adds	r3, r2, r3
    3042:	6962      	ldr	r2, [r4, #20]
    3044:	429a      	cmp	r2, r3
    3046:	d116      	bne.n	3076 <vTaskPriorityInherit+0x62>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3048:	1d25      	adds	r5, r4, #4
    304a:	0028      	movs	r0, r5
    304c:	4b0e      	ldr	r3, [pc, #56]	; (3088 <vTaskPriorityInherit+0x74>)
    304e:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3050:	4b0b      	ldr	r3, [pc, #44]	; (3080 <vTaskPriorityInherit+0x6c>)
    3052:	681b      	ldr	r3, [r3, #0]
    3054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3056:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    3058:	4a0c      	ldr	r2, [pc, #48]	; (308c <vTaskPriorityInherit+0x78>)
    305a:	6812      	ldr	r2, [r2, #0]
    305c:	4293      	cmp	r3, r2
    305e:	d901      	bls.n	3064 <vTaskPriorityInherit+0x50>
    3060:	4a0a      	ldr	r2, [pc, #40]	; (308c <vTaskPriorityInherit+0x78>)
    3062:	6013      	str	r3, [r2, #0]
    3064:	0098      	lsls	r0, r3, #2
    3066:	18c3      	adds	r3, r0, r3
    3068:	009b      	lsls	r3, r3, #2
    306a:	4806      	ldr	r0, [pc, #24]	; (3084 <vTaskPriorityInherit+0x70>)
    306c:	18c0      	adds	r0, r0, r3
    306e:	0029      	movs	r1, r5
    3070:	4b07      	ldr	r3, [pc, #28]	; (3090 <vTaskPriorityInherit+0x7c>)
    3072:	4798      	blx	r3
    3074:	e003      	b.n	307e <vTaskPriorityInherit+0x6a>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3076:	4b02      	ldr	r3, [pc, #8]	; (3080 <vTaskPriorityInherit+0x6c>)
    3078:	681b      	ldr	r3, [r3, #0]
    307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    307c:	62e3      	str	r3, [r4, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    307e:	bd70      	pop	{r4, r5, r6, pc}
    3080:	20003c60 	.word	0x20003c60
    3084:	20003be8 	.word	0x20003be8
    3088:	00001ecd 	.word	0x00001ecd
    308c:	20003ca0 	.word	0x20003ca0
    3090:	00001e85 	.word	0x00001e85

00003094 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    3094:	b570      	push	{r4, r5, r6, lr}
    3096:	1e05      	subs	r5, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    3098:	d01d      	beq.n	30d6 <vTaskPriorityDisinherit+0x42>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    309a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    309c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    309e:	4293      	cmp	r3, r2
    30a0:	d019      	beq.n	30d6 <vTaskPriorityDisinherit+0x42>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    30a2:	1d04      	adds	r4, r0, #4
    30a4:	0020      	movs	r0, r4
    30a6:	4b0c      	ldr	r3, [pc, #48]	; (30d8 <vTaskPriorityDisinherit+0x44>)
    30a8:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    30aa:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    30ac:	62e8      	str	r0, [r5, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    30ae:	69ab      	ldr	r3, [r5, #24]
    30b0:	2b00      	cmp	r3, #0
    30b2:	db02      	blt.n	30ba <vTaskPriorityDisinherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    30b4:	2305      	movs	r3, #5
    30b6:	1a1b      	subs	r3, r3, r0
    30b8:	61ab      	str	r3, [r5, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
    30ba:	4b08      	ldr	r3, [pc, #32]	; (30dc <vTaskPriorityDisinherit+0x48>)
    30bc:	681b      	ldr	r3, [r3, #0]
    30be:	4298      	cmp	r0, r3
    30c0:	d901      	bls.n	30c6 <vTaskPriorityDisinherit+0x32>
    30c2:	4b06      	ldr	r3, [pc, #24]	; (30dc <vTaskPriorityDisinherit+0x48>)
    30c4:	6018      	str	r0, [r3, #0]
    30c6:	0083      	lsls	r3, r0, #2
    30c8:	1818      	adds	r0, r3, r0
    30ca:	0080      	lsls	r0, r0, #2
    30cc:	4b04      	ldr	r3, [pc, #16]	; (30e0 <vTaskPriorityDisinherit+0x4c>)
    30ce:	1818      	adds	r0, r3, r0
    30d0:	0021      	movs	r1, r4
    30d2:	4b04      	ldr	r3, [pc, #16]	; (30e4 <vTaskPriorityDisinherit+0x50>)
    30d4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    30d6:	bd70      	pop	{r4, r5, r6, pc}
    30d8:	00001ecd 	.word	0x00001ecd
    30dc:	20003ca0 	.word	0x20003ca0
    30e0:	20003be8 	.word	0x20003be8
    30e4:	00001e85 	.word	0x00001e85

000030e8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    30e8:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    30ea:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    30ec:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    30ee:	4291      	cmp	r1, r2
    30f0:	d80b      	bhi.n	310a <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    30f2:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    30f4:	2401      	movs	r4, #1

	if( xNextExpiryTime <= xTimeNow )
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    30f6:	6983      	ldr	r3, [r0, #24]
    30f8:	429a      	cmp	r2, r3
    30fa:	d211      	bcs.n	3120 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    30fc:	1d01      	adds	r1, r0, #4
    30fe:	4b09      	ldr	r3, [pc, #36]	; (3124 <prvInsertTimerInActiveList+0x3c>)
    3100:	6818      	ldr	r0, [r3, #0]
    3102:	4b09      	ldr	r3, [pc, #36]	; (3128 <prvInsertTimerInActiveList+0x40>)
    3104:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    3106:	2400      	movs	r4, #0
    3108:	e00a      	b.n	3120 <prvInsertTimerInActiveList+0x38>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    310a:	429a      	cmp	r2, r3
    310c:	d202      	bcs.n	3114 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    310e:	2401      	movs	r4, #1
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    3110:	4299      	cmp	r1, r3
    3112:	d205      	bcs.n	3120 <prvInsertTimerInActiveList+0x38>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3114:	1d01      	adds	r1, r0, #4
    3116:	4b05      	ldr	r3, [pc, #20]	; (312c <prvInsertTimerInActiveList+0x44>)
    3118:	6818      	ldr	r0, [r3, #0]
    311a:	4b03      	ldr	r3, [pc, #12]	; (3128 <prvInsertTimerInActiveList+0x40>)
    311c:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    311e:	2400      	movs	r4, #0
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
    3120:	0020      	movs	r0, r4
    3122:	bd10      	pop	{r4, pc}
    3124:	20003cdc 	.word	0x20003cdc
    3128:	00001e9d 	.word	0x00001e9d
    312c:	20003ca8 	.word	0x20003ca8

00003130 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    3130:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    3132:	4b10      	ldr	r3, [pc, #64]	; (3174 <prvCheckForValidListAndQueue+0x44>)
    3134:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    3136:	4b10      	ldr	r3, [pc, #64]	; (3178 <prvCheckForValidListAndQueue+0x48>)
    3138:	681b      	ldr	r3, [r3, #0]
    313a:	2b00      	cmp	r3, #0
    313c:	d116      	bne.n	316c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    313e:	4d0f      	ldr	r5, [pc, #60]	; (317c <prvCheckForValidListAndQueue+0x4c>)
    3140:	0028      	movs	r0, r5
    3142:	4e0f      	ldr	r6, [pc, #60]	; (3180 <prvCheckForValidListAndQueue+0x50>)
    3144:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    3146:	4c0f      	ldr	r4, [pc, #60]	; (3184 <prvCheckForValidListAndQueue+0x54>)
    3148:	0020      	movs	r0, r4
    314a:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    314c:	4b0e      	ldr	r3, [pc, #56]	; (3188 <prvCheckForValidListAndQueue+0x58>)
    314e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    3150:	4b0e      	ldr	r3, [pc, #56]	; (318c <prvCheckForValidListAndQueue+0x5c>)
    3152:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    3154:	2200      	movs	r2, #0
    3156:	210c      	movs	r1, #12
    3158:	2002      	movs	r0, #2
    315a:	4b0d      	ldr	r3, [pc, #52]	; (3190 <prvCheckForValidListAndQueue+0x60>)
    315c:	4798      	blx	r3
			configASSERT( xTimerQueue );
    315e:	2800      	cmp	r0, #0
    3160:	d002      	beq.n	3168 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    3162:	4b05      	ldr	r3, [pc, #20]	; (3178 <prvCheckForValidListAndQueue+0x48>)
    3164:	6018      	str	r0, [r3, #0]
    3166:	e001      	b.n	316c <prvCheckForValidListAndQueue+0x3c>
			configASSERT( xTimerQueue );
    3168:	b672      	cpsid	i
    316a:	e7fe      	b.n	316a <prvCheckForValidListAndQueue+0x3a>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    316c:	4b09      	ldr	r3, [pc, #36]	; (3194 <prvCheckForValidListAndQueue+0x64>)
    316e:	4798      	blx	r3
}
    3170:	bd70      	pop	{r4, r5, r6, pc}
    3172:	46c0      	nop			; (mov r8, r8)
    3174:	00001f61 	.word	0x00001f61
    3178:	20003cd8 	.word	0x20003cd8
    317c:	20003cac 	.word	0x20003cac
    3180:	00001e65 	.word	0x00001e65
    3184:	20003cc0 	.word	0x20003cc0
    3188:	20003ca8 	.word	0x20003ca8
    318c:	20003cdc 	.word	0x20003cdc
    3190:	00002311 	.word	0x00002311
    3194:	00001f79 	.word	0x00001f79

00003198 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    3198:	b510      	push	{r4, lr}
    319a:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    319c:	4b0b      	ldr	r3, [pc, #44]	; (31cc <xTimerCreateTimerTask+0x34>)
    319e:	4798      	blx	r3

	if( xTimerQueue != NULL )
    31a0:	4b0b      	ldr	r3, [pc, #44]	; (31d0 <xTimerCreateTimerTask+0x38>)
    31a2:	681b      	ldr	r3, [r3, #0]
    31a4:	2b00      	cmp	r3, #0
    31a6:	d00d      	beq.n	31c4 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    31a8:	2300      	movs	r3, #0
    31aa:	9303      	str	r3, [sp, #12]
    31ac:	9302      	str	r3, [sp, #8]
    31ae:	9301      	str	r3, [sp, #4]
    31b0:	3302      	adds	r3, #2
    31b2:	9300      	str	r3, [sp, #0]
    31b4:	2300      	movs	r3, #0
    31b6:	2250      	movs	r2, #80	; 0x50
    31b8:	4906      	ldr	r1, [pc, #24]	; (31d4 <xTimerCreateTimerTask+0x3c>)
    31ba:	4807      	ldr	r0, [pc, #28]	; (31d8 <xTimerCreateTimerTask+0x40>)
    31bc:	4c07      	ldr	r4, [pc, #28]	; (31dc <xTimerCreateTimerTask+0x44>)
    31be:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    31c0:	2800      	cmp	r0, #0
    31c2:	d101      	bne.n	31c8 <xTimerCreateTimerTask+0x30>
    31c4:	b672      	cpsid	i
    31c6:	e7fe      	b.n	31c6 <xTimerCreateTimerTask+0x2e>
	return xReturn;
}
    31c8:	b004      	add	sp, #16
    31ca:	bd10      	pop	{r4, pc}
    31cc:	00003131 	.word	0x00003131
    31d0:	20003cd8 	.word	0x20003cd8
    31d4:	000067c4 	.word	0x000067c4
    31d8:	00003301 	.word	0x00003301
    31dc:	00002801 	.word	0x00002801

000031e0 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    31e0:	b530      	push	{r4, r5, lr}
    31e2:	b085      	sub	sp, #20
    31e4:	001d      	movs	r5, r3
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    31e6:	4b13      	ldr	r3, [pc, #76]	; (3234 <xTimerGenericCommand+0x54>)
    31e8:	681c      	ldr	r4, [r3, #0]
    31ea:	2c00      	cmp	r4, #0
    31ec:	d01f      	beq.n	322e <xTimerGenericCommand+0x4e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    31ee:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    31f0:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    31f2:	9003      	str	r0, [sp, #12]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    31f4:	2905      	cmp	r1, #5
    31f6:	dc13      	bgt.n	3220 <xTimerGenericCommand+0x40>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    31f8:	4b0f      	ldr	r3, [pc, #60]	; (3238 <xTimerGenericCommand+0x58>)
    31fa:	4798      	blx	r3
    31fc:	2802      	cmp	r0, #2
    31fe:	d107      	bne.n	3210 <xTimerGenericCommand+0x30>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3200:	4b0c      	ldr	r3, [pc, #48]	; (3234 <xTimerGenericCommand+0x54>)
    3202:	6818      	ldr	r0, [r3, #0]
    3204:	2300      	movs	r3, #0
    3206:	9a08      	ldr	r2, [sp, #32]
    3208:	a901      	add	r1, sp, #4
    320a:	4c0c      	ldr	r4, [pc, #48]	; (323c <xTimerGenericCommand+0x5c>)
    320c:	47a0      	blx	r4
    320e:	e00f      	b.n	3230 <xTimerGenericCommand+0x50>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3210:	4b08      	ldr	r3, [pc, #32]	; (3234 <xTimerGenericCommand+0x54>)
    3212:	6818      	ldr	r0, [r3, #0]
    3214:	2300      	movs	r3, #0
    3216:	2200      	movs	r2, #0
    3218:	a901      	add	r1, sp, #4
    321a:	4c08      	ldr	r4, [pc, #32]	; (323c <xTimerGenericCommand+0x5c>)
    321c:	47a0      	blx	r4
    321e:	e007      	b.n	3230 <xTimerGenericCommand+0x50>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3220:	2300      	movs	r3, #0
    3222:	002a      	movs	r2, r5
    3224:	a901      	add	r1, sp, #4
    3226:	0020      	movs	r0, r4
    3228:	4c05      	ldr	r4, [pc, #20]	; (3240 <xTimerGenericCommand+0x60>)
    322a:	47a0      	blx	r4
    322c:	e000      	b.n	3230 <xTimerGenericCommand+0x50>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    322e:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    3230:	b005      	add	sp, #20
    3232:	bd30      	pop	{r4, r5, pc}
    3234:	20003cd8 	.word	0x20003cd8
    3238:	00002ff5 	.word	0x00002ff5
    323c:	00002365 	.word	0x00002365
    3240:	000024dd 	.word	0x000024dd

00003244 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3244:	b5f0      	push	{r4, r5, r6, r7, lr}
    3246:	4657      	mov	r7, sl
    3248:	464e      	mov	r6, r9
    324a:	4645      	mov	r5, r8
    324c:	b4e0      	push	{r5, r6, r7}
    324e:	b082      	sub	sp, #8
    3250:	4681      	mov	r9, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    3252:	4b24      	ldr	r3, [pc, #144]	; (32e4 <prvSampleTimeNow+0xa0>)
    3254:	4798      	blx	r3
    3256:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
    3258:	4b23      	ldr	r3, [pc, #140]	; (32e8 <prvSampleTimeNow+0xa4>)
    325a:	681b      	ldr	r3, [r3, #0]
    325c:	4298      	cmp	r0, r3
    325e:	d233      	bcs.n	32c8 <prvSampleTimeNow+0x84>
    3260:	e023      	b.n	32aa <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3262:	68db      	ldr	r3, [r3, #12]
    3264:	681a      	ldr	r2, [r3, #0]
    3266:	4692      	mov	sl, r2

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    3268:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    326a:	1d25      	adds	r5, r4, #4
    326c:	0028      	movs	r0, r5
    326e:	47b8      	blx	r7
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3270:	0020      	movs	r0, r4
    3272:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3274:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3276:	69e3      	ldr	r3, [r4, #28]
    3278:	2b01      	cmp	r3, #1
    327a:	d118      	bne.n	32ae <prvSampleTimeNow+0x6a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    327c:	69a3      	ldr	r3, [r4, #24]
    327e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
    3280:	459a      	cmp	sl, r3
    3282:	d207      	bcs.n	3294 <prvSampleTimeNow+0x50>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3284:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3286:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3288:	4b18      	ldr	r3, [pc, #96]	; (32ec <prvSampleTimeNow+0xa8>)
    328a:	6818      	ldr	r0, [r3, #0]
    328c:	0029      	movs	r1, r5
    328e:	4b18      	ldr	r3, [pc, #96]	; (32f0 <prvSampleTimeNow+0xac>)
    3290:	4798      	blx	r3
    3292:	e00c      	b.n	32ae <prvSampleTimeNow+0x6a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3294:	2300      	movs	r3, #0
    3296:	9300      	str	r3, [sp, #0]
    3298:	4652      	mov	r2, sl
    329a:	2100      	movs	r1, #0
    329c:	0020      	movs	r0, r4
    329e:	4c15      	ldr	r4, [pc, #84]	; (32f4 <prvSampleTimeNow+0xb0>)
    32a0:	47a0      	blx	r4
				configASSERT( xResult );
    32a2:	2800      	cmp	r0, #0
    32a4:	d103      	bne.n	32ae <prvSampleTimeNow+0x6a>
    32a6:	b672      	cpsid	i
    32a8:	e7fe      	b.n	32a8 <prvSampleTimeNow+0x64>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    32aa:	4e10      	ldr	r6, [pc, #64]	; (32ec <prvSampleTimeNow+0xa8>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    32ac:	4f12      	ldr	r7, [pc, #72]	; (32f8 <prvSampleTimeNow+0xb4>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    32ae:	6833      	ldr	r3, [r6, #0]
    32b0:	681a      	ldr	r2, [r3, #0]
    32b2:	2a00      	cmp	r2, #0
    32b4:	d1d5      	bne.n	3262 <prvSampleTimeNow+0x1e>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    32b6:	4a11      	ldr	r2, [pc, #68]	; (32fc <prvSampleTimeNow+0xb8>)
    32b8:	490c      	ldr	r1, [pc, #48]	; (32ec <prvSampleTimeNow+0xa8>)
    32ba:	6810      	ldr	r0, [r2, #0]
    32bc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    32be:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
    32c0:	2301      	movs	r3, #1
    32c2:	464a      	mov	r2, r9
    32c4:	6013      	str	r3, [r2, #0]
    32c6:	e002      	b.n	32ce <prvSampleTimeNow+0x8a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    32c8:	2300      	movs	r3, #0
    32ca:	464a      	mov	r2, r9
    32cc:	6013      	str	r3, [r2, #0]
	}

	xLastTime = xTimeNow;
    32ce:	4b06      	ldr	r3, [pc, #24]	; (32e8 <prvSampleTimeNow+0xa4>)
    32d0:	4642      	mov	r2, r8
    32d2:	601a      	str	r2, [r3, #0]

	return xTimeNow;
}
    32d4:	4640      	mov	r0, r8
    32d6:	b002      	add	sp, #8
    32d8:	bc1c      	pop	{r2, r3, r4}
    32da:	4690      	mov	r8, r2
    32dc:	4699      	mov	r9, r3
    32de:	46a2      	mov	sl, r4
    32e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32e2:	46c0      	nop			; (mov r8, r8)
    32e4:	00002a5d 	.word	0x00002a5d
    32e8:	20003cd4 	.word	0x20003cd4
    32ec:	20003ca8 	.word	0x20003ca8
    32f0:	00001e9d 	.word	0x00001e9d
    32f4:	000031e1 	.word	0x000031e1
    32f8:	00001ecd 	.word	0x00001ecd
    32fc:	20003cdc 	.word	0x20003cdc

00003300 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    3300:	b5f0      	push	{r4, r5, r6, r7, lr}
    3302:	465f      	mov	r7, fp
    3304:	4656      	mov	r6, sl
    3306:	464d      	mov	r5, r9
    3308:	4644      	mov	r4, r8
    330a:	b4f0      	push	{r4, r5, r6, r7}
    330c:	b089      	sub	sp, #36	; 0x24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    330e:	4b52      	ldr	r3, [pc, #328]	; (3458 <prvTimerTask+0x158>)
    3310:	469b      	mov	fp, r3
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    3312:	4b52      	ldr	r3, [pc, #328]	; (345c <prvTimerTask+0x15c>)
    3314:	4699      	mov	r9, r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3316:	4b52      	ldr	r3, [pc, #328]	; (3460 <prvTimerTask+0x160>)
    3318:	4698      	mov	r8, r3
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    331a:	465b      	mov	r3, fp
    331c:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    331e:	681a      	ldr	r2, [r3, #0]
    3320:	2a00      	cmp	r2, #0
    3322:	d100      	bne.n	3326 <prvTimerTask+0x26>
    3324:	e08f      	b.n	3446 <prvTimerTask+0x146>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3326:	68db      	ldr	r3, [r3, #12]
    3328:	681d      	ldr	r5, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    332a:	4b4c      	ldr	r3, [pc, #304]	; (345c <prvTimerTask+0x15c>)
    332c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    332e:	a805      	add	r0, sp, #20
    3330:	4b4b      	ldr	r3, [pc, #300]	; (3460 <prvTimerTask+0x160>)
    3332:	4798      	blx	r3
    3334:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
    3336:	9b05      	ldr	r3, [sp, #20]
    3338:	2b00      	cmp	r3, #0
    333a:	d131      	bne.n	33a0 <prvTimerTask+0xa0>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    333c:	4285      	cmp	r5, r0
    333e:	d823      	bhi.n	3388 <prvTimerTask+0x88>
			{
				( void ) xTaskResumeAll();
    3340:	4b48      	ldr	r3, [pc, #288]	; (3464 <prvTimerTask+0x164>)
    3342:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    3344:	4b44      	ldr	r3, [pc, #272]	; (3458 <prvTimerTask+0x158>)
    3346:	681b      	ldr	r3, [r3, #0]
    3348:	68db      	ldr	r3, [r3, #12]
    334a:	68de      	ldr	r6, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    334c:	1d30      	adds	r0, r6, #4
    334e:	4b46      	ldr	r3, [pc, #280]	; (3468 <prvTimerTask+0x168>)
    3350:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3352:	69f3      	ldr	r3, [r6, #28]
    3354:	2b01      	cmp	r3, #1
    3356:	d113      	bne.n	3380 <prvTimerTask+0x80>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    3358:	69b3      	ldr	r3, [r6, #24]
    335a:	18e9      	adds	r1, r5, r3
    335c:	002b      	movs	r3, r5
    335e:	0022      	movs	r2, r4
    3360:	0030      	movs	r0, r6
    3362:	4c42      	ldr	r4, [pc, #264]	; (346c <prvTimerTask+0x16c>)
    3364:	47a0      	blx	r4
    3366:	2801      	cmp	r0, #1
    3368:	d10a      	bne.n	3380 <prvTimerTask+0x80>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    336a:	2300      	movs	r3, #0
    336c:	9300      	str	r3, [sp, #0]
    336e:	002a      	movs	r2, r5
    3370:	2100      	movs	r1, #0
    3372:	0030      	movs	r0, r6
    3374:	4c3e      	ldr	r4, [pc, #248]	; (3470 <prvTimerTask+0x170>)
    3376:	47a0      	blx	r4
			configASSERT( xResult );
    3378:	2800      	cmp	r0, #0
    337a:	d101      	bne.n	3380 <prvTimerTask+0x80>
    337c:	b672      	cpsid	i
    337e:	e7fe      	b.n	337e <prvTimerTask+0x7e>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3380:	6a73      	ldr	r3, [r6, #36]	; 0x24
    3382:	0030      	movs	r0, r6
    3384:	4798      	blx	r3
    3386:	e00d      	b.n	33a4 <prvTimerTask+0xa4>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    3388:	1b29      	subs	r1, r5, r4
    338a:	4b3a      	ldr	r3, [pc, #232]	; (3474 <prvTimerTask+0x174>)
    338c:	6818      	ldr	r0, [r3, #0]
    338e:	4b3a      	ldr	r3, [pc, #232]	; (3478 <prvTimerTask+0x178>)
    3390:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    3392:	4b34      	ldr	r3, [pc, #208]	; (3464 <prvTimerTask+0x164>)
    3394:	4798      	blx	r3
    3396:	2800      	cmp	r0, #0
    3398:	d104      	bne.n	33a4 <prvTimerTask+0xa4>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
    339a:	4b38      	ldr	r3, [pc, #224]	; (347c <prvTimerTask+0x17c>)
    339c:	4798      	blx	r3
    339e:	e001      	b.n	33a4 <prvTimerTask+0xa4>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    33a0:	4b30      	ldr	r3, [pc, #192]	; (3464 <prvTimerTask+0x164>)
    33a2:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    33a4:	4d33      	ldr	r5, [pc, #204]	; (3474 <prvTimerTask+0x174>)
    33a6:	4c36      	ldr	r4, [pc, #216]	; (3480 <prvTimerTask+0x180>)
    33a8:	e045      	b.n	3436 <prvTimerTask+0x136>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    33aa:	9b05      	ldr	r3, [sp, #20]
    33ac:	9303      	str	r3, [sp, #12]
    33ae:	2b00      	cmp	r3, #0
    33b0:	db41      	blt.n	3436 <prvTimerTask+0x136>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    33b2:	9e07      	ldr	r6, [sp, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    33b4:	6973      	ldr	r3, [r6, #20]
    33b6:	2b00      	cmp	r3, #0
    33b8:	d002      	beq.n	33c0 <prvTimerTask+0xc0>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    33ba:	1d30      	adds	r0, r6, #4
    33bc:	4b2a      	ldr	r3, [pc, #168]	; (3468 <prvTimerTask+0x168>)
    33be:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    33c0:	a804      	add	r0, sp, #16
    33c2:	4b27      	ldr	r3, [pc, #156]	; (3460 <prvTimerTask+0x160>)
    33c4:	4798      	blx	r3

			switch( xMessage.xMessageID )
    33c6:	9b05      	ldr	r3, [sp, #20]
    33c8:	2b09      	cmp	r3, #9
    33ca:	d834      	bhi.n	3436 <prvTimerTask+0x136>
    33cc:	009b      	lsls	r3, r3, #2
    33ce:	4a2d      	ldr	r2, [pc, #180]	; (3484 <prvTimerTask+0x184>)
    33d0:	58d3      	ldr	r3, [r2, r3]
    33d2:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    33d4:	9b06      	ldr	r3, [sp, #24]
    33d6:	69b2      	ldr	r2, [r6, #24]
    33d8:	4694      	mov	ip, r2
    33da:	4463      	add	r3, ip
    33dc:	0019      	movs	r1, r3
    33de:	9b06      	ldr	r3, [sp, #24]
    33e0:	0002      	movs	r2, r0
    33e2:	0030      	movs	r0, r6
    33e4:	4f21      	ldr	r7, [pc, #132]	; (346c <prvTimerTask+0x16c>)
    33e6:	47b8      	blx	r7
    33e8:	2801      	cmp	r0, #1
    33ea:	d124      	bne.n	3436 <prvTimerTask+0x136>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    33ec:	0030      	movs	r0, r6
    33ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
    33f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    33f2:	69f3      	ldr	r3, [r6, #28]
    33f4:	2b01      	cmp	r3, #1
    33f6:	d11e      	bne.n	3436 <prvTimerTask+0x136>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    33f8:	9b06      	ldr	r3, [sp, #24]
    33fa:	69b1      	ldr	r1, [r6, #24]
    33fc:	468c      	mov	ip, r1
    33fe:	4463      	add	r3, ip
    3400:	001a      	movs	r2, r3
    3402:	2300      	movs	r3, #0
    3404:	9300      	str	r3, [sp, #0]
    3406:	2100      	movs	r1, #0
    3408:	0030      	movs	r0, r6
    340a:	4e19      	ldr	r6, [pc, #100]	; (3470 <prvTimerTask+0x170>)
    340c:	47b0      	blx	r6
							configASSERT( xResult );
    340e:	2800      	cmp	r0, #0
    3410:	d111      	bne.n	3436 <prvTimerTask+0x136>
    3412:	b672      	cpsid	i
    3414:	e7fe      	b.n	3414 <prvTimerTask+0x114>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3416:	9906      	ldr	r1, [sp, #24]
    3418:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    341a:	2900      	cmp	r1, #0
    341c:	d101      	bne.n	3422 <prvTimerTask+0x122>
    341e:	b672      	cpsid	i
    3420:	e7fe      	b.n	3420 <prvTimerTask+0x120>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3422:	1841      	adds	r1, r0, r1
    3424:	0003      	movs	r3, r0
    3426:	0002      	movs	r2, r0
    3428:	0030      	movs	r0, r6
    342a:	4e10      	ldr	r6, [pc, #64]	; (346c <prvTimerTask+0x16c>)
    342c:	47b0      	blx	r6
    342e:	e002      	b.n	3436 <prvTimerTask+0x136>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    3430:	0030      	movs	r0, r6
    3432:	4b15      	ldr	r3, [pc, #84]	; (3488 <prvTimerTask+0x188>)
    3434:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3436:	2300      	movs	r3, #0
    3438:	2200      	movs	r2, #0
    343a:	a905      	add	r1, sp, #20
    343c:	6828      	ldr	r0, [r5, #0]
    343e:	47a0      	blx	r4
    3440:	2800      	cmp	r0, #0
    3442:	d1b2      	bne.n	33aa <prvTimerTask+0xaa>
    3444:	e769      	b.n	331a <prvTimerTask+0x1a>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    3446:	47c8      	blx	r9
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3448:	a805      	add	r0, sp, #20
    344a:	47c0      	blx	r8
    344c:	0004      	movs	r4, r0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    344e:	2500      	movs	r5, #0
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
    3450:	9b05      	ldr	r3, [sp, #20]
    3452:	2b00      	cmp	r3, #0
    3454:	d098      	beq.n	3388 <prvTimerTask+0x88>
    3456:	e7a3      	b.n	33a0 <prvTimerTask+0xa0>
    3458:	20003ca8 	.word	0x20003ca8
    345c:	00002a4d 	.word	0x00002a4d
    3460:	00003245 	.word	0x00003245
    3464:	00002ba1 	.word	0x00002ba1
    3468:	00001ecd 	.word	0x00001ecd
    346c:	000030e9 	.word	0x000030e9
    3470:	000031e1 	.word	0x000031e1
    3474:	20003cd8 	.word	0x20003cd8
    3478:	00002731 	.word	0x00002731
    347c:	00001f49 	.word	0x00001f49
    3480:	000025a5 	.word	0x000025a5
    3484:	0000679c 	.word	0x0000679c
    3488:	000020ed 	.word	0x000020ed

0000348c <adc_complete_callback>:

/* ADC Callback Function */
void adc_complete_callback(struct adc_module *const module)
{
	/* Set ADC conversion ended flag */
	adc_read_done = true;
    348c:	2201      	movs	r2, #1
    348e:	4b01      	ldr	r3, [pc, #4]	; (3494 <adc_complete_callback+0x8>)
    3490:	701a      	strb	r2, [r3, #0]
}
    3492:	4770      	bx	lr
    3494:	20003cfa 	.word	0x20003cfa

00003498 <evaluate_led_output>:
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3498:	4a3b      	ldr	r2, [pc, #236]	; (3588 <evaluate_led_output+0xf0>)
    349a:	0013      	movs	r3, r2
    349c:	3380      	adds	r3, #128	; 0x80
    349e:	2102      	movs	r1, #2
    34a0:	6159      	str	r1, [r3, #20]
    34a2:	2180      	movs	r1, #128	; 0x80
    34a4:	0209      	lsls	r1, r1, #8
    34a6:	6151      	str	r1, [r2, #20]
    34a8:	2180      	movs	r1, #128	; 0x80
    34aa:	0109      	lsls	r1, r1, #4
    34ac:	6159      	str	r1, [r3, #20]
    34ae:	2180      	movs	r1, #128	; 0x80
    34b0:	0509      	lsls	r1, r1, #20
    34b2:	6151      	str	r1, [r2, #20]
    34b4:	2180      	movs	r1, #128	; 0x80
    34b6:	0249      	lsls	r1, r1, #9
    34b8:	6151      	str	r1, [r2, #20]
    34ba:	2280      	movs	r2, #128	; 0x80
    34bc:	0292      	lsls	r2, r2, #10
    34be:	615a      	str	r2, [r3, #20]
    34c0:	2280      	movs	r2, #128	; 0x80
    34c2:	03d2      	lsls	r2, r2, #15
    34c4:	615a      	str	r2, [r3, #20]
    34c6:	2280      	movs	r2, #128	; 0x80
    34c8:	0412      	lsls	r2, r2, #16
    34ca:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(EXT3_PIN_9, false);
	port_pin_set_output_level(EXT3_PIN_15, false);
	port_pin_set_output_level(EXT3_PIN_16, false);
	port_pin_set_output_level(EXT3_PIN_18, false);
	
	if(value >= QUANTUM_VALUE) port_pin_set_output_level(EXT3_PIN_4, true);
    34cc:	28ff      	cmp	r0, #255	; 0xff
    34ce:	d902      	bls.n	34d6 <evaluate_led_output+0x3e>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    34d0:	2202      	movs	r2, #2
    34d2:	619a      	str	r2, [r3, #24]
    34d4:	e002      	b.n	34dc <evaluate_led_output+0x44>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    34d6:	2202      	movs	r2, #2
    34d8:	4b2c      	ldr	r3, [pc, #176]	; (358c <evaluate_led_output+0xf4>)
    34da:	615a      	str	r2, [r3, #20]
	else port_pin_set_output_level(EXT3_PIN_4, false);

	if(value >= QUANTUM_VALUE * 2) port_pin_set_output_level(EXT3_PIN_6, true);
    34dc:	4b2c      	ldr	r3, [pc, #176]	; (3590 <evaluate_led_output+0xf8>)
    34de:	4298      	cmp	r0, r3
    34e0:	d904      	bls.n	34ec <evaluate_led_output+0x54>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    34e2:	2280      	movs	r2, #128	; 0x80
    34e4:	0212      	lsls	r2, r2, #8
    34e6:	4b28      	ldr	r3, [pc, #160]	; (3588 <evaluate_led_output+0xf0>)
    34e8:	619a      	str	r2, [r3, #24]
    34ea:	e003      	b.n	34f4 <evaluate_led_output+0x5c>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    34ec:	2280      	movs	r2, #128	; 0x80
    34ee:	0212      	lsls	r2, r2, #8
    34f0:	4b25      	ldr	r3, [pc, #148]	; (3588 <evaluate_led_output+0xf0>)
    34f2:	615a      	str	r2, [r3, #20]
	else port_pin_set_output_level(EXT3_PIN_6, false);

	if(value >= QUANTUM_VALUE * 3) port_pin_set_output_level(EXT3_PIN_8, true);
    34f4:	4b27      	ldr	r3, [pc, #156]	; (3594 <evaluate_led_output+0xfc>)
    34f6:	4298      	cmp	r0, r3
    34f8:	d904      	bls.n	3504 <evaluate_led_output+0x6c>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    34fa:	2280      	movs	r2, #128	; 0x80
    34fc:	0112      	lsls	r2, r2, #4
    34fe:	4b23      	ldr	r3, [pc, #140]	; (358c <evaluate_led_output+0xf4>)
    3500:	619a      	str	r2, [r3, #24]
    3502:	e003      	b.n	350c <evaluate_led_output+0x74>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3504:	2280      	movs	r2, #128	; 0x80
    3506:	0112      	lsls	r2, r2, #4
    3508:	4b20      	ldr	r3, [pc, #128]	; (358c <evaluate_led_output+0xf4>)
    350a:	615a      	str	r2, [r3, #20]
	else port_pin_set_output_level(EXT3_PIN_8, false);

	if(value >= QUANTUM_VALUE * 4) port_pin_set_output_level(EXT3_PIN_10, true);
    350c:	4b22      	ldr	r3, [pc, #136]	; (3598 <evaluate_led_output+0x100>)
    350e:	4298      	cmp	r0, r3
    3510:	d904      	bls.n	351c <evaluate_led_output+0x84>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3512:	2280      	movs	r2, #128	; 0x80
    3514:	0512      	lsls	r2, r2, #20
    3516:	4b1c      	ldr	r3, [pc, #112]	; (3588 <evaluate_led_output+0xf0>)
    3518:	619a      	str	r2, [r3, #24]
    351a:	e003      	b.n	3524 <evaluate_led_output+0x8c>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    351c:	2280      	movs	r2, #128	; 0x80
    351e:	0512      	lsls	r2, r2, #20
    3520:	4b19      	ldr	r3, [pc, #100]	; (3588 <evaluate_led_output+0xf0>)
    3522:	615a      	str	r2, [r3, #20]
	else port_pin_set_output_level(EXT3_PIN_10, false);

	if(value >= QUANTUM_VALUE * 5) port_pin_set_output_level(EXT3_PIN_9, true);
    3524:	4b1d      	ldr	r3, [pc, #116]	; (359c <evaluate_led_output+0x104>)
    3526:	4298      	cmp	r0, r3
    3528:	d904      	bls.n	3534 <evaluate_led_output+0x9c>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    352a:	2280      	movs	r2, #128	; 0x80
    352c:	0252      	lsls	r2, r2, #9
    352e:	4b16      	ldr	r3, [pc, #88]	; (3588 <evaluate_led_output+0xf0>)
    3530:	619a      	str	r2, [r3, #24]
    3532:	e003      	b.n	353c <evaluate_led_output+0xa4>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3534:	2280      	movs	r2, #128	; 0x80
    3536:	0252      	lsls	r2, r2, #9
    3538:	4b13      	ldr	r3, [pc, #76]	; (3588 <evaluate_led_output+0xf0>)
    353a:	615a      	str	r2, [r3, #20]
	else port_pin_set_output_level(EXT3_PIN_9, false);

	if(value >= QUANTUM_VALUE * 6) port_pin_set_output_level(EXT3_PIN_15, true);
    353c:	4b18      	ldr	r3, [pc, #96]	; (35a0 <evaluate_led_output+0x108>)
    353e:	4298      	cmp	r0, r3
    3540:	d904      	bls.n	354c <evaluate_led_output+0xb4>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3542:	2280      	movs	r2, #128	; 0x80
    3544:	0292      	lsls	r2, r2, #10
    3546:	4b11      	ldr	r3, [pc, #68]	; (358c <evaluate_led_output+0xf4>)
    3548:	619a      	str	r2, [r3, #24]
    354a:	e003      	b.n	3554 <evaluate_led_output+0xbc>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    354c:	2280      	movs	r2, #128	; 0x80
    354e:	0292      	lsls	r2, r2, #10
    3550:	4b0e      	ldr	r3, [pc, #56]	; (358c <evaluate_led_output+0xf4>)
    3552:	615a      	str	r2, [r3, #20]
	else port_pin_set_output_level(EXT3_PIN_15, false);

	if(value >= QUANTUM_VALUE * 7) port_pin_set_output_level(EXT3_PIN_16, true);
    3554:	4b13      	ldr	r3, [pc, #76]	; (35a4 <evaluate_led_output+0x10c>)
    3556:	4298      	cmp	r0, r3
    3558:	d904      	bls.n	3564 <evaluate_led_output+0xcc>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    355a:	2280      	movs	r2, #128	; 0x80
    355c:	03d2      	lsls	r2, r2, #15
    355e:	4b0b      	ldr	r3, [pc, #44]	; (358c <evaluate_led_output+0xf4>)
    3560:	619a      	str	r2, [r3, #24]
    3562:	e003      	b.n	356c <evaluate_led_output+0xd4>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3564:	2280      	movs	r2, #128	; 0x80
    3566:	03d2      	lsls	r2, r2, #15
    3568:	4b08      	ldr	r3, [pc, #32]	; (358c <evaluate_led_output+0xf4>)
    356a:	615a      	str	r2, [r3, #20]
	else port_pin_set_output_level(EXT3_PIN_16, false);

	if(value >= QUANTUM_VALUE * 8) port_pin_set_output_level(EXT3_PIN_18, true);
    356c:	4b0e      	ldr	r3, [pc, #56]	; (35a8 <evaluate_led_output+0x110>)
    356e:	4298      	cmp	r0, r3
    3570:	d904      	bls.n	357c <evaluate_led_output+0xe4>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3572:	2280      	movs	r2, #128	; 0x80
    3574:	0412      	lsls	r2, r2, #16
    3576:	4b05      	ldr	r3, [pc, #20]	; (358c <evaluate_led_output+0xf4>)
    3578:	619a      	str	r2, [r3, #24]
    357a:	e003      	b.n	3584 <evaluate_led_output+0xec>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    357c:	2280      	movs	r2, #128	; 0x80
    357e:	0412      	lsls	r2, r2, #16
    3580:	4b02      	ldr	r3, [pc, #8]	; (358c <evaluate_led_output+0xf4>)
    3582:	615a      	str	r2, [r3, #20]
	else port_pin_set_output_level(EXT3_PIN_18, false);


}
    3584:	4770      	bx	lr
    3586:	46c0      	nop			; (mov r8, r8)
    3588:	40002800 	.word	0x40002800
    358c:	40002880 	.word	0x40002880
    3590:	000001ff 	.word	0x000001ff
    3594:	000002ff 	.word	0x000002ff
    3598:	000003ff 	.word	0x000003ff
    359c:	000004ff 	.word	0x000004ff
    35a0:	000005ff 	.word	0x000005ff
    35a4:	000006ff 	.word	0x000006ff
    35a8:	000007ff 	.word	0x000007ff

000035ac <uart_task>:



	
static void uart_task(void *params)
{
    35ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ae:	4647      	mov	r7, r8
    35b0:	b480      	push	{r7}
    35b2:	b084      	sub	sp, #16

	
	//uint32_t packet_length = sizeof(packet);
	//char* temporary_char = &s[0];
	
	 memset(buffer_temp,0,sizeof(packet));
    35b4:	2208      	movs	r2, #8
    35b6:	2100      	movs	r1, #0
    35b8:	a801      	add	r0, sp, #4
    35ba:	4b59      	ldr	r3, [pc, #356]	; (3720 <uart_task+0x174>)
    35bc:	4798      	blx	r3
	char current_char;
	char *current_char_ptr = &current_char;
	char r;
	packet *pkt_temp_ptr;
	uint8_t buffer_temp[sizeof(packet)];
	uint32_t buffer_temp_index = 0;
    35be:	2400      	movs	r4, #0
	 memset(buffer_temp,0,sizeof(packet));
	
	for (;;) {

		// Any characters queued? Handle them!
		while (xQueueReceive(terminal_in_queue, current_char_ptr, 0)) 
    35c0:	4f58      	ldr	r7, [pc, #352]	; (3724 <uart_task+0x178>)
    35c2:	4e59      	ldr	r6, [pc, #356]	; (3728 <uart_task+0x17c>)
			

			*current_char_ptr = '\0';
		}

		vTaskDelay(UART_TASK_DELAY);
    35c4:	4b59      	ldr	r3, [pc, #356]	; (372c <uart_task+0x180>)
    35c6:	4698      	mov	r8, r3
    35c8:	e09d      	b.n	3706 <uart_task+0x15a>

		// Any characters queued? Handle them!
		while (xQueueReceive(terminal_in_queue, current_char_ptr, 0)) 
		{
			
			r = *current_char_ptr;
    35ca:	230f      	movs	r3, #15
    35cc:	446b      	add	r3, sp
    35ce:	781b      	ldrb	r3, [r3, #0]
			
			switch(r)
    35d0:	2b40      	cmp	r3, #64	; 0x40
    35d2:	d000      	beq.n	35d6 <uart_task+0x2a>
    35d4:	e08e      	b.n	36f4 <uart_task+0x148>
			{
				case '@':
				
					buffer_temp[buffer_temp_index] = r;
    35d6:	ad01      	add	r5, sp, #4
    35d8:	552b      	strb	r3, [r5, r4]
					
					buffer_temp_index++;
					
					pkt_temp_ptr = (packet*)&buffer_temp[0];
					pkt = *pkt_temp_ptr;
    35da:	2208      	movs	r2, #8
    35dc:	0029      	movs	r1, r5
    35de:	4854      	ldr	r0, [pc, #336]	; (3730 <uart_task+0x184>)
    35e0:	4b54      	ldr	r3, [pc, #336]	; (3734 <uart_task+0x188>)
    35e2:	4798      	blx	r3
					
					
					if ((pkt_temp_ptr->STX == STX_STRING) & (pkt_temp_ptr->ETX == ETX_STRING))
    35e4:	782b      	ldrb	r3, [r5, #0]
    35e6:	2b23      	cmp	r3, #35	; 0x23
    35e8:	d17d      	bne.n	36e6 <uart_task+0x13a>
    35ea:	ab01      	add	r3, sp, #4
    35ec:	79db      	ldrb	r3, [r3, #7]
    35ee:	2b40      	cmp	r3, #64	; 0x40
    35f0:	d179      	bne.n	36e6 <uart_task+0x13a>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    35f2:	2280      	movs	r2, #128	; 0x80
    35f4:	00d2      	lsls	r2, r2, #3
    35f6:	4b50      	ldr	r3, [pc, #320]	; (3738 <uart_task+0x18c>)
    35f8:	61da      	str	r2, [r3, #28]
					{
						port_pin_toggle_output_level(LED_0_PIN);
						switch (pkt_temp_ptr->cmd)
    35fa:	ab01      	add	r3, sp, #4
    35fc:	785b      	ldrb	r3, [r3, #1]
    35fe:	2b52      	cmp	r3, #82	; 0x52
    3600:	d002      	beq.n	3608 <uart_task+0x5c>
    3602:	2b57      	cmp	r3, #87	; 0x57
    3604:	d02c      	beq.n	3660 <uart_task+0xb4>
    3606:	e06e      	b.n	36e6 <uart_task+0x13a>
						{
							case CMD_READ:
							if(pkt_temp_ptr->sub_cmd == sb_cmd_array[ping])
    3608:	ab01      	add	r3, sp, #4
    360a:	789b      	ldrb	r3, [r3, #2]
    360c:	4a4b      	ldr	r2, [pc, #300]	; (373c <uart_task+0x190>)
    360e:	7812      	ldrb	r2, [r2, #0]
    3610:	429a      	cmp	r2, r3
    3612:	d10d      	bne.n	3630 <uart_task+0x84>
							{
									pkt.sub_cmd = pkt_temp_ptr->sub_cmd;
    3614:	4946      	ldr	r1, [pc, #280]	; (3730 <uart_task+0x184>)
    3616:	708b      	strb	r3, [r1, #2]
									pkt.payload[0]=0xAA;
    3618:	23aa      	movs	r3, #170	; 0xaa
    361a:	70cb      	strb	r3, [r1, #3]
									pkt.payload[1]=0xBB;
    361c:	3311      	adds	r3, #17
    361e:	710b      	strb	r3, [r1, #4]
									usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    3620:	2208      	movs	r2, #8
    3622:	4847      	ldr	r0, [pc, #284]	; (3740 <uart_task+0x194>)
    3624:	4b47      	ldr	r3, [pc, #284]	; (3744 <uart_task+0x198>)
    3626:	4798      	blx	r3
									delay_ms(25);
    3628:	2019      	movs	r0, #25
    362a:	4b47      	ldr	r3, [pc, #284]	; (3748 <uart_task+0x19c>)
    362c:	4798      	blx	r3
    362e:	e05a      	b.n	36e6 <uart_task+0x13a>
							}
							else if(pkt_temp_ptr->sub_cmd == sb_cmd_array[read_sensor])
    3630:	4a42      	ldr	r2, [pc, #264]	; (373c <uart_task+0x190>)
    3632:	7852      	ldrb	r2, [r2, #1]
    3634:	429a      	cmp	r2, r3
    3636:	d156      	bne.n	36e6 <uart_task+0x13a>
							{
									pkt.sub_cmd = pkt_temp_ptr->sub_cmd;
    3638:	493d      	ldr	r1, [pc, #244]	; (3730 <uart_task+0x184>)
    363a:	708b      	strb	r3, [r1, #2]
									pkt.payload[0]=(uint8_t)result;
    363c:	4b43      	ldr	r3, [pc, #268]	; (374c <uart_task+0x1a0>)
    363e:	881b      	ldrh	r3, [r3, #0]
    3640:	70cb      	strb	r3, [r1, #3]
									pkt.payload[1]=(uint8_t)(result>>8);
    3642:	0a1b      	lsrs	r3, r3, #8
    3644:	710b      	strb	r3, [r1, #4]
									//pkt.payload[0]=(uint8_t)integrale;
									//pkt.payload[1]=(uint8_t)(integrale>>8);									
									pkt.payload[2]=0x00;
    3646:	2300      	movs	r3, #0
    3648:	714b      	strb	r3, [r1, #5]
									pkt.payload[3]=(uint8_t)(alarm_detected);
    364a:	4b41      	ldr	r3, [pc, #260]	; (3750 <uart_task+0x1a4>)
    364c:	781b      	ldrb	r3, [r3, #0]
    364e:	718b      	strb	r3, [r1, #6]
									usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    3650:	2208      	movs	r2, #8
    3652:	483b      	ldr	r0, [pc, #236]	; (3740 <uart_task+0x194>)
    3654:	4b3b      	ldr	r3, [pc, #236]	; (3744 <uart_task+0x198>)
    3656:	4798      	blx	r3
									delay_ms(25);
    3658:	2019      	movs	r0, #25
    365a:	4b3b      	ldr	r3, [pc, #236]	; (3748 <uart_task+0x19c>)
    365c:	4798      	blx	r3
    365e:	e042      	b.n	36e6 <uart_task+0x13a>
							}
							break;
							case CMD_WRITE:
							if(pkt_temp_ptr->sub_cmd == sb_cmd_array[set_ncamp])
    3660:	ab01      	add	r3, sp, #4
    3662:	789b      	ldrb	r3, [r3, #2]
    3664:	4a35      	ldr	r2, [pc, #212]	; (373c <uart_task+0x190>)
    3666:	7892      	ldrb	r2, [r2, #2]
    3668:	429a      	cmp	r2, r3
    366a:	d111      	bne.n	3690 <uart_task+0xe4>
							{
								value_rx = (uint16_t)(pkt_temp_ptr->payload[1] << 8 | (pkt_temp_ptr->payload[0]));
    366c:	aa01      	add	r2, sp, #4
    366e:	7913      	ldrb	r3, [r2, #4]
    3670:	021b      	lsls	r3, r3, #8
    3672:	78d2      	ldrb	r2, [r2, #3]
    3674:	4313      	orrs	r3, r2
    3676:	4a37      	ldr	r2, [pc, #220]	; (3754 <uart_task+0x1a8>)
    3678:	8013      	strh	r3, [r2, #0]
								n_sample = value_rx;
    367a:	4a37      	ldr	r2, [pc, #220]	; (3758 <uart_task+0x1ac>)
    367c:	6013      	str	r3, [r2, #0]
								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    367e:	2208      	movs	r2, #8
    3680:	492b      	ldr	r1, [pc, #172]	; (3730 <uart_task+0x184>)
    3682:	482f      	ldr	r0, [pc, #188]	; (3740 <uart_task+0x194>)
    3684:	4b2f      	ldr	r3, [pc, #188]	; (3744 <uart_task+0x198>)
    3686:	4798      	blx	r3
								delay_ms(25);
    3688:	2019      	movs	r0, #25
    368a:	4b2f      	ldr	r3, [pc, #188]	; (3748 <uart_task+0x19c>)
    368c:	4798      	blx	r3
    368e:	e02a      	b.n	36e6 <uart_task+0x13a>
							}
							else if(pkt_temp_ptr->sub_cmd == sb_cmd_array[set_threshold])
    3690:	4a2a      	ldr	r2, [pc, #168]	; (373c <uart_task+0x190>)
    3692:	78d2      	ldrb	r2, [r2, #3]
    3694:	429a      	cmp	r2, r3
    3696:	d10f      	bne.n	36b8 <uart_task+0x10c>
							{
								threshold_value = pkt_temp_ptr->payload[1] << 8 | (pkt_temp_ptr->payload[0]);
    3698:	aa01      	add	r2, sp, #4
    369a:	7913      	ldrb	r3, [r2, #4]
    369c:	021b      	lsls	r3, r3, #8
    369e:	78d2      	ldrb	r2, [r2, #3]
    36a0:	4313      	orrs	r3, r2
    36a2:	4a2e      	ldr	r2, [pc, #184]	; (375c <uart_task+0x1b0>)
    36a4:	8013      	strh	r3, [r2, #0]
								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    36a6:	2208      	movs	r2, #8
    36a8:	4921      	ldr	r1, [pc, #132]	; (3730 <uart_task+0x184>)
    36aa:	4825      	ldr	r0, [pc, #148]	; (3740 <uart_task+0x194>)
    36ac:	4b25      	ldr	r3, [pc, #148]	; (3744 <uart_task+0x198>)
    36ae:	4798      	blx	r3
								delay_ms(25);
    36b0:	2019      	movs	r0, #25
    36b2:	4b25      	ldr	r3, [pc, #148]	; (3748 <uart_task+0x19c>)
    36b4:	4798      	blx	r3
    36b6:	e016      	b.n	36e6 <uart_task+0x13a>
							}
							else if(pkt_temp_ptr->sub_cmd == sb_cmd_array[set_analog_gain])
    36b8:	4a20      	ldr	r2, [pc, #128]	; (373c <uart_task+0x190>)
    36ba:	7912      	ldrb	r2, [r2, #4]
    36bc:	429a      	cmp	r2, r3
    36be:	d112      	bne.n	36e6 <uart_task+0x13a>
							{
								uint8_t temp = pkt_temp_ptr->payload[0];
    36c0:	ab01      	add	r3, sp, #4
    36c2:	78db      	ldrb	r3, [r3, #3]
								if(analog_gain != temp)
    36c4:	4a26      	ldr	r2, [pc, #152]	; (3760 <uart_task+0x1b4>)
    36c6:	7812      	ldrb	r2, [r2, #0]
    36c8:	429a      	cmp	r2, r3
    36ca:	d004      	beq.n	36d6 <uart_task+0x12a>
								{
									analog_gain = temp;
    36cc:	4a24      	ldr	r2, [pc, #144]	; (3760 <uart_task+0x1b4>)
    36ce:	7013      	strb	r3, [r2, #0]
									change_gain = true;
    36d0:	2201      	movs	r2, #1
    36d2:	4b24      	ldr	r3, [pc, #144]	; (3764 <uart_task+0x1b8>)
    36d4:	701a      	strb	r2, [r3, #0]
								}
								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    36d6:	2208      	movs	r2, #8
    36d8:	4915      	ldr	r1, [pc, #84]	; (3730 <uart_task+0x184>)
    36da:	4819      	ldr	r0, [pc, #100]	; (3740 <uart_task+0x194>)
    36dc:	4b19      	ldr	r3, [pc, #100]	; (3744 <uart_task+0x198>)
    36de:	4798      	blx	r3
								delay_ms(25);
    36e0:	2019      	movs	r0, #25
    36e2:	4b19      	ldr	r3, [pc, #100]	; (3748 <uart_task+0x19c>)
    36e4:	4798      	blx	r3
						
							break;
						}
					}
					
					memset(buffer_temp,0,sizeof(packet));
    36e6:	2208      	movs	r2, #8
    36e8:	2100      	movs	r1, #0
    36ea:	a801      	add	r0, sp, #4
    36ec:	4b0c      	ldr	r3, [pc, #48]	; (3720 <uart_task+0x174>)
    36ee:	4798      	blx	r3
					buffer_temp_index = 0;
    36f0:	2400      	movs	r4, #0
						
				break;
    36f2:	e004      	b.n	36fe <uart_task+0x152>
				default:
					if(buffer_temp_index < sizeof(buffer_temp))
    36f4:	2c07      	cmp	r4, #7
    36f6:	d802      	bhi.n	36fe <uart_task+0x152>
					{
						buffer_temp[buffer_temp_index] = r;
    36f8:	aa01      	add	r2, sp, #4
    36fa:	5513      	strb	r3, [r2, r4]
						buffer_temp_index++;
    36fc:	3401      	adds	r4, #1
					}
				break;
			}
			

			*current_char_ptr = '\0';
    36fe:	2200      	movs	r2, #0
    3700:	230f      	movs	r3, #15
    3702:	446b      	add	r3, sp
    3704:	701a      	strb	r2, [r3, #0]
	 memset(buffer_temp,0,sizeof(packet));
	
	for (;;) {

		// Any characters queued? Handle them!
		while (xQueueReceive(terminal_in_queue, current_char_ptr, 0)) 
    3706:	2300      	movs	r3, #0
    3708:	2200      	movs	r2, #0
    370a:	210f      	movs	r1, #15
    370c:	4469      	add	r1, sp
    370e:	6838      	ldr	r0, [r7, #0]
    3710:	47b0      	blx	r6
    3712:	2800      	cmp	r0, #0
    3714:	d000      	beq.n	3718 <uart_task+0x16c>
    3716:	e758      	b.n	35ca <uart_task+0x1e>
			

			*current_char_ptr = '\0';
		}

		vTaskDelay(UART_TASK_DELAY);
    3718:	300a      	adds	r0, #10
    371a:	47c0      	blx	r8
	}
    371c:	e7f3      	b.n	3706 <uart_task+0x15a>
    371e:	46c0      	nop			; (mov r8, r8)
    3720:	00005e77 	.word	0x00005e77
    3724:	20003cec 	.word	0x20003cec
    3728:	000025a5 	.word	0x000025a5
    372c:	00002c99 	.word	0x00002c99
    3730:	20003d78 	.word	0x20003d78
    3734:	00005e65 	.word	0x00005e65
    3738:	40002880 	.word	0x40002880
    373c:	20000044 	.word	0x20000044
    3740:	20003d44 	.word	0x20003d44
    3744:	00000e65 	.word	0x00000e65
    3748:	000005ad 	.word	0x000005ad
    374c:	20003cf8 	.word	0x20003cf8
    3750:	20003cfb 	.word	0x20003cfb
    3754:	20003ce0 	.word	0x20003ce0
    3758:	20000040 	.word	0x20000040
    375c:	20003cea 	.word	0x20003cea
    3760:	20000014 	.word	0x20000014
    3764:	20003cf0 	.word	0x20003cf0

00003768 <rx_handler>:
}



static void rx_handler(uint8_t instance)
{
    3768:	b510      	push	{r4, lr}
	// Wait for synch to complete
	#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	while (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY) {
	}
	#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	while (usart_hw->SYNCBUSY.reg) {
    376a:	4a15      	ldr	r2, [pc, #84]	; (37c0 <rx_handler+0x58>)
    376c:	69d3      	ldr	r3, [r2, #28]
    376e:	2b00      	cmp	r3, #0
    3770:	d1fc      	bne.n	376c <rx_handler+0x4>
	}
	#endif

	// Read and mask interrupt flag register
	interrupt_status = usart_hw->INTFLAG.reg;
    3772:	4b13      	ldr	r3, [pc, #76]	; (37c0 <rx_handler+0x58>)
    3774:	7e1b      	ldrb	r3, [r3, #24]
    3776:	b2db      	uxtb	r3, r3
    3778:	4a12      	ldr	r2, [pc, #72]	; (37c4 <rx_handler+0x5c>)
    377a:	8013      	strh	r3, [r2, #0]

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    377c:	075b      	lsls	r3, r3, #29
    377e:	d51e      	bpl.n	37be <rx_handler+0x56>
		// Check for errors
		error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3780:	4b0f      	ldr	r3, [pc, #60]	; (37c0 <rx_handler+0x58>)
    3782:	8b5a      	ldrh	r2, [r3, #26]
    3784:	b2d2      	uxtb	r2, r2
    3786:	233f      	movs	r3, #63	; 0x3f
    3788:	4013      	ands	r3, r2
    378a:	490f      	ldr	r1, [pc, #60]	; (37c8 <rx_handler+0x60>)
    378c:	700b      	strb	r3, [r1, #0]
		if (error_code) {
    378e:	d006      	beq.n	379e <rx_handler+0x36>
			// Only frame error and buffer overflow should be possible
			if (error_code &
    3790:	2306      	movs	r3, #6
    3792:	4213      	tst	r3, r2
    3794:	d013      	beq.n	37be <rx_handler+0x56>
			(SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF)){
				
				usart_hw->STATUS.reg =
    3796:	2206      	movs	r2, #6
    3798:	4b09      	ldr	r3, [pc, #36]	; (37c0 <rx_handler+0x58>)
    379a:	835a      	strh	r2, [r3, #26]
    379c:	e00f      	b.n	37be <rx_handler+0x56>
			}
			// All is fine, so push the received character into our queue
		}
		else {
			
			data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    379e:	4b08      	ldr	r3, [pc, #32]	; (37c0 <rx_handler+0x58>)
    37a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    37a2:	490a      	ldr	r1, [pc, #40]	; (37cc <rx_handler+0x64>)
    37a4:	05db      	lsls	r3, r3, #23
    37a6:	0ddb      	lsrs	r3, r3, #23
    37a8:	800b      	strh	r3, [r1, #0]
			//printf("%c\n\r",data);
			count++;
    37aa:	4a09      	ldr	r2, [pc, #36]	; (37d0 <rx_handler+0x68>)
    37ac:	6813      	ldr	r3, [r2, #0]
    37ae:	3301      	adds	r3, #1
    37b0:	6013      	str	r3, [r2, #0]
			if (!xQueueSendFromISR(terminal_in_queue, (uint8_t *)&data,NULL))
    37b2:	4b08      	ldr	r3, [pc, #32]	; (37d4 <rx_handler+0x6c>)
    37b4:	6818      	ldr	r0, [r3, #0]
    37b6:	2300      	movs	r3, #0
    37b8:	2200      	movs	r2, #0
    37ba:	4c07      	ldr	r4, [pc, #28]	; (37d8 <rx_handler+0x70>)
    37bc:	47a0      	blx	r4
			}
		}
		} else {
		// Error: only RX interrupt should be enabled
	}
}
    37be:	bd10      	pop	{r4, pc}
    37c0:	42000400 	.word	0x42000400
    37c4:	20003d42 	.word	0x20003d42
    37c8:	200045fc 	.word	0x200045fc
    37cc:	200045f0 	.word	0x200045f0
    37d0:	20003ce4 	.word	0x20003ce4
    37d4:	20003cec 	.word	0x20003cec
    37d8:	000024dd 	.word	0x000024dd

000037dc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    37dc:	b570      	push	{r4, r5, r6, lr}
    37de:	b082      	sub	sp, #8
    37e0:	0005      	movs	r5, r0
    37e2:	000e      	movs	r6, r1
	uint16_t temp = 0;
    37e4:	2200      	movs	r2, #0
    37e6:	466b      	mov	r3, sp
    37e8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    37ea:	4c06      	ldr	r4, [pc, #24]	; (3804 <usart_serial_getchar+0x28>)
    37ec:	466b      	mov	r3, sp
    37ee:	1d99      	adds	r1, r3, #6
    37f0:	0028      	movs	r0, r5
    37f2:	47a0      	blx	r4
    37f4:	2800      	cmp	r0, #0
    37f6:	d1f9      	bne.n	37ec <usart_serial_getchar+0x10>

	*c = temp;
    37f8:	466b      	mov	r3, sp
    37fa:	3306      	adds	r3, #6
    37fc:	881b      	ldrh	r3, [r3, #0]
    37fe:	7033      	strb	r3, [r6, #0]
}
    3800:	b002      	add	sp, #8
    3802:	bd70      	pop	{r4, r5, r6, pc}
    3804:	00000df5 	.word	0x00000df5

00003808 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    3808:	b570      	push	{r4, r5, r6, lr}
    380a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    380c:	b28c      	uxth	r4, r1
    380e:	4e03      	ldr	r6, [pc, #12]	; (381c <usart_serial_putchar+0x14>)
    3810:	0021      	movs	r1, r4
    3812:	0028      	movs	r0, r5
    3814:	47b0      	blx	r6
    3816:	2800      	cmp	r0, #0
    3818:	d1fa      	bne.n	3810 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    381a:	bd70      	pop	{r4, r5, r6, pc}
    381c:	00000dc9 	.word	0x00000dc9

00003820 <configure_opamp2>:
struct adc_module adc_instance;
struct usart_module usart_instance;

/* Configure OPAMP2 and I/O PORT */
void configure_opamp2(enum opamp_pot_mux gain)
{
    3820:	b530      	push	{r4, r5, lr}
    3822:	b087      	sub	sp, #28
    3824:	0005      	movs	r5, r0
	/* Creates a new configuration structure for the OPAMP2. */
	struct opamp2_config conf;

	/* Initializes OPAMP module. */
	opamp_module_init();
    3826:	4b14      	ldr	r3, [pc, #80]	; (3878 <configure_opamp2+0x58>)
    3828:	4798      	blx	r3

	/* Fill with the default settings. */
	opamp2_get_config_defaults(&conf);
    382a:	ac01      	add	r4, sp, #4
    382c:	0020      	movs	r0, r4
    382e:	4b13      	ldr	r3, [pc, #76]	; (387c <configure_opamp2+0x5c>)
    3830:	4798      	blx	r3

	/* Set the the OPAMP2 in "Non-Inverted PGA" mode, */
	conf.negative_input           = OPAMP2_NEG_MUX_TAP2;
    3832:	2380      	movs	r3, #128	; 0x80
    3834:	035b      	lsls	r3, r3, #13
    3836:	9301      	str	r3, [sp, #4]
	conf.positive_input           = OPAMP2_POS_MUX_PIN2;
    3838:	2200      	movs	r2, #0
    383a:	6062      	str	r2, [r4, #4]
	conf.r1_connection            = OPAMP2_RES1_MUX_GND;
    383c:	23c0      	movs	r3, #192	; 0xc0
    383e:	015b      	lsls	r3, r3, #5
    3840:	8123      	strh	r3, [r4, #8]
	conf.config_common.potentiometer_selection = gain;
    3842:	8165      	strh	r5, [r4, #10]
	conf.config_common.r1_enable  = true;
    3844:	2301      	movs	r3, #1
    3846:	7323      	strb	r3, [r4, #12]
	conf.config_common.r2_out     = true;
    3848:	73a3      	strb	r3, [r4, #14]
	conf.config_common.analog_out = true;
    384a:	74a3      	strb	r3, [r4, #18]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    384c:	4669      	mov	r1, sp
    384e:	704a      	strb	r2, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3850:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    3852:	70ca      	strb	r2, [r1, #3]

	/* Set up OA2POS pin as input. */
	struct system_pinmux_config opamp2_input_pin_conf;
	system_pinmux_get_config_defaults(&opamp2_input_pin_conf);
	opamp2_input_pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	opamp2_input_pin_conf.mux_position = OPAMP_INPUT_MUX;
    3854:	700b      	strb	r3, [r1, #0]
	system_pinmux_pin_set_config(OPAMP_INPUT_PIN, &opamp2_input_pin_conf);
    3856:	2005      	movs	r0, #5
    3858:	4b09      	ldr	r3, [pc, #36]	; (3880 <configure_opamp2+0x60>)
    385a:	4798      	blx	r3

	/* Initialize and enable the OPAMP2 with the user settings. */
	opamp2_set_config(&conf);
    385c:	0020      	movs	r0, r4
    385e:	4b09      	ldr	r3, [pc, #36]	; (3884 <configure_opamp2+0x64>)
    3860:	4798      	blx	r3
	opamp_enable(OPAMP_2);
    3862:	2002      	movs	r0, #2
    3864:	4b08      	ldr	r3, [pc, #32]	; (3888 <configure_opamp2+0x68>)
    3866:	4798      	blx	r3
	
	/* Wait for the output ready. */
	while(!opamp_is_ready(OPAMP_2));
    3868:	4c08      	ldr	r4, [pc, #32]	; (388c <configure_opamp2+0x6c>)
    386a:	2002      	movs	r0, #2
    386c:	47a0      	blx	r4
    386e:	2800      	cmp	r0, #0
    3870:	d0fb      	beq.n	386a <configure_opamp2+0x4a>
}
    3872:	b007      	add	sp, #28
    3874:	bd30      	pop	{r4, r5, pc}
    3876:	46c0      	nop			; (mov r8, r8)
    3878:	00001755 	.word	0x00001755
    387c:	00001791 	.word	0x00001791
    3880:	00001d1d 	.word	0x00001d1d
    3884:	000017b9 	.word	0x000017b9
    3888:	00001815 	.word	0x00001815
    388c:	00001849 	.word	0x00001849

00003890 <configure_adc>:

/* Configure ADC */
void configure_adc(void)
{
    3890:	b530      	push	{r4, r5, lr}
    3892:	b08d      	sub	sp, #52	; 0x34
	/* Creates a new configuration structure for the ADC */
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
    3894:	ac01      	add	r4, sp, #4
    3896:	0020      	movs	r0, r4
    3898:	4b11      	ldr	r3, [pc, #68]	; (38e0 <configure_adc+0x50>)
    389a:	4798      	blx	r3
	
	/* Setup ADC with OPAMP2 output as ADC input */
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV256;//ADC_CLOCK_PRESCALER_DIV8;
    389c:	2307      	movs	r3, #7
    389e:	70a3      	strb	r3, [r4, #2]
	config_adc.positive_input  = ADC_POSITIVE_INPUT_OPAMP2;
    38a0:	3318      	adds	r3, #24
    38a2:	7123      	strb	r3, [r4, #4]
	
	/* Initialize and enable ADC */
	adc_init(&adc_instance, ADC, &config_adc);
    38a4:	4d0f      	ldr	r5, [pc, #60]	; (38e4 <configure_adc+0x54>)
    38a6:	0022      	movs	r2, r4
    38a8:	490f      	ldr	r1, [pc, #60]	; (38e8 <configure_adc+0x58>)
    38aa:	0028      	movs	r0, r5
    38ac:	4b0f      	ldr	r3, [pc, #60]	; (38ec <configure_adc+0x5c>)
    38ae:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    38b0:	682a      	ldr	r2, [r5, #0]
    38b2:	8c13      	ldrh	r3, [r2, #32]
    38b4:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    38b6:	2b00      	cmp	r3, #0
    38b8:	d1fb      	bne.n	38b2 <configure_adc+0x22>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    38ba:	2180      	movs	r1, #128	; 0x80
    38bc:	03c9      	lsls	r1, r1, #15
    38be:	4b0c      	ldr	r3, [pc, #48]	; (38f0 <configure_adc+0x60>)
    38c0:	6019      	str	r1, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    38c2:	2307      	movs	r3, #7
    38c4:	7113      	strb	r3, [r2, #4]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    38c6:	7193      	strb	r3, [r2, #6]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    38c8:	7811      	ldrb	r1, [r2, #0]
    38ca:	3b05      	subs	r3, #5
    38cc:	430b      	orrs	r3, r1
    38ce:	7013      	strb	r3, [r2, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    38d0:	4b04      	ldr	r3, [pc, #16]	; (38e4 <configure_adc+0x54>)
    38d2:	681a      	ldr	r2, [r3, #0]

	if (adc_module->SYNCBUSY.reg) {
    38d4:	8c13      	ldrh	r3, [r2, #32]
    38d6:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    38d8:	2b00      	cmp	r3, #0
    38da:	d1fb      	bne.n	38d4 <configure_adc+0x44>
	adc_enable(&adc_instance);
}
    38dc:	b00d      	add	sp, #52	; 0x34
    38de:	bd30      	pop	{r4, r5, pc}
    38e0:	00001221 	.word	0x00001221
    38e4:	20004604 	.word	0x20004604
    38e8:	43000c00 	.word	0x43000c00
    38ec:	00001265 	.word	0x00001265
    38f0:	e000e100 	.word	0xe000e100

000038f4 <configure_adc_callbacks>:

/* Enable ADC Callback Function */
void configure_adc_callbacks(void)
{
    38f4:	b510      	push	{r4, lr}
	adc_register_callback(&adc_instance,
    38f6:	4c05      	ldr	r4, [pc, #20]	; (390c <configure_adc_callbacks+0x18>)
    38f8:	2200      	movs	r2, #0
    38fa:	4905      	ldr	r1, [pc, #20]	; (3910 <configure_adc_callbacks+0x1c>)
    38fc:	0020      	movs	r0, r4
    38fe:	4b05      	ldr	r3, [pc, #20]	; (3914 <configure_adc_callbacks+0x20>)
    3900:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    3902:	7ee2      	ldrb	r2, [r4, #27]
    3904:	2301      	movs	r3, #1
    3906:	4313      	orrs	r3, r2
    3908:	76e3      	strb	r3, [r4, #27]
			adc_complete_callback, ADC_CALLBACK_READ_BUFFER);
	adc_enable_callback(&adc_instance, ADC_CALLBACK_READ_BUFFER);
}
    390a:	bd10      	pop	{r4, pc}
    390c:	20004604 	.word	0x20004604
    3910:	0000348d 	.word	0x0000348d
    3914:	000016f5 	.word	0x000016f5

00003918 <configure_dac>:
struct dac_module dac_instance;
//! [module_inst]

//! [setup]
void configure_dac(void)
{
    3918:	b500      	push	{lr}
    391a:	b083      	sub	sp, #12
	//! [setup_config]
	struct dac_config config_dac;
	//! [setup_config]
	//! [setup_config_defaults]
	dac_get_config_defaults(&config_dac);
    391c:	a801      	add	r0, sp, #4
    391e:	4b04      	ldr	r3, [pc, #16]	; (3930 <configure_dac+0x18>)
    3920:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_set_config]
	dac_init(&dac_instance, DAC, &config_dac);
    3922:	aa01      	add	r2, sp, #4
    3924:	4903      	ldr	r1, [pc, #12]	; (3934 <configure_dac+0x1c>)
    3926:	4804      	ldr	r0, [pc, #16]	; (3938 <configure_dac+0x20>)
    3928:	4b04      	ldr	r3, [pc, #16]	; (393c <configure_dac+0x24>)
    392a:	4798      	blx	r3
	//! [setup_set_config]
}
    392c:	b003      	add	sp, #12
    392e:	bd00      	pop	{pc}
    3930:	00000121 	.word	0x00000121
    3934:	42003000 	.word	0x42003000
    3938:	200041a8 	.word	0x200041a8
    393c:	0000012d 	.word	0x0000012d

00003940 <configure_dac_channel>:

void configure_dac_channel(void)
{
    3940:	b510      	push	{r4, lr}
    3942:	b082      	sub	sp, #8
	//! [setup_ch_config]
	struct dac_chan_config config_dac_chan;
	//! [setup_ch_config]
	//! [setup_ch_config_defaults]
	dac_chan_get_config_defaults(&config_dac_chan);
    3944:	4668      	mov	r0, sp
    3946:	4b07      	ldr	r3, [pc, #28]	; (3964 <configure_dac_channel+0x24>)
    3948:	4798      	blx	r3
	//! [setup_ch_config_defaults]

	//! [setup_ch_set_config]
	dac_chan_set_config(&dac_instance, DAC_CHANNEL_0, &config_dac_chan);
    394a:	4c07      	ldr	r4, [pc, #28]	; (3968 <configure_dac_channel+0x28>)
    394c:	466a      	mov	r2, sp
    394e:	2100      	movs	r1, #0
    3950:	0020      	movs	r0, r4
    3952:	4b06      	ldr	r3, [pc, #24]	; (396c <configure_dac_channel+0x2c>)
    3954:	4798      	blx	r3
	//! [setup_ch_set_config]

	//! [setup_ch_enable]
	dac_chan_enable(&dac_instance, DAC_CHANNEL_0);
    3956:	2100      	movs	r1, #0
    3958:	0020      	movs	r0, r4
    395a:	4b05      	ldr	r3, [pc, #20]	; (3970 <configure_dac_channel+0x30>)
    395c:	4798      	blx	r3
	//! [setup_ch_enable]
}
    395e:	b002      	add	sp, #8
    3960:	bd10      	pop	{r4, pc}
    3962:	46c0      	nop			; (mov r8, r8)
    3964:	000001dd 	.word	0x000001dd
    3968:	200041a8 	.word	0x200041a8
    396c:	000001ed 	.word	0x000001ed
    3970:	0000025d 	.word	0x0000025d

00003974 <configure_i2c_master>:
#define SLAVE_ADDRESS 0x00
#define TIMEOUT 1000
struct i2c_master_module i2c_master_instance;
void configure_i2c_master(void);
void configure_i2c_master(void)
{
    3974:	b510      	push	{r4, lr}
    3976:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    3978:	aa01      	add	r2, sp, #4
    397a:	2364      	movs	r3, #100	; 0x64
    397c:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    397e:	4b1c      	ldr	r3, [pc, #112]	; (39f0 <configure_i2c_master+0x7c>)
    3980:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    3982:	2300      	movs	r3, #0
    3984:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    3986:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    3988:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    398a:	2180      	movs	r1, #128	; 0x80
    398c:	0389      	lsls	r1, r1, #14
    398e:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    3990:	2101      	movs	r1, #1
    3992:	4249      	negs	r1, r1
    3994:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    3996:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    3998:	6213      	str	r3, [r2, #32]
	config->scl_low_timeout  = false;
    399a:	3125      	adds	r1, #37	; 0x25
    399c:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    399e:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    39a0:	3108      	adds	r1, #8
    39a2:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    39a4:	3101      	adds	r1, #1
    39a6:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    39a8:	3101      	adds	r1, #1
    39aa:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    39ac:	33d7      	adds	r3, #215	; 0xd7
    39ae:	8613      	strh	r3, [r2, #48]	; 0x30

	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	//config_i2c_master.baud_rate = I2C_MASTER_BAUD_RATE_400KHZ;
	config_i2c_master.buffer_timeout = 10000;
    39b0:	4b10      	ldr	r3, [pc, #64]	; (39f4 <configure_i2c_master+0x80>)
    39b2:	82d3      	strh	r3, [r2, #22]
	#if SAMR30
	config_i2c_master.pinmux_pad0    = CONF_MASTER_SDA_PINMUX;
	config_i2c_master.pinmux_pad1    = CONF_MASTER_SCK_PINMUX;
	#endif
	i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
    39b4:	4c10      	ldr	r4, [pc, #64]	; (39f8 <configure_i2c_master+0x84>)
    39b6:	4911      	ldr	r1, [pc, #68]	; (39fc <configure_i2c_master+0x88>)
    39b8:	0020      	movs	r0, r4
    39ba:	4b11      	ldr	r3, [pc, #68]	; (3a00 <configure_i2c_master+0x8c>)
    39bc:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    39be:	6822      	ldr	r2, [r4, #0]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    39c0:	2107      	movs	r1, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    39c2:	69d3      	ldr	r3, [r2, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    39c4:	4219      	tst	r1, r3
    39c6:	d1fc      	bne.n	39c2 <configure_i2c_master+0x4e>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    39c8:	6811      	ldr	r1, [r2, #0]
    39ca:	2302      	movs	r3, #2
    39cc:	430b      	orrs	r3, r1
    39ce:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    39d0:	4b09      	ldr	r3, [pc, #36]	; (39f8 <configure_i2c_master+0x84>)
    39d2:	88dc      	ldrh	r4, [r3, #6]
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    39d4:	2300      	movs	r3, #0
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    39d6:	2010      	movs	r0, #16
    39d8:	e005      	b.n	39e6 <configure_i2c_master+0x72>
		timeout_counter++;
    39da:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    39dc:	42a3      	cmp	r3, r4
    39de:	d302      	bcc.n	39e6 <configure_i2c_master+0x72>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    39e0:	2310      	movs	r3, #16
    39e2:	8353      	strh	r3, [r2, #26]
    39e4:	e002      	b.n	39ec <configure_i2c_master+0x78>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    39e6:	8b51      	ldrh	r1, [r2, #26]
    39e8:	4201      	tst	r1, r0
    39ea:	d0f6      	beq.n	39da <configure_i2c_master+0x66>
	i2c_master_enable(&i2c_master_instance);
}
    39ec:	b00e      	add	sp, #56	; 0x38
    39ee:	bd10      	pop	{r4, pc}
    39f0:	00000d48 	.word	0x00000d48
    39f4:	00002710 	.word	0x00002710
    39f8:	200045e4 	.word	0x200045e4
    39fc:	42000800 	.word	0x42000800
    3a00:	000002ad 	.word	0x000002ad

00003a04 <main>:
	
enum status_code err;	
uint16_t timeout = 0;
/* Main function */
int main(void)
{
    3a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a06:	465f      	mov	r7, fp
    3a08:	4656      	mov	r6, sl
    3a0a:	464d      	mov	r5, r9
    3a0c:	4644      	mov	r4, r8
    3a0e:	b4f0      	push	{r4, r5, r6, r7}
    3a10:	b095      	sub	sp, #84	; 0x54
	
	system_init();
    3a12:	4bb6      	ldr	r3, [pc, #728]	; (3cec <main+0x2e8>)
    3a14:	4798      	blx	r3
	
	/************************ OPAMP2 e ADC *****************************/
	/* Initialize OPAMP2 and ADC */
	configure_opamp2(OPAMP_POT_MUX_4R_12R);//OPAMP_POT_MUX_14R_2R);
    3a16:	2080      	movs	r0, #128	; 0x80
    3a18:	0200      	lsls	r0, r0, #8
    3a1a:	4bb5      	ldr	r3, [pc, #724]	; (3cf0 <main+0x2ec>)
    3a1c:	4798      	blx	r3
	configure_adc();
    3a1e:	4bb5      	ldr	r3, [pc, #724]	; (3cf4 <main+0x2f0>)
    3a20:	4798      	blx	r3
	configure_adc_callbacks();
    3a22:	4bb5      	ldr	r3, [pc, #724]	; (3cf8 <main+0x2f4>)
    3a24:	4798      	blx	r3
	
	
	/************************ DAC *****************************/
	configure_dac();
    3a26:	4bb5      	ldr	r3, [pc, #724]	; (3cfc <main+0x2f8>)
    3a28:	4798      	blx	r3
	configure_dac_channel();
    3a2a:	4bb5      	ldr	r3, [pc, #724]	; (3d00 <main+0x2fc>)
    3a2c:	4798      	blx	r3
	dac_enable(&dac_instance);
    3a2e:	4cb5      	ldr	r4, [pc, #724]	; (3d04 <main+0x300>)
    3a30:	0020      	movs	r0, r4
    3a32:	4bb5      	ldr	r3, [pc, #724]	; (3d08 <main+0x304>)
    3a34:	4798      	blx	r3
	dac_chan_write(&dac_instance, DAC_CHANNEL_0, 0xbf);
    3a36:	22bf      	movs	r2, #191	; 0xbf
    3a38:	2100      	movs	r1, #0
    3a3a:	0020      	movs	r0, r4
    3a3c:	4bb3      	ldr	r3, [pc, #716]	; (3d0c <main+0x308>)
    3a3e:	4798      	blx	r3
	
	/************************ HW Gain *****************************/
	configure_i2c_master();
    3a40:	4bb3      	ldr	r3, [pc, #716]	; (3d10 <main+0x30c>)
    3a42:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3a44:	aa04      	add	r2, sp, #16
    3a46:	2380      	movs	r3, #128	; 0x80
    3a48:	05db      	lsls	r3, r3, #23
    3a4a:	9304      	str	r3, [sp, #16]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3a4c:	2300      	movs	r3, #0
    3a4e:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    3a50:	21ff      	movs	r1, #255	; 0xff
    3a52:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    3a54:	2100      	movs	r1, #0
    3a56:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3a58:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    3a5a:	2401      	movs	r4, #1
    3a5c:	2024      	movs	r0, #36	; 0x24
    3a5e:	5414      	strb	r4, [r2, r0]
	config->transmitter_enable = true;
    3a60:	3001      	adds	r0, #1
    3a62:	5414      	strb	r4, [r2, r0]
	config->clock_polarity_inverted = false;
    3a64:	3001      	adds	r0, #1
    3a66:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    3a68:	3001      	adds	r0, #1
    3a6a:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    3a6c:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3a6e:	3005      	adds	r0, #5
    3a70:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    3a72:	3001      	adds	r0, #1
    3a74:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3a76:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3a78:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3a7a:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3a7c:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3a7e:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3a80:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    3a82:	2313      	movs	r3, #19
    3a84:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3a86:	7751      	strb	r1, [r2, #29]
{
	uint8_t instance_index;

	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate    = 115200;
    3a88:	23e1      	movs	r3, #225	; 0xe1
    3a8a:	025b      	lsls	r3, r3, #9
    3a8c:	6213      	str	r3, [r2, #32]
	config_usart.mux_setting = EXT2_UART_SERCOM_MUX_SETTING;
    3a8e:	23c4      	movs	r3, #196	; 0xc4
    3a90:	039b      	lsls	r3, r3, #14
    3a92:	60d3      	str	r3, [r2, #12]
	config_usart.pinmux_pad0 = EXT2_UART_SERCOM_PINMUX_PAD0;
    3a94:	2301      	movs	r3, #1
    3a96:	425b      	negs	r3, r3
    3a98:	6313      	str	r3, [r2, #48]	; 0x30
	config_usart.pinmux_pad1 = EXT2_UART_SERCOM_PINMUX_PAD1;
    3a9a:	6353      	str	r3, [r2, #52]	; 0x34
	config_usart.pinmux_pad2 = EXT2_UART_SERCOM_PINMUX_PAD2;
    3a9c:	4b9d      	ldr	r3, [pc, #628]	; (3d14 <main+0x310>)
    3a9e:	6393      	str	r3, [r2, #56]	; 0x38
	config_usart.pinmux_pad3 = EXT2_UART_SERCOM_PINMUX_PAD3;
    3aa0:	4b9d      	ldr	r3, [pc, #628]	; (3d18 <main+0x314>)
    3aa2:	63d3      	str	r3, [r2, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3aa4:	4d9d      	ldr	r5, [pc, #628]	; (3d1c <main+0x318>)
    3aa6:	4b9e      	ldr	r3, [pc, #632]	; (3d20 <main+0x31c>)
    3aa8:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3aaa:	499e      	ldr	r1, [pc, #632]	; (3d24 <main+0x320>)
    3aac:	4b9e      	ldr	r3, [pc, #632]	; (3d28 <main+0x324>)
    3aae:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3ab0:	499e      	ldr	r1, [pc, #632]	; (3d2c <main+0x328>)
    3ab2:	4b9f      	ldr	r3, [pc, #636]	; (3d30 <main+0x32c>)
    3ab4:	6019      	str	r1, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    3ab6:	499f      	ldr	r1, [pc, #636]	; (3d34 <main+0x330>)
    3ab8:	0028      	movs	r0, r5
    3aba:	4b9f      	ldr	r3, [pc, #636]	; (3d38 <main+0x334>)
    3abc:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    3abe:	4e9f      	ldr	r6, [pc, #636]	; (3d3c <main+0x338>)
    3ac0:	6833      	ldr	r3, [r6, #0]
    3ac2:	6898      	ldr	r0, [r3, #8]
    3ac4:	2100      	movs	r1, #0
    3ac6:	4f9e      	ldr	r7, [pc, #632]	; (3d40 <main+0x33c>)
    3ac8:	47b8      	blx	r7
	setbuf(stdin, NULL);
    3aca:	6833      	ldr	r3, [r6, #0]
    3acc:	6858      	ldr	r0, [r3, #4]
    3ace:	2100      	movs	r1, #0
    3ad0:	47b8      	blx	r7
	stdio_serial_init(&usart_instance, EXT2_UART_MODULE, &config_usart);
	
	// Inject our own interrupt handler
	instance_index = _sercom_get_sercom_inst_index(EXT2_UART_MODULE);
    3ad2:	4898      	ldr	r0, [pc, #608]	; (3d34 <main+0x330>)
    3ad4:	4b9b      	ldr	r3, [pc, #620]	; (3d44 <main+0x340>)
    3ad6:	4798      	blx	r3
	_sercom_set_handler(instance_index, rx_handler);
    3ad8:	499b      	ldr	r1, [pc, #620]	; (3d48 <main+0x344>)
    3ada:	4b9c      	ldr	r3, [pc, #624]	; (3d4c <main+0x348>)
    3adc:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3ade:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3ae0:	0030      	movs	r0, r6
    3ae2:	4b9b      	ldr	r3, [pc, #620]	; (3d50 <main+0x34c>)
    3ae4:	4798      	blx	r3
    3ae6:	231f      	movs	r3, #31
    3ae8:	4018      	ands	r0, r3
    3aea:	4084      	lsls	r4, r0
    3aec:	4b99      	ldr	r3, [pc, #612]	; (3d54 <main+0x350>)
    3aee:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3af0:	682b      	ldr	r3, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3af2:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3af4:	2a00      	cmp	r2, #0
    3af6:	d1fc      	bne.n	3af2 <main+0xee>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3af8:	6832      	ldr	r2, [r6, #0]
    3afa:	2302      	movs	r3, #2
    3afc:	4313      	orrs	r3, r2
    3afe:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3b00:	4b86      	ldr	r3, [pc, #536]	; (3d1c <main+0x318>)
    3b02:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3b04:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3b06:	2a00      	cmp	r2, #0
    3b08:	d1fc      	bne.n	3b04 <main+0x100>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    3b0a:	685a      	ldr	r2, [r3, #4]
    3b0c:	2180      	movs	r1, #128	; 0x80
    3b0e:	0249      	lsls	r1, r1, #9
    3b10:	430a      	orrs	r2, r1
    3b12:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    3b14:	2101      	movs	r1, #1
    3b16:	4a81      	ldr	r2, [pc, #516]	; (3d1c <main+0x318>)
    3b18:	71d1      	strb	r1, [r2, #7]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3b1a:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3b1c:	2a00      	cmp	r2, #0
    3b1e:	d1fc      	bne.n	3b1a <main+0x116>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3b20:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3b22:	2a00      	cmp	r2, #0
    3b24:	d1fc      	bne.n	3b20 <main+0x11c>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    3b26:	685a      	ldr	r2, [r3, #4]
    3b28:	2180      	movs	r1, #128	; 0x80
    3b2a:	0289      	lsls	r1, r1, #10
    3b2c:	430a      	orrs	r2, r1
    3b2e:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    3b30:	2101      	movs	r1, #1
    3b32:	4a7a      	ldr	r2, [pc, #488]	; (3d1c <main+0x318>)
    3b34:	7191      	strb	r1, [r2, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3b36:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3b38:	2a00      	cmp	r2, #0
    3b3a:	d1fc      	bne.n	3b36 <main+0x132>
	usart_enable(&usart_instance);
	usart_enable_transceiver(&usart_instance, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&usart_instance, USART_TRANSCEIVER_RX);

	// ..and the RX Complete interrupt
	((SercomUsart *)EXT2_UART_MODULE)->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    3b3c:	3204      	adds	r2, #4
    3b3e:	4b7d      	ldr	r3, [pc, #500]	; (3d34 <main+0x330>)
    3b40:	759a      	strb	r2, [r3, #22]
		///* Increment timeout counter and check if timed out. */
		//packet.address += 1; 
	//}while (err != STATUS_OK);
	/************************ UART *****************************/	
	configure_usart();
	delay_init();
    3b42:	4b85      	ldr	r3, [pc, #532]	; (3d58 <main+0x354>)
    3b44:	4798      	blx	r3
    3b46:	4d85      	ldr	r5, [pc, #532]	; (3d5c <main+0x358>)
    3b48:	002e      	movs	r6, r5
    3b4a:	3680      	adds	r6, #128	; 0x80
    3b4c:	2380      	movs	r3, #128	; 0x80
    3b4e:	00db      	lsls	r3, r3, #3
    3b50:	4698      	mov	r8, r3
    3b52:	61f3      	str	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    3b54:	4c82      	ldr	r4, [pc, #520]	; (3d60 <main+0x35c>)
    3b56:	2301      	movs	r3, #1
    3b58:	469a      	mov	sl, r3
    3b5a:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    3b5c:	2300      	movs	r3, #0
    3b5e:	4699      	mov	r9, r3
    3b60:	70a3      	strb	r3, [r4, #2]
	
static void configure_led_port(void)
{
	
	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3b62:	4653      	mov	r3, sl
    3b64:	7023      	strb	r3, [r4, #0]

	port_pin_set_config(EXT3_PIN_4, &pin_conf);
    3b66:	0021      	movs	r1, r4
    3b68:	2021      	movs	r0, #33	; 0x21
    3b6a:	4f7e      	ldr	r7, [pc, #504]	; (3d64 <main+0x360>)
    3b6c:	47b8      	blx	r7
	port_pin_set_config(EXT3_PIN_6, &pin_conf);
    3b6e:	0021      	movs	r1, r4
    3b70:	200f      	movs	r0, #15
    3b72:	47b8      	blx	r7
	port_pin_set_config(EXT3_PIN_8, &pin_conf);
    3b74:	0021      	movs	r1, r4
    3b76:	202b      	movs	r0, #43	; 0x2b
    3b78:	47b8      	blx	r7
	port_pin_set_config(EXT3_PIN_10, &pin_conf);
    3b7a:	0021      	movs	r1, r4
    3b7c:	201b      	movs	r0, #27
    3b7e:	47b8      	blx	r7
	port_pin_set_config(EXT3_PIN_9, &pin_conf);
    3b80:	0021      	movs	r1, r4
    3b82:	2010      	movs	r0, #16
    3b84:	47b8      	blx	r7
	port_pin_set_config(EXT3_PIN_15, &pin_conf);
    3b86:	0021      	movs	r1, r4
    3b88:	2031      	movs	r0, #49	; 0x31
    3b8a:	47b8      	blx	r7
	port_pin_set_config(EXT3_PIN_16, &pin_conf);
    3b8c:	0021      	movs	r1, r4
    3b8e:	2036      	movs	r0, #54	; 0x36
    3b90:	47b8      	blx	r7
	port_pin_set_config(EXT3_PIN_18, &pin_conf);
    3b92:	0021      	movs	r1, r4
    3b94:	2037      	movs	r0, #55	; 0x37
    3b96:	47b8      	blx	r7
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3b98:	2302      	movs	r3, #2
    3b9a:	61b3      	str	r3, [r6, #24]
    3b9c:	2380      	movs	r3, #128	; 0x80
    3b9e:	021b      	lsls	r3, r3, #8
    3ba0:	61ab      	str	r3, [r5, #24]
    3ba2:	2380      	movs	r3, #128	; 0x80
    3ba4:	011b      	lsls	r3, r3, #4
    3ba6:	61b3      	str	r3, [r6, #24]
    3ba8:	2380      	movs	r3, #128	; 0x80
    3baa:	051b      	lsls	r3, r3, #20
    3bac:	61ab      	str	r3, [r5, #24]
    3bae:	2380      	movs	r3, #128	; 0x80
    3bb0:	025b      	lsls	r3, r3, #9
    3bb2:	61ab      	str	r3, [r5, #24]
    3bb4:	2380      	movs	r3, #128	; 0x80
    3bb6:	029b      	lsls	r3, r3, #10
    3bb8:	61b3      	str	r3, [r6, #24]
    3bba:	2380      	movs	r3, #128	; 0x80
    3bbc:	03db      	lsls	r3, r3, #15
    3bbe:	61b3      	str	r3, [r6, #24]
    3bc0:	2380      	movs	r3, #128	; 0x80
    3bc2:	041b      	lsls	r3, r3, #16
    3bc4:	61b3      	str	r3, [r6, #24]
	delay_init();
	port_pin_toggle_output_level(LED_0_PIN);
	/************************ LED PORT *****************************/	
	configure_led_port();
	//UP//
	evaluate_led_output(QUANTUM_VALUE * 1);
    3bc6:	2080      	movs	r0, #128	; 0x80
    3bc8:	0040      	lsls	r0, r0, #1
    3bca:	4d67      	ldr	r5, [pc, #412]	; (3d68 <main+0x364>)
    3bcc:	47a8      	blx	r5
	delay_ms(100);
    3bce:	2064      	movs	r0, #100	; 0x64
    3bd0:	4c66      	ldr	r4, [pc, #408]	; (3d6c <main+0x368>)
    3bd2:	47a0      	blx	r4
	evaluate_led_output(QUANTUM_VALUE * 2);
    3bd4:	2080      	movs	r0, #128	; 0x80
    3bd6:	0080      	lsls	r0, r0, #2
    3bd8:	47a8      	blx	r5
	delay_ms(100);
    3bda:	2064      	movs	r0, #100	; 0x64
    3bdc:	47a0      	blx	r4
	evaluate_led_output(QUANTUM_VALUE * 3);
    3bde:	20c0      	movs	r0, #192	; 0xc0
    3be0:	0080      	lsls	r0, r0, #2
    3be2:	47a8      	blx	r5
	delay_ms(100);
    3be4:	2064      	movs	r0, #100	; 0x64
    3be6:	47a0      	blx	r4
	evaluate_led_output(QUANTUM_VALUE * 4);
    3be8:	4640      	mov	r0, r8
    3bea:	47a8      	blx	r5
	delay_ms(100);
    3bec:	2064      	movs	r0, #100	; 0x64
    3bee:	47a0      	blx	r4
	evaluate_led_output(QUANTUM_VALUE * 5);
    3bf0:	20a0      	movs	r0, #160	; 0xa0
    3bf2:	00c0      	lsls	r0, r0, #3
    3bf4:	47a8      	blx	r5
	delay_ms(100);
    3bf6:	2064      	movs	r0, #100	; 0x64
    3bf8:	47a0      	blx	r4
	evaluate_led_output(QUANTUM_VALUE * 6);
    3bfa:	20c0      	movs	r0, #192	; 0xc0
    3bfc:	00c0      	lsls	r0, r0, #3
    3bfe:	47a8      	blx	r5
	delay_ms(100);
    3c00:	2064      	movs	r0, #100	; 0x64
    3c02:	47a0      	blx	r4
	evaluate_led_output(QUANTUM_VALUE * 7);
    3c04:	20e0      	movs	r0, #224	; 0xe0
    3c06:	00c0      	lsls	r0, r0, #3
    3c08:	47a8      	blx	r5
	delay_ms(100);
    3c0a:	2064      	movs	r0, #100	; 0x64
    3c0c:	47a0      	blx	r4
	evaluate_led_output(QUANTUM_VALUE * 8);
    3c0e:	2080      	movs	r0, #128	; 0x80
    3c10:	0100      	lsls	r0, r0, #4
    3c12:	47a8      	blx	r5
	
	delay_ms(100);
    3c14:	2064      	movs	r0, #100	; 0x64
    3c16:	47a0      	blx	r4
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    3c18:	4643      	mov	r3, r8
    3c1a:	61f3      	str	r3, [r6, #28]
	port_pin_toggle_output_level(LED_0_PIN);
	
	
	/************************ FIR FILTER *****************************/
	status = arm_fir_init_q15(&sFirStru,TAPNUMBER,&lpFilterCoefficent[0],&FirState[0],ADC_SAMPLES);
    3c1c:	2380      	movs	r3, #128	; 0x80
    3c1e:	005b      	lsls	r3, r3, #1
    3c20:	9300      	str	r3, [sp, #0]
    3c22:	4b53      	ldr	r3, [pc, #332]	; (3d70 <main+0x36c>)
    3c24:	4a53      	ldr	r2, [pc, #332]	; (3d74 <main+0x370>)
    3c26:	2114      	movs	r1, #20
    3c28:	4853      	ldr	r0, [pc, #332]	; (3d78 <main+0x374>)
    3c2a:	4f54      	ldr	r7, [pc, #336]	; (3d7c <main+0x378>)
    3c2c:	47b8      	blx	r7
    3c2e:	4b54      	ldr	r3, [pc, #336]	; (3d80 <main+0x37c>)
    3c30:	7018      	strb	r0, [r3, #0]
	//DOWN//
	evaluate_led_output(QUANTUM_VALUE * 8);
    3c32:	2080      	movs	r0, #128	; 0x80
    3c34:	0100      	lsls	r0, r0, #4
    3c36:	47a8      	blx	r5
	delay_ms(100);
    3c38:	2064      	movs	r0, #100	; 0x64
    3c3a:	47a0      	blx	r4
	evaluate_led_output(QUANTUM_VALUE * 7);
    3c3c:	20e0      	movs	r0, #224	; 0xe0
    3c3e:	00c0      	lsls	r0, r0, #3
    3c40:	47a8      	blx	r5
	delay_ms(100);
    3c42:	2064      	movs	r0, #100	; 0x64
    3c44:	47a0      	blx	r4
	evaluate_led_output(QUANTUM_VALUE * 6);
    3c46:	20c0      	movs	r0, #192	; 0xc0
    3c48:	00c0      	lsls	r0, r0, #3
    3c4a:	47a8      	blx	r5
	delay_ms(100);
    3c4c:	2064      	movs	r0, #100	; 0x64
    3c4e:	47a0      	blx	r4
	evaluate_led_output(QUANTUM_VALUE * 5);
    3c50:	20a0      	movs	r0, #160	; 0xa0
    3c52:	00c0      	lsls	r0, r0, #3
    3c54:	47a8      	blx	r5
	delay_ms(100);
    3c56:	2064      	movs	r0, #100	; 0x64
    3c58:	47a0      	blx	r4
	evaluate_led_output(QUANTUM_VALUE * 4);
    3c5a:	4640      	mov	r0, r8
    3c5c:	47a8      	blx	r5
	delay_ms(100);
    3c5e:	2064      	movs	r0, #100	; 0x64
    3c60:	47a0      	blx	r4
	evaluate_led_output(QUANTUM_VALUE * 3);
    3c62:	20c0      	movs	r0, #192	; 0xc0
    3c64:	0080      	lsls	r0, r0, #2
    3c66:	47a8      	blx	r5
	delay_ms(100);
    3c68:	2064      	movs	r0, #100	; 0x64
    3c6a:	47a0      	blx	r4
	evaluate_led_output(QUANTUM_VALUE * 2);
    3c6c:	2080      	movs	r0, #128	; 0x80
    3c6e:	0080      	lsls	r0, r0, #2
    3c70:	47a8      	blx	r5
	delay_ms(100);
    3c72:	2064      	movs	r0, #100	; 0x64
    3c74:	47a0      	blx	r4
	evaluate_led_output(QUANTUM_VALUE * 1);
    3c76:	2080      	movs	r0, #128	; 0x80
    3c78:	0040      	lsls	r0, r0, #1
    3c7a:	47a8      	blx	r5
	
	delay_ms(100);
    3c7c:	2064      	movs	r0, #100	; 0x64
    3c7e:	47a0      	blx	r4
    3c80:	4643      	mov	r3, r8
    3c82:	61f3      	str	r3, [r6, #28]
	port_pin_toggle_output_level(LED_0_PIN);
	delay_ms(100);
    3c84:	2064      	movs	r0, #100	; 0x64
    3c86:	47a0      	blx	r4
    3c88:	4643      	mov	r3, r8
    3c8a:	61f3      	str	r3, [r6, #28]
	port_pin_toggle_output_level(LED_0_PIN);
	delay_ms(100);
    3c8c:	2064      	movs	r0, #100	; 0x64
    3c8e:	47a0      	blx	r4
    3c90:	4643      	mov	r3, r8
    3c92:	61f3      	str	r3, [r6, #28]
	port_pin_toggle_output_level(LED_0_PIN);
	delay_ms(100);
    3c94:	2064      	movs	r0, #100	; 0x64
    3c96:	47a0      	blx	r4
    3c98:	4643      	mov	r3, r8
    3c9a:	61f3      	str	r3, [r6, #28]
	port_pin_toggle_output_level(LED_0_PIN);


	

	terminal_in_queue = xQueueCreate(64, sizeof(uint8_t));
    3c9c:	2200      	movs	r2, #0
    3c9e:	2101      	movs	r1, #1
    3ca0:	2040      	movs	r0, #64	; 0x40
    3ca2:	4b38      	ldr	r3, [pc, #224]	; (3d84 <main+0x380>)
    3ca4:	4798      	blx	r3
    3ca6:	4b38      	ldr	r3, [pc, #224]	; (3d88 <main+0x384>)
    3ca8:	6018      	str	r0, [r3, #0]

	xTaskCreate(main_task,
    3caa:	464b      	mov	r3, r9
    3cac:	9303      	str	r3, [sp, #12]
    3cae:	9302      	str	r3, [sp, #8]
    3cb0:	9301      	str	r3, [sp, #4]
    3cb2:	3302      	adds	r3, #2
    3cb4:	9300      	str	r3, [sp, #0]
    3cb6:	2300      	movs	r3, #0
    3cb8:	2264      	movs	r2, #100	; 0x64
    3cba:	4934      	ldr	r1, [pc, #208]	; (3d8c <main+0x388>)
    3cbc:	4834      	ldr	r0, [pc, #208]	; (3d90 <main+0x38c>)
    3cbe:	4c35      	ldr	r4, [pc, #212]	; (3d94 <main+0x390>)
    3cc0:	47a0      	blx	r4
	NULL,
	MAIN_TASK_PRIORITY,
	NULL);


	xTaskCreate(uart_task,
    3cc2:	464b      	mov	r3, r9
    3cc4:	9303      	str	r3, [sp, #12]
    3cc6:	9302      	str	r3, [sp, #8]
    3cc8:	9301      	str	r3, [sp, #4]
    3cca:	4653      	mov	r3, sl
    3ccc:	9300      	str	r3, [sp, #0]
    3cce:	2300      	movs	r3, #0
    3cd0:	2264      	movs	r2, #100	; 0x64
    3cd2:	4931      	ldr	r1, [pc, #196]	; (3d98 <main+0x394>)
    3cd4:	4831      	ldr	r0, [pc, #196]	; (3d9c <main+0x398>)
    3cd6:	47a0      	blx	r4
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    3cd8:	4b31      	ldr	r3, [pc, #196]	; (3da0 <main+0x39c>)
    3cda:	4652      	mov	r2, sl
    3cdc:	701a      	strb	r2, [r3, #0]
    3cde:	f3bf 8f5f 	dmb	sy
    3ce2:	b662      	cpsie	i

	/* Enable global interrupts */
	system_interrupt_enable_global();
	
	// ..and let FreeRTOS run tasks!
	vTaskStartScheduler();
    3ce4:	4b2f      	ldr	r3, [pc, #188]	; (3da4 <main+0x3a0>)
    3ce6:	4798      	blx	r3
    3ce8:	e7fe      	b.n	3ce8 <main+0x2e4>
    3cea:	46c0      	nop			; (mov r8, r8)
    3cec:	00001d51 	.word	0x00001d51
    3cf0:	00003821 	.word	0x00003821
    3cf4:	00003891 	.word	0x00003891
    3cf8:	000038f5 	.word	0x000038f5
    3cfc:	00003919 	.word	0x00003919
    3d00:	00003941 	.word	0x00003941
    3d04:	200041a8 	.word	0x200041a8
    3d08:	0000018d 	.word	0x0000018d
    3d0c:	0000026d 	.word	0x0000026d
    3d10:	00003975 	.word	0x00003975
    3d14:	00120002 	.word	0x00120002
    3d18:	00130002 	.word	0x00130002
    3d1c:	20003d44 	.word	0x20003d44
    3d20:	20003d0c 	.word	0x20003d0c
    3d24:	00003809 	.word	0x00003809
    3d28:	20003d08 	.word	0x20003d08
    3d2c:	000037dd 	.word	0x000037dd
    3d30:	20003d04 	.word	0x20003d04
    3d34:	42000400 	.word	0x42000400
    3d38:	00000a65 	.word	0x00000a65
    3d3c:	200000ac 	.word	0x200000ac
    3d40:	00005e87 	.word	0x00005e87
    3d44:	00000999 	.word	0x00000999
    3d48:	00003769 	.word	0x00003769
    3d4c:	000010ad 	.word	0x000010ad
    3d50:	000010e9 	.word	0x000010e9
    3d54:	e000e100 	.word	0xe000e100
    3d58:	0000056d 	.word	0x0000056d
    3d5c:	40002800 	.word	0x40002800
    3d60:	20004600 	.word	0x20004600
    3d64:	0000187d 	.word	0x0000187d
    3d68:	00003499 	.word	0x00003499
    3d6c:	000005ad 	.word	0x000005ad
    3d70:	200041b0 	.word	0x200041b0
    3d74:	20000018 	.word	0x20000018
    3d78:	200043d8 	.word	0x200043d8
    3d7c:	00003ed9 	.word	0x00003ed9
    3d80:	20004e24 	.word	0x20004e24
    3d84:	00002311 	.word	0x00002311
    3d88:	20003cec 	.word	0x20003cec
    3d8c:	000067f0 	.word	0x000067f0
    3d90:	00003de1 	.word	0x00003de1
    3d94:	00002801 	.word	0x00002801
    3d98:	000067f8 	.word	0x000067f8
    3d9c:	000035ad 	.word	0x000035ad
    3da0:	20000008 	.word	0x20000008
    3da4:	000029ed 	.word	0x000029ed

00003da8 <media>:
	}
}


uint16_t media(uint16_t *buffer,uint32_t n_campioni)
{
    3da8:	b570      	push	{r4, r5, r6, lr}
	long tmp = 0;
	for(i=0;i<n_campioni;i++)
    3daa:	2200      	movs	r2, #0
    3dac:	4b0a      	ldr	r3, [pc, #40]	; (3dd8 <media+0x30>)
    3dae:	601a      	str	r2, [r3, #0]
    3db0:	2900      	cmp	r1, #0
    3db2:	d00c      	beq.n	3dce <media+0x26>
    3db4:	0003      	movs	r3, r0
    3db6:	004d      	lsls	r5, r1, #1
    3db8:	1945      	adds	r5, r0, r5
    3dba:	2000      	movs	r0, #0
    3dbc:	4e06      	ldr	r6, [pc, #24]	; (3dd8 <media+0x30>)
	{
		tmp += buffer[i];
    3dbe:	881c      	ldrh	r4, [r3, #0]
    3dc0:	1900      	adds	r0, r0, r4


uint16_t media(uint16_t *buffer,uint32_t n_campioni)
{
	long tmp = 0;
	for(i=0;i<n_campioni;i++)
    3dc2:	3201      	adds	r2, #1
    3dc4:	6032      	str	r2, [r6, #0]
    3dc6:	3302      	adds	r3, #2
    3dc8:	42ab      	cmp	r3, r5
    3dca:	d1f8      	bne.n	3dbe <media+0x16>
    3dcc:	e000      	b.n	3dd0 <media+0x28>
}


uint16_t media(uint16_t *buffer,uint32_t n_campioni)
{
	long tmp = 0;
    3dce:	2000      	movs	r0, #0
	for(i=0;i<n_campioni;i++)
	{
		tmp += buffer[i];
	}
	return (uint16_t)(tmp/n_campioni);
    3dd0:	4b02      	ldr	r3, [pc, #8]	; (3ddc <media+0x34>)
    3dd2:	4798      	blx	r3
    3dd4:	b280      	uxth	r0, r0
}
    3dd6:	bd70      	pop	{r4, r5, r6, pc}
    3dd8:	20003cf4 	.word	0x20003cf4
    3ddc:	00004371 	.word	0x00004371

00003de0 <main_task>:


uint32_t Max_index;
	
static void main_task(void *params)
{
    3de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//QueueInit();
	//QueuePut(0xAA);

	for(;;) {
		/* Start ADC conversion */
		adc_read_buffer_job(&adc_instance, adc_result_buffer, n_sample);
    3de2:	4e2a      	ldr	r6, [pc, #168]	; (3e8c <main_task+0xac>)
    3de4:	8832      	ldrh	r2, [r6, #0]
    3de6:	492a      	ldr	r1, [pc, #168]	; (3e90 <main_task+0xb0>)
    3de8:	482a      	ldr	r0, [pc, #168]	; (3e94 <main_task+0xb4>)
    3dea:	4b2b      	ldr	r3, [pc, #172]	; (3e98 <main_task+0xb8>)
    3dec:	4798      	blx	r3
		
		if (adc_read_done == true) {
    3dee:	4b2b      	ldr	r3, [pc, #172]	; (3e9c <main_task+0xbc>)
    3df0:	781b      	ldrb	r3, [r3, #0]
    3df2:	2b00      	cmp	r3, #0
    3df4:	d01f      	beq.n	3e36 <main_task+0x56>
			
			adc_read_done = false;
    3df6:	2200      	movs	r2, #0
    3df8:	4b28      	ldr	r3, [pc, #160]	; (3e9c <main_task+0xbc>)
    3dfa:	701a      	strb	r2, [r3, #0]
		
		
			arm_fir_fast_q15(&sFirStru,adc_result_buffer,adc_result_buffer_filtered,n_sample);
    3dfc:	4c23      	ldr	r4, [pc, #140]	; (3e8c <main_task+0xac>)
    3dfe:	4f28      	ldr	r7, [pc, #160]	; (3ea0 <main_task+0xc0>)
    3e00:	6823      	ldr	r3, [r4, #0]
    3e02:	003a      	movs	r2, r7
    3e04:	4922      	ldr	r1, [pc, #136]	; (3e90 <main_task+0xb0>)
    3e06:	4827      	ldr	r0, [pc, #156]	; (3ea4 <main_task+0xc4>)
    3e08:	4d27      	ldr	r5, [pc, #156]	; (3ea8 <main_task+0xc8>)
    3e0a:	47a8      	blx	r5
			result = media(adc_result_buffer_filtered,n_sample);
    3e0c:	6821      	ldr	r1, [r4, #0]
    3e0e:	0038      	movs	r0, r7
    3e10:	4b26      	ldr	r3, [pc, #152]	; (3eac <main_task+0xcc>)
    3e12:	4798      	blx	r3
    3e14:	4b26      	ldr	r3, [pc, #152]	; (3eb0 <main_task+0xd0>)
    3e16:	8018      	strh	r0, [r3, #0]
			

	
			//result = media(adc_result_buffer,n_sample);
			
			evaluate_led_output(result);
    3e18:	4b26      	ldr	r3, [pc, #152]	; (3eb4 <main_task+0xd4>)
    3e1a:	4798      	blx	r3
			
			if(integrale > threshold_value)
    3e1c:	4b26      	ldr	r3, [pc, #152]	; (3eb8 <main_task+0xd8>)
    3e1e:	881a      	ldrh	r2, [r3, #0]
    3e20:	4b26      	ldr	r3, [pc, #152]	; (3ebc <main_task+0xdc>)
    3e22:	881b      	ldrh	r3, [r3, #0]
    3e24:	429a      	cmp	r2, r3
    3e26:	d903      	bls.n	3e30 <main_task+0x50>
			{
				alarm_detected = 1;
    3e28:	2201      	movs	r2, #1
    3e2a:	4b25      	ldr	r3, [pc, #148]	; (3ec0 <main_task+0xe0>)
    3e2c:	701a      	strb	r2, [r3, #0]
    3e2e:	e002      	b.n	3e36 <main_task+0x56>
			}
			else
			{
				alarm_detected = 0;
    3e30:	2200      	movs	r2, #0
    3e32:	4b23      	ldr	r3, [pc, #140]	; (3ec0 <main_task+0xe0>)
    3e34:	701a      	strb	r2, [r3, #0]
			}
		}
			

		
		if(change_gain == true)
    3e36:	4b23      	ldr	r3, [pc, #140]	; (3ec4 <main_task+0xe4>)
    3e38:	781b      	ldrb	r3, [r3, #0]
    3e3a:	2b00      	cmp	r3, #0
    3e3c:	d022      	beq.n	3e84 <main_task+0xa4>
		{
			enum opamp_pot_mux temp_gain = OPAMP_POT_MUX_14R_2R;
			switch(analog_gain){
    3e3e:	4b22      	ldr	r3, [pc, #136]	; (3ec8 <main_task+0xe8>)
    3e40:	781a      	ldrb	r2, [r3, #0]
    3e42:	2a08      	cmp	r2, #8
    3e44:	d818      	bhi.n	3e78 <main_task+0x98>
    3e46:	0093      	lsls	r3, r2, #2
    3e48:	4a20      	ldr	r2, [pc, #128]	; (3ecc <main_task+0xec>)
    3e4a:	58d3      	ldr	r3, [r2, r3]
    3e4c:	469f      	mov	pc, r3
				case MUX_14R_2R:temp_gain = OPAMP_POT_MUX_14R_2R;
				break;
				/** Gain = R2/R1 = 1/3 */
				case MUX_12R_4R:temp_gain = OPAMP_POT_MUX_12R_4R;
    3e4e:	2080      	movs	r0, #128	; 0x80
    3e50:	0180      	lsls	r0, r0, #6
    3e52:	e012      	b.n	3e7a <main_task+0x9a>
				break;
				/** Gain = R2/R1 = 1 */
				case MUX_8R_8R:temp_gain = OPAMP_POT_MUX_8R_8R;
    3e54:	2080      	movs	r0, #128	; 0x80
    3e56:	01c0      	lsls	r0, r0, #7
				break;
    3e58:	e00f      	b.n	3e7a <main_task+0x9a>
				/** Gain = R2/R1 = 1 + 2/3 */
				case MUX_6R_10R:temp_gain = OPAMP_POT_MUX_6R_10R;
    3e5a:	20c0      	movs	r0, #192	; 0xc0
    3e5c:	01c0      	lsls	r0, r0, #7
				break;
    3e5e:	e00c      	b.n	3e7a <main_task+0x9a>
				/** Gain = R2/R1 = 3 */
				case MUX_4R_12R:temp_gain = OPAMP_POT_MUX_4R_12R;
    3e60:	2080      	movs	r0, #128	; 0x80
    3e62:	0200      	lsls	r0, r0, #8
				break;
    3e64:	e009      	b.n	3e7a <main_task+0x9a>
				/** Gain = R2/R1 = 4 + 1/3 */
				case MUX_3R_13R:temp_gain = OPAMP_POT_MUX_3R_13R;
    3e66:	20a0      	movs	r0, #160	; 0xa0
    3e68:	0200      	lsls	r0, r0, #8
				break;
    3e6a:	e006      	b.n	3e7a <main_task+0x9a>
				/** Gain = R2/R1 = 7 */
				case MUX_2R_14R:temp_gain = OPAMP_POT_MUX_2R_14R;
    3e6c:	20c0      	movs	r0, #192	; 0xc0
    3e6e:	0200      	lsls	r0, r0, #8
				break;
    3e70:	e003      	b.n	3e7a <main_task+0x9a>
				/** Gain = R2/R1 = 15 */
				case MUX_R_15R:temp_gain = OPAMP_POT_MUX_R_15R;
    3e72:	20e0      	movs	r0, #224	; 0xe0
    3e74:	0200      	lsls	r0, r0, #8
				break;
    3e76:	e000      	b.n	3e7a <main_task+0x9a>
			

		
		if(change_gain == true)
		{
			enum opamp_pot_mux temp_gain = OPAMP_POT_MUX_14R_2R;
    3e78:	2000      	movs	r0, #0
				break;
				default:
				break;
			}
			
			configure_opamp2(temp_gain);
    3e7a:	4b15      	ldr	r3, [pc, #84]	; (3ed0 <main_task+0xf0>)
    3e7c:	4798      	blx	r3
			
			change_gain = false;
    3e7e:	2200      	movs	r2, #0
    3e80:	4b10      	ldr	r3, [pc, #64]	; (3ec4 <main_task+0xe4>)
    3e82:	701a      	strb	r2, [r3, #0]
		}
		
		vTaskDelay(MAIN_TASK_DELAY);
    3e84:	2032      	movs	r0, #50	; 0x32
    3e86:	4b13      	ldr	r3, [pc, #76]	; (3ed4 <main_task+0xf4>)
    3e88:	4798      	blx	r3
	}
    3e8a:	e7ab      	b.n	3de4 <main_task+0x4>
    3e8c:	20000040 	.word	0x20000040
    3e90:	200043e4 	.word	0x200043e4
    3e94:	20004604 	.word	0x20004604
    3e98:	00001709 	.word	0x00001709
    3e9c:	20003cfa 	.word	0x20003cfa
    3ea0:	20003f98 	.word	0x20003f98
    3ea4:	200043d8 	.word	0x200043d8
    3ea8:	00003f01 	.word	0x00003f01
    3eac:	00003da9 	.word	0x00003da9
    3eb0:	20003cf8 	.word	0x20003cf8
    3eb4:	00003499 	.word	0x00003499
    3eb8:	20003ce8 	.word	0x20003ce8
    3ebc:	20003cea 	.word	0x20003cea
    3ec0:	20003cfb 	.word	0x20003cfb
    3ec4:	20003cf0 	.word	0x20003cf0
    3ec8:	20000014 	.word	0x20000014
    3ecc:	000067cc 	.word	0x000067cc
    3ed0:	00003821 	.word	0x00003821
    3ed4:	00002c99 	.word	0x00002c99

00003ed8 <arm_fir_init_q15>:
    3ed8:	b538      	push	{r3, r4, r5, lr}
    3eda:	1c1d      	adds	r5, r3, #0
    3edc:	1c04      	adds	r4, r0, #0
    3ede:	8001      	strh	r1, [r0, #0]
    3ee0:	6082      	str	r2, [r0, #8]
    3ee2:	4b06      	ldr	r3, [pc, #24]	; (3efc <arm_fir_init_q15+0x24>)
    3ee4:	9804      	ldr	r0, [sp, #16]
    3ee6:	18c2      	adds	r2, r0, r3
    3ee8:	1851      	adds	r1, r2, r1
    3eea:	004a      	lsls	r2, r1, #1
    3eec:	1c28      	adds	r0, r5, #0
    3eee:	2100      	movs	r1, #0
    3ef0:	f001 ffc1 	bl	5e76 <memset>
    3ef4:	6065      	str	r5, [r4, #4]
    3ef6:	2000      	movs	r0, #0
    3ef8:	bd38      	pop	{r3, r4, r5, pc}
    3efa:	46c0      	nop			; (mov r8, r8)
    3efc:	7fffffff 	.word	0x7fffffff

00003f00 <arm_fir_fast_q15>:
    3f00:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f02:	465f      	mov	r7, fp
    3f04:	464d      	mov	r5, r9
    3f06:	4644      	mov	r4, r8
    3f08:	4656      	mov	r6, sl
    3f0a:	b4f0      	push	{r4, r5, r6, r7}
    3f0c:	b09f      	sub	sp, #124	; 0x7c
    3f0e:	901a      	str	r0, [sp, #104]	; 0x68
    3f10:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    3f12:	4de4      	ldr	r5, [pc, #912]	; (42a4 <arm_fir_fast_q15+0x3a4>)
    3f14:	8824      	ldrh	r4, [r4, #0]
    3f16:	931d      	str	r3, [sp, #116]	; 0x74
    3f18:	9115      	str	r1, [sp, #84]	; 0x54
    3f1a:	991a      	ldr	r1, [sp, #104]	; 0x68
    3f1c:	6840      	ldr	r0, [r0, #4]
    3f1e:	1963      	adds	r3, r4, r5
    3f20:	9f1d      	ldr	r7, [sp, #116]	; 0x74
    3f22:	6889      	ldr	r1, [r1, #8]
    3f24:	005b      	lsls	r3, r3, #1
    3f26:	18c3      	adds	r3, r0, r3
    3f28:	08bf      	lsrs	r7, r7, #2
    3f2a:	921b      	str	r2, [sp, #108]	; 0x6c
    3f2c:	9012      	str	r0, [sp, #72]	; 0x48
    3f2e:	9111      	str	r1, [sp, #68]	; 0x44
    3f30:	9419      	str	r4, [sp, #100]	; 0x64
    3f32:	9314      	str	r3, [sp, #80]	; 0x50
    3f34:	971c      	str	r7, [sp, #112]	; 0x70
    3f36:	d100      	bne.n	3f3a <arm_fir_fast_q15+0x3a>
    3f38:	e14c      	b.n	41d4 <arm_fir_fast_q15+0x2d4>
    3f3a:	1c1a      	adds	r2, r3, #0
    3f3c:	2303      	movs	r3, #3
    3f3e:	08a0      	lsrs	r0, r4, #2
    3f40:	401c      	ands	r4, r3
    3f42:	1c0d      	adds	r5, r1, #0
    3f44:	00c3      	lsls	r3, r0, #3
    3f46:	9013      	str	r0, [sp, #76]	; 0x4c
    3f48:	9416      	str	r4, [sp, #88]	; 0x58
    3f4a:	9915      	ldr	r1, [sp, #84]	; 0x54
    3f4c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    3f4e:	9812      	ldr	r0, [sp, #72]	; 0x48
    3f50:	18ed      	adds	r5, r5, r3
    3f52:	3308      	adds	r3, #8
    3f54:	910b      	str	r1, [sp, #44]	; 0x2c
    3f56:	920c      	str	r2, [sp, #48]	; 0x30
    3f58:	940e      	str	r4, [sp, #56]	; 0x38
    3f5a:	9517      	str	r5, [sp, #92]	; 0x5c
    3f5c:	970f      	str	r7, [sp, #60]	; 0x3c
    3f5e:	900d      	str	r0, [sp, #52]	; 0x34
    3f60:	9318      	str	r3, [sp, #96]	; 0x60
    3f62:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3f64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3f66:	880b      	ldrh	r3, [r1, #0]
    3f68:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    3f6a:	8013      	strh	r3, [r2, #0]
    3f6c:	884b      	ldrh	r3, [r1, #2]
    3f6e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    3f70:	8053      	strh	r3, [r2, #2]
    3f72:	888b      	ldrh	r3, [r1, #4]
    3f74:	8093      	strh	r3, [r2, #4]
    3f76:	88cb      	ldrh	r3, [r1, #6]
    3f78:	990d      	ldr	r1, [sp, #52]	; 0x34
    3f7a:	80d3      	strh	r3, [r2, #6]
    3f7c:	6808      	ldr	r0, [r1, #0]
    3f7e:	6863      	ldr	r3, [r4, #4]
    3f80:	3108      	adds	r1, #8
    3f82:	4680      	mov	r8, r0
    3f84:	9110      	str	r1, [sp, #64]	; 0x40
    3f86:	468c      	mov	ip, r1
    3f88:	469b      	mov	fp, r3
    3f8a:	2d00      	cmp	r5, #0
    3f8c:	d100      	bne.n	3f90 <arm_fir_fast_q15+0x90>
    3f8e:	e1d1      	b.n	4334 <arm_fir_fast_q15+0x434>
    3f90:	2000      	movs	r0, #0
    3f92:	4643      	mov	r3, r8
    3f94:	2100      	movs	r1, #0
    3f96:	141b      	asrs	r3, r3, #16
    3f98:	9008      	str	r0, [sp, #32]
    3f9a:	4640      	mov	r0, r8
    3f9c:	0c06      	lsrs	r6, r0, #16
    3f9e:	2700      	movs	r7, #0
    3fa0:	2200      	movs	r2, #0
    3fa2:	469a      	mov	sl, r3
    3fa4:	9c11      	ldr	r4, [sp, #68]	; 0x44
    3fa6:	9503      	str	r5, [sp, #12]
    3fa8:	9109      	str	r1, [sp, #36]	; 0x24
    3faa:	4645      	mov	r5, r8
    3fac:	4659      	mov	r1, fp
    3fae:	970a      	str	r7, [sp, #40]	; 0x28
    3fb0:	9207      	str	r2, [sp, #28]
    3fb2:	b22f      	sxth	r7, r5
    3fb4:	1c32      	adds	r2, r6, #0
    3fb6:	040d      	lsls	r5, r1, #16
    3fb8:	4650      	mov	r0, sl
    3fba:	465b      	mov	r3, fp
    3fbc:	4666      	mov	r6, ip
    3fbe:	46b9      	mov	r9, r7
    3fc0:	9004      	str	r0, [sp, #16]
    3fc2:	46ab      	mov	fp, r5
    3fc4:	1c27      	adds	r7, r4, #0
    3fc6:	4694      	mov	ip, r2
    3fc8:	683d      	ldr	r5, [r7, #0]
    3fca:	9c04      	ldr	r4, [sp, #16]
    3fcc:	b22a      	sxth	r2, r5
    3fce:	9201      	str	r2, [sp, #4]
    3fd0:	1429      	asrs	r1, r5, #16
    3fd2:	9102      	str	r1, [sp, #8]
    3fd4:	1c0a      	adds	r2, r1, #0
    3fd6:	9901      	ldr	r1, [sp, #4]
    3fd8:	4648      	mov	r0, r9
    3fda:	4362      	muls	r2, r4
    3fdc:	4341      	muls	r1, r0
    3fde:	9d07      	ldr	r5, [sp, #28]
    3fe0:	4664      	mov	r4, ip
    3fe2:	18aa      	adds	r2, r5, r2
    3fe4:	1852      	adds	r2, r2, r1
    3fe6:	465d      	mov	r5, fp
    3fe8:	1419      	asrs	r1, r3, #16
    3fea:	4692      	mov	sl, r2
    3fec:	b21a      	sxth	r2, r3
    3fee:	4689      	mov	r9, r1
    3ff0:	4690      	mov	r8, r2
    3ff2:	0c29      	lsrs	r1, r5, #16
    3ff4:	0422      	lsls	r2, r4, #16
    3ff6:	430a      	orrs	r2, r1
    3ff8:	4694      	mov	ip, r2
    3ffa:	6832      	ldr	r2, [r6, #0]
    3ffc:	0c1b      	lsrs	r3, r3, #16
    3ffe:	0411      	lsls	r1, r2, #16
    4000:	0c09      	lsrs	r1, r1, #16
    4002:	041b      	lsls	r3, r3, #16
    4004:	430b      	orrs	r3, r1
    4006:	1418      	asrs	r0, r3, #16
    4008:	9005      	str	r0, [sp, #20]
    400a:	6878      	ldr	r0, [r7, #4]
    400c:	b219      	sxth	r1, r3
    400e:	9106      	str	r1, [sp, #24]
    4010:	464b      	mov	r3, r9
    4012:	1401      	asrs	r1, r0, #16
    4014:	434b      	muls	r3, r1
    4016:	b200      	sxth	r0, r0
    4018:	4644      	mov	r4, r8
    401a:	4344      	muls	r4, r0
    401c:	449a      	add	sl, r3
    401e:	4454      	add	r4, sl
    4020:	9d02      	ldr	r5, [sp, #8]
    4022:	9407      	str	r4, [sp, #28]
    4024:	464c      	mov	r4, r9
    4026:	436c      	muls	r4, r5
    4028:	46a1      	mov	r9, r4
    402a:	9c08      	ldr	r4, [sp, #32]
    402c:	4645      	mov	r5, r8
    402e:	44a1      	add	r9, r4
    4030:	9c01      	ldr	r4, [sp, #4]
    4032:	6873      	ldr	r3, [r6, #4]
    4034:	4365      	muls	r5, r4
    4036:	46a8      	mov	r8, r5
    4038:	1415      	asrs	r5, r2, #16
    403a:	b214      	sxth	r4, r2
    403c:	9504      	str	r5, [sp, #16]
    403e:	434d      	muls	r5, r1
    4040:	44c8      	add	r8, r9
    4042:	46a1      	mov	r9, r4
    4044:	4344      	muls	r4, r0
    4046:	46ab      	mov	fp, r5
    4048:	46a2      	mov	sl, r4
    404a:	44d8      	add	r8, fp
    404c:	44d0      	add	r8, sl
    404e:	4645      	mov	r5, r8
    4050:	4664      	mov	r4, ip
    4052:	9508      	str	r5, [sp, #32]
    4054:	9d01      	ldr	r5, [sp, #4]
    4056:	1424      	asrs	r4, r4, #16
    4058:	436c      	muls	r4, r5
    405a:	46a0      	mov	r8, r4
    405c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    405e:	4665      	mov	r5, ip
    4060:	44a0      	add	r8, r4
    4062:	9c02      	ldr	r4, [sp, #8]
    4064:	b22d      	sxth	r5, r5
    4066:	4365      	muls	r5, r4
    4068:	46ac      	mov	ip, r5
    406a:	9d05      	ldr	r5, [sp, #20]
    406c:	9c06      	ldr	r4, [sp, #24]
    406e:	4345      	muls	r5, r0
    4070:	434c      	muls	r4, r1
    4072:	46aa      	mov	sl, r5
    4074:	44c4      	add	ip, r8
    4076:	44d4      	add	ip, sl
    4078:	46a0      	mov	r8, r4
    407a:	44c4      	add	ip, r8
    407c:	4665      	mov	r5, ip
    407e:	0c14      	lsrs	r4, r2, #16
    4080:	9509      	str	r5, [sp, #36]	; 0x24
    4082:	041d      	lsls	r5, r3, #16
    4084:	46a4      	mov	ip, r4
    4086:	46ab      	mov	fp, r5
    4088:	0424      	lsls	r4, r4, #16
    408a:	0c2d      	lsrs	r5, r5, #16
    408c:	432c      	orrs	r4, r5
    408e:	46a0      	mov	r8, r4
    4090:	9d05      	ldr	r5, [sp, #20]
    4092:	9c01      	ldr	r4, [sp, #4]
    4094:	3608      	adds	r6, #8
    4096:	4365      	muls	r5, r4
    4098:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    409a:	3708      	adds	r7, #8
    409c:	1964      	adds	r4, r4, r5
    409e:	46a2      	mov	sl, r4
    40a0:	9d02      	ldr	r5, [sp, #8]
    40a2:	9c06      	ldr	r4, [sp, #24]
    40a4:	436c      	muls	r4, r5
    40a6:	4645      	mov	r5, r8
    40a8:	44a2      	add	sl, r4
    40aa:	142c      	asrs	r4, r5, #16
    40ac:	4360      	muls	r0, r4
    40ae:	b22d      	sxth	r5, r5
    40b0:	434d      	muls	r5, r1
    40b2:	4450      	add	r0, sl
    40b4:	1945      	adds	r5, r0, r5
    40b6:	950a      	str	r5, [sp, #40]	; 0x28
    40b8:	9d03      	ldr	r5, [sp, #12]
    40ba:	3d01      	subs	r5, #1
    40bc:	9503      	str	r5, [sp, #12]
    40be:	2d00      	cmp	r5, #0
    40c0:	d182      	bne.n	3fc8 <arm_fir_fast_q15+0xc8>
    40c2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    40c4:	469b      	mov	fp, r3
    40c6:	46bc      	mov	ip, r7
    40c8:	9f18      	ldr	r7, [sp, #96]	; 0x60
    40ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    40cc:	4690      	mov	r8, r2
    40ce:	44bc      	add	ip, r7
    40d0:	9d16      	ldr	r5, [sp, #88]	; 0x58
    40d2:	2d00      	cmp	r5, #0
    40d4:	d030      	beq.n	4138 <arm_fir_fast_q15+0x238>
    40d6:	681b      	ldr	r3, [r3, #0]
    40d8:	4647      	mov	r7, r8
    40da:	1419      	asrs	r1, r3, #16
    40dc:	143e      	asrs	r6, r7, #16
    40de:	b21b      	sxth	r3, r3
    40e0:	b23a      	sxth	r2, r7
    40e2:	434e      	muls	r6, r1
    40e4:	435a      	muls	r2, r3
    40e6:	9807      	ldr	r0, [sp, #28]
    40e8:	9c08      	ldr	r4, [sp, #32]
    40ea:	1986      	adds	r6, r0, r6
    40ec:	18b2      	adds	r2, r6, r2
    40ee:	9207      	str	r2, [sp, #28]
    40f0:	465a      	mov	r2, fp
    40f2:	1416      	asrs	r6, r2, #16
    40f4:	434e      	muls	r6, r1
    40f6:	b212      	sxth	r2, r2
    40f8:	435a      	muls	r2, r3
    40fa:	19a6      	adds	r6, r4, r6
    40fc:	18b2      	adds	r2, r6, r2
    40fe:	0c38      	lsrs	r0, r7, #16
    4100:	465f      	mov	r7, fp
    4102:	9208      	str	r2, [sp, #32]
    4104:	043a      	lsls	r2, r7, #16
    4106:	0400      	lsls	r0, r0, #16
    4108:	0c12      	lsrs	r2, r2, #16
    410a:	4302      	orrs	r2, r0
    410c:	1410      	asrs	r0, r2, #16
    410e:	4358      	muls	r0, r3
    4110:	9c09      	ldr	r4, [sp, #36]	; 0x24
    4112:	b212      	sxth	r2, r2
    4114:	4665      	mov	r5, ip
    4116:	1820      	adds	r0, r4, r0
    4118:	1c16      	adds	r6, r2, #0
    411a:	0c3c      	lsrs	r4, r7, #16
    411c:	882a      	ldrh	r2, [r5, #0]
    411e:	0424      	lsls	r4, r4, #16
    4120:	4314      	orrs	r4, r2
    4122:	1422      	asrs	r2, r4, #16
    4124:	4353      	muls	r3, r2
    4126:	b224      	sxth	r4, r4
    4128:	434e      	muls	r6, r1
    412a:	434c      	muls	r4, r1
    412c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    412e:	1986      	adds	r6, r0, r6
    4130:	18fb      	adds	r3, r7, r3
    4132:	191c      	adds	r4, r3, r4
    4134:	9609      	str	r6, [sp, #36]	; 0x24
    4136:	940a      	str	r4, [sp, #40]	; 0x28
    4138:	9807      	ldr	r0, [sp, #28]
    413a:	13c6      	asrs	r6, r0, #15
    413c:	2e00      	cmp	r6, #0
    413e:	dc00      	bgt.n	4142 <arm_fir_fast_q15+0x242>
    4140:	e0f2      	b.n	4328 <arm_fir_fast_q15+0x428>
    4142:	4959      	ldr	r1, [pc, #356]	; (42a8 <arm_fir_fast_q15+0x3a8>)
    4144:	428e      	cmp	r6, r1
    4146:	dd00      	ble.n	414a <arm_fir_fast_q15+0x24a>
    4148:	1c0e      	adds	r6, r1, #0
    414a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    414c:	0433      	lsls	r3, r6, #16
    414e:	0c1b      	lsrs	r3, r3, #16
    4150:	13e6      	asrs	r6, r4, #15
    4152:	2e00      	cmp	r6, #0
    4154:	dc00      	bgt.n	4158 <arm_fir_fast_q15+0x258>
    4156:	e0c7      	b.n	42e8 <arm_fir_fast_q15+0x3e8>
    4158:	4d53      	ldr	r5, [pc, #332]	; (42a8 <arm_fir_fast_q15+0x3a8>)
    415a:	42ae      	cmp	r6, r5
    415c:	dd00      	ble.n	4160 <arm_fir_fast_q15+0x260>
    415e:	1c2e      	adds	r6, r5, #0
    4160:	0436      	lsls	r6, r6, #16
    4162:	980e      	ldr	r0, [sp, #56]	; 0x38
    4164:	9908      	ldr	r1, [sp, #32]
    4166:	431e      	orrs	r6, r3
    4168:	6006      	str	r6, [r0, #0]
    416a:	13ce      	asrs	r6, r1, #15
    416c:	2e00      	cmp	r6, #0
    416e:	dc00      	bgt.n	4172 <arm_fir_fast_q15+0x272>
    4170:	e0c8      	b.n	4304 <arm_fir_fast_q15+0x404>
    4172:	4a4d      	ldr	r2, [pc, #308]	; (42a8 <arm_fir_fast_q15+0x3a8>)
    4174:	4296      	cmp	r6, r2
    4176:	dd00      	ble.n	417a <arm_fir_fast_q15+0x27a>
    4178:	1c16      	adds	r6, r2, #0
    417a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    417c:	0436      	lsls	r6, r6, #16
    417e:	0c36      	lsrs	r6, r6, #16
    4180:	13e0      	asrs	r0, r4, #15
    4182:	2800      	cmp	r0, #0
    4184:	dc00      	bgt.n	4188 <arm_fir_fast_q15+0x288>
    4186:	e0c9      	b.n	431c <arm_fir_fast_q15+0x41c>
    4188:	4d47      	ldr	r5, [pc, #284]	; (42a8 <arm_fir_fast_q15+0x3a8>)
    418a:	42a8      	cmp	r0, r5
    418c:	dd00      	ble.n	4190 <arm_fir_fast_q15+0x290>
    418e:	1c28      	adds	r0, r5, #0
    4190:	0400      	lsls	r0, r0, #16
    4192:	4306      	orrs	r6, r0
    4194:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4196:	980e      	ldr	r0, [sp, #56]	; 0x38
    4198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    419a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    419c:	9910      	ldr	r1, [sp, #64]	; 0x40
    419e:	6046      	str	r6, [r0, #4]
    41a0:	3a01      	subs	r2, #1
    41a2:	3308      	adds	r3, #8
    41a4:	3408      	adds	r4, #8
    41a6:	3008      	adds	r0, #8
    41a8:	910d      	str	r1, [sp, #52]	; 0x34
    41aa:	920f      	str	r2, [sp, #60]	; 0x3c
    41ac:	930b      	str	r3, [sp, #44]	; 0x2c
    41ae:	940c      	str	r4, [sp, #48]	; 0x30
    41b0:	900e      	str	r0, [sp, #56]	; 0x38
    41b2:	2a00      	cmp	r2, #0
    41b4:	d000      	beq.n	41b8 <arm_fir_fast_q15+0x2b8>
    41b6:	e6d4      	b.n	3f62 <arm_fir_fast_q15+0x62>
    41b8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    41ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
    41bc:	9815      	ldr	r0, [sp, #84]	; 0x54
    41be:	991b      	ldr	r1, [sp, #108]	; 0x6c
    41c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    41c2:	00eb      	lsls	r3, r5, #3
    41c4:	18ff      	adds	r7, r7, r3
    41c6:	18c0      	adds	r0, r0, r3
    41c8:	18c9      	adds	r1, r1, r3
    41ca:	18d2      	adds	r2, r2, r3
    41cc:	9714      	str	r7, [sp, #80]	; 0x50
    41ce:	9015      	str	r0, [sp, #84]	; 0x54
    41d0:	911b      	str	r1, [sp, #108]	; 0x6c
    41d2:	9212      	str	r2, [sp, #72]	; 0x48
    41d4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    41d6:	2303      	movs	r3, #3
    41d8:	401c      	ands	r4, r3
    41da:	46a0      	mov	r8, r4
    41dc:	d038      	beq.n	4250 <arm_fir_fast_q15+0x350>
    41de:	9d19      	ldr	r5, [sp, #100]	; 0x64
    41e0:	4f32      	ldr	r7, [pc, #200]	; (42ac <arm_fir_fast_q15+0x3ac>)
    41e2:	086d      	lsrs	r5, r5, #1
    41e4:	4830      	ldr	r0, [pc, #192]	; (42a8 <arm_fir_fast_q15+0x3a8>)
    41e6:	991b      	ldr	r1, [sp, #108]	; 0x6c
    41e8:	46aa      	mov	sl, r5
    41ea:	46d3      	mov	fp, sl
    41ec:	1c26      	adds	r6, r4, #0
    41ee:	2500      	movs	r5, #0
    41f0:	46b9      	mov	r9, r7
    41f2:	4684      	mov	ip, r0
    41f4:	468a      	mov	sl, r1
    41f6:	9c15      	ldr	r4, [sp, #84]	; 0x54
    41f8:	9812      	ldr	r0, [sp, #72]	; 0x48
    41fa:	5b63      	ldrh	r3, [r4, r5]
    41fc:	9f14      	ldr	r7, [sp, #80]	; 0x50
    41fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
    4200:	537b      	strh	r3, [r7, r5]
    4202:	4659      	mov	r1, fp
    4204:	1943      	adds	r3, r0, r5
    4206:	9503      	str	r5, [sp, #12]
    4208:	2000      	movs	r0, #0
    420a:	2500      	movs	r5, #0
    420c:	5f57      	ldrsh	r7, [r2, r5]
    420e:	2500      	movs	r5, #0
    4210:	5f5c      	ldrsh	r4, [r3, r5]
    4212:	3901      	subs	r1, #1
    4214:	437c      	muls	r4, r7
    4216:	1820      	adds	r0, r4, r0
    4218:	2702      	movs	r7, #2
    421a:	5fdc      	ldrsh	r4, [r3, r7]
    421c:	2502      	movs	r5, #2
    421e:	5f57      	ldrsh	r7, [r2, r5]
    4220:	3304      	adds	r3, #4
    4222:	437c      	muls	r4, r7
    4224:	3204      	adds	r2, #4
    4226:	1820      	adds	r0, r4, r0
    4228:	2900      	cmp	r1, #0
    422a:	d1ee      	bne.n	420a <arm_fir_fast_q15+0x30a>
    422c:	9d03      	ldr	r5, [sp, #12]
    422e:	13c0      	asrs	r0, r0, #15
    4230:	2800      	cmp	r0, #0
    4232:	dd55      	ble.n	42e0 <arm_fir_fast_q15+0x3e0>
    4234:	4560      	cmp	r0, ip
    4236:	dd00      	ble.n	423a <arm_fir_fast_q15+0x33a>
    4238:	481b      	ldr	r0, [pc, #108]	; (42a8 <arm_fir_fast_q15+0x3a8>)
    423a:	4657      	mov	r7, sl
    423c:	3e01      	subs	r6, #1
    423e:	5378      	strh	r0, [r7, r5]
    4240:	3502      	adds	r5, #2
    4242:	2e00      	cmp	r6, #0
    4244:	d1d7      	bne.n	41f6 <arm_fir_fast_q15+0x2f6>
    4246:	9912      	ldr	r1, [sp, #72]	; 0x48
    4248:	4640      	mov	r0, r8
    424a:	0043      	lsls	r3, r0, #1
    424c:	18c9      	adds	r1, r1, r3
    424e:	9112      	str	r1, [sp, #72]	; 0x48
    4250:	9e19      	ldr	r6, [sp, #100]	; 0x64
    4252:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    4254:	3e01      	subs	r6, #1
    4256:	6862      	ldr	r2, [r4, #4]
    4258:	08b5      	lsrs	r5, r6, #2
    425a:	d02e      	beq.n	42ba <arm_fir_fast_q15+0x3ba>
    425c:	9912      	ldr	r1, [sp, #72]	; 0x48
    425e:	2300      	movs	r3, #0
    4260:	3108      	adds	r1, #8
    4262:	1c1f      	adds	r7, r3, #0
    4264:	1c10      	adds	r0, r2, #0
    4266:	9c12      	ldr	r4, [sp, #72]	; 0x48
    4268:	428a      	cmp	r2, r1
    426a:	415f      	adcs	r7, r3
    426c:	3008      	adds	r0, #8
    426e:	2102      	movs	r1, #2
    4270:	4284      	cmp	r4, r0
    4272:	415b      	adcs	r3, r3
    4274:	42a9      	cmp	r1, r5
    4276:	4189      	sbcs	r1, r1
    4278:	433b      	orrs	r3, r7
    427a:	4249      	negs	r1, r1
    427c:	4219      	tst	r1, r3
    427e:	d063      	beq.n	4348 <arm_fir_fast_q15+0x448>
    4280:	1c23      	adds	r3, r4, #0
    4282:	4313      	orrs	r3, r2
    4284:	079f      	lsls	r7, r3, #30
    4286:	d15f      	bne.n	4348 <arm_fir_fast_q15+0x448>
    4288:	2300      	movs	r3, #0
    428a:	2100      	movs	r1, #0
    428c:	1c20      	adds	r0, r4, #0
    428e:	18c4      	adds	r4, r0, r3
    4290:	6867      	ldr	r7, [r4, #4]
    4292:	58c4      	ldr	r4, [r0, r3]
    4294:	3101      	adds	r1, #1
    4296:	50d4      	str	r4, [r2, r3]
    4298:	18d4      	adds	r4, r2, r3
    429a:	6067      	str	r7, [r4, #4]
    429c:	3308      	adds	r3, #8
    429e:	42a9      	cmp	r1, r5
    42a0:	d1f5      	bne.n	428e <arm_fir_fast_q15+0x38e>
    42a2:	e005      	b.n	42b0 <arm_fir_fast_q15+0x3b0>
    42a4:	7fffffff 	.word	0x7fffffff
    42a8:	00007fff 	.word	0x00007fff
    42ac:	ffff8000 	.word	0xffff8000
    42b0:	9812      	ldr	r0, [sp, #72]	; 0x48
    42b2:	00ed      	lsls	r5, r5, #3
    42b4:	1940      	adds	r0, r0, r5
    42b6:	1952      	adds	r2, r2, r5
    42b8:	9012      	str	r0, [sp, #72]	; 0x48
    42ba:	2103      	movs	r1, #3
    42bc:	4031      	ands	r1, r6
    42be:	2300      	movs	r3, #0
    42c0:	2900      	cmp	r1, #0
    42c2:	d006      	beq.n	42d2 <arm_fir_fast_q15+0x3d2>
    42c4:	9c12      	ldr	r4, [sp, #72]	; 0x48
    42c6:	5ae0      	ldrh	r0, [r4, r3]
    42c8:	3901      	subs	r1, #1
    42ca:	52d0      	strh	r0, [r2, r3]
    42cc:	3302      	adds	r3, #2
    42ce:	2900      	cmp	r1, #0
    42d0:	d1f9      	bne.n	42c6 <arm_fir_fast_q15+0x3c6>
    42d2:	b01f      	add	sp, #124	; 0x7c
    42d4:	bc3c      	pop	{r2, r3, r4, r5}
    42d6:	4690      	mov	r8, r2
    42d8:	4699      	mov	r9, r3
    42da:	46a2      	mov	sl, r4
    42dc:	46ab      	mov	fp, r5
    42de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42e0:	4548      	cmp	r0, r9
    42e2:	daaa      	bge.n	423a <arm_fir_fast_q15+0x33a>
    42e4:	4821      	ldr	r0, [pc, #132]	; (436c <arm_fir_fast_q15+0x46c>)
    42e6:	e7a8      	b.n	423a <arm_fir_fast_q15+0x33a>
    42e8:	4f20      	ldr	r7, [pc, #128]	; (436c <arm_fir_fast_q15+0x46c>)
    42ea:	42be      	cmp	r6, r7
    42ec:	db00      	blt.n	42f0 <arm_fir_fast_q15+0x3f0>
    42ee:	e737      	b.n	4160 <arm_fir_fast_q15+0x260>
    42f0:	1c3e      	adds	r6, r7, #0
    42f2:	0436      	lsls	r6, r6, #16
    42f4:	980e      	ldr	r0, [sp, #56]	; 0x38
    42f6:	9908      	ldr	r1, [sp, #32]
    42f8:	431e      	orrs	r6, r3
    42fa:	6006      	str	r6, [r0, #0]
    42fc:	13ce      	asrs	r6, r1, #15
    42fe:	2e00      	cmp	r6, #0
    4300:	dd00      	ble.n	4304 <arm_fir_fast_q15+0x404>
    4302:	e736      	b.n	4172 <arm_fir_fast_q15+0x272>
    4304:	4b19      	ldr	r3, [pc, #100]	; (436c <arm_fir_fast_q15+0x46c>)
    4306:	429e      	cmp	r6, r3
    4308:	db00      	blt.n	430c <arm_fir_fast_q15+0x40c>
    430a:	e736      	b.n	417a <arm_fir_fast_q15+0x27a>
    430c:	1c1e      	adds	r6, r3, #0
    430e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4310:	0436      	lsls	r6, r6, #16
    4312:	0c36      	lsrs	r6, r6, #16
    4314:	13e0      	asrs	r0, r4, #15
    4316:	2800      	cmp	r0, #0
    4318:	dd00      	ble.n	431c <arm_fir_fast_q15+0x41c>
    431a:	e735      	b.n	4188 <arm_fir_fast_q15+0x288>
    431c:	4f13      	ldr	r7, [pc, #76]	; (436c <arm_fir_fast_q15+0x46c>)
    431e:	42b8      	cmp	r0, r7
    4320:	db00      	blt.n	4324 <arm_fir_fast_q15+0x424>
    4322:	e735      	b.n	4190 <arm_fir_fast_q15+0x290>
    4324:	1c38      	adds	r0, r7, #0
    4326:	e733      	b.n	4190 <arm_fir_fast_q15+0x290>
    4328:	4a10      	ldr	r2, [pc, #64]	; (436c <arm_fir_fast_q15+0x46c>)
    432a:	4296      	cmp	r6, r2
    432c:	db00      	blt.n	4330 <arm_fir_fast_q15+0x430>
    432e:	e70c      	b.n	414a <arm_fir_fast_q15+0x24a>
    4330:	1c16      	adds	r6, r2, #0
    4332:	e70a      	b.n	414a <arm_fir_fast_q15+0x24a>
    4334:	2000      	movs	r0, #0
    4336:	2100      	movs	r1, #0
    4338:	2200      	movs	r2, #0
    433a:	2400      	movs	r4, #0
    433c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    433e:	900a      	str	r0, [sp, #40]	; 0x28
    4340:	9108      	str	r1, [sp, #32]
    4342:	9209      	str	r2, [sp, #36]	; 0x24
    4344:	9407      	str	r4, [sp, #28]
    4346:	e6c3      	b.n	40d0 <arm_fir_fast_q15+0x1d0>
    4348:	9b12      	ldr	r3, [sp, #72]	; 0x48
    434a:	1c11      	adds	r1, r2, #0
    434c:	1c28      	adds	r0, r5, #0
    434e:	881c      	ldrh	r4, [r3, #0]
    4350:	3801      	subs	r0, #1
    4352:	800c      	strh	r4, [r1, #0]
    4354:	885c      	ldrh	r4, [r3, #2]
    4356:	804c      	strh	r4, [r1, #2]
    4358:	889c      	ldrh	r4, [r3, #4]
    435a:	808c      	strh	r4, [r1, #4]
    435c:	88dc      	ldrh	r4, [r3, #6]
    435e:	3308      	adds	r3, #8
    4360:	80cc      	strh	r4, [r1, #6]
    4362:	3108      	adds	r1, #8
    4364:	2800      	cmp	r0, #0
    4366:	d1f2      	bne.n	434e <arm_fir_fast_q15+0x44e>
    4368:	e7a2      	b.n	42b0 <arm_fir_fast_q15+0x3b0>
    436a:	46c0      	nop			; (mov r8, r8)
    436c:	ffff8000 	.word	0xffff8000

00004370 <__aeabi_uidiv>:
    4370:	2200      	movs	r2, #0
    4372:	0843      	lsrs	r3, r0, #1
    4374:	428b      	cmp	r3, r1
    4376:	d374      	bcc.n	4462 <__aeabi_uidiv+0xf2>
    4378:	0903      	lsrs	r3, r0, #4
    437a:	428b      	cmp	r3, r1
    437c:	d35f      	bcc.n	443e <__aeabi_uidiv+0xce>
    437e:	0a03      	lsrs	r3, r0, #8
    4380:	428b      	cmp	r3, r1
    4382:	d344      	bcc.n	440e <__aeabi_uidiv+0x9e>
    4384:	0b03      	lsrs	r3, r0, #12
    4386:	428b      	cmp	r3, r1
    4388:	d328      	bcc.n	43dc <__aeabi_uidiv+0x6c>
    438a:	0c03      	lsrs	r3, r0, #16
    438c:	428b      	cmp	r3, r1
    438e:	d30d      	bcc.n	43ac <__aeabi_uidiv+0x3c>
    4390:	22ff      	movs	r2, #255	; 0xff
    4392:	0209      	lsls	r1, r1, #8
    4394:	ba12      	rev	r2, r2
    4396:	0c03      	lsrs	r3, r0, #16
    4398:	428b      	cmp	r3, r1
    439a:	d302      	bcc.n	43a2 <__aeabi_uidiv+0x32>
    439c:	1212      	asrs	r2, r2, #8
    439e:	0209      	lsls	r1, r1, #8
    43a0:	d065      	beq.n	446e <__aeabi_uidiv+0xfe>
    43a2:	0b03      	lsrs	r3, r0, #12
    43a4:	428b      	cmp	r3, r1
    43a6:	d319      	bcc.n	43dc <__aeabi_uidiv+0x6c>
    43a8:	e000      	b.n	43ac <__aeabi_uidiv+0x3c>
    43aa:	0a09      	lsrs	r1, r1, #8
    43ac:	0bc3      	lsrs	r3, r0, #15
    43ae:	428b      	cmp	r3, r1
    43b0:	d301      	bcc.n	43b6 <__aeabi_uidiv+0x46>
    43b2:	03cb      	lsls	r3, r1, #15
    43b4:	1ac0      	subs	r0, r0, r3
    43b6:	4152      	adcs	r2, r2
    43b8:	0b83      	lsrs	r3, r0, #14
    43ba:	428b      	cmp	r3, r1
    43bc:	d301      	bcc.n	43c2 <__aeabi_uidiv+0x52>
    43be:	038b      	lsls	r3, r1, #14
    43c0:	1ac0      	subs	r0, r0, r3
    43c2:	4152      	adcs	r2, r2
    43c4:	0b43      	lsrs	r3, r0, #13
    43c6:	428b      	cmp	r3, r1
    43c8:	d301      	bcc.n	43ce <__aeabi_uidiv+0x5e>
    43ca:	034b      	lsls	r3, r1, #13
    43cc:	1ac0      	subs	r0, r0, r3
    43ce:	4152      	adcs	r2, r2
    43d0:	0b03      	lsrs	r3, r0, #12
    43d2:	428b      	cmp	r3, r1
    43d4:	d301      	bcc.n	43da <__aeabi_uidiv+0x6a>
    43d6:	030b      	lsls	r3, r1, #12
    43d8:	1ac0      	subs	r0, r0, r3
    43da:	4152      	adcs	r2, r2
    43dc:	0ac3      	lsrs	r3, r0, #11
    43de:	428b      	cmp	r3, r1
    43e0:	d301      	bcc.n	43e6 <__aeabi_uidiv+0x76>
    43e2:	02cb      	lsls	r3, r1, #11
    43e4:	1ac0      	subs	r0, r0, r3
    43e6:	4152      	adcs	r2, r2
    43e8:	0a83      	lsrs	r3, r0, #10
    43ea:	428b      	cmp	r3, r1
    43ec:	d301      	bcc.n	43f2 <__aeabi_uidiv+0x82>
    43ee:	028b      	lsls	r3, r1, #10
    43f0:	1ac0      	subs	r0, r0, r3
    43f2:	4152      	adcs	r2, r2
    43f4:	0a43      	lsrs	r3, r0, #9
    43f6:	428b      	cmp	r3, r1
    43f8:	d301      	bcc.n	43fe <__aeabi_uidiv+0x8e>
    43fa:	024b      	lsls	r3, r1, #9
    43fc:	1ac0      	subs	r0, r0, r3
    43fe:	4152      	adcs	r2, r2
    4400:	0a03      	lsrs	r3, r0, #8
    4402:	428b      	cmp	r3, r1
    4404:	d301      	bcc.n	440a <__aeabi_uidiv+0x9a>
    4406:	020b      	lsls	r3, r1, #8
    4408:	1ac0      	subs	r0, r0, r3
    440a:	4152      	adcs	r2, r2
    440c:	d2cd      	bcs.n	43aa <__aeabi_uidiv+0x3a>
    440e:	09c3      	lsrs	r3, r0, #7
    4410:	428b      	cmp	r3, r1
    4412:	d301      	bcc.n	4418 <__aeabi_uidiv+0xa8>
    4414:	01cb      	lsls	r3, r1, #7
    4416:	1ac0      	subs	r0, r0, r3
    4418:	4152      	adcs	r2, r2
    441a:	0983      	lsrs	r3, r0, #6
    441c:	428b      	cmp	r3, r1
    441e:	d301      	bcc.n	4424 <__aeabi_uidiv+0xb4>
    4420:	018b      	lsls	r3, r1, #6
    4422:	1ac0      	subs	r0, r0, r3
    4424:	4152      	adcs	r2, r2
    4426:	0943      	lsrs	r3, r0, #5
    4428:	428b      	cmp	r3, r1
    442a:	d301      	bcc.n	4430 <__aeabi_uidiv+0xc0>
    442c:	014b      	lsls	r3, r1, #5
    442e:	1ac0      	subs	r0, r0, r3
    4430:	4152      	adcs	r2, r2
    4432:	0903      	lsrs	r3, r0, #4
    4434:	428b      	cmp	r3, r1
    4436:	d301      	bcc.n	443c <__aeabi_uidiv+0xcc>
    4438:	010b      	lsls	r3, r1, #4
    443a:	1ac0      	subs	r0, r0, r3
    443c:	4152      	adcs	r2, r2
    443e:	08c3      	lsrs	r3, r0, #3
    4440:	428b      	cmp	r3, r1
    4442:	d301      	bcc.n	4448 <__aeabi_uidiv+0xd8>
    4444:	00cb      	lsls	r3, r1, #3
    4446:	1ac0      	subs	r0, r0, r3
    4448:	4152      	adcs	r2, r2
    444a:	0883      	lsrs	r3, r0, #2
    444c:	428b      	cmp	r3, r1
    444e:	d301      	bcc.n	4454 <__aeabi_uidiv+0xe4>
    4450:	008b      	lsls	r3, r1, #2
    4452:	1ac0      	subs	r0, r0, r3
    4454:	4152      	adcs	r2, r2
    4456:	0843      	lsrs	r3, r0, #1
    4458:	428b      	cmp	r3, r1
    445a:	d301      	bcc.n	4460 <__aeabi_uidiv+0xf0>
    445c:	004b      	lsls	r3, r1, #1
    445e:	1ac0      	subs	r0, r0, r3
    4460:	4152      	adcs	r2, r2
    4462:	1a41      	subs	r1, r0, r1
    4464:	d200      	bcs.n	4468 <__aeabi_uidiv+0xf8>
    4466:	4601      	mov	r1, r0
    4468:	4152      	adcs	r2, r2
    446a:	4610      	mov	r0, r2
    446c:	4770      	bx	lr
    446e:	e7ff      	b.n	4470 <__aeabi_uidiv+0x100>
    4470:	b501      	push	{r0, lr}
    4472:	2000      	movs	r0, #0
    4474:	f000 f806 	bl	4484 <__aeabi_idiv0>
    4478:	bd02      	pop	{r1, pc}
    447a:	46c0      	nop			; (mov r8, r8)

0000447c <__aeabi_uidivmod>:
    447c:	2900      	cmp	r1, #0
    447e:	d0f7      	beq.n	4470 <__aeabi_uidiv+0x100>
    4480:	e776      	b.n	4370 <__aeabi_uidiv>
    4482:	4770      	bx	lr

00004484 <__aeabi_idiv0>:
    4484:	4770      	bx	lr
    4486:	46c0      	nop			; (mov r8, r8)

00004488 <__aeabi_lmul>:
    4488:	b5f0      	push	{r4, r5, r6, r7, lr}
    448a:	464f      	mov	r7, r9
    448c:	4646      	mov	r6, r8
    448e:	b4c0      	push	{r6, r7}
    4490:	0416      	lsls	r6, r2, #16
    4492:	0c36      	lsrs	r6, r6, #16
    4494:	4699      	mov	r9, r3
    4496:	0033      	movs	r3, r6
    4498:	0405      	lsls	r5, r0, #16
    449a:	0c2c      	lsrs	r4, r5, #16
    449c:	0c07      	lsrs	r7, r0, #16
    449e:	0c15      	lsrs	r5, r2, #16
    44a0:	4363      	muls	r3, r4
    44a2:	437e      	muls	r6, r7
    44a4:	436f      	muls	r7, r5
    44a6:	4365      	muls	r5, r4
    44a8:	0c1c      	lsrs	r4, r3, #16
    44aa:	19ad      	adds	r5, r5, r6
    44ac:	1964      	adds	r4, r4, r5
    44ae:	469c      	mov	ip, r3
    44b0:	42a6      	cmp	r6, r4
    44b2:	d903      	bls.n	44bc <__aeabi_lmul+0x34>
    44b4:	2380      	movs	r3, #128	; 0x80
    44b6:	025b      	lsls	r3, r3, #9
    44b8:	4698      	mov	r8, r3
    44ba:	4447      	add	r7, r8
    44bc:	4663      	mov	r3, ip
    44be:	0c25      	lsrs	r5, r4, #16
    44c0:	19ef      	adds	r7, r5, r7
    44c2:	041d      	lsls	r5, r3, #16
    44c4:	464b      	mov	r3, r9
    44c6:	434a      	muls	r2, r1
    44c8:	4343      	muls	r3, r0
    44ca:	0c2d      	lsrs	r5, r5, #16
    44cc:	0424      	lsls	r4, r4, #16
    44ce:	1964      	adds	r4, r4, r5
    44d0:	1899      	adds	r1, r3, r2
    44d2:	19c9      	adds	r1, r1, r7
    44d4:	0020      	movs	r0, r4
    44d6:	bc0c      	pop	{r2, r3}
    44d8:	4690      	mov	r8, r2
    44da:	4699      	mov	r9, r3
    44dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44de:	46c0      	nop			; (mov r8, r8)

000044e0 <__aeabi_dadd>:
    44e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44e2:	4656      	mov	r6, sl
    44e4:	465f      	mov	r7, fp
    44e6:	464d      	mov	r5, r9
    44e8:	4644      	mov	r4, r8
    44ea:	b4f0      	push	{r4, r5, r6, r7}
    44ec:	000f      	movs	r7, r1
    44ee:	0ffd      	lsrs	r5, r7, #31
    44f0:	46aa      	mov	sl, r5
    44f2:	0309      	lsls	r1, r1, #12
    44f4:	007c      	lsls	r4, r7, #1
    44f6:	002e      	movs	r6, r5
    44f8:	005f      	lsls	r7, r3, #1
    44fa:	0f45      	lsrs	r5, r0, #29
    44fc:	0a49      	lsrs	r1, r1, #9
    44fe:	0d7f      	lsrs	r7, r7, #21
    4500:	4329      	orrs	r1, r5
    4502:	00c5      	lsls	r5, r0, #3
    4504:	0318      	lsls	r0, r3, #12
    4506:	46bc      	mov	ip, r7
    4508:	0a40      	lsrs	r0, r0, #9
    450a:	0f57      	lsrs	r7, r2, #29
    450c:	0d64      	lsrs	r4, r4, #21
    450e:	0fdb      	lsrs	r3, r3, #31
    4510:	4338      	orrs	r0, r7
    4512:	00d2      	lsls	r2, r2, #3
    4514:	459a      	cmp	sl, r3
    4516:	d100      	bne.n	451a <__aeabi_dadd+0x3a>
    4518:	e0aa      	b.n	4670 <__aeabi_dadd+0x190>
    451a:	4666      	mov	r6, ip
    451c:	1ba6      	subs	r6, r4, r6
    451e:	2e00      	cmp	r6, #0
    4520:	dc00      	bgt.n	4524 <__aeabi_dadd+0x44>
    4522:	e0ff      	b.n	4724 <__aeabi_dadd+0x244>
    4524:	4663      	mov	r3, ip
    4526:	2b00      	cmp	r3, #0
    4528:	d139      	bne.n	459e <__aeabi_dadd+0xbe>
    452a:	0003      	movs	r3, r0
    452c:	4313      	orrs	r3, r2
    452e:	d000      	beq.n	4532 <__aeabi_dadd+0x52>
    4530:	e0d9      	b.n	46e6 <__aeabi_dadd+0x206>
    4532:	076b      	lsls	r3, r5, #29
    4534:	d009      	beq.n	454a <__aeabi_dadd+0x6a>
    4536:	230f      	movs	r3, #15
    4538:	402b      	ands	r3, r5
    453a:	2b04      	cmp	r3, #4
    453c:	d005      	beq.n	454a <__aeabi_dadd+0x6a>
    453e:	1d2b      	adds	r3, r5, #4
    4540:	42ab      	cmp	r3, r5
    4542:	41ad      	sbcs	r5, r5
    4544:	426d      	negs	r5, r5
    4546:	1949      	adds	r1, r1, r5
    4548:	001d      	movs	r5, r3
    454a:	020b      	lsls	r3, r1, #8
    454c:	d400      	bmi.n	4550 <__aeabi_dadd+0x70>
    454e:	e082      	b.n	4656 <__aeabi_dadd+0x176>
    4550:	4bca      	ldr	r3, [pc, #808]	; (487c <__aeabi_dadd+0x39c>)
    4552:	3401      	adds	r4, #1
    4554:	429c      	cmp	r4, r3
    4556:	d100      	bne.n	455a <__aeabi_dadd+0x7a>
    4558:	e0fe      	b.n	4758 <__aeabi_dadd+0x278>
    455a:	000a      	movs	r2, r1
    455c:	4656      	mov	r6, sl
    455e:	4bc8      	ldr	r3, [pc, #800]	; (4880 <__aeabi_dadd+0x3a0>)
    4560:	08ed      	lsrs	r5, r5, #3
    4562:	401a      	ands	r2, r3
    4564:	0750      	lsls	r0, r2, #29
    4566:	0564      	lsls	r4, r4, #21
    4568:	0252      	lsls	r2, r2, #9
    456a:	4305      	orrs	r5, r0
    456c:	0b12      	lsrs	r2, r2, #12
    456e:	0d64      	lsrs	r4, r4, #21
    4570:	2100      	movs	r1, #0
    4572:	0312      	lsls	r2, r2, #12
    4574:	0d0b      	lsrs	r3, r1, #20
    4576:	051b      	lsls	r3, r3, #20
    4578:	0564      	lsls	r4, r4, #21
    457a:	0b12      	lsrs	r2, r2, #12
    457c:	431a      	orrs	r2, r3
    457e:	0863      	lsrs	r3, r4, #1
    4580:	4cc0      	ldr	r4, [pc, #768]	; (4884 <__aeabi_dadd+0x3a4>)
    4582:	07f6      	lsls	r6, r6, #31
    4584:	4014      	ands	r4, r2
    4586:	431c      	orrs	r4, r3
    4588:	0064      	lsls	r4, r4, #1
    458a:	0864      	lsrs	r4, r4, #1
    458c:	4334      	orrs	r4, r6
    458e:	0028      	movs	r0, r5
    4590:	0021      	movs	r1, r4
    4592:	bc3c      	pop	{r2, r3, r4, r5}
    4594:	4690      	mov	r8, r2
    4596:	4699      	mov	r9, r3
    4598:	46a2      	mov	sl, r4
    459a:	46ab      	mov	fp, r5
    459c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    459e:	4bb7      	ldr	r3, [pc, #732]	; (487c <__aeabi_dadd+0x39c>)
    45a0:	429c      	cmp	r4, r3
    45a2:	d0c6      	beq.n	4532 <__aeabi_dadd+0x52>
    45a4:	2380      	movs	r3, #128	; 0x80
    45a6:	041b      	lsls	r3, r3, #16
    45a8:	4318      	orrs	r0, r3
    45aa:	2e38      	cmp	r6, #56	; 0x38
    45ac:	dd00      	ble.n	45b0 <__aeabi_dadd+0xd0>
    45ae:	e0eb      	b.n	4788 <__aeabi_dadd+0x2a8>
    45b0:	2e1f      	cmp	r6, #31
    45b2:	dd00      	ble.n	45b6 <__aeabi_dadd+0xd6>
    45b4:	e11e      	b.n	47f4 <__aeabi_dadd+0x314>
    45b6:	2320      	movs	r3, #32
    45b8:	1b9b      	subs	r3, r3, r6
    45ba:	469c      	mov	ip, r3
    45bc:	0003      	movs	r3, r0
    45be:	4667      	mov	r7, ip
    45c0:	40bb      	lsls	r3, r7
    45c2:	4698      	mov	r8, r3
    45c4:	0013      	movs	r3, r2
    45c6:	4647      	mov	r7, r8
    45c8:	40f3      	lsrs	r3, r6
    45ca:	433b      	orrs	r3, r7
    45cc:	4667      	mov	r7, ip
    45ce:	40ba      	lsls	r2, r7
    45d0:	1e57      	subs	r7, r2, #1
    45d2:	41ba      	sbcs	r2, r7
    45d4:	4313      	orrs	r3, r2
    45d6:	0002      	movs	r2, r0
    45d8:	40f2      	lsrs	r2, r6
    45da:	1aeb      	subs	r3, r5, r3
    45dc:	429d      	cmp	r5, r3
    45de:	41b6      	sbcs	r6, r6
    45e0:	001d      	movs	r5, r3
    45e2:	1a8a      	subs	r2, r1, r2
    45e4:	4276      	negs	r6, r6
    45e6:	1b91      	subs	r1, r2, r6
    45e8:	020b      	lsls	r3, r1, #8
    45ea:	d531      	bpl.n	4650 <__aeabi_dadd+0x170>
    45ec:	024a      	lsls	r2, r1, #9
    45ee:	0a56      	lsrs	r6, r2, #9
    45f0:	2e00      	cmp	r6, #0
    45f2:	d100      	bne.n	45f6 <__aeabi_dadd+0x116>
    45f4:	e0b4      	b.n	4760 <__aeabi_dadd+0x280>
    45f6:	0030      	movs	r0, r6
    45f8:	f001 fbf0 	bl	5ddc <__clzsi2>
    45fc:	0003      	movs	r3, r0
    45fe:	3b08      	subs	r3, #8
    4600:	2b1f      	cmp	r3, #31
    4602:	dd00      	ble.n	4606 <__aeabi_dadd+0x126>
    4604:	e0b5      	b.n	4772 <__aeabi_dadd+0x292>
    4606:	2220      	movs	r2, #32
    4608:	0029      	movs	r1, r5
    460a:	1ad2      	subs	r2, r2, r3
    460c:	40d1      	lsrs	r1, r2
    460e:	409e      	lsls	r6, r3
    4610:	000a      	movs	r2, r1
    4612:	409d      	lsls	r5, r3
    4614:	4332      	orrs	r2, r6
    4616:	429c      	cmp	r4, r3
    4618:	dd00      	ble.n	461c <__aeabi_dadd+0x13c>
    461a:	e0b1      	b.n	4780 <__aeabi_dadd+0x2a0>
    461c:	1b1c      	subs	r4, r3, r4
    461e:	1c63      	adds	r3, r4, #1
    4620:	2b1f      	cmp	r3, #31
    4622:	dd00      	ble.n	4626 <__aeabi_dadd+0x146>
    4624:	e0d5      	b.n	47d2 <__aeabi_dadd+0x2f2>
    4626:	2120      	movs	r1, #32
    4628:	0014      	movs	r4, r2
    462a:	0028      	movs	r0, r5
    462c:	1ac9      	subs	r1, r1, r3
    462e:	408c      	lsls	r4, r1
    4630:	40d8      	lsrs	r0, r3
    4632:	408d      	lsls	r5, r1
    4634:	4304      	orrs	r4, r0
    4636:	40da      	lsrs	r2, r3
    4638:	1e68      	subs	r0, r5, #1
    463a:	4185      	sbcs	r5, r0
    463c:	0011      	movs	r1, r2
    463e:	4325      	orrs	r5, r4
    4640:	2400      	movs	r4, #0
    4642:	e776      	b.n	4532 <__aeabi_dadd+0x52>
    4644:	4641      	mov	r1, r8
    4646:	4331      	orrs	r1, r6
    4648:	d100      	bne.n	464c <__aeabi_dadd+0x16c>
    464a:	e234      	b.n	4ab6 <__aeabi_dadd+0x5d6>
    464c:	0031      	movs	r1, r6
    464e:	4645      	mov	r5, r8
    4650:	076b      	lsls	r3, r5, #29
    4652:	d000      	beq.n	4656 <__aeabi_dadd+0x176>
    4654:	e76f      	b.n	4536 <__aeabi_dadd+0x56>
    4656:	4656      	mov	r6, sl
    4658:	0748      	lsls	r0, r1, #29
    465a:	08ed      	lsrs	r5, r5, #3
    465c:	08c9      	lsrs	r1, r1, #3
    465e:	4305      	orrs	r5, r0
    4660:	4b86      	ldr	r3, [pc, #536]	; (487c <__aeabi_dadd+0x39c>)
    4662:	429c      	cmp	r4, r3
    4664:	d035      	beq.n	46d2 <__aeabi_dadd+0x1f2>
    4666:	030a      	lsls	r2, r1, #12
    4668:	0564      	lsls	r4, r4, #21
    466a:	0b12      	lsrs	r2, r2, #12
    466c:	0d64      	lsrs	r4, r4, #21
    466e:	e77f      	b.n	4570 <__aeabi_dadd+0x90>
    4670:	4663      	mov	r3, ip
    4672:	1ae3      	subs	r3, r4, r3
    4674:	469b      	mov	fp, r3
    4676:	2b00      	cmp	r3, #0
    4678:	dc00      	bgt.n	467c <__aeabi_dadd+0x19c>
    467a:	e08b      	b.n	4794 <__aeabi_dadd+0x2b4>
    467c:	4667      	mov	r7, ip
    467e:	2f00      	cmp	r7, #0
    4680:	d03c      	beq.n	46fc <__aeabi_dadd+0x21c>
    4682:	4f7e      	ldr	r7, [pc, #504]	; (487c <__aeabi_dadd+0x39c>)
    4684:	42bc      	cmp	r4, r7
    4686:	d100      	bne.n	468a <__aeabi_dadd+0x1aa>
    4688:	e753      	b.n	4532 <__aeabi_dadd+0x52>
    468a:	2780      	movs	r7, #128	; 0x80
    468c:	043f      	lsls	r7, r7, #16
    468e:	4338      	orrs	r0, r7
    4690:	465b      	mov	r3, fp
    4692:	2b38      	cmp	r3, #56	; 0x38
    4694:	dc00      	bgt.n	4698 <__aeabi_dadd+0x1b8>
    4696:	e0f7      	b.n	4888 <__aeabi_dadd+0x3a8>
    4698:	4302      	orrs	r2, r0
    469a:	1e50      	subs	r0, r2, #1
    469c:	4182      	sbcs	r2, r0
    469e:	2000      	movs	r0, #0
    46a0:	b2d2      	uxtb	r2, r2
    46a2:	1953      	adds	r3, r2, r5
    46a4:	1842      	adds	r2, r0, r1
    46a6:	42ab      	cmp	r3, r5
    46a8:	4189      	sbcs	r1, r1
    46aa:	001d      	movs	r5, r3
    46ac:	4249      	negs	r1, r1
    46ae:	1889      	adds	r1, r1, r2
    46b0:	020b      	lsls	r3, r1, #8
    46b2:	d5cd      	bpl.n	4650 <__aeabi_dadd+0x170>
    46b4:	4b71      	ldr	r3, [pc, #452]	; (487c <__aeabi_dadd+0x39c>)
    46b6:	3401      	adds	r4, #1
    46b8:	429c      	cmp	r4, r3
    46ba:	d100      	bne.n	46be <__aeabi_dadd+0x1de>
    46bc:	e13d      	b.n	493a <__aeabi_dadd+0x45a>
    46be:	2001      	movs	r0, #1
    46c0:	4a6f      	ldr	r2, [pc, #444]	; (4880 <__aeabi_dadd+0x3a0>)
    46c2:	086b      	lsrs	r3, r5, #1
    46c4:	400a      	ands	r2, r1
    46c6:	4028      	ands	r0, r5
    46c8:	4318      	orrs	r0, r3
    46ca:	07d5      	lsls	r5, r2, #31
    46cc:	4305      	orrs	r5, r0
    46ce:	0851      	lsrs	r1, r2, #1
    46d0:	e72f      	b.n	4532 <__aeabi_dadd+0x52>
    46d2:	002b      	movs	r3, r5
    46d4:	430b      	orrs	r3, r1
    46d6:	d100      	bne.n	46da <__aeabi_dadd+0x1fa>
    46d8:	e1cb      	b.n	4a72 <__aeabi_dadd+0x592>
    46da:	2380      	movs	r3, #128	; 0x80
    46dc:	031b      	lsls	r3, r3, #12
    46de:	430b      	orrs	r3, r1
    46e0:	031a      	lsls	r2, r3, #12
    46e2:	0b12      	lsrs	r2, r2, #12
    46e4:	e744      	b.n	4570 <__aeabi_dadd+0x90>
    46e6:	3e01      	subs	r6, #1
    46e8:	2e00      	cmp	r6, #0
    46ea:	d16d      	bne.n	47c8 <__aeabi_dadd+0x2e8>
    46ec:	1aae      	subs	r6, r5, r2
    46ee:	42b5      	cmp	r5, r6
    46f0:	419b      	sbcs	r3, r3
    46f2:	1a09      	subs	r1, r1, r0
    46f4:	425b      	negs	r3, r3
    46f6:	1ac9      	subs	r1, r1, r3
    46f8:	0035      	movs	r5, r6
    46fa:	e775      	b.n	45e8 <__aeabi_dadd+0x108>
    46fc:	0007      	movs	r7, r0
    46fe:	4317      	orrs	r7, r2
    4700:	d100      	bne.n	4704 <__aeabi_dadd+0x224>
    4702:	e716      	b.n	4532 <__aeabi_dadd+0x52>
    4704:	2301      	movs	r3, #1
    4706:	425b      	negs	r3, r3
    4708:	469c      	mov	ip, r3
    470a:	44e3      	add	fp, ip
    470c:	465b      	mov	r3, fp
    470e:	2b00      	cmp	r3, #0
    4710:	d000      	beq.n	4714 <__aeabi_dadd+0x234>
    4712:	e0e0      	b.n	48d6 <__aeabi_dadd+0x3f6>
    4714:	18aa      	adds	r2, r5, r2
    4716:	42aa      	cmp	r2, r5
    4718:	419b      	sbcs	r3, r3
    471a:	1809      	adds	r1, r1, r0
    471c:	425b      	negs	r3, r3
    471e:	1859      	adds	r1, r3, r1
    4720:	0015      	movs	r5, r2
    4722:	e7c5      	b.n	46b0 <__aeabi_dadd+0x1d0>
    4724:	2e00      	cmp	r6, #0
    4726:	d175      	bne.n	4814 <__aeabi_dadd+0x334>
    4728:	1c66      	adds	r6, r4, #1
    472a:	0576      	lsls	r6, r6, #21
    472c:	0d76      	lsrs	r6, r6, #21
    472e:	2e01      	cmp	r6, #1
    4730:	dc00      	bgt.n	4734 <__aeabi_dadd+0x254>
    4732:	e0f3      	b.n	491c <__aeabi_dadd+0x43c>
    4734:	1aae      	subs	r6, r5, r2
    4736:	46b0      	mov	r8, r6
    4738:	4545      	cmp	r5, r8
    473a:	41bf      	sbcs	r7, r7
    473c:	1a0e      	subs	r6, r1, r0
    473e:	427f      	negs	r7, r7
    4740:	1bf6      	subs	r6, r6, r7
    4742:	0237      	lsls	r7, r6, #8
    4744:	d400      	bmi.n	4748 <__aeabi_dadd+0x268>
    4746:	e08f      	b.n	4868 <__aeabi_dadd+0x388>
    4748:	1b55      	subs	r5, r2, r5
    474a:	42aa      	cmp	r2, r5
    474c:	41b6      	sbcs	r6, r6
    474e:	1a41      	subs	r1, r0, r1
    4750:	4276      	negs	r6, r6
    4752:	1b8e      	subs	r6, r1, r6
    4754:	469a      	mov	sl, r3
    4756:	e74b      	b.n	45f0 <__aeabi_dadd+0x110>
    4758:	4656      	mov	r6, sl
    475a:	2200      	movs	r2, #0
    475c:	2500      	movs	r5, #0
    475e:	e707      	b.n	4570 <__aeabi_dadd+0x90>
    4760:	0028      	movs	r0, r5
    4762:	f001 fb3b 	bl	5ddc <__clzsi2>
    4766:	3020      	adds	r0, #32
    4768:	0003      	movs	r3, r0
    476a:	3b08      	subs	r3, #8
    476c:	2b1f      	cmp	r3, #31
    476e:	dc00      	bgt.n	4772 <__aeabi_dadd+0x292>
    4770:	e749      	b.n	4606 <__aeabi_dadd+0x126>
    4772:	002a      	movs	r2, r5
    4774:	3828      	subs	r0, #40	; 0x28
    4776:	4082      	lsls	r2, r0
    4778:	2500      	movs	r5, #0
    477a:	429c      	cmp	r4, r3
    477c:	dc00      	bgt.n	4780 <__aeabi_dadd+0x2a0>
    477e:	e74d      	b.n	461c <__aeabi_dadd+0x13c>
    4780:	493f      	ldr	r1, [pc, #252]	; (4880 <__aeabi_dadd+0x3a0>)
    4782:	1ae4      	subs	r4, r4, r3
    4784:	4011      	ands	r1, r2
    4786:	e6d4      	b.n	4532 <__aeabi_dadd+0x52>
    4788:	4302      	orrs	r2, r0
    478a:	1e50      	subs	r0, r2, #1
    478c:	4182      	sbcs	r2, r0
    478e:	b2d3      	uxtb	r3, r2
    4790:	2200      	movs	r2, #0
    4792:	e722      	b.n	45da <__aeabi_dadd+0xfa>
    4794:	2b00      	cmp	r3, #0
    4796:	d000      	beq.n	479a <__aeabi_dadd+0x2ba>
    4798:	e0f3      	b.n	4982 <__aeabi_dadd+0x4a2>
    479a:	1c63      	adds	r3, r4, #1
    479c:	469c      	mov	ip, r3
    479e:	055b      	lsls	r3, r3, #21
    47a0:	0d5b      	lsrs	r3, r3, #21
    47a2:	2b01      	cmp	r3, #1
    47a4:	dc00      	bgt.n	47a8 <__aeabi_dadd+0x2c8>
    47a6:	e09f      	b.n	48e8 <__aeabi_dadd+0x408>
    47a8:	4b34      	ldr	r3, [pc, #208]	; (487c <__aeabi_dadd+0x39c>)
    47aa:	459c      	cmp	ip, r3
    47ac:	d100      	bne.n	47b0 <__aeabi_dadd+0x2d0>
    47ae:	e0c3      	b.n	4938 <__aeabi_dadd+0x458>
    47b0:	18aa      	adds	r2, r5, r2
    47b2:	1809      	adds	r1, r1, r0
    47b4:	42aa      	cmp	r2, r5
    47b6:	4180      	sbcs	r0, r0
    47b8:	4240      	negs	r0, r0
    47ba:	1841      	adds	r1, r0, r1
    47bc:	07cd      	lsls	r5, r1, #31
    47be:	0852      	lsrs	r2, r2, #1
    47c0:	4315      	orrs	r5, r2
    47c2:	0849      	lsrs	r1, r1, #1
    47c4:	4664      	mov	r4, ip
    47c6:	e6b4      	b.n	4532 <__aeabi_dadd+0x52>
    47c8:	4b2c      	ldr	r3, [pc, #176]	; (487c <__aeabi_dadd+0x39c>)
    47ca:	429c      	cmp	r4, r3
    47cc:	d000      	beq.n	47d0 <__aeabi_dadd+0x2f0>
    47ce:	e6ec      	b.n	45aa <__aeabi_dadd+0xca>
    47d0:	e6af      	b.n	4532 <__aeabi_dadd+0x52>
    47d2:	0011      	movs	r1, r2
    47d4:	3c1f      	subs	r4, #31
    47d6:	40e1      	lsrs	r1, r4
    47d8:	000c      	movs	r4, r1
    47da:	2b20      	cmp	r3, #32
    47dc:	d100      	bne.n	47e0 <__aeabi_dadd+0x300>
    47de:	e07f      	b.n	48e0 <__aeabi_dadd+0x400>
    47e0:	2140      	movs	r1, #64	; 0x40
    47e2:	1acb      	subs	r3, r1, r3
    47e4:	409a      	lsls	r2, r3
    47e6:	4315      	orrs	r5, r2
    47e8:	1e6a      	subs	r2, r5, #1
    47ea:	4195      	sbcs	r5, r2
    47ec:	2100      	movs	r1, #0
    47ee:	4325      	orrs	r5, r4
    47f0:	2400      	movs	r4, #0
    47f2:	e72d      	b.n	4650 <__aeabi_dadd+0x170>
    47f4:	0033      	movs	r3, r6
    47f6:	0007      	movs	r7, r0
    47f8:	3b20      	subs	r3, #32
    47fa:	40df      	lsrs	r7, r3
    47fc:	003b      	movs	r3, r7
    47fe:	2e20      	cmp	r6, #32
    4800:	d070      	beq.n	48e4 <__aeabi_dadd+0x404>
    4802:	2740      	movs	r7, #64	; 0x40
    4804:	1bbe      	subs	r6, r7, r6
    4806:	40b0      	lsls	r0, r6
    4808:	4302      	orrs	r2, r0
    480a:	1e50      	subs	r0, r2, #1
    480c:	4182      	sbcs	r2, r0
    480e:	4313      	orrs	r3, r2
    4810:	2200      	movs	r2, #0
    4812:	e6e2      	b.n	45da <__aeabi_dadd+0xfa>
    4814:	2c00      	cmp	r4, #0
    4816:	d04f      	beq.n	48b8 <__aeabi_dadd+0x3d8>
    4818:	4c18      	ldr	r4, [pc, #96]	; (487c <__aeabi_dadd+0x39c>)
    481a:	45a4      	cmp	ip, r4
    481c:	d100      	bne.n	4820 <__aeabi_dadd+0x340>
    481e:	e0ab      	b.n	4978 <__aeabi_dadd+0x498>
    4820:	2480      	movs	r4, #128	; 0x80
    4822:	0424      	lsls	r4, r4, #16
    4824:	4276      	negs	r6, r6
    4826:	4321      	orrs	r1, r4
    4828:	2e38      	cmp	r6, #56	; 0x38
    482a:	dd00      	ble.n	482e <__aeabi_dadd+0x34e>
    482c:	e0df      	b.n	49ee <__aeabi_dadd+0x50e>
    482e:	2e1f      	cmp	r6, #31
    4830:	dd00      	ble.n	4834 <__aeabi_dadd+0x354>
    4832:	e143      	b.n	4abc <__aeabi_dadd+0x5dc>
    4834:	2720      	movs	r7, #32
    4836:	1bbc      	subs	r4, r7, r6
    4838:	46a1      	mov	r9, r4
    483a:	000c      	movs	r4, r1
    483c:	464f      	mov	r7, r9
    483e:	40bc      	lsls	r4, r7
    4840:	46a0      	mov	r8, r4
    4842:	002c      	movs	r4, r5
    4844:	4647      	mov	r7, r8
    4846:	40f4      	lsrs	r4, r6
    4848:	433c      	orrs	r4, r7
    484a:	464f      	mov	r7, r9
    484c:	40bd      	lsls	r5, r7
    484e:	1e6f      	subs	r7, r5, #1
    4850:	41bd      	sbcs	r5, r7
    4852:	40f1      	lsrs	r1, r6
    4854:	432c      	orrs	r4, r5
    4856:	1b15      	subs	r5, r2, r4
    4858:	42aa      	cmp	r2, r5
    485a:	4192      	sbcs	r2, r2
    485c:	1a41      	subs	r1, r0, r1
    485e:	4252      	negs	r2, r2
    4860:	1a89      	subs	r1, r1, r2
    4862:	4664      	mov	r4, ip
    4864:	469a      	mov	sl, r3
    4866:	e6bf      	b.n	45e8 <__aeabi_dadd+0x108>
    4868:	4641      	mov	r1, r8
    486a:	4645      	mov	r5, r8
    486c:	4331      	orrs	r1, r6
    486e:	d000      	beq.n	4872 <__aeabi_dadd+0x392>
    4870:	e6be      	b.n	45f0 <__aeabi_dadd+0x110>
    4872:	2600      	movs	r6, #0
    4874:	2400      	movs	r4, #0
    4876:	2500      	movs	r5, #0
    4878:	e6f2      	b.n	4660 <__aeabi_dadd+0x180>
    487a:	46c0      	nop			; (mov r8, r8)
    487c:	000007ff 	.word	0x000007ff
    4880:	ff7fffff 	.word	0xff7fffff
    4884:	800fffff 	.word	0x800fffff
    4888:	2b1f      	cmp	r3, #31
    488a:	dc59      	bgt.n	4940 <__aeabi_dadd+0x460>
    488c:	2720      	movs	r7, #32
    488e:	1aff      	subs	r7, r7, r3
    4890:	46bc      	mov	ip, r7
    4892:	0007      	movs	r7, r0
    4894:	4663      	mov	r3, ip
    4896:	409f      	lsls	r7, r3
    4898:	465b      	mov	r3, fp
    489a:	46b9      	mov	r9, r7
    489c:	0017      	movs	r7, r2
    489e:	40df      	lsrs	r7, r3
    48a0:	46b8      	mov	r8, r7
    48a2:	464f      	mov	r7, r9
    48a4:	4643      	mov	r3, r8
    48a6:	431f      	orrs	r7, r3
    48a8:	4663      	mov	r3, ip
    48aa:	409a      	lsls	r2, r3
    48ac:	1e53      	subs	r3, r2, #1
    48ae:	419a      	sbcs	r2, r3
    48b0:	465b      	mov	r3, fp
    48b2:	433a      	orrs	r2, r7
    48b4:	40d8      	lsrs	r0, r3
    48b6:	e6f4      	b.n	46a2 <__aeabi_dadd+0x1c2>
    48b8:	000c      	movs	r4, r1
    48ba:	432c      	orrs	r4, r5
    48bc:	d05c      	beq.n	4978 <__aeabi_dadd+0x498>
    48be:	43f6      	mvns	r6, r6
    48c0:	2e00      	cmp	r6, #0
    48c2:	d155      	bne.n	4970 <__aeabi_dadd+0x490>
    48c4:	1b55      	subs	r5, r2, r5
    48c6:	42aa      	cmp	r2, r5
    48c8:	41a4      	sbcs	r4, r4
    48ca:	1a41      	subs	r1, r0, r1
    48cc:	4264      	negs	r4, r4
    48ce:	1b09      	subs	r1, r1, r4
    48d0:	469a      	mov	sl, r3
    48d2:	4664      	mov	r4, ip
    48d4:	e688      	b.n	45e8 <__aeabi_dadd+0x108>
    48d6:	4f96      	ldr	r7, [pc, #600]	; (4b30 <__aeabi_dadd+0x650>)
    48d8:	42bc      	cmp	r4, r7
    48da:	d000      	beq.n	48de <__aeabi_dadd+0x3fe>
    48dc:	e6d8      	b.n	4690 <__aeabi_dadd+0x1b0>
    48de:	e628      	b.n	4532 <__aeabi_dadd+0x52>
    48e0:	2200      	movs	r2, #0
    48e2:	e780      	b.n	47e6 <__aeabi_dadd+0x306>
    48e4:	2000      	movs	r0, #0
    48e6:	e78f      	b.n	4808 <__aeabi_dadd+0x328>
    48e8:	000b      	movs	r3, r1
    48ea:	432b      	orrs	r3, r5
    48ec:	2c00      	cmp	r4, #0
    48ee:	d000      	beq.n	48f2 <__aeabi_dadd+0x412>
    48f0:	e0c2      	b.n	4a78 <__aeabi_dadd+0x598>
    48f2:	2b00      	cmp	r3, #0
    48f4:	d100      	bne.n	48f8 <__aeabi_dadd+0x418>
    48f6:	e101      	b.n	4afc <__aeabi_dadd+0x61c>
    48f8:	0003      	movs	r3, r0
    48fa:	4313      	orrs	r3, r2
    48fc:	d100      	bne.n	4900 <__aeabi_dadd+0x420>
    48fe:	e618      	b.n	4532 <__aeabi_dadd+0x52>
    4900:	18ab      	adds	r3, r5, r2
    4902:	42ab      	cmp	r3, r5
    4904:	41b6      	sbcs	r6, r6
    4906:	1809      	adds	r1, r1, r0
    4908:	4276      	negs	r6, r6
    490a:	1871      	adds	r1, r6, r1
    490c:	020a      	lsls	r2, r1, #8
    490e:	d400      	bmi.n	4912 <__aeabi_dadd+0x432>
    4910:	e109      	b.n	4b26 <__aeabi_dadd+0x646>
    4912:	4a88      	ldr	r2, [pc, #544]	; (4b34 <__aeabi_dadd+0x654>)
    4914:	001d      	movs	r5, r3
    4916:	4011      	ands	r1, r2
    4918:	4664      	mov	r4, ip
    491a:	e60a      	b.n	4532 <__aeabi_dadd+0x52>
    491c:	2c00      	cmp	r4, #0
    491e:	d15b      	bne.n	49d8 <__aeabi_dadd+0x4f8>
    4920:	000e      	movs	r6, r1
    4922:	432e      	orrs	r6, r5
    4924:	d000      	beq.n	4928 <__aeabi_dadd+0x448>
    4926:	e08a      	b.n	4a3e <__aeabi_dadd+0x55e>
    4928:	0001      	movs	r1, r0
    492a:	4311      	orrs	r1, r2
    492c:	d100      	bne.n	4930 <__aeabi_dadd+0x450>
    492e:	e0c2      	b.n	4ab6 <__aeabi_dadd+0x5d6>
    4930:	0001      	movs	r1, r0
    4932:	0015      	movs	r5, r2
    4934:	469a      	mov	sl, r3
    4936:	e5fc      	b.n	4532 <__aeabi_dadd+0x52>
    4938:	4664      	mov	r4, ip
    493a:	2100      	movs	r1, #0
    493c:	2500      	movs	r5, #0
    493e:	e68f      	b.n	4660 <__aeabi_dadd+0x180>
    4940:	2320      	movs	r3, #32
    4942:	425b      	negs	r3, r3
    4944:	469c      	mov	ip, r3
    4946:	44dc      	add	ip, fp
    4948:	4663      	mov	r3, ip
    494a:	0007      	movs	r7, r0
    494c:	40df      	lsrs	r7, r3
    494e:	465b      	mov	r3, fp
    4950:	46bc      	mov	ip, r7
    4952:	2b20      	cmp	r3, #32
    4954:	d100      	bne.n	4958 <__aeabi_dadd+0x478>
    4956:	e0ac      	b.n	4ab2 <__aeabi_dadd+0x5d2>
    4958:	2340      	movs	r3, #64	; 0x40
    495a:	465f      	mov	r7, fp
    495c:	1bdb      	subs	r3, r3, r7
    495e:	4098      	lsls	r0, r3
    4960:	4302      	orrs	r2, r0
    4962:	1e50      	subs	r0, r2, #1
    4964:	4182      	sbcs	r2, r0
    4966:	4663      	mov	r3, ip
    4968:	4313      	orrs	r3, r2
    496a:	001a      	movs	r2, r3
    496c:	2000      	movs	r0, #0
    496e:	e698      	b.n	46a2 <__aeabi_dadd+0x1c2>
    4970:	4c6f      	ldr	r4, [pc, #444]	; (4b30 <__aeabi_dadd+0x650>)
    4972:	45a4      	cmp	ip, r4
    4974:	d000      	beq.n	4978 <__aeabi_dadd+0x498>
    4976:	e757      	b.n	4828 <__aeabi_dadd+0x348>
    4978:	0001      	movs	r1, r0
    497a:	0015      	movs	r5, r2
    497c:	4664      	mov	r4, ip
    497e:	469a      	mov	sl, r3
    4980:	e5d7      	b.n	4532 <__aeabi_dadd+0x52>
    4982:	2c00      	cmp	r4, #0
    4984:	d139      	bne.n	49fa <__aeabi_dadd+0x51a>
    4986:	000c      	movs	r4, r1
    4988:	432c      	orrs	r4, r5
    498a:	d06e      	beq.n	4a6a <__aeabi_dadd+0x58a>
    498c:	43db      	mvns	r3, r3
    498e:	2b00      	cmp	r3, #0
    4990:	d01a      	beq.n	49c8 <__aeabi_dadd+0x4e8>
    4992:	4c67      	ldr	r4, [pc, #412]	; (4b30 <__aeabi_dadd+0x650>)
    4994:	45a4      	cmp	ip, r4
    4996:	d068      	beq.n	4a6a <__aeabi_dadd+0x58a>
    4998:	2b38      	cmp	r3, #56	; 0x38
    499a:	dd00      	ble.n	499e <__aeabi_dadd+0x4be>
    499c:	e0a4      	b.n	4ae8 <__aeabi_dadd+0x608>
    499e:	2b1f      	cmp	r3, #31
    49a0:	dd00      	ble.n	49a4 <__aeabi_dadd+0x4c4>
    49a2:	e0ae      	b.n	4b02 <__aeabi_dadd+0x622>
    49a4:	2420      	movs	r4, #32
    49a6:	000f      	movs	r7, r1
    49a8:	1ae4      	subs	r4, r4, r3
    49aa:	40a7      	lsls	r7, r4
    49ac:	46b9      	mov	r9, r7
    49ae:	002f      	movs	r7, r5
    49b0:	40df      	lsrs	r7, r3
    49b2:	46b8      	mov	r8, r7
    49b4:	46a3      	mov	fp, r4
    49b6:	464f      	mov	r7, r9
    49b8:	4644      	mov	r4, r8
    49ba:	4327      	orrs	r7, r4
    49bc:	465c      	mov	r4, fp
    49be:	40a5      	lsls	r5, r4
    49c0:	1e6c      	subs	r4, r5, #1
    49c2:	41a5      	sbcs	r5, r4
    49c4:	40d9      	lsrs	r1, r3
    49c6:	433d      	orrs	r5, r7
    49c8:	18ad      	adds	r5, r5, r2
    49ca:	4295      	cmp	r5, r2
    49cc:	419b      	sbcs	r3, r3
    49ce:	1809      	adds	r1, r1, r0
    49d0:	425b      	negs	r3, r3
    49d2:	1859      	adds	r1, r3, r1
    49d4:	4664      	mov	r4, ip
    49d6:	e66b      	b.n	46b0 <__aeabi_dadd+0x1d0>
    49d8:	000c      	movs	r4, r1
    49da:	432c      	orrs	r4, r5
    49dc:	d115      	bne.n	4a0a <__aeabi_dadd+0x52a>
    49de:	0001      	movs	r1, r0
    49e0:	4311      	orrs	r1, r2
    49e2:	d07b      	beq.n	4adc <__aeabi_dadd+0x5fc>
    49e4:	0001      	movs	r1, r0
    49e6:	0015      	movs	r5, r2
    49e8:	469a      	mov	sl, r3
    49ea:	4c51      	ldr	r4, [pc, #324]	; (4b30 <__aeabi_dadd+0x650>)
    49ec:	e5a1      	b.n	4532 <__aeabi_dadd+0x52>
    49ee:	430d      	orrs	r5, r1
    49f0:	1e69      	subs	r1, r5, #1
    49f2:	418d      	sbcs	r5, r1
    49f4:	2100      	movs	r1, #0
    49f6:	b2ec      	uxtb	r4, r5
    49f8:	e72d      	b.n	4856 <__aeabi_dadd+0x376>
    49fa:	4c4d      	ldr	r4, [pc, #308]	; (4b30 <__aeabi_dadd+0x650>)
    49fc:	45a4      	cmp	ip, r4
    49fe:	d034      	beq.n	4a6a <__aeabi_dadd+0x58a>
    4a00:	2480      	movs	r4, #128	; 0x80
    4a02:	0424      	lsls	r4, r4, #16
    4a04:	425b      	negs	r3, r3
    4a06:	4321      	orrs	r1, r4
    4a08:	e7c6      	b.n	4998 <__aeabi_dadd+0x4b8>
    4a0a:	0004      	movs	r4, r0
    4a0c:	4314      	orrs	r4, r2
    4a0e:	d04e      	beq.n	4aae <__aeabi_dadd+0x5ce>
    4a10:	08ed      	lsrs	r5, r5, #3
    4a12:	074c      	lsls	r4, r1, #29
    4a14:	432c      	orrs	r4, r5
    4a16:	2580      	movs	r5, #128	; 0x80
    4a18:	08c9      	lsrs	r1, r1, #3
    4a1a:	032d      	lsls	r5, r5, #12
    4a1c:	4229      	tst	r1, r5
    4a1e:	d008      	beq.n	4a32 <__aeabi_dadd+0x552>
    4a20:	08c6      	lsrs	r6, r0, #3
    4a22:	422e      	tst	r6, r5
    4a24:	d105      	bne.n	4a32 <__aeabi_dadd+0x552>
    4a26:	08d2      	lsrs	r2, r2, #3
    4a28:	0741      	lsls	r1, r0, #29
    4a2a:	4311      	orrs	r1, r2
    4a2c:	000c      	movs	r4, r1
    4a2e:	469a      	mov	sl, r3
    4a30:	0031      	movs	r1, r6
    4a32:	0f62      	lsrs	r2, r4, #29
    4a34:	00c9      	lsls	r1, r1, #3
    4a36:	00e5      	lsls	r5, r4, #3
    4a38:	4311      	orrs	r1, r2
    4a3a:	4c3d      	ldr	r4, [pc, #244]	; (4b30 <__aeabi_dadd+0x650>)
    4a3c:	e579      	b.n	4532 <__aeabi_dadd+0x52>
    4a3e:	0006      	movs	r6, r0
    4a40:	4316      	orrs	r6, r2
    4a42:	d100      	bne.n	4a46 <__aeabi_dadd+0x566>
    4a44:	e575      	b.n	4532 <__aeabi_dadd+0x52>
    4a46:	1aae      	subs	r6, r5, r2
    4a48:	46b0      	mov	r8, r6
    4a4a:	4545      	cmp	r5, r8
    4a4c:	41bf      	sbcs	r7, r7
    4a4e:	1a0e      	subs	r6, r1, r0
    4a50:	427f      	negs	r7, r7
    4a52:	1bf6      	subs	r6, r6, r7
    4a54:	0237      	lsls	r7, r6, #8
    4a56:	d400      	bmi.n	4a5a <__aeabi_dadd+0x57a>
    4a58:	e5f4      	b.n	4644 <__aeabi_dadd+0x164>
    4a5a:	1b55      	subs	r5, r2, r5
    4a5c:	42aa      	cmp	r2, r5
    4a5e:	41b6      	sbcs	r6, r6
    4a60:	1a41      	subs	r1, r0, r1
    4a62:	4276      	negs	r6, r6
    4a64:	1b89      	subs	r1, r1, r6
    4a66:	469a      	mov	sl, r3
    4a68:	e563      	b.n	4532 <__aeabi_dadd+0x52>
    4a6a:	0001      	movs	r1, r0
    4a6c:	0015      	movs	r5, r2
    4a6e:	4664      	mov	r4, ip
    4a70:	e55f      	b.n	4532 <__aeabi_dadd+0x52>
    4a72:	2200      	movs	r2, #0
    4a74:	2500      	movs	r5, #0
    4a76:	e57b      	b.n	4570 <__aeabi_dadd+0x90>
    4a78:	2b00      	cmp	r3, #0
    4a7a:	d03b      	beq.n	4af4 <__aeabi_dadd+0x614>
    4a7c:	0003      	movs	r3, r0
    4a7e:	4313      	orrs	r3, r2
    4a80:	d015      	beq.n	4aae <__aeabi_dadd+0x5ce>
    4a82:	08ed      	lsrs	r5, r5, #3
    4a84:	074b      	lsls	r3, r1, #29
    4a86:	432b      	orrs	r3, r5
    4a88:	2580      	movs	r5, #128	; 0x80
    4a8a:	08c9      	lsrs	r1, r1, #3
    4a8c:	032d      	lsls	r5, r5, #12
    4a8e:	4229      	tst	r1, r5
    4a90:	d007      	beq.n	4aa2 <__aeabi_dadd+0x5c2>
    4a92:	08c4      	lsrs	r4, r0, #3
    4a94:	422c      	tst	r4, r5
    4a96:	d104      	bne.n	4aa2 <__aeabi_dadd+0x5c2>
    4a98:	0741      	lsls	r1, r0, #29
    4a9a:	000b      	movs	r3, r1
    4a9c:	0021      	movs	r1, r4
    4a9e:	08d2      	lsrs	r2, r2, #3
    4aa0:	4313      	orrs	r3, r2
    4aa2:	00c9      	lsls	r1, r1, #3
    4aa4:	0f5a      	lsrs	r2, r3, #29
    4aa6:	4311      	orrs	r1, r2
    4aa8:	00dd      	lsls	r5, r3, #3
    4aaa:	4c21      	ldr	r4, [pc, #132]	; (4b30 <__aeabi_dadd+0x650>)
    4aac:	e541      	b.n	4532 <__aeabi_dadd+0x52>
    4aae:	4c20      	ldr	r4, [pc, #128]	; (4b30 <__aeabi_dadd+0x650>)
    4ab0:	e53f      	b.n	4532 <__aeabi_dadd+0x52>
    4ab2:	2000      	movs	r0, #0
    4ab4:	e754      	b.n	4960 <__aeabi_dadd+0x480>
    4ab6:	2600      	movs	r6, #0
    4ab8:	2500      	movs	r5, #0
    4aba:	e5d1      	b.n	4660 <__aeabi_dadd+0x180>
    4abc:	0034      	movs	r4, r6
    4abe:	000f      	movs	r7, r1
    4ac0:	3c20      	subs	r4, #32
    4ac2:	40e7      	lsrs	r7, r4
    4ac4:	003c      	movs	r4, r7
    4ac6:	2e20      	cmp	r6, #32
    4ac8:	d02b      	beq.n	4b22 <__aeabi_dadd+0x642>
    4aca:	2740      	movs	r7, #64	; 0x40
    4acc:	1bbe      	subs	r6, r7, r6
    4ace:	40b1      	lsls	r1, r6
    4ad0:	430d      	orrs	r5, r1
    4ad2:	1e69      	subs	r1, r5, #1
    4ad4:	418d      	sbcs	r5, r1
    4ad6:	2100      	movs	r1, #0
    4ad8:	432c      	orrs	r4, r5
    4ada:	e6bc      	b.n	4856 <__aeabi_dadd+0x376>
    4adc:	2180      	movs	r1, #128	; 0x80
    4ade:	2600      	movs	r6, #0
    4ae0:	0309      	lsls	r1, r1, #12
    4ae2:	4c13      	ldr	r4, [pc, #76]	; (4b30 <__aeabi_dadd+0x650>)
    4ae4:	2500      	movs	r5, #0
    4ae6:	e5bb      	b.n	4660 <__aeabi_dadd+0x180>
    4ae8:	430d      	orrs	r5, r1
    4aea:	1e69      	subs	r1, r5, #1
    4aec:	418d      	sbcs	r5, r1
    4aee:	2100      	movs	r1, #0
    4af0:	b2ed      	uxtb	r5, r5
    4af2:	e769      	b.n	49c8 <__aeabi_dadd+0x4e8>
    4af4:	0001      	movs	r1, r0
    4af6:	0015      	movs	r5, r2
    4af8:	4c0d      	ldr	r4, [pc, #52]	; (4b30 <__aeabi_dadd+0x650>)
    4afa:	e51a      	b.n	4532 <__aeabi_dadd+0x52>
    4afc:	0001      	movs	r1, r0
    4afe:	0015      	movs	r5, r2
    4b00:	e517      	b.n	4532 <__aeabi_dadd+0x52>
    4b02:	001c      	movs	r4, r3
    4b04:	000f      	movs	r7, r1
    4b06:	3c20      	subs	r4, #32
    4b08:	40e7      	lsrs	r7, r4
    4b0a:	003c      	movs	r4, r7
    4b0c:	2b20      	cmp	r3, #32
    4b0e:	d00c      	beq.n	4b2a <__aeabi_dadd+0x64a>
    4b10:	2740      	movs	r7, #64	; 0x40
    4b12:	1afb      	subs	r3, r7, r3
    4b14:	4099      	lsls	r1, r3
    4b16:	430d      	orrs	r5, r1
    4b18:	1e69      	subs	r1, r5, #1
    4b1a:	418d      	sbcs	r5, r1
    4b1c:	2100      	movs	r1, #0
    4b1e:	4325      	orrs	r5, r4
    4b20:	e752      	b.n	49c8 <__aeabi_dadd+0x4e8>
    4b22:	2100      	movs	r1, #0
    4b24:	e7d4      	b.n	4ad0 <__aeabi_dadd+0x5f0>
    4b26:	001d      	movs	r5, r3
    4b28:	e592      	b.n	4650 <__aeabi_dadd+0x170>
    4b2a:	2100      	movs	r1, #0
    4b2c:	e7f3      	b.n	4b16 <__aeabi_dadd+0x636>
    4b2e:	46c0      	nop			; (mov r8, r8)
    4b30:	000007ff 	.word	0x000007ff
    4b34:	ff7fffff 	.word	0xff7fffff

00004b38 <__aeabi_ddiv>:
    4b38:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b3a:	4656      	mov	r6, sl
    4b3c:	464d      	mov	r5, r9
    4b3e:	4644      	mov	r4, r8
    4b40:	465f      	mov	r7, fp
    4b42:	b4f0      	push	{r4, r5, r6, r7}
    4b44:	001d      	movs	r5, r3
    4b46:	030e      	lsls	r6, r1, #12
    4b48:	004c      	lsls	r4, r1, #1
    4b4a:	0fcb      	lsrs	r3, r1, #31
    4b4c:	b087      	sub	sp, #28
    4b4e:	0007      	movs	r7, r0
    4b50:	4692      	mov	sl, r2
    4b52:	4681      	mov	r9, r0
    4b54:	0b36      	lsrs	r6, r6, #12
    4b56:	0d64      	lsrs	r4, r4, #21
    4b58:	4698      	mov	r8, r3
    4b5a:	d06a      	beq.n	4c32 <__aeabi_ddiv+0xfa>
    4b5c:	4b6d      	ldr	r3, [pc, #436]	; (4d14 <__aeabi_ddiv+0x1dc>)
    4b5e:	429c      	cmp	r4, r3
    4b60:	d035      	beq.n	4bce <__aeabi_ddiv+0x96>
    4b62:	2280      	movs	r2, #128	; 0x80
    4b64:	0f43      	lsrs	r3, r0, #29
    4b66:	0412      	lsls	r2, r2, #16
    4b68:	4313      	orrs	r3, r2
    4b6a:	00f6      	lsls	r6, r6, #3
    4b6c:	431e      	orrs	r6, r3
    4b6e:	00c3      	lsls	r3, r0, #3
    4b70:	4699      	mov	r9, r3
    4b72:	4b69      	ldr	r3, [pc, #420]	; (4d18 <__aeabi_ddiv+0x1e0>)
    4b74:	2700      	movs	r7, #0
    4b76:	469c      	mov	ip, r3
    4b78:	2300      	movs	r3, #0
    4b7a:	4464      	add	r4, ip
    4b7c:	9302      	str	r3, [sp, #8]
    4b7e:	032b      	lsls	r3, r5, #12
    4b80:	0068      	lsls	r0, r5, #1
    4b82:	0b1b      	lsrs	r3, r3, #12
    4b84:	0fed      	lsrs	r5, r5, #31
    4b86:	4651      	mov	r1, sl
    4b88:	469b      	mov	fp, r3
    4b8a:	0d40      	lsrs	r0, r0, #21
    4b8c:	9500      	str	r5, [sp, #0]
    4b8e:	d100      	bne.n	4b92 <__aeabi_ddiv+0x5a>
    4b90:	e078      	b.n	4c84 <__aeabi_ddiv+0x14c>
    4b92:	4b60      	ldr	r3, [pc, #384]	; (4d14 <__aeabi_ddiv+0x1dc>)
    4b94:	4298      	cmp	r0, r3
    4b96:	d06c      	beq.n	4c72 <__aeabi_ddiv+0x13a>
    4b98:	465b      	mov	r3, fp
    4b9a:	00da      	lsls	r2, r3, #3
    4b9c:	0f4b      	lsrs	r3, r1, #29
    4b9e:	2180      	movs	r1, #128	; 0x80
    4ba0:	0409      	lsls	r1, r1, #16
    4ba2:	430b      	orrs	r3, r1
    4ba4:	4313      	orrs	r3, r2
    4ba6:	469b      	mov	fp, r3
    4ba8:	4653      	mov	r3, sl
    4baa:	00d9      	lsls	r1, r3, #3
    4bac:	4b5a      	ldr	r3, [pc, #360]	; (4d18 <__aeabi_ddiv+0x1e0>)
    4bae:	469c      	mov	ip, r3
    4bb0:	2300      	movs	r3, #0
    4bb2:	4460      	add	r0, ip
    4bb4:	4642      	mov	r2, r8
    4bb6:	1a20      	subs	r0, r4, r0
    4bb8:	406a      	eors	r2, r5
    4bba:	4692      	mov	sl, r2
    4bbc:	9001      	str	r0, [sp, #4]
    4bbe:	431f      	orrs	r7, r3
    4bc0:	2f0f      	cmp	r7, #15
    4bc2:	d900      	bls.n	4bc6 <__aeabi_ddiv+0x8e>
    4bc4:	e0b0      	b.n	4d28 <__aeabi_ddiv+0x1f0>
    4bc6:	4855      	ldr	r0, [pc, #340]	; (4d1c <__aeabi_ddiv+0x1e4>)
    4bc8:	00bf      	lsls	r7, r7, #2
    4bca:	59c0      	ldr	r0, [r0, r7]
    4bcc:	4687      	mov	pc, r0
    4bce:	4337      	orrs	r7, r6
    4bd0:	d000      	beq.n	4bd4 <__aeabi_ddiv+0x9c>
    4bd2:	e088      	b.n	4ce6 <__aeabi_ddiv+0x1ae>
    4bd4:	2300      	movs	r3, #0
    4bd6:	4699      	mov	r9, r3
    4bd8:	3302      	adds	r3, #2
    4bda:	2708      	movs	r7, #8
    4bdc:	2600      	movs	r6, #0
    4bde:	9302      	str	r3, [sp, #8]
    4be0:	e7cd      	b.n	4b7e <__aeabi_ddiv+0x46>
    4be2:	4643      	mov	r3, r8
    4be4:	46b3      	mov	fp, r6
    4be6:	4649      	mov	r1, r9
    4be8:	9300      	str	r3, [sp, #0]
    4bea:	9b02      	ldr	r3, [sp, #8]
    4bec:	9a00      	ldr	r2, [sp, #0]
    4bee:	4692      	mov	sl, r2
    4bf0:	2b02      	cmp	r3, #2
    4bf2:	d000      	beq.n	4bf6 <__aeabi_ddiv+0xbe>
    4bf4:	e1bf      	b.n	4f76 <__aeabi_ddiv+0x43e>
    4bf6:	2100      	movs	r1, #0
    4bf8:	4653      	mov	r3, sl
    4bfa:	2201      	movs	r2, #1
    4bfc:	2600      	movs	r6, #0
    4bfe:	4689      	mov	r9, r1
    4c00:	401a      	ands	r2, r3
    4c02:	4b44      	ldr	r3, [pc, #272]	; (4d14 <__aeabi_ddiv+0x1dc>)
    4c04:	2100      	movs	r1, #0
    4c06:	0336      	lsls	r6, r6, #12
    4c08:	0d0c      	lsrs	r4, r1, #20
    4c0a:	0524      	lsls	r4, r4, #20
    4c0c:	0b36      	lsrs	r6, r6, #12
    4c0e:	4326      	orrs	r6, r4
    4c10:	4c43      	ldr	r4, [pc, #268]	; (4d20 <__aeabi_ddiv+0x1e8>)
    4c12:	051b      	lsls	r3, r3, #20
    4c14:	4026      	ands	r6, r4
    4c16:	431e      	orrs	r6, r3
    4c18:	0076      	lsls	r6, r6, #1
    4c1a:	07d2      	lsls	r2, r2, #31
    4c1c:	0876      	lsrs	r6, r6, #1
    4c1e:	4316      	orrs	r6, r2
    4c20:	4648      	mov	r0, r9
    4c22:	0031      	movs	r1, r6
    4c24:	b007      	add	sp, #28
    4c26:	bc3c      	pop	{r2, r3, r4, r5}
    4c28:	4690      	mov	r8, r2
    4c2a:	4699      	mov	r9, r3
    4c2c:	46a2      	mov	sl, r4
    4c2e:	46ab      	mov	fp, r5
    4c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c32:	0033      	movs	r3, r6
    4c34:	4303      	orrs	r3, r0
    4c36:	d04f      	beq.n	4cd8 <__aeabi_ddiv+0x1a0>
    4c38:	2e00      	cmp	r6, #0
    4c3a:	d100      	bne.n	4c3e <__aeabi_ddiv+0x106>
    4c3c:	e1bc      	b.n	4fb8 <__aeabi_ddiv+0x480>
    4c3e:	0030      	movs	r0, r6
    4c40:	f001 f8cc 	bl	5ddc <__clzsi2>
    4c44:	0003      	movs	r3, r0
    4c46:	3b0b      	subs	r3, #11
    4c48:	2b1c      	cmp	r3, #28
    4c4a:	dd00      	ble.n	4c4e <__aeabi_ddiv+0x116>
    4c4c:	e1ad      	b.n	4faa <__aeabi_ddiv+0x472>
    4c4e:	221d      	movs	r2, #29
    4c50:	0001      	movs	r1, r0
    4c52:	1ad3      	subs	r3, r2, r3
    4c54:	3908      	subs	r1, #8
    4c56:	003a      	movs	r2, r7
    4c58:	408f      	lsls	r7, r1
    4c5a:	408e      	lsls	r6, r1
    4c5c:	40da      	lsrs	r2, r3
    4c5e:	46b9      	mov	r9, r7
    4c60:	4316      	orrs	r6, r2
    4c62:	4b30      	ldr	r3, [pc, #192]	; (4d24 <__aeabi_ddiv+0x1ec>)
    4c64:	2700      	movs	r7, #0
    4c66:	469c      	mov	ip, r3
    4c68:	2300      	movs	r3, #0
    4c6a:	4460      	add	r0, ip
    4c6c:	4244      	negs	r4, r0
    4c6e:	9302      	str	r3, [sp, #8]
    4c70:	e785      	b.n	4b7e <__aeabi_ddiv+0x46>
    4c72:	4653      	mov	r3, sl
    4c74:	465a      	mov	r2, fp
    4c76:	4313      	orrs	r3, r2
    4c78:	d12c      	bne.n	4cd4 <__aeabi_ddiv+0x19c>
    4c7a:	2300      	movs	r3, #0
    4c7c:	2100      	movs	r1, #0
    4c7e:	469b      	mov	fp, r3
    4c80:	3302      	adds	r3, #2
    4c82:	e797      	b.n	4bb4 <__aeabi_ddiv+0x7c>
    4c84:	430b      	orrs	r3, r1
    4c86:	d020      	beq.n	4cca <__aeabi_ddiv+0x192>
    4c88:	465b      	mov	r3, fp
    4c8a:	2b00      	cmp	r3, #0
    4c8c:	d100      	bne.n	4c90 <__aeabi_ddiv+0x158>
    4c8e:	e19e      	b.n	4fce <__aeabi_ddiv+0x496>
    4c90:	4658      	mov	r0, fp
    4c92:	f001 f8a3 	bl	5ddc <__clzsi2>
    4c96:	0003      	movs	r3, r0
    4c98:	3b0b      	subs	r3, #11
    4c9a:	2b1c      	cmp	r3, #28
    4c9c:	dd00      	ble.n	4ca0 <__aeabi_ddiv+0x168>
    4c9e:	e18f      	b.n	4fc0 <__aeabi_ddiv+0x488>
    4ca0:	0002      	movs	r2, r0
    4ca2:	4659      	mov	r1, fp
    4ca4:	3a08      	subs	r2, #8
    4ca6:	4091      	lsls	r1, r2
    4ca8:	468b      	mov	fp, r1
    4caa:	211d      	movs	r1, #29
    4cac:	1acb      	subs	r3, r1, r3
    4cae:	4651      	mov	r1, sl
    4cb0:	40d9      	lsrs	r1, r3
    4cb2:	000b      	movs	r3, r1
    4cb4:	4659      	mov	r1, fp
    4cb6:	430b      	orrs	r3, r1
    4cb8:	4651      	mov	r1, sl
    4cba:	469b      	mov	fp, r3
    4cbc:	4091      	lsls	r1, r2
    4cbe:	4b19      	ldr	r3, [pc, #100]	; (4d24 <__aeabi_ddiv+0x1ec>)
    4cc0:	469c      	mov	ip, r3
    4cc2:	4460      	add	r0, ip
    4cc4:	4240      	negs	r0, r0
    4cc6:	2300      	movs	r3, #0
    4cc8:	e774      	b.n	4bb4 <__aeabi_ddiv+0x7c>
    4cca:	2300      	movs	r3, #0
    4ccc:	2100      	movs	r1, #0
    4cce:	469b      	mov	fp, r3
    4cd0:	3301      	adds	r3, #1
    4cd2:	e76f      	b.n	4bb4 <__aeabi_ddiv+0x7c>
    4cd4:	2303      	movs	r3, #3
    4cd6:	e76d      	b.n	4bb4 <__aeabi_ddiv+0x7c>
    4cd8:	2300      	movs	r3, #0
    4cda:	4699      	mov	r9, r3
    4cdc:	3301      	adds	r3, #1
    4cde:	2704      	movs	r7, #4
    4ce0:	2600      	movs	r6, #0
    4ce2:	9302      	str	r3, [sp, #8]
    4ce4:	e74b      	b.n	4b7e <__aeabi_ddiv+0x46>
    4ce6:	2303      	movs	r3, #3
    4ce8:	270c      	movs	r7, #12
    4cea:	9302      	str	r3, [sp, #8]
    4cec:	e747      	b.n	4b7e <__aeabi_ddiv+0x46>
    4cee:	2201      	movs	r2, #1
    4cf0:	1ad5      	subs	r5, r2, r3
    4cf2:	2d38      	cmp	r5, #56	; 0x38
    4cf4:	dc00      	bgt.n	4cf8 <__aeabi_ddiv+0x1c0>
    4cf6:	e1b0      	b.n	505a <__aeabi_ddiv+0x522>
    4cf8:	4653      	mov	r3, sl
    4cfa:	401a      	ands	r2, r3
    4cfc:	2100      	movs	r1, #0
    4cfe:	2300      	movs	r3, #0
    4d00:	2600      	movs	r6, #0
    4d02:	4689      	mov	r9, r1
    4d04:	e77e      	b.n	4c04 <__aeabi_ddiv+0xcc>
    4d06:	2300      	movs	r3, #0
    4d08:	2680      	movs	r6, #128	; 0x80
    4d0a:	4699      	mov	r9, r3
    4d0c:	2200      	movs	r2, #0
    4d0e:	0336      	lsls	r6, r6, #12
    4d10:	4b00      	ldr	r3, [pc, #0]	; (4d14 <__aeabi_ddiv+0x1dc>)
    4d12:	e777      	b.n	4c04 <__aeabi_ddiv+0xcc>
    4d14:	000007ff 	.word	0x000007ff
    4d18:	fffffc01 	.word	0xfffffc01
    4d1c:	00006800 	.word	0x00006800
    4d20:	800fffff 	.word	0x800fffff
    4d24:	000003f3 	.word	0x000003f3
    4d28:	455e      	cmp	r6, fp
    4d2a:	d900      	bls.n	4d2e <__aeabi_ddiv+0x1f6>
    4d2c:	e172      	b.n	5014 <__aeabi_ddiv+0x4dc>
    4d2e:	d100      	bne.n	4d32 <__aeabi_ddiv+0x1fa>
    4d30:	e16d      	b.n	500e <__aeabi_ddiv+0x4d6>
    4d32:	9b01      	ldr	r3, [sp, #4]
    4d34:	464d      	mov	r5, r9
    4d36:	3b01      	subs	r3, #1
    4d38:	9301      	str	r3, [sp, #4]
    4d3a:	2300      	movs	r3, #0
    4d3c:	0034      	movs	r4, r6
    4d3e:	9302      	str	r3, [sp, #8]
    4d40:	465b      	mov	r3, fp
    4d42:	021e      	lsls	r6, r3, #8
    4d44:	0e0b      	lsrs	r3, r1, #24
    4d46:	431e      	orrs	r6, r3
    4d48:	020b      	lsls	r3, r1, #8
    4d4a:	9303      	str	r3, [sp, #12]
    4d4c:	0c33      	lsrs	r3, r6, #16
    4d4e:	4699      	mov	r9, r3
    4d50:	0433      	lsls	r3, r6, #16
    4d52:	0c1b      	lsrs	r3, r3, #16
    4d54:	4649      	mov	r1, r9
    4d56:	0020      	movs	r0, r4
    4d58:	9300      	str	r3, [sp, #0]
    4d5a:	f7ff fb09 	bl	4370 <__aeabi_uidiv>
    4d5e:	9b00      	ldr	r3, [sp, #0]
    4d60:	0037      	movs	r7, r6
    4d62:	4343      	muls	r3, r0
    4d64:	0006      	movs	r6, r0
    4d66:	4649      	mov	r1, r9
    4d68:	0020      	movs	r0, r4
    4d6a:	4698      	mov	r8, r3
    4d6c:	f7ff fb86 	bl	447c <__aeabi_uidivmod>
    4d70:	0c2c      	lsrs	r4, r5, #16
    4d72:	0409      	lsls	r1, r1, #16
    4d74:	430c      	orrs	r4, r1
    4d76:	45a0      	cmp	r8, r4
    4d78:	d909      	bls.n	4d8e <__aeabi_ddiv+0x256>
    4d7a:	19e4      	adds	r4, r4, r7
    4d7c:	1e73      	subs	r3, r6, #1
    4d7e:	42a7      	cmp	r7, r4
    4d80:	d900      	bls.n	4d84 <__aeabi_ddiv+0x24c>
    4d82:	e15c      	b.n	503e <__aeabi_ddiv+0x506>
    4d84:	45a0      	cmp	r8, r4
    4d86:	d800      	bhi.n	4d8a <__aeabi_ddiv+0x252>
    4d88:	e159      	b.n	503e <__aeabi_ddiv+0x506>
    4d8a:	3e02      	subs	r6, #2
    4d8c:	19e4      	adds	r4, r4, r7
    4d8e:	4643      	mov	r3, r8
    4d90:	1ae4      	subs	r4, r4, r3
    4d92:	4649      	mov	r1, r9
    4d94:	0020      	movs	r0, r4
    4d96:	f7ff faeb 	bl	4370 <__aeabi_uidiv>
    4d9a:	0003      	movs	r3, r0
    4d9c:	9a00      	ldr	r2, [sp, #0]
    4d9e:	4680      	mov	r8, r0
    4da0:	4353      	muls	r3, r2
    4da2:	4649      	mov	r1, r9
    4da4:	0020      	movs	r0, r4
    4da6:	469b      	mov	fp, r3
    4da8:	f7ff fb68 	bl	447c <__aeabi_uidivmod>
    4dac:	042a      	lsls	r2, r5, #16
    4dae:	0409      	lsls	r1, r1, #16
    4db0:	0c12      	lsrs	r2, r2, #16
    4db2:	430a      	orrs	r2, r1
    4db4:	4593      	cmp	fp, r2
    4db6:	d90d      	bls.n	4dd4 <__aeabi_ddiv+0x29c>
    4db8:	4643      	mov	r3, r8
    4dba:	19d2      	adds	r2, r2, r7
    4dbc:	3b01      	subs	r3, #1
    4dbe:	4297      	cmp	r7, r2
    4dc0:	d900      	bls.n	4dc4 <__aeabi_ddiv+0x28c>
    4dc2:	e13a      	b.n	503a <__aeabi_ddiv+0x502>
    4dc4:	4593      	cmp	fp, r2
    4dc6:	d800      	bhi.n	4dca <__aeabi_ddiv+0x292>
    4dc8:	e137      	b.n	503a <__aeabi_ddiv+0x502>
    4dca:	2302      	movs	r3, #2
    4dcc:	425b      	negs	r3, r3
    4dce:	469c      	mov	ip, r3
    4dd0:	19d2      	adds	r2, r2, r7
    4dd2:	44e0      	add	r8, ip
    4dd4:	465b      	mov	r3, fp
    4dd6:	1ad2      	subs	r2, r2, r3
    4dd8:	4643      	mov	r3, r8
    4dda:	0436      	lsls	r6, r6, #16
    4ddc:	4333      	orrs	r3, r6
    4dde:	469b      	mov	fp, r3
    4de0:	9903      	ldr	r1, [sp, #12]
    4de2:	0c18      	lsrs	r0, r3, #16
    4de4:	0c0b      	lsrs	r3, r1, #16
    4de6:	001d      	movs	r5, r3
    4de8:	9305      	str	r3, [sp, #20]
    4dea:	0409      	lsls	r1, r1, #16
    4dec:	465b      	mov	r3, fp
    4dee:	0c09      	lsrs	r1, r1, #16
    4df0:	000c      	movs	r4, r1
    4df2:	041b      	lsls	r3, r3, #16
    4df4:	0c1b      	lsrs	r3, r3, #16
    4df6:	4344      	muls	r4, r0
    4df8:	9104      	str	r1, [sp, #16]
    4dfa:	4359      	muls	r1, r3
    4dfc:	436b      	muls	r3, r5
    4dfe:	4368      	muls	r0, r5
    4e00:	191b      	adds	r3, r3, r4
    4e02:	0c0d      	lsrs	r5, r1, #16
    4e04:	18eb      	adds	r3, r5, r3
    4e06:	429c      	cmp	r4, r3
    4e08:	d903      	bls.n	4e12 <__aeabi_ddiv+0x2da>
    4e0a:	2480      	movs	r4, #128	; 0x80
    4e0c:	0264      	lsls	r4, r4, #9
    4e0e:	46a4      	mov	ip, r4
    4e10:	4460      	add	r0, ip
    4e12:	0c1c      	lsrs	r4, r3, #16
    4e14:	0409      	lsls	r1, r1, #16
    4e16:	041b      	lsls	r3, r3, #16
    4e18:	0c09      	lsrs	r1, r1, #16
    4e1a:	1820      	adds	r0, r4, r0
    4e1c:	185d      	adds	r5, r3, r1
    4e1e:	4282      	cmp	r2, r0
    4e20:	d200      	bcs.n	4e24 <__aeabi_ddiv+0x2ec>
    4e22:	e0de      	b.n	4fe2 <__aeabi_ddiv+0x4aa>
    4e24:	d100      	bne.n	4e28 <__aeabi_ddiv+0x2f0>
    4e26:	e0d7      	b.n	4fd8 <__aeabi_ddiv+0x4a0>
    4e28:	1a16      	subs	r6, r2, r0
    4e2a:	9b02      	ldr	r3, [sp, #8]
    4e2c:	469c      	mov	ip, r3
    4e2e:	1b5d      	subs	r5, r3, r5
    4e30:	45ac      	cmp	ip, r5
    4e32:	419b      	sbcs	r3, r3
    4e34:	425b      	negs	r3, r3
    4e36:	1af6      	subs	r6, r6, r3
    4e38:	42b7      	cmp	r7, r6
    4e3a:	d100      	bne.n	4e3e <__aeabi_ddiv+0x306>
    4e3c:	e106      	b.n	504c <__aeabi_ddiv+0x514>
    4e3e:	4649      	mov	r1, r9
    4e40:	0030      	movs	r0, r6
    4e42:	f7ff fa95 	bl	4370 <__aeabi_uidiv>
    4e46:	9b00      	ldr	r3, [sp, #0]
    4e48:	0004      	movs	r4, r0
    4e4a:	4343      	muls	r3, r0
    4e4c:	4649      	mov	r1, r9
    4e4e:	0030      	movs	r0, r6
    4e50:	4698      	mov	r8, r3
    4e52:	f7ff fb13 	bl	447c <__aeabi_uidivmod>
    4e56:	0c2e      	lsrs	r6, r5, #16
    4e58:	0409      	lsls	r1, r1, #16
    4e5a:	430e      	orrs	r6, r1
    4e5c:	45b0      	cmp	r8, r6
    4e5e:	d909      	bls.n	4e74 <__aeabi_ddiv+0x33c>
    4e60:	19f6      	adds	r6, r6, r7
    4e62:	1e63      	subs	r3, r4, #1
    4e64:	42b7      	cmp	r7, r6
    4e66:	d900      	bls.n	4e6a <__aeabi_ddiv+0x332>
    4e68:	e0f3      	b.n	5052 <__aeabi_ddiv+0x51a>
    4e6a:	45b0      	cmp	r8, r6
    4e6c:	d800      	bhi.n	4e70 <__aeabi_ddiv+0x338>
    4e6e:	e0f0      	b.n	5052 <__aeabi_ddiv+0x51a>
    4e70:	3c02      	subs	r4, #2
    4e72:	19f6      	adds	r6, r6, r7
    4e74:	4643      	mov	r3, r8
    4e76:	1af3      	subs	r3, r6, r3
    4e78:	4649      	mov	r1, r9
    4e7a:	0018      	movs	r0, r3
    4e7c:	9302      	str	r3, [sp, #8]
    4e7e:	f7ff fa77 	bl	4370 <__aeabi_uidiv>
    4e82:	9b00      	ldr	r3, [sp, #0]
    4e84:	0006      	movs	r6, r0
    4e86:	4343      	muls	r3, r0
    4e88:	4649      	mov	r1, r9
    4e8a:	9802      	ldr	r0, [sp, #8]
    4e8c:	4698      	mov	r8, r3
    4e8e:	f7ff faf5 	bl	447c <__aeabi_uidivmod>
    4e92:	042d      	lsls	r5, r5, #16
    4e94:	0409      	lsls	r1, r1, #16
    4e96:	0c2d      	lsrs	r5, r5, #16
    4e98:	430d      	orrs	r5, r1
    4e9a:	45a8      	cmp	r8, r5
    4e9c:	d909      	bls.n	4eb2 <__aeabi_ddiv+0x37a>
    4e9e:	19ed      	adds	r5, r5, r7
    4ea0:	1e73      	subs	r3, r6, #1
    4ea2:	42af      	cmp	r7, r5
    4ea4:	d900      	bls.n	4ea8 <__aeabi_ddiv+0x370>
    4ea6:	e0d6      	b.n	5056 <__aeabi_ddiv+0x51e>
    4ea8:	45a8      	cmp	r8, r5
    4eaa:	d800      	bhi.n	4eae <__aeabi_ddiv+0x376>
    4eac:	e0d3      	b.n	5056 <__aeabi_ddiv+0x51e>
    4eae:	3e02      	subs	r6, #2
    4eb0:	19ed      	adds	r5, r5, r7
    4eb2:	0424      	lsls	r4, r4, #16
    4eb4:	0021      	movs	r1, r4
    4eb6:	4643      	mov	r3, r8
    4eb8:	4331      	orrs	r1, r6
    4eba:	9e04      	ldr	r6, [sp, #16]
    4ebc:	9a05      	ldr	r2, [sp, #20]
    4ebe:	0030      	movs	r0, r6
    4ec0:	1aed      	subs	r5, r5, r3
    4ec2:	040b      	lsls	r3, r1, #16
    4ec4:	0c0c      	lsrs	r4, r1, #16
    4ec6:	0c1b      	lsrs	r3, r3, #16
    4ec8:	4358      	muls	r0, r3
    4eca:	4366      	muls	r6, r4
    4ecc:	4353      	muls	r3, r2
    4ece:	4354      	muls	r4, r2
    4ed0:	199a      	adds	r2, r3, r6
    4ed2:	0c03      	lsrs	r3, r0, #16
    4ed4:	189b      	adds	r3, r3, r2
    4ed6:	429e      	cmp	r6, r3
    4ed8:	d903      	bls.n	4ee2 <__aeabi_ddiv+0x3aa>
    4eda:	2280      	movs	r2, #128	; 0x80
    4edc:	0252      	lsls	r2, r2, #9
    4ede:	4694      	mov	ip, r2
    4ee0:	4464      	add	r4, ip
    4ee2:	0c1a      	lsrs	r2, r3, #16
    4ee4:	0400      	lsls	r0, r0, #16
    4ee6:	041b      	lsls	r3, r3, #16
    4ee8:	0c00      	lsrs	r0, r0, #16
    4eea:	1914      	adds	r4, r2, r4
    4eec:	181b      	adds	r3, r3, r0
    4eee:	42a5      	cmp	r5, r4
    4ef0:	d350      	bcc.n	4f94 <__aeabi_ddiv+0x45c>
    4ef2:	d04d      	beq.n	4f90 <__aeabi_ddiv+0x458>
    4ef4:	2301      	movs	r3, #1
    4ef6:	4319      	orrs	r1, r3
    4ef8:	4a96      	ldr	r2, [pc, #600]	; (5154 <__aeabi_ddiv+0x61c>)
    4efa:	9b01      	ldr	r3, [sp, #4]
    4efc:	4694      	mov	ip, r2
    4efe:	4463      	add	r3, ip
    4f00:	2b00      	cmp	r3, #0
    4f02:	dc00      	bgt.n	4f06 <__aeabi_ddiv+0x3ce>
    4f04:	e6f3      	b.n	4cee <__aeabi_ddiv+0x1b6>
    4f06:	074a      	lsls	r2, r1, #29
    4f08:	d009      	beq.n	4f1e <__aeabi_ddiv+0x3e6>
    4f0a:	220f      	movs	r2, #15
    4f0c:	400a      	ands	r2, r1
    4f0e:	2a04      	cmp	r2, #4
    4f10:	d005      	beq.n	4f1e <__aeabi_ddiv+0x3e6>
    4f12:	1d0a      	adds	r2, r1, #4
    4f14:	428a      	cmp	r2, r1
    4f16:	4189      	sbcs	r1, r1
    4f18:	4249      	negs	r1, r1
    4f1a:	448b      	add	fp, r1
    4f1c:	0011      	movs	r1, r2
    4f1e:	465a      	mov	r2, fp
    4f20:	01d2      	lsls	r2, r2, #7
    4f22:	d508      	bpl.n	4f36 <__aeabi_ddiv+0x3fe>
    4f24:	465a      	mov	r2, fp
    4f26:	4b8c      	ldr	r3, [pc, #560]	; (5158 <__aeabi_ddiv+0x620>)
    4f28:	401a      	ands	r2, r3
    4f2a:	4693      	mov	fp, r2
    4f2c:	2280      	movs	r2, #128	; 0x80
    4f2e:	00d2      	lsls	r2, r2, #3
    4f30:	4694      	mov	ip, r2
    4f32:	9b01      	ldr	r3, [sp, #4]
    4f34:	4463      	add	r3, ip
    4f36:	4a89      	ldr	r2, [pc, #548]	; (515c <__aeabi_ddiv+0x624>)
    4f38:	4293      	cmp	r3, r2
    4f3a:	dd00      	ble.n	4f3e <__aeabi_ddiv+0x406>
    4f3c:	e65b      	b.n	4bf6 <__aeabi_ddiv+0xbe>
    4f3e:	465a      	mov	r2, fp
    4f40:	08c9      	lsrs	r1, r1, #3
    4f42:	0750      	lsls	r0, r2, #29
    4f44:	4308      	orrs	r0, r1
    4f46:	0256      	lsls	r6, r2, #9
    4f48:	4651      	mov	r1, sl
    4f4a:	2201      	movs	r2, #1
    4f4c:	055b      	lsls	r3, r3, #21
    4f4e:	4681      	mov	r9, r0
    4f50:	0b36      	lsrs	r6, r6, #12
    4f52:	0d5b      	lsrs	r3, r3, #21
    4f54:	400a      	ands	r2, r1
    4f56:	e655      	b.n	4c04 <__aeabi_ddiv+0xcc>
    4f58:	2380      	movs	r3, #128	; 0x80
    4f5a:	031b      	lsls	r3, r3, #12
    4f5c:	421e      	tst	r6, r3
    4f5e:	d011      	beq.n	4f84 <__aeabi_ddiv+0x44c>
    4f60:	465a      	mov	r2, fp
    4f62:	421a      	tst	r2, r3
    4f64:	d10e      	bne.n	4f84 <__aeabi_ddiv+0x44c>
    4f66:	465e      	mov	r6, fp
    4f68:	431e      	orrs	r6, r3
    4f6a:	0336      	lsls	r6, r6, #12
    4f6c:	0b36      	lsrs	r6, r6, #12
    4f6e:	002a      	movs	r2, r5
    4f70:	4689      	mov	r9, r1
    4f72:	4b7b      	ldr	r3, [pc, #492]	; (5160 <__aeabi_ddiv+0x628>)
    4f74:	e646      	b.n	4c04 <__aeabi_ddiv+0xcc>
    4f76:	2b03      	cmp	r3, #3
    4f78:	d100      	bne.n	4f7c <__aeabi_ddiv+0x444>
    4f7a:	e0e1      	b.n	5140 <__aeabi_ddiv+0x608>
    4f7c:	2b01      	cmp	r3, #1
    4f7e:	d1bb      	bne.n	4ef8 <__aeabi_ddiv+0x3c0>
    4f80:	401a      	ands	r2, r3
    4f82:	e6bb      	b.n	4cfc <__aeabi_ddiv+0x1c4>
    4f84:	431e      	orrs	r6, r3
    4f86:	0336      	lsls	r6, r6, #12
    4f88:	0b36      	lsrs	r6, r6, #12
    4f8a:	4642      	mov	r2, r8
    4f8c:	4b74      	ldr	r3, [pc, #464]	; (5160 <__aeabi_ddiv+0x628>)
    4f8e:	e639      	b.n	4c04 <__aeabi_ddiv+0xcc>
    4f90:	2b00      	cmp	r3, #0
    4f92:	d0b1      	beq.n	4ef8 <__aeabi_ddiv+0x3c0>
    4f94:	197d      	adds	r5, r7, r5
    4f96:	1e4a      	subs	r2, r1, #1
    4f98:	42af      	cmp	r7, r5
    4f9a:	d952      	bls.n	5042 <__aeabi_ddiv+0x50a>
    4f9c:	0011      	movs	r1, r2
    4f9e:	42a5      	cmp	r5, r4
    4fa0:	d1a8      	bne.n	4ef4 <__aeabi_ddiv+0x3bc>
    4fa2:	9a03      	ldr	r2, [sp, #12]
    4fa4:	429a      	cmp	r2, r3
    4fa6:	d1a5      	bne.n	4ef4 <__aeabi_ddiv+0x3bc>
    4fa8:	e7a6      	b.n	4ef8 <__aeabi_ddiv+0x3c0>
    4faa:	0003      	movs	r3, r0
    4fac:	003e      	movs	r6, r7
    4fae:	3b28      	subs	r3, #40	; 0x28
    4fb0:	409e      	lsls	r6, r3
    4fb2:	2300      	movs	r3, #0
    4fb4:	4699      	mov	r9, r3
    4fb6:	e654      	b.n	4c62 <__aeabi_ddiv+0x12a>
    4fb8:	f000 ff10 	bl	5ddc <__clzsi2>
    4fbc:	3020      	adds	r0, #32
    4fbe:	e641      	b.n	4c44 <__aeabi_ddiv+0x10c>
    4fc0:	0003      	movs	r3, r0
    4fc2:	4652      	mov	r2, sl
    4fc4:	3b28      	subs	r3, #40	; 0x28
    4fc6:	409a      	lsls	r2, r3
    4fc8:	2100      	movs	r1, #0
    4fca:	4693      	mov	fp, r2
    4fcc:	e677      	b.n	4cbe <__aeabi_ddiv+0x186>
    4fce:	4650      	mov	r0, sl
    4fd0:	f000 ff04 	bl	5ddc <__clzsi2>
    4fd4:	3020      	adds	r0, #32
    4fd6:	e65e      	b.n	4c96 <__aeabi_ddiv+0x15e>
    4fd8:	9b02      	ldr	r3, [sp, #8]
    4fda:	2600      	movs	r6, #0
    4fdc:	42ab      	cmp	r3, r5
    4fde:	d300      	bcc.n	4fe2 <__aeabi_ddiv+0x4aa>
    4fe0:	e723      	b.n	4e2a <__aeabi_ddiv+0x2f2>
    4fe2:	9e03      	ldr	r6, [sp, #12]
    4fe4:	9902      	ldr	r1, [sp, #8]
    4fe6:	46b4      	mov	ip, r6
    4fe8:	4461      	add	r1, ip
    4fea:	4688      	mov	r8, r1
    4fec:	45b0      	cmp	r8, r6
    4fee:	41b6      	sbcs	r6, r6
    4ff0:	465b      	mov	r3, fp
    4ff2:	4276      	negs	r6, r6
    4ff4:	19f6      	adds	r6, r6, r7
    4ff6:	18b2      	adds	r2, r6, r2
    4ff8:	3b01      	subs	r3, #1
    4ffa:	9102      	str	r1, [sp, #8]
    4ffc:	4297      	cmp	r7, r2
    4ffe:	d213      	bcs.n	5028 <__aeabi_ddiv+0x4f0>
    5000:	4290      	cmp	r0, r2
    5002:	d84f      	bhi.n	50a4 <__aeabi_ddiv+0x56c>
    5004:	d100      	bne.n	5008 <__aeabi_ddiv+0x4d0>
    5006:	e08e      	b.n	5126 <__aeabi_ddiv+0x5ee>
    5008:	1a16      	subs	r6, r2, r0
    500a:	469b      	mov	fp, r3
    500c:	e70d      	b.n	4e2a <__aeabi_ddiv+0x2f2>
    500e:	4589      	cmp	r9, r1
    5010:	d200      	bcs.n	5014 <__aeabi_ddiv+0x4dc>
    5012:	e68e      	b.n	4d32 <__aeabi_ddiv+0x1fa>
    5014:	0874      	lsrs	r4, r6, #1
    5016:	464b      	mov	r3, r9
    5018:	07f6      	lsls	r6, r6, #31
    501a:	0035      	movs	r5, r6
    501c:	085b      	lsrs	r3, r3, #1
    501e:	431d      	orrs	r5, r3
    5020:	464b      	mov	r3, r9
    5022:	07db      	lsls	r3, r3, #31
    5024:	9302      	str	r3, [sp, #8]
    5026:	e68b      	b.n	4d40 <__aeabi_ddiv+0x208>
    5028:	4297      	cmp	r7, r2
    502a:	d1ed      	bne.n	5008 <__aeabi_ddiv+0x4d0>
    502c:	9903      	ldr	r1, [sp, #12]
    502e:	9c02      	ldr	r4, [sp, #8]
    5030:	42a1      	cmp	r1, r4
    5032:	d9e5      	bls.n	5000 <__aeabi_ddiv+0x4c8>
    5034:	1a3e      	subs	r6, r7, r0
    5036:	469b      	mov	fp, r3
    5038:	e6f7      	b.n	4e2a <__aeabi_ddiv+0x2f2>
    503a:	4698      	mov	r8, r3
    503c:	e6ca      	b.n	4dd4 <__aeabi_ddiv+0x29c>
    503e:	001e      	movs	r6, r3
    5040:	e6a5      	b.n	4d8e <__aeabi_ddiv+0x256>
    5042:	42ac      	cmp	r4, r5
    5044:	d83e      	bhi.n	50c4 <__aeabi_ddiv+0x58c>
    5046:	d074      	beq.n	5132 <__aeabi_ddiv+0x5fa>
    5048:	0011      	movs	r1, r2
    504a:	e753      	b.n	4ef4 <__aeabi_ddiv+0x3bc>
    504c:	2101      	movs	r1, #1
    504e:	4249      	negs	r1, r1
    5050:	e752      	b.n	4ef8 <__aeabi_ddiv+0x3c0>
    5052:	001c      	movs	r4, r3
    5054:	e70e      	b.n	4e74 <__aeabi_ddiv+0x33c>
    5056:	001e      	movs	r6, r3
    5058:	e72b      	b.n	4eb2 <__aeabi_ddiv+0x37a>
    505a:	2d1f      	cmp	r5, #31
    505c:	dc3c      	bgt.n	50d8 <__aeabi_ddiv+0x5a0>
    505e:	2320      	movs	r3, #32
    5060:	000a      	movs	r2, r1
    5062:	4658      	mov	r0, fp
    5064:	1b5b      	subs	r3, r3, r5
    5066:	4098      	lsls	r0, r3
    5068:	40ea      	lsrs	r2, r5
    506a:	4099      	lsls	r1, r3
    506c:	4302      	orrs	r2, r0
    506e:	1e48      	subs	r0, r1, #1
    5070:	4181      	sbcs	r1, r0
    5072:	465e      	mov	r6, fp
    5074:	4311      	orrs	r1, r2
    5076:	40ee      	lsrs	r6, r5
    5078:	074b      	lsls	r3, r1, #29
    507a:	d009      	beq.n	5090 <__aeabi_ddiv+0x558>
    507c:	230f      	movs	r3, #15
    507e:	400b      	ands	r3, r1
    5080:	2b04      	cmp	r3, #4
    5082:	d005      	beq.n	5090 <__aeabi_ddiv+0x558>
    5084:	000b      	movs	r3, r1
    5086:	1d19      	adds	r1, r3, #4
    5088:	4299      	cmp	r1, r3
    508a:	419b      	sbcs	r3, r3
    508c:	425b      	negs	r3, r3
    508e:	18f6      	adds	r6, r6, r3
    5090:	0233      	lsls	r3, r6, #8
    5092:	d53c      	bpl.n	510e <__aeabi_ddiv+0x5d6>
    5094:	4653      	mov	r3, sl
    5096:	2201      	movs	r2, #1
    5098:	2100      	movs	r1, #0
    509a:	401a      	ands	r2, r3
    509c:	2600      	movs	r6, #0
    509e:	2301      	movs	r3, #1
    50a0:	4689      	mov	r9, r1
    50a2:	e5af      	b.n	4c04 <__aeabi_ddiv+0xcc>
    50a4:	2302      	movs	r3, #2
    50a6:	425b      	negs	r3, r3
    50a8:	469c      	mov	ip, r3
    50aa:	9c03      	ldr	r4, [sp, #12]
    50ac:	44e3      	add	fp, ip
    50ae:	46a4      	mov	ip, r4
    50b0:	9b02      	ldr	r3, [sp, #8]
    50b2:	4463      	add	r3, ip
    50b4:	4698      	mov	r8, r3
    50b6:	45a0      	cmp	r8, r4
    50b8:	41b6      	sbcs	r6, r6
    50ba:	4276      	negs	r6, r6
    50bc:	19f6      	adds	r6, r6, r7
    50be:	9302      	str	r3, [sp, #8]
    50c0:	18b2      	adds	r2, r6, r2
    50c2:	e6b1      	b.n	4e28 <__aeabi_ddiv+0x2f0>
    50c4:	9803      	ldr	r0, [sp, #12]
    50c6:	1e8a      	subs	r2, r1, #2
    50c8:	0041      	lsls	r1, r0, #1
    50ca:	4281      	cmp	r1, r0
    50cc:	41b6      	sbcs	r6, r6
    50ce:	4276      	negs	r6, r6
    50d0:	19f6      	adds	r6, r6, r7
    50d2:	19ad      	adds	r5, r5, r6
    50d4:	9103      	str	r1, [sp, #12]
    50d6:	e761      	b.n	4f9c <__aeabi_ddiv+0x464>
    50d8:	221f      	movs	r2, #31
    50da:	4252      	negs	r2, r2
    50dc:	1ad3      	subs	r3, r2, r3
    50de:	465a      	mov	r2, fp
    50e0:	40da      	lsrs	r2, r3
    50e2:	0013      	movs	r3, r2
    50e4:	2d20      	cmp	r5, #32
    50e6:	d029      	beq.n	513c <__aeabi_ddiv+0x604>
    50e8:	2240      	movs	r2, #64	; 0x40
    50ea:	4658      	mov	r0, fp
    50ec:	1b55      	subs	r5, r2, r5
    50ee:	40a8      	lsls	r0, r5
    50f0:	4301      	orrs	r1, r0
    50f2:	1e48      	subs	r0, r1, #1
    50f4:	4181      	sbcs	r1, r0
    50f6:	2007      	movs	r0, #7
    50f8:	430b      	orrs	r3, r1
    50fa:	4018      	ands	r0, r3
    50fc:	2600      	movs	r6, #0
    50fe:	2800      	cmp	r0, #0
    5100:	d009      	beq.n	5116 <__aeabi_ddiv+0x5de>
    5102:	220f      	movs	r2, #15
    5104:	2600      	movs	r6, #0
    5106:	401a      	ands	r2, r3
    5108:	0019      	movs	r1, r3
    510a:	2a04      	cmp	r2, #4
    510c:	d1bb      	bne.n	5086 <__aeabi_ddiv+0x54e>
    510e:	000b      	movs	r3, r1
    5110:	0770      	lsls	r0, r6, #29
    5112:	0276      	lsls	r6, r6, #9
    5114:	0b36      	lsrs	r6, r6, #12
    5116:	08db      	lsrs	r3, r3, #3
    5118:	4303      	orrs	r3, r0
    511a:	4699      	mov	r9, r3
    511c:	2201      	movs	r2, #1
    511e:	4653      	mov	r3, sl
    5120:	401a      	ands	r2, r3
    5122:	2300      	movs	r3, #0
    5124:	e56e      	b.n	4c04 <__aeabi_ddiv+0xcc>
    5126:	9902      	ldr	r1, [sp, #8]
    5128:	428d      	cmp	r5, r1
    512a:	d8bb      	bhi.n	50a4 <__aeabi_ddiv+0x56c>
    512c:	469b      	mov	fp, r3
    512e:	2600      	movs	r6, #0
    5130:	e67b      	b.n	4e2a <__aeabi_ddiv+0x2f2>
    5132:	9803      	ldr	r0, [sp, #12]
    5134:	4298      	cmp	r0, r3
    5136:	d3c5      	bcc.n	50c4 <__aeabi_ddiv+0x58c>
    5138:	0011      	movs	r1, r2
    513a:	e732      	b.n	4fa2 <__aeabi_ddiv+0x46a>
    513c:	2000      	movs	r0, #0
    513e:	e7d7      	b.n	50f0 <__aeabi_ddiv+0x5b8>
    5140:	2680      	movs	r6, #128	; 0x80
    5142:	465b      	mov	r3, fp
    5144:	0336      	lsls	r6, r6, #12
    5146:	431e      	orrs	r6, r3
    5148:	0336      	lsls	r6, r6, #12
    514a:	0b36      	lsrs	r6, r6, #12
    514c:	9a00      	ldr	r2, [sp, #0]
    514e:	4689      	mov	r9, r1
    5150:	4b03      	ldr	r3, [pc, #12]	; (5160 <__aeabi_ddiv+0x628>)
    5152:	e557      	b.n	4c04 <__aeabi_ddiv+0xcc>
    5154:	000003ff 	.word	0x000003ff
    5158:	feffffff 	.word	0xfeffffff
    515c:	000007fe 	.word	0x000007fe
    5160:	000007ff 	.word	0x000007ff

00005164 <__aeabi_dmul>:
    5164:	b5f0      	push	{r4, r5, r6, r7, lr}
    5166:	465f      	mov	r7, fp
    5168:	4656      	mov	r6, sl
    516a:	464d      	mov	r5, r9
    516c:	4644      	mov	r4, r8
    516e:	b4f0      	push	{r4, r5, r6, r7}
    5170:	030d      	lsls	r5, r1, #12
    5172:	4699      	mov	r9, r3
    5174:	004e      	lsls	r6, r1, #1
    5176:	0b2b      	lsrs	r3, r5, #12
    5178:	b087      	sub	sp, #28
    517a:	0007      	movs	r7, r0
    517c:	4692      	mov	sl, r2
    517e:	4680      	mov	r8, r0
    5180:	469b      	mov	fp, r3
    5182:	0d76      	lsrs	r6, r6, #21
    5184:	0fcc      	lsrs	r4, r1, #31
    5186:	2e00      	cmp	r6, #0
    5188:	d069      	beq.n	525e <__aeabi_dmul+0xfa>
    518a:	4b6d      	ldr	r3, [pc, #436]	; (5340 <__aeabi_dmul+0x1dc>)
    518c:	429e      	cmp	r6, r3
    518e:	d035      	beq.n	51fc <__aeabi_dmul+0x98>
    5190:	465b      	mov	r3, fp
    5192:	2280      	movs	r2, #128	; 0x80
    5194:	00dd      	lsls	r5, r3, #3
    5196:	0412      	lsls	r2, r2, #16
    5198:	0f43      	lsrs	r3, r0, #29
    519a:	4313      	orrs	r3, r2
    519c:	432b      	orrs	r3, r5
    519e:	469b      	mov	fp, r3
    51a0:	00c3      	lsls	r3, r0, #3
    51a2:	4698      	mov	r8, r3
    51a4:	4b67      	ldr	r3, [pc, #412]	; (5344 <__aeabi_dmul+0x1e0>)
    51a6:	2700      	movs	r7, #0
    51a8:	469c      	mov	ip, r3
    51aa:	2300      	movs	r3, #0
    51ac:	4466      	add	r6, ip
    51ae:	9301      	str	r3, [sp, #4]
    51b0:	464a      	mov	r2, r9
    51b2:	0315      	lsls	r5, r2, #12
    51b4:	0050      	lsls	r0, r2, #1
    51b6:	0fd2      	lsrs	r2, r2, #31
    51b8:	4653      	mov	r3, sl
    51ba:	0b2d      	lsrs	r5, r5, #12
    51bc:	0d40      	lsrs	r0, r0, #21
    51be:	4691      	mov	r9, r2
    51c0:	d100      	bne.n	51c4 <__aeabi_dmul+0x60>
    51c2:	e076      	b.n	52b2 <__aeabi_dmul+0x14e>
    51c4:	4a5e      	ldr	r2, [pc, #376]	; (5340 <__aeabi_dmul+0x1dc>)
    51c6:	4290      	cmp	r0, r2
    51c8:	d06c      	beq.n	52a4 <__aeabi_dmul+0x140>
    51ca:	2280      	movs	r2, #128	; 0x80
    51cc:	0f5b      	lsrs	r3, r3, #29
    51ce:	0412      	lsls	r2, r2, #16
    51d0:	4313      	orrs	r3, r2
    51d2:	4a5c      	ldr	r2, [pc, #368]	; (5344 <__aeabi_dmul+0x1e0>)
    51d4:	00ed      	lsls	r5, r5, #3
    51d6:	4694      	mov	ip, r2
    51d8:	431d      	orrs	r5, r3
    51da:	4653      	mov	r3, sl
    51dc:	2200      	movs	r2, #0
    51de:	00db      	lsls	r3, r3, #3
    51e0:	4460      	add	r0, ip
    51e2:	4649      	mov	r1, r9
    51e4:	1836      	adds	r6, r6, r0
    51e6:	1c70      	adds	r0, r6, #1
    51e8:	4061      	eors	r1, r4
    51ea:	9002      	str	r0, [sp, #8]
    51ec:	4317      	orrs	r7, r2
    51ee:	2f0f      	cmp	r7, #15
    51f0:	d900      	bls.n	51f4 <__aeabi_dmul+0x90>
    51f2:	e0af      	b.n	5354 <__aeabi_dmul+0x1f0>
    51f4:	4854      	ldr	r0, [pc, #336]	; (5348 <__aeabi_dmul+0x1e4>)
    51f6:	00bf      	lsls	r7, r7, #2
    51f8:	59c7      	ldr	r7, [r0, r7]
    51fa:	46bf      	mov	pc, r7
    51fc:	465b      	mov	r3, fp
    51fe:	431f      	orrs	r7, r3
    5200:	d000      	beq.n	5204 <__aeabi_dmul+0xa0>
    5202:	e088      	b.n	5316 <__aeabi_dmul+0x1b2>
    5204:	2300      	movs	r3, #0
    5206:	469b      	mov	fp, r3
    5208:	4698      	mov	r8, r3
    520a:	3302      	adds	r3, #2
    520c:	2708      	movs	r7, #8
    520e:	9301      	str	r3, [sp, #4]
    5210:	e7ce      	b.n	51b0 <__aeabi_dmul+0x4c>
    5212:	4649      	mov	r1, r9
    5214:	2a02      	cmp	r2, #2
    5216:	d06a      	beq.n	52ee <__aeabi_dmul+0x18a>
    5218:	2a03      	cmp	r2, #3
    521a:	d100      	bne.n	521e <__aeabi_dmul+0xba>
    521c:	e209      	b.n	5632 <__aeabi_dmul+0x4ce>
    521e:	2a01      	cmp	r2, #1
    5220:	d000      	beq.n	5224 <__aeabi_dmul+0xc0>
    5222:	e1bb      	b.n	559c <__aeabi_dmul+0x438>
    5224:	4011      	ands	r1, r2
    5226:	2200      	movs	r2, #0
    5228:	2300      	movs	r3, #0
    522a:	2500      	movs	r5, #0
    522c:	4690      	mov	r8, r2
    522e:	b2cc      	uxtb	r4, r1
    5230:	2100      	movs	r1, #0
    5232:	032d      	lsls	r5, r5, #12
    5234:	0d0a      	lsrs	r2, r1, #20
    5236:	0512      	lsls	r2, r2, #20
    5238:	0b2d      	lsrs	r5, r5, #12
    523a:	4315      	orrs	r5, r2
    523c:	4a43      	ldr	r2, [pc, #268]	; (534c <__aeabi_dmul+0x1e8>)
    523e:	051b      	lsls	r3, r3, #20
    5240:	4015      	ands	r5, r2
    5242:	431d      	orrs	r5, r3
    5244:	006d      	lsls	r5, r5, #1
    5246:	07e4      	lsls	r4, r4, #31
    5248:	086d      	lsrs	r5, r5, #1
    524a:	4325      	orrs	r5, r4
    524c:	4640      	mov	r0, r8
    524e:	0029      	movs	r1, r5
    5250:	b007      	add	sp, #28
    5252:	bc3c      	pop	{r2, r3, r4, r5}
    5254:	4690      	mov	r8, r2
    5256:	4699      	mov	r9, r3
    5258:	46a2      	mov	sl, r4
    525a:	46ab      	mov	fp, r5
    525c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    525e:	4303      	orrs	r3, r0
    5260:	d052      	beq.n	5308 <__aeabi_dmul+0x1a4>
    5262:	465b      	mov	r3, fp
    5264:	2b00      	cmp	r3, #0
    5266:	d100      	bne.n	526a <__aeabi_dmul+0x106>
    5268:	e18a      	b.n	5580 <__aeabi_dmul+0x41c>
    526a:	4658      	mov	r0, fp
    526c:	f000 fdb6 	bl	5ddc <__clzsi2>
    5270:	0003      	movs	r3, r0
    5272:	3b0b      	subs	r3, #11
    5274:	2b1c      	cmp	r3, #28
    5276:	dd00      	ble.n	527a <__aeabi_dmul+0x116>
    5278:	e17b      	b.n	5572 <__aeabi_dmul+0x40e>
    527a:	221d      	movs	r2, #29
    527c:	1ad3      	subs	r3, r2, r3
    527e:	003a      	movs	r2, r7
    5280:	0001      	movs	r1, r0
    5282:	465d      	mov	r5, fp
    5284:	40da      	lsrs	r2, r3
    5286:	3908      	subs	r1, #8
    5288:	408d      	lsls	r5, r1
    528a:	0013      	movs	r3, r2
    528c:	408f      	lsls	r7, r1
    528e:	432b      	orrs	r3, r5
    5290:	469b      	mov	fp, r3
    5292:	46b8      	mov	r8, r7
    5294:	4b2e      	ldr	r3, [pc, #184]	; (5350 <__aeabi_dmul+0x1ec>)
    5296:	2700      	movs	r7, #0
    5298:	469c      	mov	ip, r3
    529a:	2300      	movs	r3, #0
    529c:	4460      	add	r0, ip
    529e:	4246      	negs	r6, r0
    52a0:	9301      	str	r3, [sp, #4]
    52a2:	e785      	b.n	51b0 <__aeabi_dmul+0x4c>
    52a4:	4652      	mov	r2, sl
    52a6:	432a      	orrs	r2, r5
    52a8:	d12c      	bne.n	5304 <__aeabi_dmul+0x1a0>
    52aa:	2500      	movs	r5, #0
    52ac:	2300      	movs	r3, #0
    52ae:	2202      	movs	r2, #2
    52b0:	e797      	b.n	51e2 <__aeabi_dmul+0x7e>
    52b2:	4652      	mov	r2, sl
    52b4:	432a      	orrs	r2, r5
    52b6:	d021      	beq.n	52fc <__aeabi_dmul+0x198>
    52b8:	2d00      	cmp	r5, #0
    52ba:	d100      	bne.n	52be <__aeabi_dmul+0x15a>
    52bc:	e154      	b.n	5568 <__aeabi_dmul+0x404>
    52be:	0028      	movs	r0, r5
    52c0:	f000 fd8c 	bl	5ddc <__clzsi2>
    52c4:	0003      	movs	r3, r0
    52c6:	3b0b      	subs	r3, #11
    52c8:	2b1c      	cmp	r3, #28
    52ca:	dd00      	ble.n	52ce <__aeabi_dmul+0x16a>
    52cc:	e146      	b.n	555c <__aeabi_dmul+0x3f8>
    52ce:	211d      	movs	r1, #29
    52d0:	1acb      	subs	r3, r1, r3
    52d2:	4651      	mov	r1, sl
    52d4:	0002      	movs	r2, r0
    52d6:	40d9      	lsrs	r1, r3
    52d8:	4653      	mov	r3, sl
    52da:	3a08      	subs	r2, #8
    52dc:	4095      	lsls	r5, r2
    52de:	4093      	lsls	r3, r2
    52e0:	430d      	orrs	r5, r1
    52e2:	4a1b      	ldr	r2, [pc, #108]	; (5350 <__aeabi_dmul+0x1ec>)
    52e4:	4694      	mov	ip, r2
    52e6:	4460      	add	r0, ip
    52e8:	4240      	negs	r0, r0
    52ea:	2200      	movs	r2, #0
    52ec:	e779      	b.n	51e2 <__aeabi_dmul+0x7e>
    52ee:	2401      	movs	r4, #1
    52f0:	2200      	movs	r2, #0
    52f2:	400c      	ands	r4, r1
    52f4:	4b12      	ldr	r3, [pc, #72]	; (5340 <__aeabi_dmul+0x1dc>)
    52f6:	2500      	movs	r5, #0
    52f8:	4690      	mov	r8, r2
    52fa:	e799      	b.n	5230 <__aeabi_dmul+0xcc>
    52fc:	2500      	movs	r5, #0
    52fe:	2300      	movs	r3, #0
    5300:	2201      	movs	r2, #1
    5302:	e76e      	b.n	51e2 <__aeabi_dmul+0x7e>
    5304:	2203      	movs	r2, #3
    5306:	e76c      	b.n	51e2 <__aeabi_dmul+0x7e>
    5308:	2300      	movs	r3, #0
    530a:	469b      	mov	fp, r3
    530c:	4698      	mov	r8, r3
    530e:	3301      	adds	r3, #1
    5310:	2704      	movs	r7, #4
    5312:	9301      	str	r3, [sp, #4]
    5314:	e74c      	b.n	51b0 <__aeabi_dmul+0x4c>
    5316:	2303      	movs	r3, #3
    5318:	270c      	movs	r7, #12
    531a:	9301      	str	r3, [sp, #4]
    531c:	e748      	b.n	51b0 <__aeabi_dmul+0x4c>
    531e:	2300      	movs	r3, #0
    5320:	2580      	movs	r5, #128	; 0x80
    5322:	4698      	mov	r8, r3
    5324:	2400      	movs	r4, #0
    5326:	032d      	lsls	r5, r5, #12
    5328:	4b05      	ldr	r3, [pc, #20]	; (5340 <__aeabi_dmul+0x1dc>)
    532a:	e781      	b.n	5230 <__aeabi_dmul+0xcc>
    532c:	465d      	mov	r5, fp
    532e:	4643      	mov	r3, r8
    5330:	9a01      	ldr	r2, [sp, #4]
    5332:	e76f      	b.n	5214 <__aeabi_dmul+0xb0>
    5334:	465d      	mov	r5, fp
    5336:	4643      	mov	r3, r8
    5338:	0021      	movs	r1, r4
    533a:	9a01      	ldr	r2, [sp, #4]
    533c:	e76a      	b.n	5214 <__aeabi_dmul+0xb0>
    533e:	46c0      	nop			; (mov r8, r8)
    5340:	000007ff 	.word	0x000007ff
    5344:	fffffc01 	.word	0xfffffc01
    5348:	00006840 	.word	0x00006840
    534c:	800fffff 	.word	0x800fffff
    5350:	000003f3 	.word	0x000003f3
    5354:	4642      	mov	r2, r8
    5356:	0c12      	lsrs	r2, r2, #16
    5358:	4691      	mov	r9, r2
    535a:	0c1a      	lsrs	r2, r3, #16
    535c:	4694      	mov	ip, r2
    535e:	4642      	mov	r2, r8
    5360:	0417      	lsls	r7, r2, #16
    5362:	464a      	mov	r2, r9
    5364:	041b      	lsls	r3, r3, #16
    5366:	0c1b      	lsrs	r3, r3, #16
    5368:	435a      	muls	r2, r3
    536a:	4660      	mov	r0, ip
    536c:	4690      	mov	r8, r2
    536e:	464a      	mov	r2, r9
    5370:	4342      	muls	r2, r0
    5372:	0010      	movs	r0, r2
    5374:	9203      	str	r2, [sp, #12]
    5376:	4662      	mov	r2, ip
    5378:	001c      	movs	r4, r3
    537a:	0c3f      	lsrs	r7, r7, #16
    537c:	437a      	muls	r2, r7
    537e:	437c      	muls	r4, r7
    5380:	4442      	add	r2, r8
    5382:	9201      	str	r2, [sp, #4]
    5384:	0c22      	lsrs	r2, r4, #16
    5386:	4692      	mov	sl, r2
    5388:	9a01      	ldr	r2, [sp, #4]
    538a:	4452      	add	r2, sl
    538c:	4590      	cmp	r8, r2
    538e:	d906      	bls.n	539e <__aeabi_dmul+0x23a>
    5390:	4682      	mov	sl, r0
    5392:	2080      	movs	r0, #128	; 0x80
    5394:	0240      	lsls	r0, r0, #9
    5396:	4680      	mov	r8, r0
    5398:	44c2      	add	sl, r8
    539a:	4650      	mov	r0, sl
    539c:	9003      	str	r0, [sp, #12]
    539e:	0c10      	lsrs	r0, r2, #16
    53a0:	9004      	str	r0, [sp, #16]
    53a2:	4648      	mov	r0, r9
    53a4:	0424      	lsls	r4, r4, #16
    53a6:	0c24      	lsrs	r4, r4, #16
    53a8:	0412      	lsls	r2, r2, #16
    53aa:	1912      	adds	r2, r2, r4
    53ac:	9205      	str	r2, [sp, #20]
    53ae:	0c2a      	lsrs	r2, r5, #16
    53b0:	042d      	lsls	r5, r5, #16
    53b2:	0c2d      	lsrs	r5, r5, #16
    53b4:	4368      	muls	r0, r5
    53b6:	002c      	movs	r4, r5
    53b8:	4682      	mov	sl, r0
    53ba:	4648      	mov	r0, r9
    53bc:	437c      	muls	r4, r7
    53be:	4350      	muls	r0, r2
    53c0:	4681      	mov	r9, r0
    53c2:	0c20      	lsrs	r0, r4, #16
    53c4:	4680      	mov	r8, r0
    53c6:	4357      	muls	r7, r2
    53c8:	4457      	add	r7, sl
    53ca:	4447      	add	r7, r8
    53cc:	45ba      	cmp	sl, r7
    53ce:	d903      	bls.n	53d8 <__aeabi_dmul+0x274>
    53d0:	2080      	movs	r0, #128	; 0x80
    53d2:	0240      	lsls	r0, r0, #9
    53d4:	4680      	mov	r8, r0
    53d6:	44c1      	add	r9, r8
    53d8:	0c38      	lsrs	r0, r7, #16
    53da:	043f      	lsls	r7, r7, #16
    53dc:	46b8      	mov	r8, r7
    53de:	4448      	add	r0, r9
    53e0:	0424      	lsls	r4, r4, #16
    53e2:	0c24      	lsrs	r4, r4, #16
    53e4:	9001      	str	r0, [sp, #4]
    53e6:	9804      	ldr	r0, [sp, #16]
    53e8:	44a0      	add	r8, r4
    53ea:	4440      	add	r0, r8
    53ec:	9004      	str	r0, [sp, #16]
    53ee:	4658      	mov	r0, fp
    53f0:	0c00      	lsrs	r0, r0, #16
    53f2:	4681      	mov	r9, r0
    53f4:	4658      	mov	r0, fp
    53f6:	0404      	lsls	r4, r0, #16
    53f8:	0c20      	lsrs	r0, r4, #16
    53fa:	4682      	mov	sl, r0
    53fc:	0007      	movs	r7, r0
    53fe:	4648      	mov	r0, r9
    5400:	435f      	muls	r7, r3
    5402:	464c      	mov	r4, r9
    5404:	4343      	muls	r3, r0
    5406:	4660      	mov	r0, ip
    5408:	4360      	muls	r0, r4
    540a:	4664      	mov	r4, ip
    540c:	4683      	mov	fp, r0
    540e:	4650      	mov	r0, sl
    5410:	4344      	muls	r4, r0
    5412:	0c38      	lsrs	r0, r7, #16
    5414:	4684      	mov	ip, r0
    5416:	18e4      	adds	r4, r4, r3
    5418:	4464      	add	r4, ip
    541a:	42a3      	cmp	r3, r4
    541c:	d903      	bls.n	5426 <__aeabi_dmul+0x2c2>
    541e:	2380      	movs	r3, #128	; 0x80
    5420:	025b      	lsls	r3, r3, #9
    5422:	469c      	mov	ip, r3
    5424:	44e3      	add	fp, ip
    5426:	4648      	mov	r0, r9
    5428:	043f      	lsls	r7, r7, #16
    542a:	0c23      	lsrs	r3, r4, #16
    542c:	0c3f      	lsrs	r7, r7, #16
    542e:	0424      	lsls	r4, r4, #16
    5430:	19e4      	adds	r4, r4, r7
    5432:	4657      	mov	r7, sl
    5434:	4368      	muls	r0, r5
    5436:	436f      	muls	r7, r5
    5438:	4684      	mov	ip, r0
    543a:	464d      	mov	r5, r9
    543c:	4650      	mov	r0, sl
    543e:	4355      	muls	r5, r2
    5440:	4342      	muls	r2, r0
    5442:	0c38      	lsrs	r0, r7, #16
    5444:	4681      	mov	r9, r0
    5446:	4462      	add	r2, ip
    5448:	444a      	add	r2, r9
    544a:	445b      	add	r3, fp
    544c:	4594      	cmp	ip, r2
    544e:	d903      	bls.n	5458 <__aeabi_dmul+0x2f4>
    5450:	2080      	movs	r0, #128	; 0x80
    5452:	0240      	lsls	r0, r0, #9
    5454:	4684      	mov	ip, r0
    5456:	4465      	add	r5, ip
    5458:	9803      	ldr	r0, [sp, #12]
    545a:	043f      	lsls	r7, r7, #16
    545c:	4683      	mov	fp, r0
    545e:	9804      	ldr	r0, [sp, #16]
    5460:	0c3f      	lsrs	r7, r7, #16
    5462:	4684      	mov	ip, r0
    5464:	44e3      	add	fp, ip
    5466:	45c3      	cmp	fp, r8
    5468:	4180      	sbcs	r0, r0
    546a:	4240      	negs	r0, r0
    546c:	4682      	mov	sl, r0
    546e:	0410      	lsls	r0, r2, #16
    5470:	4684      	mov	ip, r0
    5472:	9801      	ldr	r0, [sp, #4]
    5474:	4467      	add	r7, ip
    5476:	4684      	mov	ip, r0
    5478:	4467      	add	r7, ip
    547a:	44a3      	add	fp, r4
    547c:	46bc      	mov	ip, r7
    547e:	45a3      	cmp	fp, r4
    5480:	41a4      	sbcs	r4, r4
    5482:	4699      	mov	r9, r3
    5484:	44d4      	add	ip, sl
    5486:	4264      	negs	r4, r4
    5488:	4287      	cmp	r7, r0
    548a:	41bf      	sbcs	r7, r7
    548c:	45d4      	cmp	ip, sl
    548e:	4180      	sbcs	r0, r0
    5490:	44e1      	add	r9, ip
    5492:	46a0      	mov	r8, r4
    5494:	4599      	cmp	r9, r3
    5496:	419b      	sbcs	r3, r3
    5498:	427f      	negs	r7, r7
    549a:	4240      	negs	r0, r0
    549c:	44c8      	add	r8, r9
    549e:	4307      	orrs	r7, r0
    54a0:	0c12      	lsrs	r2, r2, #16
    54a2:	18ba      	adds	r2, r7, r2
    54a4:	45a0      	cmp	r8, r4
    54a6:	41a4      	sbcs	r4, r4
    54a8:	425f      	negs	r7, r3
    54aa:	003b      	movs	r3, r7
    54ac:	4264      	negs	r4, r4
    54ae:	4323      	orrs	r3, r4
    54b0:	18d7      	adds	r7, r2, r3
    54b2:	4643      	mov	r3, r8
    54b4:	197d      	adds	r5, r7, r5
    54b6:	0ddb      	lsrs	r3, r3, #23
    54b8:	026d      	lsls	r5, r5, #9
    54ba:	431d      	orrs	r5, r3
    54bc:	465b      	mov	r3, fp
    54be:	025a      	lsls	r2, r3, #9
    54c0:	9b05      	ldr	r3, [sp, #20]
    54c2:	431a      	orrs	r2, r3
    54c4:	1e53      	subs	r3, r2, #1
    54c6:	419a      	sbcs	r2, r3
    54c8:	465b      	mov	r3, fp
    54ca:	0ddb      	lsrs	r3, r3, #23
    54cc:	431a      	orrs	r2, r3
    54ce:	4643      	mov	r3, r8
    54d0:	025b      	lsls	r3, r3, #9
    54d2:	4313      	orrs	r3, r2
    54d4:	01ea      	lsls	r2, r5, #7
    54d6:	d507      	bpl.n	54e8 <__aeabi_dmul+0x384>
    54d8:	2201      	movs	r2, #1
    54da:	085c      	lsrs	r4, r3, #1
    54dc:	4013      	ands	r3, r2
    54de:	4323      	orrs	r3, r4
    54e0:	07ea      	lsls	r2, r5, #31
    54e2:	9e02      	ldr	r6, [sp, #8]
    54e4:	4313      	orrs	r3, r2
    54e6:	086d      	lsrs	r5, r5, #1
    54e8:	4a57      	ldr	r2, [pc, #348]	; (5648 <__aeabi_dmul+0x4e4>)
    54ea:	18b2      	adds	r2, r6, r2
    54ec:	2a00      	cmp	r2, #0
    54ee:	dd4b      	ble.n	5588 <__aeabi_dmul+0x424>
    54f0:	0758      	lsls	r0, r3, #29
    54f2:	d009      	beq.n	5508 <__aeabi_dmul+0x3a4>
    54f4:	200f      	movs	r0, #15
    54f6:	4018      	ands	r0, r3
    54f8:	2804      	cmp	r0, #4
    54fa:	d005      	beq.n	5508 <__aeabi_dmul+0x3a4>
    54fc:	1d18      	adds	r0, r3, #4
    54fe:	4298      	cmp	r0, r3
    5500:	419b      	sbcs	r3, r3
    5502:	425b      	negs	r3, r3
    5504:	18ed      	adds	r5, r5, r3
    5506:	0003      	movs	r3, r0
    5508:	01e8      	lsls	r0, r5, #7
    550a:	d504      	bpl.n	5516 <__aeabi_dmul+0x3b2>
    550c:	4a4f      	ldr	r2, [pc, #316]	; (564c <__aeabi_dmul+0x4e8>)
    550e:	4015      	ands	r5, r2
    5510:	2280      	movs	r2, #128	; 0x80
    5512:	00d2      	lsls	r2, r2, #3
    5514:	18b2      	adds	r2, r6, r2
    5516:	484e      	ldr	r0, [pc, #312]	; (5650 <__aeabi_dmul+0x4ec>)
    5518:	4282      	cmp	r2, r0
    551a:	dd00      	ble.n	551e <__aeabi_dmul+0x3ba>
    551c:	e6e7      	b.n	52ee <__aeabi_dmul+0x18a>
    551e:	2401      	movs	r4, #1
    5520:	08db      	lsrs	r3, r3, #3
    5522:	0768      	lsls	r0, r5, #29
    5524:	4318      	orrs	r0, r3
    5526:	026d      	lsls	r5, r5, #9
    5528:	0553      	lsls	r3, r2, #21
    552a:	4680      	mov	r8, r0
    552c:	0b2d      	lsrs	r5, r5, #12
    552e:	0d5b      	lsrs	r3, r3, #21
    5530:	400c      	ands	r4, r1
    5532:	e67d      	b.n	5230 <__aeabi_dmul+0xcc>
    5534:	2280      	movs	r2, #128	; 0x80
    5536:	4659      	mov	r1, fp
    5538:	0312      	lsls	r2, r2, #12
    553a:	4211      	tst	r1, r2
    553c:	d008      	beq.n	5550 <__aeabi_dmul+0x3ec>
    553e:	4215      	tst	r5, r2
    5540:	d106      	bne.n	5550 <__aeabi_dmul+0x3ec>
    5542:	4315      	orrs	r5, r2
    5544:	032d      	lsls	r5, r5, #12
    5546:	4698      	mov	r8, r3
    5548:	0b2d      	lsrs	r5, r5, #12
    554a:	464c      	mov	r4, r9
    554c:	4b41      	ldr	r3, [pc, #260]	; (5654 <__aeabi_dmul+0x4f0>)
    554e:	e66f      	b.n	5230 <__aeabi_dmul+0xcc>
    5550:	465d      	mov	r5, fp
    5552:	4315      	orrs	r5, r2
    5554:	032d      	lsls	r5, r5, #12
    5556:	0b2d      	lsrs	r5, r5, #12
    5558:	4b3e      	ldr	r3, [pc, #248]	; (5654 <__aeabi_dmul+0x4f0>)
    555a:	e669      	b.n	5230 <__aeabi_dmul+0xcc>
    555c:	0003      	movs	r3, r0
    555e:	4655      	mov	r5, sl
    5560:	3b28      	subs	r3, #40	; 0x28
    5562:	409d      	lsls	r5, r3
    5564:	2300      	movs	r3, #0
    5566:	e6bc      	b.n	52e2 <__aeabi_dmul+0x17e>
    5568:	4650      	mov	r0, sl
    556a:	f000 fc37 	bl	5ddc <__clzsi2>
    556e:	3020      	adds	r0, #32
    5570:	e6a8      	b.n	52c4 <__aeabi_dmul+0x160>
    5572:	0003      	movs	r3, r0
    5574:	3b28      	subs	r3, #40	; 0x28
    5576:	409f      	lsls	r7, r3
    5578:	2300      	movs	r3, #0
    557a:	46bb      	mov	fp, r7
    557c:	4698      	mov	r8, r3
    557e:	e689      	b.n	5294 <__aeabi_dmul+0x130>
    5580:	f000 fc2c 	bl	5ddc <__clzsi2>
    5584:	3020      	adds	r0, #32
    5586:	e673      	b.n	5270 <__aeabi_dmul+0x10c>
    5588:	2401      	movs	r4, #1
    558a:	1aa6      	subs	r6, r4, r2
    558c:	2e38      	cmp	r6, #56	; 0x38
    558e:	dd07      	ble.n	55a0 <__aeabi_dmul+0x43c>
    5590:	2200      	movs	r2, #0
    5592:	400c      	ands	r4, r1
    5594:	2300      	movs	r3, #0
    5596:	2500      	movs	r5, #0
    5598:	4690      	mov	r8, r2
    559a:	e649      	b.n	5230 <__aeabi_dmul+0xcc>
    559c:	9e02      	ldr	r6, [sp, #8]
    559e:	e7a3      	b.n	54e8 <__aeabi_dmul+0x384>
    55a0:	2e1f      	cmp	r6, #31
    55a2:	dc20      	bgt.n	55e6 <__aeabi_dmul+0x482>
    55a4:	2220      	movs	r2, #32
    55a6:	002c      	movs	r4, r5
    55a8:	0018      	movs	r0, r3
    55aa:	1b92      	subs	r2, r2, r6
    55ac:	40f0      	lsrs	r0, r6
    55ae:	4094      	lsls	r4, r2
    55b0:	4093      	lsls	r3, r2
    55b2:	4304      	orrs	r4, r0
    55b4:	1e58      	subs	r0, r3, #1
    55b6:	4183      	sbcs	r3, r0
    55b8:	431c      	orrs	r4, r3
    55ba:	40f5      	lsrs	r5, r6
    55bc:	0763      	lsls	r3, r4, #29
    55be:	d009      	beq.n	55d4 <__aeabi_dmul+0x470>
    55c0:	230f      	movs	r3, #15
    55c2:	4023      	ands	r3, r4
    55c4:	2b04      	cmp	r3, #4
    55c6:	d005      	beq.n	55d4 <__aeabi_dmul+0x470>
    55c8:	0023      	movs	r3, r4
    55ca:	1d1c      	adds	r4, r3, #4
    55cc:	429c      	cmp	r4, r3
    55ce:	4192      	sbcs	r2, r2
    55d0:	4252      	negs	r2, r2
    55d2:	18ad      	adds	r5, r5, r2
    55d4:	022b      	lsls	r3, r5, #8
    55d6:	d51f      	bpl.n	5618 <__aeabi_dmul+0x4b4>
    55d8:	2401      	movs	r4, #1
    55da:	2200      	movs	r2, #0
    55dc:	400c      	ands	r4, r1
    55de:	2301      	movs	r3, #1
    55e0:	2500      	movs	r5, #0
    55e2:	4690      	mov	r8, r2
    55e4:	e624      	b.n	5230 <__aeabi_dmul+0xcc>
    55e6:	201f      	movs	r0, #31
    55e8:	002c      	movs	r4, r5
    55ea:	4240      	negs	r0, r0
    55ec:	1a82      	subs	r2, r0, r2
    55ee:	40d4      	lsrs	r4, r2
    55f0:	2e20      	cmp	r6, #32
    55f2:	d01c      	beq.n	562e <__aeabi_dmul+0x4ca>
    55f4:	2240      	movs	r2, #64	; 0x40
    55f6:	1b96      	subs	r6, r2, r6
    55f8:	40b5      	lsls	r5, r6
    55fa:	432b      	orrs	r3, r5
    55fc:	1e58      	subs	r0, r3, #1
    55fe:	4183      	sbcs	r3, r0
    5600:	2007      	movs	r0, #7
    5602:	4323      	orrs	r3, r4
    5604:	4018      	ands	r0, r3
    5606:	2500      	movs	r5, #0
    5608:	2800      	cmp	r0, #0
    560a:	d009      	beq.n	5620 <__aeabi_dmul+0x4bc>
    560c:	220f      	movs	r2, #15
    560e:	2500      	movs	r5, #0
    5610:	401a      	ands	r2, r3
    5612:	001c      	movs	r4, r3
    5614:	2a04      	cmp	r2, #4
    5616:	d1d8      	bne.n	55ca <__aeabi_dmul+0x466>
    5618:	0023      	movs	r3, r4
    561a:	0768      	lsls	r0, r5, #29
    561c:	026d      	lsls	r5, r5, #9
    561e:	0b2d      	lsrs	r5, r5, #12
    5620:	2401      	movs	r4, #1
    5622:	08db      	lsrs	r3, r3, #3
    5624:	4303      	orrs	r3, r0
    5626:	4698      	mov	r8, r3
    5628:	400c      	ands	r4, r1
    562a:	2300      	movs	r3, #0
    562c:	e600      	b.n	5230 <__aeabi_dmul+0xcc>
    562e:	2500      	movs	r5, #0
    5630:	e7e3      	b.n	55fa <__aeabi_dmul+0x496>
    5632:	2280      	movs	r2, #128	; 0x80
    5634:	2401      	movs	r4, #1
    5636:	0312      	lsls	r2, r2, #12
    5638:	4315      	orrs	r5, r2
    563a:	032d      	lsls	r5, r5, #12
    563c:	4698      	mov	r8, r3
    563e:	0b2d      	lsrs	r5, r5, #12
    5640:	400c      	ands	r4, r1
    5642:	4b04      	ldr	r3, [pc, #16]	; (5654 <__aeabi_dmul+0x4f0>)
    5644:	e5f4      	b.n	5230 <__aeabi_dmul+0xcc>
    5646:	46c0      	nop			; (mov r8, r8)
    5648:	000003ff 	.word	0x000003ff
    564c:	feffffff 	.word	0xfeffffff
    5650:	000007fe 	.word	0x000007fe
    5654:	000007ff 	.word	0x000007ff

00005658 <__aeabi_dsub>:
    5658:	b5f0      	push	{r4, r5, r6, r7, lr}
    565a:	4657      	mov	r7, sl
    565c:	464e      	mov	r6, r9
    565e:	4645      	mov	r5, r8
    5660:	b4e0      	push	{r5, r6, r7}
    5662:	000e      	movs	r6, r1
    5664:	0011      	movs	r1, r2
    5666:	0ff2      	lsrs	r2, r6, #31
    5668:	4692      	mov	sl, r2
    566a:	00c5      	lsls	r5, r0, #3
    566c:	0f42      	lsrs	r2, r0, #29
    566e:	0318      	lsls	r0, r3, #12
    5670:	0337      	lsls	r7, r6, #12
    5672:	0074      	lsls	r4, r6, #1
    5674:	0a40      	lsrs	r0, r0, #9
    5676:	0f4e      	lsrs	r6, r1, #29
    5678:	0a7f      	lsrs	r7, r7, #9
    567a:	4330      	orrs	r0, r6
    567c:	4ecf      	ldr	r6, [pc, #828]	; (59bc <__aeabi_dsub+0x364>)
    567e:	4317      	orrs	r7, r2
    5680:	005a      	lsls	r2, r3, #1
    5682:	0d64      	lsrs	r4, r4, #21
    5684:	0d52      	lsrs	r2, r2, #21
    5686:	0fdb      	lsrs	r3, r3, #31
    5688:	00c9      	lsls	r1, r1, #3
    568a:	42b2      	cmp	r2, r6
    568c:	d100      	bne.n	5690 <__aeabi_dsub+0x38>
    568e:	e0e5      	b.n	585c <__aeabi_dsub+0x204>
    5690:	2601      	movs	r6, #1
    5692:	4073      	eors	r3, r6
    5694:	1aa6      	subs	r6, r4, r2
    5696:	46b4      	mov	ip, r6
    5698:	4553      	cmp	r3, sl
    569a:	d100      	bne.n	569e <__aeabi_dsub+0x46>
    569c:	e0af      	b.n	57fe <__aeabi_dsub+0x1a6>
    569e:	2e00      	cmp	r6, #0
    56a0:	dc00      	bgt.n	56a4 <__aeabi_dsub+0x4c>
    56a2:	e10d      	b.n	58c0 <__aeabi_dsub+0x268>
    56a4:	2a00      	cmp	r2, #0
    56a6:	d13a      	bne.n	571e <__aeabi_dsub+0xc6>
    56a8:	0003      	movs	r3, r0
    56aa:	430b      	orrs	r3, r1
    56ac:	d000      	beq.n	56b0 <__aeabi_dsub+0x58>
    56ae:	e0e4      	b.n	587a <__aeabi_dsub+0x222>
    56b0:	076b      	lsls	r3, r5, #29
    56b2:	d009      	beq.n	56c8 <__aeabi_dsub+0x70>
    56b4:	230f      	movs	r3, #15
    56b6:	402b      	ands	r3, r5
    56b8:	2b04      	cmp	r3, #4
    56ba:	d005      	beq.n	56c8 <__aeabi_dsub+0x70>
    56bc:	1d2b      	adds	r3, r5, #4
    56be:	42ab      	cmp	r3, r5
    56c0:	41ad      	sbcs	r5, r5
    56c2:	426d      	negs	r5, r5
    56c4:	197f      	adds	r7, r7, r5
    56c6:	001d      	movs	r5, r3
    56c8:	023b      	lsls	r3, r7, #8
    56ca:	d400      	bmi.n	56ce <__aeabi_dsub+0x76>
    56cc:	e088      	b.n	57e0 <__aeabi_dsub+0x188>
    56ce:	4bbb      	ldr	r3, [pc, #748]	; (59bc <__aeabi_dsub+0x364>)
    56d0:	3401      	adds	r4, #1
    56d2:	429c      	cmp	r4, r3
    56d4:	d100      	bne.n	56d8 <__aeabi_dsub+0x80>
    56d6:	e110      	b.n	58fa <__aeabi_dsub+0x2a2>
    56d8:	003a      	movs	r2, r7
    56da:	4bb9      	ldr	r3, [pc, #740]	; (59c0 <__aeabi_dsub+0x368>)
    56dc:	4651      	mov	r1, sl
    56de:	401a      	ands	r2, r3
    56e0:	2301      	movs	r3, #1
    56e2:	0750      	lsls	r0, r2, #29
    56e4:	08ed      	lsrs	r5, r5, #3
    56e6:	0252      	lsls	r2, r2, #9
    56e8:	0564      	lsls	r4, r4, #21
    56ea:	4305      	orrs	r5, r0
    56ec:	0b12      	lsrs	r2, r2, #12
    56ee:	0d64      	lsrs	r4, r4, #21
    56f0:	400b      	ands	r3, r1
    56f2:	2100      	movs	r1, #0
    56f4:	0028      	movs	r0, r5
    56f6:	0312      	lsls	r2, r2, #12
    56f8:	0d0d      	lsrs	r5, r1, #20
    56fa:	0b12      	lsrs	r2, r2, #12
    56fc:	0564      	lsls	r4, r4, #21
    56fe:	052d      	lsls	r5, r5, #20
    5700:	4315      	orrs	r5, r2
    5702:	0862      	lsrs	r2, r4, #1
    5704:	4caf      	ldr	r4, [pc, #700]	; (59c4 <__aeabi_dsub+0x36c>)
    5706:	07db      	lsls	r3, r3, #31
    5708:	402c      	ands	r4, r5
    570a:	4314      	orrs	r4, r2
    570c:	0064      	lsls	r4, r4, #1
    570e:	0864      	lsrs	r4, r4, #1
    5710:	431c      	orrs	r4, r3
    5712:	0021      	movs	r1, r4
    5714:	bc1c      	pop	{r2, r3, r4}
    5716:	4690      	mov	r8, r2
    5718:	4699      	mov	r9, r3
    571a:	46a2      	mov	sl, r4
    571c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    571e:	4ba7      	ldr	r3, [pc, #668]	; (59bc <__aeabi_dsub+0x364>)
    5720:	429c      	cmp	r4, r3
    5722:	d0c5      	beq.n	56b0 <__aeabi_dsub+0x58>
    5724:	2380      	movs	r3, #128	; 0x80
    5726:	041b      	lsls	r3, r3, #16
    5728:	4318      	orrs	r0, r3
    572a:	4663      	mov	r3, ip
    572c:	2b38      	cmp	r3, #56	; 0x38
    572e:	dd00      	ble.n	5732 <__aeabi_dsub+0xda>
    5730:	e0fd      	b.n	592e <__aeabi_dsub+0x2d6>
    5732:	2b1f      	cmp	r3, #31
    5734:	dd00      	ble.n	5738 <__aeabi_dsub+0xe0>
    5736:	e130      	b.n	599a <__aeabi_dsub+0x342>
    5738:	4662      	mov	r2, ip
    573a:	2320      	movs	r3, #32
    573c:	1a9b      	subs	r3, r3, r2
    573e:	0002      	movs	r2, r0
    5740:	409a      	lsls	r2, r3
    5742:	4666      	mov	r6, ip
    5744:	4690      	mov	r8, r2
    5746:	000a      	movs	r2, r1
    5748:	4099      	lsls	r1, r3
    574a:	40f2      	lsrs	r2, r6
    574c:	4646      	mov	r6, r8
    574e:	1e4b      	subs	r3, r1, #1
    5750:	4199      	sbcs	r1, r3
    5752:	4332      	orrs	r2, r6
    5754:	4311      	orrs	r1, r2
    5756:	4663      	mov	r3, ip
    5758:	0002      	movs	r2, r0
    575a:	40da      	lsrs	r2, r3
    575c:	1a69      	subs	r1, r5, r1
    575e:	428d      	cmp	r5, r1
    5760:	419b      	sbcs	r3, r3
    5762:	000d      	movs	r5, r1
    5764:	1aba      	subs	r2, r7, r2
    5766:	425b      	negs	r3, r3
    5768:	1ad7      	subs	r7, r2, r3
    576a:	023b      	lsls	r3, r7, #8
    576c:	d535      	bpl.n	57da <__aeabi_dsub+0x182>
    576e:	027a      	lsls	r2, r7, #9
    5770:	0a53      	lsrs	r3, r2, #9
    5772:	4698      	mov	r8, r3
    5774:	4643      	mov	r3, r8
    5776:	2b00      	cmp	r3, #0
    5778:	d100      	bne.n	577c <__aeabi_dsub+0x124>
    577a:	e0c4      	b.n	5906 <__aeabi_dsub+0x2ae>
    577c:	4640      	mov	r0, r8
    577e:	f000 fb2d 	bl	5ddc <__clzsi2>
    5782:	0003      	movs	r3, r0
    5784:	3b08      	subs	r3, #8
    5786:	2b1f      	cmp	r3, #31
    5788:	dd00      	ble.n	578c <__aeabi_dsub+0x134>
    578a:	e0c5      	b.n	5918 <__aeabi_dsub+0x2c0>
    578c:	2220      	movs	r2, #32
    578e:	0029      	movs	r1, r5
    5790:	1ad2      	subs	r2, r2, r3
    5792:	4647      	mov	r7, r8
    5794:	40d1      	lsrs	r1, r2
    5796:	409f      	lsls	r7, r3
    5798:	000a      	movs	r2, r1
    579a:	409d      	lsls	r5, r3
    579c:	433a      	orrs	r2, r7
    579e:	429c      	cmp	r4, r3
    57a0:	dd00      	ble.n	57a4 <__aeabi_dsub+0x14c>
    57a2:	e0c0      	b.n	5926 <__aeabi_dsub+0x2ce>
    57a4:	1b1c      	subs	r4, r3, r4
    57a6:	1c63      	adds	r3, r4, #1
    57a8:	2b1f      	cmp	r3, #31
    57aa:	dd00      	ble.n	57ae <__aeabi_dsub+0x156>
    57ac:	e0e4      	b.n	5978 <__aeabi_dsub+0x320>
    57ae:	2120      	movs	r1, #32
    57b0:	0014      	movs	r4, r2
    57b2:	0028      	movs	r0, r5
    57b4:	1ac9      	subs	r1, r1, r3
    57b6:	40d8      	lsrs	r0, r3
    57b8:	408c      	lsls	r4, r1
    57ba:	408d      	lsls	r5, r1
    57bc:	4304      	orrs	r4, r0
    57be:	40da      	lsrs	r2, r3
    57c0:	1e68      	subs	r0, r5, #1
    57c2:	4185      	sbcs	r5, r0
    57c4:	0017      	movs	r7, r2
    57c6:	4325      	orrs	r5, r4
    57c8:	2400      	movs	r4, #0
    57ca:	e771      	b.n	56b0 <__aeabi_dsub+0x58>
    57cc:	4642      	mov	r2, r8
    57ce:	4663      	mov	r3, ip
    57d0:	431a      	orrs	r2, r3
    57d2:	d100      	bne.n	57d6 <__aeabi_dsub+0x17e>
    57d4:	e24c      	b.n	5c70 <__aeabi_dsub+0x618>
    57d6:	4667      	mov	r7, ip
    57d8:	4645      	mov	r5, r8
    57da:	076b      	lsls	r3, r5, #29
    57dc:	d000      	beq.n	57e0 <__aeabi_dsub+0x188>
    57de:	e769      	b.n	56b4 <__aeabi_dsub+0x5c>
    57e0:	2301      	movs	r3, #1
    57e2:	4651      	mov	r1, sl
    57e4:	0778      	lsls	r0, r7, #29
    57e6:	08ed      	lsrs	r5, r5, #3
    57e8:	08fa      	lsrs	r2, r7, #3
    57ea:	400b      	ands	r3, r1
    57ec:	4305      	orrs	r5, r0
    57ee:	4973      	ldr	r1, [pc, #460]	; (59bc <__aeabi_dsub+0x364>)
    57f0:	428c      	cmp	r4, r1
    57f2:	d038      	beq.n	5866 <__aeabi_dsub+0x20e>
    57f4:	0312      	lsls	r2, r2, #12
    57f6:	0564      	lsls	r4, r4, #21
    57f8:	0b12      	lsrs	r2, r2, #12
    57fa:	0d64      	lsrs	r4, r4, #21
    57fc:	e779      	b.n	56f2 <__aeabi_dsub+0x9a>
    57fe:	2e00      	cmp	r6, #0
    5800:	dc00      	bgt.n	5804 <__aeabi_dsub+0x1ac>
    5802:	e09a      	b.n	593a <__aeabi_dsub+0x2e2>
    5804:	2a00      	cmp	r2, #0
    5806:	d047      	beq.n	5898 <__aeabi_dsub+0x240>
    5808:	4a6c      	ldr	r2, [pc, #432]	; (59bc <__aeabi_dsub+0x364>)
    580a:	4294      	cmp	r4, r2
    580c:	d100      	bne.n	5810 <__aeabi_dsub+0x1b8>
    580e:	e74f      	b.n	56b0 <__aeabi_dsub+0x58>
    5810:	2280      	movs	r2, #128	; 0x80
    5812:	0412      	lsls	r2, r2, #16
    5814:	4310      	orrs	r0, r2
    5816:	4662      	mov	r2, ip
    5818:	2a38      	cmp	r2, #56	; 0x38
    581a:	dc00      	bgt.n	581e <__aeabi_dsub+0x1c6>
    581c:	e108      	b.n	5a30 <__aeabi_dsub+0x3d8>
    581e:	4301      	orrs	r1, r0
    5820:	1e48      	subs	r0, r1, #1
    5822:	4181      	sbcs	r1, r0
    5824:	2200      	movs	r2, #0
    5826:	b2c9      	uxtb	r1, r1
    5828:	1949      	adds	r1, r1, r5
    582a:	19d2      	adds	r2, r2, r7
    582c:	42a9      	cmp	r1, r5
    582e:	41bf      	sbcs	r7, r7
    5830:	000d      	movs	r5, r1
    5832:	427f      	negs	r7, r7
    5834:	18bf      	adds	r7, r7, r2
    5836:	023a      	lsls	r2, r7, #8
    5838:	d400      	bmi.n	583c <__aeabi_dsub+0x1e4>
    583a:	e142      	b.n	5ac2 <__aeabi_dsub+0x46a>
    583c:	4a5f      	ldr	r2, [pc, #380]	; (59bc <__aeabi_dsub+0x364>)
    583e:	3401      	adds	r4, #1
    5840:	4294      	cmp	r4, r2
    5842:	d100      	bne.n	5846 <__aeabi_dsub+0x1ee>
    5844:	e14e      	b.n	5ae4 <__aeabi_dsub+0x48c>
    5846:	2001      	movs	r0, #1
    5848:	4a5d      	ldr	r2, [pc, #372]	; (59c0 <__aeabi_dsub+0x368>)
    584a:	0869      	lsrs	r1, r5, #1
    584c:	403a      	ands	r2, r7
    584e:	4028      	ands	r0, r5
    5850:	4308      	orrs	r0, r1
    5852:	07d5      	lsls	r5, r2, #31
    5854:	4305      	orrs	r5, r0
    5856:	0857      	lsrs	r7, r2, #1
    5858:	469a      	mov	sl, r3
    585a:	e729      	b.n	56b0 <__aeabi_dsub+0x58>
    585c:	0006      	movs	r6, r0
    585e:	430e      	orrs	r6, r1
    5860:	d000      	beq.n	5864 <__aeabi_dsub+0x20c>
    5862:	e717      	b.n	5694 <__aeabi_dsub+0x3c>
    5864:	e714      	b.n	5690 <__aeabi_dsub+0x38>
    5866:	0029      	movs	r1, r5
    5868:	4311      	orrs	r1, r2
    586a:	d100      	bne.n	586e <__aeabi_dsub+0x216>
    586c:	e1f9      	b.n	5c62 <__aeabi_dsub+0x60a>
    586e:	2180      	movs	r1, #128	; 0x80
    5870:	0309      	lsls	r1, r1, #12
    5872:	430a      	orrs	r2, r1
    5874:	0312      	lsls	r2, r2, #12
    5876:	0b12      	lsrs	r2, r2, #12
    5878:	e73b      	b.n	56f2 <__aeabi_dsub+0x9a>
    587a:	2301      	movs	r3, #1
    587c:	425b      	negs	r3, r3
    587e:	4698      	mov	r8, r3
    5880:	44c4      	add	ip, r8
    5882:	4663      	mov	r3, ip
    5884:	2b00      	cmp	r3, #0
    5886:	d172      	bne.n	596e <__aeabi_dsub+0x316>
    5888:	1a69      	subs	r1, r5, r1
    588a:	428d      	cmp	r5, r1
    588c:	419b      	sbcs	r3, r3
    588e:	1a3f      	subs	r7, r7, r0
    5890:	425b      	negs	r3, r3
    5892:	1aff      	subs	r7, r7, r3
    5894:	000d      	movs	r5, r1
    5896:	e768      	b.n	576a <__aeabi_dsub+0x112>
    5898:	0002      	movs	r2, r0
    589a:	430a      	orrs	r2, r1
    589c:	d100      	bne.n	58a0 <__aeabi_dsub+0x248>
    589e:	e707      	b.n	56b0 <__aeabi_dsub+0x58>
    58a0:	2201      	movs	r2, #1
    58a2:	4252      	negs	r2, r2
    58a4:	4690      	mov	r8, r2
    58a6:	44c4      	add	ip, r8
    58a8:	4662      	mov	r2, ip
    58aa:	2a00      	cmp	r2, #0
    58ac:	d000      	beq.n	58b0 <__aeabi_dsub+0x258>
    58ae:	e0e6      	b.n	5a7e <__aeabi_dsub+0x426>
    58b0:	1869      	adds	r1, r5, r1
    58b2:	42a9      	cmp	r1, r5
    58b4:	41b6      	sbcs	r6, r6
    58b6:	183f      	adds	r7, r7, r0
    58b8:	4276      	negs	r6, r6
    58ba:	19f7      	adds	r7, r6, r7
    58bc:	000d      	movs	r5, r1
    58be:	e7ba      	b.n	5836 <__aeabi_dsub+0x1de>
    58c0:	2e00      	cmp	r6, #0
    58c2:	d000      	beq.n	58c6 <__aeabi_dsub+0x26e>
    58c4:	e080      	b.n	59c8 <__aeabi_dsub+0x370>
    58c6:	1c62      	adds	r2, r4, #1
    58c8:	0552      	lsls	r2, r2, #21
    58ca:	0d52      	lsrs	r2, r2, #21
    58cc:	2a01      	cmp	r2, #1
    58ce:	dc00      	bgt.n	58d2 <__aeabi_dsub+0x27a>
    58d0:	e0f9      	b.n	5ac6 <__aeabi_dsub+0x46e>
    58d2:	1a6a      	subs	r2, r5, r1
    58d4:	4691      	mov	r9, r2
    58d6:	454d      	cmp	r5, r9
    58d8:	41b6      	sbcs	r6, r6
    58da:	1a3a      	subs	r2, r7, r0
    58dc:	4276      	negs	r6, r6
    58de:	1b92      	subs	r2, r2, r6
    58e0:	4690      	mov	r8, r2
    58e2:	0212      	lsls	r2, r2, #8
    58e4:	d400      	bmi.n	58e8 <__aeabi_dsub+0x290>
    58e6:	e099      	b.n	5a1c <__aeabi_dsub+0x3c4>
    58e8:	1b4d      	subs	r5, r1, r5
    58ea:	42a9      	cmp	r1, r5
    58ec:	4189      	sbcs	r1, r1
    58ee:	1bc7      	subs	r7, r0, r7
    58f0:	4249      	negs	r1, r1
    58f2:	1a7a      	subs	r2, r7, r1
    58f4:	4690      	mov	r8, r2
    58f6:	469a      	mov	sl, r3
    58f8:	e73c      	b.n	5774 <__aeabi_dsub+0x11c>
    58fa:	4652      	mov	r2, sl
    58fc:	2301      	movs	r3, #1
    58fe:	2500      	movs	r5, #0
    5900:	4013      	ands	r3, r2
    5902:	2200      	movs	r2, #0
    5904:	e6f5      	b.n	56f2 <__aeabi_dsub+0x9a>
    5906:	0028      	movs	r0, r5
    5908:	f000 fa68 	bl	5ddc <__clzsi2>
    590c:	3020      	adds	r0, #32
    590e:	0003      	movs	r3, r0
    5910:	3b08      	subs	r3, #8
    5912:	2b1f      	cmp	r3, #31
    5914:	dc00      	bgt.n	5918 <__aeabi_dsub+0x2c0>
    5916:	e739      	b.n	578c <__aeabi_dsub+0x134>
    5918:	002a      	movs	r2, r5
    591a:	3828      	subs	r0, #40	; 0x28
    591c:	4082      	lsls	r2, r0
    591e:	2500      	movs	r5, #0
    5920:	429c      	cmp	r4, r3
    5922:	dc00      	bgt.n	5926 <__aeabi_dsub+0x2ce>
    5924:	e73e      	b.n	57a4 <__aeabi_dsub+0x14c>
    5926:	4f26      	ldr	r7, [pc, #152]	; (59c0 <__aeabi_dsub+0x368>)
    5928:	1ae4      	subs	r4, r4, r3
    592a:	4017      	ands	r7, r2
    592c:	e6c0      	b.n	56b0 <__aeabi_dsub+0x58>
    592e:	4301      	orrs	r1, r0
    5930:	1e48      	subs	r0, r1, #1
    5932:	4181      	sbcs	r1, r0
    5934:	2200      	movs	r2, #0
    5936:	b2c9      	uxtb	r1, r1
    5938:	e710      	b.n	575c <__aeabi_dsub+0x104>
    593a:	2e00      	cmp	r6, #0
    593c:	d000      	beq.n	5940 <__aeabi_dsub+0x2e8>
    593e:	e0f1      	b.n	5b24 <__aeabi_dsub+0x4cc>
    5940:	1c62      	adds	r2, r4, #1
    5942:	4694      	mov	ip, r2
    5944:	0552      	lsls	r2, r2, #21
    5946:	0d52      	lsrs	r2, r2, #21
    5948:	2a01      	cmp	r2, #1
    594a:	dc00      	bgt.n	594e <__aeabi_dsub+0x2f6>
    594c:	e0a0      	b.n	5a90 <__aeabi_dsub+0x438>
    594e:	4a1b      	ldr	r2, [pc, #108]	; (59bc <__aeabi_dsub+0x364>)
    5950:	4594      	cmp	ip, r2
    5952:	d100      	bne.n	5956 <__aeabi_dsub+0x2fe>
    5954:	e0c5      	b.n	5ae2 <__aeabi_dsub+0x48a>
    5956:	1869      	adds	r1, r5, r1
    5958:	42a9      	cmp	r1, r5
    595a:	4192      	sbcs	r2, r2
    595c:	183f      	adds	r7, r7, r0
    595e:	4252      	negs	r2, r2
    5960:	19d2      	adds	r2, r2, r7
    5962:	0849      	lsrs	r1, r1, #1
    5964:	07d5      	lsls	r5, r2, #31
    5966:	430d      	orrs	r5, r1
    5968:	0857      	lsrs	r7, r2, #1
    596a:	4664      	mov	r4, ip
    596c:	e6a0      	b.n	56b0 <__aeabi_dsub+0x58>
    596e:	4b13      	ldr	r3, [pc, #76]	; (59bc <__aeabi_dsub+0x364>)
    5970:	429c      	cmp	r4, r3
    5972:	d000      	beq.n	5976 <__aeabi_dsub+0x31e>
    5974:	e6d9      	b.n	572a <__aeabi_dsub+0xd2>
    5976:	e69b      	b.n	56b0 <__aeabi_dsub+0x58>
    5978:	0011      	movs	r1, r2
    597a:	3c1f      	subs	r4, #31
    597c:	40e1      	lsrs	r1, r4
    597e:	000c      	movs	r4, r1
    5980:	2b20      	cmp	r3, #32
    5982:	d100      	bne.n	5986 <__aeabi_dsub+0x32e>
    5984:	e080      	b.n	5a88 <__aeabi_dsub+0x430>
    5986:	2140      	movs	r1, #64	; 0x40
    5988:	1acb      	subs	r3, r1, r3
    598a:	409a      	lsls	r2, r3
    598c:	4315      	orrs	r5, r2
    598e:	1e6a      	subs	r2, r5, #1
    5990:	4195      	sbcs	r5, r2
    5992:	2700      	movs	r7, #0
    5994:	4325      	orrs	r5, r4
    5996:	2400      	movs	r4, #0
    5998:	e71f      	b.n	57da <__aeabi_dsub+0x182>
    599a:	4663      	mov	r3, ip
    599c:	0002      	movs	r2, r0
    599e:	3b20      	subs	r3, #32
    59a0:	40da      	lsrs	r2, r3
    59a2:	4663      	mov	r3, ip
    59a4:	2b20      	cmp	r3, #32
    59a6:	d071      	beq.n	5a8c <__aeabi_dsub+0x434>
    59a8:	2340      	movs	r3, #64	; 0x40
    59aa:	4666      	mov	r6, ip
    59ac:	1b9b      	subs	r3, r3, r6
    59ae:	4098      	lsls	r0, r3
    59b0:	4301      	orrs	r1, r0
    59b2:	1e48      	subs	r0, r1, #1
    59b4:	4181      	sbcs	r1, r0
    59b6:	4311      	orrs	r1, r2
    59b8:	2200      	movs	r2, #0
    59ba:	e6cf      	b.n	575c <__aeabi_dsub+0x104>
    59bc:	000007ff 	.word	0x000007ff
    59c0:	ff7fffff 	.word	0xff7fffff
    59c4:	800fffff 	.word	0x800fffff
    59c8:	2c00      	cmp	r4, #0
    59ca:	d048      	beq.n	5a5e <__aeabi_dsub+0x406>
    59cc:	4cca      	ldr	r4, [pc, #808]	; (5cf8 <__aeabi_dsub+0x6a0>)
    59ce:	42a2      	cmp	r2, r4
    59d0:	d100      	bne.n	59d4 <__aeabi_dsub+0x37c>
    59d2:	e0a2      	b.n	5b1a <__aeabi_dsub+0x4c2>
    59d4:	4274      	negs	r4, r6
    59d6:	46a1      	mov	r9, r4
    59d8:	2480      	movs	r4, #128	; 0x80
    59da:	0424      	lsls	r4, r4, #16
    59dc:	4327      	orrs	r7, r4
    59de:	464c      	mov	r4, r9
    59e0:	2c38      	cmp	r4, #56	; 0x38
    59e2:	dd00      	ble.n	59e6 <__aeabi_dsub+0x38e>
    59e4:	e0db      	b.n	5b9e <__aeabi_dsub+0x546>
    59e6:	2c1f      	cmp	r4, #31
    59e8:	dd00      	ble.n	59ec <__aeabi_dsub+0x394>
    59ea:	e144      	b.n	5c76 <__aeabi_dsub+0x61e>
    59ec:	464e      	mov	r6, r9
    59ee:	2420      	movs	r4, #32
    59f0:	1ba4      	subs	r4, r4, r6
    59f2:	003e      	movs	r6, r7
    59f4:	40a6      	lsls	r6, r4
    59f6:	46a2      	mov	sl, r4
    59f8:	46b0      	mov	r8, r6
    59fa:	464c      	mov	r4, r9
    59fc:	002e      	movs	r6, r5
    59fe:	40e6      	lsrs	r6, r4
    5a00:	46b4      	mov	ip, r6
    5a02:	4646      	mov	r6, r8
    5a04:	4664      	mov	r4, ip
    5a06:	4326      	orrs	r6, r4
    5a08:	4654      	mov	r4, sl
    5a0a:	40a5      	lsls	r5, r4
    5a0c:	1e6c      	subs	r4, r5, #1
    5a0e:	41a5      	sbcs	r5, r4
    5a10:	0034      	movs	r4, r6
    5a12:	432c      	orrs	r4, r5
    5a14:	464d      	mov	r5, r9
    5a16:	40ef      	lsrs	r7, r5
    5a18:	1b0d      	subs	r5, r1, r4
    5a1a:	e028      	b.n	5a6e <__aeabi_dsub+0x416>
    5a1c:	464a      	mov	r2, r9
    5a1e:	4643      	mov	r3, r8
    5a20:	464d      	mov	r5, r9
    5a22:	431a      	orrs	r2, r3
    5a24:	d000      	beq.n	5a28 <__aeabi_dsub+0x3d0>
    5a26:	e6a5      	b.n	5774 <__aeabi_dsub+0x11c>
    5a28:	2300      	movs	r3, #0
    5a2a:	2400      	movs	r4, #0
    5a2c:	2500      	movs	r5, #0
    5a2e:	e6de      	b.n	57ee <__aeabi_dsub+0x196>
    5a30:	2a1f      	cmp	r2, #31
    5a32:	dc5a      	bgt.n	5aea <__aeabi_dsub+0x492>
    5a34:	4666      	mov	r6, ip
    5a36:	2220      	movs	r2, #32
    5a38:	1b92      	subs	r2, r2, r6
    5a3a:	0006      	movs	r6, r0
    5a3c:	4096      	lsls	r6, r2
    5a3e:	4691      	mov	r9, r2
    5a40:	46b0      	mov	r8, r6
    5a42:	4662      	mov	r2, ip
    5a44:	000e      	movs	r6, r1
    5a46:	40d6      	lsrs	r6, r2
    5a48:	4642      	mov	r2, r8
    5a4a:	4316      	orrs	r6, r2
    5a4c:	464a      	mov	r2, r9
    5a4e:	4091      	lsls	r1, r2
    5a50:	1e4a      	subs	r2, r1, #1
    5a52:	4191      	sbcs	r1, r2
    5a54:	0002      	movs	r2, r0
    5a56:	4660      	mov	r0, ip
    5a58:	4331      	orrs	r1, r6
    5a5a:	40c2      	lsrs	r2, r0
    5a5c:	e6e4      	b.n	5828 <__aeabi_dsub+0x1d0>
    5a5e:	003c      	movs	r4, r7
    5a60:	432c      	orrs	r4, r5
    5a62:	d05a      	beq.n	5b1a <__aeabi_dsub+0x4c2>
    5a64:	43f4      	mvns	r4, r6
    5a66:	46a1      	mov	r9, r4
    5a68:	2c00      	cmp	r4, #0
    5a6a:	d152      	bne.n	5b12 <__aeabi_dsub+0x4ba>
    5a6c:	1b4d      	subs	r5, r1, r5
    5a6e:	42a9      	cmp	r1, r5
    5a70:	4189      	sbcs	r1, r1
    5a72:	1bc7      	subs	r7, r0, r7
    5a74:	4249      	negs	r1, r1
    5a76:	1a7f      	subs	r7, r7, r1
    5a78:	0014      	movs	r4, r2
    5a7a:	469a      	mov	sl, r3
    5a7c:	e675      	b.n	576a <__aeabi_dsub+0x112>
    5a7e:	4a9e      	ldr	r2, [pc, #632]	; (5cf8 <__aeabi_dsub+0x6a0>)
    5a80:	4294      	cmp	r4, r2
    5a82:	d000      	beq.n	5a86 <__aeabi_dsub+0x42e>
    5a84:	e6c7      	b.n	5816 <__aeabi_dsub+0x1be>
    5a86:	e613      	b.n	56b0 <__aeabi_dsub+0x58>
    5a88:	2200      	movs	r2, #0
    5a8a:	e77f      	b.n	598c <__aeabi_dsub+0x334>
    5a8c:	2000      	movs	r0, #0
    5a8e:	e78f      	b.n	59b0 <__aeabi_dsub+0x358>
    5a90:	2c00      	cmp	r4, #0
    5a92:	d000      	beq.n	5a96 <__aeabi_dsub+0x43e>
    5a94:	e0c8      	b.n	5c28 <__aeabi_dsub+0x5d0>
    5a96:	003b      	movs	r3, r7
    5a98:	432b      	orrs	r3, r5
    5a9a:	d100      	bne.n	5a9e <__aeabi_dsub+0x446>
    5a9c:	e10f      	b.n	5cbe <__aeabi_dsub+0x666>
    5a9e:	0003      	movs	r3, r0
    5aa0:	430b      	orrs	r3, r1
    5aa2:	d100      	bne.n	5aa6 <__aeabi_dsub+0x44e>
    5aa4:	e604      	b.n	56b0 <__aeabi_dsub+0x58>
    5aa6:	1869      	adds	r1, r5, r1
    5aa8:	42a9      	cmp	r1, r5
    5aaa:	419b      	sbcs	r3, r3
    5aac:	183f      	adds	r7, r7, r0
    5aae:	425b      	negs	r3, r3
    5ab0:	19df      	adds	r7, r3, r7
    5ab2:	023b      	lsls	r3, r7, #8
    5ab4:	d400      	bmi.n	5ab8 <__aeabi_dsub+0x460>
    5ab6:	e11a      	b.n	5cee <__aeabi_dsub+0x696>
    5ab8:	4b90      	ldr	r3, [pc, #576]	; (5cfc <__aeabi_dsub+0x6a4>)
    5aba:	000d      	movs	r5, r1
    5abc:	401f      	ands	r7, r3
    5abe:	4664      	mov	r4, ip
    5ac0:	e5f6      	b.n	56b0 <__aeabi_dsub+0x58>
    5ac2:	469a      	mov	sl, r3
    5ac4:	e689      	b.n	57da <__aeabi_dsub+0x182>
    5ac6:	003a      	movs	r2, r7
    5ac8:	432a      	orrs	r2, r5
    5aca:	2c00      	cmp	r4, #0
    5acc:	d15c      	bne.n	5b88 <__aeabi_dsub+0x530>
    5ace:	2a00      	cmp	r2, #0
    5ad0:	d175      	bne.n	5bbe <__aeabi_dsub+0x566>
    5ad2:	0002      	movs	r2, r0
    5ad4:	430a      	orrs	r2, r1
    5ad6:	d100      	bne.n	5ada <__aeabi_dsub+0x482>
    5ad8:	e0ca      	b.n	5c70 <__aeabi_dsub+0x618>
    5ada:	0007      	movs	r7, r0
    5adc:	000d      	movs	r5, r1
    5ade:	469a      	mov	sl, r3
    5ae0:	e5e6      	b.n	56b0 <__aeabi_dsub+0x58>
    5ae2:	4664      	mov	r4, ip
    5ae4:	2200      	movs	r2, #0
    5ae6:	2500      	movs	r5, #0
    5ae8:	e681      	b.n	57ee <__aeabi_dsub+0x196>
    5aea:	4662      	mov	r2, ip
    5aec:	0006      	movs	r6, r0
    5aee:	3a20      	subs	r2, #32
    5af0:	40d6      	lsrs	r6, r2
    5af2:	4662      	mov	r2, ip
    5af4:	46b0      	mov	r8, r6
    5af6:	2a20      	cmp	r2, #32
    5af8:	d100      	bne.n	5afc <__aeabi_dsub+0x4a4>
    5afa:	e0b7      	b.n	5c6c <__aeabi_dsub+0x614>
    5afc:	2240      	movs	r2, #64	; 0x40
    5afe:	4666      	mov	r6, ip
    5b00:	1b92      	subs	r2, r2, r6
    5b02:	4090      	lsls	r0, r2
    5b04:	4301      	orrs	r1, r0
    5b06:	4642      	mov	r2, r8
    5b08:	1e48      	subs	r0, r1, #1
    5b0a:	4181      	sbcs	r1, r0
    5b0c:	4311      	orrs	r1, r2
    5b0e:	2200      	movs	r2, #0
    5b10:	e68a      	b.n	5828 <__aeabi_dsub+0x1d0>
    5b12:	4c79      	ldr	r4, [pc, #484]	; (5cf8 <__aeabi_dsub+0x6a0>)
    5b14:	42a2      	cmp	r2, r4
    5b16:	d000      	beq.n	5b1a <__aeabi_dsub+0x4c2>
    5b18:	e761      	b.n	59de <__aeabi_dsub+0x386>
    5b1a:	0007      	movs	r7, r0
    5b1c:	000d      	movs	r5, r1
    5b1e:	0014      	movs	r4, r2
    5b20:	469a      	mov	sl, r3
    5b22:	e5c5      	b.n	56b0 <__aeabi_dsub+0x58>
    5b24:	2c00      	cmp	r4, #0
    5b26:	d141      	bne.n	5bac <__aeabi_dsub+0x554>
    5b28:	003c      	movs	r4, r7
    5b2a:	432c      	orrs	r4, r5
    5b2c:	d078      	beq.n	5c20 <__aeabi_dsub+0x5c8>
    5b2e:	43f4      	mvns	r4, r6
    5b30:	46a1      	mov	r9, r4
    5b32:	2c00      	cmp	r4, #0
    5b34:	d020      	beq.n	5b78 <__aeabi_dsub+0x520>
    5b36:	4c70      	ldr	r4, [pc, #448]	; (5cf8 <__aeabi_dsub+0x6a0>)
    5b38:	42a2      	cmp	r2, r4
    5b3a:	d071      	beq.n	5c20 <__aeabi_dsub+0x5c8>
    5b3c:	464c      	mov	r4, r9
    5b3e:	2c38      	cmp	r4, #56	; 0x38
    5b40:	dd00      	ble.n	5b44 <__aeabi_dsub+0x4ec>
    5b42:	e0b2      	b.n	5caa <__aeabi_dsub+0x652>
    5b44:	2c1f      	cmp	r4, #31
    5b46:	dd00      	ble.n	5b4a <__aeabi_dsub+0x4f2>
    5b48:	e0bc      	b.n	5cc4 <__aeabi_dsub+0x66c>
    5b4a:	2620      	movs	r6, #32
    5b4c:	1b34      	subs	r4, r6, r4
    5b4e:	46a2      	mov	sl, r4
    5b50:	003c      	movs	r4, r7
    5b52:	4656      	mov	r6, sl
    5b54:	40b4      	lsls	r4, r6
    5b56:	464e      	mov	r6, r9
    5b58:	46a0      	mov	r8, r4
    5b5a:	002c      	movs	r4, r5
    5b5c:	40f4      	lsrs	r4, r6
    5b5e:	46a4      	mov	ip, r4
    5b60:	4644      	mov	r4, r8
    5b62:	4666      	mov	r6, ip
    5b64:	4334      	orrs	r4, r6
    5b66:	46a4      	mov	ip, r4
    5b68:	4654      	mov	r4, sl
    5b6a:	40a5      	lsls	r5, r4
    5b6c:	4664      	mov	r4, ip
    5b6e:	1e6e      	subs	r6, r5, #1
    5b70:	41b5      	sbcs	r5, r6
    5b72:	4325      	orrs	r5, r4
    5b74:	464c      	mov	r4, r9
    5b76:	40e7      	lsrs	r7, r4
    5b78:	186d      	adds	r5, r5, r1
    5b7a:	428d      	cmp	r5, r1
    5b7c:	4189      	sbcs	r1, r1
    5b7e:	183f      	adds	r7, r7, r0
    5b80:	4249      	negs	r1, r1
    5b82:	19cf      	adds	r7, r1, r7
    5b84:	0014      	movs	r4, r2
    5b86:	e656      	b.n	5836 <__aeabi_dsub+0x1de>
    5b88:	2a00      	cmp	r2, #0
    5b8a:	d12f      	bne.n	5bec <__aeabi_dsub+0x594>
    5b8c:	0002      	movs	r2, r0
    5b8e:	430a      	orrs	r2, r1
    5b90:	d100      	bne.n	5b94 <__aeabi_dsub+0x53c>
    5b92:	e084      	b.n	5c9e <__aeabi_dsub+0x646>
    5b94:	0007      	movs	r7, r0
    5b96:	000d      	movs	r5, r1
    5b98:	469a      	mov	sl, r3
    5b9a:	4c57      	ldr	r4, [pc, #348]	; (5cf8 <__aeabi_dsub+0x6a0>)
    5b9c:	e588      	b.n	56b0 <__aeabi_dsub+0x58>
    5b9e:	433d      	orrs	r5, r7
    5ba0:	1e6f      	subs	r7, r5, #1
    5ba2:	41bd      	sbcs	r5, r7
    5ba4:	b2ec      	uxtb	r4, r5
    5ba6:	2700      	movs	r7, #0
    5ba8:	1b0d      	subs	r5, r1, r4
    5baa:	e760      	b.n	5a6e <__aeabi_dsub+0x416>
    5bac:	4c52      	ldr	r4, [pc, #328]	; (5cf8 <__aeabi_dsub+0x6a0>)
    5bae:	42a2      	cmp	r2, r4
    5bb0:	d036      	beq.n	5c20 <__aeabi_dsub+0x5c8>
    5bb2:	4274      	negs	r4, r6
    5bb4:	2680      	movs	r6, #128	; 0x80
    5bb6:	0436      	lsls	r6, r6, #16
    5bb8:	46a1      	mov	r9, r4
    5bba:	4337      	orrs	r7, r6
    5bbc:	e7be      	b.n	5b3c <__aeabi_dsub+0x4e4>
    5bbe:	0002      	movs	r2, r0
    5bc0:	430a      	orrs	r2, r1
    5bc2:	d100      	bne.n	5bc6 <__aeabi_dsub+0x56e>
    5bc4:	e574      	b.n	56b0 <__aeabi_dsub+0x58>
    5bc6:	1a6a      	subs	r2, r5, r1
    5bc8:	4690      	mov	r8, r2
    5bca:	4545      	cmp	r5, r8
    5bcc:	41b6      	sbcs	r6, r6
    5bce:	1a3a      	subs	r2, r7, r0
    5bd0:	4276      	negs	r6, r6
    5bd2:	1b92      	subs	r2, r2, r6
    5bd4:	4694      	mov	ip, r2
    5bd6:	0212      	lsls	r2, r2, #8
    5bd8:	d400      	bmi.n	5bdc <__aeabi_dsub+0x584>
    5bda:	e5f7      	b.n	57cc <__aeabi_dsub+0x174>
    5bdc:	1b4d      	subs	r5, r1, r5
    5bde:	42a9      	cmp	r1, r5
    5be0:	4189      	sbcs	r1, r1
    5be2:	1bc7      	subs	r7, r0, r7
    5be4:	4249      	negs	r1, r1
    5be6:	1a7f      	subs	r7, r7, r1
    5be8:	469a      	mov	sl, r3
    5bea:	e561      	b.n	56b0 <__aeabi_dsub+0x58>
    5bec:	0002      	movs	r2, r0
    5bee:	430a      	orrs	r2, r1
    5bf0:	d03a      	beq.n	5c68 <__aeabi_dsub+0x610>
    5bf2:	08ed      	lsrs	r5, r5, #3
    5bf4:	077c      	lsls	r4, r7, #29
    5bf6:	432c      	orrs	r4, r5
    5bf8:	2580      	movs	r5, #128	; 0x80
    5bfa:	08fa      	lsrs	r2, r7, #3
    5bfc:	032d      	lsls	r5, r5, #12
    5bfe:	422a      	tst	r2, r5
    5c00:	d008      	beq.n	5c14 <__aeabi_dsub+0x5bc>
    5c02:	08c7      	lsrs	r7, r0, #3
    5c04:	422f      	tst	r7, r5
    5c06:	d105      	bne.n	5c14 <__aeabi_dsub+0x5bc>
    5c08:	0745      	lsls	r5, r0, #29
    5c0a:	002c      	movs	r4, r5
    5c0c:	003a      	movs	r2, r7
    5c0e:	469a      	mov	sl, r3
    5c10:	08c9      	lsrs	r1, r1, #3
    5c12:	430c      	orrs	r4, r1
    5c14:	0f67      	lsrs	r7, r4, #29
    5c16:	00d2      	lsls	r2, r2, #3
    5c18:	00e5      	lsls	r5, r4, #3
    5c1a:	4317      	orrs	r7, r2
    5c1c:	4c36      	ldr	r4, [pc, #216]	; (5cf8 <__aeabi_dsub+0x6a0>)
    5c1e:	e547      	b.n	56b0 <__aeabi_dsub+0x58>
    5c20:	0007      	movs	r7, r0
    5c22:	000d      	movs	r5, r1
    5c24:	0014      	movs	r4, r2
    5c26:	e543      	b.n	56b0 <__aeabi_dsub+0x58>
    5c28:	003a      	movs	r2, r7
    5c2a:	432a      	orrs	r2, r5
    5c2c:	d043      	beq.n	5cb6 <__aeabi_dsub+0x65e>
    5c2e:	0002      	movs	r2, r0
    5c30:	430a      	orrs	r2, r1
    5c32:	d019      	beq.n	5c68 <__aeabi_dsub+0x610>
    5c34:	08ed      	lsrs	r5, r5, #3
    5c36:	077c      	lsls	r4, r7, #29
    5c38:	432c      	orrs	r4, r5
    5c3a:	2580      	movs	r5, #128	; 0x80
    5c3c:	08fa      	lsrs	r2, r7, #3
    5c3e:	032d      	lsls	r5, r5, #12
    5c40:	422a      	tst	r2, r5
    5c42:	d007      	beq.n	5c54 <__aeabi_dsub+0x5fc>
    5c44:	08c6      	lsrs	r6, r0, #3
    5c46:	422e      	tst	r6, r5
    5c48:	d104      	bne.n	5c54 <__aeabi_dsub+0x5fc>
    5c4a:	0747      	lsls	r7, r0, #29
    5c4c:	003c      	movs	r4, r7
    5c4e:	0032      	movs	r2, r6
    5c50:	08c9      	lsrs	r1, r1, #3
    5c52:	430c      	orrs	r4, r1
    5c54:	00d7      	lsls	r7, r2, #3
    5c56:	0f62      	lsrs	r2, r4, #29
    5c58:	00e5      	lsls	r5, r4, #3
    5c5a:	4317      	orrs	r7, r2
    5c5c:	469a      	mov	sl, r3
    5c5e:	4c26      	ldr	r4, [pc, #152]	; (5cf8 <__aeabi_dsub+0x6a0>)
    5c60:	e526      	b.n	56b0 <__aeabi_dsub+0x58>
    5c62:	2200      	movs	r2, #0
    5c64:	2500      	movs	r5, #0
    5c66:	e544      	b.n	56f2 <__aeabi_dsub+0x9a>
    5c68:	4c23      	ldr	r4, [pc, #140]	; (5cf8 <__aeabi_dsub+0x6a0>)
    5c6a:	e521      	b.n	56b0 <__aeabi_dsub+0x58>
    5c6c:	2000      	movs	r0, #0
    5c6e:	e749      	b.n	5b04 <__aeabi_dsub+0x4ac>
    5c70:	2300      	movs	r3, #0
    5c72:	2500      	movs	r5, #0
    5c74:	e5bb      	b.n	57ee <__aeabi_dsub+0x196>
    5c76:	464c      	mov	r4, r9
    5c78:	003e      	movs	r6, r7
    5c7a:	3c20      	subs	r4, #32
    5c7c:	40e6      	lsrs	r6, r4
    5c7e:	464c      	mov	r4, r9
    5c80:	46b4      	mov	ip, r6
    5c82:	2c20      	cmp	r4, #32
    5c84:	d031      	beq.n	5cea <__aeabi_dsub+0x692>
    5c86:	2440      	movs	r4, #64	; 0x40
    5c88:	464e      	mov	r6, r9
    5c8a:	1ba6      	subs	r6, r4, r6
    5c8c:	40b7      	lsls	r7, r6
    5c8e:	433d      	orrs	r5, r7
    5c90:	1e6c      	subs	r4, r5, #1
    5c92:	41a5      	sbcs	r5, r4
    5c94:	4664      	mov	r4, ip
    5c96:	432c      	orrs	r4, r5
    5c98:	2700      	movs	r7, #0
    5c9a:	1b0d      	subs	r5, r1, r4
    5c9c:	e6e7      	b.n	5a6e <__aeabi_dsub+0x416>
    5c9e:	2280      	movs	r2, #128	; 0x80
    5ca0:	2300      	movs	r3, #0
    5ca2:	0312      	lsls	r2, r2, #12
    5ca4:	4c14      	ldr	r4, [pc, #80]	; (5cf8 <__aeabi_dsub+0x6a0>)
    5ca6:	2500      	movs	r5, #0
    5ca8:	e5a1      	b.n	57ee <__aeabi_dsub+0x196>
    5caa:	433d      	orrs	r5, r7
    5cac:	1e6f      	subs	r7, r5, #1
    5cae:	41bd      	sbcs	r5, r7
    5cb0:	2700      	movs	r7, #0
    5cb2:	b2ed      	uxtb	r5, r5
    5cb4:	e760      	b.n	5b78 <__aeabi_dsub+0x520>
    5cb6:	0007      	movs	r7, r0
    5cb8:	000d      	movs	r5, r1
    5cba:	4c0f      	ldr	r4, [pc, #60]	; (5cf8 <__aeabi_dsub+0x6a0>)
    5cbc:	e4f8      	b.n	56b0 <__aeabi_dsub+0x58>
    5cbe:	0007      	movs	r7, r0
    5cc0:	000d      	movs	r5, r1
    5cc2:	e4f5      	b.n	56b0 <__aeabi_dsub+0x58>
    5cc4:	464e      	mov	r6, r9
    5cc6:	003c      	movs	r4, r7
    5cc8:	3e20      	subs	r6, #32
    5cca:	40f4      	lsrs	r4, r6
    5ccc:	46a0      	mov	r8, r4
    5cce:	464c      	mov	r4, r9
    5cd0:	2c20      	cmp	r4, #32
    5cd2:	d00e      	beq.n	5cf2 <__aeabi_dsub+0x69a>
    5cd4:	2440      	movs	r4, #64	; 0x40
    5cd6:	464e      	mov	r6, r9
    5cd8:	1ba4      	subs	r4, r4, r6
    5cda:	40a7      	lsls	r7, r4
    5cdc:	433d      	orrs	r5, r7
    5cde:	1e6f      	subs	r7, r5, #1
    5ce0:	41bd      	sbcs	r5, r7
    5ce2:	4644      	mov	r4, r8
    5ce4:	2700      	movs	r7, #0
    5ce6:	4325      	orrs	r5, r4
    5ce8:	e746      	b.n	5b78 <__aeabi_dsub+0x520>
    5cea:	2700      	movs	r7, #0
    5cec:	e7cf      	b.n	5c8e <__aeabi_dsub+0x636>
    5cee:	000d      	movs	r5, r1
    5cf0:	e573      	b.n	57da <__aeabi_dsub+0x182>
    5cf2:	2700      	movs	r7, #0
    5cf4:	e7f2      	b.n	5cdc <__aeabi_dsub+0x684>
    5cf6:	46c0      	nop			; (mov r8, r8)
    5cf8:	000007ff 	.word	0x000007ff
    5cfc:	ff7fffff 	.word	0xff7fffff

00005d00 <__aeabi_d2iz>:
    5d00:	030b      	lsls	r3, r1, #12
    5d02:	b530      	push	{r4, r5, lr}
    5d04:	4d13      	ldr	r5, [pc, #76]	; (5d54 <__aeabi_d2iz+0x54>)
    5d06:	0b1a      	lsrs	r2, r3, #12
    5d08:	004b      	lsls	r3, r1, #1
    5d0a:	0d5b      	lsrs	r3, r3, #21
    5d0c:	0fc9      	lsrs	r1, r1, #31
    5d0e:	2400      	movs	r4, #0
    5d10:	42ab      	cmp	r3, r5
    5d12:	dd11      	ble.n	5d38 <__aeabi_d2iz+0x38>
    5d14:	4c10      	ldr	r4, [pc, #64]	; (5d58 <__aeabi_d2iz+0x58>)
    5d16:	42a3      	cmp	r3, r4
    5d18:	dc10      	bgt.n	5d3c <__aeabi_d2iz+0x3c>
    5d1a:	2480      	movs	r4, #128	; 0x80
    5d1c:	0364      	lsls	r4, r4, #13
    5d1e:	4322      	orrs	r2, r4
    5d20:	4c0e      	ldr	r4, [pc, #56]	; (5d5c <__aeabi_d2iz+0x5c>)
    5d22:	1ae4      	subs	r4, r4, r3
    5d24:	2c1f      	cmp	r4, #31
    5d26:	dd0c      	ble.n	5d42 <__aeabi_d2iz+0x42>
    5d28:	480d      	ldr	r0, [pc, #52]	; (5d60 <__aeabi_d2iz+0x60>)
    5d2a:	1ac3      	subs	r3, r0, r3
    5d2c:	40da      	lsrs	r2, r3
    5d2e:	0013      	movs	r3, r2
    5d30:	425c      	negs	r4, r3
    5d32:	2900      	cmp	r1, #0
    5d34:	d100      	bne.n	5d38 <__aeabi_d2iz+0x38>
    5d36:	001c      	movs	r4, r3
    5d38:	0020      	movs	r0, r4
    5d3a:	bd30      	pop	{r4, r5, pc}
    5d3c:	4b09      	ldr	r3, [pc, #36]	; (5d64 <__aeabi_d2iz+0x64>)
    5d3e:	18cc      	adds	r4, r1, r3
    5d40:	e7fa      	b.n	5d38 <__aeabi_d2iz+0x38>
    5d42:	40e0      	lsrs	r0, r4
    5d44:	4c08      	ldr	r4, [pc, #32]	; (5d68 <__aeabi_d2iz+0x68>)
    5d46:	46a4      	mov	ip, r4
    5d48:	4463      	add	r3, ip
    5d4a:	409a      	lsls	r2, r3
    5d4c:	0013      	movs	r3, r2
    5d4e:	4303      	orrs	r3, r0
    5d50:	e7ee      	b.n	5d30 <__aeabi_d2iz+0x30>
    5d52:	46c0      	nop			; (mov r8, r8)
    5d54:	000003fe 	.word	0x000003fe
    5d58:	0000041d 	.word	0x0000041d
    5d5c:	00000433 	.word	0x00000433
    5d60:	00000413 	.word	0x00000413
    5d64:	7fffffff 	.word	0x7fffffff
    5d68:	fffffbed 	.word	0xfffffbed

00005d6c <__aeabi_ui2d>:
    5d6c:	b570      	push	{r4, r5, r6, lr}
    5d6e:	1e05      	subs	r5, r0, #0
    5d70:	d028      	beq.n	5dc4 <__aeabi_ui2d+0x58>
    5d72:	f000 f833 	bl	5ddc <__clzsi2>
    5d76:	4b15      	ldr	r3, [pc, #84]	; (5dcc <__aeabi_ui2d+0x60>)
    5d78:	4a15      	ldr	r2, [pc, #84]	; (5dd0 <__aeabi_ui2d+0x64>)
    5d7a:	1a1b      	subs	r3, r3, r0
    5d7c:	1ad2      	subs	r2, r2, r3
    5d7e:	2a1f      	cmp	r2, #31
    5d80:	dd16      	ble.n	5db0 <__aeabi_ui2d+0x44>
    5d82:	002c      	movs	r4, r5
    5d84:	4a13      	ldr	r2, [pc, #76]	; (5dd4 <__aeabi_ui2d+0x68>)
    5d86:	2500      	movs	r5, #0
    5d88:	1ad2      	subs	r2, r2, r3
    5d8a:	4094      	lsls	r4, r2
    5d8c:	055a      	lsls	r2, r3, #21
    5d8e:	0324      	lsls	r4, r4, #12
    5d90:	0b24      	lsrs	r4, r4, #12
    5d92:	0d52      	lsrs	r2, r2, #21
    5d94:	2100      	movs	r1, #0
    5d96:	0324      	lsls	r4, r4, #12
    5d98:	0d0b      	lsrs	r3, r1, #20
    5d9a:	0b24      	lsrs	r4, r4, #12
    5d9c:	051b      	lsls	r3, r3, #20
    5d9e:	4323      	orrs	r3, r4
    5da0:	4c0d      	ldr	r4, [pc, #52]	; (5dd8 <__aeabi_ui2d+0x6c>)
    5da2:	0512      	lsls	r2, r2, #20
    5da4:	4023      	ands	r3, r4
    5da6:	4313      	orrs	r3, r2
    5da8:	005b      	lsls	r3, r3, #1
    5daa:	0028      	movs	r0, r5
    5dac:	0859      	lsrs	r1, r3, #1
    5dae:	bd70      	pop	{r4, r5, r6, pc}
    5db0:	210b      	movs	r1, #11
    5db2:	002c      	movs	r4, r5
    5db4:	1a08      	subs	r0, r1, r0
    5db6:	40c4      	lsrs	r4, r0
    5db8:	4095      	lsls	r5, r2
    5dba:	0324      	lsls	r4, r4, #12
    5dbc:	055a      	lsls	r2, r3, #21
    5dbe:	0b24      	lsrs	r4, r4, #12
    5dc0:	0d52      	lsrs	r2, r2, #21
    5dc2:	e7e7      	b.n	5d94 <__aeabi_ui2d+0x28>
    5dc4:	2200      	movs	r2, #0
    5dc6:	2400      	movs	r4, #0
    5dc8:	e7e4      	b.n	5d94 <__aeabi_ui2d+0x28>
    5dca:	46c0      	nop			; (mov r8, r8)
    5dcc:	0000041e 	.word	0x0000041e
    5dd0:	00000433 	.word	0x00000433
    5dd4:	00000413 	.word	0x00000413
    5dd8:	800fffff 	.word	0x800fffff

00005ddc <__clzsi2>:
    5ddc:	211c      	movs	r1, #28
    5dde:	2301      	movs	r3, #1
    5de0:	041b      	lsls	r3, r3, #16
    5de2:	4298      	cmp	r0, r3
    5de4:	d301      	bcc.n	5dea <__clzsi2+0xe>
    5de6:	0c00      	lsrs	r0, r0, #16
    5de8:	3910      	subs	r1, #16
    5dea:	0a1b      	lsrs	r3, r3, #8
    5dec:	4298      	cmp	r0, r3
    5dee:	d301      	bcc.n	5df4 <__clzsi2+0x18>
    5df0:	0a00      	lsrs	r0, r0, #8
    5df2:	3908      	subs	r1, #8
    5df4:	091b      	lsrs	r3, r3, #4
    5df6:	4298      	cmp	r0, r3
    5df8:	d301      	bcc.n	5dfe <__clzsi2+0x22>
    5dfa:	0900      	lsrs	r0, r0, #4
    5dfc:	3904      	subs	r1, #4
    5dfe:	a202      	add	r2, pc, #8	; (adr r2, 5e08 <__clzsi2+0x2c>)
    5e00:	5c10      	ldrb	r0, [r2, r0]
    5e02:	1840      	adds	r0, r0, r1
    5e04:	4770      	bx	lr
    5e06:	46c0      	nop			; (mov r8, r8)
    5e08:	02020304 	.word	0x02020304
    5e0c:	01010101 	.word	0x01010101
	...

00005e18 <__libc_init_array>:
    5e18:	4b0e      	ldr	r3, [pc, #56]	; (5e54 <__libc_init_array+0x3c>)
    5e1a:	b570      	push	{r4, r5, r6, lr}
    5e1c:	2500      	movs	r5, #0
    5e1e:	001e      	movs	r6, r3
    5e20:	4c0d      	ldr	r4, [pc, #52]	; (5e58 <__libc_init_array+0x40>)
    5e22:	1ae4      	subs	r4, r4, r3
    5e24:	10a4      	asrs	r4, r4, #2
    5e26:	42a5      	cmp	r5, r4
    5e28:	d004      	beq.n	5e34 <__libc_init_array+0x1c>
    5e2a:	00ab      	lsls	r3, r5, #2
    5e2c:	58f3      	ldr	r3, [r6, r3]
    5e2e:	4798      	blx	r3
    5e30:	3501      	adds	r5, #1
    5e32:	e7f8      	b.n	5e26 <__libc_init_array+0xe>
    5e34:	f000 fd58 	bl	68e8 <_init>
    5e38:	4b08      	ldr	r3, [pc, #32]	; (5e5c <__libc_init_array+0x44>)
    5e3a:	2500      	movs	r5, #0
    5e3c:	001e      	movs	r6, r3
    5e3e:	4c08      	ldr	r4, [pc, #32]	; (5e60 <__libc_init_array+0x48>)
    5e40:	1ae4      	subs	r4, r4, r3
    5e42:	10a4      	asrs	r4, r4, #2
    5e44:	42a5      	cmp	r5, r4
    5e46:	d004      	beq.n	5e52 <__libc_init_array+0x3a>
    5e48:	00ab      	lsls	r3, r5, #2
    5e4a:	58f3      	ldr	r3, [r6, r3]
    5e4c:	4798      	blx	r3
    5e4e:	3501      	adds	r5, #1
    5e50:	e7f8      	b.n	5e44 <__libc_init_array+0x2c>
    5e52:	bd70      	pop	{r4, r5, r6, pc}
    5e54:	000068f4 	.word	0x000068f4
    5e58:	000068f4 	.word	0x000068f4
    5e5c:	000068f4 	.word	0x000068f4
    5e60:	000068f8 	.word	0x000068f8

00005e64 <memcpy>:
    5e64:	2300      	movs	r3, #0
    5e66:	b510      	push	{r4, lr}
    5e68:	429a      	cmp	r2, r3
    5e6a:	d003      	beq.n	5e74 <memcpy+0x10>
    5e6c:	5ccc      	ldrb	r4, [r1, r3]
    5e6e:	54c4      	strb	r4, [r0, r3]
    5e70:	3301      	adds	r3, #1
    5e72:	e7f9      	b.n	5e68 <memcpy+0x4>
    5e74:	bd10      	pop	{r4, pc}

00005e76 <memset>:
    5e76:	0003      	movs	r3, r0
    5e78:	1882      	adds	r2, r0, r2
    5e7a:	4293      	cmp	r3, r2
    5e7c:	d002      	beq.n	5e84 <memset+0xe>
    5e7e:	7019      	strb	r1, [r3, #0]
    5e80:	3301      	adds	r3, #1
    5e82:	e7fa      	b.n	5e7a <memset+0x4>
    5e84:	4770      	bx	lr

00005e86 <setbuf>:
    5e86:	424a      	negs	r2, r1
    5e88:	414a      	adcs	r2, r1
    5e8a:	2380      	movs	r3, #128	; 0x80
    5e8c:	b510      	push	{r4, lr}
    5e8e:	0052      	lsls	r2, r2, #1
    5e90:	00db      	lsls	r3, r3, #3
    5e92:	f000 f801 	bl	5e98 <setvbuf>
    5e96:	bd10      	pop	{r4, pc}

00005e98 <setvbuf>:
    5e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e9a:	001d      	movs	r5, r3
    5e9c:	4b51      	ldr	r3, [pc, #324]	; (5fe4 <setvbuf+0x14c>)
    5e9e:	b085      	sub	sp, #20
    5ea0:	681e      	ldr	r6, [r3, #0]
    5ea2:	0004      	movs	r4, r0
    5ea4:	000f      	movs	r7, r1
    5ea6:	9200      	str	r2, [sp, #0]
    5ea8:	2e00      	cmp	r6, #0
    5eaa:	d005      	beq.n	5eb8 <setvbuf+0x20>
    5eac:	69b3      	ldr	r3, [r6, #24]
    5eae:	2b00      	cmp	r3, #0
    5eb0:	d102      	bne.n	5eb8 <setvbuf+0x20>
    5eb2:	0030      	movs	r0, r6
    5eb4:	f000 f994 	bl	61e0 <__sinit>
    5eb8:	4b4b      	ldr	r3, [pc, #300]	; (5fe8 <setvbuf+0x150>)
    5eba:	429c      	cmp	r4, r3
    5ebc:	d101      	bne.n	5ec2 <setvbuf+0x2a>
    5ebe:	6874      	ldr	r4, [r6, #4]
    5ec0:	e008      	b.n	5ed4 <setvbuf+0x3c>
    5ec2:	4b4a      	ldr	r3, [pc, #296]	; (5fec <setvbuf+0x154>)
    5ec4:	429c      	cmp	r4, r3
    5ec6:	d101      	bne.n	5ecc <setvbuf+0x34>
    5ec8:	68b4      	ldr	r4, [r6, #8]
    5eca:	e003      	b.n	5ed4 <setvbuf+0x3c>
    5ecc:	4b48      	ldr	r3, [pc, #288]	; (5ff0 <setvbuf+0x158>)
    5ece:	429c      	cmp	r4, r3
    5ed0:	d100      	bne.n	5ed4 <setvbuf+0x3c>
    5ed2:	68f4      	ldr	r4, [r6, #12]
    5ed4:	9b00      	ldr	r3, [sp, #0]
    5ed6:	2b02      	cmp	r3, #2
    5ed8:	d005      	beq.n	5ee6 <setvbuf+0x4e>
    5eda:	2b01      	cmp	r3, #1
    5edc:	d900      	bls.n	5ee0 <setvbuf+0x48>
    5ede:	e07c      	b.n	5fda <setvbuf+0x142>
    5ee0:	2d00      	cmp	r5, #0
    5ee2:	da00      	bge.n	5ee6 <setvbuf+0x4e>
    5ee4:	e079      	b.n	5fda <setvbuf+0x142>
    5ee6:	0021      	movs	r1, r4
    5ee8:	0030      	movs	r0, r6
    5eea:	f000 f90b 	bl	6104 <_fflush_r>
    5eee:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5ef0:	2900      	cmp	r1, #0
    5ef2:	d008      	beq.n	5f06 <setvbuf+0x6e>
    5ef4:	0023      	movs	r3, r4
    5ef6:	3344      	adds	r3, #68	; 0x44
    5ef8:	4299      	cmp	r1, r3
    5efa:	d002      	beq.n	5f02 <setvbuf+0x6a>
    5efc:	0030      	movs	r0, r6
    5efe:	f000 fa33 	bl	6368 <_free_r>
    5f02:	2300      	movs	r3, #0
    5f04:	6363      	str	r3, [r4, #52]	; 0x34
    5f06:	2300      	movs	r3, #0
    5f08:	61a3      	str	r3, [r4, #24]
    5f0a:	6063      	str	r3, [r4, #4]
    5f0c:	89a3      	ldrh	r3, [r4, #12]
    5f0e:	061b      	lsls	r3, r3, #24
    5f10:	d503      	bpl.n	5f1a <setvbuf+0x82>
    5f12:	6921      	ldr	r1, [r4, #16]
    5f14:	0030      	movs	r0, r6
    5f16:	f000 fa27 	bl	6368 <_free_r>
    5f1a:	89a2      	ldrh	r2, [r4, #12]
    5f1c:	4b35      	ldr	r3, [pc, #212]	; (5ff4 <setvbuf+0x15c>)
    5f1e:	4013      	ands	r3, r2
    5f20:	81a3      	strh	r3, [r4, #12]
    5f22:	9b00      	ldr	r3, [sp, #0]
    5f24:	2b02      	cmp	r3, #2
    5f26:	d021      	beq.n	5f6c <setvbuf+0xd4>
    5f28:	ab03      	add	r3, sp, #12
    5f2a:	aa02      	add	r2, sp, #8
    5f2c:	0021      	movs	r1, r4
    5f2e:	0030      	movs	r0, r6
    5f30:	f000 f9ea 	bl	6308 <__swhatbuf_r>
    5f34:	89a3      	ldrh	r3, [r4, #12]
    5f36:	4318      	orrs	r0, r3
    5f38:	81a0      	strh	r0, [r4, #12]
    5f3a:	2d00      	cmp	r5, #0
    5f3c:	d101      	bne.n	5f42 <setvbuf+0xaa>
    5f3e:	9d02      	ldr	r5, [sp, #8]
    5f40:	e001      	b.n	5f46 <setvbuf+0xae>
    5f42:	2f00      	cmp	r7, #0
    5f44:	d125      	bne.n	5f92 <setvbuf+0xfa>
    5f46:	0028      	movs	r0, r5
    5f48:	f000 fa04 	bl	6354 <malloc>
    5f4c:	9501      	str	r5, [sp, #4]
    5f4e:	1e07      	subs	r7, r0, #0
    5f50:	d11a      	bne.n	5f88 <setvbuf+0xf0>
    5f52:	9b02      	ldr	r3, [sp, #8]
    5f54:	9301      	str	r3, [sp, #4]
    5f56:	42ab      	cmp	r3, r5
    5f58:	d102      	bne.n	5f60 <setvbuf+0xc8>
    5f5a:	2001      	movs	r0, #1
    5f5c:	4240      	negs	r0, r0
    5f5e:	e006      	b.n	5f6e <setvbuf+0xd6>
    5f60:	9801      	ldr	r0, [sp, #4]
    5f62:	f000 f9f7 	bl	6354 <malloc>
    5f66:	1e07      	subs	r7, r0, #0
    5f68:	d10e      	bne.n	5f88 <setvbuf+0xf0>
    5f6a:	e7f6      	b.n	5f5a <setvbuf+0xc2>
    5f6c:	2000      	movs	r0, #0
    5f6e:	2202      	movs	r2, #2
    5f70:	89a3      	ldrh	r3, [r4, #12]
    5f72:	4313      	orrs	r3, r2
    5f74:	81a3      	strh	r3, [r4, #12]
    5f76:	2300      	movs	r3, #0
    5f78:	60a3      	str	r3, [r4, #8]
    5f7a:	0023      	movs	r3, r4
    5f7c:	3347      	adds	r3, #71	; 0x47
    5f7e:	6023      	str	r3, [r4, #0]
    5f80:	6123      	str	r3, [r4, #16]
    5f82:	2301      	movs	r3, #1
    5f84:	6163      	str	r3, [r4, #20]
    5f86:	e02a      	b.n	5fde <setvbuf+0x146>
    5f88:	2280      	movs	r2, #128	; 0x80
    5f8a:	89a3      	ldrh	r3, [r4, #12]
    5f8c:	9d01      	ldr	r5, [sp, #4]
    5f8e:	4313      	orrs	r3, r2
    5f90:	81a3      	strh	r3, [r4, #12]
    5f92:	69b3      	ldr	r3, [r6, #24]
    5f94:	2b00      	cmp	r3, #0
    5f96:	d102      	bne.n	5f9e <setvbuf+0x106>
    5f98:	0030      	movs	r0, r6
    5f9a:	f000 f921 	bl	61e0 <__sinit>
    5f9e:	9b00      	ldr	r3, [sp, #0]
    5fa0:	2b01      	cmp	r3, #1
    5fa2:	d103      	bne.n	5fac <setvbuf+0x114>
    5fa4:	89a3      	ldrh	r3, [r4, #12]
    5fa6:	9a00      	ldr	r2, [sp, #0]
    5fa8:	431a      	orrs	r2, r3
    5faa:	81a2      	strh	r2, [r4, #12]
    5fac:	2308      	movs	r3, #8
    5fae:	89a2      	ldrh	r2, [r4, #12]
    5fb0:	6027      	str	r7, [r4, #0]
    5fb2:	4013      	ands	r3, r2
    5fb4:	6127      	str	r7, [r4, #16]
    5fb6:	6165      	str	r5, [r4, #20]
    5fb8:	1e18      	subs	r0, r3, #0
    5fba:	d00c      	beq.n	5fd6 <setvbuf+0x13e>
    5fbc:	2301      	movs	r3, #1
    5fbe:	401a      	ands	r2, r3
    5fc0:	2300      	movs	r3, #0
    5fc2:	1e10      	subs	r0, r2, #0
    5fc4:	4298      	cmp	r0, r3
    5fc6:	d004      	beq.n	5fd2 <setvbuf+0x13a>
    5fc8:	426d      	negs	r5, r5
    5fca:	60a3      	str	r3, [r4, #8]
    5fcc:	61a5      	str	r5, [r4, #24]
    5fce:	0018      	movs	r0, r3
    5fd0:	e005      	b.n	5fde <setvbuf+0x146>
    5fd2:	60a5      	str	r5, [r4, #8]
    5fd4:	e003      	b.n	5fde <setvbuf+0x146>
    5fd6:	60a3      	str	r3, [r4, #8]
    5fd8:	e001      	b.n	5fde <setvbuf+0x146>
    5fda:	2001      	movs	r0, #1
    5fdc:	4240      	negs	r0, r0
    5fde:	b005      	add	sp, #20
    5fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fe2:	46c0      	nop			; (mov r8, r8)
    5fe4:	200000ac 	.word	0x200000ac
    5fe8:	00006888 	.word	0x00006888
    5fec:	000068a8 	.word	0x000068a8
    5ff0:	000068c8 	.word	0x000068c8
    5ff4:	fffff35c 	.word	0xfffff35c

00005ff8 <__sflush_r>:
    5ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5ffa:	898a      	ldrh	r2, [r1, #12]
    5ffc:	0005      	movs	r5, r0
    5ffe:	000c      	movs	r4, r1
    6000:	0713      	lsls	r3, r2, #28
    6002:	d45a      	bmi.n	60ba <__sflush_r+0xc2>
    6004:	684b      	ldr	r3, [r1, #4]
    6006:	2b00      	cmp	r3, #0
    6008:	dc02      	bgt.n	6010 <__sflush_r+0x18>
    600a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    600c:	2b00      	cmp	r3, #0
    600e:	dd19      	ble.n	6044 <__sflush_r+0x4c>
    6010:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6012:	2f00      	cmp	r7, #0
    6014:	d016      	beq.n	6044 <__sflush_r+0x4c>
    6016:	2300      	movs	r3, #0
    6018:	682e      	ldr	r6, [r5, #0]
    601a:	602b      	str	r3, [r5, #0]
    601c:	2380      	movs	r3, #128	; 0x80
    601e:	015b      	lsls	r3, r3, #5
    6020:	401a      	ands	r2, r3
    6022:	d001      	beq.n	6028 <__sflush_r+0x30>
    6024:	6d60      	ldr	r0, [r4, #84]	; 0x54
    6026:	e014      	b.n	6052 <__sflush_r+0x5a>
    6028:	2301      	movs	r3, #1
    602a:	6a21      	ldr	r1, [r4, #32]
    602c:	0028      	movs	r0, r5
    602e:	47b8      	blx	r7
    6030:	1c43      	adds	r3, r0, #1
    6032:	d10e      	bne.n	6052 <__sflush_r+0x5a>
    6034:	682b      	ldr	r3, [r5, #0]
    6036:	2b00      	cmp	r3, #0
    6038:	d00b      	beq.n	6052 <__sflush_r+0x5a>
    603a:	2b1d      	cmp	r3, #29
    603c:	d001      	beq.n	6042 <__sflush_r+0x4a>
    603e:	2b16      	cmp	r3, #22
    6040:	d102      	bne.n	6048 <__sflush_r+0x50>
    6042:	602e      	str	r6, [r5, #0]
    6044:	2000      	movs	r0, #0
    6046:	e05a      	b.n	60fe <__sflush_r+0x106>
    6048:	2240      	movs	r2, #64	; 0x40
    604a:	89a3      	ldrh	r3, [r4, #12]
    604c:	4313      	orrs	r3, r2
    604e:	81a3      	strh	r3, [r4, #12]
    6050:	e055      	b.n	60fe <__sflush_r+0x106>
    6052:	89a3      	ldrh	r3, [r4, #12]
    6054:	075b      	lsls	r3, r3, #29
    6056:	d506      	bpl.n	6066 <__sflush_r+0x6e>
    6058:	6863      	ldr	r3, [r4, #4]
    605a:	1ac0      	subs	r0, r0, r3
    605c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    605e:	2b00      	cmp	r3, #0
    6060:	d001      	beq.n	6066 <__sflush_r+0x6e>
    6062:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6064:	1ac0      	subs	r0, r0, r3
    6066:	2300      	movs	r3, #0
    6068:	0002      	movs	r2, r0
    606a:	6a21      	ldr	r1, [r4, #32]
    606c:	0028      	movs	r0, r5
    606e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6070:	47b8      	blx	r7
    6072:	89a3      	ldrh	r3, [r4, #12]
    6074:	1c42      	adds	r2, r0, #1
    6076:	d106      	bne.n	6086 <__sflush_r+0x8e>
    6078:	6829      	ldr	r1, [r5, #0]
    607a:	291d      	cmp	r1, #29
    607c:	d83a      	bhi.n	60f4 <__sflush_r+0xfc>
    607e:	4a20      	ldr	r2, [pc, #128]	; (6100 <__sflush_r+0x108>)
    6080:	40ca      	lsrs	r2, r1
    6082:	07d2      	lsls	r2, r2, #31
    6084:	d536      	bpl.n	60f4 <__sflush_r+0xfc>
    6086:	2200      	movs	r2, #0
    6088:	6062      	str	r2, [r4, #4]
    608a:	6922      	ldr	r2, [r4, #16]
    608c:	6022      	str	r2, [r4, #0]
    608e:	04db      	lsls	r3, r3, #19
    6090:	d505      	bpl.n	609e <__sflush_r+0xa6>
    6092:	1c43      	adds	r3, r0, #1
    6094:	d102      	bne.n	609c <__sflush_r+0xa4>
    6096:	682b      	ldr	r3, [r5, #0]
    6098:	2b00      	cmp	r3, #0
    609a:	d100      	bne.n	609e <__sflush_r+0xa6>
    609c:	6560      	str	r0, [r4, #84]	; 0x54
    609e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    60a0:	602e      	str	r6, [r5, #0]
    60a2:	2900      	cmp	r1, #0
    60a4:	d0ce      	beq.n	6044 <__sflush_r+0x4c>
    60a6:	0023      	movs	r3, r4
    60a8:	3344      	adds	r3, #68	; 0x44
    60aa:	4299      	cmp	r1, r3
    60ac:	d002      	beq.n	60b4 <__sflush_r+0xbc>
    60ae:	0028      	movs	r0, r5
    60b0:	f000 f95a 	bl	6368 <_free_r>
    60b4:	2000      	movs	r0, #0
    60b6:	6360      	str	r0, [r4, #52]	; 0x34
    60b8:	e021      	b.n	60fe <__sflush_r+0x106>
    60ba:	690f      	ldr	r7, [r1, #16]
    60bc:	2f00      	cmp	r7, #0
    60be:	d0c1      	beq.n	6044 <__sflush_r+0x4c>
    60c0:	680b      	ldr	r3, [r1, #0]
    60c2:	600f      	str	r7, [r1, #0]
    60c4:	1bdb      	subs	r3, r3, r7
    60c6:	9301      	str	r3, [sp, #4]
    60c8:	2300      	movs	r3, #0
    60ca:	0792      	lsls	r2, r2, #30
    60cc:	d100      	bne.n	60d0 <__sflush_r+0xd8>
    60ce:	694b      	ldr	r3, [r1, #20]
    60d0:	60a3      	str	r3, [r4, #8]
    60d2:	e003      	b.n	60dc <__sflush_r+0xe4>
    60d4:	9b01      	ldr	r3, [sp, #4]
    60d6:	183f      	adds	r7, r7, r0
    60d8:	1a1b      	subs	r3, r3, r0
    60da:	9301      	str	r3, [sp, #4]
    60dc:	9b01      	ldr	r3, [sp, #4]
    60de:	2b00      	cmp	r3, #0
    60e0:	ddb0      	ble.n	6044 <__sflush_r+0x4c>
    60e2:	9b01      	ldr	r3, [sp, #4]
    60e4:	003a      	movs	r2, r7
    60e6:	6a21      	ldr	r1, [r4, #32]
    60e8:	0028      	movs	r0, r5
    60ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    60ec:	47b0      	blx	r6
    60ee:	2800      	cmp	r0, #0
    60f0:	dcf0      	bgt.n	60d4 <__sflush_r+0xdc>
    60f2:	89a3      	ldrh	r3, [r4, #12]
    60f4:	2240      	movs	r2, #64	; 0x40
    60f6:	2001      	movs	r0, #1
    60f8:	4313      	orrs	r3, r2
    60fa:	81a3      	strh	r3, [r4, #12]
    60fc:	4240      	negs	r0, r0
    60fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6100:	20400001 	.word	0x20400001

00006104 <_fflush_r>:
    6104:	690b      	ldr	r3, [r1, #16]
    6106:	b570      	push	{r4, r5, r6, lr}
    6108:	0005      	movs	r5, r0
    610a:	000c      	movs	r4, r1
    610c:	2b00      	cmp	r3, #0
    610e:	d101      	bne.n	6114 <_fflush_r+0x10>
    6110:	2000      	movs	r0, #0
    6112:	e01c      	b.n	614e <_fflush_r+0x4a>
    6114:	2800      	cmp	r0, #0
    6116:	d004      	beq.n	6122 <_fflush_r+0x1e>
    6118:	6983      	ldr	r3, [r0, #24]
    611a:	2b00      	cmp	r3, #0
    611c:	d101      	bne.n	6122 <_fflush_r+0x1e>
    611e:	f000 f85f 	bl	61e0 <__sinit>
    6122:	4b0b      	ldr	r3, [pc, #44]	; (6150 <_fflush_r+0x4c>)
    6124:	429c      	cmp	r4, r3
    6126:	d101      	bne.n	612c <_fflush_r+0x28>
    6128:	686c      	ldr	r4, [r5, #4]
    612a:	e008      	b.n	613e <_fflush_r+0x3a>
    612c:	4b09      	ldr	r3, [pc, #36]	; (6154 <_fflush_r+0x50>)
    612e:	429c      	cmp	r4, r3
    6130:	d101      	bne.n	6136 <_fflush_r+0x32>
    6132:	68ac      	ldr	r4, [r5, #8]
    6134:	e003      	b.n	613e <_fflush_r+0x3a>
    6136:	4b08      	ldr	r3, [pc, #32]	; (6158 <_fflush_r+0x54>)
    6138:	429c      	cmp	r4, r3
    613a:	d100      	bne.n	613e <_fflush_r+0x3a>
    613c:	68ec      	ldr	r4, [r5, #12]
    613e:	220c      	movs	r2, #12
    6140:	5ea3      	ldrsh	r3, [r4, r2]
    6142:	2b00      	cmp	r3, #0
    6144:	d0e4      	beq.n	6110 <_fflush_r+0xc>
    6146:	0021      	movs	r1, r4
    6148:	0028      	movs	r0, r5
    614a:	f7ff ff55 	bl	5ff8 <__sflush_r>
    614e:	bd70      	pop	{r4, r5, r6, pc}
    6150:	00006888 	.word	0x00006888
    6154:	000068a8 	.word	0x000068a8
    6158:	000068c8 	.word	0x000068c8

0000615c <_cleanup_r>:
    615c:	b510      	push	{r4, lr}
    615e:	4902      	ldr	r1, [pc, #8]	; (6168 <_cleanup_r+0xc>)
    6160:	f000 f8b0 	bl	62c4 <_fwalk_reent>
    6164:	bd10      	pop	{r4, pc}
    6166:	46c0      	nop			; (mov r8, r8)
    6168:	00006105 	.word	0x00006105

0000616c <std.isra.0>:
    616c:	2300      	movs	r3, #0
    616e:	b510      	push	{r4, lr}
    6170:	0004      	movs	r4, r0
    6172:	6003      	str	r3, [r0, #0]
    6174:	6043      	str	r3, [r0, #4]
    6176:	6083      	str	r3, [r0, #8]
    6178:	8181      	strh	r1, [r0, #12]
    617a:	6643      	str	r3, [r0, #100]	; 0x64
    617c:	81c2      	strh	r2, [r0, #14]
    617e:	6103      	str	r3, [r0, #16]
    6180:	6143      	str	r3, [r0, #20]
    6182:	6183      	str	r3, [r0, #24]
    6184:	0019      	movs	r1, r3
    6186:	2208      	movs	r2, #8
    6188:	305c      	adds	r0, #92	; 0x5c
    618a:	f7ff fe74 	bl	5e76 <memset>
    618e:	4b05      	ldr	r3, [pc, #20]	; (61a4 <std.isra.0+0x38>)
    6190:	6224      	str	r4, [r4, #32]
    6192:	6263      	str	r3, [r4, #36]	; 0x24
    6194:	4b04      	ldr	r3, [pc, #16]	; (61a8 <std.isra.0+0x3c>)
    6196:	62a3      	str	r3, [r4, #40]	; 0x28
    6198:	4b04      	ldr	r3, [pc, #16]	; (61ac <std.isra.0+0x40>)
    619a:	62e3      	str	r3, [r4, #44]	; 0x2c
    619c:	4b04      	ldr	r3, [pc, #16]	; (61b0 <std.isra.0+0x44>)
    619e:	6323      	str	r3, [r4, #48]	; 0x30
    61a0:	bd10      	pop	{r4, pc}
    61a2:	46c0      	nop			; (mov r8, r8)
    61a4:	000064c5 	.word	0x000064c5
    61a8:	000064ed 	.word	0x000064ed
    61ac:	00006525 	.word	0x00006525
    61b0:	00006551 	.word	0x00006551

000061b4 <__sfmoreglue>:
    61b4:	b570      	push	{r4, r5, r6, lr}
    61b6:	2568      	movs	r5, #104	; 0x68
    61b8:	1e4b      	subs	r3, r1, #1
    61ba:	435d      	muls	r5, r3
    61bc:	000e      	movs	r6, r1
    61be:	0029      	movs	r1, r5
    61c0:	3174      	adds	r1, #116	; 0x74
    61c2:	f000 f917 	bl	63f4 <_malloc_r>
    61c6:	1e04      	subs	r4, r0, #0
    61c8:	d008      	beq.n	61dc <__sfmoreglue+0x28>
    61ca:	2100      	movs	r1, #0
    61cc:	002a      	movs	r2, r5
    61ce:	6001      	str	r1, [r0, #0]
    61d0:	6046      	str	r6, [r0, #4]
    61d2:	300c      	adds	r0, #12
    61d4:	60a0      	str	r0, [r4, #8]
    61d6:	3268      	adds	r2, #104	; 0x68
    61d8:	f7ff fe4d 	bl	5e76 <memset>
    61dc:	0020      	movs	r0, r4
    61de:	bd70      	pop	{r4, r5, r6, pc}

000061e0 <__sinit>:
    61e0:	6983      	ldr	r3, [r0, #24]
    61e2:	b513      	push	{r0, r1, r4, lr}
    61e4:	0004      	movs	r4, r0
    61e6:	2b00      	cmp	r3, #0
    61e8:	d128      	bne.n	623c <__sinit+0x5c>
    61ea:	6483      	str	r3, [r0, #72]	; 0x48
    61ec:	64c3      	str	r3, [r0, #76]	; 0x4c
    61ee:	6503      	str	r3, [r0, #80]	; 0x50
    61f0:	4b13      	ldr	r3, [pc, #76]	; (6240 <__sinit+0x60>)
    61f2:	4a14      	ldr	r2, [pc, #80]	; (6244 <__sinit+0x64>)
    61f4:	681b      	ldr	r3, [r3, #0]
    61f6:	6282      	str	r2, [r0, #40]	; 0x28
    61f8:	9301      	str	r3, [sp, #4]
    61fa:	4298      	cmp	r0, r3
    61fc:	d101      	bne.n	6202 <__sinit+0x22>
    61fe:	2301      	movs	r3, #1
    6200:	6183      	str	r3, [r0, #24]
    6202:	0020      	movs	r0, r4
    6204:	f000 f820 	bl	6248 <__sfp>
    6208:	6060      	str	r0, [r4, #4]
    620a:	0020      	movs	r0, r4
    620c:	f000 f81c 	bl	6248 <__sfp>
    6210:	60a0      	str	r0, [r4, #8]
    6212:	0020      	movs	r0, r4
    6214:	f000 f818 	bl	6248 <__sfp>
    6218:	2200      	movs	r2, #0
    621a:	60e0      	str	r0, [r4, #12]
    621c:	2104      	movs	r1, #4
    621e:	6860      	ldr	r0, [r4, #4]
    6220:	f7ff ffa4 	bl	616c <std.isra.0>
    6224:	2201      	movs	r2, #1
    6226:	2109      	movs	r1, #9
    6228:	68a0      	ldr	r0, [r4, #8]
    622a:	f7ff ff9f 	bl	616c <std.isra.0>
    622e:	2202      	movs	r2, #2
    6230:	2112      	movs	r1, #18
    6232:	68e0      	ldr	r0, [r4, #12]
    6234:	f7ff ff9a 	bl	616c <std.isra.0>
    6238:	2301      	movs	r3, #1
    623a:	61a3      	str	r3, [r4, #24]
    623c:	bd13      	pop	{r0, r1, r4, pc}
    623e:	46c0      	nop			; (mov r8, r8)
    6240:	00006884 	.word	0x00006884
    6244:	0000615d 	.word	0x0000615d

00006248 <__sfp>:
    6248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    624a:	4b1d      	ldr	r3, [pc, #116]	; (62c0 <__sfp+0x78>)
    624c:	0006      	movs	r6, r0
    624e:	681d      	ldr	r5, [r3, #0]
    6250:	69ab      	ldr	r3, [r5, #24]
    6252:	2b00      	cmp	r3, #0
    6254:	d102      	bne.n	625c <__sfp+0x14>
    6256:	0028      	movs	r0, r5
    6258:	f7ff ffc2 	bl	61e0 <__sinit>
    625c:	3548      	adds	r5, #72	; 0x48
    625e:	68ac      	ldr	r4, [r5, #8]
    6260:	686b      	ldr	r3, [r5, #4]
    6262:	3b01      	subs	r3, #1
    6264:	d405      	bmi.n	6272 <__sfp+0x2a>
    6266:	220c      	movs	r2, #12
    6268:	5ea7      	ldrsh	r7, [r4, r2]
    626a:	2f00      	cmp	r7, #0
    626c:	d010      	beq.n	6290 <__sfp+0x48>
    626e:	3468      	adds	r4, #104	; 0x68
    6270:	e7f7      	b.n	6262 <__sfp+0x1a>
    6272:	682b      	ldr	r3, [r5, #0]
    6274:	2b00      	cmp	r3, #0
    6276:	d001      	beq.n	627c <__sfp+0x34>
    6278:	682d      	ldr	r5, [r5, #0]
    627a:	e7f0      	b.n	625e <__sfp+0x16>
    627c:	2104      	movs	r1, #4
    627e:	0030      	movs	r0, r6
    6280:	f7ff ff98 	bl	61b4 <__sfmoreglue>
    6284:	6028      	str	r0, [r5, #0]
    6286:	2800      	cmp	r0, #0
    6288:	d1f6      	bne.n	6278 <__sfp+0x30>
    628a:	230c      	movs	r3, #12
    628c:	6033      	str	r3, [r6, #0]
    628e:	e016      	b.n	62be <__sfp+0x76>
    6290:	2301      	movs	r3, #1
    6292:	0020      	movs	r0, r4
    6294:	425b      	negs	r3, r3
    6296:	81e3      	strh	r3, [r4, #14]
    6298:	3302      	adds	r3, #2
    629a:	81a3      	strh	r3, [r4, #12]
    629c:	6667      	str	r7, [r4, #100]	; 0x64
    629e:	6027      	str	r7, [r4, #0]
    62a0:	60a7      	str	r7, [r4, #8]
    62a2:	6067      	str	r7, [r4, #4]
    62a4:	6127      	str	r7, [r4, #16]
    62a6:	6167      	str	r7, [r4, #20]
    62a8:	61a7      	str	r7, [r4, #24]
    62aa:	305c      	adds	r0, #92	; 0x5c
    62ac:	2208      	movs	r2, #8
    62ae:	0039      	movs	r1, r7
    62b0:	f7ff fde1 	bl	5e76 <memset>
    62b4:	0020      	movs	r0, r4
    62b6:	6367      	str	r7, [r4, #52]	; 0x34
    62b8:	63a7      	str	r7, [r4, #56]	; 0x38
    62ba:	64a7      	str	r7, [r4, #72]	; 0x48
    62bc:	64e7      	str	r7, [r4, #76]	; 0x4c
    62be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    62c0:	00006884 	.word	0x00006884

000062c4 <_fwalk_reent>:
    62c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    62c6:	0004      	movs	r4, r0
    62c8:	0007      	movs	r7, r0
    62ca:	2600      	movs	r6, #0
    62cc:	9101      	str	r1, [sp, #4]
    62ce:	3448      	adds	r4, #72	; 0x48
    62d0:	2c00      	cmp	r4, #0
    62d2:	d016      	beq.n	6302 <_fwalk_reent+0x3e>
    62d4:	6863      	ldr	r3, [r4, #4]
    62d6:	68a5      	ldr	r5, [r4, #8]
    62d8:	9300      	str	r3, [sp, #0]
    62da:	9b00      	ldr	r3, [sp, #0]
    62dc:	3b01      	subs	r3, #1
    62de:	9300      	str	r3, [sp, #0]
    62e0:	d40d      	bmi.n	62fe <_fwalk_reent+0x3a>
    62e2:	89ab      	ldrh	r3, [r5, #12]
    62e4:	2b01      	cmp	r3, #1
    62e6:	d908      	bls.n	62fa <_fwalk_reent+0x36>
    62e8:	220e      	movs	r2, #14
    62ea:	5eab      	ldrsh	r3, [r5, r2]
    62ec:	3301      	adds	r3, #1
    62ee:	d004      	beq.n	62fa <_fwalk_reent+0x36>
    62f0:	0029      	movs	r1, r5
    62f2:	0038      	movs	r0, r7
    62f4:	9b01      	ldr	r3, [sp, #4]
    62f6:	4798      	blx	r3
    62f8:	4306      	orrs	r6, r0
    62fa:	3568      	adds	r5, #104	; 0x68
    62fc:	e7ed      	b.n	62da <_fwalk_reent+0x16>
    62fe:	6824      	ldr	r4, [r4, #0]
    6300:	e7e6      	b.n	62d0 <_fwalk_reent+0xc>
    6302:	0030      	movs	r0, r6
    6304:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00006308 <__swhatbuf_r>:
    6308:	b570      	push	{r4, r5, r6, lr}
    630a:	000e      	movs	r6, r1
    630c:	001d      	movs	r5, r3
    630e:	230e      	movs	r3, #14
    6310:	5ec9      	ldrsh	r1, [r1, r3]
    6312:	b090      	sub	sp, #64	; 0x40
    6314:	0014      	movs	r4, r2
    6316:	2900      	cmp	r1, #0
    6318:	da06      	bge.n	6328 <__swhatbuf_r+0x20>
    631a:	2300      	movs	r3, #0
    631c:	602b      	str	r3, [r5, #0]
    631e:	89b3      	ldrh	r3, [r6, #12]
    6320:	061b      	lsls	r3, r3, #24
    6322:	d50f      	bpl.n	6344 <__swhatbuf_r+0x3c>
    6324:	2340      	movs	r3, #64	; 0x40
    6326:	e00f      	b.n	6348 <__swhatbuf_r+0x40>
    6328:	aa01      	add	r2, sp, #4
    632a:	f000 f93d 	bl	65a8 <_fstat_r>
    632e:	2800      	cmp	r0, #0
    6330:	dbf3      	blt.n	631a <__swhatbuf_r+0x12>
    6332:	23f0      	movs	r3, #240	; 0xf0
    6334:	9a02      	ldr	r2, [sp, #8]
    6336:	021b      	lsls	r3, r3, #8
    6338:	4013      	ands	r3, r2
    633a:	4a05      	ldr	r2, [pc, #20]	; (6350 <__swhatbuf_r+0x48>)
    633c:	189b      	adds	r3, r3, r2
    633e:	425a      	negs	r2, r3
    6340:	4153      	adcs	r3, r2
    6342:	602b      	str	r3, [r5, #0]
    6344:	2380      	movs	r3, #128	; 0x80
    6346:	00db      	lsls	r3, r3, #3
    6348:	2000      	movs	r0, #0
    634a:	6023      	str	r3, [r4, #0]
    634c:	b010      	add	sp, #64	; 0x40
    634e:	bd70      	pop	{r4, r5, r6, pc}
    6350:	ffffe000 	.word	0xffffe000

00006354 <malloc>:
    6354:	b510      	push	{r4, lr}
    6356:	4b03      	ldr	r3, [pc, #12]	; (6364 <malloc+0x10>)
    6358:	0001      	movs	r1, r0
    635a:	6818      	ldr	r0, [r3, #0]
    635c:	f000 f84a 	bl	63f4 <_malloc_r>
    6360:	bd10      	pop	{r4, pc}
    6362:	46c0      	nop			; (mov r8, r8)
    6364:	200000ac 	.word	0x200000ac

00006368 <_free_r>:
    6368:	b530      	push	{r4, r5, lr}
    636a:	2900      	cmp	r1, #0
    636c:	d03e      	beq.n	63ec <_free_r+0x84>
    636e:	3904      	subs	r1, #4
    6370:	680b      	ldr	r3, [r1, #0]
    6372:	2b00      	cmp	r3, #0
    6374:	da00      	bge.n	6378 <_free_r+0x10>
    6376:	18c9      	adds	r1, r1, r3
    6378:	4a1d      	ldr	r2, [pc, #116]	; (63f0 <_free_r+0x88>)
    637a:	6813      	ldr	r3, [r2, #0]
    637c:	0014      	movs	r4, r2
    637e:	2b00      	cmp	r3, #0
    6380:	d102      	bne.n	6388 <_free_r+0x20>
    6382:	604b      	str	r3, [r1, #4]
    6384:	6011      	str	r1, [r2, #0]
    6386:	e031      	b.n	63ec <_free_r+0x84>
    6388:	428b      	cmp	r3, r1
    638a:	d90d      	bls.n	63a8 <_free_r+0x40>
    638c:	680a      	ldr	r2, [r1, #0]
    638e:	1888      	adds	r0, r1, r2
    6390:	4283      	cmp	r3, r0
    6392:	d103      	bne.n	639c <_free_r+0x34>
    6394:	6818      	ldr	r0, [r3, #0]
    6396:	685b      	ldr	r3, [r3, #4]
    6398:	1882      	adds	r2, r0, r2
    639a:	600a      	str	r2, [r1, #0]
    639c:	604b      	str	r3, [r1, #4]
    639e:	6021      	str	r1, [r4, #0]
    63a0:	e024      	b.n	63ec <_free_r+0x84>
    63a2:	428a      	cmp	r2, r1
    63a4:	d803      	bhi.n	63ae <_free_r+0x46>
    63a6:	0013      	movs	r3, r2
    63a8:	685a      	ldr	r2, [r3, #4]
    63aa:	2a00      	cmp	r2, #0
    63ac:	d1f9      	bne.n	63a2 <_free_r+0x3a>
    63ae:	681d      	ldr	r5, [r3, #0]
    63b0:	195c      	adds	r4, r3, r5
    63b2:	428c      	cmp	r4, r1
    63b4:	d10b      	bne.n	63ce <_free_r+0x66>
    63b6:	6809      	ldr	r1, [r1, #0]
    63b8:	1869      	adds	r1, r5, r1
    63ba:	1858      	adds	r0, r3, r1
    63bc:	6019      	str	r1, [r3, #0]
    63be:	4282      	cmp	r2, r0
    63c0:	d114      	bne.n	63ec <_free_r+0x84>
    63c2:	6810      	ldr	r0, [r2, #0]
    63c4:	6852      	ldr	r2, [r2, #4]
    63c6:	1841      	adds	r1, r0, r1
    63c8:	6019      	str	r1, [r3, #0]
    63ca:	605a      	str	r2, [r3, #4]
    63cc:	e00e      	b.n	63ec <_free_r+0x84>
    63ce:	428c      	cmp	r4, r1
    63d0:	d902      	bls.n	63d8 <_free_r+0x70>
    63d2:	230c      	movs	r3, #12
    63d4:	6003      	str	r3, [r0, #0]
    63d6:	e009      	b.n	63ec <_free_r+0x84>
    63d8:	6808      	ldr	r0, [r1, #0]
    63da:	180c      	adds	r4, r1, r0
    63dc:	42a2      	cmp	r2, r4
    63de:	d103      	bne.n	63e8 <_free_r+0x80>
    63e0:	6814      	ldr	r4, [r2, #0]
    63e2:	6852      	ldr	r2, [r2, #4]
    63e4:	1820      	adds	r0, r4, r0
    63e6:	6008      	str	r0, [r1, #0]
    63e8:	604a      	str	r2, [r1, #4]
    63ea:	6059      	str	r1, [r3, #4]
    63ec:	bd30      	pop	{r4, r5, pc}
    63ee:	46c0      	nop			; (mov r8, r8)
    63f0:	20003d00 	.word	0x20003d00

000063f4 <_malloc_r>:
    63f4:	2303      	movs	r3, #3
    63f6:	b570      	push	{r4, r5, r6, lr}
    63f8:	1ccd      	adds	r5, r1, #3
    63fa:	439d      	bics	r5, r3
    63fc:	3508      	adds	r5, #8
    63fe:	0006      	movs	r6, r0
    6400:	2d0c      	cmp	r5, #12
    6402:	d201      	bcs.n	6408 <_malloc_r+0x14>
    6404:	250c      	movs	r5, #12
    6406:	e005      	b.n	6414 <_malloc_r+0x20>
    6408:	2d00      	cmp	r5, #0
    640a:	da03      	bge.n	6414 <_malloc_r+0x20>
    640c:	230c      	movs	r3, #12
    640e:	2000      	movs	r0, #0
    6410:	6033      	str	r3, [r6, #0]
    6412:	e040      	b.n	6496 <_malloc_r+0xa2>
    6414:	42a9      	cmp	r1, r5
    6416:	d8f9      	bhi.n	640c <_malloc_r+0x18>
    6418:	4b1f      	ldr	r3, [pc, #124]	; (6498 <_malloc_r+0xa4>)
    641a:	681c      	ldr	r4, [r3, #0]
    641c:	001a      	movs	r2, r3
    641e:	0021      	movs	r1, r4
    6420:	2900      	cmp	r1, #0
    6422:	d013      	beq.n	644c <_malloc_r+0x58>
    6424:	680b      	ldr	r3, [r1, #0]
    6426:	1b5b      	subs	r3, r3, r5
    6428:	d40d      	bmi.n	6446 <_malloc_r+0x52>
    642a:	2b0b      	cmp	r3, #11
    642c:	d902      	bls.n	6434 <_malloc_r+0x40>
    642e:	600b      	str	r3, [r1, #0]
    6430:	18cc      	adds	r4, r1, r3
    6432:	e01e      	b.n	6472 <_malloc_r+0x7e>
    6434:	428c      	cmp	r4, r1
    6436:	d102      	bne.n	643e <_malloc_r+0x4a>
    6438:	6863      	ldr	r3, [r4, #4]
    643a:	6013      	str	r3, [r2, #0]
    643c:	e01a      	b.n	6474 <_malloc_r+0x80>
    643e:	684b      	ldr	r3, [r1, #4]
    6440:	6063      	str	r3, [r4, #4]
    6442:	000c      	movs	r4, r1
    6444:	e016      	b.n	6474 <_malloc_r+0x80>
    6446:	000c      	movs	r4, r1
    6448:	6849      	ldr	r1, [r1, #4]
    644a:	e7e9      	b.n	6420 <_malloc_r+0x2c>
    644c:	4c13      	ldr	r4, [pc, #76]	; (649c <_malloc_r+0xa8>)
    644e:	6823      	ldr	r3, [r4, #0]
    6450:	2b00      	cmp	r3, #0
    6452:	d103      	bne.n	645c <_malloc_r+0x68>
    6454:	0030      	movs	r0, r6
    6456:	f000 f823 	bl	64a0 <_sbrk_r>
    645a:	6020      	str	r0, [r4, #0]
    645c:	0029      	movs	r1, r5
    645e:	0030      	movs	r0, r6
    6460:	f000 f81e 	bl	64a0 <_sbrk_r>
    6464:	1c43      	adds	r3, r0, #1
    6466:	d0d1      	beq.n	640c <_malloc_r+0x18>
    6468:	2303      	movs	r3, #3
    646a:	1cc4      	adds	r4, r0, #3
    646c:	439c      	bics	r4, r3
    646e:	42a0      	cmp	r0, r4
    6470:	d10a      	bne.n	6488 <_malloc_r+0x94>
    6472:	6025      	str	r5, [r4, #0]
    6474:	0020      	movs	r0, r4
    6476:	2207      	movs	r2, #7
    6478:	300b      	adds	r0, #11
    647a:	1d23      	adds	r3, r4, #4
    647c:	4390      	bics	r0, r2
    647e:	1ac3      	subs	r3, r0, r3
    6480:	d009      	beq.n	6496 <_malloc_r+0xa2>
    6482:	425a      	negs	r2, r3
    6484:	50e2      	str	r2, [r4, r3]
    6486:	e006      	b.n	6496 <_malloc_r+0xa2>
    6488:	1a21      	subs	r1, r4, r0
    648a:	0030      	movs	r0, r6
    648c:	f000 f808 	bl	64a0 <_sbrk_r>
    6490:	1c43      	adds	r3, r0, #1
    6492:	d1ee      	bne.n	6472 <_malloc_r+0x7e>
    6494:	e7ba      	b.n	640c <_malloc_r+0x18>
    6496:	bd70      	pop	{r4, r5, r6, pc}
    6498:	20003d00 	.word	0x20003d00
    649c:	20003cfc 	.word	0x20003cfc

000064a0 <_sbrk_r>:
    64a0:	2300      	movs	r3, #0
    64a2:	b570      	push	{r4, r5, r6, lr}
    64a4:	4c06      	ldr	r4, [pc, #24]	; (64c0 <_sbrk_r+0x20>)
    64a6:	0005      	movs	r5, r0
    64a8:	0008      	movs	r0, r1
    64aa:	6023      	str	r3, [r4, #0]
    64ac:	f7fb fcbc 	bl	1e28 <_sbrk>
    64b0:	1c43      	adds	r3, r0, #1
    64b2:	d103      	bne.n	64bc <_sbrk_r+0x1c>
    64b4:	6823      	ldr	r3, [r4, #0]
    64b6:	2b00      	cmp	r3, #0
    64b8:	d000      	beq.n	64bc <_sbrk_r+0x1c>
    64ba:	602b      	str	r3, [r5, #0]
    64bc:	bd70      	pop	{r4, r5, r6, pc}
    64be:	46c0      	nop			; (mov r8, r8)
    64c0:	20004e34 	.word	0x20004e34

000064c4 <__sread>:
    64c4:	b570      	push	{r4, r5, r6, lr}
    64c6:	000c      	movs	r4, r1
    64c8:	250e      	movs	r5, #14
    64ca:	5f49      	ldrsh	r1, [r1, r5]
    64cc:	f000 f892 	bl	65f4 <_read_r>
    64d0:	2800      	cmp	r0, #0
    64d2:	db03      	blt.n	64dc <__sread+0x18>
    64d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    64d6:	181b      	adds	r3, r3, r0
    64d8:	6563      	str	r3, [r4, #84]	; 0x54
    64da:	e003      	b.n	64e4 <__sread+0x20>
    64dc:	89a2      	ldrh	r2, [r4, #12]
    64de:	4b02      	ldr	r3, [pc, #8]	; (64e8 <__sread+0x24>)
    64e0:	4013      	ands	r3, r2
    64e2:	81a3      	strh	r3, [r4, #12]
    64e4:	bd70      	pop	{r4, r5, r6, pc}
    64e6:	46c0      	nop			; (mov r8, r8)
    64e8:	ffffefff 	.word	0xffffefff

000064ec <__swrite>:
    64ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64ee:	001f      	movs	r7, r3
    64f0:	898b      	ldrh	r3, [r1, #12]
    64f2:	0005      	movs	r5, r0
    64f4:	000c      	movs	r4, r1
    64f6:	0016      	movs	r6, r2
    64f8:	05db      	lsls	r3, r3, #23
    64fa:	d505      	bpl.n	6508 <__swrite+0x1c>
    64fc:	230e      	movs	r3, #14
    64fe:	5ec9      	ldrsh	r1, [r1, r3]
    6500:	2200      	movs	r2, #0
    6502:	2302      	movs	r3, #2
    6504:	f000 f862 	bl	65cc <_lseek_r>
    6508:	89a2      	ldrh	r2, [r4, #12]
    650a:	4b05      	ldr	r3, [pc, #20]	; (6520 <__swrite+0x34>)
    650c:	0028      	movs	r0, r5
    650e:	4013      	ands	r3, r2
    6510:	81a3      	strh	r3, [r4, #12]
    6512:	0032      	movs	r2, r6
    6514:	230e      	movs	r3, #14
    6516:	5ee1      	ldrsh	r1, [r4, r3]
    6518:	003b      	movs	r3, r7
    651a:	f000 f81f 	bl	655c <_write_r>
    651e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6520:	ffffefff 	.word	0xffffefff

00006524 <__sseek>:
    6524:	b570      	push	{r4, r5, r6, lr}
    6526:	000c      	movs	r4, r1
    6528:	250e      	movs	r5, #14
    652a:	5f49      	ldrsh	r1, [r1, r5]
    652c:	f000 f84e 	bl	65cc <_lseek_r>
    6530:	89a3      	ldrh	r3, [r4, #12]
    6532:	1c42      	adds	r2, r0, #1
    6534:	d103      	bne.n	653e <__sseek+0x1a>
    6536:	4a05      	ldr	r2, [pc, #20]	; (654c <__sseek+0x28>)
    6538:	4013      	ands	r3, r2
    653a:	81a3      	strh	r3, [r4, #12]
    653c:	e004      	b.n	6548 <__sseek+0x24>
    653e:	2280      	movs	r2, #128	; 0x80
    6540:	0152      	lsls	r2, r2, #5
    6542:	4313      	orrs	r3, r2
    6544:	81a3      	strh	r3, [r4, #12]
    6546:	6560      	str	r0, [r4, #84]	; 0x54
    6548:	bd70      	pop	{r4, r5, r6, pc}
    654a:	46c0      	nop			; (mov r8, r8)
    654c:	ffffefff 	.word	0xffffefff

00006550 <__sclose>:
    6550:	b510      	push	{r4, lr}
    6552:	230e      	movs	r3, #14
    6554:	5ec9      	ldrsh	r1, [r1, r3]
    6556:	f000 f815 	bl	6584 <_close_r>
    655a:	bd10      	pop	{r4, pc}

0000655c <_write_r>:
    655c:	b570      	push	{r4, r5, r6, lr}
    655e:	0005      	movs	r5, r0
    6560:	0008      	movs	r0, r1
    6562:	0011      	movs	r1, r2
    6564:	2200      	movs	r2, #0
    6566:	4c06      	ldr	r4, [pc, #24]	; (6580 <_write_r+0x24>)
    6568:	6022      	str	r2, [r4, #0]
    656a:	001a      	movs	r2, r3
    656c:	f7fa fa52 	bl	a14 <_write>
    6570:	1c43      	adds	r3, r0, #1
    6572:	d103      	bne.n	657c <_write_r+0x20>
    6574:	6823      	ldr	r3, [r4, #0]
    6576:	2b00      	cmp	r3, #0
    6578:	d000      	beq.n	657c <_write_r+0x20>
    657a:	602b      	str	r3, [r5, #0]
    657c:	bd70      	pop	{r4, r5, r6, pc}
    657e:	46c0      	nop			; (mov r8, r8)
    6580:	20004e34 	.word	0x20004e34

00006584 <_close_r>:
    6584:	2300      	movs	r3, #0
    6586:	b570      	push	{r4, r5, r6, lr}
    6588:	4c06      	ldr	r4, [pc, #24]	; (65a4 <_close_r+0x20>)
    658a:	0005      	movs	r5, r0
    658c:	0008      	movs	r0, r1
    658e:	6023      	str	r3, [r4, #0]
    6590:	f7fb fc5c 	bl	1e4c <_close>
    6594:	1c43      	adds	r3, r0, #1
    6596:	d103      	bne.n	65a0 <_close_r+0x1c>
    6598:	6823      	ldr	r3, [r4, #0]
    659a:	2b00      	cmp	r3, #0
    659c:	d000      	beq.n	65a0 <_close_r+0x1c>
    659e:	602b      	str	r3, [r5, #0]
    65a0:	bd70      	pop	{r4, r5, r6, pc}
    65a2:	46c0      	nop			; (mov r8, r8)
    65a4:	20004e34 	.word	0x20004e34

000065a8 <_fstat_r>:
    65a8:	2300      	movs	r3, #0
    65aa:	b570      	push	{r4, r5, r6, lr}
    65ac:	4c06      	ldr	r4, [pc, #24]	; (65c8 <_fstat_r+0x20>)
    65ae:	0005      	movs	r5, r0
    65b0:	0008      	movs	r0, r1
    65b2:	0011      	movs	r1, r2
    65b4:	6023      	str	r3, [r4, #0]
    65b6:	f7fb fc4d 	bl	1e54 <_fstat>
    65ba:	1c43      	adds	r3, r0, #1
    65bc:	d103      	bne.n	65c6 <_fstat_r+0x1e>
    65be:	6823      	ldr	r3, [r4, #0]
    65c0:	2b00      	cmp	r3, #0
    65c2:	d000      	beq.n	65c6 <_fstat_r+0x1e>
    65c4:	602b      	str	r3, [r5, #0]
    65c6:	bd70      	pop	{r4, r5, r6, pc}
    65c8:	20004e34 	.word	0x20004e34

000065cc <_lseek_r>:
    65cc:	b570      	push	{r4, r5, r6, lr}
    65ce:	0005      	movs	r5, r0
    65d0:	0008      	movs	r0, r1
    65d2:	0011      	movs	r1, r2
    65d4:	2200      	movs	r2, #0
    65d6:	4c06      	ldr	r4, [pc, #24]	; (65f0 <_lseek_r+0x24>)
    65d8:	6022      	str	r2, [r4, #0]
    65da:	001a      	movs	r2, r3
    65dc:	f7fb fc40 	bl	1e60 <_lseek>
    65e0:	1c43      	adds	r3, r0, #1
    65e2:	d103      	bne.n	65ec <_lseek_r+0x20>
    65e4:	6823      	ldr	r3, [r4, #0]
    65e6:	2b00      	cmp	r3, #0
    65e8:	d000      	beq.n	65ec <_lseek_r+0x20>
    65ea:	602b      	str	r3, [r5, #0]
    65ec:	bd70      	pop	{r4, r5, r6, pc}
    65ee:	46c0      	nop			; (mov r8, r8)
    65f0:	20004e34 	.word	0x20004e34

000065f4 <_read_r>:
    65f4:	b570      	push	{r4, r5, r6, lr}
    65f6:	0005      	movs	r5, r0
    65f8:	0008      	movs	r0, r1
    65fa:	0011      	movs	r1, r2
    65fc:	2200      	movs	r2, #0
    65fe:	4c06      	ldr	r4, [pc, #24]	; (6618 <_read_r+0x24>)
    6600:	6022      	str	r2, [r4, #0]
    6602:	001a      	movs	r2, r3
    6604:	f7fa f9e6 	bl	9d4 <_read>
    6608:	1c43      	adds	r3, r0, #1
    660a:	d103      	bne.n	6614 <_read_r+0x20>
    660c:	6823      	ldr	r3, [r4, #0]
    660e:	2b00      	cmp	r3, #0
    6610:	d000      	beq.n	6614 <_read_r+0x20>
    6612:	602b      	str	r3, [r5, #0]
    6614:	bd70      	pop	{r4, r5, r6, pc}
    6616:	46c0      	nop			; (mov r8, r8)
    6618:	20004e34 	.word	0x20004e34
    661c:	42000000 	.word	0x42000000
    6620:	42000400 	.word	0x42000400
    6624:	42000800 	.word	0x42000800
    6628:	42000c00 	.word	0x42000c00
    662c:	42001000 	.word	0x42001000
    6630:	43000400 	.word	0x43000400
    6634:	0b0a0908 	.word	0x0b0a0908
    6638:	00000d0c 	.word	0x00000d0c
    663c:	000013e2 	.word	0x000013e2
    6640:	00001620 	.word	0x00001620
    6644:	00001620 	.word	0x00001620
    6648:	00001620 	.word	0x00001620
    664c:	00001620 	.word	0x00001620
    6650:	00001620 	.word	0x00001620
    6654:	00001620 	.word	0x00001620
    6658:	00001620 	.word	0x00001620
    665c:	00001620 	.word	0x00001620
    6660:	00001620 	.word	0x00001620
    6664:	00001620 	.word	0x00001620
    6668:	00001620 	.word	0x00001620
    666c:	00001620 	.word	0x00001620
    6670:	00001620 	.word	0x00001620
    6674:	00001620 	.word	0x00001620
    6678:	00001620 	.word	0x00001620
    667c:	000013ca 	.word	0x000013ca
    6680:	00001620 	.word	0x00001620
    6684:	00001620 	.word	0x00001620
    6688:	00001620 	.word	0x00001620
    668c:	00001620 	.word	0x00001620
    6690:	00001620 	.word	0x00001620
    6694:	00001620 	.word	0x00001620
    6698:	00001620 	.word	0x00001620
    669c:	00001620 	.word	0x00001620
    66a0:	00001620 	.word	0x00001620
    66a4:	00001620 	.word	0x00001620
    66a8:	00001620 	.word	0x00001620
    66ac:	00001620 	.word	0x00001620
    66b0:	00001620 	.word	0x00001620
    66b4:	00001620 	.word	0x00001620
    66b8:	00001620 	.word	0x00001620
    66bc:	000013da 	.word	0x000013da
    66c0:	00001620 	.word	0x00001620
    66c4:	00001620 	.word	0x00001620
    66c8:	00001620 	.word	0x00001620
    66cc:	00001620 	.word	0x00001620
    66d0:	00001620 	.word	0x00001620
    66d4:	00001620 	.word	0x00001620
    66d8:	00001620 	.word	0x00001620
    66dc:	00001620 	.word	0x00001620
    66e0:	00001620 	.word	0x00001620
    66e4:	00001620 	.word	0x00001620
    66e8:	00001620 	.word	0x00001620
    66ec:	00001620 	.word	0x00001620
    66f0:	00001620 	.word	0x00001620
    66f4:	00001620 	.word	0x00001620
    66f8:	00001620 	.word	0x00001620
    66fc:	000013d2 	.word	0x000013d2
    6700:	000013ea 	.word	0x000013ea
    6704:	000013b2 	.word	0x000013b2
    6708:	000013c2 	.word	0x000013c2
    670c:	000013ba 	.word	0x000013ba
    6710:	00000002 	.word	0x00000002
    6714:	00000003 	.word	0x00000003
    6718:	00000028 	.word	0x00000028
    671c:	00000029 	.word	0x00000029
    6720:	00000004 	.word	0x00000004
    6724:	00000005 	.word	0x00000005
    6728:	00000006 	.word	0x00000006
    672c:	00000007 	.word	0x00000007
    6730:	00000020 	.word	0x00000020
    6734:	00000021 	.word	0x00000021
    6738:	00000022 	.word	0x00000022
    673c:	00000023 	.word	0x00000023
    6740:	00000024 	.word	0x00000024
    6744:	00000025 	.word	0x00000025
    6748:	00000026 	.word	0x00000026
    674c:	00000027 	.word	0x00000027
    6750:	00000008 	.word	0x00000008
    6754:	00000009 	.word	0x00000009
    6758:	0000000a 	.word	0x0000000a
    675c:	0000000b 	.word	0x0000000b
    6760:	0000ffff 	.word	0x0000ffff
    6764:	0000ffff 	.word	0x0000ffff
    6768:	0000ffff 	.word	0x0000ffff
    676c:	0000ffff 	.word	0x0000ffff
    6770:	000018b2 	.word	0x000018b2
    6774:	000018ae 	.word	0x000018ae
    6778:	000018ae 	.word	0x000018ae
    677c:	00001910 	.word	0x00001910
    6780:	00001910 	.word	0x00001910
    6784:	000018c8 	.word	0x000018c8
    6788:	000018b8 	.word	0x000018b8
    678c:	000018ce 	.word	0x000018ce
    6790:	000018fe 	.word	0x000018fe
    6794:	454c4449 	.word	0x454c4449
    6798:	00000000 	.word	0x00000000
    679c:	000033d4 	.word	0x000033d4
    67a0:	000033d4 	.word	0x000033d4
    67a4:	000033d4 	.word	0x000033d4
    67a8:	00003436 	.word	0x00003436
    67ac:	00003416 	.word	0x00003416
    67b0:	00003430 	.word	0x00003430
    67b4:	000033d4 	.word	0x000033d4
    67b8:	000033d4 	.word	0x000033d4
    67bc:	00003436 	.word	0x00003436
    67c0:	00003416 	.word	0x00003416
    67c4:	20726d54 	.word	0x20726d54
    67c8:	00637653 	.word	0x00637653
    67cc:	00003e78 	.word	0x00003e78
    67d0:	00003e78 	.word	0x00003e78
    67d4:	00003e4e 	.word	0x00003e4e
    67d8:	00003e54 	.word	0x00003e54
    67dc:	00003e5a 	.word	0x00003e5a
    67e0:	00003e60 	.word	0x00003e60
    67e4:	00003e66 	.word	0x00003e66
    67e8:	00003e6c 	.word	0x00003e6c
    67ec:	00003e72 	.word	0x00003e72
    67f0:	6e69614d 	.word	0x6e69614d
    67f4:	00000000 	.word	0x00000000
    67f8:	54524155 	.word	0x54524155
    67fc:	00000000 	.word	0x00000000
    6800:	00004d28 	.word	0x00004d28
    6804:	00004bf6 	.word	0x00004bf6
    6808:	00004cfc 	.word	0x00004cfc
    680c:	00004bec 	.word	0x00004bec
    6810:	00004cfc 	.word	0x00004cfc
    6814:	00004d06 	.word	0x00004d06
    6818:	00004cfc 	.word	0x00004cfc
    681c:	00004bec 	.word	0x00004bec
    6820:	00004bf6 	.word	0x00004bf6
    6824:	00004bf6 	.word	0x00004bf6
    6828:	00004d06 	.word	0x00004d06
    682c:	00004bec 	.word	0x00004bec
    6830:	00004be2 	.word	0x00004be2
    6834:	00004be2 	.word	0x00004be2
    6838:	00004be2 	.word	0x00004be2
    683c:	00004f58 	.word	0x00004f58
    6840:	00005354 	.word	0x00005354
    6844:	00005214 	.word	0x00005214
    6848:	00005214 	.word	0x00005214
    684c:	00005212 	.word	0x00005212
    6850:	0000532c 	.word	0x0000532c
    6854:	0000532c 	.word	0x0000532c
    6858:	0000531e 	.word	0x0000531e
    685c:	00005212 	.word	0x00005212
    6860:	0000532c 	.word	0x0000532c
    6864:	0000531e 	.word	0x0000531e
    6868:	0000532c 	.word	0x0000532c
    686c:	00005212 	.word	0x00005212
    6870:	00005334 	.word	0x00005334
    6874:	00005334 	.word	0x00005334
    6878:	00005334 	.word	0x00005334
    687c:	00005534 	.word	0x00005534
    6880:	00000043 	.word	0x00000043

00006884 <_global_impure_ptr>:
    6884:	2000004c                                L.. 

00006888 <__sf_fake_stdin>:
	...

000068a8 <__sf_fake_stdout>:
	...

000068c8 <__sf_fake_stderr>:
	...

000068e8 <_init>:
    68e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68ea:	46c0      	nop			; (mov r8, r8)
    68ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    68ee:	bc08      	pop	{r3}
    68f0:	469e      	mov	lr, r3
    68f2:	4770      	bx	lr

000068f4 <__init_array_start>:
    68f4:	000000dd 	.word	0x000000dd

000068f8 <_fini>:
    68f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68fa:	46c0      	nop			; (mov r8, r8)
    68fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    68fe:	bc08      	pop	{r3}
    6900:	469e      	mov	lr, r3
    6902:	4770      	bx	lr

00006904 <__fini_array_start>:
    6904:	000000b5 	.word	0x000000b5
