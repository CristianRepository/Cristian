
OPAMP_ADC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040cc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000007c  20000000  000040cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  0002007c  2**0
                  CONTENTS
  3 .bss          00003f04  2000007c  00004148  0002007c  2**2
                  ALLOC
  4 .stack        00002000  20003f80  0000804c  0002007c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
  7 .debug_info   00021ffb  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003d65  00000000  00000000  000420f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000079eb  00000000  00000000  00045e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000900  00000000  00000000  0004d848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000978  00000000  00000000  0004e148  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00007f9c  00000000  00000000  0004eac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010749  00000000  00000000  00056a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a2ce2  00000000  00000000  000671a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001b74  00000000  00000000  00109e88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20005f80 	.word	0x20005f80
       4:	000018fd 	.word	0x000018fd
       8:	000018f9 	.word	0x000018f9
       c:	000018f9 	.word	0x000018f9
	...
      2c:	00001ac1 	.word	0x00001ac1
	...
      38:	00001b29 	.word	0x00001b29
      3c:	00001b6d 	.word	0x00001b6d
      40:	000018f9 	.word	0x000018f9
      44:	000018f9 	.word	0x000018f9
      48:	000018f9 	.word	0x000018f9
      4c:	000018f9 	.word	0x000018f9
      50:	000018f9 	.word	0x000018f9
      54:	000018f9 	.word	0x000018f9
      58:	000018f9 	.word	0x000018f9
      5c:	000018f9 	.word	0x000018f9
      60:	00000c91 	.word	0x00000c91
      64:	00000ca1 	.word	0x00000ca1
      68:	00000cb1 	.word	0x00000cb1
      6c:	00000cc1 	.word	0x00000cc1
      70:	00000cd1 	.word	0x00000cd1
      74:	00000ce1 	.word	0x00000ce1
      78:	000018f9 	.word	0x000018f9
      7c:	000018f9 	.word	0x000018f9
      80:	000018f9 	.word	0x000018f9
      84:	000018f9 	.word	0x000018f9
      88:	000018f9 	.word	0x000018f9
      8c:	000018f9 	.word	0x000018f9
      90:	000018f9 	.word	0x000018f9
      94:	000018f9 	.word	0x000018f9
      98:	000011b5 	.word	0x000011b5
      9c:	000018f9 	.word	0x000018f9
      a0:	000018f9 	.word	0x000018f9
      a4:	000018f9 	.word	0x000018f9
      a8:	000018f9 	.word	0x000018f9
      ac:	000018f9 	.word	0x000018f9
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000007c 	.word	0x2000007c
      d4:	00000000 	.word	0x00000000
      d8:	000040cc 	.word	0x000040cc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000080 	.word	0x20000080
     108:	000040cc 	.word	0x000040cc
     10c:	000040cc 	.word	0x000040cc
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	000016c1 	.word	0x000016c1
     140:	00003511 	.word	0x00003511
     144:	20000004 	.word	0x20000004
     148:	000f4240 	.word	0x000f4240
     14c:	20000000 	.word	0x20000000
     150:	e000e010 	.word	0xe000e010

00000154 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     154:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     156:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     158:	2340      	movs	r3, #64	; 0x40
     15a:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     15c:	4281      	cmp	r1, r0
     15e:	d201      	bcs.n	164 <_sercom_get_sync_baud_val+0x10>
     160:	e00a      	b.n	178 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     162:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     164:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     166:	1c63      	adds	r3, r4, #1
     168:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     16a:	4288      	cmp	r0, r1
     16c:	d9f9      	bls.n	162 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     16e:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     170:	2cff      	cmp	r4, #255	; 0xff
     172:	d801      	bhi.n	178 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     174:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     176:	2300      	movs	r3, #0
	}
}
     178:	0018      	movs	r0, r3
     17a:	bd10      	pop	{r4, pc}

0000017c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     17c:	b5f0      	push	{r4, r5, r6, r7, lr}
     17e:	465f      	mov	r7, fp
     180:	4656      	mov	r6, sl
     182:	464d      	mov	r5, r9
     184:	4644      	mov	r4, r8
     186:	b4f0      	push	{r4, r5, r6, r7}
     188:	b089      	sub	sp, #36	; 0x24
     18a:	000c      	movs	r4, r1
     18c:	9205      	str	r2, [sp, #20]
     18e:	aa12      	add	r2, sp, #72	; 0x48
     190:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     192:	0002      	movs	r2, r0
     194:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     196:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     198:	42a2      	cmp	r2, r4
     19a:	d900      	bls.n	19e <_sercom_get_async_baud_val+0x22>
     19c:	e0c6      	b.n	32c <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     19e:	2b00      	cmp	r3, #0
     1a0:	d151      	bne.n	246 <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     1a2:	0002      	movs	r2, r0
     1a4:	0008      	movs	r0, r1
     1a6:	2100      	movs	r1, #0
     1a8:	4d64      	ldr	r5, [pc, #400]	; (33c <_sercom_get_async_baud_val+0x1c0>)
     1aa:	47a8      	blx	r5
     1ac:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     1ae:	0026      	movs	r6, r4
     1b0:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     1b2:	2300      	movs	r3, #0
     1b4:	2400      	movs	r4, #0
     1b6:	9300      	str	r3, [sp, #0]
     1b8:	9401      	str	r4, [sp, #4]
     1ba:	2200      	movs	r2, #0
     1bc:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     1be:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     1c0:	2120      	movs	r1, #32
     1c2:	468c      	mov	ip, r1
     1c4:	391f      	subs	r1, #31
     1c6:	9602      	str	r6, [sp, #8]
     1c8:	9703      	str	r7, [sp, #12]
     1ca:	2420      	movs	r4, #32
     1cc:	4264      	negs	r4, r4
     1ce:	1904      	adds	r4, r0, r4
     1d0:	d403      	bmi.n	1da <_sercom_get_async_baud_val+0x5e>
     1d2:	000d      	movs	r5, r1
     1d4:	40a5      	lsls	r5, r4
     1d6:	46a8      	mov	r8, r5
     1d8:	e004      	b.n	1e4 <_sercom_get_async_baud_val+0x68>
     1da:	4664      	mov	r4, ip
     1dc:	1a24      	subs	r4, r4, r0
     1de:	000d      	movs	r5, r1
     1e0:	40e5      	lsrs	r5, r4
     1e2:	46a8      	mov	r8, r5
     1e4:	000c      	movs	r4, r1
     1e6:	4084      	lsls	r4, r0
     1e8:	46a1      	mov	r9, r4

		r = r << 1;
     1ea:	0014      	movs	r4, r2
     1ec:	001d      	movs	r5, r3
     1ee:	18a4      	adds	r4, r4, r2
     1f0:	415d      	adcs	r5, r3
     1f2:	0022      	movs	r2, r4
     1f4:	002b      	movs	r3, r5

		if (n & bit_shift) {
     1f6:	4646      	mov	r6, r8
     1f8:	465f      	mov	r7, fp
     1fa:	423e      	tst	r6, r7
     1fc:	d003      	beq.n	206 <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
     1fe:	000e      	movs	r6, r1
     200:	4326      	orrs	r6, r4
     202:	0032      	movs	r2, r6
     204:	002b      	movs	r3, r5
		}

		if (r >= d) {
     206:	9c02      	ldr	r4, [sp, #8]
     208:	9d03      	ldr	r5, [sp, #12]
     20a:	429d      	cmp	r5, r3
     20c:	d80f      	bhi.n	22e <_sercom_get_async_baud_val+0xb2>
     20e:	d101      	bne.n	214 <_sercom_get_async_baud_val+0x98>
     210:	4294      	cmp	r4, r2
     212:	d80c      	bhi.n	22e <_sercom_get_async_baud_val+0xb2>
			r = r - d;
     214:	9c02      	ldr	r4, [sp, #8]
     216:	9d03      	ldr	r5, [sp, #12]
     218:	1b12      	subs	r2, r2, r4
     21a:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     21c:	464d      	mov	r5, r9
     21e:	9e00      	ldr	r6, [sp, #0]
     220:	9f01      	ldr	r7, [sp, #4]
     222:	4335      	orrs	r5, r6
     224:	003c      	movs	r4, r7
     226:	4646      	mov	r6, r8
     228:	4334      	orrs	r4, r6
     22a:	9500      	str	r5, [sp, #0]
     22c:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     22e:	3801      	subs	r0, #1
     230:	d2cb      	bcs.n	1ca <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
     232:	2200      	movs	r2, #0
     234:	2301      	movs	r3, #1
     236:	9800      	ldr	r0, [sp, #0]
     238:	9901      	ldr	r1, [sp, #4]
     23a:	1a12      	subs	r2, r2, r0
     23c:	418b      	sbcs	r3, r1
     23e:	0c12      	lsrs	r2, r2, #16
     240:	041b      	lsls	r3, r3, #16
     242:	431a      	orrs	r2, r3
     244:	e06f      	b.n	326 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     246:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     248:	2b01      	cmp	r3, #1
     24a:	d16c      	bne.n	326 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     24c:	0f63      	lsrs	r3, r4, #29
     24e:	9304      	str	r3, [sp, #16]
     250:	00e3      	lsls	r3, r4, #3
     252:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     254:	000a      	movs	r2, r1
     256:	2300      	movs	r3, #0
     258:	2100      	movs	r1, #0
     25a:	4c38      	ldr	r4, [pc, #224]	; (33c <_sercom_get_async_baud_val+0x1c0>)
     25c:	47a0      	blx	r4
     25e:	0004      	movs	r4, r0
     260:	000d      	movs	r5, r1
     262:	2300      	movs	r3, #0
     264:	469c      	mov	ip, r3
     266:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     268:	3320      	adds	r3, #32
     26a:	469b      	mov	fp, r3
     26c:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     26e:	4663      	mov	r3, ip
     270:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     272:	2300      	movs	r3, #0
     274:	9302      	str	r3, [sp, #8]
     276:	2200      	movs	r2, #0
     278:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     27a:	213f      	movs	r1, #63	; 0x3f
     27c:	9400      	str	r4, [sp, #0]
     27e:	9501      	str	r5, [sp, #4]
     280:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
     282:	2120      	movs	r1, #32
     284:	4249      	negs	r1, r1
     286:	1879      	adds	r1, r7, r1
     288:	d403      	bmi.n	292 <_sercom_get_async_baud_val+0x116>
     28a:	0030      	movs	r0, r6
     28c:	4088      	lsls	r0, r1
     28e:	4684      	mov	ip, r0
     290:	e004      	b.n	29c <_sercom_get_async_baud_val+0x120>
     292:	4659      	mov	r1, fp
     294:	1bc9      	subs	r1, r1, r7
     296:	0030      	movs	r0, r6
     298:	40c8      	lsrs	r0, r1
     29a:	4684      	mov	ip, r0
     29c:	0031      	movs	r1, r6
     29e:	40b9      	lsls	r1, r7
     2a0:	4689      	mov	r9, r1

		r = r << 1;
     2a2:	0010      	movs	r0, r2
     2a4:	0019      	movs	r1, r3
     2a6:	1880      	adds	r0, r0, r2
     2a8:	4159      	adcs	r1, r3
     2aa:	0002      	movs	r2, r0
     2ac:	000b      	movs	r3, r1

		if (n & bit_shift) {
     2ae:	4644      	mov	r4, r8
     2b0:	464d      	mov	r5, r9
     2b2:	402c      	ands	r4, r5
     2b4:	46a2      	mov	sl, r4
     2b6:	4664      	mov	r4, ip
     2b8:	9d04      	ldr	r5, [sp, #16]
     2ba:	402c      	ands	r4, r5
     2bc:	46a4      	mov	ip, r4
     2be:	4654      	mov	r4, sl
     2c0:	4665      	mov	r5, ip
     2c2:	432c      	orrs	r4, r5
     2c4:	d003      	beq.n	2ce <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
     2c6:	0034      	movs	r4, r6
     2c8:	4304      	orrs	r4, r0
     2ca:	0022      	movs	r2, r4
     2cc:	000b      	movs	r3, r1
		}

		if (r >= d) {
     2ce:	9800      	ldr	r0, [sp, #0]
     2d0:	9901      	ldr	r1, [sp, #4]
     2d2:	4299      	cmp	r1, r3
     2d4:	d80a      	bhi.n	2ec <_sercom_get_async_baud_val+0x170>
     2d6:	d101      	bne.n	2dc <_sercom_get_async_baud_val+0x160>
     2d8:	4290      	cmp	r0, r2
     2da:	d807      	bhi.n	2ec <_sercom_get_async_baud_val+0x170>
			r = r - d;
     2dc:	9800      	ldr	r0, [sp, #0]
     2de:	9901      	ldr	r1, [sp, #4]
     2e0:	1a12      	subs	r2, r2, r0
     2e2:	418b      	sbcs	r3, r1
			q |= bit_shift;
     2e4:	9902      	ldr	r1, [sp, #8]
     2e6:	4648      	mov	r0, r9
     2e8:	4301      	orrs	r1, r0
     2ea:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     2ec:	3f01      	subs	r7, #1
     2ee:	d2c8      	bcs.n	282 <_sercom_get_async_baud_val+0x106>
     2f0:	9c00      	ldr	r4, [sp, #0]
     2f2:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     2f4:	9902      	ldr	r1, [sp, #8]
     2f6:	9a07      	ldr	r2, [sp, #28]
     2f8:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     2fa:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     2fc:	4910      	ldr	r1, [pc, #64]	; (340 <_sercom_get_async_baud_val+0x1c4>)
     2fe:	428b      	cmp	r3, r1
     300:	d90b      	bls.n	31a <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     302:	9b06      	ldr	r3, [sp, #24]
     304:	3301      	adds	r3, #1
     306:	b2db      	uxtb	r3, r3
     308:	0019      	movs	r1, r3
     30a:	9306      	str	r3, [sp, #24]
     30c:	0013      	movs	r3, r2
     30e:	3301      	adds	r3, #1
     310:	9307      	str	r3, [sp, #28]
     312:	2908      	cmp	r1, #8
     314:	d1ad      	bne.n	272 <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     316:	2540      	movs	r5, #64	; 0x40
     318:	e008      	b.n	32c <_sercom_get_async_baud_val+0x1b0>
     31a:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     31c:	9a06      	ldr	r2, [sp, #24]
     31e:	2a08      	cmp	r2, #8
     320:	d004      	beq.n	32c <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     322:	0352      	lsls	r2, r2, #13
     324:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     326:	9b05      	ldr	r3, [sp, #20]
     328:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     32a:	2500      	movs	r5, #0
}
     32c:	0028      	movs	r0, r5
     32e:	b009      	add	sp, #36	; 0x24
     330:	bc3c      	pop	{r2, r3, r4, r5}
     332:	4690      	mov	r8, r2
     334:	4699      	mov	r9, r3
     336:	46a2      	mov	sl, r4
     338:	46ab      	mov	fp, r5
     33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     33c:	00003629 	.word	0x00003629
     340:	00001fff 	.word	0x00001fff

00000344 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     344:	b510      	push	{r4, lr}
     346:	b082      	sub	sp, #8
     348:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     34a:	4b0e      	ldr	r3, [pc, #56]	; (384 <sercom_set_gclk_generator+0x40>)
     34c:	781b      	ldrb	r3, [r3, #0]
     34e:	2b00      	cmp	r3, #0
     350:	d001      	beq.n	356 <sercom_set_gclk_generator+0x12>
     352:	2900      	cmp	r1, #0
     354:	d00d      	beq.n	372 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     356:	a901      	add	r1, sp, #4
     358:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     35a:	2011      	movs	r0, #17
     35c:	4b0a      	ldr	r3, [pc, #40]	; (388 <sercom_set_gclk_generator+0x44>)
     35e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     360:	2011      	movs	r0, #17
     362:	4b0a      	ldr	r3, [pc, #40]	; (38c <sercom_set_gclk_generator+0x48>)
     364:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     366:	4b07      	ldr	r3, [pc, #28]	; (384 <sercom_set_gclk_generator+0x40>)
     368:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     36a:	2201      	movs	r2, #1
     36c:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     36e:	2000      	movs	r0, #0
     370:	e006      	b.n	380 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     372:	4b04      	ldr	r3, [pc, #16]	; (384 <sercom_set_gclk_generator+0x40>)
     374:	785b      	ldrb	r3, [r3, #1]
     376:	4283      	cmp	r3, r0
     378:	d001      	beq.n	37e <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     37a:	201d      	movs	r0, #29
     37c:	e000      	b.n	380 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     37e:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     380:	b002      	add	sp, #8
     382:	bd10      	pop	{r4, pc}
     384:	20000098 	.word	0x20000098
     388:	0000179d 	.word	0x0000179d
     38c:	0000172d 	.word	0x0000172d

00000390 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     390:	4b44      	ldr	r3, [pc, #272]	; (4a4 <_sercom_get_default_pad+0x114>)
     392:	4298      	cmp	r0, r3
     394:	d034      	beq.n	400 <_sercom_get_default_pad+0x70>
     396:	d807      	bhi.n	3a8 <_sercom_get_default_pad+0x18>
     398:	2384      	movs	r3, #132	; 0x84
     39a:	05db      	lsls	r3, r3, #23
     39c:	4298      	cmp	r0, r3
     39e:	d00d      	beq.n	3bc <_sercom_get_default_pad+0x2c>
     3a0:	4b41      	ldr	r3, [pc, #260]	; (4a8 <_sercom_get_default_pad+0x118>)
     3a2:	4298      	cmp	r0, r3
     3a4:	d01b      	beq.n	3de <_sercom_get_default_pad+0x4e>
     3a6:	e06f      	b.n	488 <_sercom_get_default_pad+0xf8>
     3a8:	4b40      	ldr	r3, [pc, #256]	; (4ac <_sercom_get_default_pad+0x11c>)
     3aa:	4298      	cmp	r0, r3
     3ac:	d04a      	beq.n	444 <_sercom_get_default_pad+0xb4>
     3ae:	4b40      	ldr	r3, [pc, #256]	; (4b0 <_sercom_get_default_pad+0x120>)
     3b0:	4298      	cmp	r0, r3
     3b2:	d058      	beq.n	466 <_sercom_get_default_pad+0xd6>
     3b4:	4b3f      	ldr	r3, [pc, #252]	; (4b4 <_sercom_get_default_pad+0x124>)
     3b6:	4298      	cmp	r0, r3
     3b8:	d166      	bne.n	488 <_sercom_get_default_pad+0xf8>
     3ba:	e032      	b.n	422 <_sercom_get_default_pad+0x92>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3bc:	2901      	cmp	r1, #1
     3be:	d006      	beq.n	3ce <_sercom_get_default_pad+0x3e>
     3c0:	2900      	cmp	r1, #0
     3c2:	d063      	beq.n	48c <_sercom_get_default_pad+0xfc>
     3c4:	2902      	cmp	r1, #2
     3c6:	d006      	beq.n	3d6 <_sercom_get_default_pad+0x46>
     3c8:	2903      	cmp	r1, #3
     3ca:	d006      	beq.n	3da <_sercom_get_default_pad+0x4a>
     3cc:	e001      	b.n	3d2 <_sercom_get_default_pad+0x42>
     3ce:	483a      	ldr	r0, [pc, #232]	; (4b8 <_sercom_get_default_pad+0x128>)
     3d0:	e067      	b.n	4a2 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     3d2:	2000      	movs	r0, #0
     3d4:	e065      	b.n	4a2 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3d6:	4839      	ldr	r0, [pc, #228]	; (4bc <_sercom_get_default_pad+0x12c>)
     3d8:	e063      	b.n	4a2 <_sercom_get_default_pad+0x112>
     3da:	4839      	ldr	r0, [pc, #228]	; (4c0 <_sercom_get_default_pad+0x130>)
     3dc:	e061      	b.n	4a2 <_sercom_get_default_pad+0x112>
     3de:	2901      	cmp	r1, #1
     3e0:	d006      	beq.n	3f0 <_sercom_get_default_pad+0x60>
     3e2:	2900      	cmp	r1, #0
     3e4:	d054      	beq.n	490 <_sercom_get_default_pad+0x100>
     3e6:	2902      	cmp	r1, #2
     3e8:	d006      	beq.n	3f8 <_sercom_get_default_pad+0x68>
     3ea:	2903      	cmp	r1, #3
     3ec:	d006      	beq.n	3fc <_sercom_get_default_pad+0x6c>
     3ee:	e001      	b.n	3f4 <_sercom_get_default_pad+0x64>
     3f0:	4834      	ldr	r0, [pc, #208]	; (4c4 <_sercom_get_default_pad+0x134>)
     3f2:	e056      	b.n	4a2 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     3f4:	2000      	movs	r0, #0
     3f6:	e054      	b.n	4a2 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3f8:	4833      	ldr	r0, [pc, #204]	; (4c8 <_sercom_get_default_pad+0x138>)
     3fa:	e052      	b.n	4a2 <_sercom_get_default_pad+0x112>
     3fc:	4833      	ldr	r0, [pc, #204]	; (4cc <_sercom_get_default_pad+0x13c>)
     3fe:	e050      	b.n	4a2 <_sercom_get_default_pad+0x112>
     400:	2901      	cmp	r1, #1
     402:	d006      	beq.n	412 <_sercom_get_default_pad+0x82>
     404:	2900      	cmp	r1, #0
     406:	d045      	beq.n	494 <_sercom_get_default_pad+0x104>
     408:	2902      	cmp	r1, #2
     40a:	d006      	beq.n	41a <_sercom_get_default_pad+0x8a>
     40c:	2903      	cmp	r1, #3
     40e:	d006      	beq.n	41e <_sercom_get_default_pad+0x8e>
     410:	e001      	b.n	416 <_sercom_get_default_pad+0x86>
     412:	482f      	ldr	r0, [pc, #188]	; (4d0 <_sercom_get_default_pad+0x140>)
     414:	e045      	b.n	4a2 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     416:	2000      	movs	r0, #0
     418:	e043      	b.n	4a2 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     41a:	482e      	ldr	r0, [pc, #184]	; (4d4 <_sercom_get_default_pad+0x144>)
     41c:	e041      	b.n	4a2 <_sercom_get_default_pad+0x112>
     41e:	482e      	ldr	r0, [pc, #184]	; (4d8 <_sercom_get_default_pad+0x148>)
     420:	e03f      	b.n	4a2 <_sercom_get_default_pad+0x112>
     422:	2901      	cmp	r1, #1
     424:	d006      	beq.n	434 <_sercom_get_default_pad+0xa4>
     426:	2900      	cmp	r1, #0
     428:	d036      	beq.n	498 <_sercom_get_default_pad+0x108>
     42a:	2902      	cmp	r1, #2
     42c:	d006      	beq.n	43c <_sercom_get_default_pad+0xac>
     42e:	2903      	cmp	r1, #3
     430:	d006      	beq.n	440 <_sercom_get_default_pad+0xb0>
     432:	e001      	b.n	438 <_sercom_get_default_pad+0xa8>
     434:	4829      	ldr	r0, [pc, #164]	; (4dc <_sercom_get_default_pad+0x14c>)
     436:	e034      	b.n	4a2 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     438:	2000      	movs	r0, #0
     43a:	e032      	b.n	4a2 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     43c:	4828      	ldr	r0, [pc, #160]	; (4e0 <_sercom_get_default_pad+0x150>)
     43e:	e030      	b.n	4a2 <_sercom_get_default_pad+0x112>
     440:	4828      	ldr	r0, [pc, #160]	; (4e4 <_sercom_get_default_pad+0x154>)
     442:	e02e      	b.n	4a2 <_sercom_get_default_pad+0x112>
     444:	2901      	cmp	r1, #1
     446:	d006      	beq.n	456 <_sercom_get_default_pad+0xc6>
     448:	2900      	cmp	r1, #0
     44a:	d027      	beq.n	49c <_sercom_get_default_pad+0x10c>
     44c:	2902      	cmp	r1, #2
     44e:	d006      	beq.n	45e <_sercom_get_default_pad+0xce>
     450:	2903      	cmp	r1, #3
     452:	d006      	beq.n	462 <_sercom_get_default_pad+0xd2>
     454:	e001      	b.n	45a <_sercom_get_default_pad+0xca>
     456:	4824      	ldr	r0, [pc, #144]	; (4e8 <_sercom_get_default_pad+0x158>)
     458:	e023      	b.n	4a2 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     45a:	2000      	movs	r0, #0
     45c:	e021      	b.n	4a2 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     45e:	4823      	ldr	r0, [pc, #140]	; (4ec <_sercom_get_default_pad+0x15c>)
     460:	e01f      	b.n	4a2 <_sercom_get_default_pad+0x112>
     462:	4823      	ldr	r0, [pc, #140]	; (4f0 <_sercom_get_default_pad+0x160>)
     464:	e01d      	b.n	4a2 <_sercom_get_default_pad+0x112>
     466:	2901      	cmp	r1, #1
     468:	d006      	beq.n	478 <_sercom_get_default_pad+0xe8>
     46a:	2900      	cmp	r1, #0
     46c:	d018      	beq.n	4a0 <_sercom_get_default_pad+0x110>
     46e:	2902      	cmp	r1, #2
     470:	d006      	beq.n	480 <_sercom_get_default_pad+0xf0>
     472:	2903      	cmp	r1, #3
     474:	d006      	beq.n	484 <_sercom_get_default_pad+0xf4>
     476:	e001      	b.n	47c <_sercom_get_default_pad+0xec>
     478:	481e      	ldr	r0, [pc, #120]	; (4f4 <_sercom_get_default_pad+0x164>)
     47a:	e012      	b.n	4a2 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     47c:	2000      	movs	r0, #0
     47e:	e010      	b.n	4a2 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     480:	481d      	ldr	r0, [pc, #116]	; (4f8 <_sercom_get_default_pad+0x168>)
     482:	e00e      	b.n	4a2 <_sercom_get_default_pad+0x112>
     484:	481d      	ldr	r0, [pc, #116]	; (4fc <_sercom_get_default_pad+0x16c>)
     486:	e00c      	b.n	4a2 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     488:	2000      	movs	r0, #0
     48a:	e00a      	b.n	4a2 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     48c:	481c      	ldr	r0, [pc, #112]	; (500 <_sercom_get_default_pad+0x170>)
     48e:	e008      	b.n	4a2 <_sercom_get_default_pad+0x112>
     490:	2003      	movs	r0, #3
     492:	e006      	b.n	4a2 <_sercom_get_default_pad+0x112>
     494:	481b      	ldr	r0, [pc, #108]	; (504 <_sercom_get_default_pad+0x174>)
     496:	e004      	b.n	4a2 <_sercom_get_default_pad+0x112>
     498:	481b      	ldr	r0, [pc, #108]	; (508 <_sercom_get_default_pad+0x178>)
     49a:	e002      	b.n	4a2 <_sercom_get_default_pad+0x112>
     49c:	481b      	ldr	r0, [pc, #108]	; (50c <_sercom_get_default_pad+0x17c>)
     49e:	e000      	b.n	4a2 <_sercom_get_default_pad+0x112>
     4a0:	481b      	ldr	r0, [pc, #108]	; (510 <_sercom_get_default_pad+0x180>)
	}

	Assert(false);
	return 0;
}
     4a2:	4770      	bx	lr
     4a4:	42000800 	.word	0x42000800
     4a8:	42000400 	.word	0x42000400
     4ac:	42001000 	.word	0x42001000
     4b0:	43000400 	.word	0x43000400
     4b4:	42000c00 	.word	0x42000c00
     4b8:	00050003 	.word	0x00050003
     4bc:	00060003 	.word	0x00060003
     4c0:	00070003 	.word	0x00070003
     4c4:	00010003 	.word	0x00010003
     4c8:	001e0003 	.word	0x001e0003
     4cc:	001f0003 	.word	0x001f0003
     4d0:	00090003 	.word	0x00090003
     4d4:	000a0003 	.word	0x000a0003
     4d8:	000b0003 	.word	0x000b0003
     4dc:	00110003 	.word	0x00110003
     4e0:	00120003 	.word	0x00120003
     4e4:	00130003 	.word	0x00130003
     4e8:	000d0003 	.word	0x000d0003
     4ec:	000e0003 	.word	0x000e0003
     4f0:	000f0003 	.word	0x000f0003
     4f4:	00170003 	.word	0x00170003
     4f8:	00180003 	.word	0x00180003
     4fc:	00190003 	.word	0x00190003
     500:	00040003 	.word	0x00040003
     504:	00080003 	.word	0x00080003
     508:	00100003 	.word	0x00100003
     50c:	000c0003 	.word	0x000c0003
     510:	00160003 	.word	0x00160003

00000514 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     514:	b530      	push	{r4, r5, lr}
     516:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     518:	4b0c      	ldr	r3, [pc, #48]	; (54c <_sercom_get_sercom_inst_index+0x38>)
     51a:	466a      	mov	r2, sp
     51c:	cb32      	ldmia	r3!, {r1, r4, r5}
     51e:	c232      	stmia	r2!, {r1, r4, r5}
     520:	cb32      	ldmia	r3!, {r1, r4, r5}
     522:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     524:	9b00      	ldr	r3, [sp, #0]
     526:	4283      	cmp	r3, r0
     528:	d006      	beq.n	538 <_sercom_get_sercom_inst_index+0x24>
     52a:	2301      	movs	r3, #1
     52c:	009a      	lsls	r2, r3, #2
     52e:	4669      	mov	r1, sp
     530:	5852      	ldr	r2, [r2, r1]
     532:	4282      	cmp	r2, r0
     534:	d103      	bne.n	53e <_sercom_get_sercom_inst_index+0x2a>
     536:	e000      	b.n	53a <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     538:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     53a:	b2d8      	uxtb	r0, r3
     53c:	e003      	b.n	546 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     53e:	3301      	adds	r3, #1
     540:	2b06      	cmp	r3, #6
     542:	d1f3      	bne.n	52c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     544:	2000      	movs	r0, #0
}
     546:	b007      	add	sp, #28
     548:	bd30      	pop	{r4, r5, pc}
     54a:	46c0      	nop			; (mov r8, r8)
     54c:	00003e84 	.word	0x00003e84

00000550 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     550:	b5f0      	push	{r4, r5, r6, r7, lr}
     552:	4647      	mov	r7, r8
     554:	b480      	push	{r7}
     556:	000c      	movs	r4, r1
     558:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     55a:	2800      	cmp	r0, #0
     55c:	d10d      	bne.n	57a <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
     55e:	2a00      	cmp	r2, #0
     560:	dd0e      	ble.n	580 <_read+0x30>
     562:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     564:	4e08      	ldr	r6, [pc, #32]	; (588 <_read+0x38>)
     566:	4d09      	ldr	r5, [pc, #36]	; (58c <_read+0x3c>)
     568:	6830      	ldr	r0, [r6, #0]
     56a:	0021      	movs	r1, r4
     56c:	682b      	ldr	r3, [r5, #0]
     56e:	4798      	blx	r3
		ptr++;
     570:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     572:	42a7      	cmp	r7, r4
     574:	d1f8      	bne.n	568 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     576:	4640      	mov	r0, r8
     578:	e003      	b.n	582 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     57a:	2001      	movs	r0, #1
     57c:	4240      	negs	r0, r0
     57e:	e000      	b.n	582 <_read+0x32>
	}

	for (; len > 0; --len) {
     580:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     582:	bc04      	pop	{r2}
     584:	4690      	mov	r8, r2
     586:	bdf0      	pop	{r4, r5, r6, r7, pc}
     588:	20003cd0 	.word	0x20003cd0
     58c:	20003cc8 	.word	0x20003cc8

00000590 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     590:	b5f0      	push	{r4, r5, r6, r7, lr}
     592:	4647      	mov	r7, r8
     594:	b480      	push	{r7}
     596:	000e      	movs	r6, r1
     598:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     59a:	3801      	subs	r0, #1
     59c:	2802      	cmp	r0, #2
     59e:	d811      	bhi.n	5c4 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
     5a0:	2a00      	cmp	r2, #0
     5a2:	d012      	beq.n	5ca <_write+0x3a>
     5a4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     5a6:	4b0c      	ldr	r3, [pc, #48]	; (5d8 <_write+0x48>)
     5a8:	4698      	mov	r8, r3
     5aa:	4f0c      	ldr	r7, [pc, #48]	; (5dc <_write+0x4c>)
     5ac:	4643      	mov	r3, r8
     5ae:	6818      	ldr	r0, [r3, #0]
     5b0:	5d31      	ldrb	r1, [r6, r4]
     5b2:	683b      	ldr	r3, [r7, #0]
     5b4:	4798      	blx	r3
     5b6:	2800      	cmp	r0, #0
     5b8:	db09      	blt.n	5ce <_write+0x3e>
			return -1;
		}
		++nChars;
     5ba:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     5bc:	42a5      	cmp	r5, r4
     5be:	d1f5      	bne.n	5ac <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
     5c0:	0020      	movs	r0, r4
     5c2:	e006      	b.n	5d2 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     5c4:	2001      	movs	r0, #1
     5c6:	4240      	negs	r0, r0
     5c8:	e003      	b.n	5d2 <_write+0x42>
	}

	for (; len != 0; --len) {
     5ca:	2000      	movs	r0, #0
     5cc:	e001      	b.n	5d2 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     5ce:	2001      	movs	r0, #1
     5d0:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
     5d2:	bc04      	pop	{r2}
     5d4:	4690      	mov	r8, r2
     5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5d8:	20003cd0 	.word	0x20003cd0
     5dc:	20003ccc 	.word	0x20003ccc

000005e0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     5e2:	465f      	mov	r7, fp
     5e4:	4656      	mov	r6, sl
     5e6:	464d      	mov	r5, r9
     5e8:	4644      	mov	r4, r8
     5ea:	b4f0      	push	{r4, r5, r6, r7}
     5ec:	b091      	sub	sp, #68	; 0x44
     5ee:	0005      	movs	r5, r0
     5f0:	000c      	movs	r4, r1
     5f2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     5f4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5f6:	0008      	movs	r0, r1
     5f8:	4bc4      	ldr	r3, [pc, #784]	; (90c <usart_init+0x32c>)
     5fa:	4798      	blx	r3
     5fc:	1e02      	subs	r2, r0, #0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
     5fe:	2a05      	cmp	r2, #5
     600:	d003      	beq.n	60a <usart_init+0x2a>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     602:	0007      	movs	r7, r0
     604:	3712      	adds	r7, #18
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     606:	0003      	movs	r3, r0
     608:	e001      	b.n	60e <usart_init+0x2e>
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     60a:	2718      	movs	r7, #24
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
     60c:	2301      	movs	r3, #1
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     60e:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     610:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     612:	07c9      	lsls	r1, r1, #31
     614:	d500      	bpl.n	618 <usart_init+0x38>
     616:	e171      	b.n	8fc <usart_init+0x31c>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     618:	6821      	ldr	r1, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     61a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     61c:	0789      	lsls	r1, r1, #30
     61e:	d500      	bpl.n	622 <usart_init+0x42>
     620:	e16c      	b.n	8fc <usart_init+0x31c>
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
     622:	2a05      	cmp	r2, #5
     624:	d107      	bne.n	636 <usart_init+0x56>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     626:	48ba      	ldr	r0, [pc, #744]	; (910 <usart_init+0x330>)
     628:	6a02      	ldr	r2, [r0, #32]
     62a:	2101      	movs	r1, #1
     62c:	4099      	lsls	r1, r3
     62e:	000b      	movs	r3, r1
     630:	4313      	orrs	r3, r2
     632:	6203      	str	r3, [r0, #32]
     634:	e006      	b.n	644 <usart_init+0x64>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     636:	48b6      	ldr	r0, [pc, #728]	; (910 <usart_init+0x330>)
     638:	69c2      	ldr	r2, [r0, #28]
     63a:	2101      	movs	r1, #1
     63c:	4099      	lsls	r1, r3
     63e:	000b      	movs	r3, r1
     640:	4313      	orrs	r3, r2
     642:	61c3      	str	r3, [r0, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     644:	a90f      	add	r1, sp, #60	; 0x3c
     646:	232d      	movs	r3, #45	; 0x2d
     648:	4698      	mov	r8, r3
     64a:	5cf3      	ldrb	r3, [r6, r3]
     64c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     64e:	b2ff      	uxtb	r7, r7
     650:	0038      	movs	r0, r7
     652:	4bb0      	ldr	r3, [pc, #704]	; (914 <usart_init+0x334>)
     654:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     656:	0038      	movs	r0, r7
     658:	4baf      	ldr	r3, [pc, #700]	; (918 <usart_init+0x338>)
     65a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     65c:	4643      	mov	r3, r8
     65e:	5cf0      	ldrb	r0, [r6, r3]
     660:	2100      	movs	r1, #0
     662:	4bae      	ldr	r3, [pc, #696]	; (91c <usart_init+0x33c>)
     664:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     666:	7af3      	ldrb	r3, [r6, #11]
     668:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     66a:	2324      	movs	r3, #36	; 0x24
     66c:	5cf3      	ldrb	r3, [r6, r3]
     66e:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     670:	2325      	movs	r3, #37	; 0x25
     672:	5cf3      	ldrb	r3, [r6, r3]
     674:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     676:	7ef3      	ldrb	r3, [r6, #27]
     678:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     67a:	7f33      	ldrb	r3, [r6, #28]
     67c:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     67e:	682b      	ldr	r3, [r5, #0]
     680:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     682:	0018      	movs	r0, r3
     684:	4ba1      	ldr	r3, [pc, #644]	; (90c <usart_init+0x32c>)
     686:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     688:	3012      	adds	r0, #18
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     68a:	2200      	movs	r2, #0
     68c:	230e      	movs	r3, #14
     68e:	a906      	add	r1, sp, #24
     690:	468c      	mov	ip, r1
     692:	4463      	add	r3, ip
     694:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     696:	8a32      	ldrh	r2, [r6, #16]
     698:	9202      	str	r2, [sp, #8]
     69a:	2380      	movs	r3, #128	; 0x80
     69c:	01db      	lsls	r3, r3, #7
     69e:	429a      	cmp	r2, r3
     6a0:	d01a      	beq.n	6d8 <usart_init+0xf8>
     6a2:	d804      	bhi.n	6ae <usart_init+0xce>
     6a4:	2380      	movs	r3, #128	; 0x80
     6a6:	019b      	lsls	r3, r3, #6
     6a8:	429a      	cmp	r2, r3
     6aa:	d00b      	beq.n	6c4 <usart_init+0xe4>
     6ac:	e107      	b.n	8be <usart_init+0x2de>
     6ae:	23c0      	movs	r3, #192	; 0xc0
     6b0:	01db      	lsls	r3, r3, #7
     6b2:	9a02      	ldr	r2, [sp, #8]
     6b4:	429a      	cmp	r2, r3
     6b6:	d00a      	beq.n	6ce <usart_init+0xee>
     6b8:	2380      	movs	r3, #128	; 0x80
     6ba:	021b      	lsls	r3, r3, #8
     6bc:	429a      	cmp	r2, r3
     6be:	d100      	bne.n	6c2 <usart_init+0xe2>
     6c0:	e102      	b.n	8c8 <usart_init+0x2e8>
     6c2:	e0fc      	b.n	8be <usart_init+0x2de>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     6c4:	2310      	movs	r3, #16
     6c6:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     6c8:	3b0f      	subs	r3, #15
     6ca:	9307      	str	r3, [sp, #28]
     6cc:	e100      	b.n	8d0 <usart_init+0x2f0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     6ce:	2308      	movs	r3, #8
     6d0:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     6d2:	3b07      	subs	r3, #7
     6d4:	9307      	str	r3, [sp, #28]
     6d6:	e0fb      	b.n	8d0 <usart_init+0x2f0>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     6d8:	6833      	ldr	r3, [r6, #0]
     6da:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
     6dc:	68f3      	ldr	r3, [r6, #12]
     6de:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     6e0:	6973      	ldr	r3, [r6, #20]
     6e2:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     6e4:	7e33      	ldrb	r3, [r6, #24]
     6e6:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     6e8:	2326      	movs	r3, #38	; 0x26
     6ea:	5cf3      	ldrb	r3, [r6, r3]
     6ec:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     6ee:	6873      	ldr	r3, [r6, #4]
     6f0:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     6f2:	2b00      	cmp	r3, #0
     6f4:	d016      	beq.n	724 <usart_init+0x144>
     6f6:	2380      	movs	r3, #128	; 0x80
     6f8:	055b      	lsls	r3, r3, #21
     6fa:	459a      	cmp	sl, r3
     6fc:	d139      	bne.n	772 <usart_init+0x192>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     6fe:	2327      	movs	r3, #39	; 0x27
     700:	5cf3      	ldrb	r3, [r6, r3]
     702:	2b00      	cmp	r3, #0
     704:	d139      	bne.n	77a <usart_init+0x19a>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     706:	6a33      	ldr	r3, [r6, #32]
     708:	001f      	movs	r7, r3
     70a:	b2c0      	uxtb	r0, r0
     70c:	4b84      	ldr	r3, [pc, #528]	; (920 <usart_init+0x340>)
     70e:	4798      	blx	r3
     710:	0001      	movs	r1, r0
     712:	220e      	movs	r2, #14
     714:	ab06      	add	r3, sp, #24
     716:	469c      	mov	ip, r3
     718:	4462      	add	r2, ip
     71a:	0038      	movs	r0, r7
     71c:	4b81      	ldr	r3, [pc, #516]	; (924 <usart_init+0x344>)
     71e:	4798      	blx	r3
     720:	0003      	movs	r3, r0
     722:	e027      	b.n	774 <usart_init+0x194>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     724:	2308      	movs	r3, #8
     726:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     728:	2300      	movs	r3, #0
     72a:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     72c:	2327      	movs	r3, #39	; 0x27
     72e:	5cf3      	ldrb	r3, [r6, r3]
     730:	2b00      	cmp	r3, #0
     732:	d00c      	beq.n	74e <usart_init+0x16e>
				status_code =
     734:	9b06      	ldr	r3, [sp, #24]
     736:	9300      	str	r3, [sp, #0]
     738:	9b07      	ldr	r3, [sp, #28]
     73a:	220e      	movs	r2, #14
     73c:	a906      	add	r1, sp, #24
     73e:	468c      	mov	ip, r1
     740:	4462      	add	r2, ip
     742:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     744:	6a30      	ldr	r0, [r6, #32]
     746:	4f78      	ldr	r7, [pc, #480]	; (928 <usart_init+0x348>)
     748:	47b8      	blx	r7
     74a:	0003      	movs	r3, r0
     74c:	e012      	b.n	774 <usart_init+0x194>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     74e:	6a33      	ldr	r3, [r6, #32]
     750:	001f      	movs	r7, r3
     752:	b2c0      	uxtb	r0, r0
     754:	4b72      	ldr	r3, [pc, #456]	; (920 <usart_init+0x340>)
     756:	4798      	blx	r3
     758:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     75a:	9b06      	ldr	r3, [sp, #24]
     75c:	9300      	str	r3, [sp, #0]
     75e:	9b07      	ldr	r3, [sp, #28]
     760:	220e      	movs	r2, #14
     762:	a806      	add	r0, sp, #24
     764:	4684      	mov	ip, r0
     766:	4462      	add	r2, ip
     768:	0038      	movs	r0, r7
     76a:	4f6f      	ldr	r7, [pc, #444]	; (928 <usart_init+0x348>)
     76c:	47b8      	blx	r7
     76e:	0003      	movs	r3, r0
     770:	e000      	b.n	774 <usart_init+0x194>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     772:	2300      	movs	r3, #0
     774:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     776:	d000      	beq.n	77a <usart_init+0x19a>
     778:	e0c0      	b.n	8fc <usart_init+0x31c>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     77a:	7e73      	ldrb	r3, [r6, #25]
     77c:	2b00      	cmp	r3, #0
     77e:	d002      	beq.n	786 <usart_init+0x1a6>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     780:	7eb3      	ldrb	r3, [r6, #26]
     782:	464a      	mov	r2, r9
     784:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     786:	682a      	ldr	r2, [r5, #0]
     788:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     78a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     78c:	2b00      	cmp	r3, #0
     78e:	d1fc      	bne.n	78a <usart_init+0x1aa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     790:	330e      	adds	r3, #14
     792:	aa06      	add	r2, sp, #24
     794:	4694      	mov	ip, r2
     796:	4463      	add	r3, ip
     798:	881b      	ldrh	r3, [r3, #0]
     79a:	464a      	mov	r2, r9
     79c:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     79e:	9b04      	ldr	r3, [sp, #16]
     7a0:	465a      	mov	r2, fp
     7a2:	4313      	orrs	r3, r2
     7a4:	9a03      	ldr	r2, [sp, #12]
     7a6:	4313      	orrs	r3, r2
     7a8:	4652      	mov	r2, sl
     7aa:	4313      	orrs	r3, r2
     7ac:	433b      	orrs	r3, r7
     7ae:	4642      	mov	r2, r8
     7b0:	0212      	lsls	r2, r2, #8
     7b2:	4313      	orrs	r3, r2
     7b4:	9a05      	ldr	r2, [sp, #20]
     7b6:	0757      	lsls	r7, r2, #29
     7b8:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     7ba:	2327      	movs	r3, #39	; 0x27
     7bc:	5cf3      	ldrb	r3, [r6, r3]
     7be:	2b00      	cmp	r3, #0
     7c0:	d101      	bne.n	7c6 <usart_init+0x1e6>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     7c2:	3304      	adds	r3, #4
     7c4:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     7c6:	7e71      	ldrb	r1, [r6, #25]
     7c8:	0289      	lsls	r1, r1, #10
     7ca:	7f33      	ldrb	r3, [r6, #28]
     7cc:	025b      	lsls	r3, r3, #9
     7ce:	4319      	orrs	r1, r3
     7d0:	7f73      	ldrb	r3, [r6, #29]
     7d2:	021b      	lsls	r3, r3, #8
     7d4:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     7d6:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     7d8:	5cf3      	ldrb	r3, [r6, r3]
     7da:	045b      	lsls	r3, r3, #17
     7dc:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     7de:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     7e0:	5cf2      	ldrb	r2, [r6, r3]
     7e2:	0412      	lsls	r2, r2, #16
     7e4:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     7e6:	7af3      	ldrb	r3, [r6, #11]
     7e8:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     7ea:	8933      	ldrh	r3, [r6, #8]
     7ec:	2bff      	cmp	r3, #255	; 0xff
     7ee:	d004      	beq.n	7fa <usart_init+0x21a>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     7f0:	2280      	movs	r2, #128	; 0x80
     7f2:	0452      	lsls	r2, r2, #17
     7f4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     7f6:	4319      	orrs	r1, r3
     7f8:	e005      	b.n	806 <usart_init+0x226>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     7fa:	7ef3      	ldrb	r3, [r6, #27]
     7fc:	2b00      	cmp	r3, #0
     7fe:	d002      	beq.n	806 <usart_init+0x226>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     800:	2380      	movs	r3, #128	; 0x80
     802:	04db      	lsls	r3, r3, #19
     804:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     806:	232c      	movs	r3, #44	; 0x2c
     808:	5cf3      	ldrb	r3, [r6, r3]
     80a:	2b00      	cmp	r3, #0
     80c:	d103      	bne.n	816 <usart_init+0x236>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     80e:	4b47      	ldr	r3, [pc, #284]	; (92c <usart_init+0x34c>)
     810:	789b      	ldrb	r3, [r3, #2]
     812:	079b      	lsls	r3, r3, #30
     814:	d501      	bpl.n	81a <usart_init+0x23a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     816:	2380      	movs	r3, #128	; 0x80
     818:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     81a:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     81c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     81e:	2b00      	cmp	r3, #0
     820:	d1fc      	bne.n	81c <usart_init+0x23c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     822:	464b      	mov	r3, r9
     824:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     826:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     828:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     82a:	2b00      	cmp	r3, #0
     82c:	d1fc      	bne.n	828 <usart_init+0x248>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     82e:	464b      	mov	r3, r9
     830:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     832:	ab0e      	add	r3, sp, #56	; 0x38
     834:	2280      	movs	r2, #128	; 0x80
     836:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     838:	2200      	movs	r2, #0
     83a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     83c:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     83e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     840:	6b33      	ldr	r3, [r6, #48]	; 0x30
     842:	930a      	str	r3, [sp, #40]	; 0x28
     844:	6b73      	ldr	r3, [r6, #52]	; 0x34
     846:	930b      	str	r3, [sp, #44]	; 0x2c
     848:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     84a:	930c      	str	r3, [sp, #48]	; 0x30
     84c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     84e:	9302      	str	r3, [sp, #8]
     850:	930d      	str	r3, [sp, #52]	; 0x34
     852:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     854:	ae0e      	add	r6, sp, #56	; 0x38
     856:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     858:	00bb      	lsls	r3, r7, #2
     85a:	aa0a      	add	r2, sp, #40	; 0x28
     85c:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     85e:	2800      	cmp	r0, #0
     860:	d102      	bne.n	868 <usart_init+0x288>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     862:	0020      	movs	r0, r4
     864:	4b32      	ldr	r3, [pc, #200]	; (930 <usart_init+0x350>)
     866:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     868:	1c43      	adds	r3, r0, #1
     86a:	d005      	beq.n	878 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     86c:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     86e:	0c00      	lsrs	r0, r0, #16
     870:	b2c0      	uxtb	r0, r0
     872:	0031      	movs	r1, r6
     874:	4b2f      	ldr	r3, [pc, #188]	; (934 <usart_init+0x354>)
     876:	4798      	blx	r3
     878:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     87a:	2f04      	cmp	r7, #4
     87c:	d1eb      	bne.n	856 <usart_init+0x276>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     87e:	2300      	movs	r3, #0
     880:	60eb      	str	r3, [r5, #12]
     882:	612b      	str	r3, [r5, #16]
     884:	616b      	str	r3, [r5, #20]
     886:	61ab      	str	r3, [r5, #24]
     888:	61eb      	str	r3, [r5, #28]
     88a:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     88c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     88e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     890:	2200      	movs	r2, #0
     892:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     894:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     896:	3330      	adds	r3, #48	; 0x30
     898:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     89a:	3301      	adds	r3, #1
     89c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     89e:	3301      	adds	r3, #1
     8a0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     8a2:	3301      	adds	r3, #1
     8a4:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     8a6:	6828      	ldr	r0, [r5, #0]
     8a8:	4b18      	ldr	r3, [pc, #96]	; (90c <usart_init+0x32c>)
     8aa:	4798      	blx	r3
     8ac:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     8ae:	4922      	ldr	r1, [pc, #136]	; (938 <usart_init+0x358>)
     8b0:	4b22      	ldr	r3, [pc, #136]	; (93c <usart_init+0x35c>)
     8b2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     8b4:	00a4      	lsls	r4, r4, #2
     8b6:	4b22      	ldr	r3, [pc, #136]	; (940 <usart_init+0x360>)
     8b8:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     8ba:	2000      	movs	r0, #0
     8bc:	e01e      	b.n	8fc <usart_init+0x31c>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     8be:	2310      	movs	r3, #16
     8c0:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8c2:	2300      	movs	r3, #0
     8c4:	9307      	str	r3, [sp, #28]
     8c6:	e003      	b.n	8d0 <usart_init+0x2f0>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     8c8:	2303      	movs	r3, #3
     8ca:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8cc:	2300      	movs	r3, #0
     8ce:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     8d0:	6833      	ldr	r3, [r6, #0]
     8d2:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
     8d4:	68f3      	ldr	r3, [r6, #12]
     8d6:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     8d8:	6973      	ldr	r3, [r6, #20]
     8da:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     8dc:	7e33      	ldrb	r3, [r6, #24]
     8de:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     8e0:	2326      	movs	r3, #38	; 0x26
     8e2:	5cf3      	ldrb	r3, [r6, r3]
     8e4:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     8e6:	6873      	ldr	r3, [r6, #4]
     8e8:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     8ea:	2b00      	cmp	r3, #0
     8ec:	d100      	bne.n	8f0 <usart_init+0x310>
     8ee:	e71d      	b.n	72c <usart_init+0x14c>
     8f0:	2380      	movs	r3, #128	; 0x80
     8f2:	055b      	lsls	r3, r3, #21
     8f4:	459a      	cmp	sl, r3
     8f6:	d100      	bne.n	8fa <usart_init+0x31a>
     8f8:	e701      	b.n	6fe <usart_init+0x11e>
     8fa:	e73e      	b.n	77a <usart_init+0x19a>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     8fc:	b011      	add	sp, #68	; 0x44
     8fe:	bc3c      	pop	{r2, r3, r4, r5}
     900:	4690      	mov	r8, r2
     902:	4699      	mov	r9, r3
     904:	46a2      	mov	sl, r4
     906:	46ab      	mov	fp, r5
     908:	bdf0      	pop	{r4, r5, r6, r7, pc}
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	00000515 	.word	0x00000515
     910:	40000400 	.word	0x40000400
     914:	0000179d 	.word	0x0000179d
     918:	0000172d 	.word	0x0000172d
     91c:	00000345 	.word	0x00000345
     920:	000017c1 	.word	0x000017c1
     924:	00000155 	.word	0x00000155
     928:	0000017d 	.word	0x0000017d
     92c:	41002000 	.word	0x41002000
     930:	00000391 	.word	0x00000391
     934:	00001899 	.word	0x00001899
     938:	00000a99 	.word	0x00000a99
     93c:	00000c29 	.word	0x00000c29
     940:	20003cd4 	.word	0x20003cd4

00000944 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     944:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     946:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     948:	2a00      	cmp	r2, #0
     94a:	d00e      	beq.n	96a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     94c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     94e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     950:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     952:	2a00      	cmp	r2, #0
     954:	d109      	bne.n	96a <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     956:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     958:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     95a:	2a00      	cmp	r2, #0
     95c:	d1fc      	bne.n	958 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     95e:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     960:	2102      	movs	r1, #2
     962:	7e1a      	ldrb	r2, [r3, #24]
     964:	420a      	tst	r2, r1
     966:	d0fc      	beq.n	962 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     968:	2300      	movs	r3, #0
}
     96a:	0018      	movs	r0, r3
     96c:	4770      	bx	lr
     96e:	46c0      	nop			; (mov r8, r8)

00000970 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     970:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     972:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     974:	2a00      	cmp	r2, #0
     976:	d030      	beq.n	9da <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     978:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     97a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     97c:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     97e:	2a00      	cmp	r2, #0
     980:	d12b      	bne.n	9da <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     982:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     984:	7e10      	ldrb	r0, [r2, #24]
     986:	0740      	lsls	r0, r0, #29
     988:	d527      	bpl.n	9da <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     98a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     98c:	2b00      	cmp	r3, #0
     98e:	d1fc      	bne.n	98a <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     990:	8b53      	ldrh	r3, [r2, #26]
     992:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     994:	0698      	lsls	r0, r3, #26
     996:	d01d      	beq.n	9d4 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     998:	0798      	lsls	r0, r3, #30
     99a:	d503      	bpl.n	9a4 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     99c:	2302      	movs	r3, #2
     99e:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
     9a0:	3318      	adds	r3, #24
     9a2:	e01a      	b.n	9da <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     9a4:	0758      	lsls	r0, r3, #29
     9a6:	d503      	bpl.n	9b0 <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     9a8:	2304      	movs	r3, #4
     9aa:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
     9ac:	331a      	adds	r3, #26
     9ae:	e014      	b.n	9da <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     9b0:	07d8      	lsls	r0, r3, #31
     9b2:	d503      	bpl.n	9bc <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     9b4:	2301      	movs	r3, #1
     9b6:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
     9b8:	3312      	adds	r3, #18
     9ba:	e00e      	b.n	9da <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     9bc:	06d8      	lsls	r0, r3, #27
     9be:	d503      	bpl.n	9c8 <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     9c0:	2310      	movs	r3, #16
     9c2:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
     9c4:	3332      	adds	r3, #50	; 0x32
     9c6:	e008      	b.n	9da <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     9c8:	069b      	lsls	r3, r3, #26
     9ca:	d503      	bpl.n	9d4 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     9cc:	2320      	movs	r3, #32
     9ce:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
     9d0:	3321      	adds	r3, #33	; 0x21
     9d2:	e002      	b.n	9da <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     9d4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     9d6:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     9d8:	2300      	movs	r3, #0
}
     9da:	0018      	movs	r0, r3
     9dc:	4770      	bx	lr
     9de:	46c0      	nop			; (mov r8, r8)

000009e0 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9e2:	464f      	mov	r7, r9
     9e4:	b480      	push	{r7}
     9e6:	b082      	sub	sp, #8
     9e8:	0004      	movs	r4, r0
     9ea:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     9ec:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     9ee:	2a00      	cmp	r2, #0
     9f0:	d049      	beq.n	a86 <usart_write_buffer_wait+0xa6>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     9f2:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
     9f4:	3005      	adds	r0, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     9f6:	2b00      	cmp	r3, #0
     9f8:	d045      	beq.n	a86 <usart_write_buffer_wait+0xa6>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     9fa:	6827      	ldr	r7, [r4, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     9fc:	69fb      	ldr	r3, [r7, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     9fe:	2b00      	cmp	r3, #0
     a00:	d1fc      	bne.n	9fc <usart_write_buffer_wait+0x1c>
     a02:	4691      	mov	r9, r2
     a04:	2500      	movs	r5, #0
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     a06:	2601      	movs	r6, #1
     a08:	e020      	b.n	a4c <usart_write_buffer_wait+0x6c>
     a0a:	7e3a      	ldrb	r2, [r7, #24]
     a0c:	4232      	tst	r2, r6
     a0e:	d104      	bne.n	a1a <usart_write_buffer_wait+0x3a>
				break;
			} else if (i == USART_TIMEOUT) {
     a10:	2b01      	cmp	r3, #1
     a12:	d02a      	beq.n	a6a <usart_write_buffer_wait+0x8a>
     a14:	3b01      	subs	r3, #1

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     a16:	2b00      	cmp	r3, #0
     a18:	d1f7      	bne.n	a0a <usart_write_buffer_wait+0x2a>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     a1a:	1c6a      	adds	r2, r5, #1
     a1c:	b292      	uxth	r2, r2
     a1e:	9b01      	ldr	r3, [sp, #4]
     a20:	5d5b      	ldrb	r3, [r3, r5]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a22:	7961      	ldrb	r1, [r4, #5]
     a24:	2901      	cmp	r1, #1
     a26:	d002      	beq.n	a2e <usart_write_buffer_wait+0x4e>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     a28:	b299      	uxth	r1, r3
     a2a:	0015      	movs	r5, r2
     a2c:	e005      	b.n	a3a <usart_write_buffer_wait+0x5a>

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     a2e:	1ca9      	adds	r1, r5, #2
     a30:	b28d      	uxth	r5, r1
     a32:	9901      	ldr	r1, [sp, #4]
     a34:	5c89      	ldrb	r1, [r1, r2]
     a36:	0209      	lsls	r1, r1, #8
     a38:	4319      	orrs	r1, r3
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
     a3a:	0020      	movs	r0, r4
     a3c:	4b14      	ldr	r3, [pc, #80]	; (a90 <usart_write_buffer_wait+0xb0>)
     a3e:	4798      	blx	r3
     a40:	464a      	mov	r2, r9
     a42:	3a01      	subs	r2, #1
     a44:	b293      	uxth	r3, r2
     a46:	4699      	mov	r9, r3
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
     a48:	2b00      	cmp	r3, #0
     a4a:	d016      	beq.n	a7a <usart_write_buffer_wait+0x9a>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     a4c:	7e3b      	ldrb	r3, [r7, #24]
     a4e:	4233      	tst	r3, r6
     a50:	d1e3      	bne.n	a1a <usart_write_buffer_wait+0x3a>
     a52:	4b10      	ldr	r3, [pc, #64]	; (a94 <usart_write_buffer_wait+0xb4>)
     a54:	e7d9      	b.n	a0a <usart_write_buffer_wait+0x2a>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     a56:	7e3a      	ldrb	r2, [r7, #24]
     a58:	420a      	tst	r2, r1
     a5a:	d108      	bne.n	a6e <usart_write_buffer_wait+0x8e>
			break;
		} else if (i == USART_TIMEOUT) {
     a5c:	2b01      	cmp	r3, #1
     a5e:	d008      	beq.n	a72 <usart_write_buffer_wait+0x92>
     a60:	3b01      	subs	r3, #1
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     a62:	2b00      	cmp	r3, #0
     a64:	d1f7      	bne.n	a56 <usart_write_buffer_wait+0x76>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
     a66:	2000      	movs	r0, #0
     a68:	e00d      	b.n	a86 <usart_write_buffer_wait+0xa6>
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
     a6a:	2012      	movs	r0, #18
     a6c:	e00b      	b.n	a86 <usart_write_buffer_wait+0xa6>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
     a6e:	2000      	movs	r0, #0
     a70:	e009      	b.n	a86 <usart_write_buffer_wait+0xa6>
	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
     a72:	2012      	movs	r0, #18
     a74:	e007      	b.n	a86 <usart_write_buffer_wait+0xa6>
		}
	}

	return STATUS_OK;
     a76:	2000      	movs	r0, #0
     a78:	e005      	b.n	a86 <usart_write_buffer_wait+0xa6>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     a7a:	7e3b      	ldrb	r3, [r7, #24]
     a7c:	079b      	lsls	r3, r3, #30
     a7e:	d4fa      	bmi.n	a76 <usart_write_buffer_wait+0x96>
     a80:	4b04      	ldr	r3, [pc, #16]	; (a94 <usart_write_buffer_wait+0xb4>)
     a82:	2102      	movs	r1, #2
     a84:	e7e7      	b.n	a56 <usart_write_buffer_wait+0x76>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     a86:	b002      	add	sp, #8
     a88:	bc04      	pop	{r2}
     a8a:	4691      	mov	r9, r2
     a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a8e:	46c0      	nop			; (mov r8, r8)
     a90:	00000945 	.word	0x00000945
     a94:	0000ffff 	.word	0x0000ffff

00000a98 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     a9a:	0080      	lsls	r0, r0, #2
     a9c:	4b60      	ldr	r3, [pc, #384]	; (c20 <_usart_interrupt_handler+0x188>)
     a9e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     aa0:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     aa2:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     aa4:	2b00      	cmp	r3, #0
     aa6:	d1fc      	bne.n	aa2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     aa8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     aaa:	7da6      	ldrb	r6, [r4, #22]
     aac:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     aae:	2330      	movs	r3, #48	; 0x30
     ab0:	5ceb      	ldrb	r3, [r5, r3]
     ab2:	2231      	movs	r2, #49	; 0x31
     ab4:	5caf      	ldrb	r7, [r5, r2]
     ab6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     ab8:	07f3      	lsls	r3, r6, #31
     aba:	d522      	bpl.n	b02 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     abc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     abe:	b29b      	uxth	r3, r3
     ac0:	2b00      	cmp	r3, #0
     ac2:	d01c      	beq.n	afe <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     ac4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     ac6:	7813      	ldrb	r3, [r2, #0]
     ac8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     aca:	1c51      	adds	r1, r2, #1
     acc:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     ace:	7969      	ldrb	r1, [r5, #5]
     ad0:	2901      	cmp	r1, #1
     ad2:	d001      	beq.n	ad8 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     ad4:	b29b      	uxth	r3, r3
     ad6:	e004      	b.n	ae2 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     ad8:	7851      	ldrb	r1, [r2, #1]
     ada:	0209      	lsls	r1, r1, #8
     adc:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     ade:	3202      	adds	r2, #2
     ae0:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     ae2:	05db      	lsls	r3, r3, #23
     ae4:	0ddb      	lsrs	r3, r3, #23
     ae6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     ae8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     aea:	3b01      	subs	r3, #1
     aec:	b29b      	uxth	r3, r3
     aee:	85eb      	strh	r3, [r5, #46]	; 0x2e
     af0:	2b00      	cmp	r3, #0
     af2:	d106      	bne.n	b02 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     af4:	3301      	adds	r3, #1
     af6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     af8:	3301      	adds	r3, #1
     afa:	75a3      	strb	r3, [r4, #22]
     afc:	e001      	b.n	b02 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     afe:	2301      	movs	r3, #1
     b00:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     b02:	07b3      	lsls	r3, r6, #30
     b04:	d509      	bpl.n	b1a <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     b06:	2302      	movs	r3, #2
     b08:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     b0a:	2200      	movs	r2, #0
     b0c:	3331      	adds	r3, #49	; 0x31
     b0e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     b10:	07fb      	lsls	r3, r7, #31
     b12:	d502      	bpl.n	b1a <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     b14:	0028      	movs	r0, r5
     b16:	68eb      	ldr	r3, [r5, #12]
     b18:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     b1a:	0773      	lsls	r3, r6, #29
     b1c:	d560      	bpl.n	be0 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
     b1e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     b20:	b29b      	uxth	r3, r3
     b22:	2b00      	cmp	r3, #0
     b24:	d05a      	beq.n	bdc <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b26:	8b63      	ldrh	r3, [r4, #26]
     b28:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     b2a:	071a      	lsls	r2, r3, #28
     b2c:	d402      	bmi.n	b34 <_usart_interrupt_handler+0x9c>
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b2e:	223f      	movs	r2, #63	; 0x3f
     b30:	4013      	ands	r3, r2
     b32:	e001      	b.n	b38 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     b34:	2237      	movs	r2, #55	; 0x37
     b36:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     b38:	2b00      	cmp	r3, #0
     b3a:	d02d      	beq.n	b98 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     b3c:	079a      	lsls	r2, r3, #30
     b3e:	d505      	bpl.n	b4c <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     b40:	221a      	movs	r2, #26
     b42:	2332      	movs	r3, #50	; 0x32
     b44:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     b46:	3b30      	subs	r3, #48	; 0x30
     b48:	8363      	strh	r3, [r4, #26]
     b4a:	e01f      	b.n	b8c <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     b4c:	075a      	lsls	r2, r3, #29
     b4e:	d505      	bpl.n	b5c <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     b50:	221e      	movs	r2, #30
     b52:	2332      	movs	r3, #50	; 0x32
     b54:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     b56:	3b2e      	subs	r3, #46	; 0x2e
     b58:	8363      	strh	r3, [r4, #26]
     b5a:	e017      	b.n	b8c <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     b5c:	07da      	lsls	r2, r3, #31
     b5e:	d505      	bpl.n	b6c <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     b60:	2213      	movs	r2, #19
     b62:	2332      	movs	r3, #50	; 0x32
     b64:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     b66:	3b31      	subs	r3, #49	; 0x31
     b68:	8363      	strh	r3, [r4, #26]
     b6a:	e00f      	b.n	b8c <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     b6c:	06da      	lsls	r2, r3, #27
     b6e:	d505      	bpl.n	b7c <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     b70:	2242      	movs	r2, #66	; 0x42
     b72:	2332      	movs	r3, #50	; 0x32
     b74:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     b76:	3b22      	subs	r3, #34	; 0x22
     b78:	8363      	strh	r3, [r4, #26]
     b7a:	e007      	b.n	b8c <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     b7c:	2220      	movs	r2, #32
     b7e:	421a      	tst	r2, r3
     b80:	d004      	beq.n	b8c <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     b82:	3221      	adds	r2, #33	; 0x21
     b84:	2332      	movs	r3, #50	; 0x32
     b86:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     b88:	3b12      	subs	r3, #18
     b8a:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     b8c:	077b      	lsls	r3, r7, #29
     b8e:	d527      	bpl.n	be0 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     b90:	0028      	movs	r0, r5
     b92:	696b      	ldr	r3, [r5, #20]
     b94:	4798      	blx	r3
     b96:	e023      	b.n	be0 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     b98:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     b9a:	05db      	lsls	r3, r3, #23
     b9c:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     b9e:	b2da      	uxtb	r2, r3
     ba0:	6a69      	ldr	r1, [r5, #36]	; 0x24
     ba2:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     ba4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     ba6:	1c51      	adds	r1, r2, #1
     ba8:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     baa:	7969      	ldrb	r1, [r5, #5]
     bac:	2901      	cmp	r1, #1
     bae:	d104      	bne.n	bba <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     bb0:	0a1b      	lsrs	r3, r3, #8
     bb2:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     bb4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     bb6:	3301      	adds	r3, #1
     bb8:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     bba:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     bbc:	3b01      	subs	r3, #1
     bbe:	b29b      	uxth	r3, r3
     bc0:	85ab      	strh	r3, [r5, #44]	; 0x2c
     bc2:	2b00      	cmp	r3, #0
     bc4:	d10c      	bne.n	be0 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     bc6:	3304      	adds	r3, #4
     bc8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     bca:	2200      	movs	r2, #0
     bcc:	332e      	adds	r3, #46	; 0x2e
     bce:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     bd0:	07bb      	lsls	r3, r7, #30
     bd2:	d505      	bpl.n	be0 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     bd4:	0028      	movs	r0, r5
     bd6:	692b      	ldr	r3, [r5, #16]
     bd8:	4798      	blx	r3
     bda:	e001      	b.n	be0 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     bdc:	2304      	movs	r3, #4
     bde:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     be0:	06f3      	lsls	r3, r6, #27
     be2:	d507      	bpl.n	bf4 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     be4:	2310      	movs	r3, #16
     be6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     be8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     bea:	06fb      	lsls	r3, r7, #27
     bec:	d502      	bpl.n	bf4 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     bee:	0028      	movs	r0, r5
     bf0:	69eb      	ldr	r3, [r5, #28]
     bf2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     bf4:	06b3      	lsls	r3, r6, #26
     bf6:	d507      	bpl.n	c08 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     bf8:	2320      	movs	r3, #32
     bfa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     bfc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     bfe:	073b      	lsls	r3, r7, #28
     c00:	d502      	bpl.n	c08 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     c02:	0028      	movs	r0, r5
     c04:	69ab      	ldr	r3, [r5, #24]
     c06:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     c08:	0733      	lsls	r3, r6, #28
     c0a:	d507      	bpl.n	c1c <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     c0c:	2308      	movs	r3, #8
     c0e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     c10:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     c12:	06bb      	lsls	r3, r7, #26
     c14:	d502      	bpl.n	c1c <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     c16:	6a2b      	ldr	r3, [r5, #32]
     c18:	0028      	movs	r0, r5
     c1a:	4798      	blx	r3
		}
	}
#endif
}
     c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c1e:	46c0      	nop			; (mov r8, r8)
     c20:	20003cd4 	.word	0x20003cd4

00000c24 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     c24:	4770      	bx	lr
     c26:	46c0      	nop			; (mov r8, r8)

00000c28 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     c28:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     c2a:	4b0a      	ldr	r3, [pc, #40]	; (c54 <_sercom_set_handler+0x2c>)
     c2c:	781b      	ldrb	r3, [r3, #0]
     c2e:	2b00      	cmp	r3, #0
     c30:	d10c      	bne.n	c4c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c32:	4f09      	ldr	r7, [pc, #36]	; (c58 <_sercom_set_handler+0x30>)
     c34:	4e09      	ldr	r6, [pc, #36]	; (c5c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     c36:	4d0a      	ldr	r5, [pc, #40]	; (c60 <_sercom_set_handler+0x38>)
     c38:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c3a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     c3c:	195a      	adds	r2, r3, r5
     c3e:	6014      	str	r4, [r2, #0]
     c40:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c42:	2b18      	cmp	r3, #24
     c44:	d1f9      	bne.n	c3a <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     c46:	2201      	movs	r2, #1
     c48:	4b02      	ldr	r3, [pc, #8]	; (c54 <_sercom_set_handler+0x2c>)
     c4a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     c4c:	0080      	lsls	r0, r0, #2
     c4e:	4b02      	ldr	r3, [pc, #8]	; (c58 <_sercom_set_handler+0x30>)
     c50:	50c1      	str	r1, [r0, r3]
}
     c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c54:	2000009a 	.word	0x2000009a
     c58:	2000009c 	.word	0x2000009c
     c5c:	00000c25 	.word	0x00000c25
     c60:	20003cd4 	.word	0x20003cd4

00000c64 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     c64:	b510      	push	{r4, lr}
     c66:	b082      	sub	sp, #8
     c68:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     c6a:	2206      	movs	r2, #6
     c6c:	4905      	ldr	r1, [pc, #20]	; (c84 <_sercom_get_interrupt_vector+0x20>)
     c6e:	4668      	mov	r0, sp
     c70:	4b05      	ldr	r3, [pc, #20]	; (c88 <_sercom_get_interrupt_vector+0x24>)
     c72:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     c74:	0020      	movs	r0, r4
     c76:	4b05      	ldr	r3, [pc, #20]	; (c8c <_sercom_get_interrupt_vector+0x28>)
     c78:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     c7a:	466b      	mov	r3, sp
     c7c:	5618      	ldrsb	r0, [r3, r0]
}
     c7e:	b002      	add	sp, #8
     c80:	bd10      	pop	{r4, pc}
     c82:	46c0      	nop			; (mov r8, r8)
     c84:	00003e9c 	.word	0x00003e9c
     c88:	000036cd 	.word	0x000036cd
     c8c:	00000515 	.word	0x00000515

00000c90 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     c90:	b510      	push	{r4, lr}
     c92:	4b02      	ldr	r3, [pc, #8]	; (c9c <SERCOM0_Handler+0xc>)
     c94:	681b      	ldr	r3, [r3, #0]
     c96:	2000      	movs	r0, #0
     c98:	4798      	blx	r3
     c9a:	bd10      	pop	{r4, pc}
     c9c:	2000009c 	.word	0x2000009c

00000ca0 <SERCOM1_Handler>:
     ca0:	b510      	push	{r4, lr}
     ca2:	4b02      	ldr	r3, [pc, #8]	; (cac <SERCOM1_Handler+0xc>)
     ca4:	685b      	ldr	r3, [r3, #4]
     ca6:	2001      	movs	r0, #1
     ca8:	4798      	blx	r3
     caa:	bd10      	pop	{r4, pc}
     cac:	2000009c 	.word	0x2000009c

00000cb0 <SERCOM2_Handler>:
     cb0:	b510      	push	{r4, lr}
     cb2:	4b02      	ldr	r3, [pc, #8]	; (cbc <SERCOM2_Handler+0xc>)
     cb4:	689b      	ldr	r3, [r3, #8]
     cb6:	2002      	movs	r0, #2
     cb8:	4798      	blx	r3
     cba:	bd10      	pop	{r4, pc}
     cbc:	2000009c 	.word	0x2000009c

00000cc0 <SERCOM3_Handler>:
     cc0:	b510      	push	{r4, lr}
     cc2:	4b02      	ldr	r3, [pc, #8]	; (ccc <SERCOM3_Handler+0xc>)
     cc4:	68db      	ldr	r3, [r3, #12]
     cc6:	2003      	movs	r0, #3
     cc8:	4798      	blx	r3
     cca:	bd10      	pop	{r4, pc}
     ccc:	2000009c 	.word	0x2000009c

00000cd0 <SERCOM4_Handler>:
     cd0:	b510      	push	{r4, lr}
     cd2:	4b02      	ldr	r3, [pc, #8]	; (cdc <SERCOM4_Handler+0xc>)
     cd4:	691b      	ldr	r3, [r3, #16]
     cd6:	2004      	movs	r0, #4
     cd8:	4798      	blx	r3
     cda:	bd10      	pop	{r4, pc}
     cdc:	2000009c 	.word	0x2000009c

00000ce0 <SERCOM5_Handler>:
     ce0:	b510      	push	{r4, lr}
     ce2:	4b02      	ldr	r3, [pc, #8]	; (cec <SERCOM5_Handler+0xc>)
     ce4:	695b      	ldr	r3, [r3, #20]
     ce6:	2005      	movs	r0, #5
     ce8:	4798      	blx	r3
     cea:	bd10      	pop	{r4, pc}
     cec:	2000009c 	.word	0x2000009c

00000cf0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     cf0:	4b0c      	ldr	r3, [pc, #48]	; (d24 <cpu_irq_enter_critical+0x34>)
     cf2:	681b      	ldr	r3, [r3, #0]
     cf4:	2b00      	cmp	r3, #0
     cf6:	d110      	bne.n	d1a <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     cf8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     cfc:	2b00      	cmp	r3, #0
     cfe:	d109      	bne.n	d14 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     d00:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     d02:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     d06:	2200      	movs	r2, #0
     d08:	4b07      	ldr	r3, [pc, #28]	; (d28 <cpu_irq_enter_critical+0x38>)
     d0a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     d0c:	3201      	adds	r2, #1
     d0e:	4b07      	ldr	r3, [pc, #28]	; (d2c <cpu_irq_enter_critical+0x3c>)
     d10:	701a      	strb	r2, [r3, #0]
     d12:	e002      	b.n	d1a <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     d14:	2200      	movs	r2, #0
     d16:	4b05      	ldr	r3, [pc, #20]	; (d2c <cpu_irq_enter_critical+0x3c>)
     d18:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     d1a:	4a02      	ldr	r2, [pc, #8]	; (d24 <cpu_irq_enter_critical+0x34>)
     d1c:	6813      	ldr	r3, [r2, #0]
     d1e:	3301      	adds	r3, #1
     d20:	6013      	str	r3, [r2, #0]
}
     d22:	4770      	bx	lr
     d24:	200000b4 	.word	0x200000b4
     d28:	20000008 	.word	0x20000008
     d2c:	200000b8 	.word	0x200000b8

00000d30 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     d30:	4b08      	ldr	r3, [pc, #32]	; (d54 <cpu_irq_leave_critical+0x24>)
     d32:	681a      	ldr	r2, [r3, #0]
     d34:	3a01      	subs	r2, #1
     d36:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     d38:	681b      	ldr	r3, [r3, #0]
     d3a:	2b00      	cmp	r3, #0
     d3c:	d109      	bne.n	d52 <cpu_irq_leave_critical+0x22>
     d3e:	4b06      	ldr	r3, [pc, #24]	; (d58 <cpu_irq_leave_critical+0x28>)
     d40:	781b      	ldrb	r3, [r3, #0]
     d42:	2b00      	cmp	r3, #0
     d44:	d005      	beq.n	d52 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     d46:	2201      	movs	r2, #1
     d48:	4b04      	ldr	r3, [pc, #16]	; (d5c <cpu_irq_leave_critical+0x2c>)
     d4a:	701a      	strb	r2, [r3, #0]
     d4c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     d50:	b662      	cpsie	i
	}
}
     d52:	4770      	bx	lr
     d54:	200000b4 	.word	0x200000b4
     d58:	200000b8 	.word	0x200000b8
     d5c:	20000008 	.word	0x20000008

00000d60 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     d60:	b5f0      	push	{r4, r5, r6, r7, lr}
     d62:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     d64:	ac01      	add	r4, sp, #4
     d66:	2501      	movs	r5, #1
     d68:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     d6a:	2700      	movs	r7, #0
     d6c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     d6e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     d70:	0021      	movs	r1, r4
     d72:	202a      	movs	r0, #42	; 0x2a
     d74:	4e06      	ldr	r6, [pc, #24]	; (d90 <system_board_init+0x30>)
     d76:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     d78:	2280      	movs	r2, #128	; 0x80
     d7a:	00d2      	lsls	r2, r2, #3
     d7c:	4b05      	ldr	r3, [pc, #20]	; (d94 <system_board_init+0x34>)
     d7e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     d80:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     d82:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     d84:	0021      	movs	r1, r4
     d86:	2002      	movs	r0, #2
     d88:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     d8a:	b003      	add	sp, #12
     d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d8e:	46c0      	nop			; (mov r8, r8)
     d90:	000013f9 	.word	0x000013f9
     d94:	40002880 	.word	0x40002880

00000d98 <_adc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     d98:	2000      	movs	r0, #0
     d9a:	4770      	bx	lr

00000d9c <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     d9c:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     d9e:	2300      	movs	r3, #0
     da0:	2200      	movs	r2, #0
     da2:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     da4:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     da6:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     da8:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     daa:	2100      	movs	r1, #0
     dac:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     dae:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     db0:	61c3      	str	r3, [r0, #28]
#if SAMR30
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
     db2:	2401      	movs	r4, #1
     db4:	7104      	strb	r4, [r0, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     db6:	24c0      	movs	r4, #192	; 0xc0
     db8:	0164      	lsls	r4, r4, #5
     dba:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     dbc:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     dbe:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
     dc0:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
     dc2:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
     dc4:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     dc6:	242a      	movs	r4, #42	; 0x2a
     dc8:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
     dca:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
     dcc:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
     dce:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
     dd0:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
     dd2:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
     dd4:	3c06      	subs	r4, #6
     dd6:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     dd8:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     dda:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     ddc:	7541      	strb	r1, [r0, #21]
}
     dde:	bd10      	pop	{r4, pc}

00000de0 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     de0:	b5f0      	push	{r4, r5, r6, r7, lr}
     de2:	464f      	mov	r7, r9
     de4:	b480      	push	{r7}
     de6:	b09a      	sub	sp, #104	; 0x68
     de8:	0005      	movs	r5, r0
     dea:	000c      	movs	r4, r1
     dec:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     dee:	0008      	movs	r0, r1
     df0:	4ba9      	ldr	r3, [pc, #676]	; (1098 <adc_init+0x2b8>)
     df2:	4798      	blx	r3

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     df4:	602c      	str	r4, [r5, #0]
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     df6:	4aa9      	ldr	r2, [pc, #676]	; (109c <adc_init+0x2bc>)
     df8:	6a11      	ldr	r1, [r2, #32]
     dfa:	2308      	movs	r3, #8
     dfc:	430b      	orrs	r3, r1
     dfe:	6213      	str	r3, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     e00:	7822      	ldrb	r2, [r4, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     e02:	2305      	movs	r3, #5
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     e04:	07d2      	lsls	r2, r2, #31
     e06:	d500      	bpl.n	e0a <adc_init+0x2a>
     e08:	e1c9      	b.n	119e <adc_init+0x3be>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     e0a:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     e0c:	8c13      	ldrh	r3, [r2, #32]
     e0e:	b29b      	uxth	r3, r3
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	while (adc_is_syncing(module_inst)) {
     e10:	2b00      	cmp	r3, #0
     e12:	d1fb      	bne.n	e0c <adc_init+0x2c>
		/* Wait for synchronization */
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     e14:	7822      	ldrb	r2, [r4, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     e16:	331c      	adds	r3, #28

	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     e18:	0792      	lsls	r2, r2, #30
     e1a:	d500      	bpl.n	e1e <adc_init+0x3e>
     e1c:	e1bf      	b.n	119e <adc_init+0x3be>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     e1e:	7873      	ldrb	r3, [r6, #1]
     e20:	712b      	strb	r3, [r5, #4]

	/* Make sure the voltage reference is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     e22:	2b00      	cmp	r3, #0
     e24:	d104      	bne.n	e30 <adc_init+0x50>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     e26:	4a9e      	ldr	r2, [pc, #632]	; (10a0 <adc_init+0x2c0>)
     e28:	69d1      	ldr	r1, [r2, #28]
     e2a:	3304      	adds	r3, #4
     e2c:	430b      	orrs	r3, r1
     e2e:	61d3      	str	r3, [r2, #28]
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
		module_inst->callback[i] = NULL;
     e30:	2300      	movs	r3, #0
     e32:	60ab      	str	r3, [r5, #8]
     e34:	60eb      	str	r3, [r5, #12]
     e36:	612b      	str	r3, [r5, #16]
	};

	module_inst->registered_callback_mask = 0;
     e38:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
     e3a:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
     e3c:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
     e3e:	772b      	strb	r3, [r5, #28]

	_adc_instances[instance] = module_inst;
     e40:	0080      	lsls	r0, r0, #2
     e42:	4b98      	ldr	r3, [pc, #608]	; (10a4 <adc_init+0x2c4>)
     e44:	50c5      	str	r5, [r0, r3]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     e46:	232a      	movs	r3, #42	; 0x2a
     e48:	5cf3      	ldrb	r3, [r6, r3]
     e4a:	2b00      	cmp	r3, #0
     e4c:	d105      	bne.n	e5a <adc_init+0x7a>
     e4e:	7b33      	ldrb	r3, [r6, #12]
     e50:	2b00      	cmp	r3, #0
     e52:	d102      	bne.n	e5a <adc_init+0x7a>
			!config->freerunning) {
		module_inst->software_trigger = true;
     e54:	3301      	adds	r3, #1
     e56:	776b      	strb	r3, [r5, #29]
     e58:	e001      	b.n	e5e <adc_init+0x7e>
	} else {
		module_inst->software_trigger = false;
     e5a:	2300      	movs	r3, #0
     e5c:	776b      	strb	r3, [r5, #29]
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     e5e:	682f      	ldr	r7, [r5, #0]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     e60:	7833      	ldrb	r3, [r6, #0]
     e62:	466a      	mov	r2, sp
     e64:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     e66:	4669      	mov	r1, sp
     e68:	201e      	movs	r0, #30
     e6a:	4b8f      	ldr	r3, [pc, #572]	; (10a8 <adc_init+0x2c8>)
     e6c:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     e6e:	201e      	movs	r0, #30
     e70:	4b8e      	ldr	r3, [pc, #568]	; (10ac <adc_init+0x2cc>)
     e72:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
     e74:	7934      	ldrb	r4, [r6, #4]
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30)
	const uint32_t pinmapping[] = {
     e76:	2260      	movs	r2, #96	; 0x60
     e78:	498d      	ldr	r1, [pc, #564]	; (10b0 <adc_init+0x2d0>)
     e7a:	a802      	add	r0, sp, #8
     e7c:	4b8d      	ldr	r3, [pc, #564]	; (10b4 <adc_init+0x2d4>)
     e7e:	4798      	blx	r3
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
     e80:	2c13      	cmp	r4, #19
     e82:	d80c      	bhi.n	e9e <adc_init+0xbe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     e84:	00a4      	lsls	r4, r4, #2
     e86:	ab02      	add	r3, sp, #8
     e88:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e8a:	a901      	add	r1, sp, #4
     e8c:	2300      	movs	r3, #0
     e8e:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     e90:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     e92:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     e94:	3301      	adds	r3, #1
     e96:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     e98:	b2c0      	uxtb	r0, r0
     e9a:	4b87      	ldr	r3, [pc, #540]	; (10b8 <adc_init+0x2d8>)
     e9c:	4798      	blx	r3
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
	system_gclk_chan_enable(_adc_gclk_ids[index]);

	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);
     e9e:	88f4      	ldrh	r4, [r6, #6]
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30)
	const uint32_t pinmapping[] = {
     ea0:	2260      	movs	r2, #96	; 0x60
     ea2:	4983      	ldr	r1, [pc, #524]	; (10b0 <adc_init+0x2d0>)
     ea4:	a802      	add	r0, sp, #8
     ea6:	4b83      	ldr	r3, [pc, #524]	; (10b4 <adc_init+0x2d4>)
     ea8:	4798      	blx	r3
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
     eaa:	2c13      	cmp	r4, #19
     eac:	d80c      	bhi.n	ec8 <adc_init+0xe8>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     eae:	00a4      	lsls	r4, r4, #2
     eb0:	ab02      	add	r3, sp, #8
     eb2:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     eb4:	a901      	add	r1, sp, #4
     eb6:	2300      	movs	r3, #0
     eb8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     eba:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     ebc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     ebe:	3301      	adds	r3, #1
     ec0:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     ec2:	b2c0      	uxtb	r0, r0
     ec4:	4b7c      	ldr	r3, [pc, #496]	; (10b8 <adc_init+0x2d8>)
     ec6:	4798      	blx	r3
     ec8:	2400      	movs	r4, #0
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30)
	const uint32_t pinmapping[] = {
     eca:	4b7a      	ldr	r3, [pc, #488]	; (10b4 <adc_init+0x2d4>)
     ecc:	4699      	mov	r9, r3
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     ece:	2301      	movs	r3, #1
     ed0:	40a3      	lsls	r3, r4
     ed2:	6932      	ldr	r2, [r6, #16]
     ed4:	421a      	tst	r2, r3
     ed6:	d012      	beq.n	efe <adc_init+0x11e>
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30)
	const uint32_t pinmapping[] = {
     ed8:	2260      	movs	r2, #96	; 0x60
     eda:	4975      	ldr	r1, [pc, #468]	; (10b0 <adc_init+0x2d0>)
     edc:	a802      	add	r0, sp, #8
     ede:	47c8      	blx	r9
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
     ee0:	2c13      	cmp	r4, #19
     ee2:	d80c      	bhi.n	efe <adc_init+0x11e>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     ee4:	00a3      	lsls	r3, r4, #2
     ee6:	aa02      	add	r2, sp, #8
     ee8:	5898      	ldr	r0, [r3, r2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     eea:	a901      	add	r1, sp, #4
     eec:	2300      	movs	r3, #0
     eee:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     ef0:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     ef2:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     ef4:	3301      	adds	r3, #1
     ef6:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     ef8:	b2c0      	uxtb	r0, r0
     efa:	4b6f      	ldr	r3, [pc, #444]	; (10b8 <adc_init+0x2d8>)
     efc:	4798      	blx	r3
     efe:	3401      	adds	r4, #1
	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     f00:	2c14      	cmp	r4, #20
     f02:	d1e4      	bne.n	ece <adc_init+0xee>
			_adc_configure_ain_pin(index, i);
		}
	}

	/* Configure run in standby and on demand */
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     f04:	7b73      	ldrb	r3, [r6, #13]
     f06:	019a      	lsls	r2, r3, #6
     f08:	7bb3      	ldrb	r3, [r6, #14]
     f0a:	01db      	lsls	r3, r3, #7
     f0c:	4313      	orrs	r3, r2
     f0e:	b2db      	uxtb	r3, r3
     f10:	703b      	strb	r3, [r7, #0]
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;

	/* Configure reference */
	adc_module->REFCTRL.reg =
     f12:	7d33      	ldrb	r3, [r6, #20]
     f14:	01db      	lsls	r3, r3, #7
     f16:	7872      	ldrb	r2, [r6, #1]
     f18:	4313      	orrs	r3, r2
     f1a:	b2db      	uxtb	r3, r3
     f1c:	70bb      	strb	r3, [r7, #2]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
			| (config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     f1e:	78f3      	ldrb	r3, [r6, #3]
     f20:	2b34      	cmp	r3, #52	; 0x34
     f22:	d900      	bls.n	f26 <adc_init+0x146>
     f24:	e13a      	b.n	119c <adc_init+0x3bc>
     f26:	009b      	lsls	r3, r3, #2
     f28:	4a64      	ldr	r2, [pc, #400]	; (10bc <adc_init+0x2dc>)
     f2a:	58d3      	ldr	r3, [r2, r3]
     f2c:	469f      	mov	pc, r3
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     f2e:	2004      	movs	r0, #4
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     f30:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     f32:	2202      	movs	r2, #2
     f34:	e01a      	b.n	f6c <adc_init+0x18c>

	/* Set adjusting result and number of samples */
	switch (config->resolution) {

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     f36:	7a72      	ldrb	r2, [r6, #9]
		accumulate = config->accumulate_samples;
     f38:	7a30      	ldrb	r0, [r6, #8]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     f3a:	2110      	movs	r1, #16
     f3c:	e016      	b.n	f6c <adc_init+0x18c>
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     f3e:	2006      	movs	r0, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     f40:	2110      	movs	r1, #16
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     f42:	2201      	movs	r2, #1
     f44:	e012      	b.n	f6c <adc_init+0x18c>
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     f46:	2008      	movs	r0, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     f48:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     f4a:	2200      	movs	r2, #0
     f4c:	e00e      	b.n	f6c <adc_init+0x18c>
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     f4e:	2000      	movs	r0, #0
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     f50:	2130      	movs	r1, #48	; 0x30
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     f52:	2200      	movs	r2, #0
     f54:	e00a      	b.n	f6c <adc_init+0x18c>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     f56:	2000      	movs	r0, #0
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     f58:	2120      	movs	r1, #32
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     f5a:	2200      	movs	r2, #0
     f5c:	e006      	b.n	f6c <adc_init+0x18c>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     f5e:	2000      	movs	r0, #0
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     f60:	2100      	movs	r1, #0
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     f62:	2200      	movs	r2, #0
     f64:	e002      	b.n	f6c <adc_init+0x18c>
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     f66:	2002      	movs	r0, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     f68:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     f6a:	2201      	movs	r2, #1
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     f6c:	0112      	lsls	r2, r2, #4
     f6e:	2370      	movs	r3, #112	; 0x70
     f70:	4013      	ands	r3, r2
     f72:	4303      	orrs	r3, r0
     f74:	733b      	strb	r3, [r7, #12]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     f76:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     f78:	8c13      	ldrh	r3, [r2, #32]
     f7a:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     f7c:	2b00      	cmp	r3, #0
     f7e:	d1fb      	bne.n	f78 <adc_init+0x198>
		/* Wait for synchronization */
	}

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     f80:	7d72      	ldrb	r2, [r6, #21]
		return STATUS_ERR_INVALID_ARG;
     f82:	3317      	adds	r3, #23
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     f84:	2a3f      	cmp	r2, #63	; 0x3f
     f86:	d900      	bls.n	f8a <adc_init+0x1aa>
     f88:	e109      	b.n	119e <adc_init+0x3be>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     f8a:	7bf3      	ldrb	r3, [r6, #15]
     f8c:	01db      	lsls	r3, r3, #7
     f8e:	431a      	orrs	r2, r3
     f90:	b2d2      	uxtb	r2, r2
     f92:	737a      	strb	r2, [r7, #13]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     f94:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     f96:	8c13      	ldrh	r3, [r2, #32]
     f98:	b29b      	uxth	r3, r3
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos)
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
	}

	while (adc_is_syncing(module_inst)) {
     f9a:	2b00      	cmp	r3, #0
     f9c:	d1fb      	bne.n	f96 <adc_init+0x1b6>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler;
     f9e:	78b3      	ldrb	r3, [r6, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     fa0:	707b      	strb	r3, [r7, #1]
			config->clock_prescaler;
	adc_module->CTRLC.reg =
			resolution |
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     fa2:	2324      	movs	r3, #36	; 0x24
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler;
	adc_module->CTRLC.reg =
     fa4:	5cf2      	ldrb	r2, [r6, r3]
     fa6:	00d2      	lsls	r2, r2, #3
     fa8:	7b33      	ldrb	r3, [r6, #12]
     faa:	009b      	lsls	r3, r3, #2
     fac:	4313      	orrs	r3, r2
     fae:	7af2      	ldrb	r2, [r6, #11]
     fb0:	431a      	orrs	r2, r3
     fb2:	7ab3      	ldrb	r3, [r6, #10]
     fb4:	005b      	lsls	r3, r3, #1
     fb6:	4313      	orrs	r3, r2
     fb8:	430b      	orrs	r3, r1
     fba:	817b      	strh	r3, [r7, #10]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     fbc:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     fbe:	8c13      	ldrh	r3, [r2, #32]
     fc0:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);

	while (adc_is_syncing(module_inst)) {
     fc2:	2b00      	cmp	r3, #0
     fc4:	d1fb      	bne.n	fbe <adc_init+0x1de>
		/* Wait for synchronization */
	}

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     fc6:	8b32      	ldrh	r2, [r6, #24]
     fc8:	2a00      	cmp	r2, #0
     fca:	d100      	bne.n	fce <adc_init+0x1ee>
     fcc:	e098      	b.n	1100 <adc_init+0x320>
		switch (resolution) {
     fce:	2910      	cmp	r1, #16
     fd0:	d07a      	beq.n	10c8 <adc_init+0x2e8>
     fd2:	d802      	bhi.n	fda <adc_init+0x1fa>
     fd4:	2900      	cmp	r1, #0
     fd6:	d03e      	beq.n	1056 <adc_init+0x276>
     fd8:	e092      	b.n	1100 <adc_init+0x320>
     fda:	2920      	cmp	r1, #32
     fdc:	d01a      	beq.n	1014 <adc_init+0x234>
     fde:	2930      	cmp	r1, #48	; 0x30
     fe0:	d000      	beq.n	fe4 <adc_init+0x204>
     fe2:	e08d      	b.n	1100 <adc_init+0x320>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     fe4:	7af3      	ldrb	r3, [r6, #11]
     fe6:	2b00      	cmp	r3, #0
     fe8:	d00a      	beq.n	1000 <adc_init+0x220>
     fea:	69f1      	ldr	r1, [r6, #28]
     fec:	3180      	adds	r1, #128	; 0x80
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     fee:	2317      	movs	r3, #23

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     ff0:	29ff      	cmp	r1, #255	; 0xff
     ff2:	d900      	bls.n	ff6 <adc_init+0x216>
     ff4:	e0d3      	b.n	119e <adc_init+0x3be>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     ff6:	6a31      	ldr	r1, [r6, #32]
     ff8:	3180      	adds	r1, #128	; 0x80
     ffa:	29ff      	cmp	r1, #255	; 0xff
     ffc:	d900      	bls.n	1000 <adc_init+0x220>
     ffe:	e0ce      	b.n	119e <adc_init+0x3be>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1000:	2317      	movs	r3, #23
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
    1002:	69f1      	ldr	r1, [r6, #28]
    1004:	29ff      	cmp	r1, #255	; 0xff
    1006:	dd00      	ble.n	100a <adc_init+0x22a>
    1008:	e0c9      	b.n	119e <adc_init+0x3be>
    100a:	6a31      	ldr	r1, [r6, #32]
    100c:	29ff      	cmp	r1, #255	; 0xff
    100e:	dd00      	ble.n	1012 <adc_init+0x232>
    1010:	e0c5      	b.n	119e <adc_init+0x3be>
    1012:	e075      	b.n	1100 <adc_init+0x320>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    1014:	7af3      	ldrb	r3, [r6, #11]
    1016:	2b00      	cmp	r3, #0
    1018:	d012      	beq.n	1040 <adc_init+0x260>
    101a:	69f3      	ldr	r3, [r6, #28]
    101c:	2080      	movs	r0, #128	; 0x80
    101e:	0080      	lsls	r0, r0, #2
    1020:	4684      	mov	ip, r0
    1022:	4463      	add	r3, ip
    1024:	0019      	movs	r1, r3
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1026:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    1028:	4825      	ldr	r0, [pc, #148]	; (10c0 <adc_init+0x2e0>)
    102a:	4281      	cmp	r1, r0
    102c:	d900      	bls.n	1030 <adc_init+0x250>
    102e:	e0b6      	b.n	119e <adc_init+0x3be>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    1030:	6a33      	ldr	r3, [r6, #32]
    1032:	4463      	add	r3, ip
    1034:	0019      	movs	r1, r3
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1036:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    1038:	4821      	ldr	r0, [pc, #132]	; (10c0 <adc_init+0x2e0>)
    103a:	4281      	cmp	r1, r0
    103c:	d900      	bls.n	1040 <adc_init+0x260>
    103e:	e0ae      	b.n	119e <adc_init+0x3be>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1040:	2317      	movs	r3, #23
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
    1042:	491f      	ldr	r1, [pc, #124]	; (10c0 <adc_init+0x2e0>)
    1044:	69f0      	ldr	r0, [r6, #28]
    1046:	4288      	cmp	r0, r1
    1048:	dd00      	ble.n	104c <adc_init+0x26c>
    104a:	e0a8      	b.n	119e <adc_init+0x3be>
    104c:	6a30      	ldr	r0, [r6, #32]
    104e:	4288      	cmp	r0, r1
    1050:	dd00      	ble.n	1054 <adc_init+0x274>
    1052:	e0a4      	b.n	119e <adc_init+0x3be>
    1054:	e054      	b.n	1100 <adc_init+0x320>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    1056:	7af3      	ldrb	r3, [r6, #11]
    1058:	2b00      	cmp	r3, #0
    105a:	d012      	beq.n	1082 <adc_init+0x2a2>
    105c:	69f3      	ldr	r3, [r6, #28]
    105e:	2080      	movs	r0, #128	; 0x80
    1060:	0100      	lsls	r0, r0, #4
    1062:	4684      	mov	ip, r0
    1064:	4463      	add	r3, ip
    1066:	0019      	movs	r1, r3
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1068:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    106a:	4816      	ldr	r0, [pc, #88]	; (10c4 <adc_init+0x2e4>)
    106c:	4281      	cmp	r1, r0
    106e:	d900      	bls.n	1072 <adc_init+0x292>
    1070:	e095      	b.n	119e <adc_init+0x3be>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    1072:	6a33      	ldr	r3, [r6, #32]
    1074:	4463      	add	r3, ip
    1076:	0019      	movs	r1, r3
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1078:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    107a:	4812      	ldr	r0, [pc, #72]	; (10c4 <adc_init+0x2e4>)
    107c:	4281      	cmp	r1, r0
    107e:	d900      	bls.n	1082 <adc_init+0x2a2>
    1080:	e08d      	b.n	119e <adc_init+0x3be>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1082:	2317      	movs	r3, #23
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
    1084:	490f      	ldr	r1, [pc, #60]	; (10c4 <adc_init+0x2e4>)
    1086:	69f0      	ldr	r0, [r6, #28]
    1088:	4288      	cmp	r0, r1
    108a:	dd00      	ble.n	108e <adc_init+0x2ae>
    108c:	e087      	b.n	119e <adc_init+0x3be>
    108e:	6a30      	ldr	r0, [r6, #32]
    1090:	4288      	cmp	r0, r1
    1092:	dd00      	ble.n	1096 <adc_init+0x2b6>
    1094:	e083      	b.n	119e <adc_init+0x3be>
    1096:	e033      	b.n	1100 <adc_init+0x320>
    1098:	00000d99 	.word	0x00000d99
    109c:	40000400 	.word	0x40000400
    10a0:	40001400 	.word	0x40001400
    10a4:	20003cec 	.word	0x20003cec
    10a8:	0000179d 	.word	0x0000179d
    10ac:	0000172d 	.word	0x0000172d
    10b0:	00003f78 	.word	0x00003f78
    10b4:	000036cd 	.word	0x000036cd
    10b8:	00001899 	.word	0x00001899
    10bc:	00003ea4 	.word	0x00003ea4
    10c0:	000003ff 	.word	0x000003ff
    10c4:	00000fff 	.word	0x00000fff
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    10c8:	7af3      	ldrb	r3, [r6, #11]
    10ca:	2b00      	cmp	r3, #0
    10cc:	d010      	beq.n	10f0 <adc_init+0x310>
    10ce:	69f3      	ldr	r3, [r6, #28]
    10d0:	2080      	movs	r0, #128	; 0x80
    10d2:	0200      	lsls	r0, r0, #8
    10d4:	4684      	mov	ip, r0
    10d6:	4463      	add	r3, ip
    10d8:	0019      	movs	r1, r3
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    10da:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    10dc:	4832      	ldr	r0, [pc, #200]	; (11a8 <adc_init+0x3c8>)
    10de:	4281      	cmp	r1, r0
    10e0:	d85d      	bhi.n	119e <adc_init+0x3be>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    10e2:	6a33      	ldr	r3, [r6, #32]
    10e4:	4463      	add	r3, ip
    10e6:	0019      	movs	r1, r3
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    10e8:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    10ea:	482f      	ldr	r0, [pc, #188]	; (11a8 <adc_init+0x3c8>)
    10ec:	4281      	cmp	r1, r0
    10ee:	d856      	bhi.n	119e <adc_init+0x3be>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    10f0:	2317      	movs	r3, #23
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
    10f2:	492d      	ldr	r1, [pc, #180]	; (11a8 <adc_init+0x3c8>)
    10f4:	69f0      	ldr	r0, [r6, #28]
    10f6:	4288      	cmp	r0, r1
    10f8:	dc51      	bgt.n	119e <adc_init+0x3be>
    10fa:	6a30      	ldr	r0, [r6, #32]
    10fc:	4288      	cmp	r0, r1
    10fe:	dc4e      	bgt.n	119e <adc_init+0x3be>
			break;
		}
	}

	/* Configure window mode */
	adc_module->CTRLC.reg |= config->window.window_mode;
    1100:	897b      	ldrh	r3, [r7, #10]
    1102:	431a      	orrs	r2, r3
    1104:	817a      	strh	r2, [r7, #10]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1106:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    1108:	8c13      	ldrh	r3, [r2, #32]
    110a:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    110c:	2b00      	cmp	r3, #0
    110e:	d1fb      	bne.n	1108 <adc_init+0x328>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
    1110:	8bb3      	ldrh	r3, [r6, #28]
    1112:	81fb      	strh	r3, [r7, #14]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1114:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    1116:	8c13      	ldrh	r3, [r2, #32]
    1118:	b29b      	uxth	r3, r3
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
    111a:	2b00      	cmp	r3, #0
    111c:	d1fb      	bne.n	1116 <adc_init+0x336>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    111e:	8c33      	ldrh	r3, [r6, #32]
    1120:	823b      	strh	r3, [r7, #16]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1122:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    1124:	8c13      	ldrh	r3, [r2, #32]
    1126:	b29b      	uxth	r3, r3
			ADC_WINUT_WINUT_Pos;

	while (adc_is_syncing(module_inst)) {
    1128:	2b00      	cmp	r3, #0
    112a:	d1fb      	bne.n	1124 <adc_init+0x344>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    112c:	7932      	ldrb	r2, [r6, #4]
    112e:	88f3      	ldrh	r3, [r6, #6]
    1130:	4313      	orrs	r3, r2
    1132:	813b      	strh	r3, [r7, #8]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1134:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    1136:	8c13      	ldrh	r3, [r2, #32]
    1138:	b29b      	uxth	r3, r3
			config->negative_input |
			config->positive_input;

	while (adc_is_syncing(module_inst)) {
    113a:	2b00      	cmp	r3, #0
    113c:	d1fb      	bne.n	1136 <adc_init+0x356>
		/* Wait for synchronization */
	}

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    113e:	332a      	adds	r3, #42	; 0x2a
    1140:	5cf3      	ldrb	r3, [r6, r3]
    1142:	70fb      	strb	r3, [r7, #3]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    1144:	2307      	movs	r3, #7
    1146:	713b      	strb	r3, [r7, #4]
			(1 << ADC_INTENCLR_WINMON_Pos) |(1 << ADC_INTENCLR_OVERRUN_Pos)
			| (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    1148:	331d      	adds	r3, #29
    114a:	5cf3      	ldrb	r3, [r6, r3]
    114c:	2b00      	cmp	r3, #0
    114e:	d019      	beq.n	1184 <adc_init+0x3a4>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1150:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
			return STATUS_ERR_INVALID_ARG;
    1152:	2317      	movs	r3, #23
			(1 << ADC_INTENCLR_WINMON_Pos) |(1 << ADC_INTENCLR_OVERRUN_Pos)
			| (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1154:	4915      	ldr	r1, [pc, #84]	; (11ac <adc_init+0x3cc>)
    1156:	428a      	cmp	r2, r1
    1158:	d821      	bhi.n	119e <adc_init+0x3be>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    115a:	827a      	strh	r2, [r7, #18]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    115c:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    115e:	8c13      	ldrh	r3, [r2, #32]
    1160:	b29b      	uxth	r3, r3
					ADC_GAINCORR_GAINCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
    1162:	2b00      	cmp	r3, #0
    1164:	d1fb      	bne.n	115e <adc_init+0x37e>
			/* Wait for synchronization */
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    1166:	8d31      	ldrh	r1, [r6, #40]	; 0x28
    1168:	2380      	movs	r3, #128	; 0x80
    116a:	011b      	lsls	r3, r3, #4
    116c:	18ca      	adds	r2, r1, r3
    116e:	b292      	uxth	r2, r2
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
    1170:	2317      	movs	r3, #23
		while (adc_is_syncing(module_inst)) {
			/* Wait for synchronization */
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    1172:	480e      	ldr	r0, [pc, #56]	; (11ac <adc_init+0x3cc>)
    1174:	4282      	cmp	r2, r0
    1176:	d812      	bhi.n	119e <adc_init+0x3be>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    1178:	82b9      	strh	r1, [r7, #20]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    117a:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    117c:	8c13      	ldrh	r3, [r2, #32]
    117e:	b29b      	uxth	r3, r3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
    1180:	2b00      	cmp	r3, #0
    1182:	d1fb      	bne.n	117c <adc_init+0x39c>
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIASREFBUF(
    1184:	4b0a      	ldr	r3, [pc, #40]	; (11b0 <adc_init+0x3d0>)
    1186:	681b      	ldr	r3, [r3, #0]
			/* Wait for synchronization */
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    1188:	0219      	lsls	r1, r3, #8
    118a:	22e0      	movs	r2, #224	; 0xe0
    118c:	00d2      	lsls	r2, r2, #3
    118e:	400a      	ands	r2, r1
    1190:	069b      	lsls	r3, r3, #26
    1192:	0f5b      	lsrs	r3, r3, #29
    1194:	4313      	orrs	r3, r2
    1196:	85bb      	strh	r3, [r7, #44]	; 0x2c
			) |
			ADC_CALIB_BIASCOMP(
				(*(uint32_t *)_adc_biascomp_addr[index] >> _adc_biascomp_pos[index])
			);

	return STATUS_OK;
    1198:	2300      	movs	r3, #0
    119a:	e000      	b.n	119e <adc_init+0x3be>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    119c:	2317      	movs	r3, #23
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
    119e:	0018      	movs	r0, r3
    11a0:	b01a      	add	sp, #104	; 0x68
    11a2:	bc04      	pop	{r2}
    11a4:	4691      	mov	r9, r2
    11a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11a8:	0000ffff 	.word	0x0000ffff
    11ac:	00000fff 	.word	0x00000fff
    11b0:	00806020 	.word	0x00806020

000011b4 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
    11b4:	b570      	push	{r4, r5, r6, lr}

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
	struct adc_module *module = _adc_instances[instance];
    11b6:	4b2d      	ldr	r3, [pc, #180]	; (126c <ADC_Handler+0xb8>)
    11b8:	681c      	ldr	r4, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    11ba:	6823      	ldr	r3, [r4, #0]
    11bc:	799d      	ldrb	r5, [r3, #6]
    11be:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
    11c0:	07ea      	lsls	r2, r5, #31
    11c2:	d535      	bpl.n	1230 <ADC_Handler+0x7c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    11c4:	7ee2      	ldrb	r2, [r4, #27]
    11c6:	07d2      	lsls	r2, r2, #31
    11c8:	d532      	bpl.n	1230 <ADC_Handler+0x7c>
    11ca:	7ea2      	ldrb	r2, [r4, #26]
    11cc:	07d2      	lsls	r2, r2, #31
    11ce:	d52f      	bpl.n	1230 <ADC_Handler+0x7c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    11d0:	2201      	movs	r2, #1
    11d2:	719a      	strb	r2, [r3, #6]

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    11d4:	6962      	ldr	r2, [r4, #20]
    11d6:	1c93      	adds	r3, r2, #2
    11d8:	6163      	str	r3, [r4, #20]
    11da:	6823      	ldr	r3, [r4, #0]
    11dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    11de:	b29b      	uxth	r3, r3
    11e0:	8013      	strh	r3, [r2, #0]

			if (--module->remaining_conversions > 0) {
    11e2:	8b23      	ldrh	r3, [r4, #24]
    11e4:	3b01      	subs	r3, #1
    11e6:	b29b      	uxth	r3, r3
    11e8:	8323      	strh	r3, [r4, #24]
    11ea:	2b00      	cmp	r3, #0
    11ec:	d015      	beq.n	121a <ADC_Handler+0x66>
				if (module->software_trigger == true
    11ee:	7f63      	ldrb	r3, [r4, #29]
    11f0:	2b00      	cmp	r3, #0
    11f2:	d01d      	beq.n	1230 <ADC_Handler+0x7c>
					&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
    11f4:	6822      	ldr	r2, [r4, #0]
    11f6:	79d3      	ldrb	r3, [r2, #7]
    11f8:	b25b      	sxtb	r3, r3
    11fa:	2b00      	cmp	r3, #0
    11fc:	db18      	blt.n	1230 <ADC_Handler+0x7c>
    11fe:	8c13      	ldrh	r3, [r2, #32]
    1200:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    1202:	2b00      	cmp	r3, #0
    1204:	d1fb      	bne.n	11fe <ADC_Handler+0x4a>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1206:	7e11      	ldrb	r1, [r2, #24]
    1208:	3302      	adds	r3, #2
    120a:	430b      	orrs	r3, r1
    120c:	7613      	strb	r3, [r2, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    120e:	6822      	ldr	r2, [r4, #0]

	if (adc_module->SYNCBUSY.reg) {
    1210:	8c13      	ldrh	r3, [r2, #32]
    1212:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    1214:	2b00      	cmp	r3, #0
    1216:	d1fb      	bne.n	1210 <ADC_Handler+0x5c>
    1218:	e00a      	b.n	1230 <ADC_Handler+0x7c>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    121a:	7f23      	ldrb	r3, [r4, #28]
    121c:	2b05      	cmp	r3, #5
    121e:	d107      	bne.n	1230 <ADC_Handler+0x7c>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    1220:	2300      	movs	r3, #0
    1222:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    1224:	3301      	adds	r3, #1
    1226:	6822      	ldr	r2, [r4, #0]
    1228:	7113      	strb	r3, [r2, #4]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    122a:	0020      	movs	r0, r4
    122c:	68a3      	ldr	r3, [r4, #8]
    122e:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    1230:	076b      	lsls	r3, r5, #29
    1232:	d50b      	bpl.n	124c <ADC_Handler+0x98>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    1234:	2304      	movs	r3, #4
    1236:	6822      	ldr	r2, [r4, #0]
    1238:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    123a:	7ee3      	ldrb	r3, [r4, #27]
    123c:	079b      	lsls	r3, r3, #30
    123e:	d505      	bpl.n	124c <ADC_Handler+0x98>
    1240:	7ea3      	ldrb	r3, [r4, #26]
    1242:	079b      	lsls	r3, r3, #30
    1244:	d502      	bpl.n	124c <ADC_Handler+0x98>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    1246:	0020      	movs	r0, r4
    1248:	68e3      	ldr	r3, [r4, #12]
    124a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    124c:	07ab      	lsls	r3, r5, #30
    124e:	d50b      	bpl.n	1268 <ADC_Handler+0xb4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    1250:	2302      	movs	r3, #2
    1252:	6822      	ldr	r2, [r4, #0]
    1254:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    1256:	7ee3      	ldrb	r3, [r4, #27]
    1258:	075b      	lsls	r3, r3, #29
    125a:	d505      	bpl.n	1268 <ADC_Handler+0xb4>
    125c:	7ea3      	ldrb	r3, [r4, #26]
    125e:	075b      	lsls	r3, r3, #29
    1260:	d502      	bpl.n	1268 <ADC_Handler+0xb4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    1262:	6923      	ldr	r3, [r4, #16]
    1264:	0020      	movs	r0, r4
    1266:	4798      	blx	r3
	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
	_adc_interrupt_handler(0);
}
    1268:	bd70      	pop	{r4, r5, r6, pc}
    126a:	46c0      	nop			; (mov r8, r8)
    126c:	20003cec 	.word	0x20003cec

00001270 <adc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1270:	1c93      	adds	r3, r2, #2
    1272:	009b      	lsls	r3, r3, #2
    1274:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
    1276:	2301      	movs	r3, #1
    1278:	4093      	lsls	r3, r2
    127a:	7e82      	ldrb	r2, [r0, #26]
    127c:	4313      	orrs	r3, r2
    127e:	7683      	strb	r3, [r0, #26]
}
    1280:	4770      	bx	lr
    1282:	46c0      	nop			; (mov r8, r8)

00001284 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
    1284:	b510      	push	{r4, lr}
    1286:	0004      	movs	r4, r0
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    1288:	8b03      	ldrh	r3, [r0, #24]
    128a:	b29b      	uxth	r3, r3
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
    128c:	2005      	movs	r0, #5
{
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    128e:	2b00      	cmp	r3, #0
    1290:	d11d      	bne.n	12ce <adc_read_buffer_job+0x4a>
			module_inst->job_status == STATUS_BUSY){
    1292:	7f23      	ldrb	r3, [r4, #28]
    1294:	b2d8      	uxtb	r0, r3
{
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    1296:	2805      	cmp	r0, #5
    1298:	d019      	beq.n	12ce <adc_read_buffer_job+0x4a>
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
	}

	module_inst->job_status = STATUS_BUSY;
    129a:	2305      	movs	r3, #5
    129c:	7723      	strb	r3, [r4, #28]
	module_inst->remaining_conversions = samples;
    129e:	8322      	strh	r2, [r4, #24]
	module_inst->job_buffer = buffer;
    12a0:	6161      	str	r1, [r4, #20]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
    12a2:	3b04      	subs	r3, #4
    12a4:	6822      	ldr	r2, [r4, #0]
    12a6:	7153      	strb	r3, [r2, #5]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);

	if(module_inst->software_trigger == true) {
    12a8:	7f63      	ldrb	r3, [r4, #29]
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
    12aa:	2000      	movs	r0, #0
	module_inst->remaining_conversions = samples;
	module_inst->job_buffer = buffer;

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);

	if(module_inst->software_trigger == true) {
    12ac:	2b00      	cmp	r3, #0
    12ae:	d00e      	beq.n	12ce <adc_read_buffer_job+0x4a>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    12b0:	6822      	ldr	r2, [r4, #0]
    12b2:	8c13      	ldrh	r3, [r2, #32]
    12b4:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    12b6:	2b00      	cmp	r3, #0
    12b8:	d1fb      	bne.n	12b2 <adc_read_buffer_job+0x2e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    12ba:	7e11      	ldrb	r1, [r2, #24]
    12bc:	3302      	adds	r3, #2
    12be:	430b      	orrs	r3, r1
    12c0:	7613      	strb	r3, [r2, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    12c2:	6822      	ldr	r2, [r4, #0]

	if (adc_module->SYNCBUSY.reg) {
    12c4:	8c13      	ldrh	r3, [r2, #32]
    12c6:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    12c8:	2b00      	cmp	r3, #0
    12ca:	d1fb      	bne.n	12c4 <adc_read_buffer_job+0x40>
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
    12cc:	2000      	movs	r0, #0
}
    12ce:	bd10      	pop	{r4, pc}

000012d0 <opamp_module_init>:
 */

#include "opamp.h"

void opamp_module_init(void)
{
    12d0:	b500      	push	{lr}
    12d2:	b083      	sub	sp, #12
static inline void system_clock_source_osculp32k_get_config_defaults(
		struct system_clock_source_osculp32k_config *const config)
{
	Assert(config);

	config->write_once          = false;
    12d4:	a801      	add	r0, sp, #4
    12d6:	2300      	movs	r3, #0
    12d8:	7003      	strb	r3, [r0, #0]
	struct system_clock_source_osculp32k_config config;

	/* Enable the OSCULP32K clock. */
	system_clock_source_osculp32k_get_config_defaults(&config);
	system_clock_source_osculp32k_set_config(&config);
    12da:	4b09      	ldr	r3, [pc, #36]	; (1300 <opamp_module_init+0x30>)
    12dc:	4798      	blx	r3

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    12de:	4a09      	ldr	r2, [pc, #36]	; (1304 <opamp_module_init+0x34>)
    12e0:	6a11      	ldr	r1, [r2, #32]
    12e2:	2340      	movs	r3, #64	; 0x40
    12e4:	430b      	orrs	r3, r1
    12e6:	6213      	str	r3, [r2, #32]
 * and the OPAMP will be disabled.
 */
static inline void opamp_module_reset(void)
{
	/* Reset OPAMP. */
	OPAMP->CTRLA.reg |= OPAMP_CTRLA_SWRST;
    12e8:	4b07      	ldr	r3, [pc, #28]	; (1308 <opamp_module_init+0x38>)
    12ea:	7819      	ldrb	r1, [r3, #0]
    12ec:	2201      	movs	r2, #1
    12ee:	430a      	orrs	r2, r1
    12f0:	701a      	strb	r2, [r3, #0]
 *
 */
static inline void opamp_module_enable(void)
{
	/* Enable OPAMP. */
	OPAMP->CTRLA.reg |= OPAMP_CTRLA_ENABLE;
    12f2:	7819      	ldrb	r1, [r3, #0]
    12f4:	2202      	movs	r2, #2
    12f6:	430a      	orrs	r2, r1
    12f8:	701a      	strb	r2, [r3, #0]
	/* Reset module. */
	opamp_module_reset();

	/* Enable module. */
	opamp_module_enable();
}
    12fa:	b003      	add	sp, #12
    12fc:	bd00      	pop	{pc}
    12fe:	46c0      	nop			; (mov r8, r8)
    1300:	000014b1 	.word	0x000014b1
    1304:	40000400 	.word	0x40000400
    1308:	43001800 	.word	0x43001800

0000130c <opamp2_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->potentiometer_selection = OPAMP_POT_MUX_8R_8R;
    130c:	2380      	movs	r3, #128	; 0x80
    130e:	01db      	lsls	r3, r3, #7
    1310:	8143      	strh	r3, [r0, #10]
	config->r1_enable = false;
    1312:	2300      	movs	r3, #0
    1314:	7303      	strb	r3, [r0, #12]
	config->r2_vcc = false;
    1316:	7343      	strb	r3, [r0, #13]
	config->r2_out = false;
    1318:	7383      	strb	r3, [r0, #14]
	config->on_demand = false;
    131a:	73c3      	strb	r3, [r0, #15]
	config->run_in_standby = false;
    131c:	7403      	strb	r3, [r0, #16]
	config->bias_value = OPAMP_BIAS_MODE_0;
    131e:	7443      	strb	r3, [r0, #17]
	config->analog_out = false;
    1320:	7483      	strb	r3, [r0, #18]
	Assert(config);

	_opamp_get_config_common_defaults(&(config->config_common));

	/* Default configuration values */
	config->negative_input = OPAMP2_NEG_MUX_OUT2;
    1322:	2280      	movs	r2, #128	; 0x80
    1324:	0392      	lsls	r2, r2, #14
    1326:	6002      	str	r2, [r0, #0]
	config->positive_input = OPAMP2_POS_MUX_PIN2;
    1328:	6043      	str	r3, [r0, #4]
	config->r1_connection = OPAMP2_RES1_MUX_GND;
    132a:	23c0      	movs	r3, #192	; 0xc0
    132c:	015b      	lsls	r3, r3, #5
    132e:	8103      	strh	r3, [r0, #8]
}
    1330:	4770      	bx	lr
    1332:	46c0      	nop			; (mov r8, r8)

00001334 <opamp2_set_config>:

void opamp2_set_config(struct opamp2_config *const config)
{
	uint32_t temp = 0;

	if (config->config_common.r1_enable) {
    1334:	7b03      	ldrb	r3, [r0, #12]
		temp |= OPAMP_OPAMPCTRL_RES1EN;
    1336:	1e5a      	subs	r2, r3, #1
    1338:	4193      	sbcs	r3, r2
    133a:	029b      	lsls	r3, r3, #10
	}

	if (config->config_common.r2_vcc) {
    133c:	7b42      	ldrb	r2, [r0, #13]
    133e:	2a00      	cmp	r2, #0
    1340:	d002      	beq.n	1348 <opamp2_set_config+0x14>
		temp |= OPAMP_OPAMPCTRL_RES2VCC;
    1342:	2280      	movs	r2, #128	; 0x80
    1344:	0092      	lsls	r2, r2, #2
    1346:	4313      	orrs	r3, r2
	}

	if (config->config_common.r2_out) {
    1348:	7b82      	ldrb	r2, [r0, #14]
    134a:	2a00      	cmp	r2, #0
    134c:	d002      	beq.n	1354 <opamp2_set_config+0x20>
		temp |= OPAMP_OPAMPCTRL_RES2OUT;
    134e:	2280      	movs	r2, #128	; 0x80
    1350:	0052      	lsls	r2, r2, #1
    1352:	4313      	orrs	r3, r2
	}

	if (config->config_common.on_demand) {
    1354:	7bc2      	ldrb	r2, [r0, #15]
    1356:	2a00      	cmp	r2, #0
    1358:	d001      	beq.n	135e <opamp2_set_config+0x2a>
		temp |= OPAMP_OPAMPCTRL_ONDEMAND;
    135a:	2280      	movs	r2, #128	; 0x80
    135c:	4313      	orrs	r3, r2
	}

	if (config->config_common.run_in_standby) {
    135e:	7c02      	ldrb	r2, [r0, #16]
    1360:	2a00      	cmp	r2, #0
    1362:	d001      	beq.n	1368 <opamp2_set_config+0x34>
		temp |= OPAMP_OPAMPCTRL_RUNSTDBY;
    1364:	2240      	movs	r2, #64	; 0x40
    1366:	4313      	orrs	r3, r2
	}

	if (config->config_common.analog_out) {
    1368:	7c82      	ldrb	r2, [r0, #18]
    136a:	2a00      	cmp	r2, #0
    136c:	d001      	beq.n	1372 <opamp2_set_config+0x3e>
		temp |= OPAMP_OPAMPCTRL_ANAOUT;
    136e:	2204      	movs	r2, #4
    1370:	4313      	orrs	r3, r2

	OPAMP->OPAMPCTRL[2].reg = temp |
		config->config_common.potentiometer_selection |
		config->config_common.bias_value |
		config->negative_input |
		config->positive_input|
    1372:	6801      	ldr	r1, [r0, #0]
    1374:	6842      	ldr	r2, [r0, #4]
    1376:	4311      	orrs	r1, r2
    1378:	8942      	ldrh	r2, [r0, #10]
    137a:	430a      	orrs	r2, r1
    137c:	7c41      	ldrb	r1, [r0, #17]
    137e:	430a      	orrs	r2, r1
    1380:	8901      	ldrh	r1, [r0, #8]
    1382:	430a      	orrs	r2, r1
    1384:	4313      	orrs	r3, r2

	if (config->config_common.analog_out) {
		temp |= OPAMP_OPAMPCTRL_ANAOUT;
	}

	OPAMP->OPAMPCTRL[2].reg = temp |
    1386:	4a01      	ldr	r2, [pc, #4]	; (138c <opamp2_set_config+0x58>)
    1388:	60d3      	str	r3, [r2, #12]
		config->config_common.potentiometer_selection |
		config->config_common.bias_value |
		config->negative_input |
		config->positive_input|
		config->r1_connection;
}
    138a:	4770      	bx	lr
    138c:	43001800 	.word	0x43001800

00001390 <opamp_enable>:
{
	/* Sanity check arguments */
	Assert(number);

	/* Enable the OPAMP */
	if (number == OPAMP_0) {
    1390:	2800      	cmp	r0, #0
    1392:	d105      	bne.n	13a0 <opamp_enable+0x10>
		OPAMP->OPAMPCTRL[0].reg |= OPAMP_OPAMPCTRL_ENABLE;
    1394:	4a0a      	ldr	r2, [pc, #40]	; (13c0 <opamp_enable+0x30>)
    1396:	6851      	ldr	r1, [r2, #4]
    1398:	2302      	movs	r3, #2
    139a:	430b      	orrs	r3, r1
    139c:	6053      	str	r3, [r2, #4]
    139e:	e00e      	b.n	13be <opamp_enable+0x2e>
	} else if (number == OPAMP_1) {
    13a0:	2801      	cmp	r0, #1
    13a2:	d105      	bne.n	13b0 <opamp_enable+0x20>
		OPAMP->OPAMPCTRL[1].reg |= OPAMP_OPAMPCTRL_ENABLE;
    13a4:	4a06      	ldr	r2, [pc, #24]	; (13c0 <opamp_enable+0x30>)
    13a6:	6891      	ldr	r1, [r2, #8]
    13a8:	2302      	movs	r3, #2
    13aa:	430b      	orrs	r3, r1
    13ac:	6093      	str	r3, [r2, #8]
    13ae:	e006      	b.n	13be <opamp_enable+0x2e>
	} else if (number == OPAMP_2) {
    13b0:	2802      	cmp	r0, #2
    13b2:	d104      	bne.n	13be <opamp_enable+0x2e>
		OPAMP->OPAMPCTRL[2].reg |= OPAMP_OPAMPCTRL_ENABLE;
    13b4:	4a02      	ldr	r2, [pc, #8]	; (13c0 <opamp_enable+0x30>)
    13b6:	68d1      	ldr	r1, [r2, #12]
    13b8:	2302      	movs	r3, #2
    13ba:	430b      	orrs	r3, r1
    13bc:	60d3      	str	r3, [r2, #12]
	}
}
    13be:	4770      	bx	lr
    13c0:	43001800 	.word	0x43001800

000013c4 <opamp_is_ready>:
		OPAMP->OPAMPCTRL[2].reg &= ~OPAMP_OPAMPCTRL_ENABLE;
	}
}

bool opamp_is_ready(const enum opamp_id number)
{
    13c4:	1e03      	subs	r3, r0, #0
	/* Sanity check arguments */
	Assert(number);

	/* Get the OPAMP output ready status*/
	if (number == OPAMP_0) {
    13c6:	d105      	bne.n	13d4 <opamp_is_ready+0x10>
		return OPAMP->STATUS.bit.READY0;
    13c8:	4b0a      	ldr	r3, [pc, #40]	; (13f4 <opamp_is_ready+0x30>)
    13ca:	7898      	ldrb	r0, [r3, #2]
    13cc:	07c0      	lsls	r0, r0, #31
    13ce:	0fc0      	lsrs	r0, r0, #31
    13d0:	b2c0      	uxtb	r0, r0
    13d2:	e00d      	b.n	13f0 <opamp_is_ready+0x2c>
	} else if (number == OPAMP_1) {
    13d4:	2801      	cmp	r0, #1
    13d6:	d104      	bne.n	13e2 <opamp_is_ready+0x1e>
		return OPAMP->STATUS.bit.READY1;
    13d8:	4b06      	ldr	r3, [pc, #24]	; (13f4 <opamp_is_ready+0x30>)
    13da:	7898      	ldrb	r0, [r3, #2]
    13dc:	0780      	lsls	r0, r0, #30
    13de:	0fc0      	lsrs	r0, r0, #31
    13e0:	e006      	b.n	13f0 <opamp_is_ready+0x2c>
	} else if (number == OPAMP_2) {
		return OPAMP->STATUS.bit.READY2;
	}

	return false;
    13e2:	2000      	movs	r0, #0
	/* Get the OPAMP output ready status*/
	if (number == OPAMP_0) {
		return OPAMP->STATUS.bit.READY0;
	} else if (number == OPAMP_1) {
		return OPAMP->STATUS.bit.READY1;
	} else if (number == OPAMP_2) {
    13e4:	2b02      	cmp	r3, #2
    13e6:	d103      	bne.n	13f0 <opamp_is_ready+0x2c>
		return OPAMP->STATUS.bit.READY2;
    13e8:	4b02      	ldr	r3, [pc, #8]	; (13f4 <opamp_is_ready+0x30>)
    13ea:	7898      	ldrb	r0, [r3, #2]
    13ec:	0740      	lsls	r0, r0, #29
    13ee:	0fc0      	lsrs	r0, r0, #31
	}

	return false;
}
    13f0:	4770      	bx	lr
    13f2:	46c0      	nop			; (mov r8, r8)
    13f4:	43001800 	.word	0x43001800

000013f8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    13f8:	b500      	push	{lr}
    13fa:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    13fc:	ab01      	add	r3, sp, #4
    13fe:	2280      	movs	r2, #128	; 0x80
    1400:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1402:	780a      	ldrb	r2, [r1, #0]
    1404:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1406:	784a      	ldrb	r2, [r1, #1]
    1408:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    140a:	788a      	ldrb	r2, [r1, #2]
    140c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    140e:	0019      	movs	r1, r3
    1410:	4b01      	ldr	r3, [pc, #4]	; (1418 <port_pin_set_config+0x20>)
    1412:	4798      	blx	r3
}
    1414:	b003      	add	sp, #12
    1416:	bd00      	pop	{pc}
    1418:	00001899 	.word	0x00001899

0000141c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    141c:	b510      	push	{r4, lr}
	switch (clock_source) {
    141e:	2808      	cmp	r0, #8
    1420:	d803      	bhi.n	142a <system_clock_source_get_hz+0xe>
    1422:	0080      	lsls	r0, r0, #2
    1424:	4b1c      	ldr	r3, [pc, #112]	; (1498 <system_clock_source_get_hz+0x7c>)
    1426:	581b      	ldr	r3, [r3, r0]
    1428:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    142a:	2000      	movs	r0, #0
    142c:	e032      	b.n	1494 <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    142e:	4b1b      	ldr	r3, [pc, #108]	; (149c <system_clock_source_get_hz+0x80>)
    1430:	6918      	ldr	r0, [r3, #16]
    1432:	e02f      	b.n	1494 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    1434:	4b1a      	ldr	r3, [pc, #104]	; (14a0 <system_clock_source_get_hz+0x84>)
    1436:	7d18      	ldrb	r0, [r3, #20]
    1438:	0700      	lsls	r0, r0, #28
    143a:	0f80      	lsrs	r0, r0, #30
    143c:	3001      	adds	r0, #1
    143e:	4b19      	ldr	r3, [pc, #100]	; (14a4 <system_clock_source_get_hz+0x88>)
    1440:	4358      	muls	r0, r3
    1442:	e027      	b.n	1494 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1444:	4b15      	ldr	r3, [pc, #84]	; (149c <system_clock_source_get_hz+0x80>)
    1446:	6958      	ldr	r0, [r3, #20]
    1448:	e024      	b.n	1494 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    144a:	4b14      	ldr	r3, [pc, #80]	; (149c <system_clock_source_get_hz+0x80>)
    144c:	681b      	ldr	r3, [r3, #0]
    144e:	2002      	movs	r0, #2
    1450:	4018      	ands	r0, r3
    1452:	d01f      	beq.n	1494 <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1454:	4912      	ldr	r1, [pc, #72]	; (14a0 <system_clock_source_get_hz+0x84>)
    1456:	2280      	movs	r2, #128	; 0x80
    1458:	0052      	lsls	r2, r2, #1
    145a:	68cb      	ldr	r3, [r1, #12]
    145c:	4213      	tst	r3, r2
    145e:	d0fc      	beq.n	145a <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    1460:	4b0e      	ldr	r3, [pc, #56]	; (149c <system_clock_source_get_hz+0x80>)
    1462:	681b      	ldr	r3, [r3, #0]
    1464:	075b      	lsls	r3, r3, #29
    1466:	d514      	bpl.n	1492 <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1468:	2000      	movs	r0, #0
    146a:	4b0f      	ldr	r3, [pc, #60]	; (14a8 <system_clock_source_get_hz+0x8c>)
    146c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    146e:	4b0b      	ldr	r3, [pc, #44]	; (149c <system_clock_source_get_hz+0x80>)
    1470:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1472:	041b      	lsls	r3, r3, #16
    1474:	0c1b      	lsrs	r3, r3, #16
    1476:	4358      	muls	r0, r3
    1478:	e00c      	b.n	1494 <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    147a:	2328      	movs	r3, #40	; 0x28
    147c:	4a08      	ldr	r2, [pc, #32]	; (14a0 <system_clock_source_get_hz+0x84>)
    147e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1480:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1482:	079b      	lsls	r3, r3, #30
    1484:	d506      	bpl.n	1494 <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1486:	4b05      	ldr	r3, [pc, #20]	; (149c <system_clock_source_get_hz+0x80>)
    1488:	68d8      	ldr	r0, [r3, #12]
    148a:	e003      	b.n	1494 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    148c:	2080      	movs	r0, #128	; 0x80
    148e:	0200      	lsls	r0, r0, #8
    1490:	e000      	b.n	1494 <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1492:	4806      	ldr	r0, [pc, #24]	; (14ac <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    1494:	bd10      	pop	{r4, pc}
    1496:	46c0      	nop			; (mov r8, r8)
    1498:	00003fd8 	.word	0x00003fd8
    149c:	200000bc 	.word	0x200000bc
    14a0:	40000c00 	.word	0x40000c00
    14a4:	003d0900 	.word	0x003d0900
    14a8:	000017c1 	.word	0x000017c1
    14ac:	02dc6c00 	.word	0x02dc6c00

000014b0 <system_clock_source_osculp32k_set_config>:
 *
 * \param[in] config  OSCULP32K configuration structure containing the new config
 */
void system_clock_source_osculp32k_set_config(
		struct system_clock_source_osculp32k_config *const config)
{
    14b0:	b510      	push	{r4, lr}
	OSC32KCTRL_OSCULP32K_Type temp = OSC32KCTRL->OSCULP32K;
    14b2:	4905      	ldr	r1, [pc, #20]	; (14c8 <system_clock_source_osculp32k_set_config+0x18>)
    14b4:	69cc      	ldr	r4, [r1, #28]
	/* Update settings via a temporary struct to reduce register access */
	temp.bit.WRTLOCK  = config->write_once;
	OSC32KCTRL->OSCULP32K  = temp;
    14b6:	7802      	ldrb	r2, [r0, #0]
    14b8:	2301      	movs	r3, #1
    14ba:	401a      	ands	r2, r3
    14bc:	03d2      	lsls	r2, r2, #15
    14be:	4b03      	ldr	r3, [pc, #12]	; (14cc <system_clock_source_osculp32k_set_config+0x1c>)
    14c0:	4023      	ands	r3, r4
    14c2:	4313      	orrs	r3, r2
    14c4:	61cb      	str	r3, [r1, #28]
}
    14c6:	bd10      	pop	{r4, pc}
    14c8:	40001000 	.word	0x40001000
    14cc:	ffff7fff 	.word	0xffff7fff

000014d0 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    14d0:	b510      	push	{r4, lr}
    14d2:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    14d4:	2280      	movs	r2, #128	; 0x80
    14d6:	0052      	lsls	r2, r2, #1
    14d8:	4b2b      	ldr	r3, [pc, #172]	; (1588 <system_clock_init+0xb8>)
    14da:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    14dc:	3afd      	subs	r2, #253	; 0xfd
    14de:	4b2b      	ldr	r3, [pc, #172]	; (158c <system_clock_init+0xbc>)
    14e0:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    14e2:	4a2b      	ldr	r2, [pc, #172]	; (1590 <system_clock_init+0xc0>)
    14e4:	6853      	ldr	r3, [r2, #4]
    14e6:	211e      	movs	r1, #30
    14e8:	438b      	bics	r3, r1
    14ea:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    14ec:	2380      	movs	r3, #128	; 0x80
    14ee:	05db      	lsls	r3, r3, #23
    14f0:	789b      	ldrb	r3, [r3, #2]
    14f2:	2b02      	cmp	r3, #2
    14f4:	d009      	beq.n	150a <system_clock_init+0x3a>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    14f6:	2380      	movs	r3, #128	; 0x80
    14f8:	05db      	lsls	r3, r3, #23
    14fa:	2201      	movs	r2, #1
    14fc:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    14fe:	3201      	adds	r2, #1
    1500:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    1502:	001a      	movs	r2, r3
    1504:	7993      	ldrb	r3, [r2, #6]
    1506:	2b00      	cmp	r3, #0
    1508:	d0fc      	beq.n	1504 <system_clock_init+0x34>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    150a:	4b1f      	ldr	r3, [pc, #124]	; (1588 <system_clock_init+0xb8>)
    150c:	7d1a      	ldrb	r2, [r3, #20]
    150e:	2180      	movs	r1, #128	; 0x80
    1510:	4249      	negs	r1, r1
    1512:	430a      	orrs	r2, r1
    1514:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    1516:	7d1a      	ldrb	r2, [r3, #20]
    1518:	31c0      	adds	r1, #192	; 0xc0
    151a:	438a      	bics	r2, r1
    151c:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    151e:	4b1d      	ldr	r3, [pc, #116]	; (1594 <system_clock_init+0xc4>)
    1520:	4798      	blx	r3
 * \param[in] divider  CPU clock divider
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    1522:	4c1d      	ldr	r4, [pc, #116]	; (1598 <system_clock_init+0xc8>)
    1524:	2301      	movs	r3, #1
    1526:	71a3      	strb	r3, [r4, #6]
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_low_power_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    1528:	7163      	strb	r3, [r4, #5]
 * \param[in] divider  CPU clock divider
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    152a:	7123      	strb	r3, [r4, #4]
{
#ifdef  MCLK_CTRLA_CFDEN
	if (enable) {
		MCLK->CTRLA.reg |=  MCLK_CTRLA_CFDEN;
	} else {
		MCLK->CTRLA.reg &= ~MCLK_CTRLA_CFDEN;
    152c:	7822      	ldrb	r2, [r4, #0]
    152e:	2104      	movs	r1, #4
    1530:	438a      	bics	r2, r1
    1532:	7022      	strb	r2, [r4, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1534:	a901      	add	r1, sp, #4
    1536:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    1538:	2300      	movs	r3, #0
    153a:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
    153c:	2206      	movs	r2, #6
    153e:	700a      	strb	r2, [r1, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1540:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1542:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1544:	2000      	movs	r0, #0
    1546:	4b15      	ldr	r3, [pc, #84]	; (159c <system_clock_init+0xcc>)
    1548:	4798      	blx	r3
    154a:	2000      	movs	r0, #0
    154c:	4b14      	ldr	r3, [pc, #80]	; (15a0 <system_clock_init+0xd0>)
    154e:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    1550:	2000      	movs	r0, #0
    1552:	4b14      	ldr	r3, [pc, #80]	; (15a4 <system_clock_init+0xd4>)
    1554:	4798      	blx	r3
    1556:	7921      	ldrb	r1, [r4, #4]
    1558:	b2c9      	uxtb	r1, r1
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    155a:	4b13      	ldr	r3, [pc, #76]	; (15a8 <system_clock_init+0xd8>)
    155c:	4798      	blx	r3
    155e:	4b13      	ldr	r3, [pc, #76]	; (15ac <system_clock_init+0xdc>)
    1560:	4298      	cmp	r0, r3
    1562:	d80e      	bhi.n	1582 <system_clock_init+0xb2>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    1564:	2380      	movs	r3, #128	; 0x80
    1566:	05db      	lsls	r3, r3, #23
    1568:	789b      	ldrb	r3, [r3, #2]
    156a:	2b00      	cmp	r3, #0
    156c:	d009      	beq.n	1582 <system_clock_init+0xb2>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    156e:	2380      	movs	r3, #128	; 0x80
    1570:	05db      	lsls	r3, r3, #23
    1572:	2201      	movs	r2, #1
    1574:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    1576:	2200      	movs	r2, #0
    1578:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    157a:	001a      	movs	r2, r3
    157c:	7993      	ldrb	r3, [r2, #6]
    157e:	2b00      	cmp	r3, #0
    1580:	d0fc      	beq.n	157c <system_clock_init+0xac>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    1582:	b004      	add	sp, #16
    1584:	bd10      	pop	{r4, pc}
    1586:	46c0      	nop			; (mov r8, r8)
    1588:	40000c00 	.word	0x40000c00
    158c:	40001400 	.word	0x40001400
    1590:	41004000 	.word	0x41004000
    1594:	000015b1 	.word	0x000015b1
    1598:	40000400 	.word	0x40000400
    159c:	000015d5 	.word	0x000015d5
    15a0:	00001681 	.word	0x00001681
    15a4:	000016c1 	.word	0x000016c1
    15a8:	00003511 	.word	0x00003511
    15ac:	00b71b00 	.word	0x00b71b00

000015b0 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    15b0:	4a06      	ldr	r2, [pc, #24]	; (15cc <system_gclk_init+0x1c>)
    15b2:	6951      	ldr	r1, [r2, #20]
    15b4:	2340      	movs	r3, #64	; 0x40
    15b6:	430b      	orrs	r3, r1
    15b8:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    15ba:	2201      	movs	r2, #1
    15bc:	4b04      	ldr	r3, [pc, #16]	; (15d0 <system_gclk_init+0x20>)
    15be:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    15c0:	0019      	movs	r1, r3
    15c2:	780b      	ldrb	r3, [r1, #0]
    15c4:	4213      	tst	r3, r2
    15c6:	d1fc      	bne.n	15c2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    15c8:	4770      	bx	lr
    15ca:	46c0      	nop			; (mov r8, r8)
    15cc:	40000400 	.word	0x40000400
    15d0:	40001800 	.word	0x40001800

000015d4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    15d4:	b570      	push	{r4, r5, r6, lr}
    15d6:	0005      	movs	r5, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    15d8:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    15da:	784b      	ldrb	r3, [r1, #1]
    15dc:	2b00      	cmp	r3, #0
    15de:	d002      	beq.n	15e6 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    15e0:	2380      	movs	r3, #128	; 0x80
    15e2:	00db      	lsls	r3, r3, #3
    15e4:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    15e6:	7a4b      	ldrb	r3, [r1, #9]
    15e8:	2b00      	cmp	r3, #0
    15ea:	d002      	beq.n	15f2 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    15ec:	2380      	movs	r3, #128	; 0x80
    15ee:	011b      	lsls	r3, r3, #4
    15f0:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    15f2:	684a      	ldr	r2, [r1, #4]
    15f4:	2a01      	cmp	r2, #1
    15f6:	d917      	bls.n	1628 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    15f8:	1e53      	subs	r3, r2, #1
    15fa:	421a      	tst	r2, r3
    15fc:	d10f      	bne.n	161e <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    15fe:	2a02      	cmp	r2, #2
    1600:	d906      	bls.n	1610 <system_gclk_gen_set_config+0x3c>
    1602:	2302      	movs	r3, #2
    1604:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    1606:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1608:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    160a:	429a      	cmp	r2, r3
    160c:	d8fb      	bhi.n	1606 <system_gclk_gen_set_config+0x32>
    160e:	e000      	b.n	1612 <system_gclk_gen_set_config+0x3e>
    1610:	2000      	movs	r0, #0
    1612:	2380      	movs	r3, #128	; 0x80
    1614:	015b      	lsls	r3, r3, #5
    1616:	431c      	orrs	r4, r3
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1618:	0400      	lsls	r0, r0, #16
    161a:	4304      	orrs	r4, r0
    161c:	e004      	b.n	1628 <system_gclk_gen_set_config+0x54>

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    161e:	0412      	lsls	r2, r2, #16
    1620:	2380      	movs	r3, #128	; 0x80
    1622:	009b      	lsls	r3, r3, #2
    1624:	431a      	orrs	r2, r3
    1626:	4314      	orrs	r4, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1628:	7a0b      	ldrb	r3, [r1, #8]
    162a:	2b00      	cmp	r3, #0
    162c:	d002      	beq.n	1634 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    162e:	2380      	movs	r3, #128	; 0x80
    1630:	019b      	lsls	r3, r3, #6
    1632:	431c      	orrs	r4, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1634:	2604      	movs	r6, #4
    1636:	40ae      	lsls	r6, r5
    1638:	490d      	ldr	r1, [pc, #52]	; (1670 <system_gclk_gen_set_config+0x9c>)
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    163a:	4a0e      	ldr	r2, [pc, #56]	; (1674 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    163c:	684b      	ldr	r3, [r1, #4]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    163e:	4013      	ands	r3, r2
    1640:	421e      	tst	r6, r3
    1642:	d1fb      	bne.n	163c <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1644:	4b0c      	ldr	r3, [pc, #48]	; (1678 <system_gclk_gen_set_config+0xa4>)
    1646:	4798      	blx	r3
    1648:	00ad      	lsls	r5, r5, #2
    164a:	4b09      	ldr	r3, [pc, #36]	; (1670 <system_gclk_gen_set_config+0x9c>)
    164c:	469c      	mov	ip, r3
    164e:	4465      	add	r5, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    1650:	6a28      	ldr	r0, [r5, #32]
    1652:	2380      	movs	r3, #128	; 0x80
    1654:	005b      	lsls	r3, r3, #1
    1656:	4018      	ands	r0, r3
    1658:	4320      	orrs	r0, r4
    165a:	6228      	str	r0, [r5, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    165c:	4661      	mov	r1, ip

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    165e:	4a05      	ldr	r2, [pc, #20]	; (1674 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1660:	684b      	ldr	r3, [r1, #4]

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    1662:	4013      	ands	r3, r2
    1664:	421e      	tst	r6, r3
    1666:	d1fb      	bne.n	1660 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1668:	4b04      	ldr	r3, [pc, #16]	; (167c <system_gclk_gen_set_config+0xa8>)
    166a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    166c:	bd70      	pop	{r4, r5, r6, pc}
    166e:	46c0      	nop			; (mov r8, r8)
    1670:	40001800 	.word	0x40001800
    1674:	000007fc 	.word	0x000007fc
    1678:	00000cf1 	.word	0x00000cf1
    167c:	00000d31 	.word	0x00000d31

00001680 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1680:	b510      	push	{r4, lr}
    1682:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1684:	2204      	movs	r2, #4
    1686:	4082      	lsls	r2, r0
    1688:	4809      	ldr	r0, [pc, #36]	; (16b0 <system_gclk_gen_enable+0x30>)
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    168a:	490a      	ldr	r1, [pc, #40]	; (16b4 <system_gclk_gen_enable+0x34>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    168c:	6843      	ldr	r3, [r0, #4]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    168e:	400b      	ands	r3, r1
    1690:	421a      	tst	r2, r3
    1692:	d1fb      	bne.n	168c <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1694:	4b08      	ldr	r3, [pc, #32]	; (16b8 <system_gclk_gen_enable+0x38>)
    1696:	4798      	blx	r3
    1698:	00a4      	lsls	r4, r4, #2
    169a:	4b05      	ldr	r3, [pc, #20]	; (16b0 <system_gclk_gen_enable+0x30>)
    169c:	469c      	mov	ip, r3
    169e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    16a0:	6a23      	ldr	r3, [r4, #32]
    16a2:	2280      	movs	r2, #128	; 0x80
    16a4:	0052      	lsls	r2, r2, #1
    16a6:	4313      	orrs	r3, r2
    16a8:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    16aa:	4b04      	ldr	r3, [pc, #16]	; (16bc <system_gclk_gen_enable+0x3c>)
    16ac:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    16ae:	bd10      	pop	{r4, pc}
    16b0:	40001800 	.word	0x40001800
    16b4:	000007fc 	.word	0x000007fc
    16b8:	00000cf1 	.word	0x00000cf1
    16bc:	00000d31 	.word	0x00000d31

000016c0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    16c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16c2:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    16c4:	2204      	movs	r2, #4
    16c6:	4082      	lsls	r2, r0
    16c8:	4812      	ldr	r0, [pc, #72]	; (1714 <system_gclk_gen_get_hz+0x54>)
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    16ca:	4913      	ldr	r1, [pc, #76]	; (1718 <system_gclk_gen_get_hz+0x58>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    16cc:	6843      	ldr	r3, [r0, #4]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    16ce:	400b      	ands	r3, r1
    16d0:	421a      	tst	r2, r3
    16d2:	d1fb      	bne.n	16cc <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    16d4:	4b11      	ldr	r3, [pc, #68]	; (171c <system_gclk_gen_get_hz+0x5c>)
    16d6:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    16d8:	4f0e      	ldr	r7, [pc, #56]	; (1714 <system_gclk_gen_get_hz+0x54>)
    16da:	3408      	adds	r4, #8
    16dc:	00a4      	lsls	r4, r4, #2
    16de:	59e0      	ldr	r0, [r4, r7]
    16e0:	06c0      	lsls	r0, r0, #27
    16e2:	0ec0      	lsrs	r0, r0, #27
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    16e4:	4b0e      	ldr	r3, [pc, #56]	; (1720 <system_gclk_gen_get_hz+0x60>)
    16e6:	4798      	blx	r3
    16e8:	0006      	movs	r6, r0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    16ea:	59e5      	ldr	r5, [r4, r7]
    16ec:	04ed      	lsls	r5, r5, #19
    16ee:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    16f0:	59e4      	ldr	r4, [r4, r7]
    16f2:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    16f4:	4b0b      	ldr	r3, [pc, #44]	; (1724 <system_gclk_gen_get_hz+0x64>)
    16f6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    16f8:	2d00      	cmp	r5, #0
    16fa:	d107      	bne.n	170c <system_gclk_gen_get_hz+0x4c>
    16fc:	2c01      	cmp	r4, #1
    16fe:	d907      	bls.n	1710 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1700:	0021      	movs	r1, r4
    1702:	0030      	movs	r0, r6
    1704:	4b08      	ldr	r3, [pc, #32]	; (1728 <system_gclk_gen_get_hz+0x68>)
    1706:	4798      	blx	r3
    1708:	0006      	movs	r6, r0
    170a:	e001      	b.n	1710 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    170c:	3401      	adds	r4, #1
    170e:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1710:	0030      	movs	r0, r6
    1712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1714:	40001800 	.word	0x40001800
    1718:	000007fc 	.word	0x000007fc
    171c:	00000cf1 	.word	0x00000cf1
    1720:	0000141d 	.word	0x0000141d
    1724:	00000d31 	.word	0x00000d31
    1728:	00003511 	.word	0x00003511

0000172c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    172c:	b510      	push	{r4, lr}
    172e:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1730:	4b09      	ldr	r3, [pc, #36]	; (1758 <system_gclk_chan_enable+0x2c>)
    1732:	4798      	blx	r3
    1734:	00a0      	lsls	r0, r4, #2
    1736:	4b09      	ldr	r3, [pc, #36]	; (175c <system_gclk_chan_enable+0x30>)
    1738:	469c      	mov	ip, r3
    173a:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    173c:	2280      	movs	r2, #128	; 0x80
    173e:	5881      	ldr	r1, [r0, r2]
    1740:	2340      	movs	r3, #64	; 0x40
    1742:	430b      	orrs	r3, r1
    1744:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    1746:	2180      	movs	r1, #128	; 0x80
    1748:	3a40      	subs	r2, #64	; 0x40
    174a:	5843      	ldr	r3, [r0, r1]
    174c:	421a      	tst	r2, r3
    174e:	d0fc      	beq.n	174a <system_gclk_chan_enable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1750:	4b03      	ldr	r3, [pc, #12]	; (1760 <system_gclk_chan_enable+0x34>)
    1752:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1754:	bd10      	pop	{r4, pc}
    1756:	46c0      	nop			; (mov r8, r8)
    1758:	00000cf1 	.word	0x00000cf1
    175c:	40001800 	.word	0x40001800
    1760:	00000d31 	.word	0x00000d31

00001764 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1764:	b510      	push	{r4, lr}
    1766:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1768:	4b09      	ldr	r3, [pc, #36]	; (1790 <system_gclk_chan_disable+0x2c>)
    176a:	4798      	blx	r3
    176c:	00a0      	lsls	r0, r4, #2
    176e:	4b09      	ldr	r3, [pc, #36]	; (1794 <system_gclk_chan_disable+0x30>)
    1770:	469c      	mov	ip, r3
    1772:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    1774:	2280      	movs	r2, #128	; 0x80
    1776:	5883      	ldr	r3, [r0, r2]
    1778:	2140      	movs	r1, #64	; 0x40
    177a:	438b      	bics	r3, r1
    177c:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    177e:	3140      	adds	r1, #64	; 0x40
    1780:	3a40      	subs	r2, #64	; 0x40
    1782:	5843      	ldr	r3, [r0, r1]
    1784:	421a      	tst	r2, r3
    1786:	d1fc      	bne.n	1782 <system_gclk_chan_disable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1788:	4b03      	ldr	r3, [pc, #12]	; (1798 <system_gclk_chan_disable+0x34>)
    178a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    178c:	bd10      	pop	{r4, pc}
    178e:	46c0      	nop			; (mov r8, r8)
    1790:	00000cf1 	.word	0x00000cf1
    1794:	40001800 	.word	0x40001800
    1798:	00000d31 	.word	0x00000d31

0000179c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    179c:	b570      	push	{r4, r5, r6, lr}
    179e:	0004      	movs	r4, r0
    17a0:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    17a2:	4b05      	ldr	r3, [pc, #20]	; (17b8 <system_gclk_chan_set_config+0x1c>)
    17a4:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    17a6:	782b      	ldrb	r3, [r5, #0]
    17a8:	220f      	movs	r2, #15
    17aa:	4013      	ands	r3, r2
    17ac:	3420      	adds	r4, #32
    17ae:	00a4      	lsls	r4, r4, #2
    17b0:	4a02      	ldr	r2, [pc, #8]	; (17bc <system_gclk_chan_set_config+0x20>)
    17b2:	50a3      	str	r3, [r4, r2]


}
    17b4:	bd70      	pop	{r4, r5, r6, pc}
    17b6:	46c0      	nop			; (mov r8, r8)
    17b8:	00001765 	.word	0x00001765
    17bc:	40001800 	.word	0x40001800

000017c0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    17c0:	b510      	push	{r4, lr}
    17c2:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    17c4:	4b06      	ldr	r3, [pc, #24]	; (17e0 <system_gclk_chan_get_hz+0x20>)
    17c6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    17c8:	3420      	adds	r4, #32
    17ca:	00a4      	lsls	r4, r4, #2
    17cc:	4b05      	ldr	r3, [pc, #20]	; (17e4 <system_gclk_chan_get_hz+0x24>)
    17ce:	58e4      	ldr	r4, [r4, r3]
    17d0:	0724      	lsls	r4, r4, #28
    17d2:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    17d4:	4b04      	ldr	r3, [pc, #16]	; (17e8 <system_gclk_chan_get_hz+0x28>)
    17d6:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    17d8:	0020      	movs	r0, r4
    17da:	4b04      	ldr	r3, [pc, #16]	; (17ec <system_gclk_chan_get_hz+0x2c>)
    17dc:	4798      	blx	r3
}
    17de:	bd10      	pop	{r4, pc}
    17e0:	00000cf1 	.word	0x00000cf1
    17e4:	40001800 	.word	0x40001800
    17e8:	00000d31 	.word	0x00000d31
    17ec:	000016c1 	.word	0x000016c1

000017f0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    17f0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    17f2:	78d3      	ldrb	r3, [r2, #3]
    17f4:	2b00      	cmp	r3, #0
    17f6:	d11e      	bne.n	1836 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    17f8:	7813      	ldrb	r3, [r2, #0]
    17fa:	2b80      	cmp	r3, #128	; 0x80
    17fc:	d004      	beq.n	1808 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    17fe:	061b      	lsls	r3, r3, #24
    1800:	2480      	movs	r4, #128	; 0x80
    1802:	0264      	lsls	r4, r4, #9
    1804:	4323      	orrs	r3, r4
    1806:	e000      	b.n	180a <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1808:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    180a:	7854      	ldrb	r4, [r2, #1]
    180c:	2502      	movs	r5, #2
    180e:	43ac      	bics	r4, r5
    1810:	d10a      	bne.n	1828 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1812:	7894      	ldrb	r4, [r2, #2]
    1814:	2c00      	cmp	r4, #0
    1816:	d103      	bne.n	1820 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1818:	2480      	movs	r4, #128	; 0x80
    181a:	02a4      	lsls	r4, r4, #10
    181c:	4323      	orrs	r3, r4
    181e:	e002      	b.n	1826 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1820:	24c0      	movs	r4, #192	; 0xc0
    1822:	02e4      	lsls	r4, r4, #11
    1824:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1826:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1828:	7854      	ldrb	r4, [r2, #1]
    182a:	3c01      	subs	r4, #1
    182c:	2c01      	cmp	r4, #1
    182e:	d812      	bhi.n	1856 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1830:	4c18      	ldr	r4, [pc, #96]	; (1894 <_system_pinmux_config+0xa4>)
    1832:	4023      	ands	r3, r4
    1834:	e00f      	b.n	1856 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1836:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1838:	040b      	lsls	r3, r1, #16
    183a:	0c1b      	lsrs	r3, r3, #16
    183c:	24a0      	movs	r4, #160	; 0xa0
    183e:	05e4      	lsls	r4, r4, #23
    1840:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1842:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1844:	0c0b      	lsrs	r3, r1, #16
    1846:	24d0      	movs	r4, #208	; 0xd0
    1848:	0624      	lsls	r4, r4, #24
    184a:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    184c:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    184e:	78d3      	ldrb	r3, [r2, #3]
    1850:	2b00      	cmp	r3, #0
    1852:	d018      	beq.n	1886 <_system_pinmux_config+0x96>
    1854:	e01c      	b.n	1890 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1856:	040c      	lsls	r4, r1, #16
    1858:	0c24      	lsrs	r4, r4, #16
    185a:	25a0      	movs	r5, #160	; 0xa0
    185c:	05ed      	lsls	r5, r5, #23
    185e:	432c      	orrs	r4, r5
    1860:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1862:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1864:	0c0c      	lsrs	r4, r1, #16
    1866:	25d0      	movs	r5, #208	; 0xd0
    1868:	062d      	lsls	r5, r5, #24
    186a:	432c      	orrs	r4, r5
    186c:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    186e:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1870:	78d4      	ldrb	r4, [r2, #3]
    1872:	2c00      	cmp	r4, #0
    1874:	d10c      	bne.n	1890 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1876:	035b      	lsls	r3, r3, #13
    1878:	d505      	bpl.n	1886 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    187a:	7893      	ldrb	r3, [r2, #2]
    187c:	2b01      	cmp	r3, #1
    187e:	d101      	bne.n	1884 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    1880:	6181      	str	r1, [r0, #24]
    1882:	e000      	b.n	1886 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    1884:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1886:	7853      	ldrb	r3, [r2, #1]
    1888:	3b01      	subs	r3, #1
    188a:	2b01      	cmp	r3, #1
    188c:	d800      	bhi.n	1890 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    188e:	6081      	str	r1, [r0, #8]
		}
	}
}
    1890:	bd30      	pop	{r4, r5, pc}
    1892:	46c0      	nop			; (mov r8, r8)
    1894:	fffbffff 	.word	0xfffbffff

00001898 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1898:	b510      	push	{r4, lr}
    189a:	0003      	movs	r3, r0
    189c:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    189e:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    18a0:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    18a2:	2900      	cmp	r1, #0
    18a4:	d104      	bne.n	18b0 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    18a6:	0958      	lsrs	r0, r3, #5
    18a8:	01c0      	lsls	r0, r0, #7
    18aa:	4905      	ldr	r1, [pc, #20]	; (18c0 <system_pinmux_pin_set_config+0x28>)
    18ac:	468c      	mov	ip, r1
    18ae:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    18b0:	211f      	movs	r1, #31
    18b2:	400b      	ands	r3, r1
    18b4:	391e      	subs	r1, #30
    18b6:	4099      	lsls	r1, r3
    18b8:	4b02      	ldr	r3, [pc, #8]	; (18c4 <system_pinmux_pin_set_config+0x2c>)
    18ba:	4798      	blx	r3
}
    18bc:	bd10      	pop	{r4, pc}
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	40002800 	.word	0x40002800
    18c4:	000017f1 	.word	0x000017f1

000018c8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    18c8:	4770      	bx	lr
    18ca:	46c0      	nop			; (mov r8, r8)

000018cc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    18cc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    18ce:	4b05      	ldr	r3, [pc, #20]	; (18e4 <system_init+0x18>)
    18d0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    18d2:	4b05      	ldr	r3, [pc, #20]	; (18e8 <system_init+0x1c>)
    18d4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    18d6:	4b05      	ldr	r3, [pc, #20]	; (18ec <system_init+0x20>)
    18d8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    18da:	4b05      	ldr	r3, [pc, #20]	; (18f0 <system_init+0x24>)
    18dc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    18de:	4b05      	ldr	r3, [pc, #20]	; (18f4 <system_init+0x28>)
    18e0:	4798      	blx	r3
}
    18e2:	bd10      	pop	{r4, pc}
    18e4:	000014d1 	.word	0x000014d1
    18e8:	00000d61 	.word	0x00000d61
    18ec:	000018c9 	.word	0x000018c9
    18f0:	000018c9 	.word	0x000018c9
    18f4:	000018c9 	.word	0x000018c9

000018f8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    18f8:	e7fe      	b.n	18f8 <Dummy_Handler>
    18fa:	46c0      	nop			; (mov r8, r8)

000018fc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    18fc:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    18fe:	4b1d      	ldr	r3, [pc, #116]	; (1974 <Reset_Handler+0x78>)
    1900:	4a1d      	ldr	r2, [pc, #116]	; (1978 <Reset_Handler+0x7c>)
    1902:	429a      	cmp	r2, r3
    1904:	d003      	beq.n	190e <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1906:	4b1d      	ldr	r3, [pc, #116]	; (197c <Reset_Handler+0x80>)
    1908:	4a1a      	ldr	r2, [pc, #104]	; (1974 <Reset_Handler+0x78>)
    190a:	429a      	cmp	r2, r3
    190c:	d304      	bcc.n	1918 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    190e:	4b1c      	ldr	r3, [pc, #112]	; (1980 <Reset_Handler+0x84>)
    1910:	4a1c      	ldr	r2, [pc, #112]	; (1984 <Reset_Handler+0x88>)
    1912:	429a      	cmp	r2, r3
    1914:	d310      	bcc.n	1938 <Reset_Handler+0x3c>
    1916:	e01e      	b.n	1956 <Reset_Handler+0x5a>
    1918:	4a1b      	ldr	r2, [pc, #108]	; (1988 <Reset_Handler+0x8c>)
    191a:	4b18      	ldr	r3, [pc, #96]	; (197c <Reset_Handler+0x80>)
    191c:	3303      	adds	r3, #3
    191e:	1a9b      	subs	r3, r3, r2
    1920:	089b      	lsrs	r3, r3, #2
    1922:	3301      	adds	r3, #1
    1924:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1926:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1928:	4812      	ldr	r0, [pc, #72]	; (1974 <Reset_Handler+0x78>)
    192a:	4913      	ldr	r1, [pc, #76]	; (1978 <Reset_Handler+0x7c>)
    192c:	588c      	ldr	r4, [r1, r2]
    192e:	5084      	str	r4, [r0, r2]
    1930:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1932:	429a      	cmp	r2, r3
    1934:	d1fa      	bne.n	192c <Reset_Handler+0x30>
    1936:	e7ea      	b.n	190e <Reset_Handler+0x12>
    1938:	4a14      	ldr	r2, [pc, #80]	; (198c <Reset_Handler+0x90>)
    193a:	4b11      	ldr	r3, [pc, #68]	; (1980 <Reset_Handler+0x84>)
    193c:	3303      	adds	r3, #3
    193e:	1a9b      	subs	r3, r3, r2
    1940:	089b      	lsrs	r3, r3, #2
    1942:	3301      	adds	r3, #1
    1944:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1946:	2200      	movs	r2, #0
                *pDest++ = 0;
    1948:	480e      	ldr	r0, [pc, #56]	; (1984 <Reset_Handler+0x88>)
    194a:	2100      	movs	r1, #0
    194c:	1814      	adds	r4, r2, r0
    194e:	6021      	str	r1, [r4, #0]
    1950:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1952:	429a      	cmp	r2, r3
    1954:	d1fa      	bne.n	194c <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1956:	4a0e      	ldr	r2, [pc, #56]	; (1990 <Reset_Handler+0x94>)
    1958:	21ff      	movs	r1, #255	; 0xff
    195a:	4b0e      	ldr	r3, [pc, #56]	; (1994 <Reset_Handler+0x98>)
    195c:	438b      	bics	r3, r1
    195e:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1960:	4a0d      	ldr	r2, [pc, #52]	; (1998 <Reset_Handler+0x9c>)
    1962:	6851      	ldr	r1, [r2, #4]
    1964:	2380      	movs	r3, #128	; 0x80
    1966:	430b      	orrs	r3, r1
    1968:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    196a:	4b0c      	ldr	r3, [pc, #48]	; (199c <Reset_Handler+0xa0>)
    196c:	4798      	blx	r3

        /* Branch to main function */
        main();
    196e:	4b0c      	ldr	r3, [pc, #48]	; (19a0 <Reset_Handler+0xa4>)
    1970:	4798      	blx	r3
    1972:	e7fe      	b.n	1972 <Reset_Handler+0x76>
    1974:	20000000 	.word	0x20000000
    1978:	000040cc 	.word	0x000040cc
    197c:	2000007c 	.word	0x2000007c
    1980:	20003f80 	.word	0x20003f80
    1984:	2000007c 	.word	0x2000007c
    1988:	20000004 	.word	0x20000004
    198c:	20000080 	.word	0x20000080
    1990:	e000ed00 	.word	0xe000ed00
    1994:	00000000 	.word	0x00000000
    1998:	41004000 	.word	0x41004000
    199c:	00003681 	.word	0x00003681
    19a0:	000032a5 	.word	0x000032a5

000019a4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    19a4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    19a6:	4a06      	ldr	r2, [pc, #24]	; (19c0 <_sbrk+0x1c>)
    19a8:	6812      	ldr	r2, [r2, #0]
    19aa:	2a00      	cmp	r2, #0
    19ac:	d102      	bne.n	19b4 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    19ae:	4905      	ldr	r1, [pc, #20]	; (19c4 <_sbrk+0x20>)
    19b0:	4a03      	ldr	r2, [pc, #12]	; (19c0 <_sbrk+0x1c>)
    19b2:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    19b4:	4a02      	ldr	r2, [pc, #8]	; (19c0 <_sbrk+0x1c>)
    19b6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    19b8:	18c3      	adds	r3, r0, r3
    19ba:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    19bc:	4770      	bx	lr
    19be:	46c0      	nop			; (mov r8, r8)
    19c0:	200000d4 	.word	0x200000d4
    19c4:	20005f80 	.word	0x20005f80

000019c8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    19c8:	2001      	movs	r0, #1
    19ca:	4240      	negs	r0, r0
    19cc:	4770      	bx	lr
    19ce:	46c0      	nop			; (mov r8, r8)

000019d0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    19d0:	2380      	movs	r3, #128	; 0x80
    19d2:	019b      	lsls	r3, r3, #6
    19d4:	604b      	str	r3, [r1, #4]

	return 0;
}
    19d6:	2000      	movs	r0, #0
    19d8:	4770      	bx	lr
    19da:	46c0      	nop			; (mov r8, r8)

000019dc <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    19dc:	2000      	movs	r0, #0
    19de:	4770      	bx	lr

000019e0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    19e0:	0003      	movs	r3, r0
    19e2:	3308      	adds	r3, #8
    19e4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    19e6:	2201      	movs	r2, #1
    19e8:	4252      	negs	r2, r2
    19ea:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    19ec:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    19ee:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    19f0:	2300      	movs	r3, #0
    19f2:	6003      	str	r3, [r0, #0]
}
    19f4:	4770      	bx	lr
    19f6:	46c0      	nop			; (mov r8, r8)

000019f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    19f8:	2300      	movs	r3, #0
    19fa:	6103      	str	r3, [r0, #16]
}
    19fc:	4770      	bx	lr
    19fe:	46c0      	nop			; (mov r8, r8)

00001a00 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    1a00:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1a02:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1a04:	689a      	ldr	r2, [r3, #8]
    1a06:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1a08:	689a      	ldr	r2, [r3, #8]
    1a0a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    1a0c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1a0e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1a10:	6803      	ldr	r3, [r0, #0]
    1a12:	3301      	adds	r3, #1
    1a14:	6003      	str	r3, [r0, #0]
}
    1a16:	4770      	bx	lr

00001a18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1a18:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1a1a:	680c      	ldr	r4, [r1, #0]
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1a1c:	0002      	movs	r2, r0
    1a1e:	3208      	adds	r2, #8
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1a20:	1c63      	adds	r3, r4, #1
    1a22:	d102      	bne.n	1a2a <vListInsert+0x12>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1a24:	6902      	ldr	r2, [r0, #16]
    1a26:	e004      	b.n	1a32 <vListInsert+0x1a>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1a28:	001a      	movs	r2, r3
    1a2a:	6853      	ldr	r3, [r2, #4]
    1a2c:	681d      	ldr	r5, [r3, #0]
    1a2e:	42ac      	cmp	r4, r5
    1a30:	d2fa      	bcs.n	1a28 <vListInsert+0x10>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1a32:	6853      	ldr	r3, [r2, #4]
    1a34:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1a36:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    1a38:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    1a3a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1a3c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1a3e:	6803      	ldr	r3, [r0, #0]
    1a40:	3301      	adds	r3, #1
    1a42:	6003      	str	r3, [r0, #0]
}
    1a44:	bd30      	pop	{r4, r5, pc}
    1a46:	46c0      	nop			; (mov r8, r8)

00001a48 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1a48:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1a4a:	6842      	ldr	r2, [r0, #4]
    1a4c:	6881      	ldr	r1, [r0, #8]
    1a4e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1a50:	6882      	ldr	r2, [r0, #8]
    1a52:	6841      	ldr	r1, [r0, #4]
    1a54:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1a56:	685a      	ldr	r2, [r3, #4]
    1a58:	4290      	cmp	r0, r2
    1a5a:	d101      	bne.n	1a60 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1a5c:	6882      	ldr	r2, [r0, #8]
    1a5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1a60:	2200      	movs	r2, #0
    1a62:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    1a64:	681a      	ldr	r2, [r3, #0]
    1a66:	1e50      	subs	r0, r2, #1
    1a68:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
    1a6a:	4770      	bx	lr

00001a6c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    1a6c:	4b03      	ldr	r3, [pc, #12]	; (1a7c <prvTaskExitError+0x10>)
    1a6e:	681b      	ldr	r3, [r3, #0]
    1a70:	3301      	adds	r3, #1
    1a72:	d001      	beq.n	1a78 <prvTaskExitError+0xc>
    1a74:	b672      	cpsid	i
    1a76:	e7fe      	b.n	1a76 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
    1a78:	b672      	cpsid	i
    1a7a:	e7fe      	b.n	1a7a <prvTaskExitError+0xe>
    1a7c:	2000000c 	.word	0x2000000c

00001a80 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    1a80:	4a06      	ldr	r2, [pc, #24]	; (1a9c <pxCurrentTCBConst2>)
    1a82:	6813      	ldr	r3, [r2, #0]
    1a84:	6818      	ldr	r0, [r3, #0]
    1a86:	3020      	adds	r0, #32
    1a88:	f380 8809 	msr	PSP, r0
    1a8c:	2002      	movs	r0, #2
    1a8e:	f380 8814 	msr	CONTROL, r0
    1a92:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    1a94:	46ae      	mov	lr, r5
    1a96:	b662      	cpsie	i
    1a98:	bd00      	pop	{pc}
    1a9a:	46c0      	nop			; (mov r8, r8)

00001a9c <pxCurrentTCBConst2>:
    1a9c:	20003c2c 	.word	0x20003c2c

00001aa0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    1aa0:	b510      	push	{r4, lr}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    1aa2:	1f03      	subs	r3, r0, #4
    1aa4:	2480      	movs	r4, #128	; 0x80
    1aa6:	0464      	lsls	r4, r4, #17
    1aa8:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    1aaa:	3b04      	subs	r3, #4
    1aac:	6019      	str	r1, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    1aae:	3b04      	subs	r3, #4
    1ab0:	4902      	ldr	r1, [pc, #8]	; (1abc <pxPortInitialiseStack+0x1c>)
    1ab2:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    1ab4:	3b14      	subs	r3, #20
    1ab6:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    1ab8:	3840      	subs	r0, #64	; 0x40

	return pxTopOfStack;
}
    1aba:	bd10      	pop	{r4, pc}
    1abc:	00001a6d 	.word	0x00001a6d

00001ac0 <SVC_Handler>:

void vPortSVCHandler( void )
{
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    1ac0:	4770      	bx	lr
    1ac2:	46c0      	nop			; (mov r8, r8)

00001ac4 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    1ac4:	2280      	movs	r2, #128	; 0x80
    1ac6:	0552      	lsls	r2, r2, #21
    1ac8:	4b03      	ldr	r3, [pc, #12]	; (1ad8 <vPortYield+0x14>)
    1aca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    1acc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1ad0:	f3bf 8f6f 	isb	sy
}
    1ad4:	4770      	bx	lr
    1ad6:	46c0      	nop			; (mov r8, r8)
    1ad8:	e000ed04 	.word	0xe000ed04

00001adc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    1adc:	b672      	cpsid	i
    uxCriticalNesting++;
    1ade:	4a04      	ldr	r2, [pc, #16]	; (1af0 <vPortEnterCritical+0x14>)
    1ae0:	6813      	ldr	r3, [r2, #0]
    1ae2:	3301      	adds	r3, #1
    1ae4:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
    1ae6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1aea:	f3bf 8f6f 	isb	sy
}
    1aee:	4770      	bx	lr
    1af0:	2000000c 	.word	0x2000000c

00001af4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
    1af4:	4b06      	ldr	r3, [pc, #24]	; (1b10 <vPortExitCritical+0x1c>)
    1af6:	681b      	ldr	r3, [r3, #0]
    1af8:	2b00      	cmp	r3, #0
    1afa:	d101      	bne.n	1b00 <vPortExitCritical+0xc>
    1afc:	b672      	cpsid	i
    1afe:	e7fe      	b.n	1afe <vPortExitCritical+0xa>
    uxCriticalNesting--;
    1b00:	3b01      	subs	r3, #1
    1b02:	4a03      	ldr	r2, [pc, #12]	; (1b10 <vPortExitCritical+0x1c>)
    1b04:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    1b06:	2b00      	cmp	r3, #0
    1b08:	d100      	bne.n	1b0c <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
    1b0a:	b662      	cpsie	i
    }
}
    1b0c:	4770      	bx	lr
    1b0e:	46c0      	nop			; (mov r8, r8)
    1b10:	2000000c 	.word	0x2000000c

00001b14 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    1b14:	f3ef 8010 	mrs	r0, PRIMASK
    1b18:	b672      	cpsid	i
    1b1a:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
    1b1c:	2000      	movs	r0, #0
    1b1e:	46c0      	nop			; (mov r8, r8)

00001b20 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    1b20:	f380 8810 	msr	PRIMASK, r0
    1b24:	4770      	bx	lr
    1b26:	46c0      	nop			; (mov r8, r8)

00001b28 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    1b28:	f3ef 8009 	mrs	r0, PSP
    1b2c:	4b0e      	ldr	r3, [pc, #56]	; (1b68 <pxCurrentTCBConst>)
    1b2e:	681a      	ldr	r2, [r3, #0]
    1b30:	3820      	subs	r0, #32
    1b32:	6010      	str	r0, [r2, #0]
    1b34:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1b36:	4644      	mov	r4, r8
    1b38:	464d      	mov	r5, r9
    1b3a:	4656      	mov	r6, sl
    1b3c:	465f      	mov	r7, fp
    1b3e:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1b40:	b508      	push	{r3, lr}
    1b42:	b672      	cpsid	i
    1b44:	f000 feda 	bl	28fc <vTaskSwitchContext>
    1b48:	b662      	cpsie	i
    1b4a:	bc0c      	pop	{r2, r3}
    1b4c:	6811      	ldr	r1, [r2, #0]
    1b4e:	6808      	ldr	r0, [r1, #0]
    1b50:	3010      	adds	r0, #16
    1b52:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1b54:	46a0      	mov	r8, r4
    1b56:	46a9      	mov	r9, r5
    1b58:	46b2      	mov	sl, r6
    1b5a:	46bb      	mov	fp, r7
    1b5c:	f380 8809 	msr	PSP, r0
    1b60:	3820      	subs	r0, #32
    1b62:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1b64:	4718      	bx	r3
    1b66:	46c0      	nop			; (mov r8, r8)

00001b68 <pxCurrentTCBConst>:
    1b68:	20003c2c 	.word	0x20003c2c

00001b6c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    1b6c:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    1b6e:	4b07      	ldr	r3, [pc, #28]	; (1b8c <SysTick_Handler+0x20>)
    1b70:	4798      	blx	r3
    1b72:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    1b74:	4b06      	ldr	r3, [pc, #24]	; (1b90 <SysTick_Handler+0x24>)
    1b76:	4798      	blx	r3
    1b78:	2800      	cmp	r0, #0
    1b7a:	d003      	beq.n	1b84 <SysTick_Handler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    1b7c:	2280      	movs	r2, #128	; 0x80
    1b7e:	0552      	lsls	r2, r2, #21
    1b80:	4b04      	ldr	r3, [pc, #16]	; (1b94 <SysTick_Handler+0x28>)
    1b82:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    1b84:	0020      	movs	r0, r4
    1b86:	4b04      	ldr	r3, [pc, #16]	; (1b98 <SysTick_Handler+0x2c>)
    1b88:	4798      	blx	r3
}
    1b8a:	bd10      	pop	{r4, pc}
    1b8c:	00001b15 	.word	0x00001b15
    1b90:	000025f9 	.word	0x000025f9
    1b94:	e000ed04 	.word	0xe000ed04
    1b98:	00001b21 	.word	0x00001b21

00001b9c <vPortSetupTimerInterrupt>:
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
    1b9c:	2200      	movs	r2, #0
    1b9e:	4b04      	ldr	r3, [pc, #16]	; (1bb0 <vPortSetupTimerInterrupt+0x14>)
    1ba0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    1ba2:	4a04      	ldr	r2, [pc, #16]	; (1bb4 <vPortSetupTimerInterrupt+0x18>)
    1ba4:	4b04      	ldr	r3, [pc, #16]	; (1bb8 <vPortSetupTimerInterrupt+0x1c>)
    1ba6:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    1ba8:	2207      	movs	r2, #7
    1baa:	4b04      	ldr	r3, [pc, #16]	; (1bbc <vPortSetupTimerInterrupt+0x20>)
    1bac:	601a      	str	r2, [r3, #0]
}
    1bae:	4770      	bx	lr
    1bb0:	e000e018 	.word	0xe000e018
    1bb4:	00001f3f 	.word	0x00001f3f
    1bb8:	e000e014 	.word	0xe000e014
    1bbc:	e000e010 	.word	0xe000e010

00001bc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    1bc0:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    1bc2:	4b0a      	ldr	r3, [pc, #40]	; (1bec <xPortStartScheduler+0x2c>)
    1bc4:	681a      	ldr	r2, [r3, #0]
    1bc6:	21ff      	movs	r1, #255	; 0xff
    1bc8:	0409      	lsls	r1, r1, #16
    1bca:	430a      	orrs	r2, r1
    1bcc:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    1bce:	681a      	ldr	r2, [r3, #0]
    1bd0:	21ff      	movs	r1, #255	; 0xff
    1bd2:	0609      	lsls	r1, r1, #24
    1bd4:	430a      	orrs	r2, r1
    1bd6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    1bd8:	4b05      	ldr	r3, [pc, #20]	; (1bf0 <xPortStartScheduler+0x30>)
    1bda:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    1bdc:	2200      	movs	r2, #0
    1bde:	4b05      	ldr	r3, [pc, #20]	; (1bf4 <xPortStartScheduler+0x34>)
    1be0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    1be2:	4b05      	ldr	r3, [pc, #20]	; (1bf8 <xPortStartScheduler+0x38>)
    1be4:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    1be6:	4b05      	ldr	r3, [pc, #20]	; (1bfc <xPortStartScheduler+0x3c>)
    1be8:	4798      	blx	r3
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	e000ed20 	.word	0xe000ed20
    1bf0:	00001b9d 	.word	0x00001b9d
    1bf4:	2000000c 	.word	0x2000000c
    1bf8:	00001a81 	.word	0x00001a81
    1bfc:	00001a6d 	.word	0x00001a6d

00001c00 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1c00:	b570      	push	{r4, r5, r6, lr}
    1c02:	0004      	movs	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    1c04:	0743      	lsls	r3, r0, #29
    1c06:	d002      	beq.n	1c0e <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    1c08:	2307      	movs	r3, #7
    1c0a:	439c      	bics	r4, r3
    1c0c:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
    1c0e:	4b10      	ldr	r3, [pc, #64]	; (1c50 <pvPortMalloc+0x50>)
    1c10:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    1c12:	4b10      	ldr	r3, [pc, #64]	; (1c54 <pvPortMalloc+0x54>)
    1c14:	681b      	ldr	r3, [r3, #0]
    1c16:	2b00      	cmp	r3, #0
    1c18:	d105      	bne.n	1c26 <pvPortMalloc+0x26>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    1c1a:	2207      	movs	r2, #7
    1c1c:	4b0e      	ldr	r3, [pc, #56]	; (1c58 <pvPortMalloc+0x58>)
    1c1e:	3308      	adds	r3, #8
    1c20:	4393      	bics	r3, r2
    1c22:	4a0c      	ldr	r2, [pc, #48]	; (1c54 <pvPortMalloc+0x54>)
    1c24:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1c26:	4b0d      	ldr	r3, [pc, #52]	; (1c5c <pvPortMalloc+0x5c>)
    1c28:	681b      	ldr	r3, [r3, #0]
    1c2a:	18e4      	adds	r4, r4, r3
    1c2c:	4a0c      	ldr	r2, [pc, #48]	; (1c60 <pvPortMalloc+0x60>)
    1c2e:	4294      	cmp	r4, r2
    1c30:	d807      	bhi.n	1c42 <pvPortMalloc+0x42>
    1c32:	42a3      	cmp	r3, r4
    1c34:	d207      	bcs.n	1c46 <pvPortMalloc+0x46>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1c36:	4a07      	ldr	r2, [pc, #28]	; (1c54 <pvPortMalloc+0x54>)
    1c38:	6815      	ldr	r5, [r2, #0]
    1c3a:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
    1c3c:	4b07      	ldr	r3, [pc, #28]	; (1c5c <pvPortMalloc+0x5c>)
    1c3e:	601c      	str	r4, [r3, #0]
    1c40:	e002      	b.n	1c48 <pvPortMalloc+0x48>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    1c42:	2500      	movs	r5, #0
    1c44:	e000      	b.n	1c48 <pvPortMalloc+0x48>
    1c46:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1c48:	4b06      	ldr	r3, [pc, #24]	; (1c64 <pvPortMalloc+0x64>)
    1c4a:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    1c4c:	0028      	movs	r0, r5
    1c4e:	bd70      	pop	{r4, r5, r6, pc}
    1c50:	000025c9 	.word	0x000025c9
    1c54:	20003b74 	.word	0x20003b74
    1c58:	200000dc 	.word	0x200000dc
    1c5c:	200000d8 	.word	0x200000d8
    1c60:	00003a8f 	.word	0x00003a8f
    1c64:	0000271d 	.word	0x0000271d

00001c68 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    1c68:	2800      	cmp	r0, #0
    1c6a:	d001      	beq.n	1c70 <vPortFree+0x8>
    1c6c:	b672      	cpsid	i
    1c6e:	e7fe      	b.n	1c6e <vPortFree+0x6>
}
    1c70:	4770      	bx	lr
    1c72:	46c0      	nop			; (mov r8, r8)

00001c74 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    1c74:	b570      	push	{r4, r5, r6, lr}
    1c76:	0004      	movs	r4, r0
    1c78:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    1c7a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1c7c:	2a00      	cmp	r2, #0
    1c7e:	d108      	bne.n	1c92 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1c80:	6803      	ldr	r3, [r0, #0]
    1c82:	2b00      	cmp	r3, #0
    1c84:	d12c      	bne.n	1ce0 <prvCopyDataToQueue+0x6c>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    1c86:	6840      	ldr	r0, [r0, #4]
    1c88:	4b17      	ldr	r3, [pc, #92]	; (1ce8 <prvCopyDataToQueue+0x74>)
    1c8a:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    1c8c:	2300      	movs	r3, #0
    1c8e:	6063      	str	r3, [r4, #4]
    1c90:	e026      	b.n	1ce0 <prvCopyDataToQueue+0x6c>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    1c92:	2d00      	cmp	r5, #0
    1c94:	d10d      	bne.n	1cb2 <prvCopyDataToQueue+0x3e>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    1c96:	6880      	ldr	r0, [r0, #8]
    1c98:	4b14      	ldr	r3, [pc, #80]	; (1cec <prvCopyDataToQueue+0x78>)
    1c9a:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1c9c:	68a3      	ldr	r3, [r4, #8]
    1c9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1ca0:	4694      	mov	ip, r2
    1ca2:	4463      	add	r3, ip
    1ca4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1ca6:	6862      	ldr	r2, [r4, #4]
    1ca8:	4293      	cmp	r3, r2
    1caa:	d319      	bcc.n	1ce0 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1cac:	6823      	ldr	r3, [r4, #0]
    1cae:	60a3      	str	r3, [r4, #8]
    1cb0:	e016      	b.n	1ce0 <prvCopyDataToQueue+0x6c>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1cb2:	68c0      	ldr	r0, [r0, #12]
    1cb4:	4b0d      	ldr	r3, [pc, #52]	; (1cec <prvCopyDataToQueue+0x78>)
    1cb6:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    1cb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1cba:	425b      	negs	r3, r3
    1cbc:	68e2      	ldr	r2, [r4, #12]
    1cbe:	18d2      	adds	r2, r2, r3
    1cc0:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1cc2:	6821      	ldr	r1, [r4, #0]
    1cc4:	428a      	cmp	r2, r1
    1cc6:	d203      	bcs.n	1cd0 <prvCopyDataToQueue+0x5c>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1cc8:	6862      	ldr	r2, [r4, #4]
    1cca:	4694      	mov	ip, r2
    1ccc:	4463      	add	r3, ip
    1cce:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    1cd0:	2d02      	cmp	r5, #2
    1cd2:	d105      	bne.n	1ce0 <prvCopyDataToQueue+0x6c>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1cd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1cd6:	2b00      	cmp	r3, #0
    1cd8:	d002      	beq.n	1ce0 <prvCopyDataToQueue+0x6c>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    1cda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1cdc:	3b01      	subs	r3, #1
    1cde:	63a3      	str	r3, [r4, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    1ce0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1ce2:	3301      	adds	r3, #1
    1ce4:	63a3      	str	r3, [r4, #56]	; 0x38
}
    1ce6:	bd70      	pop	{r4, r5, r6, pc}
    1ce8:	00002c11 	.word	0x00002c11
    1cec:	000036cd 	.word	0x000036cd

00001cf0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    1cf0:	b510      	push	{r4, lr}
    1cf2:	b082      	sub	sp, #8
    1cf4:	9001      	str	r0, [sp, #4]
    1cf6:	000a      	movs	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    1cf8:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    1cfa:	2c00      	cmp	r4, #0
    1cfc:	d101      	bne.n	1d02 <prvNotifyQueueSetContainer+0x12>
    1cfe:	b672      	cpsid	i
    1d00:	e7fe      	b.n	1d00 <prvNotifyQueueSetContainer+0x10>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    1d02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1d04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1d06:	4299      	cmp	r1, r3
    1d08:	d301      	bcc.n	1d0e <prvNotifyQueueSetContainer+0x1e>
    1d0a:	b672      	cpsid	i
    1d0c:	e7fe      	b.n	1d0c <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    1d0e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    1d10:	2000      	movs	r0, #0
		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    1d12:	428b      	cmp	r3, r1
    1d14:	d90d      	bls.n	1d32 <prvNotifyQueueSetContainer+0x42>
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    1d16:	a901      	add	r1, sp, #4
    1d18:	0020      	movs	r0, r4
    1d1a:	4b07      	ldr	r3, [pc, #28]	; (1d38 <prvNotifyQueueSetContainer+0x48>)
    1d1c:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    1d1e:	2000      	movs	r0, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    1d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1d22:	2b00      	cmp	r3, #0
    1d24:	d005      	beq.n	1d32 <prvNotifyQueueSetContainer+0x42>
			{
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    1d26:	0020      	movs	r0, r4
    1d28:	3024      	adds	r0, #36	; 0x24
    1d2a:	4b04      	ldr	r3, [pc, #16]	; (1d3c <prvNotifyQueueSetContainer+0x4c>)
    1d2c:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    1d2e:	1e43      	subs	r3, r0, #1
    1d30:	4198      	sbcs	r0, r3
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    1d32:	b002      	add	sp, #8
    1d34:	bd10      	pop	{r4, pc}
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	00001c75 	.word	0x00001c75
    1d3c:	00002a41 	.word	0x00002a41

00001d40 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    1d40:	b570      	push	{r4, r5, r6, lr}
    1d42:	000c      	movs	r4, r1
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    1d44:	6801      	ldr	r1, [r0, #0]
    1d46:	2900      	cmp	r1, #0
    1d48:	d00b      	beq.n	1d62 <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1d4a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1d4c:	68c3      	ldr	r3, [r0, #12]
    1d4e:	189b      	adds	r3, r3, r2
    1d50:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    1d52:	6845      	ldr	r5, [r0, #4]
    1d54:	42ab      	cmp	r3, r5
    1d56:	d300      	bcc.n	1d5a <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1d58:	60c1      	str	r1, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    1d5a:	68c1      	ldr	r1, [r0, #12]
    1d5c:	0020      	movs	r0, r4
    1d5e:	4b01      	ldr	r3, [pc, #4]	; (1d64 <prvCopyDataFromQueue+0x24>)
    1d60:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1d62:	bd70      	pop	{r4, r5, r6, pc}
    1d64:	000036cd 	.word	0x000036cd

00001d68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    1d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d6a:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1d6c:	4b24      	ldr	r3, [pc, #144]	; (1e00 <prvUnlockQueue+0x98>)
    1d6e:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1d70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1d72:	2b00      	cmp	r3, #0
    1d74:	dd1c      	ble.n	1db0 <prvUnlockQueue+0x48>
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    1d76:	4d23      	ldr	r5, [pc, #140]	; (1e04 <prvUnlockQueue+0x9c>)
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1d78:	4e23      	ldr	r6, [pc, #140]	; (1e08 <prvUnlockQueue+0xa0>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    1d7a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	d007      	beq.n	1d90 <prvUnlockQueue+0x28>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    1d80:	2100      	movs	r1, #0
    1d82:	0020      	movs	r0, r4
    1d84:	47a8      	blx	r5
    1d86:	2801      	cmp	r0, #1
    1d88:	d10c      	bne.n	1da4 <prvUnlockQueue+0x3c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    1d8a:	4b20      	ldr	r3, [pc, #128]	; (1e0c <prvUnlockQueue+0xa4>)
    1d8c:	4798      	blx	r3
    1d8e:	e009      	b.n	1da4 <prvUnlockQueue+0x3c>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1d92:	2b00      	cmp	r3, #0
    1d94:	d00c      	beq.n	1db0 <prvUnlockQueue+0x48>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1d96:	0020      	movs	r0, r4
    1d98:	3024      	adds	r0, #36	; 0x24
    1d9a:	47b0      	blx	r6
    1d9c:	2800      	cmp	r0, #0
    1d9e:	d001      	beq.n	1da4 <prvUnlockQueue+0x3c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    1da0:	4b1a      	ldr	r3, [pc, #104]	; (1e0c <prvUnlockQueue+0xa4>)
    1da2:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    1da4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1da6:	3b01      	subs	r3, #1
    1da8:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1daa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1dac:	2b00      	cmp	r3, #0
    1dae:	dce4      	bgt.n	1d7a <prvUnlockQueue+0x12>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    1db0:	2301      	movs	r3, #1
    1db2:	425b      	negs	r3, r3
    1db4:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    1db6:	4b16      	ldr	r3, [pc, #88]	; (1e10 <prvUnlockQueue+0xa8>)
    1db8:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    1dba:	4b11      	ldr	r3, [pc, #68]	; (1e00 <prvUnlockQueue+0x98>)
    1dbc:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1dbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1dc0:	2b00      	cmp	r3, #0
    1dc2:	dd16      	ble.n	1df2 <prvUnlockQueue+0x8a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1dc4:	6923      	ldr	r3, [r4, #16]
    1dc6:	2b00      	cmp	r3, #0
    1dc8:	d104      	bne.n	1dd4 <prvUnlockQueue+0x6c>
    1dca:	e012      	b.n	1df2 <prvUnlockQueue+0x8a>
    1dcc:	6923      	ldr	r3, [r4, #16]
    1dce:	2b00      	cmp	r3, #0
    1dd0:	d104      	bne.n	1ddc <prvUnlockQueue+0x74>
    1dd2:	e00e      	b.n	1df2 <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1dd4:	0025      	movs	r5, r4
    1dd6:	3510      	adds	r5, #16
    1dd8:	4f0b      	ldr	r7, [pc, #44]	; (1e08 <prvUnlockQueue+0xa0>)
				{
					vTaskMissedYield();
    1dda:	4e0c      	ldr	r6, [pc, #48]	; (1e0c <prvUnlockQueue+0xa4>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1ddc:	0028      	movs	r0, r5
    1dde:	47b8      	blx	r7
    1de0:	2800      	cmp	r0, #0
    1de2:	d000      	beq.n	1de6 <prvUnlockQueue+0x7e>
				{
					vTaskMissedYield();
    1de4:	47b0      	blx	r6
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    1de6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1de8:	3b01      	subs	r3, #1
    1dea:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1dec:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1dee:	2b00      	cmp	r3, #0
    1df0:	dcec      	bgt.n	1dcc <prvUnlockQueue+0x64>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    1df2:	2301      	movs	r3, #1
    1df4:	425b      	negs	r3, r3
    1df6:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    1df8:	4b05      	ldr	r3, [pc, #20]	; (1e10 <prvUnlockQueue+0xa8>)
    1dfa:	4798      	blx	r3
}
    1dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dfe:	46c0      	nop			; (mov r8, r8)
    1e00:	00001add 	.word	0x00001add
    1e04:	00001cf1 	.word	0x00001cf1
    1e08:	00002a41 	.word	0x00002a41
    1e0c:	00002b59 	.word	0x00002b59
    1e10:	00001af5 	.word	0x00001af5

00001e14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1e14:	b570      	push	{r4, r5, r6, lr}
    1e16:	0004      	movs	r4, r0
    1e18:	000d      	movs	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    1e1a:	2800      	cmp	r0, #0
    1e1c:	d101      	bne.n	1e22 <xQueueGenericReset+0xe>
    1e1e:	b672      	cpsid	i
    1e20:	e7fe      	b.n	1e20 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
    1e22:	4b15      	ldr	r3, [pc, #84]	; (1e78 <xQueueGenericReset+0x64>)
    1e24:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1e26:	6822      	ldr	r2, [r4, #0]
    1e28:	6c21      	ldr	r1, [r4, #64]	; 0x40
    1e2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1e2c:	434b      	muls	r3, r1
    1e2e:	18d0      	adds	r0, r2, r3
    1e30:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1e32:	2000      	movs	r0, #0
    1e34:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1e36:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1e38:	1a5b      	subs	r3, r3, r1
    1e3a:	18d3      	adds	r3, r2, r3
    1e3c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    1e3e:	2301      	movs	r3, #1
    1e40:	425b      	negs	r3, r3
    1e42:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    1e44:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
    1e46:	2d00      	cmp	r5, #0
    1e48:	d10b      	bne.n	1e62 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1e4a:	6923      	ldr	r3, [r4, #16]
    1e4c:	2b00      	cmp	r3, #0
    1e4e:	d00f      	beq.n	1e70 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1e50:	0020      	movs	r0, r4
    1e52:	3010      	adds	r0, #16
    1e54:	4b09      	ldr	r3, [pc, #36]	; (1e7c <xQueueGenericReset+0x68>)
    1e56:	4798      	blx	r3
    1e58:	2801      	cmp	r0, #1
    1e5a:	d109      	bne.n	1e70 <xQueueGenericReset+0x5c>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1e5c:	4b08      	ldr	r3, [pc, #32]	; (1e80 <xQueueGenericReset+0x6c>)
    1e5e:	4798      	blx	r3
    1e60:	e006      	b.n	1e70 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1e62:	0020      	movs	r0, r4
    1e64:	3010      	adds	r0, #16
    1e66:	4d07      	ldr	r5, [pc, #28]	; (1e84 <xQueueGenericReset+0x70>)
    1e68:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1e6a:	0020      	movs	r0, r4
    1e6c:	3024      	adds	r0, #36	; 0x24
    1e6e:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
    1e70:	4b05      	ldr	r3, [pc, #20]	; (1e88 <xQueueGenericReset+0x74>)
    1e72:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    1e74:	2001      	movs	r0, #1
    1e76:	bd70      	pop	{r4, r5, r6, pc}
    1e78:	00001add 	.word	0x00001add
    1e7c:	00002a41 	.word	0x00002a41
    1e80:	00001ac5 	.word	0x00001ac5
    1e84:	000019e1 	.word	0x000019e1
    1e88:	00001af5 	.word	0x00001af5

00001e8c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    1e8c:	b570      	push	{r4, r5, r6, lr}
    1e8e:	0005      	movs	r5, r0
    1e90:	000e      	movs	r6, r1
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    1e92:	2800      	cmp	r0, #0
    1e94:	d011      	beq.n	1eba <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    1e96:	2050      	movs	r0, #80	; 0x50
    1e98:	4b0e      	ldr	r3, [pc, #56]	; (1ed4 <xQueueGenericCreate+0x48>)
    1e9a:	4798      	blx	r3
    1e9c:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    1e9e:	d00c      	beq.n	1eba <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    1ea0:	0030      	movs	r0, r6
    1ea2:	4368      	muls	r0, r5
    1ea4:	3001      	adds	r0, #1
    1ea6:	4b0b      	ldr	r3, [pc, #44]	; (1ed4 <xQueueGenericCreate+0x48>)
    1ea8:	4798      	blx	r3
    1eaa:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
    1eac:	2800      	cmp	r0, #0
    1eae:	d106      	bne.n	1ebe <xQueueGenericCreate+0x32>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    1eb0:	0020      	movs	r0, r4
    1eb2:	4b09      	ldr	r3, [pc, #36]	; (1ed8 <xQueueGenericCreate+0x4c>)
    1eb4:	4798      	blx	r3
    1eb6:	e000      	b.n	1eba <xQueueGenericCreate+0x2e>
    1eb8:	e7fe      	b.n	1eb8 <xQueueGenericCreate+0x2c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    1eba:	b672      	cpsid	i
    1ebc:	e7fc      	b.n	1eb8 <xQueueGenericCreate+0x2c>
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    1ebe:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    1ec0:	6426      	str	r6, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1ec2:	2101      	movs	r1, #1
    1ec4:	0020      	movs	r0, r4
    1ec6:	4b05      	ldr	r3, [pc, #20]	; (1edc <xQueueGenericCreate+0x50>)
    1ec8:	4798      	blx	r3
				}
				#endif /* configUSE_TRACE_FACILITY */

				#if( configUSE_QUEUE_SETS == 1 )
				{
					pxNewQueue->pxQueueSetContainer = NULL;
    1eca:	2300      	movs	r3, #0
    1ecc:	64e3      	str	r3, [r4, #76]	; 0x4c
	}

	configASSERT( xReturn );

	return xReturn;
}
    1ece:	0020      	movs	r0, r4
    1ed0:	bd70      	pop	{r4, r5, r6, pc}
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	00001c01 	.word	0x00001c01
    1ed8:	00001c69 	.word	0x00001c69
    1edc:	00001e15 	.word	0x00001e15

00001ee0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ee2:	4657      	mov	r7, sl
    1ee4:	464e      	mov	r6, r9
    1ee6:	4645      	mov	r5, r8
    1ee8:	b4e0      	push	{r5, r6, r7}
    1eea:	b084      	sub	sp, #16
    1eec:	0004      	movs	r4, r0
    1eee:	000f      	movs	r7, r1
    1ef0:	9201      	str	r2, [sp, #4]
    1ef2:	001d      	movs	r5, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    1ef4:	2800      	cmp	r0, #0
    1ef6:	d101      	bne.n	1efc <xQueueGenericSend+0x1c>
    1ef8:	b672      	cpsid	i
    1efa:	e7fe      	b.n	1efa <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1efc:	2900      	cmp	r1, #0
    1efe:	d104      	bne.n	1f0a <xQueueGenericSend+0x2a>
    1f00:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1f02:	2b00      	cmp	r3, #0
    1f04:	d001      	beq.n	1f0a <xQueueGenericSend+0x2a>
    1f06:	b672      	cpsid	i
    1f08:	e7fe      	b.n	1f08 <xQueueGenericSend+0x28>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1f0a:	2d02      	cmp	r5, #2
    1f0c:	d104      	bne.n	1f18 <xQueueGenericSend+0x38>
    1f0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1f10:	2b01      	cmp	r3, #1
    1f12:	d001      	beq.n	1f18 <xQueueGenericSend+0x38>
    1f14:	b672      	cpsid	i
    1f16:	e7fe      	b.n	1f16 <xQueueGenericSend+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1f18:	4b42      	ldr	r3, [pc, #264]	; (2024 <STACK_SIZE+0x24>)
    1f1a:	4798      	blx	r3
    1f1c:	2800      	cmp	r0, #0
    1f1e:	d104      	bne.n	1f2a <xQueueGenericSend+0x4a>
    1f20:	9b01      	ldr	r3, [sp, #4]
    1f22:	2b00      	cmp	r3, #0
    1f24:	d003      	beq.n	1f2e <xQueueGenericSend+0x4e>
    1f26:	b672      	cpsid	i
    1f28:	e7fe      	b.n	1f28 <xQueueGenericSend+0x48>
    1f2a:	2600      	movs	r6, #0
    1f2c:	e000      	b.n	1f30 <xQueueGenericSend+0x50>
    1f2e:	2600      	movs	r6, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1f30:	4b3d      	ldr	r3, [pc, #244]	; (2028 <STACK_SIZE+0x28>)
    1f32:	4698      	mov	r8, r3
    1f34:	47c0      	blx	r8
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1f36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1f38:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1f3a:	4293      	cmp	r3, r2
    1f3c:	d301      	bcc.n	1f42 <xQueueGenericSend+0x62>
    1f3e:	2d02      	cmp	r5, #2
    1f40:	d11f      	bne.n	1f82 <xQueueGenericSend+0xa2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1f42:	002a      	movs	r2, r5
    1f44:	0039      	movs	r1, r7
    1f46:	0020      	movs	r0, r4
    1f48:	4b38      	ldr	r3, [pc, #224]	; (202c <STACK_SIZE+0x2c>)
    1f4a:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    1f4c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1f4e:	2b00      	cmp	r3, #0
    1f50:	d008      	beq.n	1f64 <xQueueGenericSend+0x84>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    1f52:	0029      	movs	r1, r5
    1f54:	0020      	movs	r0, r4
    1f56:	4b36      	ldr	r3, [pc, #216]	; (2030 <STACK_SIZE+0x30>)
    1f58:	4798      	blx	r3
    1f5a:	2801      	cmp	r0, #1
    1f5c:	d10d      	bne.n	1f7a <xQueueGenericSend+0x9a>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    1f5e:	4b35      	ldr	r3, [pc, #212]	; (2034 <STACK_SIZE+0x34>)
    1f60:	4798      	blx	r3
    1f62:	e00a      	b.n	1f7a <xQueueGenericSend+0x9a>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1f64:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1f66:	2b00      	cmp	r3, #0
    1f68:	d007      	beq.n	1f7a <xQueueGenericSend+0x9a>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1f6a:	0020      	movs	r0, r4
    1f6c:	3024      	adds	r0, #36	; 0x24
    1f6e:	4b32      	ldr	r3, [pc, #200]	; (2038 <STACK_SIZE+0x38>)
    1f70:	4798      	blx	r3
    1f72:	2801      	cmp	r0, #1
    1f74:	d101      	bne.n	1f7a <xQueueGenericSend+0x9a>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    1f76:	4b2f      	ldr	r3, [pc, #188]	; (2034 <STACK_SIZE+0x34>)
    1f78:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1f7a:	4b30      	ldr	r3, [pc, #192]	; (203c <STACK_SIZE+0x3c>)
    1f7c:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    1f7e:	2001      	movs	r0, #1
    1f80:	e049      	b.n	2016 <STACK_SIZE+0x16>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1f82:	9b01      	ldr	r3, [sp, #4]
    1f84:	2b00      	cmp	r3, #0
    1f86:	d103      	bne.n	1f90 <xQueueGenericSend+0xb0>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1f88:	4b2c      	ldr	r3, [pc, #176]	; (203c <STACK_SIZE+0x3c>)
    1f8a:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1f8c:	2000      	movs	r0, #0
    1f8e:	e042      	b.n	2016 <STACK_SIZE+0x16>
				}
				else if( xEntryTimeSet == pdFALSE )
    1f90:	2e00      	cmp	r6, #0
    1f92:	d103      	bne.n	1f9c <xQueueGenericSend+0xbc>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1f94:	a802      	add	r0, sp, #8
    1f96:	4b2a      	ldr	r3, [pc, #168]	; (2040 <STACK_SIZE+0x40>)
    1f98:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    1f9a:	3601      	adds	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1f9c:	4b27      	ldr	r3, [pc, #156]	; (203c <STACK_SIZE+0x3c>)
    1f9e:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1fa0:	4b28      	ldr	r3, [pc, #160]	; (2044 <STACK_SIZE+0x44>)
    1fa2:	4798      	blx	r3
		prvLockQueue( pxQueue );
    1fa4:	4b20      	ldr	r3, [pc, #128]	; (2028 <STACK_SIZE+0x28>)
    1fa6:	4798      	blx	r3
    1fa8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1faa:	3301      	adds	r3, #1
    1fac:	d101      	bne.n	1fb2 <xQueueGenericSend+0xd2>
    1fae:	2300      	movs	r3, #0
    1fb0:	6463      	str	r3, [r4, #68]	; 0x44
    1fb2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1fb4:	3301      	adds	r3, #1
    1fb6:	d101      	bne.n	1fbc <xQueueGenericSend+0xdc>
    1fb8:	2300      	movs	r3, #0
    1fba:	64a3      	str	r3, [r4, #72]	; 0x48
    1fbc:	4b1f      	ldr	r3, [pc, #124]	; (203c <STACK_SIZE+0x3c>)
    1fbe:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1fc0:	a901      	add	r1, sp, #4
    1fc2:	a802      	add	r0, sp, #8
    1fc4:	4b20      	ldr	r3, [pc, #128]	; (2048 <STACK_SIZE+0x48>)
    1fc6:	4798      	blx	r3
    1fc8:	2800      	cmp	r0, #0
    1fca:	d11e      	bne.n	200a <STACK_SIZE+0xa>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1fcc:	4b16      	ldr	r3, [pc, #88]	; (2028 <STACK_SIZE+0x28>)
    1fce:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1fd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1fd2:	469a      	mov	sl, r3
    1fd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1fd6:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1fd8:	4b18      	ldr	r3, [pc, #96]	; (203c <STACK_SIZE+0x3c>)
    1fda:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1fdc:	45ca      	cmp	sl, r9
    1fde:	d10e      	bne.n	1ffe <xQueueGenericSend+0x11e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1fe0:	0020      	movs	r0, r4
    1fe2:	3010      	adds	r0, #16
    1fe4:	9901      	ldr	r1, [sp, #4]
    1fe6:	4b19      	ldr	r3, [pc, #100]	; (204c <STACK_SIZE+0x4c>)
    1fe8:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1fea:	0020      	movs	r0, r4
    1fec:	4b18      	ldr	r3, [pc, #96]	; (2050 <STACK_SIZE+0x50>)
    1fee:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1ff0:	4b18      	ldr	r3, [pc, #96]	; (2054 <STACK_SIZE+0x54>)
    1ff2:	4798      	blx	r3
    1ff4:	2800      	cmp	r0, #0
    1ff6:	d19d      	bne.n	1f34 <xQueueGenericSend+0x54>
				{
					portYIELD_WITHIN_API();
    1ff8:	4b0e      	ldr	r3, [pc, #56]	; (2034 <STACK_SIZE+0x34>)
    1ffa:	4798      	blx	r3
    1ffc:	e79a      	b.n	1f34 <xQueueGenericSend+0x54>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1ffe:	0020      	movs	r0, r4
    2000:	4b13      	ldr	r3, [pc, #76]	; (2050 <STACK_SIZE+0x50>)
    2002:	4798      	blx	r3
				( void ) xTaskResumeAll();
    2004:	4b13      	ldr	r3, [pc, #76]	; (2054 <STACK_SIZE+0x54>)
    2006:	4798      	blx	r3
    2008:	e794      	b.n	1f34 <xQueueGenericSend+0x54>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    200a:	0020      	movs	r0, r4
    200c:	4b10      	ldr	r3, [pc, #64]	; (2050 <STACK_SIZE+0x50>)
    200e:	4798      	blx	r3
			( void ) xTaskResumeAll();
    2010:	4b10      	ldr	r3, [pc, #64]	; (2054 <STACK_SIZE+0x54>)
    2012:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2014:	2000      	movs	r0, #0
		}
	}
}
    2016:	b004      	add	sp, #16
    2018:	bc1c      	pop	{r2, r3, r4}
    201a:	4690      	mov	r8, r2
    201c:	4699      	mov	r9, r3
    201e:	46a2      	mov	sl, r4
    2020:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2022:	46c0      	nop			; (mov r8, r8)
    2024:	00002b71 	.word	0x00002b71
    2028:	00001add 	.word	0x00001add
    202c:	00001c75 	.word	0x00001c75
    2030:	00001cf1 	.word	0x00001cf1
    2034:	00001ac5 	.word	0x00001ac5
    2038:	00002a41 	.word	0x00002a41
    203c:	00001af5 	.word	0x00001af5
    2040:	00002ac9 	.word	0x00002ac9
    2044:	000025c9 	.word	0x000025c9
    2048:	00002ae9 	.word	0x00002ae9
    204c:	000029a9 	.word	0x000029a9
    2050:	00001d69 	.word	0x00001d69
    2054:	0000271d 	.word	0x0000271d

00002058 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    2058:	b5f0      	push	{r4, r5, r6, r7, lr}
    205a:	b083      	sub	sp, #12
    205c:	0004      	movs	r4, r0
    205e:	000f      	movs	r7, r1
    2060:	0016      	movs	r6, r2
    2062:	001d      	movs	r5, r3
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    2064:	2800      	cmp	r0, #0
    2066:	d101      	bne.n	206c <xQueueGenericSendFromISR+0x14>
    2068:	b672      	cpsid	i
    206a:	e7fe      	b.n	206a <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    206c:	2900      	cmp	r1, #0
    206e:	d104      	bne.n	207a <xQueueGenericSendFromISR+0x22>
    2070:	6c03      	ldr	r3, [r0, #64]	; 0x40
    2072:	2b00      	cmp	r3, #0
    2074:	d001      	beq.n	207a <xQueueGenericSendFromISR+0x22>
    2076:	b672      	cpsid	i
    2078:	e7fe      	b.n	2078 <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    207a:	2d02      	cmp	r5, #2
    207c:	d138      	bne.n	20f0 <xQueueGenericSendFromISR+0x98>
    207e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2080:	2b01      	cmp	r3, #1
    2082:	d030      	beq.n	20e6 <xQueueGenericSendFromISR+0x8e>
    2084:	b672      	cpsid	i
    2086:	e7fe      	b.n	2086 <xQueueGenericSendFromISR+0x2e>
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2088:	002a      	movs	r2, r5
    208a:	0039      	movs	r1, r7
    208c:	0020      	movs	r0, r4
    208e:	4b1f      	ldr	r3, [pc, #124]	; (210c <xQueueGenericSendFromISR+0xb4>)
    2090:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2092:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2094:	3301      	adds	r3, #1
    2096:	d11d      	bne.n	20d4 <xQueueGenericSendFromISR+0x7c>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    2098:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    209a:	2b00      	cmp	r3, #0
    209c:	d00b      	beq.n	20b6 <xQueueGenericSendFromISR+0x5e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    209e:	0029      	movs	r1, r5
    20a0:	0020      	movs	r0, r4
    20a2:	4b1b      	ldr	r3, [pc, #108]	; (2110 <xQueueGenericSendFromISR+0xb8>)
    20a4:	4798      	blx	r3
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    20a6:	2501      	movs	r5, #1
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    20a8:	2801      	cmp	r0, #1
    20aa:	d129      	bne.n	2100 <xQueueGenericSendFromISR+0xa8>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    20ac:	2e00      	cmp	r6, #0
    20ae:	d016      	beq.n	20de <xQueueGenericSendFromISR+0x86>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    20b0:	2301      	movs	r3, #1
    20b2:	6033      	str	r3, [r6, #0]
    20b4:	e024      	b.n	2100 <xQueueGenericSendFromISR+0xa8>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    20b6:	2501      	movs	r5, #1
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    20b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    20ba:	2b00      	cmp	r3, #0
    20bc:	d020      	beq.n	2100 <xQueueGenericSendFromISR+0xa8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    20be:	0020      	movs	r0, r4
    20c0:	3024      	adds	r0, #36	; 0x24
    20c2:	4b14      	ldr	r3, [pc, #80]	; (2114 <xQueueGenericSendFromISR+0xbc>)
    20c4:	4798      	blx	r3
    20c6:	2800      	cmp	r0, #0
    20c8:	d01a      	beq.n	2100 <xQueueGenericSendFromISR+0xa8>
							{
								/* The task waiting has a higher priority so record that a
								context	switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    20ca:	2e00      	cmp	r6, #0
    20cc:	d009      	beq.n	20e2 <xQueueGenericSendFromISR+0x8a>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    20ce:	2301      	movs	r3, #1
    20d0:	6033      	str	r3, [r6, #0]
    20d2:	e015      	b.n	2100 <xQueueGenericSendFromISR+0xa8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    20d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    20d6:	3301      	adds	r3, #1
    20d8:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
    20da:	2501      	movs	r5, #1
    20dc:	e010      	b.n	2100 <xQueueGenericSendFromISR+0xa8>
    20de:	2501      	movs	r5, #1
    20e0:	e00e      	b.n	2100 <xQueueGenericSendFromISR+0xa8>
    20e2:	2501      	movs	r5, #1
    20e4:	e00c      	b.n	2100 <xQueueGenericSendFromISR+0xa8>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    20e6:	4b0c      	ldr	r3, [pc, #48]	; (2118 <xQueueGenericSendFromISR+0xc0>)
    20e8:	4798      	blx	r3
    20ea:	9001      	str	r0, [sp, #4]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    20ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    20ee:	e7cb      	b.n	2088 <xQueueGenericSendFromISR+0x30>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    20f0:	4b09      	ldr	r3, [pc, #36]	; (2118 <xQueueGenericSendFromISR+0xc0>)
    20f2:	4798      	blx	r3
    20f4:	9001      	str	r0, [sp, #4]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    20f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    20f8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    20fa:	429a      	cmp	r2, r3
    20fc:	d8c4      	bhi.n	2088 <xQueueGenericSendFromISR+0x30>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    20fe:	2500      	movs	r5, #0
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    2100:	9801      	ldr	r0, [sp, #4]
    2102:	4b06      	ldr	r3, [pc, #24]	; (211c <xQueueGenericSendFromISR+0xc4>)
    2104:	4798      	blx	r3

	return xReturn;
}
    2106:	0028      	movs	r0, r5
    2108:	b003      	add	sp, #12
    210a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    210c:	00001c75 	.word	0x00001c75
    2110:	00001cf1 	.word	0x00001cf1
    2114:	00002a41 	.word	0x00002a41
    2118:	00001b15 	.word	0x00001b15
    211c:	00001b21 	.word	0x00001b21

00002120 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    2120:	b5f0      	push	{r4, r5, r6, r7, lr}
    2122:	464f      	mov	r7, r9
    2124:	4646      	mov	r6, r8
    2126:	b4c0      	push	{r6, r7}
    2128:	b085      	sub	sp, #20
    212a:	0004      	movs	r4, r0
    212c:	000e      	movs	r6, r1
    212e:	9201      	str	r2, [sp, #4]
    2130:	001f      	movs	r7, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    2132:	2800      	cmp	r0, #0
    2134:	d101      	bne.n	213a <xQueueGenericReceive+0x1a>
    2136:	b672      	cpsid	i
    2138:	e7fe      	b.n	2138 <xQueueGenericReceive+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    213a:	2900      	cmp	r1, #0
    213c:	d104      	bne.n	2148 <xQueueGenericReceive+0x28>
    213e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    2140:	2b00      	cmp	r3, #0
    2142:	d001      	beq.n	2148 <xQueueGenericReceive+0x28>
    2144:	b672      	cpsid	i
    2146:	e7fe      	b.n	2146 <xQueueGenericReceive+0x26>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    2148:	4b4a      	ldr	r3, [pc, #296]	; (2274 <xQueueGenericReceive+0x154>)
    214a:	4798      	blx	r3
    214c:	2800      	cmp	r0, #0
    214e:	d104      	bne.n	215a <xQueueGenericReceive+0x3a>
    2150:	9b01      	ldr	r3, [sp, #4]
    2152:	2b00      	cmp	r3, #0
    2154:	d003      	beq.n	215e <xQueueGenericReceive+0x3e>
    2156:	b672      	cpsid	i
    2158:	e7fe      	b.n	2158 <xQueueGenericReceive+0x38>
    215a:	2500      	movs	r5, #0
    215c:	e000      	b.n	2160 <xQueueGenericReceive+0x40>
    215e:	2500      	movs	r5, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2160:	4b45      	ldr	r3, [pc, #276]	; (2278 <xQueueGenericReceive+0x158>)
    2162:	4698      	mov	r8, r3
    2164:	47c0      	blx	r8
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2166:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2168:	2b00      	cmp	r3, #0
    216a:	d02b      	beq.n	21c4 <xQueueGenericReceive+0xa4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    216c:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    216e:	0031      	movs	r1, r6
    2170:	0020      	movs	r0, r4
    2172:	4b42      	ldr	r3, [pc, #264]	; (227c <xQueueGenericReceive+0x15c>)
    2174:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    2176:	2f00      	cmp	r7, #0
    2178:	d114      	bne.n	21a4 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    217a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    217c:	3b01      	subs	r3, #1
    217e:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2180:	6823      	ldr	r3, [r4, #0]
    2182:	2b00      	cmp	r3, #0
    2184:	d102      	bne.n	218c <xQueueGenericReceive+0x6c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    2186:	4b3e      	ldr	r3, [pc, #248]	; (2280 <xQueueGenericReceive+0x160>)
    2188:	4798      	blx	r3
    218a:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    218c:	6923      	ldr	r3, [r4, #16]
    218e:	2b00      	cmp	r3, #0
    2190:	d014      	beq.n	21bc <xQueueGenericReceive+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2192:	0020      	movs	r0, r4
    2194:	3010      	adds	r0, #16
    2196:	4b3b      	ldr	r3, [pc, #236]	; (2284 <xQueueGenericReceive+0x164>)
    2198:	4798      	blx	r3
    219a:	2801      	cmp	r0, #1
    219c:	d10e      	bne.n	21bc <xQueueGenericReceive+0x9c>
						{
							queueYIELD_IF_USING_PREEMPTION();
    219e:	4b3a      	ldr	r3, [pc, #232]	; (2288 <xQueueGenericReceive+0x168>)
    21a0:	4798      	blx	r3
    21a2:	e00b      	b.n	21bc <xQueueGenericReceive+0x9c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    21a4:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    21a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    21a8:	2b00      	cmp	r3, #0
    21aa:	d007      	beq.n	21bc <xQueueGenericReceive+0x9c>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    21ac:	0020      	movs	r0, r4
    21ae:	3024      	adds	r0, #36	; 0x24
    21b0:	4b34      	ldr	r3, [pc, #208]	; (2284 <xQueueGenericReceive+0x164>)
    21b2:	4798      	blx	r3
    21b4:	2800      	cmp	r0, #0
    21b6:	d001      	beq.n	21bc <xQueueGenericReceive+0x9c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    21b8:	4b33      	ldr	r3, [pc, #204]	; (2288 <xQueueGenericReceive+0x168>)
    21ba:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    21bc:	4b33      	ldr	r3, [pc, #204]	; (228c <xQueueGenericReceive+0x16c>)
    21be:	4798      	blx	r3
				return pdPASS;
    21c0:	2001      	movs	r0, #1
    21c2:	e052      	b.n	226a <xQueueGenericReceive+0x14a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    21c4:	9b01      	ldr	r3, [sp, #4]
    21c6:	2b00      	cmp	r3, #0
    21c8:	d103      	bne.n	21d2 <xQueueGenericReceive+0xb2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    21ca:	4b30      	ldr	r3, [pc, #192]	; (228c <xQueueGenericReceive+0x16c>)
    21cc:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    21ce:	2000      	movs	r0, #0
    21d0:	e04b      	b.n	226a <xQueueGenericReceive+0x14a>
				}
				else if( xEntryTimeSet == pdFALSE )
    21d2:	2d00      	cmp	r5, #0
    21d4:	d103      	bne.n	21de <xQueueGenericReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    21d6:	a802      	add	r0, sp, #8
    21d8:	4b2d      	ldr	r3, [pc, #180]	; (2290 <xQueueGenericReceive+0x170>)
    21da:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    21dc:	3501      	adds	r5, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    21de:	4b2b      	ldr	r3, [pc, #172]	; (228c <xQueueGenericReceive+0x16c>)
    21e0:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    21e2:	4b2c      	ldr	r3, [pc, #176]	; (2294 <xQueueGenericReceive+0x174>)
    21e4:	4798      	blx	r3
		prvLockQueue( pxQueue );
    21e6:	4b24      	ldr	r3, [pc, #144]	; (2278 <xQueueGenericReceive+0x158>)
    21e8:	4798      	blx	r3
    21ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
    21ec:	3301      	adds	r3, #1
    21ee:	d101      	bne.n	21f4 <xQueueGenericReceive+0xd4>
    21f0:	2300      	movs	r3, #0
    21f2:	6463      	str	r3, [r4, #68]	; 0x44
    21f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    21f6:	3301      	adds	r3, #1
    21f8:	d101      	bne.n	21fe <xQueueGenericReceive+0xde>
    21fa:	2300      	movs	r3, #0
    21fc:	64a3      	str	r3, [r4, #72]	; 0x48
    21fe:	4b23      	ldr	r3, [pc, #140]	; (228c <xQueueGenericReceive+0x16c>)
    2200:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2202:	a901      	add	r1, sp, #4
    2204:	a802      	add	r0, sp, #8
    2206:	4b24      	ldr	r3, [pc, #144]	; (2298 <xQueueGenericReceive+0x178>)
    2208:	4798      	blx	r3
    220a:	2800      	cmp	r0, #0
    220c:	d127      	bne.n	225e <xQueueGenericReceive+0x13e>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    220e:	4b1a      	ldr	r3, [pc, #104]	; (2278 <xQueueGenericReceive+0x158>)
    2210:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    2212:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2214:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    2216:	4b1d      	ldr	r3, [pc, #116]	; (228c <xQueueGenericReceive+0x16c>)
    2218:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    221a:	464b      	mov	r3, r9
    221c:	2b00      	cmp	r3, #0
    221e:	d118      	bne.n	2252 <xQueueGenericReceive+0x132>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2220:	6823      	ldr	r3, [r4, #0]
    2222:	2b00      	cmp	r3, #0
    2224:	d106      	bne.n	2234 <xQueueGenericReceive+0x114>
					{
						taskENTER_CRITICAL();
    2226:	4b14      	ldr	r3, [pc, #80]	; (2278 <xQueueGenericReceive+0x158>)
    2228:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    222a:	6860      	ldr	r0, [r4, #4]
    222c:	4b1b      	ldr	r3, [pc, #108]	; (229c <xQueueGenericReceive+0x17c>)
    222e:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    2230:	4b16      	ldr	r3, [pc, #88]	; (228c <xQueueGenericReceive+0x16c>)
    2232:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2234:	0020      	movs	r0, r4
    2236:	3024      	adds	r0, #36	; 0x24
    2238:	9901      	ldr	r1, [sp, #4]
    223a:	4b19      	ldr	r3, [pc, #100]	; (22a0 <xQueueGenericReceive+0x180>)
    223c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    223e:	0020      	movs	r0, r4
    2240:	4b18      	ldr	r3, [pc, #96]	; (22a4 <xQueueGenericReceive+0x184>)
    2242:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    2244:	4b18      	ldr	r3, [pc, #96]	; (22a8 <xQueueGenericReceive+0x188>)
    2246:	4798      	blx	r3
    2248:	2800      	cmp	r0, #0
    224a:	d18b      	bne.n	2164 <xQueueGenericReceive+0x44>
				{
					portYIELD_WITHIN_API();
    224c:	4b0e      	ldr	r3, [pc, #56]	; (2288 <xQueueGenericReceive+0x168>)
    224e:	4798      	blx	r3
    2250:	e788      	b.n	2164 <xQueueGenericReceive+0x44>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2252:	0020      	movs	r0, r4
    2254:	4b13      	ldr	r3, [pc, #76]	; (22a4 <xQueueGenericReceive+0x184>)
    2256:	4798      	blx	r3
				( void ) xTaskResumeAll();
    2258:	4b13      	ldr	r3, [pc, #76]	; (22a8 <xQueueGenericReceive+0x188>)
    225a:	4798      	blx	r3
    225c:	e782      	b.n	2164 <xQueueGenericReceive+0x44>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    225e:	0020      	movs	r0, r4
    2260:	4b10      	ldr	r3, [pc, #64]	; (22a4 <xQueueGenericReceive+0x184>)
    2262:	4798      	blx	r3
			( void ) xTaskResumeAll();
    2264:	4b10      	ldr	r3, [pc, #64]	; (22a8 <xQueueGenericReceive+0x188>)
    2266:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2268:	2000      	movs	r0, #0
		}
	}
}
    226a:	b005      	add	sp, #20
    226c:	bc0c      	pop	{r2, r3}
    226e:	4690      	mov	r8, r2
    2270:	4699      	mov	r9, r3
    2272:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2274:	00002b71 	.word	0x00002b71
    2278:	00001add 	.word	0x00001add
    227c:	00001d41 	.word	0x00001d41
    2280:	00002b65 	.word	0x00002b65
    2284:	00002a41 	.word	0x00002a41
    2288:	00001ac5 	.word	0x00001ac5
    228c:	00001af5 	.word	0x00001af5
    2290:	00002ac9 	.word	0x00002ac9
    2294:	000025c9 	.word	0x000025c9
    2298:	00002ae9 	.word	0x00002ae9
    229c:	00002b91 	.word	0x00002b91
    22a0:	000029a9 	.word	0x000029a9
    22a4:	00001d69 	.word	0x00001d69
    22a8:	0000271d 	.word	0x0000271d

000022ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    22ac:	b570      	push	{r4, r5, r6, lr}
    22ae:	0004      	movs	r4, r0
    22b0:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    22b2:	4b0d      	ldr	r3, [pc, #52]	; (22e8 <vQueueWaitForMessageRestricted+0x3c>)
    22b4:	4798      	blx	r3
    22b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    22b8:	3301      	adds	r3, #1
    22ba:	d101      	bne.n	22c0 <vQueueWaitForMessageRestricted+0x14>
    22bc:	2300      	movs	r3, #0
    22be:	6463      	str	r3, [r4, #68]	; 0x44
    22c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    22c2:	3301      	adds	r3, #1
    22c4:	d101      	bne.n	22ca <vQueueWaitForMessageRestricted+0x1e>
    22c6:	2300      	movs	r3, #0
    22c8:	64a3      	str	r3, [r4, #72]	; 0x48
    22ca:	4b08      	ldr	r3, [pc, #32]	; (22ec <vQueueWaitForMessageRestricted+0x40>)
    22cc:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    22ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    22d0:	2b00      	cmp	r3, #0
    22d2:	d104      	bne.n	22de <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    22d4:	0020      	movs	r0, r4
    22d6:	3024      	adds	r0, #36	; 0x24
    22d8:	0029      	movs	r1, r5
    22da:	4b05      	ldr	r3, [pc, #20]	; (22f0 <vQueueWaitForMessageRestricted+0x44>)
    22dc:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    22de:	0020      	movs	r0, r4
    22e0:	4b04      	ldr	r3, [pc, #16]	; (22f4 <vQueueWaitForMessageRestricted+0x48>)
    22e2:	4798      	blx	r3
	}
    22e4:	bd70      	pop	{r4, r5, r6, pc}
    22e6:	46c0      	nop			; (mov r8, r8)
    22e8:	00001add 	.word	0x00001add
    22ec:	00001af5 	.word	0x00001af5
    22f0:	00002a01 	.word	0x00002a01
    22f4:	00001d69 	.word	0x00001d69

000022f8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    22f8:	4b08      	ldr	r3, [pc, #32]	; (231c <prvResetNextTaskUnblockTime+0x24>)
    22fa:	681b      	ldr	r3, [r3, #0]
    22fc:	681b      	ldr	r3, [r3, #0]
    22fe:	2b00      	cmp	r3, #0
    2300:	d104      	bne.n	230c <prvResetNextTaskUnblockTime+0x14>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    2302:	2201      	movs	r2, #1
    2304:	4252      	negs	r2, r2
    2306:	4b06      	ldr	r3, [pc, #24]	; (2320 <prvResetNextTaskUnblockTime+0x28>)
    2308:	601a      	str	r2, [r3, #0]
    230a:	e006      	b.n	231a <prvResetNextTaskUnblockTime+0x22>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    230c:	4b03      	ldr	r3, [pc, #12]	; (231c <prvResetNextTaskUnblockTime+0x24>)
    230e:	681b      	ldr	r3, [r3, #0]
    2310:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    2312:	68db      	ldr	r3, [r3, #12]
    2314:	685a      	ldr	r2, [r3, #4]
    2316:	4b02      	ldr	r3, [pc, #8]	; (2320 <prvResetNextTaskUnblockTime+0x28>)
    2318:	601a      	str	r2, [r3, #0]
	}
}
    231a:	4770      	bx	lr
    231c:	20003b7c 	.word	0x20003b7c
    2320:	20000010 	.word	0x20000010

00002324 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    2324:	b510      	push	{r4, lr}
    2326:	1e04      	subs	r4, r0, #0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    2328:	4b0e      	ldr	r3, [pc, #56]	; (2364 <prvAddCurrentTaskToDelayedList+0x40>)
    232a:	681b      	ldr	r3, [r3, #0]
    232c:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
    232e:	4b0e      	ldr	r3, [pc, #56]	; (2368 <prvAddCurrentTaskToDelayedList+0x44>)
    2330:	681b      	ldr	r3, [r3, #0]
    2332:	429c      	cmp	r4, r3
    2334:	d207      	bcs.n	2346 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    2336:	4b0d      	ldr	r3, [pc, #52]	; (236c <prvAddCurrentTaskToDelayedList+0x48>)
    2338:	6818      	ldr	r0, [r3, #0]
    233a:	4b0a      	ldr	r3, [pc, #40]	; (2364 <prvAddCurrentTaskToDelayedList+0x40>)
    233c:	6819      	ldr	r1, [r3, #0]
    233e:	3104      	adds	r1, #4
    2340:	4b0b      	ldr	r3, [pc, #44]	; (2370 <prvAddCurrentTaskToDelayedList+0x4c>)
    2342:	4798      	blx	r3
    2344:	e00c      	b.n	2360 <prvAddCurrentTaskToDelayedList+0x3c>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    2346:	4b0b      	ldr	r3, [pc, #44]	; (2374 <prvAddCurrentTaskToDelayedList+0x50>)
    2348:	6818      	ldr	r0, [r3, #0]
    234a:	4b06      	ldr	r3, [pc, #24]	; (2364 <prvAddCurrentTaskToDelayedList+0x40>)
    234c:	6819      	ldr	r1, [r3, #0]
    234e:	3104      	adds	r1, #4
    2350:	4b07      	ldr	r3, [pc, #28]	; (2370 <prvAddCurrentTaskToDelayedList+0x4c>)
    2352:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    2354:	4b08      	ldr	r3, [pc, #32]	; (2378 <prvAddCurrentTaskToDelayedList+0x54>)
    2356:	681b      	ldr	r3, [r3, #0]
    2358:	429c      	cmp	r4, r3
    235a:	d201      	bcs.n	2360 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
    235c:	4b06      	ldr	r3, [pc, #24]	; (2378 <prvAddCurrentTaskToDelayedList+0x54>)
    235e:	601c      	str	r4, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    2360:	bd10      	pop	{r4, pc}
    2362:	46c0      	nop			; (mov r8, r8)
    2364:	20003c2c 	.word	0x20003c2c
    2368:	20003c48 	.word	0x20003c48
    236c:	20003c4c 	.word	0x20003c4c
    2370:	00001a19 	.word	0x00001a19
    2374:	20003b7c 	.word	0x20003b7c
    2378:	20000010 	.word	0x20000010

0000237c <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    237c:	b5f0      	push	{r4, r5, r6, r7, lr}
    237e:	464f      	mov	r7, r9
    2380:	4646      	mov	r6, r8
    2382:	b4c0      	push	{r6, r7}
    2384:	b085      	sub	sp, #20
    2386:	9002      	str	r0, [sp, #8]
    2388:	000f      	movs	r7, r1
    238a:	0016      	movs	r6, r2
    238c:	9303      	str	r3, [sp, #12]
    238e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
    2390:	2800      	cmp	r0, #0
    2392:	d101      	bne.n	2398 <xTaskGenericCreate+0x1c>
    2394:	b672      	cpsid	i
    2396:	e7fe      	b.n	2396 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    2398:	2c04      	cmp	r4, #4
    239a:	d901      	bls.n	23a0 <xTaskGenericCreate+0x24>
    239c:	b672      	cpsid	i
    239e:	e7fe      	b.n	239e <xTaskGenericCreate+0x22>
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    23a0:	2040      	movs	r0, #64	; 0x40
    23a2:	4b5a      	ldr	r3, [pc, #360]	; (250c <xTaskGenericCreate+0x190>)
    23a4:	4798      	blx	r3
    23a6:	1e05      	subs	r5, r0, #0

	if( pxNewTCB != NULL )
    23a8:	d100      	bne.n	23ac <xTaskGenericCreate+0x30>
    23aa:	e0a8      	b.n	24fe <xTaskGenericCreate+0x182>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    23ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    23ae:	2b00      	cmp	r3, #0
    23b0:	d000      	beq.n	23b4 <xTaskGenericCreate+0x38>
    23b2:	e0a1      	b.n	24f8 <xTaskGenericCreate+0x17c>
    23b4:	00b0      	lsls	r0, r6, #2
    23b6:	4b55      	ldr	r3, [pc, #340]	; (250c <xTaskGenericCreate+0x190>)
    23b8:	4798      	blx	r3
    23ba:	6328      	str	r0, [r5, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    23bc:	2800      	cmp	r0, #0
    23be:	d103      	bne.n	23c8 <xTaskGenericCreate+0x4c>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    23c0:	0028      	movs	r0, r5
    23c2:	4b53      	ldr	r3, [pc, #332]	; (2510 <xTaskGenericCreate+0x194>)
    23c4:	4798      	blx	r3
    23c6:	e09a      	b.n	24fe <xTaskGenericCreate+0x182>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    23c8:	4b52      	ldr	r3, [pc, #328]	; (2514 <xTaskGenericCreate+0x198>)
    23ca:	18f3      	adds	r3, r6, r3
    23cc:	009b      	lsls	r3, r3, #2
    23ce:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    23d0:	4694      	mov	ip, r2
    23d2:	4463      	add	r3, ip
    23d4:	2207      	movs	r2, #7
    23d6:	4393      	bics	r3, r2
    23d8:	4698      	mov	r8, r3
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    23da:	783a      	ldrb	r2, [r7, #0]
    23dc:	2334      	movs	r3, #52	; 0x34
    23de:	54ea      	strb	r2, [r5, r3]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    23e0:	783b      	ldrb	r3, [r7, #0]
    23e2:	2b00      	cmp	r3, #0
    23e4:	d00d      	beq.n	2402 <xTaskGenericCreate+0x86>
    23e6:	1c7a      	adds	r2, r7, #1
    23e8:	002b      	movs	r3, r5
    23ea:	3335      	adds	r3, #53	; 0x35
    23ec:	0029      	movs	r1, r5
    23ee:	313c      	adds	r1, #60	; 0x3c
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    23f0:	7810      	ldrb	r0, [r2, #0]
    23f2:	7018      	strb	r0, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    23f4:	7810      	ldrb	r0, [r2, #0]
    23f6:	2800      	cmp	r0, #0
    23f8:	d003      	beq.n	2402 <xTaskGenericCreate+0x86>
    23fa:	3201      	adds	r2, #1
    23fc:	3301      	adds	r3, #1
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    23fe:	4299      	cmp	r1, r3
    2400:	d1f6      	bne.n	23f0 <xTaskGenericCreate+0x74>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    2402:	2200      	movs	r2, #0
    2404:	233b      	movs	r3, #59	; 0x3b
    2406:	54ea      	strb	r2, [r5, r3]
    2408:	1e27      	subs	r7, r4, #0
    240a:	2f04      	cmp	r7, #4
    240c:	d900      	bls.n	2410 <xTaskGenericCreate+0x94>
    240e:	2704      	movs	r7, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    2410:	62ef      	str	r7, [r5, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    2412:	63ef      	str	r7, [r5, #60]	; 0x3c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    2414:	1d2b      	adds	r3, r5, #4
    2416:	9301      	str	r3, [sp, #4]
    2418:	0018      	movs	r0, r3
    241a:	4e3f      	ldr	r6, [pc, #252]	; (2518 <xTaskGenericCreate+0x19c>)
    241c:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    241e:	0028      	movs	r0, r5
    2420:	3018      	adds	r0, #24
    2422:	47b0      	blx	r6

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    2424:	612d      	str	r5, [r5, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2426:	2305      	movs	r3, #5
    2428:	1bdb      	subs	r3, r3, r7
    242a:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    242c:	626d      	str	r5, [r5, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    242e:	9a03      	ldr	r2, [sp, #12]
    2430:	9902      	ldr	r1, [sp, #8]
    2432:	4640      	mov	r0, r8
    2434:	4b39      	ldr	r3, [pc, #228]	; (251c <xTaskGenericCreate+0x1a0>)
    2436:	4798      	blx	r3
    2438:	6028      	str	r0, [r5, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    243a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    243c:	2b00      	cmp	r3, #0
    243e:	d000      	beq.n	2442 <xTaskGenericCreate+0xc6>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2440:	601d      	str	r5, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    2442:	4b37      	ldr	r3, [pc, #220]	; (2520 <xTaskGenericCreate+0x1a4>)
    2444:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
    2446:	4a37      	ldr	r2, [pc, #220]	; (2524 <xTaskGenericCreate+0x1a8>)
    2448:	6813      	ldr	r3, [r2, #0]
    244a:	3301      	adds	r3, #1
    244c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
    244e:	4b36      	ldr	r3, [pc, #216]	; (2528 <xTaskGenericCreate+0x1ac>)
    2450:	681b      	ldr	r3, [r3, #0]
    2452:	2b00      	cmp	r3, #0
    2454:	d122      	bne.n	249c <xTaskGenericCreate+0x120>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    2456:	4b34      	ldr	r3, [pc, #208]	; (2528 <xTaskGenericCreate+0x1ac>)
    2458:	601d      	str	r5, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    245a:	6813      	ldr	r3, [r2, #0]
    245c:	2b01      	cmp	r3, #1
    245e:	d128      	bne.n	24b2 <xTaskGenericCreate+0x136>
    2460:	4e32      	ldr	r6, [pc, #200]	; (252c <xTaskGenericCreate+0x1b0>)
    2462:	3363      	adds	r3, #99	; 0x63
    2464:	4699      	mov	r9, r3
    2466:	44b1      	add	r9, r6
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    2468:	4f31      	ldr	r7, [pc, #196]	; (2530 <xTaskGenericCreate+0x1b4>)
    246a:	0030      	movs	r0, r6
    246c:	47b8      	blx	r7
    246e:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    2470:	454e      	cmp	r6, r9
    2472:	d1fa      	bne.n	246a <xTaskGenericCreate+0xee>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    2474:	4b2f      	ldr	r3, [pc, #188]	; (2534 <xTaskGenericCreate+0x1b8>)
    2476:	4699      	mov	r9, r3
    2478:	0018      	movs	r0, r3
    247a:	4e2d      	ldr	r6, [pc, #180]	; (2530 <xTaskGenericCreate+0x1b4>)
    247c:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    247e:	4f2e      	ldr	r7, [pc, #184]	; (2538 <xTaskGenericCreate+0x1bc>)
    2480:	0038      	movs	r0, r7
    2482:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    2484:	482d      	ldr	r0, [pc, #180]	; (253c <xTaskGenericCreate+0x1c0>)
    2486:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    2488:	482d      	ldr	r0, [pc, #180]	; (2540 <xTaskGenericCreate+0x1c4>)
    248a:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    248c:	482d      	ldr	r0, [pc, #180]	; (2544 <xTaskGenericCreate+0x1c8>)
    248e:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    2490:	4b2d      	ldr	r3, [pc, #180]	; (2548 <xTaskGenericCreate+0x1cc>)
    2492:	464a      	mov	r2, r9
    2494:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2496:	4b2d      	ldr	r3, [pc, #180]	; (254c <xTaskGenericCreate+0x1d0>)
    2498:	601f      	str	r7, [r3, #0]
    249a:	e00a      	b.n	24b2 <xTaskGenericCreate+0x136>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    249c:	4b2c      	ldr	r3, [pc, #176]	; (2550 <xTaskGenericCreate+0x1d4>)
    249e:	681b      	ldr	r3, [r3, #0]
    24a0:	2b00      	cmp	r3, #0
    24a2:	d106      	bne.n	24b2 <xTaskGenericCreate+0x136>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    24a4:	4b20      	ldr	r3, [pc, #128]	; (2528 <xTaskGenericCreate+0x1ac>)
    24a6:	681b      	ldr	r3, [r3, #0]
    24a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    24aa:	429c      	cmp	r4, r3
    24ac:	d301      	bcc.n	24b2 <xTaskGenericCreate+0x136>
					{
						pxCurrentTCB = pxNewTCB;
    24ae:	4b1e      	ldr	r3, [pc, #120]	; (2528 <xTaskGenericCreate+0x1ac>)
    24b0:	601d      	str	r5, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    24b2:	4a28      	ldr	r2, [pc, #160]	; (2554 <xTaskGenericCreate+0x1d8>)
    24b4:	6813      	ldr	r3, [r2, #0]
    24b6:	3301      	adds	r3, #1
    24b8:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    24ba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    24bc:	4a26      	ldr	r2, [pc, #152]	; (2558 <xTaskGenericCreate+0x1dc>)
    24be:	6812      	ldr	r2, [r2, #0]
    24c0:	4293      	cmp	r3, r2
    24c2:	d901      	bls.n	24c8 <xTaskGenericCreate+0x14c>
    24c4:	4a24      	ldr	r2, [pc, #144]	; (2558 <xTaskGenericCreate+0x1dc>)
    24c6:	6013      	str	r3, [r2, #0]
    24c8:	0098      	lsls	r0, r3, #2
    24ca:	18c3      	adds	r3, r0, r3
    24cc:	009b      	lsls	r3, r3, #2
    24ce:	4817      	ldr	r0, [pc, #92]	; (252c <xTaskGenericCreate+0x1b0>)
    24d0:	18c0      	adds	r0, r0, r3
    24d2:	9901      	ldr	r1, [sp, #4]
    24d4:	4b21      	ldr	r3, [pc, #132]	; (255c <xTaskGenericCreate+0x1e0>)
    24d6:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    24d8:	4b21      	ldr	r3, [pc, #132]	; (2560 <xTaskGenericCreate+0x1e4>)
    24da:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    24dc:	4b1c      	ldr	r3, [pc, #112]	; (2550 <xTaskGenericCreate+0x1d4>)
    24de:	681b      	ldr	r3, [r3, #0]
    24e0:	2001      	movs	r0, #1
    24e2:	2b00      	cmp	r3, #0
    24e4:	d00d      	beq.n	2502 <xTaskGenericCreate+0x186>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    24e6:	4b10      	ldr	r3, [pc, #64]	; (2528 <xTaskGenericCreate+0x1ac>)
    24e8:	681b      	ldr	r3, [r3, #0]
    24ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    24ec:	429c      	cmp	r4, r3
    24ee:	d908      	bls.n	2502 <xTaskGenericCreate+0x186>
			{
				taskYIELD_IF_USING_PREEMPTION();
    24f0:	4b1c      	ldr	r3, [pc, #112]	; (2564 <xTaskGenericCreate+0x1e8>)
    24f2:	4798      	blx	r3
    24f4:	2001      	movs	r0, #1
    24f6:	e004      	b.n	2502 <xTaskGenericCreate+0x186>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    24f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    24fa:	6303      	str	r3, [r0, #48]	; 0x30
    24fc:	e764      	b.n	23c8 <xTaskGenericCreate+0x4c>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24fe:	2001      	movs	r0, #1
    2500:	4240      	negs	r0, r0
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
    2502:	b005      	add	sp, #20
    2504:	bc0c      	pop	{r2, r3}
    2506:	4690      	mov	r8, r2
    2508:	4699      	mov	r9, r3
    250a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    250c:	00001c01 	.word	0x00001c01
    2510:	00001c69 	.word	0x00001c69
    2514:	3fffffff 	.word	0x3fffffff
    2518:	000019f9 	.word	0x000019f9
    251c:	00001aa1 	.word	0x00001aa1
    2520:	00001add 	.word	0x00001add
    2524:	20003c54 	.word	0x20003c54
    2528:	20003c2c 	.word	0x20003c2c
    252c:	20003bb4 	.word	0x20003bb4
    2530:	000019e1 	.word	0x000019e1
    2534:	20003b88 	.word	0x20003b88
    2538:	20003b9c 	.word	0x20003b9c
    253c:	20003c30 	.word	0x20003c30
    2540:	20003c18 	.word	0x20003c18
    2544:	20003c58 	.word	0x20003c58
    2548:	20003b7c 	.word	0x20003b7c
    254c:	20003c4c 	.word	0x20003c4c
    2550:	20003b80 	.word	0x20003b80
    2554:	20003c50 	.word	0x20003c50
    2558:	20003c6c 	.word	0x20003c6c
    255c:	00001a01 	.word	0x00001a01
    2560:	00001af5 	.word	0x00001af5
    2564:	00001ac5 	.word	0x00001ac5

00002568 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    2568:	b510      	push	{r4, lr}
    256a:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    256c:	2300      	movs	r3, #0
    256e:	9303      	str	r3, [sp, #12]
    2570:	9302      	str	r3, [sp, #8]
    2572:	9301      	str	r3, [sp, #4]
    2574:	9300      	str	r3, [sp, #0]
    2576:	2264      	movs	r2, #100	; 0x64
    2578:	490c      	ldr	r1, [pc, #48]	; (25ac <vTaskStartScheduler+0x44>)
    257a:	480d      	ldr	r0, [pc, #52]	; (25b0 <vTaskStartScheduler+0x48>)
    257c:	4c0d      	ldr	r4, [pc, #52]	; (25b4 <vTaskStartScheduler+0x4c>)
    257e:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    2580:	2801      	cmp	r0, #1
    2582:	d10d      	bne.n	25a0 <vTaskStartScheduler+0x38>
		{
			xReturn = xTimerCreateTimerTask();
    2584:	4b0c      	ldr	r3, [pc, #48]	; (25b8 <vTaskStartScheduler+0x50>)
    2586:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    2588:	2801      	cmp	r0, #1
    258a:	d109      	bne.n	25a0 <vTaskStartScheduler+0x38>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    258c:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    258e:	2201      	movs	r2, #1
    2590:	4b0a      	ldr	r3, [pc, #40]	; (25bc <vTaskStartScheduler+0x54>)
    2592:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    2594:	2200      	movs	r2, #0
    2596:	4b0a      	ldr	r3, [pc, #40]	; (25c0 <vTaskStartScheduler+0x58>)
    2598:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    259a:	4b0a      	ldr	r3, [pc, #40]	; (25c4 <vTaskStartScheduler+0x5c>)
    259c:	4798      	blx	r3
    259e:	e003      	b.n	25a8 <vTaskStartScheduler+0x40>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
    25a0:	2800      	cmp	r0, #0
    25a2:	d101      	bne.n	25a8 <vTaskStartScheduler+0x40>
    25a4:	b672      	cpsid	i
    25a6:	e7fe      	b.n	25a6 <vTaskStartScheduler+0x3e>
	}
}
    25a8:	b004      	add	sp, #16
    25aa:	bd10      	pop	{r4, pc}
    25ac:	00003ffc 	.word	0x00003ffc
    25b0:	00002871 	.word	0x00002871
    25b4:	0000237d 	.word	0x0000237d
    25b8:	00002d15 	.word	0x00002d15
    25bc:	20003b80 	.word	0x20003b80
    25c0:	20003c48 	.word	0x20003c48
    25c4:	00001bc1 	.word	0x00001bc1

000025c8 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    25c8:	4a02      	ldr	r2, [pc, #8]	; (25d4 <vTaskSuspendAll+0xc>)
    25ca:	6813      	ldr	r3, [r2, #0]
    25cc:	3301      	adds	r3, #1
    25ce:	6013      	str	r3, [r2, #0]
}
    25d0:	4770      	bx	lr
    25d2:	46c0      	nop			; (mov r8, r8)
    25d4:	20003c44 	.word	0x20003c44

000025d8 <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    25d8:	b510      	push	{r4, lr}
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    25da:	4b04      	ldr	r3, [pc, #16]	; (25ec <xTaskGetTickCount+0x14>)
    25dc:	4798      	blx	r3
	{
		xTicks = xTickCount;
    25de:	4b04      	ldr	r3, [pc, #16]	; (25f0 <xTaskGetTickCount+0x18>)
    25e0:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
    25e2:	4b04      	ldr	r3, [pc, #16]	; (25f4 <xTaskGetTickCount+0x1c>)
    25e4:	4798      	blx	r3

	return xTicks;
}
    25e6:	0020      	movs	r0, r4
    25e8:	bd10      	pop	{r4, pc}
    25ea:	46c0      	nop			; (mov r8, r8)
    25ec:	00001add 	.word	0x00001add
    25f0:	20003c48 	.word	0x20003c48
    25f4:	00001af5 	.word	0x00001af5

000025f8 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    25f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25fa:	b083      	sub	sp, #12

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    25fc:	4b39      	ldr	r3, [pc, #228]	; (26e4 <xTaskIncrementTick+0xec>)
    25fe:	681b      	ldr	r3, [r3, #0]
    2600:	2b00      	cmp	r3, #0
    2602:	d162      	bne.n	26ca <xTaskIncrementTick+0xd2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    2604:	4b38      	ldr	r3, [pc, #224]	; (26e8 <xTaskIncrementTick+0xf0>)
    2606:	681a      	ldr	r2, [r3, #0]
    2608:	3201      	adds	r2, #1
    260a:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    260c:	681c      	ldr	r4, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
    260e:	2c00      	cmp	r4, #0
    2610:	d112      	bne.n	2638 <xTaskIncrementTick+0x40>
			{
				taskSWITCH_DELAYED_LISTS();
    2612:	4b36      	ldr	r3, [pc, #216]	; (26ec <xTaskIncrementTick+0xf4>)
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	681b      	ldr	r3, [r3, #0]
    2618:	2b00      	cmp	r3, #0
    261a:	d001      	beq.n	2620 <xTaskIncrementTick+0x28>
    261c:	b672      	cpsid	i
    261e:	e7fe      	b.n	261e <xTaskIncrementTick+0x26>
    2620:	4a32      	ldr	r2, [pc, #200]	; (26ec <xTaskIncrementTick+0xf4>)
    2622:	6811      	ldr	r1, [r2, #0]
    2624:	4b32      	ldr	r3, [pc, #200]	; (26f0 <xTaskIncrementTick+0xf8>)
    2626:	6818      	ldr	r0, [r3, #0]
    2628:	6010      	str	r0, [r2, #0]
    262a:	6019      	str	r1, [r3, #0]
    262c:	4a31      	ldr	r2, [pc, #196]	; (26f4 <xTaskIncrementTick+0xfc>)
    262e:	6813      	ldr	r3, [r2, #0]
    2630:	3301      	adds	r3, #1
    2632:	6013      	str	r3, [r2, #0]
    2634:	4b30      	ldr	r3, [pc, #192]	; (26f8 <xTaskIncrementTick+0x100>)
    2636:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    2638:	4b30      	ldr	r3, [pc, #192]	; (26fc <xTaskIncrementTick+0x104>)
    263a:	681b      	ldr	r3, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    263c:	2600      	movs	r6, #0

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    263e:	429c      	cmp	r4, r3
    2640:	d337      	bcc.n	26b2 <xTaskIncrementTick+0xba>
    2642:	2600      	movs	r6, #0
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2644:	4d29      	ldr	r5, [pc, #164]	; (26ec <xTaskIncrementTick+0xf4>)
    2646:	682b      	ldr	r3, [r5, #0]
    2648:	681b      	ldr	r3, [r3, #0]
    264a:	2b00      	cmp	r3, #0
    264c:	d104      	bne.n	2658 <xTaskIncrementTick+0x60>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    264e:	2201      	movs	r2, #1
    2650:	4252      	negs	r2, r2
    2652:	4b2a      	ldr	r3, [pc, #168]	; (26fc <xTaskIncrementTick+0x104>)
    2654:	601a      	str	r2, [r3, #0]
						break;
    2656:	e02c      	b.n	26b2 <xTaskIncrementTick+0xba>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2658:	4b24      	ldr	r3, [pc, #144]	; (26ec <xTaskIncrementTick+0xf4>)
    265a:	681b      	ldr	r3, [r3, #0]
    265c:	68db      	ldr	r3, [r3, #12]
    265e:	68df      	ldr	r7, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    2660:	687b      	ldr	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
    2662:	429c      	cmp	r4, r3
    2664:	d202      	bcs.n	266c <xTaskIncrementTick+0x74>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    2666:	4a25      	ldr	r2, [pc, #148]	; (26fc <xTaskIncrementTick+0x104>)
    2668:	6013      	str	r3, [r2, #0]
							break;
    266a:	e022      	b.n	26b2 <xTaskIncrementTick+0xba>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    266c:	1d3b      	adds	r3, r7, #4
    266e:	9301      	str	r3, [sp, #4]
    2670:	0018      	movs	r0, r3
    2672:	4b23      	ldr	r3, [pc, #140]	; (2700 <xTaskIncrementTick+0x108>)
    2674:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2676:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2678:	2b00      	cmp	r3, #0
    267a:	d003      	beq.n	2684 <xTaskIncrementTick+0x8c>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    267c:	0038      	movs	r0, r7
    267e:	3018      	adds	r0, #24
    2680:	4b1f      	ldr	r3, [pc, #124]	; (2700 <xTaskIncrementTick+0x108>)
    2682:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    2684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2686:	4a1f      	ldr	r2, [pc, #124]	; (2704 <xTaskIncrementTick+0x10c>)
    2688:	6812      	ldr	r2, [r2, #0]
    268a:	4293      	cmp	r3, r2
    268c:	d901      	bls.n	2692 <xTaskIncrementTick+0x9a>
    268e:	4a1d      	ldr	r2, [pc, #116]	; (2704 <xTaskIncrementTick+0x10c>)
    2690:	6013      	str	r3, [r2, #0]
    2692:	0098      	lsls	r0, r3, #2
    2694:	18c3      	adds	r3, r0, r3
    2696:	009b      	lsls	r3, r3, #2
    2698:	481b      	ldr	r0, [pc, #108]	; (2708 <xTaskIncrementTick+0x110>)
    269a:	18c0      	adds	r0, r0, r3
    269c:	9901      	ldr	r1, [sp, #4]
    269e:	4b1b      	ldr	r3, [pc, #108]	; (270c <xTaskIncrementTick+0x114>)
    26a0:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    26a2:	4b1b      	ldr	r3, [pc, #108]	; (2710 <xTaskIncrementTick+0x118>)
    26a4:	681b      	ldr	r3, [r3, #0]
    26a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    26a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    26aa:	429a      	cmp	r2, r3
    26ac:	d3cb      	bcc.n	2646 <xTaskIncrementTick+0x4e>
							{
								xSwitchRequired = pdTRUE;
    26ae:	2601      	movs	r6, #1
    26b0:	e7c9      	b.n	2646 <xTaskIncrementTick+0x4e>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    26b2:	4b17      	ldr	r3, [pc, #92]	; (2710 <xTaskIncrementTick+0x118>)
    26b4:	681b      	ldr	r3, [r3, #0]
    26b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    26b8:	009a      	lsls	r2, r3, #2
    26ba:	18d3      	adds	r3, r2, r3
    26bc:	009b      	lsls	r3, r3, #2
    26be:	4a12      	ldr	r2, [pc, #72]	; (2708 <xTaskIncrementTick+0x110>)
    26c0:	589b      	ldr	r3, [r3, r2]
    26c2:	2b01      	cmp	r3, #1
    26c4:	d906      	bls.n	26d4 <xTaskIncrementTick+0xdc>
			{
				xSwitchRequired = pdTRUE;
    26c6:	2601      	movs	r6, #1
    26c8:	e004      	b.n	26d4 <xTaskIncrementTick+0xdc>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    26ca:	4a12      	ldr	r2, [pc, #72]	; (2714 <xTaskIncrementTick+0x11c>)
    26cc:	6813      	ldr	r3, [r2, #0]
    26ce:	3301      	adds	r3, #1
    26d0:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    26d2:	2600      	movs	r6, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    26d4:	4b10      	ldr	r3, [pc, #64]	; (2718 <xTaskIncrementTick+0x120>)
    26d6:	681b      	ldr	r3, [r3, #0]
    26d8:	2b00      	cmp	r3, #0
    26da:	d000      	beq.n	26de <xTaskIncrementTick+0xe6>
		{
			xSwitchRequired = pdTRUE;
    26dc:	2601      	movs	r6, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    26de:	0030      	movs	r0, r6
    26e0:	b003      	add	sp, #12
    26e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26e4:	20003c44 	.word	0x20003c44
    26e8:	20003c48 	.word	0x20003c48
    26ec:	20003b7c 	.word	0x20003b7c
    26f0:	20003c4c 	.word	0x20003c4c
    26f4:	20003b78 	.word	0x20003b78
    26f8:	000022f9 	.word	0x000022f9
    26fc:	20000010 	.word	0x20000010
    2700:	00001a49 	.word	0x00001a49
    2704:	20003c6c 	.word	0x20003c6c
    2708:	20003bb4 	.word	0x20003bb4
    270c:	00001a01 	.word	0x00001a01
    2710:	20003c2c 	.word	0x20003c2c
    2714:	20003bb0 	.word	0x20003bb0
    2718:	20003c70 	.word	0x20003c70

0000271c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    271e:	4b2f      	ldr	r3, [pc, #188]	; (27dc <xTaskResumeAll+0xc0>)
    2720:	681b      	ldr	r3, [r3, #0]
    2722:	2b00      	cmp	r3, #0
    2724:	d101      	bne.n	272a <xTaskResumeAll+0xe>
    2726:	b672      	cpsid	i
    2728:	e7fe      	b.n	2728 <xTaskResumeAll+0xc>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    272a:	4b2d      	ldr	r3, [pc, #180]	; (27e0 <xTaskResumeAll+0xc4>)
    272c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    272e:	4b2b      	ldr	r3, [pc, #172]	; (27dc <xTaskResumeAll+0xc0>)
    2730:	681a      	ldr	r2, [r3, #0]
    2732:	3a01      	subs	r2, #1
    2734:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2736:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    2738:	2400      	movs	r4, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    273a:	2b00      	cmp	r3, #0
    273c:	d14a      	bne.n	27d4 <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    273e:	4b29      	ldr	r3, [pc, #164]	; (27e4 <xTaskResumeAll+0xc8>)
    2740:	681b      	ldr	r3, [r3, #0]
    2742:	2b00      	cmp	r3, #0
    2744:	d123      	bne.n	278e <xTaskResumeAll+0x72>
    2746:	e045      	b.n	27d4 <xTaskResumeAll+0xb8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2748:	68fb      	ldr	r3, [r7, #12]
    274a:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    274c:	0030      	movs	r0, r6
    274e:	3018      	adds	r0, #24
    2750:	4b25      	ldr	r3, [pc, #148]	; (27e8 <xTaskResumeAll+0xcc>)
    2752:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2754:	1d35      	adds	r5, r6, #4
    2756:	0028      	movs	r0, r5
    2758:	4b23      	ldr	r3, [pc, #140]	; (27e8 <xTaskResumeAll+0xcc>)
    275a:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    275c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    275e:	4a23      	ldr	r2, [pc, #140]	; (27ec <xTaskResumeAll+0xd0>)
    2760:	6812      	ldr	r2, [r2, #0]
    2762:	4293      	cmp	r3, r2
    2764:	d901      	bls.n	276a <xTaskResumeAll+0x4e>
    2766:	4a21      	ldr	r2, [pc, #132]	; (27ec <xTaskResumeAll+0xd0>)
    2768:	6013      	str	r3, [r2, #0]
    276a:	0098      	lsls	r0, r3, #2
    276c:	18c3      	adds	r3, r0, r3
    276e:	009b      	lsls	r3, r3, #2
    2770:	481f      	ldr	r0, [pc, #124]	; (27f0 <xTaskResumeAll+0xd4>)
    2772:	18c0      	adds	r0, r0, r3
    2774:	0029      	movs	r1, r5
    2776:	4b1f      	ldr	r3, [pc, #124]	; (27f4 <xTaskResumeAll+0xd8>)
    2778:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    277a:	4b1f      	ldr	r3, [pc, #124]	; (27f8 <xTaskResumeAll+0xdc>)
    277c:	681b      	ldr	r3, [r3, #0]
    277e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    2780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2782:	429a      	cmp	r2, r3
    2784:	d305      	bcc.n	2792 <xTaskResumeAll+0x76>
					{
						xYieldPending = pdTRUE;
    2786:	2201      	movs	r2, #1
    2788:	4b1c      	ldr	r3, [pc, #112]	; (27fc <xTaskResumeAll+0xe0>)
    278a:	601a      	str	r2, [r3, #0]
    278c:	e001      	b.n	2792 <xTaskResumeAll+0x76>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    278e:	4c1c      	ldr	r4, [pc, #112]	; (2800 <xTaskResumeAll+0xe4>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2790:	0027      	movs	r7, r4
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2792:	6823      	ldr	r3, [r4, #0]
    2794:	2b00      	cmp	r3, #0
    2796:	d1d7      	bne.n	2748 <xTaskResumeAll+0x2c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    2798:	4b1a      	ldr	r3, [pc, #104]	; (2804 <xTaskResumeAll+0xe8>)
    279a:	681b      	ldr	r3, [r3, #0]
    279c:	2b00      	cmp	r3, #0
    279e:	d011      	beq.n	27c4 <xTaskResumeAll+0xa8>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    27a0:	4b18      	ldr	r3, [pc, #96]	; (2804 <xTaskResumeAll+0xe8>)
    27a2:	681b      	ldr	r3, [r3, #0]
    27a4:	2b00      	cmp	r3, #0
    27a6:	d00d      	beq.n	27c4 <xTaskResumeAll+0xa8>
					{
						if( xTaskIncrementTick() != pdFALSE )
    27a8:	4e17      	ldr	r6, [pc, #92]	; (2808 <xTaskResumeAll+0xec>)
						{
							xYieldPending = pdTRUE;
    27aa:	4d14      	ldr	r5, [pc, #80]	; (27fc <xTaskResumeAll+0xe0>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    27ac:	4c15      	ldr	r4, [pc, #84]	; (2804 <xTaskResumeAll+0xe8>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
    27ae:	47b0      	blx	r6
    27b0:	2800      	cmp	r0, #0
    27b2:	d001      	beq.n	27b8 <xTaskResumeAll+0x9c>
						{
							xYieldPending = pdTRUE;
    27b4:	2301      	movs	r3, #1
    27b6:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    27b8:	6823      	ldr	r3, [r4, #0]
    27ba:	3b01      	subs	r3, #1
    27bc:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    27be:	6823      	ldr	r3, [r4, #0]
    27c0:	2b00      	cmp	r3, #0
    27c2:	d1f4      	bne.n	27ae <xTaskResumeAll+0x92>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    27c4:	4b0d      	ldr	r3, [pc, #52]	; (27fc <xTaskResumeAll+0xe0>)
    27c6:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    27c8:	2400      	movs	r4, #0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    27ca:	2b01      	cmp	r3, #1
    27cc:	d102      	bne.n	27d4 <xTaskResumeAll+0xb8>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    27ce:	4b0f      	ldr	r3, [pc, #60]	; (280c <xTaskResumeAll+0xf0>)
    27d0:	4798      	blx	r3

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    27d2:	3401      	adds	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    27d4:	4b0e      	ldr	r3, [pc, #56]	; (2810 <xTaskResumeAll+0xf4>)
    27d6:	4798      	blx	r3

	return xAlreadyYielded;
}
    27d8:	0020      	movs	r0, r4
    27da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27dc:	20003c44 	.word	0x20003c44
    27e0:	00001add 	.word	0x00001add
    27e4:	20003c54 	.word	0x20003c54
    27e8:	00001a49 	.word	0x00001a49
    27ec:	20003c6c 	.word	0x20003c6c
    27f0:	20003bb4 	.word	0x20003bb4
    27f4:	00001a01 	.word	0x00001a01
    27f8:	20003c2c 	.word	0x20003c2c
    27fc:	20003c70 	.word	0x20003c70
    2800:	20003c30 	.word	0x20003c30
    2804:	20003bb0 	.word	0x20003bb0
    2808:	000025f9 	.word	0x000025f9
    280c:	00001ac5 	.word	0x00001ac5
    2810:	00001af5 	.word	0x00001af5

00002814 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    2814:	b510      	push	{r4, lr}
    2816:	1e04      	subs	r4, r0, #0
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    2818:	d016      	beq.n	2848 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    281a:	4b0d      	ldr	r3, [pc, #52]	; (2850 <vTaskDelay+0x3c>)
    281c:	681b      	ldr	r3, [r3, #0]
    281e:	2b00      	cmp	r3, #0
    2820:	d001      	beq.n	2826 <vTaskDelay+0x12>
    2822:	b672      	cpsid	i
    2824:	e7fe      	b.n	2824 <vTaskDelay+0x10>
			vTaskSuspendAll();
    2826:	4b0b      	ldr	r3, [pc, #44]	; (2854 <vTaskDelay+0x40>)
    2828:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    282a:	4b0b      	ldr	r3, [pc, #44]	; (2858 <vTaskDelay+0x44>)
    282c:	681b      	ldr	r3, [r3, #0]
    282e:	18e4      	adds	r4, r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2830:	4b0a      	ldr	r3, [pc, #40]	; (285c <vTaskDelay+0x48>)
    2832:	6818      	ldr	r0, [r3, #0]
    2834:	3004      	adds	r0, #4
    2836:	4b0a      	ldr	r3, [pc, #40]	; (2860 <vTaskDelay+0x4c>)
    2838:	4798      	blx	r3
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    283a:	0020      	movs	r0, r4
    283c:	4b09      	ldr	r3, [pc, #36]	; (2864 <vTaskDelay+0x50>)
    283e:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    2840:	4b09      	ldr	r3, [pc, #36]	; (2868 <vTaskDelay+0x54>)
    2842:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2844:	2800      	cmp	r0, #0
    2846:	d101      	bne.n	284c <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    2848:	4b08      	ldr	r3, [pc, #32]	; (286c <vTaskDelay+0x58>)
    284a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    284c:	bd10      	pop	{r4, pc}
    284e:	46c0      	nop			; (mov r8, r8)
    2850:	20003c44 	.word	0x20003c44
    2854:	000025c9 	.word	0x000025c9
    2858:	20003c48 	.word	0x20003c48
    285c:	20003c2c 	.word	0x20003c2c
    2860:	00001a49 	.word	0x00001a49
    2864:	00002325 	.word	0x00002325
    2868:	0000271d 	.word	0x0000271d
    286c:	00001ac5 	.word	0x00001ac5

00002870 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    2870:	b5f0      	push	{r4, r5, r6, r7, lr}
    2872:	4647      	mov	r7, r8
    2874:	b480      	push	{r7}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    2876:	4d16      	ldr	r5, [pc, #88]	; (28d0 <prvIdleTask+0x60>)
		{
			vTaskSuspendAll();
    2878:	4f16      	ldr	r7, [pc, #88]	; (28d4 <prvIdleTask+0x64>)
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    287a:	4e17      	ldr	r6, [pc, #92]	; (28d8 <prvIdleTask+0x68>)
    287c:	e01d      	b.n	28ba <prvIdleTask+0x4a>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    287e:	47b8      	blx	r7
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2880:	6834      	ldr	r4, [r6, #0]
			}
			( void ) xTaskResumeAll();
    2882:	4b16      	ldr	r3, [pc, #88]	; (28dc <prvIdleTask+0x6c>)
    2884:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    2886:	2c00      	cmp	r4, #0
    2888:	d017      	beq.n	28ba <prvIdleTask+0x4a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    288a:	4b15      	ldr	r3, [pc, #84]	; (28e0 <prvIdleTask+0x70>)
    288c:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    288e:	4b12      	ldr	r3, [pc, #72]	; (28d8 <prvIdleTask+0x68>)
    2890:	68db      	ldr	r3, [r3, #12]
    2892:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2894:	1d20      	adds	r0, r4, #4
    2896:	4b13      	ldr	r3, [pc, #76]	; (28e4 <prvIdleTask+0x74>)
    2898:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    289a:	4a13      	ldr	r2, [pc, #76]	; (28e8 <prvIdleTask+0x78>)
    289c:	6813      	ldr	r3, [r2, #0]
    289e:	3b01      	subs	r3, #1
    28a0:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
    28a2:	4a0b      	ldr	r2, [pc, #44]	; (28d0 <prvIdleTask+0x60>)
    28a4:	6813      	ldr	r3, [r2, #0]
    28a6:	3b01      	subs	r3, #1
    28a8:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
    28aa:	4b10      	ldr	r3, [pc, #64]	; (28ec <prvIdleTask+0x7c>)
    28ac:	4798      	blx	r3
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    28ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
    28b0:	4b0f      	ldr	r3, [pc, #60]	; (28f0 <prvIdleTask+0x80>)
    28b2:	4698      	mov	r8, r3
    28b4:	4798      	blx	r3
		vPortFree( pxTCB );
    28b6:	0020      	movs	r0, r4
    28b8:	47c0      	blx	r8
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    28ba:	682b      	ldr	r3, [r5, #0]
    28bc:	2b00      	cmp	r3, #0
    28be:	d1de      	bne.n	287e <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    28c0:	4b0c      	ldr	r3, [pc, #48]	; (28f4 <prvIdleTask+0x84>)
    28c2:	681b      	ldr	r3, [r3, #0]
    28c4:	2b01      	cmp	r3, #1
    28c6:	d9f8      	bls.n	28ba <prvIdleTask+0x4a>
			{
				taskYIELD();
    28c8:	4b0b      	ldr	r3, [pc, #44]	; (28f8 <prvIdleTask+0x88>)
    28ca:	4798      	blx	r3
    28cc:	e7f5      	b.n	28ba <prvIdleTask+0x4a>
    28ce:	46c0      	nop			; (mov r8, r8)
    28d0:	20003b84 	.word	0x20003b84
    28d4:	000025c9 	.word	0x000025c9
    28d8:	20003c18 	.word	0x20003c18
    28dc:	0000271d 	.word	0x0000271d
    28e0:	00001add 	.word	0x00001add
    28e4:	00001a49 	.word	0x00001a49
    28e8:	20003c54 	.word	0x20003c54
    28ec:	00001af5 	.word	0x00001af5
    28f0:	00001c69 	.word	0x00001c69
    28f4:	20003bb4 	.word	0x20003bb4
    28f8:	00001ac5 	.word	0x00001ac5

000028fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    28fc:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    28fe:	4b25      	ldr	r3, [pc, #148]	; (2994 <vTaskSwitchContext+0x98>)
    2900:	681b      	ldr	r3, [r3, #0]
    2902:	2b00      	cmp	r3, #0
    2904:	d003      	beq.n	290e <vTaskSwitchContext+0x12>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    2906:	2201      	movs	r2, #1
    2908:	4b23      	ldr	r3, [pc, #140]	; (2998 <vTaskSwitchContext+0x9c>)
    290a:	601a      	str	r2, [r3, #0]
    290c:	e041      	b.n	2992 <vTaskSwitchContext+0x96>
	}
	else
	{
		xYieldPending = pdFALSE;
    290e:	2200      	movs	r2, #0
    2910:	4b21      	ldr	r3, [pc, #132]	; (2998 <vTaskSwitchContext+0x9c>)
    2912:	601a      	str	r2, [r3, #0]
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    2914:	4b21      	ldr	r3, [pc, #132]	; (299c <vTaskSwitchContext+0xa0>)
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	009a      	lsls	r2, r3, #2
    291a:	18d3      	adds	r3, r2, r3
    291c:	009b      	lsls	r3, r3, #2
    291e:	4a20      	ldr	r2, [pc, #128]	; (29a0 <vTaskSwitchContext+0xa4>)
    2920:	589b      	ldr	r3, [r3, r2]
    2922:	2b00      	cmp	r3, #0
    2924:	d116      	bne.n	2954 <vTaskSwitchContext+0x58>
    2926:	4b1d      	ldr	r3, [pc, #116]	; (299c <vTaskSwitchContext+0xa0>)
    2928:	681b      	ldr	r3, [r3, #0]
    292a:	2b00      	cmp	r3, #0
    292c:	d006      	beq.n	293c <vTaskSwitchContext+0x40>
    292e:	4a1b      	ldr	r2, [pc, #108]	; (299c <vTaskSwitchContext+0xa0>)
    2930:	4c1b      	ldr	r4, [pc, #108]	; (29a0 <vTaskSwitchContext+0xa4>)
    2932:	0010      	movs	r0, r2
    2934:	e004      	b.n	2940 <vTaskSwitchContext+0x44>
    2936:	6803      	ldr	r3, [r0, #0]
    2938:	2b00      	cmp	r3, #0
    293a:	d101      	bne.n	2940 <vTaskSwitchContext+0x44>
    293c:	b672      	cpsid	i
    293e:	e7fe      	b.n	293e <vTaskSwitchContext+0x42>
    2940:	6813      	ldr	r3, [r2, #0]
    2942:	3b01      	subs	r3, #1
    2944:	6013      	str	r3, [r2, #0]
    2946:	6813      	ldr	r3, [r2, #0]
    2948:	0099      	lsls	r1, r3, #2
    294a:	18cb      	adds	r3, r1, r3
    294c:	009b      	lsls	r3, r3, #2
    294e:	591b      	ldr	r3, [r3, r4]
    2950:	2b00      	cmp	r3, #0
    2952:	d0f0      	beq.n	2936 <vTaskSwitchContext+0x3a>
    2954:	4b11      	ldr	r3, [pc, #68]	; (299c <vTaskSwitchContext+0xa0>)
    2956:	681b      	ldr	r3, [r3, #0]
    2958:	4c11      	ldr	r4, [pc, #68]	; (29a0 <vTaskSwitchContext+0xa4>)
    295a:	009a      	lsls	r2, r3, #2
    295c:	18d1      	adds	r1, r2, r3
    295e:	0089      	lsls	r1, r1, #2
    2960:	1861      	adds	r1, r4, r1
    2962:	6848      	ldr	r0, [r1, #4]
    2964:	6840      	ldr	r0, [r0, #4]
    2966:	6048      	str	r0, [r1, #4]
    2968:	18d2      	adds	r2, r2, r3
    296a:	0092      	lsls	r2, r2, #2
    296c:	3208      	adds	r2, #8
    296e:	18a2      	adds	r2, r4, r2
    2970:	4290      	cmp	r0, r2
    2972:	d105      	bne.n	2980 <vTaskSwitchContext+0x84>
    2974:	6841      	ldr	r1, [r0, #4]
    2976:	009a      	lsls	r2, r3, #2
    2978:	18d2      	adds	r2, r2, r3
    297a:	0092      	lsls	r2, r2, #2
    297c:	18a2      	adds	r2, r4, r2
    297e:	6051      	str	r1, [r2, #4]
    2980:	009a      	lsls	r2, r3, #2
    2982:	18d3      	adds	r3, r2, r3
    2984:	009b      	lsls	r3, r3, #2
    2986:	4a06      	ldr	r2, [pc, #24]	; (29a0 <vTaskSwitchContext+0xa4>)
    2988:	18d3      	adds	r3, r2, r3
    298a:	685b      	ldr	r3, [r3, #4]
    298c:	68da      	ldr	r2, [r3, #12]
    298e:	4b05      	ldr	r3, [pc, #20]	; (29a4 <vTaskSwitchContext+0xa8>)
    2990:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    2992:	bd10      	pop	{r4, pc}
    2994:	20003c44 	.word	0x20003c44
    2998:	20003c70 	.word	0x20003c70
    299c:	20003c6c 	.word	0x20003c6c
    29a0:	20003bb4 	.word	0x20003bb4
    29a4:	20003c2c 	.word	0x20003c2c

000029a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    29a8:	b570      	push	{r4, r5, r6, lr}
    29aa:	000c      	movs	r4, r1
TickType_t xTimeToWake;

	configASSERT( pxEventList );
    29ac:	2800      	cmp	r0, #0
    29ae:	d101      	bne.n	29b4 <vTaskPlaceOnEventList+0xc>
    29b0:	b672      	cpsid	i
    29b2:	e7fe      	b.n	29b2 <vTaskPlaceOnEventList+0xa>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    29b4:	4d0b      	ldr	r5, [pc, #44]	; (29e4 <vTaskPlaceOnEventList+0x3c>)
    29b6:	6829      	ldr	r1, [r5, #0]
    29b8:	3118      	adds	r1, #24
    29ba:	4b0b      	ldr	r3, [pc, #44]	; (29e8 <vTaskPlaceOnEventList+0x40>)
    29bc:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    29be:	6828      	ldr	r0, [r5, #0]
    29c0:	3004      	adds	r0, #4
    29c2:	4b0a      	ldr	r3, [pc, #40]	; (29ec <vTaskPlaceOnEventList+0x44>)
    29c4:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    29c6:	1c63      	adds	r3, r4, #1
    29c8:	d106      	bne.n	29d8 <vTaskPlaceOnEventList+0x30>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    29ca:	4b06      	ldr	r3, [pc, #24]	; (29e4 <vTaskPlaceOnEventList+0x3c>)
    29cc:	6819      	ldr	r1, [r3, #0]
    29ce:	3104      	adds	r1, #4
    29d0:	4807      	ldr	r0, [pc, #28]	; (29f0 <vTaskPlaceOnEventList+0x48>)
    29d2:	4b08      	ldr	r3, [pc, #32]	; (29f4 <vTaskPlaceOnEventList+0x4c>)
    29d4:	4798      	blx	r3
    29d6:	e004      	b.n	29e2 <vTaskPlaceOnEventList+0x3a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    29d8:	4b07      	ldr	r3, [pc, #28]	; (29f8 <vTaskPlaceOnEventList+0x50>)
    29da:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    29dc:	1820      	adds	r0, r4, r0
    29de:	4b07      	ldr	r3, [pc, #28]	; (29fc <vTaskPlaceOnEventList+0x54>)
    29e0:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    29e2:	bd70      	pop	{r4, r5, r6, pc}
    29e4:	20003c2c 	.word	0x20003c2c
    29e8:	00001a19 	.word	0x00001a19
    29ec:	00001a49 	.word	0x00001a49
    29f0:	20003c58 	.word	0x20003c58
    29f4:	00001a01 	.word	0x00001a01
    29f8:	20003c48 	.word	0x20003c48
    29fc:	00002325 	.word	0x00002325

00002a00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    2a00:	b570      	push	{r4, r5, r6, lr}
    2a02:	000c      	movs	r4, r1
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
    2a04:	2800      	cmp	r0, #0
    2a06:	d101      	bne.n	2a0c <vTaskPlaceOnEventListRestricted+0xc>
    2a08:	b672      	cpsid	i
    2a0a:	e7fe      	b.n	2a0a <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2a0c:	4d07      	ldr	r5, [pc, #28]	; (2a2c <vTaskPlaceOnEventListRestricted+0x2c>)
    2a0e:	6829      	ldr	r1, [r5, #0]
    2a10:	3118      	adds	r1, #24
    2a12:	4b07      	ldr	r3, [pc, #28]	; (2a30 <vTaskPlaceOnEventListRestricted+0x30>)
    2a14:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2a16:	6828      	ldr	r0, [r5, #0]
    2a18:	3004      	adds	r0, #4
    2a1a:	4b06      	ldr	r3, [pc, #24]	; (2a34 <vTaskPlaceOnEventListRestricted+0x34>)
    2a1c:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    2a1e:	4b06      	ldr	r3, [pc, #24]	; (2a38 <vTaskPlaceOnEventListRestricted+0x38>)
    2a20:	6818      	ldr	r0, [r3, #0]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    2a22:	1900      	adds	r0, r0, r4
    2a24:	4b05      	ldr	r3, [pc, #20]	; (2a3c <vTaskPlaceOnEventListRestricted+0x3c>)
    2a26:	4798      	blx	r3
	}
    2a28:	bd70      	pop	{r4, r5, r6, pc}
    2a2a:	46c0      	nop			; (mov r8, r8)
    2a2c:	20003c2c 	.word	0x20003c2c
    2a30:	00001a01 	.word	0x00001a01
    2a34:	00001a49 	.word	0x00001a49
    2a38:	20003c48 	.word	0x20003c48
    2a3c:	00002325 	.word	0x00002325

00002a40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    2a40:	b570      	push	{r4, r5, r6, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2a42:	68c3      	ldr	r3, [r0, #12]
    2a44:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
    2a46:	2d00      	cmp	r5, #0
    2a48:	d101      	bne.n	2a4e <xTaskRemoveFromEventList+0xe>
    2a4a:	b672      	cpsid	i
    2a4c:	e7fe      	b.n	2a4c <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    2a4e:	002c      	movs	r4, r5
    2a50:	3418      	adds	r4, #24
    2a52:	0020      	movs	r0, r4
    2a54:	4b14      	ldr	r3, [pc, #80]	; (2aa8 <xTaskRemoveFromEventList+0x68>)
    2a56:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2a58:	4b14      	ldr	r3, [pc, #80]	; (2aac <xTaskRemoveFromEventList+0x6c>)
    2a5a:	681b      	ldr	r3, [r3, #0]
    2a5c:	2b00      	cmp	r3, #0
    2a5e:	d113      	bne.n	2a88 <xTaskRemoveFromEventList+0x48>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    2a60:	1d2c      	adds	r4, r5, #4
    2a62:	0020      	movs	r0, r4
    2a64:	4b10      	ldr	r3, [pc, #64]	; (2aa8 <xTaskRemoveFromEventList+0x68>)
    2a66:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    2a68:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    2a6a:	4a11      	ldr	r2, [pc, #68]	; (2ab0 <xTaskRemoveFromEventList+0x70>)
    2a6c:	6812      	ldr	r2, [r2, #0]
    2a6e:	4293      	cmp	r3, r2
    2a70:	d901      	bls.n	2a76 <xTaskRemoveFromEventList+0x36>
    2a72:	4a0f      	ldr	r2, [pc, #60]	; (2ab0 <xTaskRemoveFromEventList+0x70>)
    2a74:	6013      	str	r3, [r2, #0]
    2a76:	0098      	lsls	r0, r3, #2
    2a78:	18c3      	adds	r3, r0, r3
    2a7a:	009b      	lsls	r3, r3, #2
    2a7c:	480d      	ldr	r0, [pc, #52]	; (2ab4 <xTaskRemoveFromEventList+0x74>)
    2a7e:	18c0      	adds	r0, r0, r3
    2a80:	0021      	movs	r1, r4
    2a82:	4b0d      	ldr	r3, [pc, #52]	; (2ab8 <xTaskRemoveFromEventList+0x78>)
    2a84:	4798      	blx	r3
    2a86:	e003      	b.n	2a90 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2a88:	0021      	movs	r1, r4
    2a8a:	480c      	ldr	r0, [pc, #48]	; (2abc <xTaskRemoveFromEventList+0x7c>)
    2a8c:	4b0a      	ldr	r3, [pc, #40]	; (2ab8 <xTaskRemoveFromEventList+0x78>)
    2a8e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2a90:	4b0b      	ldr	r3, [pc, #44]	; (2ac0 <xTaskRemoveFromEventList+0x80>)
    2a92:	681b      	ldr	r3, [r3, #0]
    2a94:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    2a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xReturn = pdFALSE;
    2a98:	2000      	movs	r0, #0
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2a9a:	429a      	cmp	r2, r3
    2a9c:	d903      	bls.n	2aa6 <xTaskRemoveFromEventList+0x66>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    2a9e:	2201      	movs	r2, #1
    2aa0:	4b08      	ldr	r3, [pc, #32]	; (2ac4 <xTaskRemoveFromEventList+0x84>)
    2aa2:	601a      	str	r2, [r3, #0]
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    2aa4:	3001      	adds	r0, #1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    2aa6:	bd70      	pop	{r4, r5, r6, pc}
    2aa8:	00001a49 	.word	0x00001a49
    2aac:	20003c44 	.word	0x20003c44
    2ab0:	20003c6c 	.word	0x20003c6c
    2ab4:	20003bb4 	.word	0x20003bb4
    2ab8:	00001a01 	.word	0x00001a01
    2abc:	20003c30 	.word	0x20003c30
    2ac0:	20003c2c 	.word	0x20003c2c
    2ac4:	20003c70 	.word	0x20003c70

00002ac8 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
    2ac8:	2800      	cmp	r0, #0
    2aca:	d101      	bne.n	2ad0 <vTaskSetTimeOutState+0x8>
    2acc:	b672      	cpsid	i
    2ace:	e7fe      	b.n	2ace <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2ad0:	4b03      	ldr	r3, [pc, #12]	; (2ae0 <vTaskSetTimeOutState+0x18>)
    2ad2:	681b      	ldr	r3, [r3, #0]
    2ad4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    2ad6:	4b03      	ldr	r3, [pc, #12]	; (2ae4 <vTaskSetTimeOutState+0x1c>)
    2ad8:	681b      	ldr	r3, [r3, #0]
    2ada:	6043      	str	r3, [r0, #4]
}
    2adc:	4770      	bx	lr
    2ade:	46c0      	nop			; (mov r8, r8)
    2ae0:	20003b78 	.word	0x20003b78
    2ae4:	20003c48 	.word	0x20003c48

00002ae8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    2ae8:	b570      	push	{r4, r5, r6, lr}
    2aea:	0004      	movs	r4, r0
    2aec:	000e      	movs	r6, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    2aee:	2800      	cmp	r0, #0
    2af0:	d101      	bne.n	2af6 <xTaskCheckForTimeOut+0xe>
    2af2:	b672      	cpsid	i
    2af4:	e7fe      	b.n	2af4 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
    2af6:	2900      	cmp	r1, #0
    2af8:	d101      	bne.n	2afe <xTaskCheckForTimeOut+0x16>
    2afa:	b672      	cpsid	i
    2afc:	e7fe      	b.n	2afc <xTaskCheckForTimeOut+0x14>

	taskENTER_CRITICAL();
    2afe:	4b11      	ldr	r3, [pc, #68]	; (2b44 <xTaskCheckForTimeOut+0x5c>)
    2b00:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    2b02:	4b11      	ldr	r3, [pc, #68]	; (2b48 <xTaskCheckForTimeOut+0x60>)
    2b04:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    2b06:	6833      	ldr	r3, [r6, #0]
    2b08:	1c5a      	adds	r2, r3, #1
    2b0a:	d015      	beq.n	2b38 <xTaskCheckForTimeOut+0x50>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2b0c:	4a0f      	ldr	r2, [pc, #60]	; (2b4c <xTaskCheckForTimeOut+0x64>)
    2b0e:	6812      	ldr	r2, [r2, #0]
    2b10:	6820      	ldr	r0, [r4, #0]
    2b12:	4290      	cmp	r0, r2
    2b14:	d003      	beq.n	2b1e <xTaskCheckForTimeOut+0x36>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    2b16:	2501      	movs	r5, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2b18:	6862      	ldr	r2, [r4, #4]
    2b1a:	4291      	cmp	r1, r2
    2b1c:	d20d      	bcs.n	2b3a <xTaskCheckForTimeOut+0x52>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    2b1e:	6862      	ldr	r2, [r4, #4]
    2b20:	1a88      	subs	r0, r1, r2
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    2b22:	2501      	movs	r5, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    2b24:	4283      	cmp	r3, r0
    2b26:	d908      	bls.n	2b3a <xTaskCheckForTimeOut+0x52>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    2b28:	1a52      	subs	r2, r2, r1
    2b2a:	18d3      	adds	r3, r2, r3
    2b2c:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
    2b2e:	0020      	movs	r0, r4
    2b30:	4b07      	ldr	r3, [pc, #28]	; (2b50 <xTaskCheckForTimeOut+0x68>)
    2b32:	4798      	blx	r3
			xReturn = pdFALSE;
    2b34:	2500      	movs	r5, #0
    2b36:	e000      	b.n	2b3a <xTaskCheckForTimeOut+0x52>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
    2b38:	2500      	movs	r5, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    2b3a:	4b06      	ldr	r3, [pc, #24]	; (2b54 <xTaskCheckForTimeOut+0x6c>)
    2b3c:	4798      	blx	r3

	return xReturn;
}
    2b3e:	0028      	movs	r0, r5
    2b40:	bd70      	pop	{r4, r5, r6, pc}
    2b42:	46c0      	nop			; (mov r8, r8)
    2b44:	00001add 	.word	0x00001add
    2b48:	20003c48 	.word	0x20003c48
    2b4c:	20003b78 	.word	0x20003b78
    2b50:	00002ac9 	.word	0x00002ac9
    2b54:	00001af5 	.word	0x00001af5

00002b58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    2b58:	2201      	movs	r2, #1
    2b5a:	4b01      	ldr	r3, [pc, #4]	; (2b60 <vTaskMissedYield+0x8>)
    2b5c:	601a      	str	r2, [r3, #0]
}
    2b5e:	4770      	bx	lr
    2b60:	20003c70 	.word	0x20003c70

00002b64 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    2b64:	4b01      	ldr	r3, [pc, #4]	; (2b6c <xTaskGetCurrentTaskHandle+0x8>)
    2b66:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    2b68:	4770      	bx	lr
    2b6a:	46c0      	nop			; (mov r8, r8)
    2b6c:	20003c2c 	.word	0x20003c2c

00002b70 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    2b70:	4b05      	ldr	r3, [pc, #20]	; (2b88 <xTaskGetSchedulerState+0x18>)
    2b72:	681b      	ldr	r3, [r3, #0]
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    2b74:	2001      	movs	r0, #1

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    2b76:	2b00      	cmp	r3, #0
    2b78:	d004      	beq.n	2b84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2b7a:	4b04      	ldr	r3, [pc, #16]	; (2b8c <xTaskGetSchedulerState+0x1c>)
    2b7c:	6818      	ldr	r0, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    2b7e:	4243      	negs	r3, r0
    2b80:	4158      	adcs	r0, r3
    2b82:	0040      	lsls	r0, r0, #1
			}
		}

		return xReturn;
	}
    2b84:	4770      	bx	lr
    2b86:	46c0      	nop			; (mov r8, r8)
    2b88:	20003b80 	.word	0x20003b80
    2b8c:	20003c44 	.word	0x20003c44

00002b90 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    2b90:	b570      	push	{r4, r5, r6, lr}
    2b92:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    2b94:	d031      	beq.n	2bfa <vTaskPriorityInherit+0x6a>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    2b96:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    2b98:	4a18      	ldr	r2, [pc, #96]	; (2bfc <vTaskPriorityInherit+0x6c>)
    2b9a:	6812      	ldr	r2, [r2, #0]
    2b9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    2b9e:	4293      	cmp	r3, r2
    2ba0:	d22b      	bcs.n	2bfa <vTaskPriorityInherit+0x6a>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    2ba2:	6982      	ldr	r2, [r0, #24]
    2ba4:	2a00      	cmp	r2, #0
    2ba6:	db05      	blt.n	2bb4 <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2ba8:	4a14      	ldr	r2, [pc, #80]	; (2bfc <vTaskPriorityInherit+0x6c>)
    2baa:	6812      	ldr	r2, [r2, #0]
    2bac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    2bae:	2205      	movs	r2, #5
    2bb0:	1a52      	subs	r2, r2, r1
    2bb2:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    2bb4:	009a      	lsls	r2, r3, #2
    2bb6:	18d3      	adds	r3, r2, r3
    2bb8:	009b      	lsls	r3, r3, #2
    2bba:	4a11      	ldr	r2, [pc, #68]	; (2c00 <vTaskPriorityInherit+0x70>)
    2bbc:	18d3      	adds	r3, r2, r3
    2bbe:	6962      	ldr	r2, [r4, #20]
    2bc0:	429a      	cmp	r2, r3
    2bc2:	d116      	bne.n	2bf2 <vTaskPriorityInherit+0x62>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2bc4:	1d25      	adds	r5, r4, #4
    2bc6:	0028      	movs	r0, r5
    2bc8:	4b0e      	ldr	r3, [pc, #56]	; (2c04 <vTaskPriorityInherit+0x74>)
    2bca:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    2bcc:	4b0b      	ldr	r3, [pc, #44]	; (2bfc <vTaskPriorityInherit+0x6c>)
    2bce:	681b      	ldr	r3, [r3, #0]
    2bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2bd2:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    2bd4:	4a0c      	ldr	r2, [pc, #48]	; (2c08 <vTaskPriorityInherit+0x78>)
    2bd6:	6812      	ldr	r2, [r2, #0]
    2bd8:	4293      	cmp	r3, r2
    2bda:	d901      	bls.n	2be0 <vTaskPriorityInherit+0x50>
    2bdc:	4a0a      	ldr	r2, [pc, #40]	; (2c08 <vTaskPriorityInherit+0x78>)
    2bde:	6013      	str	r3, [r2, #0]
    2be0:	0098      	lsls	r0, r3, #2
    2be2:	18c3      	adds	r3, r0, r3
    2be4:	009b      	lsls	r3, r3, #2
    2be6:	4806      	ldr	r0, [pc, #24]	; (2c00 <vTaskPriorityInherit+0x70>)
    2be8:	18c0      	adds	r0, r0, r3
    2bea:	0029      	movs	r1, r5
    2bec:	4b07      	ldr	r3, [pc, #28]	; (2c0c <vTaskPriorityInherit+0x7c>)
    2bee:	4798      	blx	r3
    2bf0:	e003      	b.n	2bfa <vTaskPriorityInherit+0x6a>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    2bf2:	4b02      	ldr	r3, [pc, #8]	; (2bfc <vTaskPriorityInherit+0x6c>)
    2bf4:	681b      	ldr	r3, [r3, #0]
    2bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2bf8:	62e3      	str	r3, [r4, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2bfa:	bd70      	pop	{r4, r5, r6, pc}
    2bfc:	20003c2c 	.word	0x20003c2c
    2c00:	20003bb4 	.word	0x20003bb4
    2c04:	00001a49 	.word	0x00001a49
    2c08:	20003c6c 	.word	0x20003c6c
    2c0c:	00001a01 	.word	0x00001a01

00002c10 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    2c10:	b570      	push	{r4, r5, r6, lr}
    2c12:	1e05      	subs	r5, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    2c14:	d01d      	beq.n	2c52 <vTaskPriorityDisinherit+0x42>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2c16:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    2c18:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    2c1a:	4293      	cmp	r3, r2
    2c1c:	d019      	beq.n	2c52 <vTaskPriorityDisinherit+0x42>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2c1e:	1d04      	adds	r4, r0, #4
    2c20:	0020      	movs	r0, r4
    2c22:	4b0c      	ldr	r3, [pc, #48]	; (2c54 <vTaskPriorityDisinherit+0x44>)
    2c24:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    2c26:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    2c28:	62e8      	str	r0, [r5, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    2c2a:	69ab      	ldr	r3, [r5, #24]
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	db02      	blt.n	2c36 <vTaskPriorityDisinherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2c30:	2305      	movs	r3, #5
    2c32:	1a1b      	subs	r3, r3, r0
    2c34:	61ab      	str	r3, [r5, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
    2c36:	4b08      	ldr	r3, [pc, #32]	; (2c58 <vTaskPriorityDisinherit+0x48>)
    2c38:	681b      	ldr	r3, [r3, #0]
    2c3a:	4298      	cmp	r0, r3
    2c3c:	d901      	bls.n	2c42 <vTaskPriorityDisinherit+0x32>
    2c3e:	4b06      	ldr	r3, [pc, #24]	; (2c58 <vTaskPriorityDisinherit+0x48>)
    2c40:	6018      	str	r0, [r3, #0]
    2c42:	0083      	lsls	r3, r0, #2
    2c44:	1818      	adds	r0, r3, r0
    2c46:	0080      	lsls	r0, r0, #2
    2c48:	4b04      	ldr	r3, [pc, #16]	; (2c5c <vTaskPriorityDisinherit+0x4c>)
    2c4a:	1818      	adds	r0, r3, r0
    2c4c:	0021      	movs	r1, r4
    2c4e:	4b04      	ldr	r3, [pc, #16]	; (2c60 <vTaskPriorityDisinherit+0x50>)
    2c50:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2c52:	bd70      	pop	{r4, r5, r6, pc}
    2c54:	00001a49 	.word	0x00001a49
    2c58:	20003c6c 	.word	0x20003c6c
    2c5c:	20003bb4 	.word	0x20003bb4
    2c60:	00001a01 	.word	0x00001a01

00002c64 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    2c64:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2c66:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2c68:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    2c6a:	4291      	cmp	r1, r2
    2c6c:	d80b      	bhi.n	2c86 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    2c6e:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    2c70:	2401      	movs	r4, #1

	if( xNextExpiryTime <= xTimeNow )
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    2c72:	6983      	ldr	r3, [r0, #24]
    2c74:	429a      	cmp	r2, r3
    2c76:	d211      	bcs.n	2c9c <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    2c78:	1d01      	adds	r1, r0, #4
    2c7a:	4b09      	ldr	r3, [pc, #36]	; (2ca0 <prvInsertTimerInActiveList+0x3c>)
    2c7c:	6818      	ldr	r0, [r3, #0]
    2c7e:	4b09      	ldr	r3, [pc, #36]	; (2ca4 <prvInsertTimerInActiveList+0x40>)
    2c80:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    2c82:	2400      	movs	r4, #0
    2c84:	e00a      	b.n	2c9c <prvInsertTimerInActiveList+0x38>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2c86:	429a      	cmp	r2, r3
    2c88:	d202      	bcs.n	2c90 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    2c8a:	2401      	movs	r4, #1
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2c8c:	4299      	cmp	r1, r3
    2c8e:	d205      	bcs.n	2c9c <prvInsertTimerInActiveList+0x38>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2c90:	1d01      	adds	r1, r0, #4
    2c92:	4b05      	ldr	r3, [pc, #20]	; (2ca8 <prvInsertTimerInActiveList+0x44>)
    2c94:	6818      	ldr	r0, [r3, #0]
    2c96:	4b03      	ldr	r3, [pc, #12]	; (2ca4 <prvInsertTimerInActiveList+0x40>)
    2c98:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    2c9a:	2400      	movs	r4, #0
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
    2c9c:	0020      	movs	r0, r4
    2c9e:	bd10      	pop	{r4, pc}
    2ca0:	20003ca8 	.word	0x20003ca8
    2ca4:	00001a19 	.word	0x00001a19
    2ca8:	20003c74 	.word	0x20003c74

00002cac <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    2cac:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    2cae:	4b10      	ldr	r3, [pc, #64]	; (2cf0 <prvCheckForValidListAndQueue+0x44>)
    2cb0:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    2cb2:	4b10      	ldr	r3, [pc, #64]	; (2cf4 <prvCheckForValidListAndQueue+0x48>)
    2cb4:	681b      	ldr	r3, [r3, #0]
    2cb6:	2b00      	cmp	r3, #0
    2cb8:	d116      	bne.n	2ce8 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    2cba:	4d0f      	ldr	r5, [pc, #60]	; (2cf8 <prvCheckForValidListAndQueue+0x4c>)
    2cbc:	0028      	movs	r0, r5
    2cbe:	4e0f      	ldr	r6, [pc, #60]	; (2cfc <prvCheckForValidListAndQueue+0x50>)
    2cc0:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    2cc2:	4c0f      	ldr	r4, [pc, #60]	; (2d00 <prvCheckForValidListAndQueue+0x54>)
    2cc4:	0020      	movs	r0, r4
    2cc6:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    2cc8:	4b0e      	ldr	r3, [pc, #56]	; (2d04 <prvCheckForValidListAndQueue+0x58>)
    2cca:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    2ccc:	4b0e      	ldr	r3, [pc, #56]	; (2d08 <prvCheckForValidListAndQueue+0x5c>)
    2cce:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    2cd0:	2200      	movs	r2, #0
    2cd2:	210c      	movs	r1, #12
    2cd4:	2002      	movs	r0, #2
    2cd6:	4b0d      	ldr	r3, [pc, #52]	; (2d0c <prvCheckForValidListAndQueue+0x60>)
    2cd8:	4798      	blx	r3
			configASSERT( xTimerQueue );
    2cda:	2800      	cmp	r0, #0
    2cdc:	d002      	beq.n	2ce4 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    2cde:	4b05      	ldr	r3, [pc, #20]	; (2cf4 <prvCheckForValidListAndQueue+0x48>)
    2ce0:	6018      	str	r0, [r3, #0]
    2ce2:	e001      	b.n	2ce8 <prvCheckForValidListAndQueue+0x3c>
			configASSERT( xTimerQueue );
    2ce4:	b672      	cpsid	i
    2ce6:	e7fe      	b.n	2ce6 <prvCheckForValidListAndQueue+0x3a>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    2ce8:	4b09      	ldr	r3, [pc, #36]	; (2d10 <prvCheckForValidListAndQueue+0x64>)
    2cea:	4798      	blx	r3
}
    2cec:	bd70      	pop	{r4, r5, r6, pc}
    2cee:	46c0      	nop			; (mov r8, r8)
    2cf0:	00001add 	.word	0x00001add
    2cf4:	20003ca4 	.word	0x20003ca4
    2cf8:	20003c78 	.word	0x20003c78
    2cfc:	000019e1 	.word	0x000019e1
    2d00:	20003c8c 	.word	0x20003c8c
    2d04:	20003c74 	.word	0x20003c74
    2d08:	20003ca8 	.word	0x20003ca8
    2d0c:	00001e8d 	.word	0x00001e8d
    2d10:	00001af5 	.word	0x00001af5

00002d14 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    2d14:	b510      	push	{r4, lr}
    2d16:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    2d18:	4b0b      	ldr	r3, [pc, #44]	; (2d48 <xTimerCreateTimerTask+0x34>)
    2d1a:	4798      	blx	r3

	if( xTimerQueue != NULL )
    2d1c:	4b0b      	ldr	r3, [pc, #44]	; (2d4c <xTimerCreateTimerTask+0x38>)
    2d1e:	681b      	ldr	r3, [r3, #0]
    2d20:	2b00      	cmp	r3, #0
    2d22:	d00d      	beq.n	2d40 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    2d24:	2300      	movs	r3, #0
    2d26:	9303      	str	r3, [sp, #12]
    2d28:	9302      	str	r3, [sp, #8]
    2d2a:	9301      	str	r3, [sp, #4]
    2d2c:	3302      	adds	r3, #2
    2d2e:	9300      	str	r3, [sp, #0]
    2d30:	2300      	movs	r3, #0
    2d32:	2250      	movs	r2, #80	; 0x50
    2d34:	4906      	ldr	r1, [pc, #24]	; (2d50 <xTimerCreateTimerTask+0x3c>)
    2d36:	4807      	ldr	r0, [pc, #28]	; (2d54 <xTimerCreateTimerTask+0x40>)
    2d38:	4c07      	ldr	r4, [pc, #28]	; (2d58 <xTimerCreateTimerTask+0x44>)
    2d3a:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    2d3c:	2800      	cmp	r0, #0
    2d3e:	d101      	bne.n	2d44 <xTimerCreateTimerTask+0x30>
    2d40:	b672      	cpsid	i
    2d42:	e7fe      	b.n	2d42 <xTimerCreateTimerTask+0x2e>
	return xReturn;
}
    2d44:	b004      	add	sp, #16
    2d46:	bd10      	pop	{r4, pc}
    2d48:	00002cad 	.word	0x00002cad
    2d4c:	20003ca4 	.word	0x20003ca4
    2d50:	0000402c 	.word	0x0000402c
    2d54:	00002e7d 	.word	0x00002e7d
    2d58:	0000237d 	.word	0x0000237d

00002d5c <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2d5c:	b530      	push	{r4, r5, lr}
    2d5e:	b085      	sub	sp, #20
    2d60:	001d      	movs	r5, r3
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    2d62:	4b13      	ldr	r3, [pc, #76]	; (2db0 <xTimerGenericCommand+0x54>)
    2d64:	681c      	ldr	r4, [r3, #0]
    2d66:	2c00      	cmp	r4, #0
    2d68:	d01f      	beq.n	2daa <xTimerGenericCommand+0x4e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    2d6a:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2d6c:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    2d6e:	9003      	str	r0, [sp, #12]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2d70:	2905      	cmp	r1, #5
    2d72:	dc13      	bgt.n	2d9c <xTimerGenericCommand+0x40>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2d74:	4b0f      	ldr	r3, [pc, #60]	; (2db4 <xTimerGenericCommand+0x58>)
    2d76:	4798      	blx	r3
    2d78:	2802      	cmp	r0, #2
    2d7a:	d107      	bne.n	2d8c <xTimerGenericCommand+0x30>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2d7c:	4b0c      	ldr	r3, [pc, #48]	; (2db0 <xTimerGenericCommand+0x54>)
    2d7e:	6818      	ldr	r0, [r3, #0]
    2d80:	2300      	movs	r3, #0
    2d82:	9a08      	ldr	r2, [sp, #32]
    2d84:	a901      	add	r1, sp, #4
    2d86:	4c0c      	ldr	r4, [pc, #48]	; (2db8 <xTimerGenericCommand+0x5c>)
    2d88:	47a0      	blx	r4
    2d8a:	e00f      	b.n	2dac <xTimerGenericCommand+0x50>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2d8c:	4b08      	ldr	r3, [pc, #32]	; (2db0 <xTimerGenericCommand+0x54>)
    2d8e:	6818      	ldr	r0, [r3, #0]
    2d90:	2300      	movs	r3, #0
    2d92:	2200      	movs	r2, #0
    2d94:	a901      	add	r1, sp, #4
    2d96:	4c08      	ldr	r4, [pc, #32]	; (2db8 <xTimerGenericCommand+0x5c>)
    2d98:	47a0      	blx	r4
    2d9a:	e007      	b.n	2dac <xTimerGenericCommand+0x50>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2d9c:	2300      	movs	r3, #0
    2d9e:	002a      	movs	r2, r5
    2da0:	a901      	add	r1, sp, #4
    2da2:	0020      	movs	r0, r4
    2da4:	4c05      	ldr	r4, [pc, #20]	; (2dbc <xTimerGenericCommand+0x60>)
    2da6:	47a0      	blx	r4
    2da8:	e000      	b.n	2dac <xTimerGenericCommand+0x50>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2daa:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    2dac:	b005      	add	sp, #20
    2dae:	bd30      	pop	{r4, r5, pc}
    2db0:	20003ca4 	.word	0x20003ca4
    2db4:	00002b71 	.word	0x00002b71
    2db8:	00001ee1 	.word	0x00001ee1
    2dbc:	00002059 	.word	0x00002059

00002dc0 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dc2:	4657      	mov	r7, sl
    2dc4:	464e      	mov	r6, r9
    2dc6:	4645      	mov	r5, r8
    2dc8:	b4e0      	push	{r5, r6, r7}
    2dca:	b082      	sub	sp, #8
    2dcc:	4681      	mov	r9, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    2dce:	4b24      	ldr	r3, [pc, #144]	; (2e60 <prvSampleTimeNow+0xa0>)
    2dd0:	4798      	blx	r3
    2dd2:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
    2dd4:	4b23      	ldr	r3, [pc, #140]	; (2e64 <prvSampleTimeNow+0xa4>)
    2dd6:	681b      	ldr	r3, [r3, #0]
    2dd8:	4298      	cmp	r0, r3
    2dda:	d233      	bcs.n	2e44 <prvSampleTimeNow+0x84>
    2ddc:	e023      	b.n	2e26 <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2dde:	68db      	ldr	r3, [r3, #12]
    2de0:	681a      	ldr	r2, [r3, #0]
    2de2:	4692      	mov	sl, r2

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2de4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2de6:	1d25      	adds	r5, r4, #4
    2de8:	0028      	movs	r0, r5
    2dea:	47b8      	blx	r7
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2dec:	0020      	movs	r0, r4
    2dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2df0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2df2:	69e3      	ldr	r3, [r4, #28]
    2df4:	2b01      	cmp	r3, #1
    2df6:	d118      	bne.n	2e2a <prvSampleTimeNow+0x6a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2df8:	69a3      	ldr	r3, [r4, #24]
    2dfa:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
    2dfc:	459a      	cmp	sl, r3
    2dfe:	d207      	bcs.n	2e10 <prvSampleTimeNow+0x50>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2e00:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2e02:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2e04:	4b18      	ldr	r3, [pc, #96]	; (2e68 <prvSampleTimeNow+0xa8>)
    2e06:	6818      	ldr	r0, [r3, #0]
    2e08:	0029      	movs	r1, r5
    2e0a:	4b18      	ldr	r3, [pc, #96]	; (2e6c <prvSampleTimeNow+0xac>)
    2e0c:	4798      	blx	r3
    2e0e:	e00c      	b.n	2e2a <prvSampleTimeNow+0x6a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2e10:	2300      	movs	r3, #0
    2e12:	9300      	str	r3, [sp, #0]
    2e14:	4652      	mov	r2, sl
    2e16:	2100      	movs	r1, #0
    2e18:	0020      	movs	r0, r4
    2e1a:	4c15      	ldr	r4, [pc, #84]	; (2e70 <prvSampleTimeNow+0xb0>)
    2e1c:	47a0      	blx	r4
				configASSERT( xResult );
    2e1e:	2800      	cmp	r0, #0
    2e20:	d103      	bne.n	2e2a <prvSampleTimeNow+0x6a>
    2e22:	b672      	cpsid	i
    2e24:	e7fe      	b.n	2e24 <prvSampleTimeNow+0x64>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2e26:	4e10      	ldr	r6, [pc, #64]	; (2e68 <prvSampleTimeNow+0xa8>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2e28:	4f12      	ldr	r7, [pc, #72]	; (2e74 <prvSampleTimeNow+0xb4>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2e2a:	6833      	ldr	r3, [r6, #0]
    2e2c:	681a      	ldr	r2, [r3, #0]
    2e2e:	2a00      	cmp	r2, #0
    2e30:	d1d5      	bne.n	2dde <prvSampleTimeNow+0x1e>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    2e32:	4a11      	ldr	r2, [pc, #68]	; (2e78 <prvSampleTimeNow+0xb8>)
    2e34:	490c      	ldr	r1, [pc, #48]	; (2e68 <prvSampleTimeNow+0xa8>)
    2e36:	6810      	ldr	r0, [r2, #0]
    2e38:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    2e3a:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
    2e3c:	2301      	movs	r3, #1
    2e3e:	464a      	mov	r2, r9
    2e40:	6013      	str	r3, [r2, #0]
    2e42:	e002      	b.n	2e4a <prvSampleTimeNow+0x8a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    2e44:	2300      	movs	r3, #0
    2e46:	464a      	mov	r2, r9
    2e48:	6013      	str	r3, [r2, #0]
	}

	xLastTime = xTimeNow;
    2e4a:	4b06      	ldr	r3, [pc, #24]	; (2e64 <prvSampleTimeNow+0xa4>)
    2e4c:	4642      	mov	r2, r8
    2e4e:	601a      	str	r2, [r3, #0]

	return xTimeNow;
}
    2e50:	4640      	mov	r0, r8
    2e52:	b002      	add	sp, #8
    2e54:	bc1c      	pop	{r2, r3, r4}
    2e56:	4690      	mov	r8, r2
    2e58:	4699      	mov	r9, r3
    2e5a:	46a2      	mov	sl, r4
    2e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e5e:	46c0      	nop			; (mov r8, r8)
    2e60:	000025d9 	.word	0x000025d9
    2e64:	20003ca0 	.word	0x20003ca0
    2e68:	20003c74 	.word	0x20003c74
    2e6c:	00001a19 	.word	0x00001a19
    2e70:	00002d5d 	.word	0x00002d5d
    2e74:	00001a49 	.word	0x00001a49
    2e78:	20003ca8 	.word	0x20003ca8

00002e7c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    2e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e7e:	465f      	mov	r7, fp
    2e80:	4656      	mov	r6, sl
    2e82:	464d      	mov	r5, r9
    2e84:	4644      	mov	r4, r8
    2e86:	b4f0      	push	{r4, r5, r6, r7}
    2e88:	b089      	sub	sp, #36	; 0x24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2e8a:	4b52      	ldr	r3, [pc, #328]	; (2fd4 <prvTimerTask+0x158>)
    2e8c:	469b      	mov	fp, r3
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    2e8e:	4b52      	ldr	r3, [pc, #328]	; (2fd8 <prvTimerTask+0x15c>)
    2e90:	4699      	mov	r9, r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2e92:	4b52      	ldr	r3, [pc, #328]	; (2fdc <prvTimerTask+0x160>)
    2e94:	4698      	mov	r8, r3
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2e96:	465b      	mov	r3, fp
    2e98:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    2e9a:	681a      	ldr	r2, [r3, #0]
    2e9c:	2a00      	cmp	r2, #0
    2e9e:	d100      	bne.n	2ea2 <prvTimerTask+0x26>
    2ea0:	e08f      	b.n	2fc2 <prvTimerTask+0x146>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2ea2:	68db      	ldr	r3, [r3, #12]
    2ea4:	681d      	ldr	r5, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    2ea6:	4b4c      	ldr	r3, [pc, #304]	; (2fd8 <prvTimerTask+0x15c>)
    2ea8:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2eaa:	a805      	add	r0, sp, #20
    2eac:	4b4b      	ldr	r3, [pc, #300]	; (2fdc <prvTimerTask+0x160>)
    2eae:	4798      	blx	r3
    2eb0:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
    2eb2:	9b05      	ldr	r3, [sp, #20]
    2eb4:	2b00      	cmp	r3, #0
    2eb6:	d131      	bne.n	2f1c <prvTimerTask+0xa0>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2eb8:	4285      	cmp	r5, r0
    2eba:	d823      	bhi.n	2f04 <prvTimerTask+0x88>
			{
				( void ) xTaskResumeAll();
    2ebc:	4b48      	ldr	r3, [pc, #288]	; (2fe0 <prvTimerTask+0x164>)
    2ebe:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2ec0:	4b44      	ldr	r3, [pc, #272]	; (2fd4 <prvTimerTask+0x158>)
    2ec2:	681b      	ldr	r3, [r3, #0]
    2ec4:	68db      	ldr	r3, [r3, #12]
    2ec6:	68de      	ldr	r6, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2ec8:	1d30      	adds	r0, r6, #4
    2eca:	4b46      	ldr	r3, [pc, #280]	; (2fe4 <prvTimerTask+0x168>)
    2ecc:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2ece:	69f3      	ldr	r3, [r6, #28]
    2ed0:	2b01      	cmp	r3, #1
    2ed2:	d113      	bne.n	2efc <prvTimerTask+0x80>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    2ed4:	69b3      	ldr	r3, [r6, #24]
    2ed6:	18e9      	adds	r1, r5, r3
    2ed8:	002b      	movs	r3, r5
    2eda:	0022      	movs	r2, r4
    2edc:	0030      	movs	r0, r6
    2ede:	4c42      	ldr	r4, [pc, #264]	; (2fe8 <prvTimerTask+0x16c>)
    2ee0:	47a0      	blx	r4
    2ee2:	2801      	cmp	r0, #1
    2ee4:	d10a      	bne.n	2efc <prvTimerTask+0x80>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2ee6:	2300      	movs	r3, #0
    2ee8:	9300      	str	r3, [sp, #0]
    2eea:	002a      	movs	r2, r5
    2eec:	2100      	movs	r1, #0
    2eee:	0030      	movs	r0, r6
    2ef0:	4c3e      	ldr	r4, [pc, #248]	; (2fec <prvTimerTask+0x170>)
    2ef2:	47a0      	blx	r4
			configASSERT( xResult );
    2ef4:	2800      	cmp	r0, #0
    2ef6:	d101      	bne.n	2efc <prvTimerTask+0x80>
    2ef8:	b672      	cpsid	i
    2efa:	e7fe      	b.n	2efa <prvTimerTask+0x7e>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2efc:	6a73      	ldr	r3, [r6, #36]	; 0x24
    2efe:	0030      	movs	r0, r6
    2f00:	4798      	blx	r3
    2f02:	e00d      	b.n	2f20 <prvTimerTask+0xa4>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    2f04:	1b29      	subs	r1, r5, r4
    2f06:	4b3a      	ldr	r3, [pc, #232]	; (2ff0 <prvTimerTask+0x174>)
    2f08:	6818      	ldr	r0, [r3, #0]
    2f0a:	4b3a      	ldr	r3, [pc, #232]	; (2ff4 <prvTimerTask+0x178>)
    2f0c:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    2f0e:	4b34      	ldr	r3, [pc, #208]	; (2fe0 <prvTimerTask+0x164>)
    2f10:	4798      	blx	r3
    2f12:	2800      	cmp	r0, #0
    2f14:	d104      	bne.n	2f20 <prvTimerTask+0xa4>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
    2f16:	4b38      	ldr	r3, [pc, #224]	; (2ff8 <prvTimerTask+0x17c>)
    2f18:	4798      	blx	r3
    2f1a:	e001      	b.n	2f20 <prvTimerTask+0xa4>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    2f1c:	4b30      	ldr	r3, [pc, #192]	; (2fe0 <prvTimerTask+0x164>)
    2f1e:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2f20:	4d33      	ldr	r5, [pc, #204]	; (2ff0 <prvTimerTask+0x174>)
    2f22:	4c36      	ldr	r4, [pc, #216]	; (2ffc <prvTimerTask+0x180>)
    2f24:	e045      	b.n	2fb2 <prvTimerTask+0x136>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2f26:	9b05      	ldr	r3, [sp, #20]
    2f28:	9303      	str	r3, [sp, #12]
    2f2a:	2b00      	cmp	r3, #0
    2f2c:	db41      	blt.n	2fb2 <prvTimerTask+0x136>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2f2e:	9e07      	ldr	r6, [sp, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    2f30:	6973      	ldr	r3, [r6, #20]
    2f32:	2b00      	cmp	r3, #0
    2f34:	d002      	beq.n	2f3c <prvTimerTask+0xc0>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2f36:	1d30      	adds	r0, r6, #4
    2f38:	4b2a      	ldr	r3, [pc, #168]	; (2fe4 <prvTimerTask+0x168>)
    2f3a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2f3c:	a804      	add	r0, sp, #16
    2f3e:	4b27      	ldr	r3, [pc, #156]	; (2fdc <prvTimerTask+0x160>)
    2f40:	4798      	blx	r3

			switch( xMessage.xMessageID )
    2f42:	9b05      	ldr	r3, [sp, #20]
    2f44:	2b09      	cmp	r3, #9
    2f46:	d834      	bhi.n	2fb2 <prvTimerTask+0x136>
    2f48:	009b      	lsls	r3, r3, #2
    2f4a:	4a2d      	ldr	r2, [pc, #180]	; (3000 <prvTimerTask+0x184>)
    2f4c:	58d3      	ldr	r3, [r2, r3]
    2f4e:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    2f50:	9b06      	ldr	r3, [sp, #24]
    2f52:	69b2      	ldr	r2, [r6, #24]
    2f54:	4694      	mov	ip, r2
    2f56:	4463      	add	r3, ip
    2f58:	0019      	movs	r1, r3
    2f5a:	9b06      	ldr	r3, [sp, #24]
    2f5c:	0002      	movs	r2, r0
    2f5e:	0030      	movs	r0, r6
    2f60:	4f21      	ldr	r7, [pc, #132]	; (2fe8 <prvTimerTask+0x16c>)
    2f62:	47b8      	blx	r7
    2f64:	2801      	cmp	r0, #1
    2f66:	d124      	bne.n	2fb2 <prvTimerTask+0x136>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2f68:	0030      	movs	r0, r6
    2f6a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    2f6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2f6e:	69f3      	ldr	r3, [r6, #28]
    2f70:	2b01      	cmp	r3, #1
    2f72:	d11e      	bne.n	2fb2 <prvTimerTask+0x136>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2f74:	9b06      	ldr	r3, [sp, #24]
    2f76:	69b1      	ldr	r1, [r6, #24]
    2f78:	468c      	mov	ip, r1
    2f7a:	4463      	add	r3, ip
    2f7c:	001a      	movs	r2, r3
    2f7e:	2300      	movs	r3, #0
    2f80:	9300      	str	r3, [sp, #0]
    2f82:	2100      	movs	r1, #0
    2f84:	0030      	movs	r0, r6
    2f86:	4e19      	ldr	r6, [pc, #100]	; (2fec <prvTimerTask+0x170>)
    2f88:	47b0      	blx	r6
							configASSERT( xResult );
    2f8a:	2800      	cmp	r0, #0
    2f8c:	d111      	bne.n	2fb2 <prvTimerTask+0x136>
    2f8e:	b672      	cpsid	i
    2f90:	e7fe      	b.n	2f90 <prvTimerTask+0x114>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2f92:	9906      	ldr	r1, [sp, #24]
    2f94:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    2f96:	2900      	cmp	r1, #0
    2f98:	d101      	bne.n	2f9e <prvTimerTask+0x122>
    2f9a:	b672      	cpsid	i
    2f9c:	e7fe      	b.n	2f9c <prvTimerTask+0x120>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2f9e:	1841      	adds	r1, r0, r1
    2fa0:	0003      	movs	r3, r0
    2fa2:	0002      	movs	r2, r0
    2fa4:	0030      	movs	r0, r6
    2fa6:	4e10      	ldr	r6, [pc, #64]	; (2fe8 <prvTimerTask+0x16c>)
    2fa8:	47b0      	blx	r6
    2faa:	e002      	b.n	2fb2 <prvTimerTask+0x136>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    2fac:	0030      	movs	r0, r6
    2fae:	4b15      	ldr	r3, [pc, #84]	; (3004 <prvTimerTask+0x188>)
    2fb0:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2fb2:	2300      	movs	r3, #0
    2fb4:	2200      	movs	r2, #0
    2fb6:	a905      	add	r1, sp, #20
    2fb8:	6828      	ldr	r0, [r5, #0]
    2fba:	47a0      	blx	r4
    2fbc:	2800      	cmp	r0, #0
    2fbe:	d1b2      	bne.n	2f26 <prvTimerTask+0xaa>
    2fc0:	e769      	b.n	2e96 <prvTimerTask+0x1a>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    2fc2:	47c8      	blx	r9
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2fc4:	a805      	add	r0, sp, #20
    2fc6:	47c0      	blx	r8
    2fc8:	0004      	movs	r4, r0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    2fca:	2500      	movs	r5, #0
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
    2fcc:	9b05      	ldr	r3, [sp, #20]
    2fce:	2b00      	cmp	r3, #0
    2fd0:	d098      	beq.n	2f04 <prvTimerTask+0x88>
    2fd2:	e7a3      	b.n	2f1c <prvTimerTask+0xa0>
    2fd4:	20003c74 	.word	0x20003c74
    2fd8:	000025c9 	.word	0x000025c9
    2fdc:	00002dc1 	.word	0x00002dc1
    2fe0:	0000271d 	.word	0x0000271d
    2fe4:	00001a49 	.word	0x00001a49
    2fe8:	00002c65 	.word	0x00002c65
    2fec:	00002d5d 	.word	0x00002d5d
    2ff0:	20003ca4 	.word	0x20003ca4
    2ff4:	000022ad 	.word	0x000022ad
    2ff8:	00001ac5 	.word	0x00001ac5
    2ffc:	00002121 	.word	0x00002121
    3000:	00004004 	.word	0x00004004
    3004:	00001c69 	.word	0x00001c69

00003008 <adc_complete_callback>:

/* ADC Callback Function */
void adc_complete_callback(struct adc_module *const module)
{
	/* Set ADC conversion ended flag */
	adc_read_done = true;
    3008:	2201      	movs	r2, #1
    300a:	4b01      	ldr	r3, [pc, #4]	; (3010 <adc_complete_callback+0x8>)
    300c:	701a      	strb	r2, [r3, #0]
}
    300e:	4770      	bx	lr
    3010:	20003cac 	.word	0x20003cac

00003014 <uart_task>:



	
static void uart_task(void *params)
{
    3014:	b5f0      	push	{r4, r5, r6, r7, lr}
    3016:	4647      	mov	r7, r8
    3018:	b480      	push	{r7}
    301a:	b092      	sub	sp, #72	; 0x48

	
	//uint32_t packet_length = sizeof(packet);
	//char* temporary_char = &s[0];
	
	 memset(buffer_temp,0,sizeof(packet));
    301c:	2223      	movs	r2, #35	; 0x23
    301e:	2100      	movs	r1, #0
    3020:	4668      	mov	r0, sp
    3022:	4b2b      	ldr	r3, [pc, #172]	; (30d0 <uart_task+0xbc>)
    3024:	4798      	blx	r3
	char *current_char_ptr = &current_char;
	char r;
	packet *pkt_temp_ptr;
	packet pkt_temp;
	uint8_t buffer_temp[sizeof(packet)];
	uint32_t buffer_temp_index = 0;
    3026:	2400      	movs	r4, #0
	 memset(buffer_temp,0,sizeof(packet));
	
	for (;;) {

		// Any characters queued? Handle them!
		while (xQueueReceive(terminal_in_queue, current_char_ptr, 0)) 
    3028:	4e2a      	ldr	r6, [pc, #168]	; (30d4 <uart_task+0xc0>)
    302a:	4d2b      	ldr	r5, [pc, #172]	; (30d8 <uart_task+0xc4>)
			

			*current_char_ptr = '\0';
		}

		vTaskDelay(UART_TASK_DELAY);
    302c:	4b2b      	ldr	r3, [pc, #172]	; (30dc <uart_task+0xc8>)
    302e:	4698      	mov	r8, r3
    3030:	e043      	b.n	30ba <uart_task+0xa6>

		// Any characters queued? Handle them!
		while (xQueueReceive(terminal_in_queue, current_char_ptr, 0)) 
		{
			
			r = *current_char_ptr;
    3032:	2347      	movs	r3, #71	; 0x47
    3034:	446b      	add	r3, sp
    3036:	781b      	ldrb	r3, [r3, #0]
			
			switch(r)
    3038:	2b40      	cmp	r3, #64	; 0x40
    303a:	d135      	bne.n	30a8 <uart_task+0x94>
			{
				case '@':
				
					buffer_temp[buffer_temp_index] = r;
    303c:	466a      	mov	r2, sp
    303e:	5513      	strb	r3, [r2, r4]
					buffer_temp_index++;
					
					pkt_temp_ptr = (packet*)&buffer_temp[0];
					
					
					if ((pkt_temp_ptr->STX == STX_STRING) & (pkt_temp_ptr->ETX == ETX_STRING))
    3040:	7813      	ldrb	r3, [r2, #0]
    3042:	2b23      	cmp	r3, #35	; 0x23
    3044:	d129      	bne.n	309a <uart_task+0x86>
    3046:	3b01      	subs	r3, #1
    3048:	5cd3      	ldrb	r3, [r2, r3]
    304a:	2b40      	cmp	r3, #64	; 0x40
    304c:	d125      	bne.n	309a <uart_task+0x86>
					{
						switch (pkt_temp_ptr->cmd)
    304e:	7853      	ldrb	r3, [r2, #1]
    3050:	2b52      	cmp	r3, #82	; 0x52
    3052:	d002      	beq.n	305a <uart_task+0x46>
    3054:	2b57      	cmp	r3, #87	; 0x57
    3056:	d017      	beq.n	3088 <uart_task+0x74>
    3058:	e01f      	b.n	309a <uart_task+0x86>
						{
							case CMD_READ:
						
							pkt_temp = *pkt_temp_ptr;
    305a:	a909      	add	r1, sp, #36	; 0x24
    305c:	466b      	mov	r3, sp
    305e:	000a      	movs	r2, r1
    3060:	cb91      	ldmia	r3!, {r0, r4, r7}
    3062:	c291      	stmia	r2!, {r0, r4, r7}
    3064:	cb91      	ldmia	r3!, {r0, r4, r7}
    3066:	c291      	stmia	r2!, {r0, r4, r7}
    3068:	cb11      	ldmia	r3!, {r0, r4}
    306a:	c211      	stmia	r2!, {r0, r4}
    306c:	8818      	ldrh	r0, [r3, #0]
    306e:	8010      	strh	r0, [r2, #0]
    3070:	789b      	ldrb	r3, [r3, #2]
    3072:	7093      	strb	r3, [r2, #2]
							pkt_temp.payload[0]=(uint8_t)result;
    3074:	4b1a      	ldr	r3, [pc, #104]	; (30e0 <uart_task+0xcc>)
    3076:	881b      	ldrh	r3, [r3, #0]
    3078:	708b      	strb	r3, [r1, #2]
							pkt_temp.payload[1]=(uint8_t)(result>>8);
    307a:	0a1b      	lsrs	r3, r3, #8
    307c:	70cb      	strb	r3, [r1, #3]
							usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt_temp,sizeof(packet));
    307e:	2223      	movs	r2, #35	; 0x23
    3080:	4818      	ldr	r0, [pc, #96]	; (30e4 <uart_task+0xd0>)
    3082:	4b19      	ldr	r3, [pc, #100]	; (30e8 <uart_task+0xd4>)
    3084:	4798      	blx	r3
							
							break;
    3086:	e008      	b.n	309a <uart_task+0x86>
							case CMD_WRITE:
						
							value_rx = pkt_temp_ptr->payload[1] << 8 | (pkt_temp_ptr->payload[0]);
    3088:	78d3      	ldrb	r3, [r2, #3]
    308a:	021b      	lsls	r3, r3, #8
    308c:	466a      	mov	r2, sp
    308e:	7892      	ldrb	r2, [r2, #2]
    3090:	4313      	orrs	r3, r2
    3092:	4a16      	ldr	r2, [pc, #88]	; (30ec <uart_task+0xd8>)
    3094:	8013      	strh	r3, [r2, #0]
							
							n_sample = value_rx;
    3096:	4a16      	ldr	r2, [pc, #88]	; (30f0 <uart_task+0xdc>)
    3098:	6013      	str	r3, [r2, #0]
						
							break;
						}
					}
					
					memset(buffer_temp,0,sizeof(packet));
    309a:	2223      	movs	r2, #35	; 0x23
    309c:	2100      	movs	r1, #0
    309e:	4668      	mov	r0, sp
    30a0:	4b0b      	ldr	r3, [pc, #44]	; (30d0 <uart_task+0xbc>)
    30a2:	4798      	blx	r3
					buffer_temp_index = 0;
    30a4:	2400      	movs	r4, #0
						
				break;
    30a6:	e004      	b.n	30b2 <uart_task+0x9e>
				default:
					if(buffer_temp_index < sizeof(buffer_temp))
    30a8:	2c22      	cmp	r4, #34	; 0x22
    30aa:	d802      	bhi.n	30b2 <uart_task+0x9e>
					{
						buffer_temp[buffer_temp_index] = r;
    30ac:	466a      	mov	r2, sp
    30ae:	5513      	strb	r3, [r2, r4]
						buffer_temp_index++;
    30b0:	3401      	adds	r4, #1
					}
				break;
			}
			

			*current_char_ptr = '\0';
    30b2:	2200      	movs	r2, #0
    30b4:	2347      	movs	r3, #71	; 0x47
    30b6:	446b      	add	r3, sp
    30b8:	701a      	strb	r2, [r3, #0]
	 memset(buffer_temp,0,sizeof(packet));
	
	for (;;) {

		// Any characters queued? Handle them!
		while (xQueueReceive(terminal_in_queue, current_char_ptr, 0)) 
    30ba:	2300      	movs	r3, #0
    30bc:	2200      	movs	r2, #0
    30be:	2147      	movs	r1, #71	; 0x47
    30c0:	4469      	add	r1, sp
    30c2:	6830      	ldr	r0, [r6, #0]
    30c4:	47a8      	blx	r5
    30c6:	2800      	cmp	r0, #0
    30c8:	d1b3      	bne.n	3032 <uart_task+0x1e>
			

			*current_char_ptr = '\0';
		}

		vTaskDelay(UART_TASK_DELAY);
    30ca:	300a      	adds	r0, #10
    30cc:	47c0      	blx	r8
	}
    30ce:	e7f4      	b.n	30ba <uart_task+0xa6>
    30d0:	000036df 	.word	0x000036df
    30d4:	20003cbc 	.word	0x20003cbc
    30d8:	00002121 	.word	0x00002121
    30dc:	00002815 	.word	0x00002815
    30e0:	20003cb8 	.word	0x20003cb8
    30e4:	20003cf4 	.word	0x20003cf4
    30e8:	000009e1 	.word	0x000009e1
    30ec:	20003cae 	.word	0x20003cae
    30f0:	20000014 	.word	0x20000014

000030f4 <rx_handler>:
}



static void rx_handler(uint8_t instance)
{
    30f4:	b510      	push	{r4, lr}
	// Wait for synch to complete
	#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	while (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY) {
	}
	#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	while (usart_hw->SYNCBUSY.reg) {
    30f6:	4a15      	ldr	r2, [pc, #84]	; (314c <rx_handler+0x58>)
    30f8:	69d3      	ldr	r3, [r2, #28]
    30fa:	2b00      	cmp	r3, #0
    30fc:	d1fc      	bne.n	30f8 <rx_handler+0x4>
	}
	#endif

	// Read and mask interrupt flag register
	interrupt_status = usart_hw->INTFLAG.reg;
    30fe:	4b13      	ldr	r3, [pc, #76]	; (314c <rx_handler+0x58>)
    3100:	7e1b      	ldrb	r3, [r3, #24]
    3102:	b2db      	uxtb	r3, r3
    3104:	4a12      	ldr	r2, [pc, #72]	; (3150 <rx_handler+0x5c>)
    3106:	8013      	strh	r3, [r2, #0]

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    3108:	075b      	lsls	r3, r3, #29
    310a:	d51e      	bpl.n	314a <rx_handler+0x56>
		// Check for errors
		error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    310c:	4b0f      	ldr	r3, [pc, #60]	; (314c <rx_handler+0x58>)
    310e:	8b5a      	ldrh	r2, [r3, #26]
    3110:	b2d2      	uxtb	r2, r2
    3112:	233f      	movs	r3, #63	; 0x3f
    3114:	4013      	ands	r3, r2
    3116:	490f      	ldr	r1, [pc, #60]	; (3154 <rx_handler+0x60>)
    3118:	700b      	strb	r3, [r1, #0]
		if (error_code) {
    311a:	d006      	beq.n	312a <rx_handler+0x36>
			// Only frame error and buffer overflow should be possible
			if (error_code &
    311c:	2306      	movs	r3, #6
    311e:	4213      	tst	r3, r2
    3120:	d013      	beq.n	314a <rx_handler+0x56>
			(SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF)){
				
				usart_hw->STATUS.reg =
    3122:	2206      	movs	r2, #6
    3124:	4b09      	ldr	r3, [pc, #36]	; (314c <rx_handler+0x58>)
    3126:	835a      	strh	r2, [r3, #26]
    3128:	e00f      	b.n	314a <rx_handler+0x56>
			}
			// All is fine, so push the received character into our queue
		}
		else {
			
			data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    312a:	4b08      	ldr	r3, [pc, #32]	; (314c <rx_handler+0x58>)
    312c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    312e:	490a      	ldr	r1, [pc, #40]	; (3158 <rx_handler+0x64>)
    3130:	05db      	lsls	r3, r3, #23
    3132:	0ddb      	lsrs	r3, r3, #23
    3134:	800b      	strh	r3, [r1, #0]
			//printf("%c\n\r",data);
			count++;
    3136:	4a09      	ldr	r2, [pc, #36]	; (315c <rx_handler+0x68>)
    3138:	6813      	ldr	r3, [r2, #0]
    313a:	3301      	adds	r3, #1
    313c:	6013      	str	r3, [r2, #0]
			if (!xQueueSendFromISR(terminal_in_queue, (uint8_t *)&data,NULL))
    313e:	4b08      	ldr	r3, [pc, #32]	; (3160 <rx_handler+0x6c>)
    3140:	6818      	ldr	r0, [r3, #0]
    3142:	2300      	movs	r3, #0
    3144:	2200      	movs	r2, #0
    3146:	4c07      	ldr	r4, [pc, #28]	; (3164 <rx_handler+0x70>)
    3148:	47a0      	blx	r4
			}
		}
		} else {
		// Error: only RX interrupt should be enabled
	}
    314a:	bd10      	pop	{r4, pc}
    314c:	42000400 	.word	0x42000400
    3150:	20003cf0 	.word	0x20003cf0
    3154:	20003f4e 	.word	0x20003f4e
    3158:	20003f4c 	.word	0x20003f4c
    315c:	20003cb0 	.word	0x20003cb0
    3160:	20003cbc 	.word	0x20003cbc
    3164:	00002059 	.word	0x00002059

00003168 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3168:	b570      	push	{r4, r5, r6, lr}
    316a:	b082      	sub	sp, #8
    316c:	0005      	movs	r5, r0
    316e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    3170:	2200      	movs	r2, #0
    3172:	466b      	mov	r3, sp
    3174:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    3176:	4c06      	ldr	r4, [pc, #24]	; (3190 <usart_serial_getchar+0x28>)
    3178:	466b      	mov	r3, sp
    317a:	1d99      	adds	r1, r3, #6
    317c:	0028      	movs	r0, r5
    317e:	47a0      	blx	r4
    3180:	2800      	cmp	r0, #0
    3182:	d1f9      	bne.n	3178 <usart_serial_getchar+0x10>

	*c = temp;
    3184:	466b      	mov	r3, sp
    3186:	3306      	adds	r3, #6
    3188:	881b      	ldrh	r3, [r3, #0]
    318a:	7033      	strb	r3, [r6, #0]
}
    318c:	b002      	add	sp, #8
    318e:	bd70      	pop	{r4, r5, r6, pc}
    3190:	00000971 	.word	0x00000971

00003194 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    3194:	b570      	push	{r4, r5, r6, lr}
    3196:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    3198:	b28c      	uxth	r4, r1
    319a:	4e03      	ldr	r6, [pc, #12]	; (31a8 <usart_serial_putchar+0x14>)
    319c:	0021      	movs	r1, r4
    319e:	0028      	movs	r0, r5
    31a0:	47b0      	blx	r6
    31a2:	2800      	cmp	r0, #0
    31a4:	d1fa      	bne.n	319c <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    31a6:	bd70      	pop	{r4, r5, r6, pc}
    31a8:	00000945 	.word	0x00000945

000031ac <configure_opamp2>:
struct adc_module adc_instance;
struct usart_module usart_instance;

/* Configure OPAMP2 and I/O PORT */
void configure_opamp2(void)
{
    31ac:	b510      	push	{r4, lr}
    31ae:	b086      	sub	sp, #24
	/* Creates a new configuration structure for the OPAMP2. */
	struct opamp2_config conf;

	/* Initializes OPAMP module. */
	opamp_module_init();
    31b0:	4b14      	ldr	r3, [pc, #80]	; (3204 <configure_opamp2+0x58>)
    31b2:	4798      	blx	r3

	/* Fill with the default settings. */
	opamp2_get_config_defaults(&conf);
    31b4:	ac01      	add	r4, sp, #4
    31b6:	0020      	movs	r0, r4
    31b8:	4b13      	ldr	r3, [pc, #76]	; (3208 <configure_opamp2+0x5c>)
    31ba:	4798      	blx	r3

	/* Set the the OPAMP2 in "Non-Inverted PGA" mode, gain of 4 */
	conf.negative_input           = OPAMP2_NEG_MUX_TAP2;
    31bc:	2380      	movs	r3, #128	; 0x80
    31be:	035b      	lsls	r3, r3, #13
    31c0:	9301      	str	r3, [sp, #4]
	conf.positive_input           = OPAMP2_POS_MUX_PIN2;
    31c2:	2300      	movs	r3, #0
    31c4:	6063      	str	r3, [r4, #4]
	conf.r1_connection            = OPAMP2_RES1_MUX_GND;
    31c6:	22c0      	movs	r2, #192	; 0xc0
    31c8:	0152      	lsls	r2, r2, #5
    31ca:	8122      	strh	r2, [r4, #8]
	conf.config_common.potentiometer_selection = OPAMP_POT_MUX_14R_2R;
    31cc:	8163      	strh	r3, [r4, #10]
	conf.config_common.r1_enable  = true;
    31ce:	3301      	adds	r3, #1
    31d0:	7323      	strb	r3, [r4, #12]
	conf.config_common.r2_out     = true;
    31d2:	73a3      	strb	r3, [r4, #14]
	conf.config_common.analog_out = true;
    31d4:	74a3      	strb	r3, [r4, #18]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    31d6:	2200      	movs	r2, #0
    31d8:	4669      	mov	r1, sp
    31da:	704a      	strb	r2, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    31dc:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    31de:	2200      	movs	r2, #0
    31e0:	70ca      	strb	r2, [r1, #3]

	/* Set up OA2POS pin as input. */
	struct system_pinmux_config opamp2_input_pin_conf;
	system_pinmux_get_config_defaults(&opamp2_input_pin_conf);
	opamp2_input_pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	opamp2_input_pin_conf.mux_position = OPAMP_INPUT_MUX;
    31e2:	700b      	strb	r3, [r1, #0]
	system_pinmux_pin_set_config(OPAMP_INPUT_PIN, &opamp2_input_pin_conf);
    31e4:	2005      	movs	r0, #5
    31e6:	4b09      	ldr	r3, [pc, #36]	; (320c <configure_opamp2+0x60>)
    31e8:	4798      	blx	r3

	/* Initialize and enable the OPAMP2 with the user settings. */
	opamp2_set_config(&conf);
    31ea:	0020      	movs	r0, r4
    31ec:	4b08      	ldr	r3, [pc, #32]	; (3210 <configure_opamp2+0x64>)
    31ee:	4798      	blx	r3
	opamp_enable(OPAMP_2);
    31f0:	2002      	movs	r0, #2
    31f2:	4b08      	ldr	r3, [pc, #32]	; (3214 <configure_opamp2+0x68>)
    31f4:	4798      	blx	r3
	
	/* Wait for the output ready. */
	while(!opamp_is_ready(OPAMP_2));
    31f6:	4c08      	ldr	r4, [pc, #32]	; (3218 <configure_opamp2+0x6c>)
    31f8:	2002      	movs	r0, #2
    31fa:	47a0      	blx	r4
    31fc:	2800      	cmp	r0, #0
    31fe:	d0fb      	beq.n	31f8 <configure_opamp2+0x4c>
}
    3200:	b006      	add	sp, #24
    3202:	bd10      	pop	{r4, pc}
    3204:	000012d1 	.word	0x000012d1
    3208:	0000130d 	.word	0x0000130d
    320c:	00001899 	.word	0x00001899
    3210:	00001335 	.word	0x00001335
    3214:	00001391 	.word	0x00001391
    3218:	000013c5 	.word	0x000013c5

0000321c <configure_adc>:

/* Configure ADC */
void configure_adc(void)
{
    321c:	b530      	push	{r4, r5, lr}
    321e:	b08d      	sub	sp, #52	; 0x34
	/* Creates a new configuration structure for the ADC */
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
    3220:	ac01      	add	r4, sp, #4
    3222:	0020      	movs	r0, r4
    3224:	4b11      	ldr	r3, [pc, #68]	; (326c <configure_adc+0x50>)
    3226:	4798      	blx	r3
	
	/* Setup ADC with OPAMP2 output as ADC input */
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV8;
    3228:	2302      	movs	r3, #2
    322a:	70a3      	strb	r3, [r4, #2]
	config_adc.positive_input  = ADC_POSITIVE_INPUT_OPAMP2;
    322c:	331d      	adds	r3, #29
    322e:	7123      	strb	r3, [r4, #4]
	
	/* Initialize and enable ADC */
	adc_init(&adc_instance, ADC, &config_adc);
    3230:	4d0f      	ldr	r5, [pc, #60]	; (3270 <configure_adc+0x54>)
    3232:	0022      	movs	r2, r4
    3234:	490f      	ldr	r1, [pc, #60]	; (3274 <configure_adc+0x58>)
    3236:	0028      	movs	r0, r5
    3238:	4b0f      	ldr	r3, [pc, #60]	; (3278 <configure_adc+0x5c>)
    323a:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    323c:	682a      	ldr	r2, [r5, #0]
    323e:	8c13      	ldrh	r3, [r2, #32]
    3240:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    3242:	2b00      	cmp	r3, #0
    3244:	d1fb      	bne.n	323e <configure_adc+0x22>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3246:	2180      	movs	r1, #128	; 0x80
    3248:	03c9      	lsls	r1, r1, #15
    324a:	4b0c      	ldr	r3, [pc, #48]	; (327c <configure_adc+0x60>)
    324c:	6019      	str	r1, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    324e:	2307      	movs	r3, #7
    3250:	7113      	strb	r3, [r2, #4]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    3252:	7193      	strb	r3, [r2, #6]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3254:	7811      	ldrb	r1, [r2, #0]
    3256:	3b05      	subs	r3, #5
    3258:	430b      	orrs	r3, r1
    325a:	7013      	strb	r3, [r2, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    325c:	4b04      	ldr	r3, [pc, #16]	; (3270 <configure_adc+0x54>)
    325e:	681a      	ldr	r2, [r3, #0]

	if (adc_module->SYNCBUSY.reg) {
    3260:	8c13      	ldrh	r3, [r2, #32]
    3262:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    3264:	2b00      	cmp	r3, #0
    3266:	d1fb      	bne.n	3260 <configure_adc+0x44>
	adc_enable(&adc_instance);
}
    3268:	b00d      	add	sp, #52	; 0x34
    326a:	bd30      	pop	{r4, r5, pc}
    326c:	00000d9d 	.word	0x00000d9d
    3270:	20003f50 	.word	0x20003f50
    3274:	43000c00 	.word	0x43000c00
    3278:	00000de1 	.word	0x00000de1
    327c:	e000e100 	.word	0xe000e100

00003280 <configure_adc_callbacks>:

/* Enable ADC Callback Function */
void configure_adc_callbacks(void)
{
    3280:	b510      	push	{r4, lr}
	adc_register_callback(&adc_instance,
    3282:	4c05      	ldr	r4, [pc, #20]	; (3298 <configure_adc_callbacks+0x18>)
    3284:	2200      	movs	r2, #0
    3286:	4905      	ldr	r1, [pc, #20]	; (329c <configure_adc_callbacks+0x1c>)
    3288:	0020      	movs	r0, r4
    328a:	4b05      	ldr	r3, [pc, #20]	; (32a0 <configure_adc_callbacks+0x20>)
    328c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    328e:	7ee2      	ldrb	r2, [r4, #27]
    3290:	2301      	movs	r3, #1
    3292:	4313      	orrs	r3, r2
    3294:	76e3      	strb	r3, [r4, #27]
			adc_complete_callback, ADC_CALLBACK_READ_BUFFER);
	adc_enable_callback(&adc_instance, ADC_CALLBACK_READ_BUFFER);
}
    3296:	bd10      	pop	{r4, pc}
    3298:	20003f50 	.word	0x20003f50
    329c:	00003009 	.word	0x00003009
    32a0:	00001271 	.word	0x00001271

000032a4 <main>:
	char cmd[10];
	bool flag = false;

/* Main function */
int main(void)
{
    32a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    32a6:	b095      	sub	sp, #84	; 0x54
	
	system_init();
    32a8:	4b56      	ldr	r3, [pc, #344]	; (3404 <main+0x160>)
    32aa:	4798      	blx	r3
	delay_init();
    32ac:	4b56      	ldr	r3, [pc, #344]	; (3408 <main+0x164>)
    32ae:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    32b0:	aa04      	add	r2, sp, #16
    32b2:	2380      	movs	r3, #128	; 0x80
    32b4:	05db      	lsls	r3, r3, #23
    32b6:	9304      	str	r3, [sp, #16]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    32b8:	2300      	movs	r3, #0
    32ba:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    32bc:	21ff      	movs	r1, #255	; 0xff
    32be:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    32c0:	2100      	movs	r1, #0
    32c2:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    32c4:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    32c6:	2401      	movs	r4, #1
    32c8:	2024      	movs	r0, #36	; 0x24
    32ca:	5414      	strb	r4, [r2, r0]
	config->transmitter_enable = true;
    32cc:	3001      	adds	r0, #1
    32ce:	5414      	strb	r4, [r2, r0]
	config->clock_polarity_inverted = false;
    32d0:	3001      	adds	r0, #1
    32d2:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    32d4:	3001      	adds	r0, #1
    32d6:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    32d8:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    32da:	3005      	adds	r0, #5
    32dc:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    32de:	3001      	adds	r0, #1
    32e0:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    32e2:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    32e4:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    32e6:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    32e8:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    32ea:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    32ec:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    32ee:	2313      	movs	r3, #19
    32f0:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    32f2:	7751      	strb	r1, [r2, #29]
{
	uint8_t instance_index;

	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate    = 115200;
    32f4:	23e1      	movs	r3, #225	; 0xe1
    32f6:	025b      	lsls	r3, r3, #9
    32f8:	6213      	str	r3, [r2, #32]
	config_usart.mux_setting = EXT2_UART_SERCOM_MUX_SETTING;
    32fa:	23c4      	movs	r3, #196	; 0xc4
    32fc:	039b      	lsls	r3, r3, #14
    32fe:	60d3      	str	r3, [r2, #12]
	config_usart.pinmux_pad0 = EXT2_UART_SERCOM_PINMUX_PAD0;
    3300:	2301      	movs	r3, #1
    3302:	425b      	negs	r3, r3
    3304:	6313      	str	r3, [r2, #48]	; 0x30
	config_usart.pinmux_pad1 = EXT2_UART_SERCOM_PINMUX_PAD1;
    3306:	6353      	str	r3, [r2, #52]	; 0x34
	config_usart.pinmux_pad2 = EXT2_UART_SERCOM_PINMUX_PAD2;
    3308:	4b40      	ldr	r3, [pc, #256]	; (340c <main+0x168>)
    330a:	6393      	str	r3, [r2, #56]	; 0x38
	config_usart.pinmux_pad3 = EXT2_UART_SERCOM_PINMUX_PAD3;
    330c:	4b40      	ldr	r3, [pc, #256]	; (3410 <main+0x16c>)
    330e:	63d3      	str	r3, [r2, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3310:	4d40      	ldr	r5, [pc, #256]	; (3414 <main+0x170>)
    3312:	4b41      	ldr	r3, [pc, #260]	; (3418 <main+0x174>)
    3314:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3316:	4941      	ldr	r1, [pc, #260]	; (341c <main+0x178>)
    3318:	4b41      	ldr	r3, [pc, #260]	; (3420 <main+0x17c>)
    331a:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    331c:	4941      	ldr	r1, [pc, #260]	; (3424 <main+0x180>)
    331e:	4b42      	ldr	r3, [pc, #264]	; (3428 <main+0x184>)
    3320:	6019      	str	r1, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    3322:	4942      	ldr	r1, [pc, #264]	; (342c <main+0x188>)
    3324:	0028      	movs	r0, r5
    3326:	4b42      	ldr	r3, [pc, #264]	; (3430 <main+0x18c>)
    3328:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    332a:	4e42      	ldr	r6, [pc, #264]	; (3434 <main+0x190>)
    332c:	6833      	ldr	r3, [r6, #0]
    332e:	6898      	ldr	r0, [r3, #8]
    3330:	2100      	movs	r1, #0
    3332:	4f41      	ldr	r7, [pc, #260]	; (3438 <main+0x194>)
    3334:	47b8      	blx	r7
	setbuf(stdin, NULL);
    3336:	6833      	ldr	r3, [r6, #0]
    3338:	6858      	ldr	r0, [r3, #4]
    333a:	2100      	movs	r1, #0
    333c:	47b8      	blx	r7
	stdio_serial_init(&usart_instance, EXT2_UART_MODULE, &config_usart);
	
	// Inject our own interrupt handler
	instance_index = _sercom_get_sercom_inst_index(EXT2_UART_MODULE);
    333e:	483b      	ldr	r0, [pc, #236]	; (342c <main+0x188>)
    3340:	4b3e      	ldr	r3, [pc, #248]	; (343c <main+0x198>)
    3342:	4798      	blx	r3
	_sercom_set_handler(instance_index, rx_handler);
    3344:	493e      	ldr	r1, [pc, #248]	; (3440 <main+0x19c>)
    3346:	4b3f      	ldr	r3, [pc, #252]	; (3444 <main+0x1a0>)
    3348:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    334a:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    334c:	0030      	movs	r0, r6
    334e:	4b3e      	ldr	r3, [pc, #248]	; (3448 <main+0x1a4>)
    3350:	4798      	blx	r3
    3352:	231f      	movs	r3, #31
    3354:	4018      	ands	r0, r3
    3356:	4084      	lsls	r4, r0
    3358:	4b3c      	ldr	r3, [pc, #240]	; (344c <main+0x1a8>)
    335a:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    335c:	682b      	ldr	r3, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    335e:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3360:	2a00      	cmp	r2, #0
    3362:	d1fc      	bne.n	335e <main+0xba>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3364:	6832      	ldr	r2, [r6, #0]
    3366:	2302      	movs	r3, #2
    3368:	4313      	orrs	r3, r2
    336a:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    336c:	4b29      	ldr	r3, [pc, #164]	; (3414 <main+0x170>)
    336e:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3370:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3372:	2a00      	cmp	r2, #0
    3374:	d1fc      	bne.n	3370 <main+0xcc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    3376:	685a      	ldr	r2, [r3, #4]
    3378:	2180      	movs	r1, #128	; 0x80
    337a:	0249      	lsls	r1, r1, #9
    337c:	430a      	orrs	r2, r1
    337e:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    3380:	2101      	movs	r1, #1
    3382:	4a24      	ldr	r2, [pc, #144]	; (3414 <main+0x170>)
    3384:	71d1      	strb	r1, [r2, #7]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3386:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3388:	2a00      	cmp	r2, #0
    338a:	d1fc      	bne.n	3386 <main+0xe2>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    338c:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    338e:	2a00      	cmp	r2, #0
    3390:	d1fc      	bne.n	338c <main+0xe8>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    3392:	685a      	ldr	r2, [r3, #4]
    3394:	2180      	movs	r1, #128	; 0x80
    3396:	0289      	lsls	r1, r1, #10
    3398:	430a      	orrs	r2, r1
    339a:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    339c:	2101      	movs	r1, #1
    339e:	4a1d      	ldr	r2, [pc, #116]	; (3414 <main+0x170>)
    33a0:	7191      	strb	r1, [r2, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    33a2:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    33a4:	2a00      	cmp	r2, #0
    33a6:	d1fc      	bne.n	33a2 <main+0xfe>
	usart_enable(&usart_instance);
	usart_enable_transceiver(&usart_instance, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&usart_instance, USART_TRANSCEIVER_RX);

	// ..and the RX Complete interrupt
	((SercomUsart *)EXT2_UART_MODULE)->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    33a8:	3204      	adds	r2, #4
    33aa:	4b20      	ldr	r3, [pc, #128]	; (342c <main+0x188>)
    33ac:	759a      	strb	r2, [r3, #22]
	configure_usart();
	
	
	
	/* Initialize OPAMP2 and ADC */
	configure_opamp2();
    33ae:	4b28      	ldr	r3, [pc, #160]	; (3450 <main+0x1ac>)
    33b0:	4798      	blx	r3
	configure_adc();
    33b2:	4b28      	ldr	r3, [pc, #160]	; (3454 <main+0x1b0>)
    33b4:	4798      	blx	r3
	configure_adc_callbacks();
    33b6:	4b28      	ldr	r3, [pc, #160]	; (3458 <main+0x1b4>)
    33b8:	4798      	blx	r3
	

	
	//display_mutex  = xSemaphoreCreateMutex();
	//terminal_mutex = xSemaphoreCreateMutex();
	terminal_in_queue = xQueueCreate(64, sizeof(uint8_t));
    33ba:	2200      	movs	r2, #0
    33bc:	2101      	movs	r1, #1
    33be:	2040      	movs	r0, #64	; 0x40
    33c0:	4b26      	ldr	r3, [pc, #152]	; (345c <main+0x1b8>)
    33c2:	4798      	blx	r3
    33c4:	4b26      	ldr	r3, [pc, #152]	; (3460 <main+0x1bc>)
    33c6:	6018      	str	r0, [r3, #0]

	xTaskCreate(main_task,
    33c8:	2400      	movs	r4, #0
    33ca:	9403      	str	r4, [sp, #12]
    33cc:	9402      	str	r4, [sp, #8]
    33ce:	9401      	str	r4, [sp, #4]
    33d0:	2302      	movs	r3, #2
    33d2:	9300      	str	r3, [sp, #0]
    33d4:	2300      	movs	r3, #0
    33d6:	2264      	movs	r2, #100	; 0x64
    33d8:	4922      	ldr	r1, [pc, #136]	; (3464 <main+0x1c0>)
    33da:	4823      	ldr	r0, [pc, #140]	; (3468 <main+0x1c4>)
    33dc:	4d23      	ldr	r5, [pc, #140]	; (346c <main+0x1c8>)
    33de:	47a8      	blx	r5
	NULL,
	MAIN_TASK_PRIORITY,
	NULL);


	xTaskCreate(uart_task,
    33e0:	9403      	str	r4, [sp, #12]
    33e2:	9402      	str	r4, [sp, #8]
    33e4:	9401      	str	r4, [sp, #4]
    33e6:	3401      	adds	r4, #1
    33e8:	9400      	str	r4, [sp, #0]
    33ea:	2300      	movs	r3, #0
    33ec:	2264      	movs	r2, #100	; 0x64
    33ee:	4920      	ldr	r1, [pc, #128]	; (3470 <main+0x1cc>)
    33f0:	4820      	ldr	r0, [pc, #128]	; (3474 <main+0x1d0>)
    33f2:	47a8      	blx	r5
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    33f4:	4b20      	ldr	r3, [pc, #128]	; (3478 <main+0x1d4>)
    33f6:	701c      	strb	r4, [r3, #0]
    33f8:	f3bf 8f5f 	dmb	sy
    33fc:	b662      	cpsie	i

	/* Enable global interrupts */
	system_interrupt_enable_global();
	
	// ..and let FreeRTOS run tasks!
	vTaskStartScheduler();
    33fe:	4b1f      	ldr	r3, [pc, #124]	; (347c <main+0x1d8>)
    3400:	4798      	blx	r3
    3402:	e7fe      	b.n	3402 <main+0x15e>
    3404:	000018cd 	.word	0x000018cd
    3408:	00000115 	.word	0x00000115
    340c:	00120002 	.word	0x00120002
    3410:	00130002 	.word	0x00130002
    3414:	20003cf4 	.word	0x20003cf4
    3418:	20003cd0 	.word	0x20003cd0
    341c:	00003195 	.word	0x00003195
    3420:	20003ccc 	.word	0x20003ccc
    3424:	00003169 	.word	0x00003169
    3428:	20003cc8 	.word	0x20003cc8
    342c:	42000400 	.word	0x42000400
    3430:	000005e1 	.word	0x000005e1
    3434:	20000078 	.word	0x20000078
    3438:	000036ef 	.word	0x000036ef
    343c:	00000515 	.word	0x00000515
    3440:	000030f5 	.word	0x000030f5
    3444:	00000c29 	.word	0x00000c29
    3448:	00000c65 	.word	0x00000c65
    344c:	e000e100 	.word	0xe000e100
    3450:	000031ad 	.word	0x000031ad
    3454:	0000321d 	.word	0x0000321d
    3458:	00003281 	.word	0x00003281
    345c:	00001e8d 	.word	0x00001e8d
    3460:	20003cbc 	.word	0x20003cbc
    3464:	00004034 	.word	0x00004034
    3468:	000034b9 	.word	0x000034b9
    346c:	0000237d 	.word	0x0000237d
    3470:	0000403c 	.word	0x0000403c
    3474:	00003015 	.word	0x00003015
    3478:	20000008 	.word	0x20000008
    347c:	00002569 	.word	0x00002569

00003480 <media>:
	}
}


uint16_t media(uint16_t *buffer,uint32_t n_campioni)
{
    3480:	b570      	push	{r4, r5, r6, lr}
	long tmp = 0;
	for(i=0;i<n_campioni;i++)
    3482:	2200      	movs	r2, #0
    3484:	4b0a      	ldr	r3, [pc, #40]	; (34b0 <media+0x30>)
    3486:	601a      	str	r2, [r3, #0]
    3488:	2900      	cmp	r1, #0
    348a:	d00c      	beq.n	34a6 <media+0x26>
    348c:	0003      	movs	r3, r0
    348e:	004d      	lsls	r5, r1, #1
    3490:	1945      	adds	r5, r0, r5
    3492:	2000      	movs	r0, #0
    3494:	4e06      	ldr	r6, [pc, #24]	; (34b0 <media+0x30>)
	{
		tmp += buffer[i];
    3496:	881c      	ldrh	r4, [r3, #0]
    3498:	1900      	adds	r0, r0, r4


uint16_t media(uint16_t *buffer,uint32_t n_campioni)
{
	long tmp = 0;
	for(i=0;i<n_campioni;i++)
    349a:	3201      	adds	r2, #1
    349c:	6032      	str	r2, [r6, #0]
    349e:	3302      	adds	r3, #2
    34a0:	42ab      	cmp	r3, r5
    34a2:	d1f8      	bne.n	3496 <media+0x16>
    34a4:	e000      	b.n	34a8 <media+0x28>
}


uint16_t media(uint16_t *buffer,uint32_t n_campioni)
{
	long tmp = 0;
    34a6:	2000      	movs	r0, #0
	for(i=0;i<n_campioni;i++)
	{
		tmp += buffer[i];
	}
	return (uint16_t)(tmp/n_campioni);
    34a8:	4b02      	ldr	r3, [pc, #8]	; (34b4 <media+0x34>)
    34aa:	4798      	blx	r3
    34ac:	b280      	uxth	r0, r0
}
    34ae:	bd70      	pop	{r4, r5, r6, pc}
    34b0:	20003cb4 	.word	0x20003cb4
    34b4:	00003511 	.word	0x00003511

000034b8 <main_task>:
	} while (true);
	
}

static void main_task(void *params)
{
    34b8:	b570      	push	{r4, r5, r6, lr}

	for(;;) {
		
		/* Start ADC conversion */
		adc_read_buffer_job(&adc_instance, adc_result_buffer, n_sample);
    34ba:	4e0d      	ldr	r6, [pc, #52]	; (34f0 <main_task+0x38>)
    34bc:	4d0d      	ldr	r5, [pc, #52]	; (34f4 <main_task+0x3c>)
    34be:	4c0e      	ldr	r4, [pc, #56]	; (34f8 <main_task+0x40>)
    34c0:	8832      	ldrh	r2, [r6, #0]
    34c2:	0029      	movs	r1, r5
    34c4:	0020      	movs	r0, r4
    34c6:	4b0d      	ldr	r3, [pc, #52]	; (34fc <main_task+0x44>)
    34c8:	4798      	blx	r3
		
		if (adc_read_done == true) {
    34ca:	4b0d      	ldr	r3, [pc, #52]	; (3500 <main_task+0x48>)
    34cc:	781b      	ldrb	r3, [r3, #0]
    34ce:	2b00      	cmp	r3, #0
    34d0:	d009      	beq.n	34e6 <main_task+0x2e>
			
			adc_read_done = false;
    34d2:	2200      	movs	r2, #0
    34d4:	4b0a      	ldr	r3, [pc, #40]	; (3500 <main_task+0x48>)
    34d6:	701a      	strb	r2, [r3, #0]
			
			result = media(adc_result_buffer,n_sample);
    34d8:	4b05      	ldr	r3, [pc, #20]	; (34f0 <main_task+0x38>)
    34da:	6819      	ldr	r1, [r3, #0]
    34dc:	4805      	ldr	r0, [pc, #20]	; (34f4 <main_task+0x3c>)
    34de:	4b09      	ldr	r3, [pc, #36]	; (3504 <main_task+0x4c>)
    34e0:	4798      	blx	r3
    34e2:	4b09      	ldr	r3, [pc, #36]	; (3508 <main_task+0x50>)
    34e4:	8018      	strh	r0, [r3, #0]
		//{
			//usart_write_buffer_wait(&usart_instance,&result,2);
			//usart_write_buffer_wait(&usart_instance,&adc_result_buffer[0],2);
			//flag = false;
		//}
		vTaskDelay(MAIN_TASK_DELAY);
    34e6:	2032      	movs	r0, #50	; 0x32
    34e8:	4b08      	ldr	r3, [pc, #32]	; (350c <main_task+0x54>)
    34ea:	4798      	blx	r3
	}
    34ec:	e7e8      	b.n	34c0 <main_task+0x8>
    34ee:	46c0      	nop			; (mov r8, r8)
    34f0:	20000014 	.word	0x20000014
    34f4:	20003d4c 	.word	0x20003d4c
    34f8:	20003f50 	.word	0x20003f50
    34fc:	00001285 	.word	0x00001285
    3500:	20003cac 	.word	0x20003cac
    3504:	00003481 	.word	0x00003481
    3508:	20003cb8 	.word	0x20003cb8
    350c:	00002815 	.word	0x00002815

00003510 <__aeabi_uidiv>:
    3510:	2200      	movs	r2, #0
    3512:	0843      	lsrs	r3, r0, #1
    3514:	428b      	cmp	r3, r1
    3516:	d374      	bcc.n	3602 <__aeabi_uidiv+0xf2>
    3518:	0903      	lsrs	r3, r0, #4
    351a:	428b      	cmp	r3, r1
    351c:	d35f      	bcc.n	35de <__aeabi_uidiv+0xce>
    351e:	0a03      	lsrs	r3, r0, #8
    3520:	428b      	cmp	r3, r1
    3522:	d344      	bcc.n	35ae <__aeabi_uidiv+0x9e>
    3524:	0b03      	lsrs	r3, r0, #12
    3526:	428b      	cmp	r3, r1
    3528:	d328      	bcc.n	357c <__aeabi_uidiv+0x6c>
    352a:	0c03      	lsrs	r3, r0, #16
    352c:	428b      	cmp	r3, r1
    352e:	d30d      	bcc.n	354c <__aeabi_uidiv+0x3c>
    3530:	22ff      	movs	r2, #255	; 0xff
    3532:	0209      	lsls	r1, r1, #8
    3534:	ba12      	rev	r2, r2
    3536:	0c03      	lsrs	r3, r0, #16
    3538:	428b      	cmp	r3, r1
    353a:	d302      	bcc.n	3542 <__aeabi_uidiv+0x32>
    353c:	1212      	asrs	r2, r2, #8
    353e:	0209      	lsls	r1, r1, #8
    3540:	d065      	beq.n	360e <__aeabi_uidiv+0xfe>
    3542:	0b03      	lsrs	r3, r0, #12
    3544:	428b      	cmp	r3, r1
    3546:	d319      	bcc.n	357c <__aeabi_uidiv+0x6c>
    3548:	e000      	b.n	354c <__aeabi_uidiv+0x3c>
    354a:	0a09      	lsrs	r1, r1, #8
    354c:	0bc3      	lsrs	r3, r0, #15
    354e:	428b      	cmp	r3, r1
    3550:	d301      	bcc.n	3556 <__aeabi_uidiv+0x46>
    3552:	03cb      	lsls	r3, r1, #15
    3554:	1ac0      	subs	r0, r0, r3
    3556:	4152      	adcs	r2, r2
    3558:	0b83      	lsrs	r3, r0, #14
    355a:	428b      	cmp	r3, r1
    355c:	d301      	bcc.n	3562 <__aeabi_uidiv+0x52>
    355e:	038b      	lsls	r3, r1, #14
    3560:	1ac0      	subs	r0, r0, r3
    3562:	4152      	adcs	r2, r2
    3564:	0b43      	lsrs	r3, r0, #13
    3566:	428b      	cmp	r3, r1
    3568:	d301      	bcc.n	356e <__aeabi_uidiv+0x5e>
    356a:	034b      	lsls	r3, r1, #13
    356c:	1ac0      	subs	r0, r0, r3
    356e:	4152      	adcs	r2, r2
    3570:	0b03      	lsrs	r3, r0, #12
    3572:	428b      	cmp	r3, r1
    3574:	d301      	bcc.n	357a <__aeabi_uidiv+0x6a>
    3576:	030b      	lsls	r3, r1, #12
    3578:	1ac0      	subs	r0, r0, r3
    357a:	4152      	adcs	r2, r2
    357c:	0ac3      	lsrs	r3, r0, #11
    357e:	428b      	cmp	r3, r1
    3580:	d301      	bcc.n	3586 <__aeabi_uidiv+0x76>
    3582:	02cb      	lsls	r3, r1, #11
    3584:	1ac0      	subs	r0, r0, r3
    3586:	4152      	adcs	r2, r2
    3588:	0a83      	lsrs	r3, r0, #10
    358a:	428b      	cmp	r3, r1
    358c:	d301      	bcc.n	3592 <__aeabi_uidiv+0x82>
    358e:	028b      	lsls	r3, r1, #10
    3590:	1ac0      	subs	r0, r0, r3
    3592:	4152      	adcs	r2, r2
    3594:	0a43      	lsrs	r3, r0, #9
    3596:	428b      	cmp	r3, r1
    3598:	d301      	bcc.n	359e <__aeabi_uidiv+0x8e>
    359a:	024b      	lsls	r3, r1, #9
    359c:	1ac0      	subs	r0, r0, r3
    359e:	4152      	adcs	r2, r2
    35a0:	0a03      	lsrs	r3, r0, #8
    35a2:	428b      	cmp	r3, r1
    35a4:	d301      	bcc.n	35aa <__aeabi_uidiv+0x9a>
    35a6:	020b      	lsls	r3, r1, #8
    35a8:	1ac0      	subs	r0, r0, r3
    35aa:	4152      	adcs	r2, r2
    35ac:	d2cd      	bcs.n	354a <__aeabi_uidiv+0x3a>
    35ae:	09c3      	lsrs	r3, r0, #7
    35b0:	428b      	cmp	r3, r1
    35b2:	d301      	bcc.n	35b8 <__aeabi_uidiv+0xa8>
    35b4:	01cb      	lsls	r3, r1, #7
    35b6:	1ac0      	subs	r0, r0, r3
    35b8:	4152      	adcs	r2, r2
    35ba:	0983      	lsrs	r3, r0, #6
    35bc:	428b      	cmp	r3, r1
    35be:	d301      	bcc.n	35c4 <__aeabi_uidiv+0xb4>
    35c0:	018b      	lsls	r3, r1, #6
    35c2:	1ac0      	subs	r0, r0, r3
    35c4:	4152      	adcs	r2, r2
    35c6:	0943      	lsrs	r3, r0, #5
    35c8:	428b      	cmp	r3, r1
    35ca:	d301      	bcc.n	35d0 <__aeabi_uidiv+0xc0>
    35cc:	014b      	lsls	r3, r1, #5
    35ce:	1ac0      	subs	r0, r0, r3
    35d0:	4152      	adcs	r2, r2
    35d2:	0903      	lsrs	r3, r0, #4
    35d4:	428b      	cmp	r3, r1
    35d6:	d301      	bcc.n	35dc <__aeabi_uidiv+0xcc>
    35d8:	010b      	lsls	r3, r1, #4
    35da:	1ac0      	subs	r0, r0, r3
    35dc:	4152      	adcs	r2, r2
    35de:	08c3      	lsrs	r3, r0, #3
    35e0:	428b      	cmp	r3, r1
    35e2:	d301      	bcc.n	35e8 <__aeabi_uidiv+0xd8>
    35e4:	00cb      	lsls	r3, r1, #3
    35e6:	1ac0      	subs	r0, r0, r3
    35e8:	4152      	adcs	r2, r2
    35ea:	0883      	lsrs	r3, r0, #2
    35ec:	428b      	cmp	r3, r1
    35ee:	d301      	bcc.n	35f4 <__aeabi_uidiv+0xe4>
    35f0:	008b      	lsls	r3, r1, #2
    35f2:	1ac0      	subs	r0, r0, r3
    35f4:	4152      	adcs	r2, r2
    35f6:	0843      	lsrs	r3, r0, #1
    35f8:	428b      	cmp	r3, r1
    35fa:	d301      	bcc.n	3600 <__aeabi_uidiv+0xf0>
    35fc:	004b      	lsls	r3, r1, #1
    35fe:	1ac0      	subs	r0, r0, r3
    3600:	4152      	adcs	r2, r2
    3602:	1a41      	subs	r1, r0, r1
    3604:	d200      	bcs.n	3608 <__aeabi_uidiv+0xf8>
    3606:	4601      	mov	r1, r0
    3608:	4152      	adcs	r2, r2
    360a:	4610      	mov	r0, r2
    360c:	4770      	bx	lr
    360e:	e7ff      	b.n	3610 <__aeabi_uidiv+0x100>
    3610:	b501      	push	{r0, lr}
    3612:	2000      	movs	r0, #0
    3614:	f000 f806 	bl	3624 <__aeabi_idiv0>
    3618:	bd02      	pop	{r1, pc}
    361a:	46c0      	nop			; (mov r8, r8)

0000361c <__aeabi_uidivmod>:
    361c:	2900      	cmp	r1, #0
    361e:	d0f7      	beq.n	3610 <__aeabi_uidiv+0x100>
    3620:	e776      	b.n	3510 <__aeabi_uidiv>
    3622:	4770      	bx	lr

00003624 <__aeabi_idiv0>:
    3624:	4770      	bx	lr
    3626:	46c0      	nop			; (mov r8, r8)

00003628 <__aeabi_lmul>:
    3628:	b5f0      	push	{r4, r5, r6, r7, lr}
    362a:	464f      	mov	r7, r9
    362c:	4646      	mov	r6, r8
    362e:	b4c0      	push	{r6, r7}
    3630:	0416      	lsls	r6, r2, #16
    3632:	0c36      	lsrs	r6, r6, #16
    3634:	4699      	mov	r9, r3
    3636:	0033      	movs	r3, r6
    3638:	0405      	lsls	r5, r0, #16
    363a:	0c2c      	lsrs	r4, r5, #16
    363c:	0c07      	lsrs	r7, r0, #16
    363e:	0c15      	lsrs	r5, r2, #16
    3640:	4363      	muls	r3, r4
    3642:	437e      	muls	r6, r7
    3644:	436f      	muls	r7, r5
    3646:	4365      	muls	r5, r4
    3648:	0c1c      	lsrs	r4, r3, #16
    364a:	19ad      	adds	r5, r5, r6
    364c:	1964      	adds	r4, r4, r5
    364e:	469c      	mov	ip, r3
    3650:	42a6      	cmp	r6, r4
    3652:	d903      	bls.n	365c <__aeabi_lmul+0x34>
    3654:	2380      	movs	r3, #128	; 0x80
    3656:	025b      	lsls	r3, r3, #9
    3658:	4698      	mov	r8, r3
    365a:	4447      	add	r7, r8
    365c:	4663      	mov	r3, ip
    365e:	0c25      	lsrs	r5, r4, #16
    3660:	19ef      	adds	r7, r5, r7
    3662:	041d      	lsls	r5, r3, #16
    3664:	464b      	mov	r3, r9
    3666:	434a      	muls	r2, r1
    3668:	4343      	muls	r3, r0
    366a:	0c2d      	lsrs	r5, r5, #16
    366c:	0424      	lsls	r4, r4, #16
    366e:	1964      	adds	r4, r4, r5
    3670:	1899      	adds	r1, r3, r2
    3672:	19c9      	adds	r1, r1, r7
    3674:	0020      	movs	r0, r4
    3676:	bc0c      	pop	{r2, r3}
    3678:	4690      	mov	r8, r2
    367a:	4699      	mov	r9, r3
    367c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    367e:	46c0      	nop			; (mov r8, r8)

00003680 <__libc_init_array>:
    3680:	4b0e      	ldr	r3, [pc, #56]	; (36bc <__libc_init_array+0x3c>)
    3682:	b570      	push	{r4, r5, r6, lr}
    3684:	2500      	movs	r5, #0
    3686:	001e      	movs	r6, r3
    3688:	4c0d      	ldr	r4, [pc, #52]	; (36c0 <__libc_init_array+0x40>)
    368a:	1ae4      	subs	r4, r4, r3
    368c:	10a4      	asrs	r4, r4, #2
    368e:	42a5      	cmp	r5, r4
    3690:	d004      	beq.n	369c <__libc_init_array+0x1c>
    3692:	00ab      	lsls	r3, r5, #2
    3694:	58f3      	ldr	r3, [r6, r3]
    3696:	4798      	blx	r3
    3698:	3501      	adds	r5, #1
    369a:	e7f8      	b.n	368e <__libc_init_array+0xe>
    369c:	f000 fd06 	bl	40ac <_init>
    36a0:	4b08      	ldr	r3, [pc, #32]	; (36c4 <__libc_init_array+0x44>)
    36a2:	2500      	movs	r5, #0
    36a4:	001e      	movs	r6, r3
    36a6:	4c08      	ldr	r4, [pc, #32]	; (36c8 <__libc_init_array+0x48>)
    36a8:	1ae4      	subs	r4, r4, r3
    36aa:	10a4      	asrs	r4, r4, #2
    36ac:	42a5      	cmp	r5, r4
    36ae:	d004      	beq.n	36ba <__libc_init_array+0x3a>
    36b0:	00ab      	lsls	r3, r5, #2
    36b2:	58f3      	ldr	r3, [r6, r3]
    36b4:	4798      	blx	r3
    36b6:	3501      	adds	r5, #1
    36b8:	e7f8      	b.n	36ac <__libc_init_array+0x2c>
    36ba:	bd70      	pop	{r4, r5, r6, pc}
    36bc:	000040b8 	.word	0x000040b8
    36c0:	000040b8 	.word	0x000040b8
    36c4:	000040b8 	.word	0x000040b8
    36c8:	000040bc 	.word	0x000040bc

000036cc <memcpy>:
    36cc:	2300      	movs	r3, #0
    36ce:	b510      	push	{r4, lr}
    36d0:	429a      	cmp	r2, r3
    36d2:	d003      	beq.n	36dc <memcpy+0x10>
    36d4:	5ccc      	ldrb	r4, [r1, r3]
    36d6:	54c4      	strb	r4, [r0, r3]
    36d8:	3301      	adds	r3, #1
    36da:	e7f9      	b.n	36d0 <memcpy+0x4>
    36dc:	bd10      	pop	{r4, pc}

000036de <memset>:
    36de:	0003      	movs	r3, r0
    36e0:	1882      	adds	r2, r0, r2
    36e2:	4293      	cmp	r3, r2
    36e4:	d002      	beq.n	36ec <memset+0xe>
    36e6:	7019      	strb	r1, [r3, #0]
    36e8:	3301      	adds	r3, #1
    36ea:	e7fa      	b.n	36e2 <memset+0x4>
    36ec:	4770      	bx	lr

000036ee <setbuf>:
    36ee:	424a      	negs	r2, r1
    36f0:	414a      	adcs	r2, r1
    36f2:	2380      	movs	r3, #128	; 0x80
    36f4:	b510      	push	{r4, lr}
    36f6:	0052      	lsls	r2, r2, #1
    36f8:	00db      	lsls	r3, r3, #3
    36fa:	f000 f801 	bl	3700 <setvbuf>
    36fe:	bd10      	pop	{r4, pc}

00003700 <setvbuf>:
    3700:	b5f0      	push	{r4, r5, r6, r7, lr}
    3702:	001d      	movs	r5, r3
    3704:	4b51      	ldr	r3, [pc, #324]	; (384c <setvbuf+0x14c>)
    3706:	b085      	sub	sp, #20
    3708:	681e      	ldr	r6, [r3, #0]
    370a:	0004      	movs	r4, r0
    370c:	000f      	movs	r7, r1
    370e:	9200      	str	r2, [sp, #0]
    3710:	2e00      	cmp	r6, #0
    3712:	d005      	beq.n	3720 <setvbuf+0x20>
    3714:	69b3      	ldr	r3, [r6, #24]
    3716:	2b00      	cmp	r3, #0
    3718:	d102      	bne.n	3720 <setvbuf+0x20>
    371a:	0030      	movs	r0, r6
    371c:	f000 f994 	bl	3a48 <__sinit>
    3720:	4b4b      	ldr	r3, [pc, #300]	; (3850 <setvbuf+0x150>)
    3722:	429c      	cmp	r4, r3
    3724:	d101      	bne.n	372a <setvbuf+0x2a>
    3726:	6874      	ldr	r4, [r6, #4]
    3728:	e008      	b.n	373c <setvbuf+0x3c>
    372a:	4b4a      	ldr	r3, [pc, #296]	; (3854 <setvbuf+0x154>)
    372c:	429c      	cmp	r4, r3
    372e:	d101      	bne.n	3734 <setvbuf+0x34>
    3730:	68b4      	ldr	r4, [r6, #8]
    3732:	e003      	b.n	373c <setvbuf+0x3c>
    3734:	4b48      	ldr	r3, [pc, #288]	; (3858 <setvbuf+0x158>)
    3736:	429c      	cmp	r4, r3
    3738:	d100      	bne.n	373c <setvbuf+0x3c>
    373a:	68f4      	ldr	r4, [r6, #12]
    373c:	9b00      	ldr	r3, [sp, #0]
    373e:	2b02      	cmp	r3, #2
    3740:	d005      	beq.n	374e <setvbuf+0x4e>
    3742:	2b01      	cmp	r3, #1
    3744:	d900      	bls.n	3748 <setvbuf+0x48>
    3746:	e07c      	b.n	3842 <setvbuf+0x142>
    3748:	2d00      	cmp	r5, #0
    374a:	da00      	bge.n	374e <setvbuf+0x4e>
    374c:	e079      	b.n	3842 <setvbuf+0x142>
    374e:	0021      	movs	r1, r4
    3750:	0030      	movs	r0, r6
    3752:	f000 f90b 	bl	396c <_fflush_r>
    3756:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3758:	2900      	cmp	r1, #0
    375a:	d008      	beq.n	376e <setvbuf+0x6e>
    375c:	0023      	movs	r3, r4
    375e:	3344      	adds	r3, #68	; 0x44
    3760:	4299      	cmp	r1, r3
    3762:	d002      	beq.n	376a <setvbuf+0x6a>
    3764:	0030      	movs	r0, r6
    3766:	f000 fa33 	bl	3bd0 <_free_r>
    376a:	2300      	movs	r3, #0
    376c:	6363      	str	r3, [r4, #52]	; 0x34
    376e:	2300      	movs	r3, #0
    3770:	61a3      	str	r3, [r4, #24]
    3772:	6063      	str	r3, [r4, #4]
    3774:	89a3      	ldrh	r3, [r4, #12]
    3776:	061b      	lsls	r3, r3, #24
    3778:	d503      	bpl.n	3782 <setvbuf+0x82>
    377a:	6921      	ldr	r1, [r4, #16]
    377c:	0030      	movs	r0, r6
    377e:	f000 fa27 	bl	3bd0 <_free_r>
    3782:	89a2      	ldrh	r2, [r4, #12]
    3784:	4b35      	ldr	r3, [pc, #212]	; (385c <setvbuf+0x15c>)
    3786:	4013      	ands	r3, r2
    3788:	81a3      	strh	r3, [r4, #12]
    378a:	9b00      	ldr	r3, [sp, #0]
    378c:	2b02      	cmp	r3, #2
    378e:	d021      	beq.n	37d4 <setvbuf+0xd4>
    3790:	ab03      	add	r3, sp, #12
    3792:	aa02      	add	r2, sp, #8
    3794:	0021      	movs	r1, r4
    3796:	0030      	movs	r0, r6
    3798:	f000 f9ea 	bl	3b70 <__swhatbuf_r>
    379c:	89a3      	ldrh	r3, [r4, #12]
    379e:	4318      	orrs	r0, r3
    37a0:	81a0      	strh	r0, [r4, #12]
    37a2:	2d00      	cmp	r5, #0
    37a4:	d101      	bne.n	37aa <setvbuf+0xaa>
    37a6:	9d02      	ldr	r5, [sp, #8]
    37a8:	e001      	b.n	37ae <setvbuf+0xae>
    37aa:	2f00      	cmp	r7, #0
    37ac:	d125      	bne.n	37fa <setvbuf+0xfa>
    37ae:	0028      	movs	r0, r5
    37b0:	f000 fa04 	bl	3bbc <malloc>
    37b4:	9501      	str	r5, [sp, #4]
    37b6:	1e07      	subs	r7, r0, #0
    37b8:	d11a      	bne.n	37f0 <setvbuf+0xf0>
    37ba:	9b02      	ldr	r3, [sp, #8]
    37bc:	9301      	str	r3, [sp, #4]
    37be:	42ab      	cmp	r3, r5
    37c0:	d102      	bne.n	37c8 <setvbuf+0xc8>
    37c2:	2001      	movs	r0, #1
    37c4:	4240      	negs	r0, r0
    37c6:	e006      	b.n	37d6 <setvbuf+0xd6>
    37c8:	9801      	ldr	r0, [sp, #4]
    37ca:	f000 f9f7 	bl	3bbc <malloc>
    37ce:	1e07      	subs	r7, r0, #0
    37d0:	d10e      	bne.n	37f0 <setvbuf+0xf0>
    37d2:	e7f6      	b.n	37c2 <setvbuf+0xc2>
    37d4:	2000      	movs	r0, #0
    37d6:	2202      	movs	r2, #2
    37d8:	89a3      	ldrh	r3, [r4, #12]
    37da:	4313      	orrs	r3, r2
    37dc:	81a3      	strh	r3, [r4, #12]
    37de:	2300      	movs	r3, #0
    37e0:	60a3      	str	r3, [r4, #8]
    37e2:	0023      	movs	r3, r4
    37e4:	3347      	adds	r3, #71	; 0x47
    37e6:	6023      	str	r3, [r4, #0]
    37e8:	6123      	str	r3, [r4, #16]
    37ea:	2301      	movs	r3, #1
    37ec:	6163      	str	r3, [r4, #20]
    37ee:	e02a      	b.n	3846 <setvbuf+0x146>
    37f0:	2280      	movs	r2, #128	; 0x80
    37f2:	89a3      	ldrh	r3, [r4, #12]
    37f4:	9d01      	ldr	r5, [sp, #4]
    37f6:	4313      	orrs	r3, r2
    37f8:	81a3      	strh	r3, [r4, #12]
    37fa:	69b3      	ldr	r3, [r6, #24]
    37fc:	2b00      	cmp	r3, #0
    37fe:	d102      	bne.n	3806 <setvbuf+0x106>
    3800:	0030      	movs	r0, r6
    3802:	f000 f921 	bl	3a48 <__sinit>
    3806:	9b00      	ldr	r3, [sp, #0]
    3808:	2b01      	cmp	r3, #1
    380a:	d103      	bne.n	3814 <setvbuf+0x114>
    380c:	89a3      	ldrh	r3, [r4, #12]
    380e:	9a00      	ldr	r2, [sp, #0]
    3810:	431a      	orrs	r2, r3
    3812:	81a2      	strh	r2, [r4, #12]
    3814:	2308      	movs	r3, #8
    3816:	89a2      	ldrh	r2, [r4, #12]
    3818:	6027      	str	r7, [r4, #0]
    381a:	4013      	ands	r3, r2
    381c:	6127      	str	r7, [r4, #16]
    381e:	6165      	str	r5, [r4, #20]
    3820:	1e18      	subs	r0, r3, #0
    3822:	d00c      	beq.n	383e <setvbuf+0x13e>
    3824:	2301      	movs	r3, #1
    3826:	401a      	ands	r2, r3
    3828:	2300      	movs	r3, #0
    382a:	1e10      	subs	r0, r2, #0
    382c:	4298      	cmp	r0, r3
    382e:	d004      	beq.n	383a <setvbuf+0x13a>
    3830:	426d      	negs	r5, r5
    3832:	60a3      	str	r3, [r4, #8]
    3834:	61a5      	str	r5, [r4, #24]
    3836:	0018      	movs	r0, r3
    3838:	e005      	b.n	3846 <setvbuf+0x146>
    383a:	60a5      	str	r5, [r4, #8]
    383c:	e003      	b.n	3846 <setvbuf+0x146>
    383e:	60a3      	str	r3, [r4, #8]
    3840:	e001      	b.n	3846 <setvbuf+0x146>
    3842:	2001      	movs	r0, #1
    3844:	4240      	negs	r0, r0
    3846:	b005      	add	sp, #20
    3848:	bdf0      	pop	{r4, r5, r6, r7, pc}
    384a:	46c0      	nop			; (mov r8, r8)
    384c:	20000078 	.word	0x20000078
    3850:	0000404c 	.word	0x0000404c
    3854:	0000406c 	.word	0x0000406c
    3858:	0000408c 	.word	0x0000408c
    385c:	fffff35c 	.word	0xfffff35c

00003860 <__sflush_r>:
    3860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3862:	898a      	ldrh	r2, [r1, #12]
    3864:	0005      	movs	r5, r0
    3866:	000c      	movs	r4, r1
    3868:	0713      	lsls	r3, r2, #28
    386a:	d45a      	bmi.n	3922 <__sflush_r+0xc2>
    386c:	684b      	ldr	r3, [r1, #4]
    386e:	2b00      	cmp	r3, #0
    3870:	dc02      	bgt.n	3878 <__sflush_r+0x18>
    3872:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3874:	2b00      	cmp	r3, #0
    3876:	dd19      	ble.n	38ac <__sflush_r+0x4c>
    3878:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    387a:	2f00      	cmp	r7, #0
    387c:	d016      	beq.n	38ac <__sflush_r+0x4c>
    387e:	2300      	movs	r3, #0
    3880:	682e      	ldr	r6, [r5, #0]
    3882:	602b      	str	r3, [r5, #0]
    3884:	2380      	movs	r3, #128	; 0x80
    3886:	015b      	lsls	r3, r3, #5
    3888:	401a      	ands	r2, r3
    388a:	d001      	beq.n	3890 <__sflush_r+0x30>
    388c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    388e:	e014      	b.n	38ba <__sflush_r+0x5a>
    3890:	2301      	movs	r3, #1
    3892:	6a21      	ldr	r1, [r4, #32]
    3894:	0028      	movs	r0, r5
    3896:	47b8      	blx	r7
    3898:	1c43      	adds	r3, r0, #1
    389a:	d10e      	bne.n	38ba <__sflush_r+0x5a>
    389c:	682b      	ldr	r3, [r5, #0]
    389e:	2b00      	cmp	r3, #0
    38a0:	d00b      	beq.n	38ba <__sflush_r+0x5a>
    38a2:	2b1d      	cmp	r3, #29
    38a4:	d001      	beq.n	38aa <__sflush_r+0x4a>
    38a6:	2b16      	cmp	r3, #22
    38a8:	d102      	bne.n	38b0 <__sflush_r+0x50>
    38aa:	602e      	str	r6, [r5, #0]
    38ac:	2000      	movs	r0, #0
    38ae:	e05a      	b.n	3966 <__sflush_r+0x106>
    38b0:	2240      	movs	r2, #64	; 0x40
    38b2:	89a3      	ldrh	r3, [r4, #12]
    38b4:	4313      	orrs	r3, r2
    38b6:	81a3      	strh	r3, [r4, #12]
    38b8:	e055      	b.n	3966 <__sflush_r+0x106>
    38ba:	89a3      	ldrh	r3, [r4, #12]
    38bc:	075b      	lsls	r3, r3, #29
    38be:	d506      	bpl.n	38ce <__sflush_r+0x6e>
    38c0:	6863      	ldr	r3, [r4, #4]
    38c2:	1ac0      	subs	r0, r0, r3
    38c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    38c6:	2b00      	cmp	r3, #0
    38c8:	d001      	beq.n	38ce <__sflush_r+0x6e>
    38ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
    38cc:	1ac0      	subs	r0, r0, r3
    38ce:	2300      	movs	r3, #0
    38d0:	0002      	movs	r2, r0
    38d2:	6a21      	ldr	r1, [r4, #32]
    38d4:	0028      	movs	r0, r5
    38d6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    38d8:	47b8      	blx	r7
    38da:	89a3      	ldrh	r3, [r4, #12]
    38dc:	1c42      	adds	r2, r0, #1
    38de:	d106      	bne.n	38ee <__sflush_r+0x8e>
    38e0:	6829      	ldr	r1, [r5, #0]
    38e2:	291d      	cmp	r1, #29
    38e4:	d83a      	bhi.n	395c <__sflush_r+0xfc>
    38e6:	4a20      	ldr	r2, [pc, #128]	; (3968 <__sflush_r+0x108>)
    38e8:	40ca      	lsrs	r2, r1
    38ea:	07d2      	lsls	r2, r2, #31
    38ec:	d536      	bpl.n	395c <__sflush_r+0xfc>
    38ee:	2200      	movs	r2, #0
    38f0:	6062      	str	r2, [r4, #4]
    38f2:	6922      	ldr	r2, [r4, #16]
    38f4:	6022      	str	r2, [r4, #0]
    38f6:	04db      	lsls	r3, r3, #19
    38f8:	d505      	bpl.n	3906 <__sflush_r+0xa6>
    38fa:	1c43      	adds	r3, r0, #1
    38fc:	d102      	bne.n	3904 <__sflush_r+0xa4>
    38fe:	682b      	ldr	r3, [r5, #0]
    3900:	2b00      	cmp	r3, #0
    3902:	d100      	bne.n	3906 <__sflush_r+0xa6>
    3904:	6560      	str	r0, [r4, #84]	; 0x54
    3906:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3908:	602e      	str	r6, [r5, #0]
    390a:	2900      	cmp	r1, #0
    390c:	d0ce      	beq.n	38ac <__sflush_r+0x4c>
    390e:	0023      	movs	r3, r4
    3910:	3344      	adds	r3, #68	; 0x44
    3912:	4299      	cmp	r1, r3
    3914:	d002      	beq.n	391c <__sflush_r+0xbc>
    3916:	0028      	movs	r0, r5
    3918:	f000 f95a 	bl	3bd0 <_free_r>
    391c:	2000      	movs	r0, #0
    391e:	6360      	str	r0, [r4, #52]	; 0x34
    3920:	e021      	b.n	3966 <__sflush_r+0x106>
    3922:	690f      	ldr	r7, [r1, #16]
    3924:	2f00      	cmp	r7, #0
    3926:	d0c1      	beq.n	38ac <__sflush_r+0x4c>
    3928:	680b      	ldr	r3, [r1, #0]
    392a:	600f      	str	r7, [r1, #0]
    392c:	1bdb      	subs	r3, r3, r7
    392e:	9301      	str	r3, [sp, #4]
    3930:	2300      	movs	r3, #0
    3932:	0792      	lsls	r2, r2, #30
    3934:	d100      	bne.n	3938 <__sflush_r+0xd8>
    3936:	694b      	ldr	r3, [r1, #20]
    3938:	60a3      	str	r3, [r4, #8]
    393a:	e003      	b.n	3944 <__sflush_r+0xe4>
    393c:	9b01      	ldr	r3, [sp, #4]
    393e:	183f      	adds	r7, r7, r0
    3940:	1a1b      	subs	r3, r3, r0
    3942:	9301      	str	r3, [sp, #4]
    3944:	9b01      	ldr	r3, [sp, #4]
    3946:	2b00      	cmp	r3, #0
    3948:	ddb0      	ble.n	38ac <__sflush_r+0x4c>
    394a:	9b01      	ldr	r3, [sp, #4]
    394c:	003a      	movs	r2, r7
    394e:	6a21      	ldr	r1, [r4, #32]
    3950:	0028      	movs	r0, r5
    3952:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3954:	47b0      	blx	r6
    3956:	2800      	cmp	r0, #0
    3958:	dcf0      	bgt.n	393c <__sflush_r+0xdc>
    395a:	89a3      	ldrh	r3, [r4, #12]
    395c:	2240      	movs	r2, #64	; 0x40
    395e:	2001      	movs	r0, #1
    3960:	4313      	orrs	r3, r2
    3962:	81a3      	strh	r3, [r4, #12]
    3964:	4240      	negs	r0, r0
    3966:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3968:	20400001 	.word	0x20400001

0000396c <_fflush_r>:
    396c:	690b      	ldr	r3, [r1, #16]
    396e:	b570      	push	{r4, r5, r6, lr}
    3970:	0005      	movs	r5, r0
    3972:	000c      	movs	r4, r1
    3974:	2b00      	cmp	r3, #0
    3976:	d101      	bne.n	397c <_fflush_r+0x10>
    3978:	2000      	movs	r0, #0
    397a:	e01c      	b.n	39b6 <_fflush_r+0x4a>
    397c:	2800      	cmp	r0, #0
    397e:	d004      	beq.n	398a <_fflush_r+0x1e>
    3980:	6983      	ldr	r3, [r0, #24]
    3982:	2b00      	cmp	r3, #0
    3984:	d101      	bne.n	398a <_fflush_r+0x1e>
    3986:	f000 f85f 	bl	3a48 <__sinit>
    398a:	4b0b      	ldr	r3, [pc, #44]	; (39b8 <_fflush_r+0x4c>)
    398c:	429c      	cmp	r4, r3
    398e:	d101      	bne.n	3994 <_fflush_r+0x28>
    3990:	686c      	ldr	r4, [r5, #4]
    3992:	e008      	b.n	39a6 <_fflush_r+0x3a>
    3994:	4b09      	ldr	r3, [pc, #36]	; (39bc <_fflush_r+0x50>)
    3996:	429c      	cmp	r4, r3
    3998:	d101      	bne.n	399e <_fflush_r+0x32>
    399a:	68ac      	ldr	r4, [r5, #8]
    399c:	e003      	b.n	39a6 <_fflush_r+0x3a>
    399e:	4b08      	ldr	r3, [pc, #32]	; (39c0 <_fflush_r+0x54>)
    39a0:	429c      	cmp	r4, r3
    39a2:	d100      	bne.n	39a6 <_fflush_r+0x3a>
    39a4:	68ec      	ldr	r4, [r5, #12]
    39a6:	220c      	movs	r2, #12
    39a8:	5ea3      	ldrsh	r3, [r4, r2]
    39aa:	2b00      	cmp	r3, #0
    39ac:	d0e4      	beq.n	3978 <_fflush_r+0xc>
    39ae:	0021      	movs	r1, r4
    39b0:	0028      	movs	r0, r5
    39b2:	f7ff ff55 	bl	3860 <__sflush_r>
    39b6:	bd70      	pop	{r4, r5, r6, pc}
    39b8:	0000404c 	.word	0x0000404c
    39bc:	0000406c 	.word	0x0000406c
    39c0:	0000408c 	.word	0x0000408c

000039c4 <_cleanup_r>:
    39c4:	b510      	push	{r4, lr}
    39c6:	4902      	ldr	r1, [pc, #8]	; (39d0 <_cleanup_r+0xc>)
    39c8:	f000 f8b0 	bl	3b2c <_fwalk_reent>
    39cc:	bd10      	pop	{r4, pc}
    39ce:	46c0      	nop			; (mov r8, r8)
    39d0:	0000396d 	.word	0x0000396d

000039d4 <std.isra.0>:
    39d4:	2300      	movs	r3, #0
    39d6:	b510      	push	{r4, lr}
    39d8:	0004      	movs	r4, r0
    39da:	6003      	str	r3, [r0, #0]
    39dc:	6043      	str	r3, [r0, #4]
    39de:	6083      	str	r3, [r0, #8]
    39e0:	8181      	strh	r1, [r0, #12]
    39e2:	6643      	str	r3, [r0, #100]	; 0x64
    39e4:	81c2      	strh	r2, [r0, #14]
    39e6:	6103      	str	r3, [r0, #16]
    39e8:	6143      	str	r3, [r0, #20]
    39ea:	6183      	str	r3, [r0, #24]
    39ec:	0019      	movs	r1, r3
    39ee:	2208      	movs	r2, #8
    39f0:	305c      	adds	r0, #92	; 0x5c
    39f2:	f7ff fe74 	bl	36de <memset>
    39f6:	4b05      	ldr	r3, [pc, #20]	; (3a0c <std.isra.0+0x38>)
    39f8:	6224      	str	r4, [r4, #32]
    39fa:	6263      	str	r3, [r4, #36]	; 0x24
    39fc:	4b04      	ldr	r3, [pc, #16]	; (3a10 <std.isra.0+0x3c>)
    39fe:	62a3      	str	r3, [r4, #40]	; 0x28
    3a00:	4b04      	ldr	r3, [pc, #16]	; (3a14 <std.isra.0+0x40>)
    3a02:	62e3      	str	r3, [r4, #44]	; 0x2c
    3a04:	4b04      	ldr	r3, [pc, #16]	; (3a18 <std.isra.0+0x44>)
    3a06:	6323      	str	r3, [r4, #48]	; 0x30
    3a08:	bd10      	pop	{r4, pc}
    3a0a:	46c0      	nop			; (mov r8, r8)
    3a0c:	00003d2d 	.word	0x00003d2d
    3a10:	00003d55 	.word	0x00003d55
    3a14:	00003d8d 	.word	0x00003d8d
    3a18:	00003db9 	.word	0x00003db9

00003a1c <__sfmoreglue>:
    3a1c:	b570      	push	{r4, r5, r6, lr}
    3a1e:	2568      	movs	r5, #104	; 0x68
    3a20:	1e4b      	subs	r3, r1, #1
    3a22:	435d      	muls	r5, r3
    3a24:	000e      	movs	r6, r1
    3a26:	0029      	movs	r1, r5
    3a28:	3174      	adds	r1, #116	; 0x74
    3a2a:	f000 f917 	bl	3c5c <_malloc_r>
    3a2e:	1e04      	subs	r4, r0, #0
    3a30:	d008      	beq.n	3a44 <__sfmoreglue+0x28>
    3a32:	2100      	movs	r1, #0
    3a34:	002a      	movs	r2, r5
    3a36:	6001      	str	r1, [r0, #0]
    3a38:	6046      	str	r6, [r0, #4]
    3a3a:	300c      	adds	r0, #12
    3a3c:	60a0      	str	r0, [r4, #8]
    3a3e:	3268      	adds	r2, #104	; 0x68
    3a40:	f7ff fe4d 	bl	36de <memset>
    3a44:	0020      	movs	r0, r4
    3a46:	bd70      	pop	{r4, r5, r6, pc}

00003a48 <__sinit>:
    3a48:	6983      	ldr	r3, [r0, #24]
    3a4a:	b513      	push	{r0, r1, r4, lr}
    3a4c:	0004      	movs	r4, r0
    3a4e:	2b00      	cmp	r3, #0
    3a50:	d128      	bne.n	3aa4 <__sinit+0x5c>
    3a52:	6483      	str	r3, [r0, #72]	; 0x48
    3a54:	64c3      	str	r3, [r0, #76]	; 0x4c
    3a56:	6503      	str	r3, [r0, #80]	; 0x50
    3a58:	4b13      	ldr	r3, [pc, #76]	; (3aa8 <__sinit+0x60>)
    3a5a:	4a14      	ldr	r2, [pc, #80]	; (3aac <__sinit+0x64>)
    3a5c:	681b      	ldr	r3, [r3, #0]
    3a5e:	6282      	str	r2, [r0, #40]	; 0x28
    3a60:	9301      	str	r3, [sp, #4]
    3a62:	4298      	cmp	r0, r3
    3a64:	d101      	bne.n	3a6a <__sinit+0x22>
    3a66:	2301      	movs	r3, #1
    3a68:	6183      	str	r3, [r0, #24]
    3a6a:	0020      	movs	r0, r4
    3a6c:	f000 f820 	bl	3ab0 <__sfp>
    3a70:	6060      	str	r0, [r4, #4]
    3a72:	0020      	movs	r0, r4
    3a74:	f000 f81c 	bl	3ab0 <__sfp>
    3a78:	60a0      	str	r0, [r4, #8]
    3a7a:	0020      	movs	r0, r4
    3a7c:	f000 f818 	bl	3ab0 <__sfp>
    3a80:	2200      	movs	r2, #0
    3a82:	60e0      	str	r0, [r4, #12]
    3a84:	2104      	movs	r1, #4
    3a86:	6860      	ldr	r0, [r4, #4]
    3a88:	f7ff ffa4 	bl	39d4 <std.isra.0>
    3a8c:	2201      	movs	r2, #1
    3a8e:	2109      	movs	r1, #9
    3a90:	68a0      	ldr	r0, [r4, #8]
    3a92:	f7ff ff9f 	bl	39d4 <std.isra.0>
    3a96:	2202      	movs	r2, #2
    3a98:	2112      	movs	r1, #18
    3a9a:	68e0      	ldr	r0, [r4, #12]
    3a9c:	f7ff ff9a 	bl	39d4 <std.isra.0>
    3aa0:	2301      	movs	r3, #1
    3aa2:	61a3      	str	r3, [r4, #24]
    3aa4:	bd13      	pop	{r0, r1, r4, pc}
    3aa6:	46c0      	nop			; (mov r8, r8)
    3aa8:	00004048 	.word	0x00004048
    3aac:	000039c5 	.word	0x000039c5

00003ab0 <__sfp>:
    3ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ab2:	4b1d      	ldr	r3, [pc, #116]	; (3b28 <__sfp+0x78>)
    3ab4:	0006      	movs	r6, r0
    3ab6:	681d      	ldr	r5, [r3, #0]
    3ab8:	69ab      	ldr	r3, [r5, #24]
    3aba:	2b00      	cmp	r3, #0
    3abc:	d102      	bne.n	3ac4 <__sfp+0x14>
    3abe:	0028      	movs	r0, r5
    3ac0:	f7ff ffc2 	bl	3a48 <__sinit>
    3ac4:	3548      	adds	r5, #72	; 0x48
    3ac6:	68ac      	ldr	r4, [r5, #8]
    3ac8:	686b      	ldr	r3, [r5, #4]
    3aca:	3b01      	subs	r3, #1
    3acc:	d405      	bmi.n	3ada <__sfp+0x2a>
    3ace:	220c      	movs	r2, #12
    3ad0:	5ea7      	ldrsh	r7, [r4, r2]
    3ad2:	2f00      	cmp	r7, #0
    3ad4:	d010      	beq.n	3af8 <__sfp+0x48>
    3ad6:	3468      	adds	r4, #104	; 0x68
    3ad8:	e7f7      	b.n	3aca <__sfp+0x1a>
    3ada:	682b      	ldr	r3, [r5, #0]
    3adc:	2b00      	cmp	r3, #0
    3ade:	d001      	beq.n	3ae4 <__sfp+0x34>
    3ae0:	682d      	ldr	r5, [r5, #0]
    3ae2:	e7f0      	b.n	3ac6 <__sfp+0x16>
    3ae4:	2104      	movs	r1, #4
    3ae6:	0030      	movs	r0, r6
    3ae8:	f7ff ff98 	bl	3a1c <__sfmoreglue>
    3aec:	6028      	str	r0, [r5, #0]
    3aee:	2800      	cmp	r0, #0
    3af0:	d1f6      	bne.n	3ae0 <__sfp+0x30>
    3af2:	230c      	movs	r3, #12
    3af4:	6033      	str	r3, [r6, #0]
    3af6:	e016      	b.n	3b26 <__sfp+0x76>
    3af8:	2301      	movs	r3, #1
    3afa:	0020      	movs	r0, r4
    3afc:	425b      	negs	r3, r3
    3afe:	81e3      	strh	r3, [r4, #14]
    3b00:	3302      	adds	r3, #2
    3b02:	81a3      	strh	r3, [r4, #12]
    3b04:	6667      	str	r7, [r4, #100]	; 0x64
    3b06:	6027      	str	r7, [r4, #0]
    3b08:	60a7      	str	r7, [r4, #8]
    3b0a:	6067      	str	r7, [r4, #4]
    3b0c:	6127      	str	r7, [r4, #16]
    3b0e:	6167      	str	r7, [r4, #20]
    3b10:	61a7      	str	r7, [r4, #24]
    3b12:	305c      	adds	r0, #92	; 0x5c
    3b14:	2208      	movs	r2, #8
    3b16:	0039      	movs	r1, r7
    3b18:	f7ff fde1 	bl	36de <memset>
    3b1c:	0020      	movs	r0, r4
    3b1e:	6367      	str	r7, [r4, #52]	; 0x34
    3b20:	63a7      	str	r7, [r4, #56]	; 0x38
    3b22:	64a7      	str	r7, [r4, #72]	; 0x48
    3b24:	64e7      	str	r7, [r4, #76]	; 0x4c
    3b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b28:	00004048 	.word	0x00004048

00003b2c <_fwalk_reent>:
    3b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3b2e:	0004      	movs	r4, r0
    3b30:	0007      	movs	r7, r0
    3b32:	2600      	movs	r6, #0
    3b34:	9101      	str	r1, [sp, #4]
    3b36:	3448      	adds	r4, #72	; 0x48
    3b38:	2c00      	cmp	r4, #0
    3b3a:	d016      	beq.n	3b6a <_fwalk_reent+0x3e>
    3b3c:	6863      	ldr	r3, [r4, #4]
    3b3e:	68a5      	ldr	r5, [r4, #8]
    3b40:	9300      	str	r3, [sp, #0]
    3b42:	9b00      	ldr	r3, [sp, #0]
    3b44:	3b01      	subs	r3, #1
    3b46:	9300      	str	r3, [sp, #0]
    3b48:	d40d      	bmi.n	3b66 <_fwalk_reent+0x3a>
    3b4a:	89ab      	ldrh	r3, [r5, #12]
    3b4c:	2b01      	cmp	r3, #1
    3b4e:	d908      	bls.n	3b62 <_fwalk_reent+0x36>
    3b50:	220e      	movs	r2, #14
    3b52:	5eab      	ldrsh	r3, [r5, r2]
    3b54:	3301      	adds	r3, #1
    3b56:	d004      	beq.n	3b62 <_fwalk_reent+0x36>
    3b58:	0029      	movs	r1, r5
    3b5a:	0038      	movs	r0, r7
    3b5c:	9b01      	ldr	r3, [sp, #4]
    3b5e:	4798      	blx	r3
    3b60:	4306      	orrs	r6, r0
    3b62:	3568      	adds	r5, #104	; 0x68
    3b64:	e7ed      	b.n	3b42 <_fwalk_reent+0x16>
    3b66:	6824      	ldr	r4, [r4, #0]
    3b68:	e7e6      	b.n	3b38 <_fwalk_reent+0xc>
    3b6a:	0030      	movs	r0, r6
    3b6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00003b70 <__swhatbuf_r>:
    3b70:	b570      	push	{r4, r5, r6, lr}
    3b72:	000e      	movs	r6, r1
    3b74:	001d      	movs	r5, r3
    3b76:	230e      	movs	r3, #14
    3b78:	5ec9      	ldrsh	r1, [r1, r3]
    3b7a:	b090      	sub	sp, #64	; 0x40
    3b7c:	0014      	movs	r4, r2
    3b7e:	2900      	cmp	r1, #0
    3b80:	da06      	bge.n	3b90 <__swhatbuf_r+0x20>
    3b82:	2300      	movs	r3, #0
    3b84:	602b      	str	r3, [r5, #0]
    3b86:	89b3      	ldrh	r3, [r6, #12]
    3b88:	061b      	lsls	r3, r3, #24
    3b8a:	d50f      	bpl.n	3bac <__swhatbuf_r+0x3c>
    3b8c:	2340      	movs	r3, #64	; 0x40
    3b8e:	e00f      	b.n	3bb0 <__swhatbuf_r+0x40>
    3b90:	aa01      	add	r2, sp, #4
    3b92:	f000 f93d 	bl	3e10 <_fstat_r>
    3b96:	2800      	cmp	r0, #0
    3b98:	dbf3      	blt.n	3b82 <__swhatbuf_r+0x12>
    3b9a:	23f0      	movs	r3, #240	; 0xf0
    3b9c:	9a02      	ldr	r2, [sp, #8]
    3b9e:	021b      	lsls	r3, r3, #8
    3ba0:	4013      	ands	r3, r2
    3ba2:	4a05      	ldr	r2, [pc, #20]	; (3bb8 <__swhatbuf_r+0x48>)
    3ba4:	189b      	adds	r3, r3, r2
    3ba6:	425a      	negs	r2, r3
    3ba8:	4153      	adcs	r3, r2
    3baa:	602b      	str	r3, [r5, #0]
    3bac:	2380      	movs	r3, #128	; 0x80
    3bae:	00db      	lsls	r3, r3, #3
    3bb0:	2000      	movs	r0, #0
    3bb2:	6023      	str	r3, [r4, #0]
    3bb4:	b010      	add	sp, #64	; 0x40
    3bb6:	bd70      	pop	{r4, r5, r6, pc}
    3bb8:	ffffe000 	.word	0xffffe000

00003bbc <malloc>:
    3bbc:	b510      	push	{r4, lr}
    3bbe:	4b03      	ldr	r3, [pc, #12]	; (3bcc <malloc+0x10>)
    3bc0:	0001      	movs	r1, r0
    3bc2:	6818      	ldr	r0, [r3, #0]
    3bc4:	f000 f84a 	bl	3c5c <_malloc_r>
    3bc8:	bd10      	pop	{r4, pc}
    3bca:	46c0      	nop			; (mov r8, r8)
    3bcc:	20000078 	.word	0x20000078

00003bd0 <_free_r>:
    3bd0:	b530      	push	{r4, r5, lr}
    3bd2:	2900      	cmp	r1, #0
    3bd4:	d03e      	beq.n	3c54 <_free_r+0x84>
    3bd6:	3904      	subs	r1, #4
    3bd8:	680b      	ldr	r3, [r1, #0]
    3bda:	2b00      	cmp	r3, #0
    3bdc:	da00      	bge.n	3be0 <_free_r+0x10>
    3bde:	18c9      	adds	r1, r1, r3
    3be0:	4a1d      	ldr	r2, [pc, #116]	; (3c58 <_free_r+0x88>)
    3be2:	6813      	ldr	r3, [r2, #0]
    3be4:	0014      	movs	r4, r2
    3be6:	2b00      	cmp	r3, #0
    3be8:	d102      	bne.n	3bf0 <_free_r+0x20>
    3bea:	604b      	str	r3, [r1, #4]
    3bec:	6011      	str	r1, [r2, #0]
    3bee:	e031      	b.n	3c54 <_free_r+0x84>
    3bf0:	428b      	cmp	r3, r1
    3bf2:	d90d      	bls.n	3c10 <_free_r+0x40>
    3bf4:	680a      	ldr	r2, [r1, #0]
    3bf6:	1888      	adds	r0, r1, r2
    3bf8:	4283      	cmp	r3, r0
    3bfa:	d103      	bne.n	3c04 <_free_r+0x34>
    3bfc:	6818      	ldr	r0, [r3, #0]
    3bfe:	685b      	ldr	r3, [r3, #4]
    3c00:	1882      	adds	r2, r0, r2
    3c02:	600a      	str	r2, [r1, #0]
    3c04:	604b      	str	r3, [r1, #4]
    3c06:	6021      	str	r1, [r4, #0]
    3c08:	e024      	b.n	3c54 <_free_r+0x84>
    3c0a:	428a      	cmp	r2, r1
    3c0c:	d803      	bhi.n	3c16 <_free_r+0x46>
    3c0e:	0013      	movs	r3, r2
    3c10:	685a      	ldr	r2, [r3, #4]
    3c12:	2a00      	cmp	r2, #0
    3c14:	d1f9      	bne.n	3c0a <_free_r+0x3a>
    3c16:	681d      	ldr	r5, [r3, #0]
    3c18:	195c      	adds	r4, r3, r5
    3c1a:	428c      	cmp	r4, r1
    3c1c:	d10b      	bne.n	3c36 <_free_r+0x66>
    3c1e:	6809      	ldr	r1, [r1, #0]
    3c20:	1869      	adds	r1, r5, r1
    3c22:	1858      	adds	r0, r3, r1
    3c24:	6019      	str	r1, [r3, #0]
    3c26:	4282      	cmp	r2, r0
    3c28:	d114      	bne.n	3c54 <_free_r+0x84>
    3c2a:	6810      	ldr	r0, [r2, #0]
    3c2c:	6852      	ldr	r2, [r2, #4]
    3c2e:	1841      	adds	r1, r0, r1
    3c30:	6019      	str	r1, [r3, #0]
    3c32:	605a      	str	r2, [r3, #4]
    3c34:	e00e      	b.n	3c54 <_free_r+0x84>
    3c36:	428c      	cmp	r4, r1
    3c38:	d902      	bls.n	3c40 <_free_r+0x70>
    3c3a:	230c      	movs	r3, #12
    3c3c:	6003      	str	r3, [r0, #0]
    3c3e:	e009      	b.n	3c54 <_free_r+0x84>
    3c40:	6808      	ldr	r0, [r1, #0]
    3c42:	180c      	adds	r4, r1, r0
    3c44:	42a2      	cmp	r2, r4
    3c46:	d103      	bne.n	3c50 <_free_r+0x80>
    3c48:	6814      	ldr	r4, [r2, #0]
    3c4a:	6852      	ldr	r2, [r2, #4]
    3c4c:	1820      	adds	r0, r4, r0
    3c4e:	6008      	str	r0, [r1, #0]
    3c50:	604a      	str	r2, [r1, #4]
    3c52:	6059      	str	r1, [r3, #4]
    3c54:	bd30      	pop	{r4, r5, pc}
    3c56:	46c0      	nop			; (mov r8, r8)
    3c58:	20003cc4 	.word	0x20003cc4

00003c5c <_malloc_r>:
    3c5c:	2303      	movs	r3, #3
    3c5e:	b570      	push	{r4, r5, r6, lr}
    3c60:	1ccd      	adds	r5, r1, #3
    3c62:	439d      	bics	r5, r3
    3c64:	3508      	adds	r5, #8
    3c66:	0006      	movs	r6, r0
    3c68:	2d0c      	cmp	r5, #12
    3c6a:	d201      	bcs.n	3c70 <_malloc_r+0x14>
    3c6c:	250c      	movs	r5, #12
    3c6e:	e005      	b.n	3c7c <_malloc_r+0x20>
    3c70:	2d00      	cmp	r5, #0
    3c72:	da03      	bge.n	3c7c <_malloc_r+0x20>
    3c74:	230c      	movs	r3, #12
    3c76:	2000      	movs	r0, #0
    3c78:	6033      	str	r3, [r6, #0]
    3c7a:	e040      	b.n	3cfe <_malloc_r+0xa2>
    3c7c:	42a9      	cmp	r1, r5
    3c7e:	d8f9      	bhi.n	3c74 <_malloc_r+0x18>
    3c80:	4b1f      	ldr	r3, [pc, #124]	; (3d00 <_malloc_r+0xa4>)
    3c82:	681c      	ldr	r4, [r3, #0]
    3c84:	001a      	movs	r2, r3
    3c86:	0021      	movs	r1, r4
    3c88:	2900      	cmp	r1, #0
    3c8a:	d013      	beq.n	3cb4 <_malloc_r+0x58>
    3c8c:	680b      	ldr	r3, [r1, #0]
    3c8e:	1b5b      	subs	r3, r3, r5
    3c90:	d40d      	bmi.n	3cae <_malloc_r+0x52>
    3c92:	2b0b      	cmp	r3, #11
    3c94:	d902      	bls.n	3c9c <_malloc_r+0x40>
    3c96:	600b      	str	r3, [r1, #0]
    3c98:	18cc      	adds	r4, r1, r3
    3c9a:	e01e      	b.n	3cda <_malloc_r+0x7e>
    3c9c:	428c      	cmp	r4, r1
    3c9e:	d102      	bne.n	3ca6 <_malloc_r+0x4a>
    3ca0:	6863      	ldr	r3, [r4, #4]
    3ca2:	6013      	str	r3, [r2, #0]
    3ca4:	e01a      	b.n	3cdc <_malloc_r+0x80>
    3ca6:	684b      	ldr	r3, [r1, #4]
    3ca8:	6063      	str	r3, [r4, #4]
    3caa:	000c      	movs	r4, r1
    3cac:	e016      	b.n	3cdc <_malloc_r+0x80>
    3cae:	000c      	movs	r4, r1
    3cb0:	6849      	ldr	r1, [r1, #4]
    3cb2:	e7e9      	b.n	3c88 <_malloc_r+0x2c>
    3cb4:	4c13      	ldr	r4, [pc, #76]	; (3d04 <_malloc_r+0xa8>)
    3cb6:	6823      	ldr	r3, [r4, #0]
    3cb8:	2b00      	cmp	r3, #0
    3cba:	d103      	bne.n	3cc4 <_malloc_r+0x68>
    3cbc:	0030      	movs	r0, r6
    3cbe:	f000 f823 	bl	3d08 <_sbrk_r>
    3cc2:	6020      	str	r0, [r4, #0]
    3cc4:	0029      	movs	r1, r5
    3cc6:	0030      	movs	r0, r6
    3cc8:	f000 f81e 	bl	3d08 <_sbrk_r>
    3ccc:	1c43      	adds	r3, r0, #1
    3cce:	d0d1      	beq.n	3c74 <_malloc_r+0x18>
    3cd0:	2303      	movs	r3, #3
    3cd2:	1cc4      	adds	r4, r0, #3
    3cd4:	439c      	bics	r4, r3
    3cd6:	42a0      	cmp	r0, r4
    3cd8:	d10a      	bne.n	3cf0 <_malloc_r+0x94>
    3cda:	6025      	str	r5, [r4, #0]
    3cdc:	0020      	movs	r0, r4
    3cde:	2207      	movs	r2, #7
    3ce0:	300b      	adds	r0, #11
    3ce2:	1d23      	adds	r3, r4, #4
    3ce4:	4390      	bics	r0, r2
    3ce6:	1ac3      	subs	r3, r0, r3
    3ce8:	d009      	beq.n	3cfe <_malloc_r+0xa2>
    3cea:	425a      	negs	r2, r3
    3cec:	50e2      	str	r2, [r4, r3]
    3cee:	e006      	b.n	3cfe <_malloc_r+0xa2>
    3cf0:	1a21      	subs	r1, r4, r0
    3cf2:	0030      	movs	r0, r6
    3cf4:	f000 f808 	bl	3d08 <_sbrk_r>
    3cf8:	1c43      	adds	r3, r0, #1
    3cfa:	d1ee      	bne.n	3cda <_malloc_r+0x7e>
    3cfc:	e7ba      	b.n	3c74 <_malloc_r+0x18>
    3cfe:	bd70      	pop	{r4, r5, r6, pc}
    3d00:	20003cc4 	.word	0x20003cc4
    3d04:	20003cc0 	.word	0x20003cc0

00003d08 <_sbrk_r>:
    3d08:	2300      	movs	r3, #0
    3d0a:	b570      	push	{r4, r5, r6, lr}
    3d0c:	4c06      	ldr	r4, [pc, #24]	; (3d28 <_sbrk_r+0x20>)
    3d0e:	0005      	movs	r5, r0
    3d10:	0008      	movs	r0, r1
    3d12:	6023      	str	r3, [r4, #0]
    3d14:	f7fd fe46 	bl	19a4 <_sbrk>
    3d18:	1c43      	adds	r3, r0, #1
    3d1a:	d103      	bne.n	3d24 <_sbrk_r+0x1c>
    3d1c:	6823      	ldr	r3, [r4, #0]
    3d1e:	2b00      	cmp	r3, #0
    3d20:	d000      	beq.n	3d24 <_sbrk_r+0x1c>
    3d22:	602b      	str	r3, [r5, #0]
    3d24:	bd70      	pop	{r4, r5, r6, pc}
    3d26:	46c0      	nop			; (mov r8, r8)
    3d28:	20003f7c 	.word	0x20003f7c

00003d2c <__sread>:
    3d2c:	b570      	push	{r4, r5, r6, lr}
    3d2e:	000c      	movs	r4, r1
    3d30:	250e      	movs	r5, #14
    3d32:	5f49      	ldrsh	r1, [r1, r5]
    3d34:	f000 f892 	bl	3e5c <_read_r>
    3d38:	2800      	cmp	r0, #0
    3d3a:	db03      	blt.n	3d44 <__sread+0x18>
    3d3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3d3e:	181b      	adds	r3, r3, r0
    3d40:	6563      	str	r3, [r4, #84]	; 0x54
    3d42:	e003      	b.n	3d4c <__sread+0x20>
    3d44:	89a2      	ldrh	r2, [r4, #12]
    3d46:	4b02      	ldr	r3, [pc, #8]	; (3d50 <__sread+0x24>)
    3d48:	4013      	ands	r3, r2
    3d4a:	81a3      	strh	r3, [r4, #12]
    3d4c:	bd70      	pop	{r4, r5, r6, pc}
    3d4e:	46c0      	nop			; (mov r8, r8)
    3d50:	ffffefff 	.word	0xffffefff

00003d54 <__swrite>:
    3d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d56:	001f      	movs	r7, r3
    3d58:	898b      	ldrh	r3, [r1, #12]
    3d5a:	0005      	movs	r5, r0
    3d5c:	000c      	movs	r4, r1
    3d5e:	0016      	movs	r6, r2
    3d60:	05db      	lsls	r3, r3, #23
    3d62:	d505      	bpl.n	3d70 <__swrite+0x1c>
    3d64:	230e      	movs	r3, #14
    3d66:	5ec9      	ldrsh	r1, [r1, r3]
    3d68:	2200      	movs	r2, #0
    3d6a:	2302      	movs	r3, #2
    3d6c:	f000 f862 	bl	3e34 <_lseek_r>
    3d70:	89a2      	ldrh	r2, [r4, #12]
    3d72:	4b05      	ldr	r3, [pc, #20]	; (3d88 <__swrite+0x34>)
    3d74:	0028      	movs	r0, r5
    3d76:	4013      	ands	r3, r2
    3d78:	81a3      	strh	r3, [r4, #12]
    3d7a:	0032      	movs	r2, r6
    3d7c:	230e      	movs	r3, #14
    3d7e:	5ee1      	ldrsh	r1, [r4, r3]
    3d80:	003b      	movs	r3, r7
    3d82:	f000 f81f 	bl	3dc4 <_write_r>
    3d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d88:	ffffefff 	.word	0xffffefff

00003d8c <__sseek>:
    3d8c:	b570      	push	{r4, r5, r6, lr}
    3d8e:	000c      	movs	r4, r1
    3d90:	250e      	movs	r5, #14
    3d92:	5f49      	ldrsh	r1, [r1, r5]
    3d94:	f000 f84e 	bl	3e34 <_lseek_r>
    3d98:	89a3      	ldrh	r3, [r4, #12]
    3d9a:	1c42      	adds	r2, r0, #1
    3d9c:	d103      	bne.n	3da6 <__sseek+0x1a>
    3d9e:	4a05      	ldr	r2, [pc, #20]	; (3db4 <__sseek+0x28>)
    3da0:	4013      	ands	r3, r2
    3da2:	81a3      	strh	r3, [r4, #12]
    3da4:	e004      	b.n	3db0 <__sseek+0x24>
    3da6:	2280      	movs	r2, #128	; 0x80
    3da8:	0152      	lsls	r2, r2, #5
    3daa:	4313      	orrs	r3, r2
    3dac:	81a3      	strh	r3, [r4, #12]
    3dae:	6560      	str	r0, [r4, #84]	; 0x54
    3db0:	bd70      	pop	{r4, r5, r6, pc}
    3db2:	46c0      	nop			; (mov r8, r8)
    3db4:	ffffefff 	.word	0xffffefff

00003db8 <__sclose>:
    3db8:	b510      	push	{r4, lr}
    3dba:	230e      	movs	r3, #14
    3dbc:	5ec9      	ldrsh	r1, [r1, r3]
    3dbe:	f000 f815 	bl	3dec <_close_r>
    3dc2:	bd10      	pop	{r4, pc}

00003dc4 <_write_r>:
    3dc4:	b570      	push	{r4, r5, r6, lr}
    3dc6:	0005      	movs	r5, r0
    3dc8:	0008      	movs	r0, r1
    3dca:	0011      	movs	r1, r2
    3dcc:	2200      	movs	r2, #0
    3dce:	4c06      	ldr	r4, [pc, #24]	; (3de8 <_write_r+0x24>)
    3dd0:	6022      	str	r2, [r4, #0]
    3dd2:	001a      	movs	r2, r3
    3dd4:	f7fc fbdc 	bl	590 <_write>
    3dd8:	1c43      	adds	r3, r0, #1
    3dda:	d103      	bne.n	3de4 <_write_r+0x20>
    3ddc:	6823      	ldr	r3, [r4, #0]
    3dde:	2b00      	cmp	r3, #0
    3de0:	d000      	beq.n	3de4 <_write_r+0x20>
    3de2:	602b      	str	r3, [r5, #0]
    3de4:	bd70      	pop	{r4, r5, r6, pc}
    3de6:	46c0      	nop			; (mov r8, r8)
    3de8:	20003f7c 	.word	0x20003f7c

00003dec <_close_r>:
    3dec:	2300      	movs	r3, #0
    3dee:	b570      	push	{r4, r5, r6, lr}
    3df0:	4c06      	ldr	r4, [pc, #24]	; (3e0c <_close_r+0x20>)
    3df2:	0005      	movs	r5, r0
    3df4:	0008      	movs	r0, r1
    3df6:	6023      	str	r3, [r4, #0]
    3df8:	f7fd fde6 	bl	19c8 <_close>
    3dfc:	1c43      	adds	r3, r0, #1
    3dfe:	d103      	bne.n	3e08 <_close_r+0x1c>
    3e00:	6823      	ldr	r3, [r4, #0]
    3e02:	2b00      	cmp	r3, #0
    3e04:	d000      	beq.n	3e08 <_close_r+0x1c>
    3e06:	602b      	str	r3, [r5, #0]
    3e08:	bd70      	pop	{r4, r5, r6, pc}
    3e0a:	46c0      	nop			; (mov r8, r8)
    3e0c:	20003f7c 	.word	0x20003f7c

00003e10 <_fstat_r>:
    3e10:	2300      	movs	r3, #0
    3e12:	b570      	push	{r4, r5, r6, lr}
    3e14:	4c06      	ldr	r4, [pc, #24]	; (3e30 <_fstat_r+0x20>)
    3e16:	0005      	movs	r5, r0
    3e18:	0008      	movs	r0, r1
    3e1a:	0011      	movs	r1, r2
    3e1c:	6023      	str	r3, [r4, #0]
    3e1e:	f7fd fdd7 	bl	19d0 <_fstat>
    3e22:	1c43      	adds	r3, r0, #1
    3e24:	d103      	bne.n	3e2e <_fstat_r+0x1e>
    3e26:	6823      	ldr	r3, [r4, #0]
    3e28:	2b00      	cmp	r3, #0
    3e2a:	d000      	beq.n	3e2e <_fstat_r+0x1e>
    3e2c:	602b      	str	r3, [r5, #0]
    3e2e:	bd70      	pop	{r4, r5, r6, pc}
    3e30:	20003f7c 	.word	0x20003f7c

00003e34 <_lseek_r>:
    3e34:	b570      	push	{r4, r5, r6, lr}
    3e36:	0005      	movs	r5, r0
    3e38:	0008      	movs	r0, r1
    3e3a:	0011      	movs	r1, r2
    3e3c:	2200      	movs	r2, #0
    3e3e:	4c06      	ldr	r4, [pc, #24]	; (3e58 <_lseek_r+0x24>)
    3e40:	6022      	str	r2, [r4, #0]
    3e42:	001a      	movs	r2, r3
    3e44:	f7fd fdca 	bl	19dc <_lseek>
    3e48:	1c43      	adds	r3, r0, #1
    3e4a:	d103      	bne.n	3e54 <_lseek_r+0x20>
    3e4c:	6823      	ldr	r3, [r4, #0]
    3e4e:	2b00      	cmp	r3, #0
    3e50:	d000      	beq.n	3e54 <_lseek_r+0x20>
    3e52:	602b      	str	r3, [r5, #0]
    3e54:	bd70      	pop	{r4, r5, r6, pc}
    3e56:	46c0      	nop			; (mov r8, r8)
    3e58:	20003f7c 	.word	0x20003f7c

00003e5c <_read_r>:
    3e5c:	b570      	push	{r4, r5, r6, lr}
    3e5e:	0005      	movs	r5, r0
    3e60:	0008      	movs	r0, r1
    3e62:	0011      	movs	r1, r2
    3e64:	2200      	movs	r2, #0
    3e66:	4c06      	ldr	r4, [pc, #24]	; (3e80 <_read_r+0x24>)
    3e68:	6022      	str	r2, [r4, #0]
    3e6a:	001a      	movs	r2, r3
    3e6c:	f7fc fb70 	bl	550 <_read>
    3e70:	1c43      	adds	r3, r0, #1
    3e72:	d103      	bne.n	3e7c <_read_r+0x20>
    3e74:	6823      	ldr	r3, [r4, #0]
    3e76:	2b00      	cmp	r3, #0
    3e78:	d000      	beq.n	3e7c <_read_r+0x20>
    3e7a:	602b      	str	r3, [r5, #0]
    3e7c:	bd70      	pop	{r4, r5, r6, pc}
    3e7e:	46c0      	nop			; (mov r8, r8)
    3e80:	20003f7c 	.word	0x20003f7c
    3e84:	42000000 	.word	0x42000000
    3e88:	42000400 	.word	0x42000400
    3e8c:	42000800 	.word	0x42000800
    3e90:	42000c00 	.word	0x42000c00
    3e94:	42001000 	.word	0x42001000
    3e98:	43000400 	.word	0x43000400
    3e9c:	0b0a0908 	.word	0x0b0a0908
    3ea0:	00000d0c 	.word	0x00000d0c
    3ea4:	00000f5e 	.word	0x00000f5e
    3ea8:	0000119c 	.word	0x0000119c
    3eac:	0000119c 	.word	0x0000119c
    3eb0:	0000119c 	.word	0x0000119c
    3eb4:	0000119c 	.word	0x0000119c
    3eb8:	0000119c 	.word	0x0000119c
    3ebc:	0000119c 	.word	0x0000119c
    3ec0:	0000119c 	.word	0x0000119c
    3ec4:	0000119c 	.word	0x0000119c
    3ec8:	0000119c 	.word	0x0000119c
    3ecc:	0000119c 	.word	0x0000119c
    3ed0:	0000119c 	.word	0x0000119c
    3ed4:	0000119c 	.word	0x0000119c
    3ed8:	0000119c 	.word	0x0000119c
    3edc:	0000119c 	.word	0x0000119c
    3ee0:	0000119c 	.word	0x0000119c
    3ee4:	00000f46 	.word	0x00000f46
    3ee8:	0000119c 	.word	0x0000119c
    3eec:	0000119c 	.word	0x0000119c
    3ef0:	0000119c 	.word	0x0000119c
    3ef4:	0000119c 	.word	0x0000119c
    3ef8:	0000119c 	.word	0x0000119c
    3efc:	0000119c 	.word	0x0000119c
    3f00:	0000119c 	.word	0x0000119c
    3f04:	0000119c 	.word	0x0000119c
    3f08:	0000119c 	.word	0x0000119c
    3f0c:	0000119c 	.word	0x0000119c
    3f10:	0000119c 	.word	0x0000119c
    3f14:	0000119c 	.word	0x0000119c
    3f18:	0000119c 	.word	0x0000119c
    3f1c:	0000119c 	.word	0x0000119c
    3f20:	0000119c 	.word	0x0000119c
    3f24:	00000f56 	.word	0x00000f56
    3f28:	0000119c 	.word	0x0000119c
    3f2c:	0000119c 	.word	0x0000119c
    3f30:	0000119c 	.word	0x0000119c
    3f34:	0000119c 	.word	0x0000119c
    3f38:	0000119c 	.word	0x0000119c
    3f3c:	0000119c 	.word	0x0000119c
    3f40:	0000119c 	.word	0x0000119c
    3f44:	0000119c 	.word	0x0000119c
    3f48:	0000119c 	.word	0x0000119c
    3f4c:	0000119c 	.word	0x0000119c
    3f50:	0000119c 	.word	0x0000119c
    3f54:	0000119c 	.word	0x0000119c
    3f58:	0000119c 	.word	0x0000119c
    3f5c:	0000119c 	.word	0x0000119c
    3f60:	0000119c 	.word	0x0000119c
    3f64:	00000f4e 	.word	0x00000f4e
    3f68:	00000f66 	.word	0x00000f66
    3f6c:	00000f2e 	.word	0x00000f2e
    3f70:	00000f3e 	.word	0x00000f3e
    3f74:	00000f36 	.word	0x00000f36
    3f78:	00000002 	.word	0x00000002
    3f7c:	00000003 	.word	0x00000003
    3f80:	00000028 	.word	0x00000028
    3f84:	00000029 	.word	0x00000029
    3f88:	00000004 	.word	0x00000004
    3f8c:	00000005 	.word	0x00000005
    3f90:	00000006 	.word	0x00000006
    3f94:	00000007 	.word	0x00000007
    3f98:	00000020 	.word	0x00000020
    3f9c:	00000021 	.word	0x00000021
    3fa0:	00000022 	.word	0x00000022
    3fa4:	00000023 	.word	0x00000023
    3fa8:	00000024 	.word	0x00000024
    3fac:	00000025 	.word	0x00000025
    3fb0:	00000026 	.word	0x00000026
    3fb4:	00000027 	.word	0x00000027
    3fb8:	00000008 	.word	0x00000008
    3fbc:	00000009 	.word	0x00000009
    3fc0:	0000000a 	.word	0x0000000a
    3fc4:	0000000b 	.word	0x0000000b
    3fc8:	0000ffff 	.word	0x0000ffff
    3fcc:	0000ffff 	.word	0x0000ffff
    3fd0:	0000ffff 	.word	0x0000ffff
    3fd4:	0000ffff 	.word	0x0000ffff
    3fd8:	0000142e 	.word	0x0000142e
    3fdc:	0000142a 	.word	0x0000142a
    3fe0:	0000142a 	.word	0x0000142a
    3fe4:	0000148c 	.word	0x0000148c
    3fe8:	0000148c 	.word	0x0000148c
    3fec:	00001444 	.word	0x00001444
    3ff0:	00001434 	.word	0x00001434
    3ff4:	0000144a 	.word	0x0000144a
    3ff8:	0000147a 	.word	0x0000147a
    3ffc:	454c4449 	.word	0x454c4449
    4000:	00000000 	.word	0x00000000
    4004:	00002f50 	.word	0x00002f50
    4008:	00002f50 	.word	0x00002f50
    400c:	00002f50 	.word	0x00002f50
    4010:	00002fb2 	.word	0x00002fb2
    4014:	00002f92 	.word	0x00002f92
    4018:	00002fac 	.word	0x00002fac
    401c:	00002f50 	.word	0x00002f50
    4020:	00002f50 	.word	0x00002f50
    4024:	00002fb2 	.word	0x00002fb2
    4028:	00002f92 	.word	0x00002f92
    402c:	20726d54 	.word	0x20726d54
    4030:	00637653 	.word	0x00637653
    4034:	6e69614d 	.word	0x6e69614d
    4038:	00000000 	.word	0x00000000
    403c:	54524155 	.word	0x54524155
    4040:	00000000 	.word	0x00000000
    4044:	00000043 	.word	0x00000043

00004048 <_global_impure_ptr>:
    4048:	20000018                                ... 

0000404c <__sf_fake_stdin>:
	...

0000406c <__sf_fake_stdout>:
	...

0000408c <__sf_fake_stderr>:
	...

000040ac <_init>:
    40ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40ae:	46c0      	nop			; (mov r8, r8)
    40b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    40b2:	bc08      	pop	{r3}
    40b4:	469e      	mov	lr, r3
    40b6:	4770      	bx	lr

000040b8 <__init_array_start>:
    40b8:	000000dd 	.word	0x000000dd

000040bc <_fini>:
    40bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40be:	46c0      	nop			; (mov r8, r8)
    40c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    40c2:	bc08      	pop	{r3}
    40c4:	469e      	mov	lr, r3
    40c6:	4770      	bx	lr

000040c8 <__fini_array_start>:
    40c8:	000000b5 	.word	0x000000b5
