
OPAMP_ADC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fb0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020068  2**0
                  CONTENTS
  3 .bss          000001fc  20000068  00003018  00020068  2**2
                  ALLOC
  4 .stack        00002004  20000264  00003214  00020068  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001db53  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002f88  00000000  00000000  0003dc3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004631  00000000  00000000  00040bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000528  00000000  00000000  000451f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000550  00000000  00000000  0004571d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001deaf  00000000  00000000  00045c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d3e3  00000000  00000000  00063b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009c050  00000000  00000000  00070eff  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000132c  00000000  00000000  0010cf50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002268 	.word	0x20002268
       4:	00001805 	.word	0x00001805
       8:	00001801 	.word	0x00001801
       c:	00001801 	.word	0x00001801
	...
      2c:	00001801 	.word	0x00001801
	...
      38:	00001801 	.word	0x00001801
      3c:	00001801 	.word	0x00001801
      40:	00001801 	.word	0x00001801
      44:	00001801 	.word	0x00001801
      48:	00001801 	.word	0x00001801
      4c:	00001801 	.word	0x00001801
      50:	00001801 	.word	0x00001801
      54:	00001801 	.word	0x00001801
      58:	00001801 	.word	0x00001801
      5c:	00001801 	.word	0x00001801
      60:	00000b99 	.word	0x00000b99
      64:	00000ba9 	.word	0x00000ba9
      68:	00000bb9 	.word	0x00000bb9
      6c:	00000bc9 	.word	0x00000bc9
      70:	00000bd9 	.word	0x00000bd9
      74:	00000be9 	.word	0x00000be9
      78:	00001801 	.word	0x00001801
      7c:	00001801 	.word	0x00001801
      80:	00001801 	.word	0x00001801
      84:	00001801 	.word	0x00001801
      88:	00001801 	.word	0x00001801
      8c:	00001801 	.word	0x00001801
      90:	00001801 	.word	0x00001801
      94:	00001801 	.word	0x00001801
      98:	000010bd 	.word	0x000010bd
      9c:	00001801 	.word	0x00001801
      a0:	00001801 	.word	0x00001801
      a4:	00001801 	.word	0x00001801
      a8:	00001801 	.word	0x00001801
      ac:	00001801 	.word	0x00001801
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00002fb0 	.word	0x00002fb0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00002fb0 	.word	0x00002fb0
     10c:	00002fb0 	.word	0x00002fb0
     110:	00000000 	.word	0x00000000

00000114 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     114:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     116:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     118:	2340      	movs	r3, #64	; 0x40
     11a:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     11c:	4281      	cmp	r1, r0
     11e:	d201      	bcs.n	124 <_sercom_get_sync_baud_val+0x10>
     120:	e00a      	b.n	138 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     122:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     124:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     126:	1c63      	adds	r3, r4, #1
     128:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     12a:	4288      	cmp	r0, r1
     12c:	d9f9      	bls.n	122 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     12e:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     130:	2cff      	cmp	r4, #255	; 0xff
     132:	d801      	bhi.n	138 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     134:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     136:	2300      	movs	r3, #0
	}
}
     138:	0018      	movs	r0, r3
     13a:	bd10      	pop	{r4, pc}

0000013c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     13c:	b5f0      	push	{r4, r5, r6, r7, lr}
     13e:	465f      	mov	r7, fp
     140:	4656      	mov	r6, sl
     142:	464d      	mov	r5, r9
     144:	4644      	mov	r4, r8
     146:	b4f0      	push	{r4, r5, r6, r7}
     148:	b089      	sub	sp, #36	; 0x24
     14a:	000c      	movs	r4, r1
     14c:	9205      	str	r2, [sp, #20]
     14e:	aa12      	add	r2, sp, #72	; 0x48
     150:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     152:	0002      	movs	r2, r0
     154:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     156:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     158:	42a2      	cmp	r2, r4
     15a:	d900      	bls.n	15e <_sercom_get_async_baud_val+0x22>
     15c:	e0c6      	b.n	2ec <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     15e:	2b00      	cmp	r3, #0
     160:	d151      	bne.n	206 <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     162:	0002      	movs	r2, r0
     164:	0008      	movs	r0, r1
     166:	2100      	movs	r1, #0
     168:	4d64      	ldr	r5, [pc, #400]	; (2fc <_sercom_get_async_baud_val+0x1c0>)
     16a:	47a8      	blx	r5
     16c:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     16e:	0026      	movs	r6, r4
     170:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     172:	2300      	movs	r3, #0
     174:	2400      	movs	r4, #0
     176:	9300      	str	r3, [sp, #0]
     178:	9401      	str	r4, [sp, #4]
     17a:	2200      	movs	r2, #0
     17c:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     17e:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     180:	2120      	movs	r1, #32
     182:	468c      	mov	ip, r1
     184:	391f      	subs	r1, #31
     186:	9602      	str	r6, [sp, #8]
     188:	9703      	str	r7, [sp, #12]
     18a:	2420      	movs	r4, #32
     18c:	4264      	negs	r4, r4
     18e:	1904      	adds	r4, r0, r4
     190:	d403      	bmi.n	19a <_sercom_get_async_baud_val+0x5e>
     192:	000d      	movs	r5, r1
     194:	40a5      	lsls	r5, r4
     196:	46a8      	mov	r8, r5
     198:	e004      	b.n	1a4 <_sercom_get_async_baud_val+0x68>
     19a:	4664      	mov	r4, ip
     19c:	1a24      	subs	r4, r4, r0
     19e:	000d      	movs	r5, r1
     1a0:	40e5      	lsrs	r5, r4
     1a2:	46a8      	mov	r8, r5
     1a4:	000c      	movs	r4, r1
     1a6:	4084      	lsls	r4, r0
     1a8:	46a1      	mov	r9, r4

		r = r << 1;
     1aa:	0014      	movs	r4, r2
     1ac:	001d      	movs	r5, r3
     1ae:	18a4      	adds	r4, r4, r2
     1b0:	415d      	adcs	r5, r3
     1b2:	0022      	movs	r2, r4
     1b4:	002b      	movs	r3, r5

		if (n & bit_shift) {
     1b6:	4646      	mov	r6, r8
     1b8:	465f      	mov	r7, fp
     1ba:	423e      	tst	r6, r7
     1bc:	d003      	beq.n	1c6 <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
     1be:	000e      	movs	r6, r1
     1c0:	4326      	orrs	r6, r4
     1c2:	0032      	movs	r2, r6
     1c4:	002b      	movs	r3, r5
		}

		if (r >= d) {
     1c6:	9c02      	ldr	r4, [sp, #8]
     1c8:	9d03      	ldr	r5, [sp, #12]
     1ca:	429d      	cmp	r5, r3
     1cc:	d80f      	bhi.n	1ee <_sercom_get_async_baud_val+0xb2>
     1ce:	d101      	bne.n	1d4 <_sercom_get_async_baud_val+0x98>
     1d0:	4294      	cmp	r4, r2
     1d2:	d80c      	bhi.n	1ee <_sercom_get_async_baud_val+0xb2>
			r = r - d;
     1d4:	9c02      	ldr	r4, [sp, #8]
     1d6:	9d03      	ldr	r5, [sp, #12]
     1d8:	1b12      	subs	r2, r2, r4
     1da:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     1dc:	464d      	mov	r5, r9
     1de:	9e00      	ldr	r6, [sp, #0]
     1e0:	9f01      	ldr	r7, [sp, #4]
     1e2:	4335      	orrs	r5, r6
     1e4:	003c      	movs	r4, r7
     1e6:	4646      	mov	r6, r8
     1e8:	4334      	orrs	r4, r6
     1ea:	9500      	str	r5, [sp, #0]
     1ec:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     1ee:	3801      	subs	r0, #1
     1f0:	d2cb      	bcs.n	18a <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
     1f2:	2200      	movs	r2, #0
     1f4:	2301      	movs	r3, #1
     1f6:	9800      	ldr	r0, [sp, #0]
     1f8:	9901      	ldr	r1, [sp, #4]
     1fa:	1a12      	subs	r2, r2, r0
     1fc:	418b      	sbcs	r3, r1
     1fe:	0c12      	lsrs	r2, r2, #16
     200:	041b      	lsls	r3, r3, #16
     202:	431a      	orrs	r2, r3
     204:	e06f      	b.n	2e6 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     206:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     208:	2b01      	cmp	r3, #1
     20a:	d16c      	bne.n	2e6 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     20c:	0f63      	lsrs	r3, r4, #29
     20e:	9304      	str	r3, [sp, #16]
     210:	00e3      	lsls	r3, r4, #3
     212:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     214:	000a      	movs	r2, r1
     216:	2300      	movs	r3, #0
     218:	2100      	movs	r1, #0
     21a:	4c38      	ldr	r4, [pc, #224]	; (2fc <_sercom_get_async_baud_val+0x1c0>)
     21c:	47a0      	blx	r4
     21e:	0004      	movs	r4, r0
     220:	000d      	movs	r5, r1
     222:	2300      	movs	r3, #0
     224:	469c      	mov	ip, r3
     226:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     228:	3320      	adds	r3, #32
     22a:	469b      	mov	fp, r3
     22c:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     22e:	4663      	mov	r3, ip
     230:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     232:	2300      	movs	r3, #0
     234:	9302      	str	r3, [sp, #8]
     236:	2200      	movs	r2, #0
     238:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     23a:	213f      	movs	r1, #63	; 0x3f
     23c:	9400      	str	r4, [sp, #0]
     23e:	9501      	str	r5, [sp, #4]
     240:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
     242:	2120      	movs	r1, #32
     244:	4249      	negs	r1, r1
     246:	1879      	adds	r1, r7, r1
     248:	d403      	bmi.n	252 <_sercom_get_async_baud_val+0x116>
     24a:	0030      	movs	r0, r6
     24c:	4088      	lsls	r0, r1
     24e:	4684      	mov	ip, r0
     250:	e004      	b.n	25c <_sercom_get_async_baud_val+0x120>
     252:	4659      	mov	r1, fp
     254:	1bc9      	subs	r1, r1, r7
     256:	0030      	movs	r0, r6
     258:	40c8      	lsrs	r0, r1
     25a:	4684      	mov	ip, r0
     25c:	0031      	movs	r1, r6
     25e:	40b9      	lsls	r1, r7
     260:	4689      	mov	r9, r1

		r = r << 1;
     262:	0010      	movs	r0, r2
     264:	0019      	movs	r1, r3
     266:	1880      	adds	r0, r0, r2
     268:	4159      	adcs	r1, r3
     26a:	0002      	movs	r2, r0
     26c:	000b      	movs	r3, r1

		if (n & bit_shift) {
     26e:	4644      	mov	r4, r8
     270:	464d      	mov	r5, r9
     272:	402c      	ands	r4, r5
     274:	46a2      	mov	sl, r4
     276:	4664      	mov	r4, ip
     278:	9d04      	ldr	r5, [sp, #16]
     27a:	402c      	ands	r4, r5
     27c:	46a4      	mov	ip, r4
     27e:	4654      	mov	r4, sl
     280:	4665      	mov	r5, ip
     282:	432c      	orrs	r4, r5
     284:	d003      	beq.n	28e <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
     286:	0034      	movs	r4, r6
     288:	4304      	orrs	r4, r0
     28a:	0022      	movs	r2, r4
     28c:	000b      	movs	r3, r1
		}

		if (r >= d) {
     28e:	9800      	ldr	r0, [sp, #0]
     290:	9901      	ldr	r1, [sp, #4]
     292:	4299      	cmp	r1, r3
     294:	d80a      	bhi.n	2ac <_sercom_get_async_baud_val+0x170>
     296:	d101      	bne.n	29c <_sercom_get_async_baud_val+0x160>
     298:	4290      	cmp	r0, r2
     29a:	d807      	bhi.n	2ac <_sercom_get_async_baud_val+0x170>
			r = r - d;
     29c:	9800      	ldr	r0, [sp, #0]
     29e:	9901      	ldr	r1, [sp, #4]
     2a0:	1a12      	subs	r2, r2, r0
     2a2:	418b      	sbcs	r3, r1
			q |= bit_shift;
     2a4:	9902      	ldr	r1, [sp, #8]
     2a6:	4648      	mov	r0, r9
     2a8:	4301      	orrs	r1, r0
     2aa:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     2ac:	3f01      	subs	r7, #1
     2ae:	d2c8      	bcs.n	242 <_sercom_get_async_baud_val+0x106>
     2b0:	9c00      	ldr	r4, [sp, #0]
     2b2:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     2b4:	9902      	ldr	r1, [sp, #8]
     2b6:	9a07      	ldr	r2, [sp, #28]
     2b8:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     2ba:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     2bc:	4910      	ldr	r1, [pc, #64]	; (300 <_sercom_get_async_baud_val+0x1c4>)
     2be:	428b      	cmp	r3, r1
     2c0:	d90b      	bls.n	2da <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     2c2:	9b06      	ldr	r3, [sp, #24]
     2c4:	3301      	adds	r3, #1
     2c6:	b2db      	uxtb	r3, r3
     2c8:	0019      	movs	r1, r3
     2ca:	9306      	str	r3, [sp, #24]
     2cc:	0013      	movs	r3, r2
     2ce:	3301      	adds	r3, #1
     2d0:	9307      	str	r3, [sp, #28]
     2d2:	2908      	cmp	r1, #8
     2d4:	d1ad      	bne.n	232 <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2d6:	2540      	movs	r5, #64	; 0x40
     2d8:	e008      	b.n	2ec <_sercom_get_async_baud_val+0x1b0>
     2da:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     2dc:	9a06      	ldr	r2, [sp, #24]
     2de:	2a08      	cmp	r2, #8
     2e0:	d004      	beq.n	2ec <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     2e2:	0352      	lsls	r2, r2, #13
     2e4:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     2e6:	9b05      	ldr	r3, [sp, #20]
     2e8:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     2ea:	2500      	movs	r5, #0
}
     2ec:	0028      	movs	r0, r5
     2ee:	b009      	add	sp, #36	; 0x24
     2f0:	bc3c      	pop	{r2, r3, r4, r5}
     2f2:	4690      	mov	r8, r2
     2f4:	4699      	mov	r9, r3
     2f6:	46a2      	mov	sl, r4
     2f8:	46ab      	mov	fp, r5
     2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2fc:	00001ce5 	.word	0x00001ce5
     300:	00001fff 	.word	0x00001fff

00000304 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     304:	b510      	push	{r4, lr}
     306:	b082      	sub	sp, #8
     308:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     30a:	4b0e      	ldr	r3, [pc, #56]	; (344 <sercom_set_gclk_generator+0x40>)
     30c:	781b      	ldrb	r3, [r3, #0]
     30e:	2b00      	cmp	r3, #0
     310:	d001      	beq.n	316 <sercom_set_gclk_generator+0x12>
     312:	2900      	cmp	r1, #0
     314:	d00d      	beq.n	332 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     316:	a901      	add	r1, sp, #4
     318:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     31a:	2011      	movs	r0, #17
     31c:	4b0a      	ldr	r3, [pc, #40]	; (348 <sercom_set_gclk_generator+0x44>)
     31e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     320:	2011      	movs	r0, #17
     322:	4b0a      	ldr	r3, [pc, #40]	; (34c <sercom_set_gclk_generator+0x48>)
     324:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     326:	4b07      	ldr	r3, [pc, #28]	; (344 <sercom_set_gclk_generator+0x40>)
     328:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     32a:	2201      	movs	r2, #1
     32c:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     32e:	2000      	movs	r0, #0
     330:	e006      	b.n	340 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     332:	4b04      	ldr	r3, [pc, #16]	; (344 <sercom_set_gclk_generator+0x40>)
     334:	785b      	ldrb	r3, [r3, #1]
     336:	4283      	cmp	r3, r0
     338:	d001      	beq.n	33e <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     33a:	201d      	movs	r0, #29
     33c:	e000      	b.n	340 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     33e:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     340:	b002      	add	sp, #8
     342:	bd10      	pop	{r4, pc}
     344:	20000084 	.word	0x20000084
     348:	000016a5 	.word	0x000016a5
     34c:	00001635 	.word	0x00001635

00000350 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     350:	4b44      	ldr	r3, [pc, #272]	; (464 <_sercom_get_default_pad+0x114>)
     352:	4298      	cmp	r0, r3
     354:	d034      	beq.n	3c0 <_sercom_get_default_pad+0x70>
     356:	d807      	bhi.n	368 <_sercom_get_default_pad+0x18>
     358:	2384      	movs	r3, #132	; 0x84
     35a:	05db      	lsls	r3, r3, #23
     35c:	4298      	cmp	r0, r3
     35e:	d00d      	beq.n	37c <_sercom_get_default_pad+0x2c>
     360:	4b41      	ldr	r3, [pc, #260]	; (468 <_sercom_get_default_pad+0x118>)
     362:	4298      	cmp	r0, r3
     364:	d01b      	beq.n	39e <_sercom_get_default_pad+0x4e>
     366:	e06f      	b.n	448 <_sercom_get_default_pad+0xf8>
     368:	4b40      	ldr	r3, [pc, #256]	; (46c <_sercom_get_default_pad+0x11c>)
     36a:	4298      	cmp	r0, r3
     36c:	d04a      	beq.n	404 <_sercom_get_default_pad+0xb4>
     36e:	4b40      	ldr	r3, [pc, #256]	; (470 <_sercom_get_default_pad+0x120>)
     370:	4298      	cmp	r0, r3
     372:	d058      	beq.n	426 <_sercom_get_default_pad+0xd6>
     374:	4b3f      	ldr	r3, [pc, #252]	; (474 <_sercom_get_default_pad+0x124>)
     376:	4298      	cmp	r0, r3
     378:	d166      	bne.n	448 <_sercom_get_default_pad+0xf8>
     37a:	e032      	b.n	3e2 <_sercom_get_default_pad+0x92>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     37c:	2901      	cmp	r1, #1
     37e:	d006      	beq.n	38e <_sercom_get_default_pad+0x3e>
     380:	2900      	cmp	r1, #0
     382:	d063      	beq.n	44c <_sercom_get_default_pad+0xfc>
     384:	2902      	cmp	r1, #2
     386:	d006      	beq.n	396 <_sercom_get_default_pad+0x46>
     388:	2903      	cmp	r1, #3
     38a:	d006      	beq.n	39a <_sercom_get_default_pad+0x4a>
     38c:	e001      	b.n	392 <_sercom_get_default_pad+0x42>
     38e:	483a      	ldr	r0, [pc, #232]	; (478 <_sercom_get_default_pad+0x128>)
     390:	e067      	b.n	462 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     392:	2000      	movs	r0, #0
     394:	e065      	b.n	462 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     396:	4839      	ldr	r0, [pc, #228]	; (47c <_sercom_get_default_pad+0x12c>)
     398:	e063      	b.n	462 <_sercom_get_default_pad+0x112>
     39a:	4839      	ldr	r0, [pc, #228]	; (480 <_sercom_get_default_pad+0x130>)
     39c:	e061      	b.n	462 <_sercom_get_default_pad+0x112>
     39e:	2901      	cmp	r1, #1
     3a0:	d006      	beq.n	3b0 <_sercom_get_default_pad+0x60>
     3a2:	2900      	cmp	r1, #0
     3a4:	d054      	beq.n	450 <_sercom_get_default_pad+0x100>
     3a6:	2902      	cmp	r1, #2
     3a8:	d006      	beq.n	3b8 <_sercom_get_default_pad+0x68>
     3aa:	2903      	cmp	r1, #3
     3ac:	d006      	beq.n	3bc <_sercom_get_default_pad+0x6c>
     3ae:	e001      	b.n	3b4 <_sercom_get_default_pad+0x64>
     3b0:	4834      	ldr	r0, [pc, #208]	; (484 <_sercom_get_default_pad+0x134>)
     3b2:	e056      	b.n	462 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     3b4:	2000      	movs	r0, #0
     3b6:	e054      	b.n	462 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3b8:	4833      	ldr	r0, [pc, #204]	; (488 <_sercom_get_default_pad+0x138>)
     3ba:	e052      	b.n	462 <_sercom_get_default_pad+0x112>
     3bc:	4833      	ldr	r0, [pc, #204]	; (48c <_sercom_get_default_pad+0x13c>)
     3be:	e050      	b.n	462 <_sercom_get_default_pad+0x112>
     3c0:	2901      	cmp	r1, #1
     3c2:	d006      	beq.n	3d2 <_sercom_get_default_pad+0x82>
     3c4:	2900      	cmp	r1, #0
     3c6:	d045      	beq.n	454 <_sercom_get_default_pad+0x104>
     3c8:	2902      	cmp	r1, #2
     3ca:	d006      	beq.n	3da <_sercom_get_default_pad+0x8a>
     3cc:	2903      	cmp	r1, #3
     3ce:	d006      	beq.n	3de <_sercom_get_default_pad+0x8e>
     3d0:	e001      	b.n	3d6 <_sercom_get_default_pad+0x86>
     3d2:	482f      	ldr	r0, [pc, #188]	; (490 <_sercom_get_default_pad+0x140>)
     3d4:	e045      	b.n	462 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     3d6:	2000      	movs	r0, #0
     3d8:	e043      	b.n	462 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3da:	482e      	ldr	r0, [pc, #184]	; (494 <_sercom_get_default_pad+0x144>)
     3dc:	e041      	b.n	462 <_sercom_get_default_pad+0x112>
     3de:	482e      	ldr	r0, [pc, #184]	; (498 <_sercom_get_default_pad+0x148>)
     3e0:	e03f      	b.n	462 <_sercom_get_default_pad+0x112>
     3e2:	2901      	cmp	r1, #1
     3e4:	d006      	beq.n	3f4 <_sercom_get_default_pad+0xa4>
     3e6:	2900      	cmp	r1, #0
     3e8:	d036      	beq.n	458 <_sercom_get_default_pad+0x108>
     3ea:	2902      	cmp	r1, #2
     3ec:	d006      	beq.n	3fc <_sercom_get_default_pad+0xac>
     3ee:	2903      	cmp	r1, #3
     3f0:	d006      	beq.n	400 <_sercom_get_default_pad+0xb0>
     3f2:	e001      	b.n	3f8 <_sercom_get_default_pad+0xa8>
     3f4:	4829      	ldr	r0, [pc, #164]	; (49c <_sercom_get_default_pad+0x14c>)
     3f6:	e034      	b.n	462 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     3f8:	2000      	movs	r0, #0
     3fa:	e032      	b.n	462 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3fc:	4828      	ldr	r0, [pc, #160]	; (4a0 <_sercom_get_default_pad+0x150>)
     3fe:	e030      	b.n	462 <_sercom_get_default_pad+0x112>
     400:	4828      	ldr	r0, [pc, #160]	; (4a4 <_sercom_get_default_pad+0x154>)
     402:	e02e      	b.n	462 <_sercom_get_default_pad+0x112>
     404:	2901      	cmp	r1, #1
     406:	d006      	beq.n	416 <_sercom_get_default_pad+0xc6>
     408:	2900      	cmp	r1, #0
     40a:	d027      	beq.n	45c <_sercom_get_default_pad+0x10c>
     40c:	2902      	cmp	r1, #2
     40e:	d006      	beq.n	41e <_sercom_get_default_pad+0xce>
     410:	2903      	cmp	r1, #3
     412:	d006      	beq.n	422 <_sercom_get_default_pad+0xd2>
     414:	e001      	b.n	41a <_sercom_get_default_pad+0xca>
     416:	4824      	ldr	r0, [pc, #144]	; (4a8 <_sercom_get_default_pad+0x158>)
     418:	e023      	b.n	462 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     41a:	2000      	movs	r0, #0
     41c:	e021      	b.n	462 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     41e:	4823      	ldr	r0, [pc, #140]	; (4ac <_sercom_get_default_pad+0x15c>)
     420:	e01f      	b.n	462 <_sercom_get_default_pad+0x112>
     422:	4823      	ldr	r0, [pc, #140]	; (4b0 <_sercom_get_default_pad+0x160>)
     424:	e01d      	b.n	462 <_sercom_get_default_pad+0x112>
     426:	2901      	cmp	r1, #1
     428:	d006      	beq.n	438 <_sercom_get_default_pad+0xe8>
     42a:	2900      	cmp	r1, #0
     42c:	d018      	beq.n	460 <_sercom_get_default_pad+0x110>
     42e:	2902      	cmp	r1, #2
     430:	d006      	beq.n	440 <_sercom_get_default_pad+0xf0>
     432:	2903      	cmp	r1, #3
     434:	d006      	beq.n	444 <_sercom_get_default_pad+0xf4>
     436:	e001      	b.n	43c <_sercom_get_default_pad+0xec>
     438:	481e      	ldr	r0, [pc, #120]	; (4b4 <_sercom_get_default_pad+0x164>)
     43a:	e012      	b.n	462 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     43c:	2000      	movs	r0, #0
     43e:	e010      	b.n	462 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     440:	481d      	ldr	r0, [pc, #116]	; (4b8 <_sercom_get_default_pad+0x168>)
     442:	e00e      	b.n	462 <_sercom_get_default_pad+0x112>
     444:	481d      	ldr	r0, [pc, #116]	; (4bc <_sercom_get_default_pad+0x16c>)
     446:	e00c      	b.n	462 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     448:	2000      	movs	r0, #0
     44a:	e00a      	b.n	462 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     44c:	481c      	ldr	r0, [pc, #112]	; (4c0 <_sercom_get_default_pad+0x170>)
     44e:	e008      	b.n	462 <_sercom_get_default_pad+0x112>
     450:	2003      	movs	r0, #3
     452:	e006      	b.n	462 <_sercom_get_default_pad+0x112>
     454:	481b      	ldr	r0, [pc, #108]	; (4c4 <_sercom_get_default_pad+0x174>)
     456:	e004      	b.n	462 <_sercom_get_default_pad+0x112>
     458:	481b      	ldr	r0, [pc, #108]	; (4c8 <_sercom_get_default_pad+0x178>)
     45a:	e002      	b.n	462 <_sercom_get_default_pad+0x112>
     45c:	481b      	ldr	r0, [pc, #108]	; (4cc <_sercom_get_default_pad+0x17c>)
     45e:	e000      	b.n	462 <_sercom_get_default_pad+0x112>
     460:	481b      	ldr	r0, [pc, #108]	; (4d0 <_sercom_get_default_pad+0x180>)
	}

	Assert(false);
	return 0;
}
     462:	4770      	bx	lr
     464:	42000800 	.word	0x42000800
     468:	42000400 	.word	0x42000400
     46c:	42001000 	.word	0x42001000
     470:	43000400 	.word	0x43000400
     474:	42000c00 	.word	0x42000c00
     478:	00050003 	.word	0x00050003
     47c:	00060003 	.word	0x00060003
     480:	00070003 	.word	0x00070003
     484:	00010003 	.word	0x00010003
     488:	001e0003 	.word	0x001e0003
     48c:	001f0003 	.word	0x001f0003
     490:	00090003 	.word	0x00090003
     494:	000a0003 	.word	0x000a0003
     498:	000b0003 	.word	0x000b0003
     49c:	00110003 	.word	0x00110003
     4a0:	00120003 	.word	0x00120003
     4a4:	00130003 	.word	0x00130003
     4a8:	000d0003 	.word	0x000d0003
     4ac:	000e0003 	.word	0x000e0003
     4b0:	000f0003 	.word	0x000f0003
     4b4:	00170003 	.word	0x00170003
     4b8:	00180003 	.word	0x00180003
     4bc:	00190003 	.word	0x00190003
     4c0:	00040003 	.word	0x00040003
     4c4:	00080003 	.word	0x00080003
     4c8:	00100003 	.word	0x00100003
     4cc:	000c0003 	.word	0x000c0003
     4d0:	00160003 	.word	0x00160003

000004d4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     4d4:	b530      	push	{r4, r5, lr}
     4d6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     4d8:	4b0c      	ldr	r3, [pc, #48]	; (50c <_sercom_get_sercom_inst_index+0x38>)
     4da:	466a      	mov	r2, sp
     4dc:	cb32      	ldmia	r3!, {r1, r4, r5}
     4de:	c232      	stmia	r2!, {r1, r4, r5}
     4e0:	cb32      	ldmia	r3!, {r1, r4, r5}
     4e2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     4e4:	9b00      	ldr	r3, [sp, #0]
     4e6:	4283      	cmp	r3, r0
     4e8:	d006      	beq.n	4f8 <_sercom_get_sercom_inst_index+0x24>
     4ea:	2301      	movs	r3, #1
     4ec:	009a      	lsls	r2, r3, #2
     4ee:	4669      	mov	r1, sp
     4f0:	5852      	ldr	r2, [r2, r1]
     4f2:	4282      	cmp	r2, r0
     4f4:	d103      	bne.n	4fe <_sercom_get_sercom_inst_index+0x2a>
     4f6:	e000      	b.n	4fa <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4f8:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     4fa:	b2d8      	uxtb	r0, r3
     4fc:	e003      	b.n	506 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4fe:	3301      	adds	r3, #1
     500:	2b06      	cmp	r3, #6
     502:	d1f3      	bne.n	4ec <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     504:	2000      	movs	r0, #0
}
     506:	b007      	add	sp, #28
     508:	bd30      	pop	{r4, r5, pc}
     50a:	46c0      	nop			; (mov r8, r8)
     50c:	00002d74 	.word	0x00002d74

00000510 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     510:	b5f0      	push	{r4, r5, r6, r7, lr}
     512:	4647      	mov	r7, r8
     514:	b480      	push	{r7}
     516:	000c      	movs	r4, r1
     518:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     51a:	2800      	cmp	r0, #0
     51c:	d10d      	bne.n	53a <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
     51e:	2a00      	cmp	r2, #0
     520:	dd0e      	ble.n	540 <_read+0x30>
     522:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     524:	4e08      	ldr	r6, [pc, #32]	; (548 <_read+0x38>)
     526:	4d09      	ldr	r5, [pc, #36]	; (54c <_read+0x3c>)
     528:	6830      	ldr	r0, [r6, #0]
     52a:	0021      	movs	r1, r4
     52c:	682b      	ldr	r3, [r5, #0]
     52e:	4798      	blx	r3
		ptr++;
     530:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     532:	42a7      	cmp	r7, r4
     534:	d1f8      	bne.n	528 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     536:	4640      	mov	r0, r8
     538:	e003      	b.n	542 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     53a:	2001      	movs	r0, #1
     53c:	4240      	negs	r0, r0
     53e:	e000      	b.n	542 <_read+0x32>
	}

	for (; len > 0; --len) {
     540:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     542:	bc04      	pop	{r2}
     544:	4690      	mov	r8, r2
     546:	bdf0      	pop	{r4, r5, r6, r7, pc}
     548:	200000e0 	.word	0x200000e0
     54c:	200000d8 	.word	0x200000d8

00000550 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     550:	b5f0      	push	{r4, r5, r6, r7, lr}
     552:	4647      	mov	r7, r8
     554:	b480      	push	{r7}
     556:	000e      	movs	r6, r1
     558:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     55a:	3801      	subs	r0, #1
     55c:	2802      	cmp	r0, #2
     55e:	d811      	bhi.n	584 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
     560:	2a00      	cmp	r2, #0
     562:	d012      	beq.n	58a <_write+0x3a>
     564:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     566:	4b0c      	ldr	r3, [pc, #48]	; (598 <_write+0x48>)
     568:	4698      	mov	r8, r3
     56a:	4f0c      	ldr	r7, [pc, #48]	; (59c <_write+0x4c>)
     56c:	4643      	mov	r3, r8
     56e:	6818      	ldr	r0, [r3, #0]
     570:	5d31      	ldrb	r1, [r6, r4]
     572:	683b      	ldr	r3, [r7, #0]
     574:	4798      	blx	r3
     576:	2800      	cmp	r0, #0
     578:	db09      	blt.n	58e <_write+0x3e>
			return -1;
		}
		++nChars;
     57a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     57c:	42a5      	cmp	r5, r4
     57e:	d1f5      	bne.n	56c <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
     580:	0020      	movs	r0, r4
     582:	e006      	b.n	592 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     584:	2001      	movs	r0, #1
     586:	4240      	negs	r0, r0
     588:	e003      	b.n	592 <_write+0x42>
	}

	for (; len != 0; --len) {
     58a:	2000      	movs	r0, #0
     58c:	e001      	b.n	592 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     58e:	2001      	movs	r0, #1
     590:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
     592:	bc04      	pop	{r2}
     594:	4690      	mov	r8, r2
     596:	bdf0      	pop	{r4, r5, r6, r7, pc}
     598:	200000e0 	.word	0x200000e0
     59c:	200000dc 	.word	0x200000dc

000005a0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     5a2:	465f      	mov	r7, fp
     5a4:	4656      	mov	r6, sl
     5a6:	464d      	mov	r5, r9
     5a8:	4644      	mov	r4, r8
     5aa:	b4f0      	push	{r4, r5, r6, r7}
     5ac:	b091      	sub	sp, #68	; 0x44
     5ae:	0005      	movs	r5, r0
     5b0:	000c      	movs	r4, r1
     5b2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     5b4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5b6:	0008      	movs	r0, r1
     5b8:	4bc4      	ldr	r3, [pc, #784]	; (8cc <usart_init+0x32c>)
     5ba:	4798      	blx	r3
     5bc:	1e02      	subs	r2, r0, #0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
     5be:	2a05      	cmp	r2, #5
     5c0:	d003      	beq.n	5ca <usart_init+0x2a>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     5c2:	0007      	movs	r7, r0
     5c4:	3712      	adds	r7, #18
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     5c6:	0003      	movs	r3, r0
     5c8:	e001      	b.n	5ce <usart_init+0x2e>
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     5ca:	2718      	movs	r7, #24
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
     5cc:	2301      	movs	r3, #1
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     5ce:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     5d0:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     5d2:	07c9      	lsls	r1, r1, #31
     5d4:	d500      	bpl.n	5d8 <usart_init+0x38>
     5d6:	e171      	b.n	8bc <usart_init+0x31c>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     5d8:	6821      	ldr	r1, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     5da:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     5dc:	0789      	lsls	r1, r1, #30
     5de:	d500      	bpl.n	5e2 <usart_init+0x42>
     5e0:	e16c      	b.n	8bc <usart_init+0x31c>
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
     5e2:	2a05      	cmp	r2, #5
     5e4:	d107      	bne.n	5f6 <usart_init+0x56>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     5e6:	48ba      	ldr	r0, [pc, #744]	; (8d0 <usart_init+0x330>)
     5e8:	6a02      	ldr	r2, [r0, #32]
     5ea:	2101      	movs	r1, #1
     5ec:	4099      	lsls	r1, r3
     5ee:	000b      	movs	r3, r1
     5f0:	4313      	orrs	r3, r2
     5f2:	6203      	str	r3, [r0, #32]
     5f4:	e006      	b.n	604 <usart_init+0x64>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     5f6:	48b6      	ldr	r0, [pc, #728]	; (8d0 <usart_init+0x330>)
     5f8:	69c2      	ldr	r2, [r0, #28]
     5fa:	2101      	movs	r1, #1
     5fc:	4099      	lsls	r1, r3
     5fe:	000b      	movs	r3, r1
     600:	4313      	orrs	r3, r2
     602:	61c3      	str	r3, [r0, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     604:	a90f      	add	r1, sp, #60	; 0x3c
     606:	232d      	movs	r3, #45	; 0x2d
     608:	4698      	mov	r8, r3
     60a:	5cf3      	ldrb	r3, [r6, r3]
     60c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     60e:	b2ff      	uxtb	r7, r7
     610:	0038      	movs	r0, r7
     612:	4bb0      	ldr	r3, [pc, #704]	; (8d4 <usart_init+0x334>)
     614:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     616:	0038      	movs	r0, r7
     618:	4baf      	ldr	r3, [pc, #700]	; (8d8 <usart_init+0x338>)
     61a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     61c:	4643      	mov	r3, r8
     61e:	5cf0      	ldrb	r0, [r6, r3]
     620:	2100      	movs	r1, #0
     622:	4bae      	ldr	r3, [pc, #696]	; (8dc <usart_init+0x33c>)
     624:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     626:	7af3      	ldrb	r3, [r6, #11]
     628:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     62a:	2324      	movs	r3, #36	; 0x24
     62c:	5cf3      	ldrb	r3, [r6, r3]
     62e:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     630:	2325      	movs	r3, #37	; 0x25
     632:	5cf3      	ldrb	r3, [r6, r3]
     634:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     636:	7ef3      	ldrb	r3, [r6, #27]
     638:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     63a:	7f33      	ldrb	r3, [r6, #28]
     63c:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     63e:	682b      	ldr	r3, [r5, #0]
     640:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     642:	0018      	movs	r0, r3
     644:	4ba1      	ldr	r3, [pc, #644]	; (8cc <usart_init+0x32c>)
     646:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     648:	3012      	adds	r0, #18
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     64a:	2200      	movs	r2, #0
     64c:	230e      	movs	r3, #14
     64e:	a906      	add	r1, sp, #24
     650:	468c      	mov	ip, r1
     652:	4463      	add	r3, ip
     654:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     656:	8a32      	ldrh	r2, [r6, #16]
     658:	9202      	str	r2, [sp, #8]
     65a:	2380      	movs	r3, #128	; 0x80
     65c:	01db      	lsls	r3, r3, #7
     65e:	429a      	cmp	r2, r3
     660:	d01a      	beq.n	698 <usart_init+0xf8>
     662:	d804      	bhi.n	66e <usart_init+0xce>
     664:	2380      	movs	r3, #128	; 0x80
     666:	019b      	lsls	r3, r3, #6
     668:	429a      	cmp	r2, r3
     66a:	d00b      	beq.n	684 <usart_init+0xe4>
     66c:	e107      	b.n	87e <usart_init+0x2de>
     66e:	23c0      	movs	r3, #192	; 0xc0
     670:	01db      	lsls	r3, r3, #7
     672:	9a02      	ldr	r2, [sp, #8]
     674:	429a      	cmp	r2, r3
     676:	d00a      	beq.n	68e <usart_init+0xee>
     678:	2380      	movs	r3, #128	; 0x80
     67a:	021b      	lsls	r3, r3, #8
     67c:	429a      	cmp	r2, r3
     67e:	d100      	bne.n	682 <usart_init+0xe2>
     680:	e102      	b.n	888 <usart_init+0x2e8>
     682:	e0fc      	b.n	87e <usart_init+0x2de>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     684:	2310      	movs	r3, #16
     686:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     688:	3b0f      	subs	r3, #15
     68a:	9307      	str	r3, [sp, #28]
     68c:	e100      	b.n	890 <usart_init+0x2f0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     68e:	2308      	movs	r3, #8
     690:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     692:	3b07      	subs	r3, #7
     694:	9307      	str	r3, [sp, #28]
     696:	e0fb      	b.n	890 <usart_init+0x2f0>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     698:	6833      	ldr	r3, [r6, #0]
     69a:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
     69c:	68f3      	ldr	r3, [r6, #12]
     69e:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     6a0:	6973      	ldr	r3, [r6, #20]
     6a2:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     6a4:	7e33      	ldrb	r3, [r6, #24]
     6a6:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     6a8:	2326      	movs	r3, #38	; 0x26
     6aa:	5cf3      	ldrb	r3, [r6, r3]
     6ac:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     6ae:	6873      	ldr	r3, [r6, #4]
     6b0:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     6b2:	2b00      	cmp	r3, #0
     6b4:	d016      	beq.n	6e4 <usart_init+0x144>
     6b6:	2380      	movs	r3, #128	; 0x80
     6b8:	055b      	lsls	r3, r3, #21
     6ba:	459a      	cmp	sl, r3
     6bc:	d139      	bne.n	732 <usart_init+0x192>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     6be:	2327      	movs	r3, #39	; 0x27
     6c0:	5cf3      	ldrb	r3, [r6, r3]
     6c2:	2b00      	cmp	r3, #0
     6c4:	d139      	bne.n	73a <usart_init+0x19a>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     6c6:	6a33      	ldr	r3, [r6, #32]
     6c8:	001f      	movs	r7, r3
     6ca:	b2c0      	uxtb	r0, r0
     6cc:	4b84      	ldr	r3, [pc, #528]	; (8e0 <usart_init+0x340>)
     6ce:	4798      	blx	r3
     6d0:	0001      	movs	r1, r0
     6d2:	220e      	movs	r2, #14
     6d4:	ab06      	add	r3, sp, #24
     6d6:	469c      	mov	ip, r3
     6d8:	4462      	add	r2, ip
     6da:	0038      	movs	r0, r7
     6dc:	4b81      	ldr	r3, [pc, #516]	; (8e4 <usart_init+0x344>)
     6de:	4798      	blx	r3
     6e0:	0003      	movs	r3, r0
     6e2:	e027      	b.n	734 <usart_init+0x194>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     6e4:	2308      	movs	r3, #8
     6e6:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     6e8:	2300      	movs	r3, #0
     6ea:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     6ec:	2327      	movs	r3, #39	; 0x27
     6ee:	5cf3      	ldrb	r3, [r6, r3]
     6f0:	2b00      	cmp	r3, #0
     6f2:	d00c      	beq.n	70e <usart_init+0x16e>
				status_code =
     6f4:	9b06      	ldr	r3, [sp, #24]
     6f6:	9300      	str	r3, [sp, #0]
     6f8:	9b07      	ldr	r3, [sp, #28]
     6fa:	220e      	movs	r2, #14
     6fc:	a906      	add	r1, sp, #24
     6fe:	468c      	mov	ip, r1
     700:	4462      	add	r2, ip
     702:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     704:	6a30      	ldr	r0, [r6, #32]
     706:	4f78      	ldr	r7, [pc, #480]	; (8e8 <usart_init+0x348>)
     708:	47b8      	blx	r7
     70a:	0003      	movs	r3, r0
     70c:	e012      	b.n	734 <usart_init+0x194>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     70e:	6a33      	ldr	r3, [r6, #32]
     710:	001f      	movs	r7, r3
     712:	b2c0      	uxtb	r0, r0
     714:	4b72      	ldr	r3, [pc, #456]	; (8e0 <usart_init+0x340>)
     716:	4798      	blx	r3
     718:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     71a:	9b06      	ldr	r3, [sp, #24]
     71c:	9300      	str	r3, [sp, #0]
     71e:	9b07      	ldr	r3, [sp, #28]
     720:	220e      	movs	r2, #14
     722:	a806      	add	r0, sp, #24
     724:	4684      	mov	ip, r0
     726:	4462      	add	r2, ip
     728:	0038      	movs	r0, r7
     72a:	4f6f      	ldr	r7, [pc, #444]	; (8e8 <usart_init+0x348>)
     72c:	47b8      	blx	r7
     72e:	0003      	movs	r3, r0
     730:	e000      	b.n	734 <usart_init+0x194>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     732:	2300      	movs	r3, #0
     734:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     736:	d000      	beq.n	73a <usart_init+0x19a>
     738:	e0c0      	b.n	8bc <usart_init+0x31c>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     73a:	7e73      	ldrb	r3, [r6, #25]
     73c:	2b00      	cmp	r3, #0
     73e:	d002      	beq.n	746 <usart_init+0x1a6>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     740:	7eb3      	ldrb	r3, [r6, #26]
     742:	464a      	mov	r2, r9
     744:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     746:	682a      	ldr	r2, [r5, #0]
     748:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     74a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     74c:	2b00      	cmp	r3, #0
     74e:	d1fc      	bne.n	74a <usart_init+0x1aa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     750:	330e      	adds	r3, #14
     752:	aa06      	add	r2, sp, #24
     754:	4694      	mov	ip, r2
     756:	4463      	add	r3, ip
     758:	881b      	ldrh	r3, [r3, #0]
     75a:	464a      	mov	r2, r9
     75c:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     75e:	9b04      	ldr	r3, [sp, #16]
     760:	465a      	mov	r2, fp
     762:	4313      	orrs	r3, r2
     764:	9a03      	ldr	r2, [sp, #12]
     766:	4313      	orrs	r3, r2
     768:	4652      	mov	r2, sl
     76a:	4313      	orrs	r3, r2
     76c:	433b      	orrs	r3, r7
     76e:	4642      	mov	r2, r8
     770:	0212      	lsls	r2, r2, #8
     772:	4313      	orrs	r3, r2
     774:	9a05      	ldr	r2, [sp, #20]
     776:	0757      	lsls	r7, r2, #29
     778:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     77a:	2327      	movs	r3, #39	; 0x27
     77c:	5cf3      	ldrb	r3, [r6, r3]
     77e:	2b00      	cmp	r3, #0
     780:	d101      	bne.n	786 <usart_init+0x1e6>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     782:	3304      	adds	r3, #4
     784:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     786:	7e71      	ldrb	r1, [r6, #25]
     788:	0289      	lsls	r1, r1, #10
     78a:	7f33      	ldrb	r3, [r6, #28]
     78c:	025b      	lsls	r3, r3, #9
     78e:	4319      	orrs	r1, r3
     790:	7f73      	ldrb	r3, [r6, #29]
     792:	021b      	lsls	r3, r3, #8
     794:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     796:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     798:	5cf3      	ldrb	r3, [r6, r3]
     79a:	045b      	lsls	r3, r3, #17
     79c:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     79e:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     7a0:	5cf2      	ldrb	r2, [r6, r3]
     7a2:	0412      	lsls	r2, r2, #16
     7a4:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     7a6:	7af3      	ldrb	r3, [r6, #11]
     7a8:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     7aa:	8933      	ldrh	r3, [r6, #8]
     7ac:	2bff      	cmp	r3, #255	; 0xff
     7ae:	d004      	beq.n	7ba <usart_init+0x21a>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     7b0:	2280      	movs	r2, #128	; 0x80
     7b2:	0452      	lsls	r2, r2, #17
     7b4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     7b6:	4319      	orrs	r1, r3
     7b8:	e005      	b.n	7c6 <usart_init+0x226>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     7ba:	7ef3      	ldrb	r3, [r6, #27]
     7bc:	2b00      	cmp	r3, #0
     7be:	d002      	beq.n	7c6 <usart_init+0x226>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     7c0:	2380      	movs	r3, #128	; 0x80
     7c2:	04db      	lsls	r3, r3, #19
     7c4:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     7c6:	232c      	movs	r3, #44	; 0x2c
     7c8:	5cf3      	ldrb	r3, [r6, r3]
     7ca:	2b00      	cmp	r3, #0
     7cc:	d103      	bne.n	7d6 <usart_init+0x236>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     7ce:	4b47      	ldr	r3, [pc, #284]	; (8ec <usart_init+0x34c>)
     7d0:	789b      	ldrb	r3, [r3, #2]
     7d2:	079b      	lsls	r3, r3, #30
     7d4:	d501      	bpl.n	7da <usart_init+0x23a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     7d6:	2380      	movs	r3, #128	; 0x80
     7d8:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     7da:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     7dc:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     7de:	2b00      	cmp	r3, #0
     7e0:	d1fc      	bne.n	7dc <usart_init+0x23c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     7e2:	464b      	mov	r3, r9
     7e4:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     7e6:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     7e8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     7ea:	2b00      	cmp	r3, #0
     7ec:	d1fc      	bne.n	7e8 <usart_init+0x248>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     7ee:	464b      	mov	r3, r9
     7f0:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     7f2:	ab0e      	add	r3, sp, #56	; 0x38
     7f4:	2280      	movs	r2, #128	; 0x80
     7f6:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7f8:	2200      	movs	r2, #0
     7fa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     7fc:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     7fe:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     800:	6b33      	ldr	r3, [r6, #48]	; 0x30
     802:	930a      	str	r3, [sp, #40]	; 0x28
     804:	6b73      	ldr	r3, [r6, #52]	; 0x34
     806:	930b      	str	r3, [sp, #44]	; 0x2c
     808:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     80a:	930c      	str	r3, [sp, #48]	; 0x30
     80c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     80e:	9302      	str	r3, [sp, #8]
     810:	930d      	str	r3, [sp, #52]	; 0x34
     812:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     814:	ae0e      	add	r6, sp, #56	; 0x38
     816:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     818:	00bb      	lsls	r3, r7, #2
     81a:	aa0a      	add	r2, sp, #40	; 0x28
     81c:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     81e:	2800      	cmp	r0, #0
     820:	d102      	bne.n	828 <usart_init+0x288>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     822:	0020      	movs	r0, r4
     824:	4b32      	ldr	r3, [pc, #200]	; (8f0 <usart_init+0x350>)
     826:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     828:	1c43      	adds	r3, r0, #1
     82a:	d005      	beq.n	838 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     82c:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     82e:	0c00      	lsrs	r0, r0, #16
     830:	b2c0      	uxtb	r0, r0
     832:	0031      	movs	r1, r6
     834:	4b2f      	ldr	r3, [pc, #188]	; (8f4 <usart_init+0x354>)
     836:	4798      	blx	r3
     838:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     83a:	2f04      	cmp	r7, #4
     83c:	d1eb      	bne.n	816 <usart_init+0x276>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     83e:	2300      	movs	r3, #0
     840:	60eb      	str	r3, [r5, #12]
     842:	612b      	str	r3, [r5, #16]
     844:	616b      	str	r3, [r5, #20]
     846:	61ab      	str	r3, [r5, #24]
     848:	61eb      	str	r3, [r5, #28]
     84a:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     84c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     84e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     850:	2200      	movs	r2, #0
     852:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     854:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     856:	3330      	adds	r3, #48	; 0x30
     858:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     85a:	3301      	adds	r3, #1
     85c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     85e:	3301      	adds	r3, #1
     860:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     862:	3301      	adds	r3, #1
     864:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     866:	6828      	ldr	r0, [r5, #0]
     868:	4b18      	ldr	r3, [pc, #96]	; (8cc <usart_init+0x32c>)
     86a:	4798      	blx	r3
     86c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     86e:	4922      	ldr	r1, [pc, #136]	; (8f8 <usart_init+0x358>)
     870:	4b22      	ldr	r3, [pc, #136]	; (8fc <usart_init+0x35c>)
     872:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     874:	00a4      	lsls	r4, r4, #2
     876:	4b22      	ldr	r3, [pc, #136]	; (900 <usart_init+0x360>)
     878:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     87a:	2000      	movs	r0, #0
     87c:	e01e      	b.n	8bc <usart_init+0x31c>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     87e:	2310      	movs	r3, #16
     880:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     882:	2300      	movs	r3, #0
     884:	9307      	str	r3, [sp, #28]
     886:	e003      	b.n	890 <usart_init+0x2f0>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     888:	2303      	movs	r3, #3
     88a:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     88c:	2300      	movs	r3, #0
     88e:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     890:	6833      	ldr	r3, [r6, #0]
     892:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
     894:	68f3      	ldr	r3, [r6, #12]
     896:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     898:	6973      	ldr	r3, [r6, #20]
     89a:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     89c:	7e33      	ldrb	r3, [r6, #24]
     89e:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     8a0:	2326      	movs	r3, #38	; 0x26
     8a2:	5cf3      	ldrb	r3, [r6, r3]
     8a4:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     8a6:	6873      	ldr	r3, [r6, #4]
     8a8:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     8aa:	2b00      	cmp	r3, #0
     8ac:	d100      	bne.n	8b0 <usart_init+0x310>
     8ae:	e71d      	b.n	6ec <usart_init+0x14c>
     8b0:	2380      	movs	r3, #128	; 0x80
     8b2:	055b      	lsls	r3, r3, #21
     8b4:	459a      	cmp	sl, r3
     8b6:	d100      	bne.n	8ba <usart_init+0x31a>
     8b8:	e701      	b.n	6be <usart_init+0x11e>
     8ba:	e73e      	b.n	73a <usart_init+0x19a>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     8bc:	b011      	add	sp, #68	; 0x44
     8be:	bc3c      	pop	{r2, r3, r4, r5}
     8c0:	4690      	mov	r8, r2
     8c2:	4699      	mov	r9, r3
     8c4:	46a2      	mov	sl, r4
     8c6:	46ab      	mov	fp, r5
     8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	000004d5 	.word	0x000004d5
     8d0:	40000400 	.word	0x40000400
     8d4:	000016a5 	.word	0x000016a5
     8d8:	00001635 	.word	0x00001635
     8dc:	00000305 	.word	0x00000305
     8e0:	000016c9 	.word	0x000016c9
     8e4:	00000115 	.word	0x00000115
     8e8:	0000013d 	.word	0x0000013d
     8ec:	41002000 	.word	0x41002000
     8f0:	00000351 	.word	0x00000351
     8f4:	000017a1 	.word	0x000017a1
     8f8:	000009a1 	.word	0x000009a1
     8fc:	00000b31 	.word	0x00000b31
     900:	200000e4 	.word	0x200000e4

00000904 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     904:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     906:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     908:	2a00      	cmp	r2, #0
     90a:	d00e      	beq.n	92a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     90c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     90e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     910:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     912:	2a00      	cmp	r2, #0
     914:	d109      	bne.n	92a <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     916:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     918:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     91a:	2a00      	cmp	r2, #0
     91c:	d1fc      	bne.n	918 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     91e:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     920:	2102      	movs	r1, #2
     922:	7e1a      	ldrb	r2, [r3, #24]
     924:	420a      	tst	r2, r1
     926:	d0fc      	beq.n	922 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     928:	2300      	movs	r3, #0
}
     92a:	0018      	movs	r0, r3
     92c:	4770      	bx	lr
     92e:	46c0      	nop			; (mov r8, r8)

00000930 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     930:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     932:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     934:	2a00      	cmp	r2, #0
     936:	d030      	beq.n	99a <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     938:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     93a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     93c:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     93e:	2a00      	cmp	r2, #0
     940:	d12b      	bne.n	99a <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     942:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     944:	7e10      	ldrb	r0, [r2, #24]
     946:	0740      	lsls	r0, r0, #29
     948:	d527      	bpl.n	99a <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     94a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     94c:	2b00      	cmp	r3, #0
     94e:	d1fc      	bne.n	94a <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     950:	8b53      	ldrh	r3, [r2, #26]
     952:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     954:	0698      	lsls	r0, r3, #26
     956:	d01d      	beq.n	994 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     958:	0798      	lsls	r0, r3, #30
     95a:	d503      	bpl.n	964 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     95c:	2302      	movs	r3, #2
     95e:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
     960:	3318      	adds	r3, #24
     962:	e01a      	b.n	99a <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     964:	0758      	lsls	r0, r3, #29
     966:	d503      	bpl.n	970 <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     968:	2304      	movs	r3, #4
     96a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
     96c:	331a      	adds	r3, #26
     96e:	e014      	b.n	99a <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     970:	07d8      	lsls	r0, r3, #31
     972:	d503      	bpl.n	97c <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     974:	2301      	movs	r3, #1
     976:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
     978:	3312      	adds	r3, #18
     97a:	e00e      	b.n	99a <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     97c:	06d8      	lsls	r0, r3, #27
     97e:	d503      	bpl.n	988 <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     980:	2310      	movs	r3, #16
     982:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
     984:	3332      	adds	r3, #50	; 0x32
     986:	e008      	b.n	99a <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     988:	069b      	lsls	r3, r3, #26
     98a:	d503      	bpl.n	994 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     98c:	2320      	movs	r3, #32
     98e:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
     990:	3321      	adds	r3, #33	; 0x21
     992:	e002      	b.n	99a <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     994:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     996:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     998:	2300      	movs	r3, #0
}
     99a:	0018      	movs	r0, r3
     99c:	4770      	bx	lr
     99e:	46c0      	nop			; (mov r8, r8)

000009a0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     9a2:	0080      	lsls	r0, r0, #2
     9a4:	4b60      	ldr	r3, [pc, #384]	; (b28 <_usart_interrupt_handler+0x188>)
     9a6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     9a8:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     9aa:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     9ac:	2b00      	cmp	r3, #0
     9ae:	d1fc      	bne.n	9aa <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     9b0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     9b2:	7da6      	ldrb	r6, [r4, #22]
     9b4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     9b6:	2330      	movs	r3, #48	; 0x30
     9b8:	5ceb      	ldrb	r3, [r5, r3]
     9ba:	2231      	movs	r2, #49	; 0x31
     9bc:	5caf      	ldrb	r7, [r5, r2]
     9be:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     9c0:	07f3      	lsls	r3, r6, #31
     9c2:	d522      	bpl.n	a0a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     9c4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     9c6:	b29b      	uxth	r3, r3
     9c8:	2b00      	cmp	r3, #0
     9ca:	d01c      	beq.n	a06 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     9cc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     9ce:	7813      	ldrb	r3, [r2, #0]
     9d0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     9d2:	1c51      	adds	r1, r2, #1
     9d4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     9d6:	7969      	ldrb	r1, [r5, #5]
     9d8:	2901      	cmp	r1, #1
     9da:	d001      	beq.n	9e0 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     9dc:	b29b      	uxth	r3, r3
     9de:	e004      	b.n	9ea <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     9e0:	7851      	ldrb	r1, [r2, #1]
     9e2:	0209      	lsls	r1, r1, #8
     9e4:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     9e6:	3202      	adds	r2, #2
     9e8:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     9ea:	05db      	lsls	r3, r3, #23
     9ec:	0ddb      	lsrs	r3, r3, #23
     9ee:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     9f0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     9f2:	3b01      	subs	r3, #1
     9f4:	b29b      	uxth	r3, r3
     9f6:	85eb      	strh	r3, [r5, #46]	; 0x2e
     9f8:	2b00      	cmp	r3, #0
     9fa:	d106      	bne.n	a0a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     9fc:	3301      	adds	r3, #1
     9fe:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     a00:	3301      	adds	r3, #1
     a02:	75a3      	strb	r3, [r4, #22]
     a04:	e001      	b.n	a0a <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     a06:	2301      	movs	r3, #1
     a08:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     a0a:	07b3      	lsls	r3, r6, #30
     a0c:	d509      	bpl.n	a22 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     a0e:	2302      	movs	r3, #2
     a10:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     a12:	2200      	movs	r2, #0
     a14:	3331      	adds	r3, #49	; 0x31
     a16:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     a18:	07fb      	lsls	r3, r7, #31
     a1a:	d502      	bpl.n	a22 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     a1c:	0028      	movs	r0, r5
     a1e:	68eb      	ldr	r3, [r5, #12]
     a20:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     a22:	0773      	lsls	r3, r6, #29
     a24:	d560      	bpl.n	ae8 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
     a26:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     a28:	b29b      	uxth	r3, r3
     a2a:	2b00      	cmp	r3, #0
     a2c:	d05a      	beq.n	ae4 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a2e:	8b63      	ldrh	r3, [r4, #26]
     a30:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     a32:	071a      	lsls	r2, r3, #28
     a34:	d402      	bmi.n	a3c <_usart_interrupt_handler+0x9c>
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a36:	223f      	movs	r2, #63	; 0x3f
     a38:	4013      	ands	r3, r2
     a3a:	e001      	b.n	a40 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     a3c:	2237      	movs	r2, #55	; 0x37
     a3e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     a40:	2b00      	cmp	r3, #0
     a42:	d02d      	beq.n	aa0 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     a44:	079a      	lsls	r2, r3, #30
     a46:	d505      	bpl.n	a54 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     a48:	221a      	movs	r2, #26
     a4a:	2332      	movs	r3, #50	; 0x32
     a4c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     a4e:	3b30      	subs	r3, #48	; 0x30
     a50:	8363      	strh	r3, [r4, #26]
     a52:	e01f      	b.n	a94 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     a54:	075a      	lsls	r2, r3, #29
     a56:	d505      	bpl.n	a64 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     a58:	221e      	movs	r2, #30
     a5a:	2332      	movs	r3, #50	; 0x32
     a5c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     a5e:	3b2e      	subs	r3, #46	; 0x2e
     a60:	8363      	strh	r3, [r4, #26]
     a62:	e017      	b.n	a94 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a64:	07da      	lsls	r2, r3, #31
     a66:	d505      	bpl.n	a74 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     a68:	2213      	movs	r2, #19
     a6a:	2332      	movs	r3, #50	; 0x32
     a6c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     a6e:	3b31      	subs	r3, #49	; 0x31
     a70:	8363      	strh	r3, [r4, #26]
     a72:	e00f      	b.n	a94 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     a74:	06da      	lsls	r2, r3, #27
     a76:	d505      	bpl.n	a84 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     a78:	2242      	movs	r2, #66	; 0x42
     a7a:	2332      	movs	r3, #50	; 0x32
     a7c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     a7e:	3b22      	subs	r3, #34	; 0x22
     a80:	8363      	strh	r3, [r4, #26]
     a82:	e007      	b.n	a94 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     a84:	2220      	movs	r2, #32
     a86:	421a      	tst	r2, r3
     a88:	d004      	beq.n	a94 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     a8a:	3221      	adds	r2, #33	; 0x21
     a8c:	2332      	movs	r3, #50	; 0x32
     a8e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     a90:	3b12      	subs	r3, #18
     a92:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     a94:	077b      	lsls	r3, r7, #29
     a96:	d527      	bpl.n	ae8 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     a98:	0028      	movs	r0, r5
     a9a:	696b      	ldr	r3, [r5, #20]
     a9c:	4798      	blx	r3
     a9e:	e023      	b.n	ae8 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     aa0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     aa2:	05db      	lsls	r3, r3, #23
     aa4:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     aa6:	b2da      	uxtb	r2, r3
     aa8:	6a69      	ldr	r1, [r5, #36]	; 0x24
     aaa:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     aac:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     aae:	1c51      	adds	r1, r2, #1
     ab0:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     ab2:	7969      	ldrb	r1, [r5, #5]
     ab4:	2901      	cmp	r1, #1
     ab6:	d104      	bne.n	ac2 <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     ab8:	0a1b      	lsrs	r3, r3, #8
     aba:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     abc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     abe:	3301      	adds	r3, #1
     ac0:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     ac2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     ac4:	3b01      	subs	r3, #1
     ac6:	b29b      	uxth	r3, r3
     ac8:	85ab      	strh	r3, [r5, #44]	; 0x2c
     aca:	2b00      	cmp	r3, #0
     acc:	d10c      	bne.n	ae8 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     ace:	3304      	adds	r3, #4
     ad0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     ad2:	2200      	movs	r2, #0
     ad4:	332e      	adds	r3, #46	; 0x2e
     ad6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     ad8:	07bb      	lsls	r3, r7, #30
     ada:	d505      	bpl.n	ae8 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     adc:	0028      	movs	r0, r5
     ade:	692b      	ldr	r3, [r5, #16]
     ae0:	4798      	blx	r3
     ae2:	e001      	b.n	ae8 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     ae4:	2304      	movs	r3, #4
     ae6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     ae8:	06f3      	lsls	r3, r6, #27
     aea:	d507      	bpl.n	afc <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     aec:	2310      	movs	r3, #16
     aee:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     af0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     af2:	06fb      	lsls	r3, r7, #27
     af4:	d502      	bpl.n	afc <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     af6:	0028      	movs	r0, r5
     af8:	69eb      	ldr	r3, [r5, #28]
     afa:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     afc:	06b3      	lsls	r3, r6, #26
     afe:	d507      	bpl.n	b10 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     b00:	2320      	movs	r3, #32
     b02:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     b04:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     b06:	073b      	lsls	r3, r7, #28
     b08:	d502      	bpl.n	b10 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     b0a:	0028      	movs	r0, r5
     b0c:	69ab      	ldr	r3, [r5, #24]
     b0e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     b10:	0733      	lsls	r3, r6, #28
     b12:	d507      	bpl.n	b24 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     b14:	2308      	movs	r3, #8
     b16:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     b18:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     b1a:	06bb      	lsls	r3, r7, #26
     b1c:	d502      	bpl.n	b24 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     b1e:	6a2b      	ldr	r3, [r5, #32]
     b20:	0028      	movs	r0, r5
     b22:	4798      	blx	r3
		}
	}
#endif
}
     b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b26:	46c0      	nop			; (mov r8, r8)
     b28:	200000e4 	.word	0x200000e4

00000b2c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     b2c:	4770      	bx	lr
     b2e:	46c0      	nop			; (mov r8, r8)

00000b30 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     b30:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     b32:	4b0a      	ldr	r3, [pc, #40]	; (b5c <_sercom_set_handler+0x2c>)
     b34:	781b      	ldrb	r3, [r3, #0]
     b36:	2b00      	cmp	r3, #0
     b38:	d10c      	bne.n	b54 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b3a:	4f09      	ldr	r7, [pc, #36]	; (b60 <_sercom_set_handler+0x30>)
     b3c:	4e09      	ldr	r6, [pc, #36]	; (b64 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     b3e:	4d0a      	ldr	r5, [pc, #40]	; (b68 <_sercom_set_handler+0x38>)
     b40:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b42:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     b44:	195a      	adds	r2, r3, r5
     b46:	6014      	str	r4, [r2, #0]
     b48:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b4a:	2b18      	cmp	r3, #24
     b4c:	d1f9      	bne.n	b42 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     b4e:	2201      	movs	r2, #1
     b50:	4b02      	ldr	r3, [pc, #8]	; (b5c <_sercom_set_handler+0x2c>)
     b52:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     b54:	0080      	lsls	r0, r0, #2
     b56:	4b02      	ldr	r3, [pc, #8]	; (b60 <_sercom_set_handler+0x30>)
     b58:	50c1      	str	r1, [r0, r3]
}
     b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b5c:	20000086 	.word	0x20000086
     b60:	20000088 	.word	0x20000088
     b64:	00000b2d 	.word	0x00000b2d
     b68:	200000e4 	.word	0x200000e4

00000b6c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     b6c:	b510      	push	{r4, lr}
     b6e:	b082      	sub	sp, #8
     b70:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     b72:	2206      	movs	r2, #6
     b74:	4905      	ldr	r1, [pc, #20]	; (b8c <_sercom_get_interrupt_vector+0x20>)
     b76:	4668      	mov	r0, sp
     b78:	4b05      	ldr	r3, [pc, #20]	; (b90 <_sercom_get_interrupt_vector+0x24>)
     b7a:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     b7c:	0020      	movs	r0, r4
     b7e:	4b05      	ldr	r3, [pc, #20]	; (b94 <_sercom_get_interrupt_vector+0x28>)
     b80:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     b82:	466b      	mov	r3, sp
     b84:	5618      	ldrsb	r0, [r3, r0]
}
     b86:	b002      	add	sp, #8
     b88:	bd10      	pop	{r4, pc}
     b8a:	46c0      	nop			; (mov r8, r8)
     b8c:	00002d8c 	.word	0x00002d8c
     b90:	00001d89 	.word	0x00001d89
     b94:	000004d5 	.word	0x000004d5

00000b98 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     b98:	b510      	push	{r4, lr}
     b9a:	4b02      	ldr	r3, [pc, #8]	; (ba4 <SERCOM0_Handler+0xc>)
     b9c:	681b      	ldr	r3, [r3, #0]
     b9e:	2000      	movs	r0, #0
     ba0:	4798      	blx	r3
     ba2:	bd10      	pop	{r4, pc}
     ba4:	20000088 	.word	0x20000088

00000ba8 <SERCOM1_Handler>:
     ba8:	b510      	push	{r4, lr}
     baa:	4b02      	ldr	r3, [pc, #8]	; (bb4 <SERCOM1_Handler+0xc>)
     bac:	685b      	ldr	r3, [r3, #4]
     bae:	2001      	movs	r0, #1
     bb0:	4798      	blx	r3
     bb2:	bd10      	pop	{r4, pc}
     bb4:	20000088 	.word	0x20000088

00000bb8 <SERCOM2_Handler>:
     bb8:	b510      	push	{r4, lr}
     bba:	4b02      	ldr	r3, [pc, #8]	; (bc4 <SERCOM2_Handler+0xc>)
     bbc:	689b      	ldr	r3, [r3, #8]
     bbe:	2002      	movs	r0, #2
     bc0:	4798      	blx	r3
     bc2:	bd10      	pop	{r4, pc}
     bc4:	20000088 	.word	0x20000088

00000bc8 <SERCOM3_Handler>:
     bc8:	b510      	push	{r4, lr}
     bca:	4b02      	ldr	r3, [pc, #8]	; (bd4 <SERCOM3_Handler+0xc>)
     bcc:	68db      	ldr	r3, [r3, #12]
     bce:	2003      	movs	r0, #3
     bd0:	4798      	blx	r3
     bd2:	bd10      	pop	{r4, pc}
     bd4:	20000088 	.word	0x20000088

00000bd8 <SERCOM4_Handler>:
     bd8:	b510      	push	{r4, lr}
     bda:	4b02      	ldr	r3, [pc, #8]	; (be4 <SERCOM4_Handler+0xc>)
     bdc:	691b      	ldr	r3, [r3, #16]
     bde:	2004      	movs	r0, #4
     be0:	4798      	blx	r3
     be2:	bd10      	pop	{r4, pc}
     be4:	20000088 	.word	0x20000088

00000be8 <SERCOM5_Handler>:
     be8:	b510      	push	{r4, lr}
     bea:	4b02      	ldr	r3, [pc, #8]	; (bf4 <SERCOM5_Handler+0xc>)
     bec:	695b      	ldr	r3, [r3, #20]
     bee:	2005      	movs	r0, #5
     bf0:	4798      	blx	r3
     bf2:	bd10      	pop	{r4, pc}
     bf4:	20000088 	.word	0x20000088

00000bf8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     bf8:	4b0c      	ldr	r3, [pc, #48]	; (c2c <cpu_irq_enter_critical+0x34>)
     bfa:	681b      	ldr	r3, [r3, #0]
     bfc:	2b00      	cmp	r3, #0
     bfe:	d110      	bne.n	c22 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     c00:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     c04:	2b00      	cmp	r3, #0
     c06:	d109      	bne.n	c1c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     c08:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     c0a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     c0e:	2200      	movs	r2, #0
     c10:	4b07      	ldr	r3, [pc, #28]	; (c30 <cpu_irq_enter_critical+0x38>)
     c12:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     c14:	3201      	adds	r2, #1
     c16:	4b07      	ldr	r3, [pc, #28]	; (c34 <cpu_irq_enter_critical+0x3c>)
     c18:	701a      	strb	r2, [r3, #0]
     c1a:	e002      	b.n	c22 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     c1c:	2200      	movs	r2, #0
     c1e:	4b05      	ldr	r3, [pc, #20]	; (c34 <cpu_irq_enter_critical+0x3c>)
     c20:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     c22:	4a02      	ldr	r2, [pc, #8]	; (c2c <cpu_irq_enter_critical+0x34>)
     c24:	6813      	ldr	r3, [r2, #0]
     c26:	3301      	adds	r3, #1
     c28:	6013      	str	r3, [r2, #0]
}
     c2a:	4770      	bx	lr
     c2c:	200000a0 	.word	0x200000a0
     c30:	20000000 	.word	0x20000000
     c34:	200000a4 	.word	0x200000a4

00000c38 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     c38:	4b08      	ldr	r3, [pc, #32]	; (c5c <cpu_irq_leave_critical+0x24>)
     c3a:	681a      	ldr	r2, [r3, #0]
     c3c:	3a01      	subs	r2, #1
     c3e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     c40:	681b      	ldr	r3, [r3, #0]
     c42:	2b00      	cmp	r3, #0
     c44:	d109      	bne.n	c5a <cpu_irq_leave_critical+0x22>
     c46:	4b06      	ldr	r3, [pc, #24]	; (c60 <cpu_irq_leave_critical+0x28>)
     c48:	781b      	ldrb	r3, [r3, #0]
     c4a:	2b00      	cmp	r3, #0
     c4c:	d005      	beq.n	c5a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     c4e:	2201      	movs	r2, #1
     c50:	4b04      	ldr	r3, [pc, #16]	; (c64 <cpu_irq_leave_critical+0x2c>)
     c52:	701a      	strb	r2, [r3, #0]
     c54:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     c58:	b662      	cpsie	i
	}
}
     c5a:	4770      	bx	lr
     c5c:	200000a0 	.word	0x200000a0
     c60:	200000a4 	.word	0x200000a4
     c64:	20000000 	.word	0x20000000

00000c68 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     c68:	b5f0      	push	{r4, r5, r6, r7, lr}
     c6a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     c6c:	ac01      	add	r4, sp, #4
     c6e:	2501      	movs	r5, #1
     c70:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     c72:	2700      	movs	r7, #0
     c74:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     c76:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     c78:	0021      	movs	r1, r4
     c7a:	202a      	movs	r0, #42	; 0x2a
     c7c:	4e06      	ldr	r6, [pc, #24]	; (c98 <system_board_init+0x30>)
     c7e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     c80:	2280      	movs	r2, #128	; 0x80
     c82:	00d2      	lsls	r2, r2, #3
     c84:	4b05      	ldr	r3, [pc, #20]	; (c9c <system_board_init+0x34>)
     c86:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     c88:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     c8a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     c8c:	0021      	movs	r1, r4
     c8e:	2002      	movs	r0, #2
     c90:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     c92:	b003      	add	sp, #12
     c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c96:	46c0      	nop			; (mov r8, r8)
     c98:	00001301 	.word	0x00001301
     c9c:	40002880 	.word	0x40002880

00000ca0 <_adc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     ca0:	2000      	movs	r0, #0
     ca2:	4770      	bx	lr

00000ca4 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     ca4:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     ca6:	2300      	movs	r3, #0
     ca8:	2200      	movs	r2, #0
     caa:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     cac:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     cae:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     cb0:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     cb2:	2100      	movs	r1, #0
     cb4:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     cb6:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     cb8:	61c3      	str	r3, [r0, #28]
#if SAMR30
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
     cba:	2401      	movs	r4, #1
     cbc:	7104      	strb	r4, [r0, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     cbe:	24c0      	movs	r4, #192	; 0xc0
     cc0:	0164      	lsls	r4, r4, #5
     cc2:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     cc4:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     cc6:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
     cc8:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
     cca:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
     ccc:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     cce:	242a      	movs	r4, #42	; 0x2a
     cd0:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
     cd2:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
     cd4:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
     cd6:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
     cd8:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
     cda:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
     cdc:	3c06      	subs	r4, #6
     cde:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     ce0:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     ce2:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     ce4:	7541      	strb	r1, [r0, #21]
}
     ce6:	bd10      	pop	{r4, pc}

00000ce8 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
     cea:	464f      	mov	r7, r9
     cec:	b480      	push	{r7}
     cee:	b09a      	sub	sp, #104	; 0x68
     cf0:	0005      	movs	r5, r0
     cf2:	000c      	movs	r4, r1
     cf4:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     cf6:	0008      	movs	r0, r1
     cf8:	4ba9      	ldr	r3, [pc, #676]	; (fa0 <adc_init+0x2b8>)
     cfa:	4798      	blx	r3

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     cfc:	602c      	str	r4, [r5, #0]
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     cfe:	4aa9      	ldr	r2, [pc, #676]	; (fa4 <adc_init+0x2bc>)
     d00:	6a11      	ldr	r1, [r2, #32]
     d02:	2308      	movs	r3, #8
     d04:	430b      	orrs	r3, r1
     d06:	6213      	str	r3, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     d08:	7822      	ldrb	r2, [r4, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     d0a:	2305      	movs	r3, #5
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     d0c:	07d2      	lsls	r2, r2, #31
     d0e:	d500      	bpl.n	d12 <adc_init+0x2a>
     d10:	e1c9      	b.n	10a6 <adc_init+0x3be>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     d12:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     d14:	8c13      	ldrh	r3, [r2, #32]
     d16:	b29b      	uxth	r3, r3
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	while (adc_is_syncing(module_inst)) {
     d18:	2b00      	cmp	r3, #0
     d1a:	d1fb      	bne.n	d14 <adc_init+0x2c>
		/* Wait for synchronization */
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     d1c:	7822      	ldrb	r2, [r4, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     d1e:	331c      	adds	r3, #28

	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     d20:	0792      	lsls	r2, r2, #30
     d22:	d500      	bpl.n	d26 <adc_init+0x3e>
     d24:	e1bf      	b.n	10a6 <adc_init+0x3be>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     d26:	7873      	ldrb	r3, [r6, #1]
     d28:	712b      	strb	r3, [r5, #4]

	/* Make sure the voltage reference is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     d2a:	2b00      	cmp	r3, #0
     d2c:	d104      	bne.n	d38 <adc_init+0x50>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     d2e:	4a9e      	ldr	r2, [pc, #632]	; (fa8 <adc_init+0x2c0>)
     d30:	69d1      	ldr	r1, [r2, #28]
     d32:	3304      	adds	r3, #4
     d34:	430b      	orrs	r3, r1
     d36:	61d3      	str	r3, [r2, #28]
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
		module_inst->callback[i] = NULL;
     d38:	2300      	movs	r3, #0
     d3a:	60ab      	str	r3, [r5, #8]
     d3c:	60eb      	str	r3, [r5, #12]
     d3e:	612b      	str	r3, [r5, #16]
	};

	module_inst->registered_callback_mask = 0;
     d40:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
     d42:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
     d44:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
     d46:	772b      	strb	r3, [r5, #28]

	_adc_instances[instance] = module_inst;
     d48:	0080      	lsls	r0, r0, #2
     d4a:	4b98      	ldr	r3, [pc, #608]	; (fac <adc_init+0x2c4>)
     d4c:	50c5      	str	r5, [r0, r3]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     d4e:	232a      	movs	r3, #42	; 0x2a
     d50:	5cf3      	ldrb	r3, [r6, r3]
     d52:	2b00      	cmp	r3, #0
     d54:	d105      	bne.n	d62 <adc_init+0x7a>
     d56:	7b33      	ldrb	r3, [r6, #12]
     d58:	2b00      	cmp	r3, #0
     d5a:	d102      	bne.n	d62 <adc_init+0x7a>
			!config->freerunning) {
		module_inst->software_trigger = true;
     d5c:	3301      	adds	r3, #1
     d5e:	776b      	strb	r3, [r5, #29]
     d60:	e001      	b.n	d66 <adc_init+0x7e>
	} else {
		module_inst->software_trigger = false;
     d62:	2300      	movs	r3, #0
     d64:	776b      	strb	r3, [r5, #29]
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     d66:	682f      	ldr	r7, [r5, #0]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     d68:	7833      	ldrb	r3, [r6, #0]
     d6a:	466a      	mov	r2, sp
     d6c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     d6e:	4669      	mov	r1, sp
     d70:	201e      	movs	r0, #30
     d72:	4b8f      	ldr	r3, [pc, #572]	; (fb0 <adc_init+0x2c8>)
     d74:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     d76:	201e      	movs	r0, #30
     d78:	4b8e      	ldr	r3, [pc, #568]	; (fb4 <adc_init+0x2cc>)
     d7a:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
     d7c:	7934      	ldrb	r4, [r6, #4]
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30)
	const uint32_t pinmapping[] = {
     d7e:	2260      	movs	r2, #96	; 0x60
     d80:	498d      	ldr	r1, [pc, #564]	; (fb8 <adc_init+0x2d0>)
     d82:	a802      	add	r0, sp, #8
     d84:	4b8d      	ldr	r3, [pc, #564]	; (fbc <adc_init+0x2d4>)
     d86:	4798      	blx	r3
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
     d88:	2c13      	cmp	r4, #19
     d8a:	d80c      	bhi.n	da6 <adc_init+0xbe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     d8c:	00a4      	lsls	r4, r4, #2
     d8e:	ab02      	add	r3, sp, #8
     d90:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d92:	a901      	add	r1, sp, #4
     d94:	2300      	movs	r3, #0
     d96:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     d98:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     d9a:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     d9c:	3301      	adds	r3, #1
     d9e:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     da0:	b2c0      	uxtb	r0, r0
     da2:	4b87      	ldr	r3, [pc, #540]	; (fc0 <adc_init+0x2d8>)
     da4:	4798      	blx	r3
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
	system_gclk_chan_enable(_adc_gclk_ids[index]);

	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);
     da6:	88f4      	ldrh	r4, [r6, #6]
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30)
	const uint32_t pinmapping[] = {
     da8:	2260      	movs	r2, #96	; 0x60
     daa:	4983      	ldr	r1, [pc, #524]	; (fb8 <adc_init+0x2d0>)
     dac:	a802      	add	r0, sp, #8
     dae:	4b83      	ldr	r3, [pc, #524]	; (fbc <adc_init+0x2d4>)
     db0:	4798      	blx	r3
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
     db2:	2c13      	cmp	r4, #19
     db4:	d80c      	bhi.n	dd0 <adc_init+0xe8>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     db6:	00a4      	lsls	r4, r4, #2
     db8:	ab02      	add	r3, sp, #8
     dba:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     dbc:	a901      	add	r1, sp, #4
     dbe:	2300      	movs	r3, #0
     dc0:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     dc2:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     dc4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     dc6:	3301      	adds	r3, #1
     dc8:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     dca:	b2c0      	uxtb	r0, r0
     dcc:	4b7c      	ldr	r3, [pc, #496]	; (fc0 <adc_init+0x2d8>)
     dce:	4798      	blx	r3
     dd0:	2400      	movs	r4, #0
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30)
	const uint32_t pinmapping[] = {
     dd2:	4b7a      	ldr	r3, [pc, #488]	; (fbc <adc_init+0x2d4>)
     dd4:	4699      	mov	r9, r3
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     dd6:	2301      	movs	r3, #1
     dd8:	40a3      	lsls	r3, r4
     dda:	6932      	ldr	r2, [r6, #16]
     ddc:	421a      	tst	r2, r3
     dde:	d012      	beq.n	e06 <adc_init+0x11e>
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30)
	const uint32_t pinmapping[] = {
     de0:	2260      	movs	r2, #96	; 0x60
     de2:	4975      	ldr	r1, [pc, #468]	; (fb8 <adc_init+0x2d0>)
     de4:	a802      	add	r0, sp, #8
     de6:	47c8      	blx	r9
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
     de8:	2c13      	cmp	r4, #19
     dea:	d80c      	bhi.n	e06 <adc_init+0x11e>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     dec:	00a3      	lsls	r3, r4, #2
     dee:	aa02      	add	r2, sp, #8
     df0:	5898      	ldr	r0, [r3, r2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     df2:	a901      	add	r1, sp, #4
     df4:	2300      	movs	r3, #0
     df6:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     df8:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     dfa:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     dfc:	3301      	adds	r3, #1
     dfe:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     e00:	b2c0      	uxtb	r0, r0
     e02:	4b6f      	ldr	r3, [pc, #444]	; (fc0 <adc_init+0x2d8>)
     e04:	4798      	blx	r3
     e06:	3401      	adds	r4, #1
	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     e08:	2c14      	cmp	r4, #20
     e0a:	d1e4      	bne.n	dd6 <adc_init+0xee>
			_adc_configure_ain_pin(index, i);
		}
	}

	/* Configure run in standby and on demand */
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     e0c:	7b73      	ldrb	r3, [r6, #13]
     e0e:	019a      	lsls	r2, r3, #6
     e10:	7bb3      	ldrb	r3, [r6, #14]
     e12:	01db      	lsls	r3, r3, #7
     e14:	4313      	orrs	r3, r2
     e16:	b2db      	uxtb	r3, r3
     e18:	703b      	strb	r3, [r7, #0]
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;

	/* Configure reference */
	adc_module->REFCTRL.reg =
     e1a:	7d33      	ldrb	r3, [r6, #20]
     e1c:	01db      	lsls	r3, r3, #7
     e1e:	7872      	ldrb	r2, [r6, #1]
     e20:	4313      	orrs	r3, r2
     e22:	b2db      	uxtb	r3, r3
     e24:	70bb      	strb	r3, [r7, #2]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
			| (config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     e26:	78f3      	ldrb	r3, [r6, #3]
     e28:	2b34      	cmp	r3, #52	; 0x34
     e2a:	d900      	bls.n	e2e <adc_init+0x146>
     e2c:	e13a      	b.n	10a4 <adc_init+0x3bc>
     e2e:	009b      	lsls	r3, r3, #2
     e30:	4a64      	ldr	r2, [pc, #400]	; (fc4 <adc_init+0x2dc>)
     e32:	58d3      	ldr	r3, [r2, r3]
     e34:	469f      	mov	pc, r3
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     e36:	2004      	movs	r0, #4
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e38:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     e3a:	2202      	movs	r2, #2
     e3c:	e01a      	b.n	e74 <adc_init+0x18c>

	/* Set adjusting result and number of samples */
	switch (config->resolution) {

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     e3e:	7a72      	ldrb	r2, [r6, #9]
		accumulate = config->accumulate_samples;
     e40:	7a30      	ldrb	r0, [r6, #8]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e42:	2110      	movs	r1, #16
     e44:	e016      	b.n	e74 <adc_init+0x18c>
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     e46:	2006      	movs	r0, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e48:	2110      	movs	r1, #16
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     e4a:	2201      	movs	r2, #1
     e4c:	e012      	b.n	e74 <adc_init+0x18c>
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     e4e:	2008      	movs	r0, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e50:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     e52:	2200      	movs	r2, #0
     e54:	e00e      	b.n	e74 <adc_init+0x18c>
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     e56:	2000      	movs	r0, #0
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     e58:	2130      	movs	r1, #48	; 0x30
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     e5a:	2200      	movs	r2, #0
     e5c:	e00a      	b.n	e74 <adc_init+0x18c>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     e5e:	2000      	movs	r0, #0
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     e60:	2120      	movs	r1, #32
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     e62:	2200      	movs	r2, #0
     e64:	e006      	b.n	e74 <adc_init+0x18c>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     e66:	2000      	movs	r0, #0
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     e68:	2100      	movs	r1, #0
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     e6a:	2200      	movs	r2, #0
     e6c:	e002      	b.n	e74 <adc_init+0x18c>
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     e6e:	2002      	movs	r0, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e70:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     e72:	2201      	movs	r2, #1
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     e74:	0112      	lsls	r2, r2, #4
     e76:	2370      	movs	r3, #112	; 0x70
     e78:	4013      	ands	r3, r2
     e7a:	4303      	orrs	r3, r0
     e7c:	733b      	strb	r3, [r7, #12]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     e7e:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     e80:	8c13      	ldrh	r3, [r2, #32]
     e82:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     e84:	2b00      	cmp	r3, #0
     e86:	d1fb      	bne.n	e80 <adc_init+0x198>
		/* Wait for synchronization */
	}

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     e88:	7d72      	ldrb	r2, [r6, #21]
		return STATUS_ERR_INVALID_ARG;
     e8a:	3317      	adds	r3, #23
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     e8c:	2a3f      	cmp	r2, #63	; 0x3f
     e8e:	d900      	bls.n	e92 <adc_init+0x1aa>
     e90:	e109      	b.n	10a6 <adc_init+0x3be>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     e92:	7bf3      	ldrb	r3, [r6, #15]
     e94:	01db      	lsls	r3, r3, #7
     e96:	431a      	orrs	r2, r3
     e98:	b2d2      	uxtb	r2, r2
     e9a:	737a      	strb	r2, [r7, #13]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     e9c:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     e9e:	8c13      	ldrh	r3, [r2, #32]
     ea0:	b29b      	uxth	r3, r3
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos)
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
	}

	while (adc_is_syncing(module_inst)) {
     ea2:	2b00      	cmp	r3, #0
     ea4:	d1fb      	bne.n	e9e <adc_init+0x1b6>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler;
     ea6:	78b3      	ldrb	r3, [r6, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     ea8:	707b      	strb	r3, [r7, #1]
			config->clock_prescaler;
	adc_module->CTRLC.reg =
			resolution |
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     eaa:	2324      	movs	r3, #36	; 0x24
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler;
	adc_module->CTRLC.reg =
     eac:	5cf2      	ldrb	r2, [r6, r3]
     eae:	00d2      	lsls	r2, r2, #3
     eb0:	7b33      	ldrb	r3, [r6, #12]
     eb2:	009b      	lsls	r3, r3, #2
     eb4:	4313      	orrs	r3, r2
     eb6:	7af2      	ldrb	r2, [r6, #11]
     eb8:	431a      	orrs	r2, r3
     eba:	7ab3      	ldrb	r3, [r6, #10]
     ebc:	005b      	lsls	r3, r3, #1
     ebe:	4313      	orrs	r3, r2
     ec0:	430b      	orrs	r3, r1
     ec2:	817b      	strh	r3, [r7, #10]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     ec4:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     ec6:	8c13      	ldrh	r3, [r2, #32]
     ec8:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);

	while (adc_is_syncing(module_inst)) {
     eca:	2b00      	cmp	r3, #0
     ecc:	d1fb      	bne.n	ec6 <adc_init+0x1de>
		/* Wait for synchronization */
	}

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     ece:	8b32      	ldrh	r2, [r6, #24]
     ed0:	2a00      	cmp	r2, #0
     ed2:	d100      	bne.n	ed6 <adc_init+0x1ee>
     ed4:	e098      	b.n	1008 <adc_init+0x320>
		switch (resolution) {
     ed6:	2910      	cmp	r1, #16
     ed8:	d07a      	beq.n	fd0 <adc_init+0x2e8>
     eda:	d802      	bhi.n	ee2 <adc_init+0x1fa>
     edc:	2900      	cmp	r1, #0
     ede:	d03e      	beq.n	f5e <adc_init+0x276>
     ee0:	e092      	b.n	1008 <adc_init+0x320>
     ee2:	2920      	cmp	r1, #32
     ee4:	d01a      	beq.n	f1c <adc_init+0x234>
     ee6:	2930      	cmp	r1, #48	; 0x30
     ee8:	d000      	beq.n	eec <adc_init+0x204>
     eea:	e08d      	b.n	1008 <adc_init+0x320>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     eec:	7af3      	ldrb	r3, [r6, #11]
     eee:	2b00      	cmp	r3, #0
     ef0:	d00a      	beq.n	f08 <adc_init+0x220>
     ef2:	69f1      	ldr	r1, [r6, #28]
     ef4:	3180      	adds	r1, #128	; 0x80
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     ef6:	2317      	movs	r3, #23

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     ef8:	29ff      	cmp	r1, #255	; 0xff
     efa:	d900      	bls.n	efe <adc_init+0x216>
     efc:	e0d3      	b.n	10a6 <adc_init+0x3be>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     efe:	6a31      	ldr	r1, [r6, #32]
     f00:	3180      	adds	r1, #128	; 0x80
     f02:	29ff      	cmp	r1, #255	; 0xff
     f04:	d900      	bls.n	f08 <adc_init+0x220>
     f06:	e0ce      	b.n	10a6 <adc_init+0x3be>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f08:	2317      	movs	r3, #23
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
     f0a:	69f1      	ldr	r1, [r6, #28]
     f0c:	29ff      	cmp	r1, #255	; 0xff
     f0e:	dd00      	ble.n	f12 <adc_init+0x22a>
     f10:	e0c9      	b.n	10a6 <adc_init+0x3be>
     f12:	6a31      	ldr	r1, [r6, #32]
     f14:	29ff      	cmp	r1, #255	; 0xff
     f16:	dd00      	ble.n	f1a <adc_init+0x232>
     f18:	e0c5      	b.n	10a6 <adc_init+0x3be>
     f1a:	e075      	b.n	1008 <adc_init+0x320>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     f1c:	7af3      	ldrb	r3, [r6, #11]
     f1e:	2b00      	cmp	r3, #0
     f20:	d012      	beq.n	f48 <adc_init+0x260>
     f22:	69f3      	ldr	r3, [r6, #28]
     f24:	2080      	movs	r0, #128	; 0x80
     f26:	0080      	lsls	r0, r0, #2
     f28:	4684      	mov	ip, r0
     f2a:	4463      	add	r3, ip
     f2c:	0019      	movs	r1, r3
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f2e:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     f30:	4825      	ldr	r0, [pc, #148]	; (fc8 <adc_init+0x2e0>)
     f32:	4281      	cmp	r1, r0
     f34:	d900      	bls.n	f38 <adc_init+0x250>
     f36:	e0b6      	b.n	10a6 <adc_init+0x3be>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     f38:	6a33      	ldr	r3, [r6, #32]
     f3a:	4463      	add	r3, ip
     f3c:	0019      	movs	r1, r3
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f3e:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     f40:	4821      	ldr	r0, [pc, #132]	; (fc8 <adc_init+0x2e0>)
     f42:	4281      	cmp	r1, r0
     f44:	d900      	bls.n	f48 <adc_init+0x260>
     f46:	e0ae      	b.n	10a6 <adc_init+0x3be>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f48:	2317      	movs	r3, #23
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
     f4a:	491f      	ldr	r1, [pc, #124]	; (fc8 <adc_init+0x2e0>)
     f4c:	69f0      	ldr	r0, [r6, #28]
     f4e:	4288      	cmp	r0, r1
     f50:	dd00      	ble.n	f54 <adc_init+0x26c>
     f52:	e0a8      	b.n	10a6 <adc_init+0x3be>
     f54:	6a30      	ldr	r0, [r6, #32]
     f56:	4288      	cmp	r0, r1
     f58:	dd00      	ble.n	f5c <adc_init+0x274>
     f5a:	e0a4      	b.n	10a6 <adc_init+0x3be>
     f5c:	e054      	b.n	1008 <adc_init+0x320>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     f5e:	7af3      	ldrb	r3, [r6, #11]
     f60:	2b00      	cmp	r3, #0
     f62:	d012      	beq.n	f8a <adc_init+0x2a2>
     f64:	69f3      	ldr	r3, [r6, #28]
     f66:	2080      	movs	r0, #128	; 0x80
     f68:	0100      	lsls	r0, r0, #4
     f6a:	4684      	mov	ip, r0
     f6c:	4463      	add	r3, ip
     f6e:	0019      	movs	r1, r3
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f70:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     f72:	4816      	ldr	r0, [pc, #88]	; (fcc <adc_init+0x2e4>)
     f74:	4281      	cmp	r1, r0
     f76:	d900      	bls.n	f7a <adc_init+0x292>
     f78:	e095      	b.n	10a6 <adc_init+0x3be>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     f7a:	6a33      	ldr	r3, [r6, #32]
     f7c:	4463      	add	r3, ip
     f7e:	0019      	movs	r1, r3
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f80:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     f82:	4812      	ldr	r0, [pc, #72]	; (fcc <adc_init+0x2e4>)
     f84:	4281      	cmp	r1, r0
     f86:	d900      	bls.n	f8a <adc_init+0x2a2>
     f88:	e08d      	b.n	10a6 <adc_init+0x3be>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f8a:	2317      	movs	r3, #23
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
     f8c:	490f      	ldr	r1, [pc, #60]	; (fcc <adc_init+0x2e4>)
     f8e:	69f0      	ldr	r0, [r6, #28]
     f90:	4288      	cmp	r0, r1
     f92:	dd00      	ble.n	f96 <adc_init+0x2ae>
     f94:	e087      	b.n	10a6 <adc_init+0x3be>
     f96:	6a30      	ldr	r0, [r6, #32]
     f98:	4288      	cmp	r0, r1
     f9a:	dd00      	ble.n	f9e <adc_init+0x2b6>
     f9c:	e083      	b.n	10a6 <adc_init+0x3be>
     f9e:	e033      	b.n	1008 <adc_init+0x320>
     fa0:	00000ca1 	.word	0x00000ca1
     fa4:	40000400 	.word	0x40000400
     fa8:	40001400 	.word	0x40001400
     fac:	200000fc 	.word	0x200000fc
     fb0:	000016a5 	.word	0x000016a5
     fb4:	00001635 	.word	0x00001635
     fb8:	00002e68 	.word	0x00002e68
     fbc:	00001d89 	.word	0x00001d89
     fc0:	000017a1 	.word	0x000017a1
     fc4:	00002d94 	.word	0x00002d94
     fc8:	000003ff 	.word	0x000003ff
     fcc:	00000fff 	.word	0x00000fff
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     fd0:	7af3      	ldrb	r3, [r6, #11]
     fd2:	2b00      	cmp	r3, #0
     fd4:	d010      	beq.n	ff8 <adc_init+0x310>
     fd6:	69f3      	ldr	r3, [r6, #28]
     fd8:	2080      	movs	r0, #128	; 0x80
     fda:	0200      	lsls	r0, r0, #8
     fdc:	4684      	mov	ip, r0
     fde:	4463      	add	r3, ip
     fe0:	0019      	movs	r1, r3
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     fe2:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     fe4:	4832      	ldr	r0, [pc, #200]	; (10b0 <adc_init+0x3c8>)
     fe6:	4281      	cmp	r1, r0
     fe8:	d85d      	bhi.n	10a6 <adc_init+0x3be>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     fea:	6a33      	ldr	r3, [r6, #32]
     fec:	4463      	add	r3, ip
     fee:	0019      	movs	r1, r3
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     ff0:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     ff2:	482f      	ldr	r0, [pc, #188]	; (10b0 <adc_init+0x3c8>)
     ff4:	4281      	cmp	r1, r0
     ff6:	d856      	bhi.n	10a6 <adc_init+0x3be>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     ff8:	2317      	movs	r3, #23
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     ffa:	492d      	ldr	r1, [pc, #180]	; (10b0 <adc_init+0x3c8>)
     ffc:	69f0      	ldr	r0, [r6, #28]
     ffe:	4288      	cmp	r0, r1
    1000:	dc51      	bgt.n	10a6 <adc_init+0x3be>
    1002:	6a30      	ldr	r0, [r6, #32]
    1004:	4288      	cmp	r0, r1
    1006:	dc4e      	bgt.n	10a6 <adc_init+0x3be>
			break;
		}
	}

	/* Configure window mode */
	adc_module->CTRLC.reg |= config->window.window_mode;
    1008:	897b      	ldrh	r3, [r7, #10]
    100a:	431a      	orrs	r2, r3
    100c:	817a      	strh	r2, [r7, #10]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    100e:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    1010:	8c13      	ldrh	r3, [r2, #32]
    1012:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    1014:	2b00      	cmp	r3, #0
    1016:	d1fb      	bne.n	1010 <adc_init+0x328>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
    1018:	8bb3      	ldrh	r3, [r6, #28]
    101a:	81fb      	strh	r3, [r7, #14]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    101c:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    101e:	8c13      	ldrh	r3, [r2, #32]
    1020:	b29b      	uxth	r3, r3
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
    1022:	2b00      	cmp	r3, #0
    1024:	d1fb      	bne.n	101e <adc_init+0x336>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    1026:	8c33      	ldrh	r3, [r6, #32]
    1028:	823b      	strh	r3, [r7, #16]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    102a:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    102c:	8c13      	ldrh	r3, [r2, #32]
    102e:	b29b      	uxth	r3, r3
			ADC_WINUT_WINUT_Pos;

	while (adc_is_syncing(module_inst)) {
    1030:	2b00      	cmp	r3, #0
    1032:	d1fb      	bne.n	102c <adc_init+0x344>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    1034:	7932      	ldrb	r2, [r6, #4]
    1036:	88f3      	ldrh	r3, [r6, #6]
    1038:	4313      	orrs	r3, r2
    103a:	813b      	strh	r3, [r7, #8]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    103c:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    103e:	8c13      	ldrh	r3, [r2, #32]
    1040:	b29b      	uxth	r3, r3
			config->negative_input |
			config->positive_input;

	while (adc_is_syncing(module_inst)) {
    1042:	2b00      	cmp	r3, #0
    1044:	d1fb      	bne.n	103e <adc_init+0x356>
		/* Wait for synchronization */
	}

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    1046:	332a      	adds	r3, #42	; 0x2a
    1048:	5cf3      	ldrb	r3, [r6, r3]
    104a:	70fb      	strb	r3, [r7, #3]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    104c:	2307      	movs	r3, #7
    104e:	713b      	strb	r3, [r7, #4]
			(1 << ADC_INTENCLR_WINMON_Pos) |(1 << ADC_INTENCLR_OVERRUN_Pos)
			| (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    1050:	331d      	adds	r3, #29
    1052:	5cf3      	ldrb	r3, [r6, r3]
    1054:	2b00      	cmp	r3, #0
    1056:	d019      	beq.n	108c <adc_init+0x3a4>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1058:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
			return STATUS_ERR_INVALID_ARG;
    105a:	2317      	movs	r3, #23
			(1 << ADC_INTENCLR_WINMON_Pos) |(1 << ADC_INTENCLR_OVERRUN_Pos)
			| (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    105c:	4915      	ldr	r1, [pc, #84]	; (10b4 <adc_init+0x3cc>)
    105e:	428a      	cmp	r2, r1
    1060:	d821      	bhi.n	10a6 <adc_init+0x3be>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    1062:	827a      	strh	r2, [r7, #18]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1064:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    1066:	8c13      	ldrh	r3, [r2, #32]
    1068:	b29b      	uxth	r3, r3
					ADC_GAINCORR_GAINCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
    106a:	2b00      	cmp	r3, #0
    106c:	d1fb      	bne.n	1066 <adc_init+0x37e>
			/* Wait for synchronization */
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    106e:	8d31      	ldrh	r1, [r6, #40]	; 0x28
    1070:	2380      	movs	r3, #128	; 0x80
    1072:	011b      	lsls	r3, r3, #4
    1074:	18ca      	adds	r2, r1, r3
    1076:	b292      	uxth	r2, r2
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
    1078:	2317      	movs	r3, #23
		while (adc_is_syncing(module_inst)) {
			/* Wait for synchronization */
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    107a:	480e      	ldr	r0, [pc, #56]	; (10b4 <adc_init+0x3cc>)
    107c:	4282      	cmp	r2, r0
    107e:	d812      	bhi.n	10a6 <adc_init+0x3be>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    1080:	82b9      	strh	r1, [r7, #20]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1082:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    1084:	8c13      	ldrh	r3, [r2, #32]
    1086:	b29b      	uxth	r3, r3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
    1088:	2b00      	cmp	r3, #0
    108a:	d1fb      	bne.n	1084 <adc_init+0x39c>
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIASREFBUF(
    108c:	4b0a      	ldr	r3, [pc, #40]	; (10b8 <adc_init+0x3d0>)
    108e:	681b      	ldr	r3, [r3, #0]
			/* Wait for synchronization */
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    1090:	0219      	lsls	r1, r3, #8
    1092:	22e0      	movs	r2, #224	; 0xe0
    1094:	00d2      	lsls	r2, r2, #3
    1096:	400a      	ands	r2, r1
    1098:	069b      	lsls	r3, r3, #26
    109a:	0f5b      	lsrs	r3, r3, #29
    109c:	4313      	orrs	r3, r2
    109e:	85bb      	strh	r3, [r7, #44]	; 0x2c
			) |
			ADC_CALIB_BIASCOMP(
				(*(uint32_t *)_adc_biascomp_addr[index] >> _adc_biascomp_pos[index])
			);

	return STATUS_OK;
    10a0:	2300      	movs	r3, #0
    10a2:	e000      	b.n	10a6 <adc_init+0x3be>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    10a4:	2317      	movs	r3, #23
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
    10a6:	0018      	movs	r0, r3
    10a8:	b01a      	add	sp, #104	; 0x68
    10aa:	bc04      	pop	{r2}
    10ac:	4691      	mov	r9, r2
    10ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10b0:	0000ffff 	.word	0x0000ffff
    10b4:	00000fff 	.word	0x00000fff
    10b8:	00806020 	.word	0x00806020

000010bc <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
    10bc:	b570      	push	{r4, r5, r6, lr}

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
	struct adc_module *module = _adc_instances[instance];
    10be:	4b2d      	ldr	r3, [pc, #180]	; (1174 <ADC_Handler+0xb8>)
    10c0:	681c      	ldr	r4, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    10c2:	6823      	ldr	r3, [r4, #0]
    10c4:	799d      	ldrb	r5, [r3, #6]
    10c6:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
    10c8:	07ea      	lsls	r2, r5, #31
    10ca:	d535      	bpl.n	1138 <ADC_Handler+0x7c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    10cc:	7ee2      	ldrb	r2, [r4, #27]
    10ce:	07d2      	lsls	r2, r2, #31
    10d0:	d532      	bpl.n	1138 <ADC_Handler+0x7c>
    10d2:	7ea2      	ldrb	r2, [r4, #26]
    10d4:	07d2      	lsls	r2, r2, #31
    10d6:	d52f      	bpl.n	1138 <ADC_Handler+0x7c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    10d8:	2201      	movs	r2, #1
    10da:	719a      	strb	r2, [r3, #6]

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    10dc:	6962      	ldr	r2, [r4, #20]
    10de:	1c93      	adds	r3, r2, #2
    10e0:	6163      	str	r3, [r4, #20]
    10e2:	6823      	ldr	r3, [r4, #0]
    10e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    10e6:	b29b      	uxth	r3, r3
    10e8:	8013      	strh	r3, [r2, #0]

			if (--module->remaining_conversions > 0) {
    10ea:	8b23      	ldrh	r3, [r4, #24]
    10ec:	3b01      	subs	r3, #1
    10ee:	b29b      	uxth	r3, r3
    10f0:	8323      	strh	r3, [r4, #24]
    10f2:	2b00      	cmp	r3, #0
    10f4:	d015      	beq.n	1122 <ADC_Handler+0x66>
				if (module->software_trigger == true
    10f6:	7f63      	ldrb	r3, [r4, #29]
    10f8:	2b00      	cmp	r3, #0
    10fa:	d01d      	beq.n	1138 <ADC_Handler+0x7c>
					&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
    10fc:	6822      	ldr	r2, [r4, #0]
    10fe:	79d3      	ldrb	r3, [r2, #7]
    1100:	b25b      	sxtb	r3, r3
    1102:	2b00      	cmp	r3, #0
    1104:	db18      	blt.n	1138 <ADC_Handler+0x7c>
    1106:	8c13      	ldrh	r3, [r2, #32]
    1108:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    110a:	2b00      	cmp	r3, #0
    110c:	d1fb      	bne.n	1106 <ADC_Handler+0x4a>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    110e:	7e11      	ldrb	r1, [r2, #24]
    1110:	3302      	adds	r3, #2
    1112:	430b      	orrs	r3, r1
    1114:	7613      	strb	r3, [r2, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1116:	6822      	ldr	r2, [r4, #0]

	if (adc_module->SYNCBUSY.reg) {
    1118:	8c13      	ldrh	r3, [r2, #32]
    111a:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    111c:	2b00      	cmp	r3, #0
    111e:	d1fb      	bne.n	1118 <ADC_Handler+0x5c>
    1120:	e00a      	b.n	1138 <ADC_Handler+0x7c>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    1122:	7f23      	ldrb	r3, [r4, #28]
    1124:	2b05      	cmp	r3, #5
    1126:	d107      	bne.n	1138 <ADC_Handler+0x7c>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    1128:	2300      	movs	r3, #0
    112a:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    112c:	3301      	adds	r3, #1
    112e:	6822      	ldr	r2, [r4, #0]
    1130:	7113      	strb	r3, [r2, #4]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    1132:	0020      	movs	r0, r4
    1134:	68a3      	ldr	r3, [r4, #8]
    1136:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    1138:	076b      	lsls	r3, r5, #29
    113a:	d50b      	bpl.n	1154 <ADC_Handler+0x98>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    113c:	2304      	movs	r3, #4
    113e:	6822      	ldr	r2, [r4, #0]
    1140:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    1142:	7ee3      	ldrb	r3, [r4, #27]
    1144:	079b      	lsls	r3, r3, #30
    1146:	d505      	bpl.n	1154 <ADC_Handler+0x98>
    1148:	7ea3      	ldrb	r3, [r4, #26]
    114a:	079b      	lsls	r3, r3, #30
    114c:	d502      	bpl.n	1154 <ADC_Handler+0x98>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    114e:	0020      	movs	r0, r4
    1150:	68e3      	ldr	r3, [r4, #12]
    1152:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    1154:	07ab      	lsls	r3, r5, #30
    1156:	d50b      	bpl.n	1170 <ADC_Handler+0xb4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    1158:	2302      	movs	r3, #2
    115a:	6822      	ldr	r2, [r4, #0]
    115c:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    115e:	7ee3      	ldrb	r3, [r4, #27]
    1160:	075b      	lsls	r3, r3, #29
    1162:	d505      	bpl.n	1170 <ADC_Handler+0xb4>
    1164:	7ea3      	ldrb	r3, [r4, #26]
    1166:	075b      	lsls	r3, r3, #29
    1168:	d502      	bpl.n	1170 <ADC_Handler+0xb4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    116a:	6923      	ldr	r3, [r4, #16]
    116c:	0020      	movs	r0, r4
    116e:	4798      	blx	r3
	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
	_adc_interrupt_handler(0);
}
    1170:	bd70      	pop	{r4, r5, r6, pc}
    1172:	46c0      	nop			; (mov r8, r8)
    1174:	200000fc 	.word	0x200000fc

00001178 <adc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1178:	1c93      	adds	r3, r2, #2
    117a:	009b      	lsls	r3, r3, #2
    117c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
    117e:	2301      	movs	r3, #1
    1180:	4093      	lsls	r3, r2
    1182:	7e82      	ldrb	r2, [r0, #26]
    1184:	4313      	orrs	r3, r2
    1186:	7683      	strb	r3, [r0, #26]
}
    1188:	4770      	bx	lr
    118a:	46c0      	nop			; (mov r8, r8)

0000118c <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
    118c:	b510      	push	{r4, lr}
    118e:	0004      	movs	r4, r0
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    1190:	8b03      	ldrh	r3, [r0, #24]
    1192:	b29b      	uxth	r3, r3
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
    1194:	2005      	movs	r0, #5
{
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    1196:	2b00      	cmp	r3, #0
    1198:	d11d      	bne.n	11d6 <adc_read_buffer_job+0x4a>
			module_inst->job_status == STATUS_BUSY){
    119a:	7f23      	ldrb	r3, [r4, #28]
    119c:	b2d8      	uxtb	r0, r3
{
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    119e:	2805      	cmp	r0, #5
    11a0:	d019      	beq.n	11d6 <adc_read_buffer_job+0x4a>
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
	}

	module_inst->job_status = STATUS_BUSY;
    11a2:	2305      	movs	r3, #5
    11a4:	7723      	strb	r3, [r4, #28]
	module_inst->remaining_conversions = samples;
    11a6:	8322      	strh	r2, [r4, #24]
	module_inst->job_buffer = buffer;
    11a8:	6161      	str	r1, [r4, #20]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
    11aa:	3b04      	subs	r3, #4
    11ac:	6822      	ldr	r2, [r4, #0]
    11ae:	7153      	strb	r3, [r2, #5]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);

	if(module_inst->software_trigger == true) {
    11b0:	7f63      	ldrb	r3, [r4, #29]
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
    11b2:	2000      	movs	r0, #0
	module_inst->remaining_conversions = samples;
	module_inst->job_buffer = buffer;

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);

	if(module_inst->software_trigger == true) {
    11b4:	2b00      	cmp	r3, #0
    11b6:	d00e      	beq.n	11d6 <adc_read_buffer_job+0x4a>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    11b8:	6822      	ldr	r2, [r4, #0]
    11ba:	8c13      	ldrh	r3, [r2, #32]
    11bc:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    11be:	2b00      	cmp	r3, #0
    11c0:	d1fb      	bne.n	11ba <adc_read_buffer_job+0x2e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    11c2:	7e11      	ldrb	r1, [r2, #24]
    11c4:	3302      	adds	r3, #2
    11c6:	430b      	orrs	r3, r1
    11c8:	7613      	strb	r3, [r2, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    11ca:	6822      	ldr	r2, [r4, #0]

	if (adc_module->SYNCBUSY.reg) {
    11cc:	8c13      	ldrh	r3, [r2, #32]
    11ce:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    11d0:	2b00      	cmp	r3, #0
    11d2:	d1fb      	bne.n	11cc <adc_read_buffer_job+0x40>
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
    11d4:	2000      	movs	r0, #0
}
    11d6:	bd10      	pop	{r4, pc}

000011d8 <opamp_module_init>:
 */

#include "opamp.h"

void opamp_module_init(void)
{
    11d8:	b500      	push	{lr}
    11da:	b083      	sub	sp, #12
static inline void system_clock_source_osculp32k_get_config_defaults(
		struct system_clock_source_osculp32k_config *const config)
{
	Assert(config);

	config->write_once          = false;
    11dc:	a801      	add	r0, sp, #4
    11de:	2300      	movs	r3, #0
    11e0:	7003      	strb	r3, [r0, #0]
	struct system_clock_source_osculp32k_config config;

	/* Enable the OSCULP32K clock. */
	system_clock_source_osculp32k_get_config_defaults(&config);
	system_clock_source_osculp32k_set_config(&config);
    11e2:	4b09      	ldr	r3, [pc, #36]	; (1208 <opamp_module_init+0x30>)
    11e4:	4798      	blx	r3

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    11e6:	4a09      	ldr	r2, [pc, #36]	; (120c <opamp_module_init+0x34>)
    11e8:	6a11      	ldr	r1, [r2, #32]
    11ea:	2340      	movs	r3, #64	; 0x40
    11ec:	430b      	orrs	r3, r1
    11ee:	6213      	str	r3, [r2, #32]
 * and the OPAMP will be disabled.
 */
static inline void opamp_module_reset(void)
{
	/* Reset OPAMP. */
	OPAMP->CTRLA.reg |= OPAMP_CTRLA_SWRST;
    11f0:	4b07      	ldr	r3, [pc, #28]	; (1210 <opamp_module_init+0x38>)
    11f2:	7819      	ldrb	r1, [r3, #0]
    11f4:	2201      	movs	r2, #1
    11f6:	430a      	orrs	r2, r1
    11f8:	701a      	strb	r2, [r3, #0]
 *
 */
static inline void opamp_module_enable(void)
{
	/* Enable OPAMP. */
	OPAMP->CTRLA.reg |= OPAMP_CTRLA_ENABLE;
    11fa:	7819      	ldrb	r1, [r3, #0]
    11fc:	2202      	movs	r2, #2
    11fe:	430a      	orrs	r2, r1
    1200:	701a      	strb	r2, [r3, #0]
	/* Reset module. */
	opamp_module_reset();

	/* Enable module. */
	opamp_module_enable();
}
    1202:	b003      	add	sp, #12
    1204:	bd00      	pop	{pc}
    1206:	46c0      	nop			; (mov r8, r8)
    1208:	000013b9 	.word	0x000013b9
    120c:	40000400 	.word	0x40000400
    1210:	43001800 	.word	0x43001800

00001214 <opamp2_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->potentiometer_selection = OPAMP_POT_MUX_8R_8R;
    1214:	2380      	movs	r3, #128	; 0x80
    1216:	01db      	lsls	r3, r3, #7
    1218:	8143      	strh	r3, [r0, #10]
	config->r1_enable = false;
    121a:	2300      	movs	r3, #0
    121c:	7303      	strb	r3, [r0, #12]
	config->r2_vcc = false;
    121e:	7343      	strb	r3, [r0, #13]
	config->r2_out = false;
    1220:	7383      	strb	r3, [r0, #14]
	config->on_demand = false;
    1222:	73c3      	strb	r3, [r0, #15]
	config->run_in_standby = false;
    1224:	7403      	strb	r3, [r0, #16]
	config->bias_value = OPAMP_BIAS_MODE_0;
    1226:	7443      	strb	r3, [r0, #17]
	config->analog_out = false;
    1228:	7483      	strb	r3, [r0, #18]
	Assert(config);

	_opamp_get_config_common_defaults(&(config->config_common));

	/* Default configuration values */
	config->negative_input = OPAMP2_NEG_MUX_OUT2;
    122a:	2280      	movs	r2, #128	; 0x80
    122c:	0392      	lsls	r2, r2, #14
    122e:	6002      	str	r2, [r0, #0]
	config->positive_input = OPAMP2_POS_MUX_PIN2;
    1230:	6043      	str	r3, [r0, #4]
	config->r1_connection = OPAMP2_RES1_MUX_GND;
    1232:	23c0      	movs	r3, #192	; 0xc0
    1234:	015b      	lsls	r3, r3, #5
    1236:	8103      	strh	r3, [r0, #8]
}
    1238:	4770      	bx	lr
    123a:	46c0      	nop			; (mov r8, r8)

0000123c <opamp2_set_config>:

void opamp2_set_config(struct opamp2_config *const config)
{
	uint32_t temp = 0;

	if (config->config_common.r1_enable) {
    123c:	7b03      	ldrb	r3, [r0, #12]
		temp |= OPAMP_OPAMPCTRL_RES1EN;
    123e:	1e5a      	subs	r2, r3, #1
    1240:	4193      	sbcs	r3, r2
    1242:	029b      	lsls	r3, r3, #10
	}

	if (config->config_common.r2_vcc) {
    1244:	7b42      	ldrb	r2, [r0, #13]
    1246:	2a00      	cmp	r2, #0
    1248:	d002      	beq.n	1250 <opamp2_set_config+0x14>
		temp |= OPAMP_OPAMPCTRL_RES2VCC;
    124a:	2280      	movs	r2, #128	; 0x80
    124c:	0092      	lsls	r2, r2, #2
    124e:	4313      	orrs	r3, r2
	}

	if (config->config_common.r2_out) {
    1250:	7b82      	ldrb	r2, [r0, #14]
    1252:	2a00      	cmp	r2, #0
    1254:	d002      	beq.n	125c <opamp2_set_config+0x20>
		temp |= OPAMP_OPAMPCTRL_RES2OUT;
    1256:	2280      	movs	r2, #128	; 0x80
    1258:	0052      	lsls	r2, r2, #1
    125a:	4313      	orrs	r3, r2
	}

	if (config->config_common.on_demand) {
    125c:	7bc2      	ldrb	r2, [r0, #15]
    125e:	2a00      	cmp	r2, #0
    1260:	d001      	beq.n	1266 <opamp2_set_config+0x2a>
		temp |= OPAMP_OPAMPCTRL_ONDEMAND;
    1262:	2280      	movs	r2, #128	; 0x80
    1264:	4313      	orrs	r3, r2
	}

	if (config->config_common.run_in_standby) {
    1266:	7c02      	ldrb	r2, [r0, #16]
    1268:	2a00      	cmp	r2, #0
    126a:	d001      	beq.n	1270 <opamp2_set_config+0x34>
		temp |= OPAMP_OPAMPCTRL_RUNSTDBY;
    126c:	2240      	movs	r2, #64	; 0x40
    126e:	4313      	orrs	r3, r2
	}

	if (config->config_common.analog_out) {
    1270:	7c82      	ldrb	r2, [r0, #18]
    1272:	2a00      	cmp	r2, #0
    1274:	d001      	beq.n	127a <opamp2_set_config+0x3e>
		temp |= OPAMP_OPAMPCTRL_ANAOUT;
    1276:	2204      	movs	r2, #4
    1278:	4313      	orrs	r3, r2

	OPAMP->OPAMPCTRL[2].reg = temp |
		config->config_common.potentiometer_selection |
		config->config_common.bias_value |
		config->negative_input |
		config->positive_input|
    127a:	6801      	ldr	r1, [r0, #0]
    127c:	6842      	ldr	r2, [r0, #4]
    127e:	4311      	orrs	r1, r2
    1280:	8942      	ldrh	r2, [r0, #10]
    1282:	430a      	orrs	r2, r1
    1284:	7c41      	ldrb	r1, [r0, #17]
    1286:	430a      	orrs	r2, r1
    1288:	8901      	ldrh	r1, [r0, #8]
    128a:	430a      	orrs	r2, r1
    128c:	4313      	orrs	r3, r2

	if (config->config_common.analog_out) {
		temp |= OPAMP_OPAMPCTRL_ANAOUT;
	}

	OPAMP->OPAMPCTRL[2].reg = temp |
    128e:	4a01      	ldr	r2, [pc, #4]	; (1294 <opamp2_set_config+0x58>)
    1290:	60d3      	str	r3, [r2, #12]
		config->config_common.potentiometer_selection |
		config->config_common.bias_value |
		config->negative_input |
		config->positive_input|
		config->r1_connection;
}
    1292:	4770      	bx	lr
    1294:	43001800 	.word	0x43001800

00001298 <opamp_enable>:
{
	/* Sanity check arguments */
	Assert(number);

	/* Enable the OPAMP */
	if (number == OPAMP_0) {
    1298:	2800      	cmp	r0, #0
    129a:	d105      	bne.n	12a8 <opamp_enable+0x10>
		OPAMP->OPAMPCTRL[0].reg |= OPAMP_OPAMPCTRL_ENABLE;
    129c:	4a0a      	ldr	r2, [pc, #40]	; (12c8 <opamp_enable+0x30>)
    129e:	6851      	ldr	r1, [r2, #4]
    12a0:	2302      	movs	r3, #2
    12a2:	430b      	orrs	r3, r1
    12a4:	6053      	str	r3, [r2, #4]
    12a6:	e00e      	b.n	12c6 <opamp_enable+0x2e>
	} else if (number == OPAMP_1) {
    12a8:	2801      	cmp	r0, #1
    12aa:	d105      	bne.n	12b8 <opamp_enable+0x20>
		OPAMP->OPAMPCTRL[1].reg |= OPAMP_OPAMPCTRL_ENABLE;
    12ac:	4a06      	ldr	r2, [pc, #24]	; (12c8 <opamp_enable+0x30>)
    12ae:	6891      	ldr	r1, [r2, #8]
    12b0:	2302      	movs	r3, #2
    12b2:	430b      	orrs	r3, r1
    12b4:	6093      	str	r3, [r2, #8]
    12b6:	e006      	b.n	12c6 <opamp_enable+0x2e>
	} else if (number == OPAMP_2) {
    12b8:	2802      	cmp	r0, #2
    12ba:	d104      	bne.n	12c6 <opamp_enable+0x2e>
		OPAMP->OPAMPCTRL[2].reg |= OPAMP_OPAMPCTRL_ENABLE;
    12bc:	4a02      	ldr	r2, [pc, #8]	; (12c8 <opamp_enable+0x30>)
    12be:	68d1      	ldr	r1, [r2, #12]
    12c0:	2302      	movs	r3, #2
    12c2:	430b      	orrs	r3, r1
    12c4:	60d3      	str	r3, [r2, #12]
	}
}
    12c6:	4770      	bx	lr
    12c8:	43001800 	.word	0x43001800

000012cc <opamp_is_ready>:
		OPAMP->OPAMPCTRL[2].reg &= ~OPAMP_OPAMPCTRL_ENABLE;
	}
}

bool opamp_is_ready(const enum opamp_id number)
{
    12cc:	1e03      	subs	r3, r0, #0
	/* Sanity check arguments */
	Assert(number);

	/* Get the OPAMP output ready status*/
	if (number == OPAMP_0) {
    12ce:	d105      	bne.n	12dc <opamp_is_ready+0x10>
		return OPAMP->STATUS.bit.READY0;
    12d0:	4b0a      	ldr	r3, [pc, #40]	; (12fc <opamp_is_ready+0x30>)
    12d2:	7898      	ldrb	r0, [r3, #2]
    12d4:	07c0      	lsls	r0, r0, #31
    12d6:	0fc0      	lsrs	r0, r0, #31
    12d8:	b2c0      	uxtb	r0, r0
    12da:	e00d      	b.n	12f8 <opamp_is_ready+0x2c>
	} else if (number == OPAMP_1) {
    12dc:	2801      	cmp	r0, #1
    12de:	d104      	bne.n	12ea <opamp_is_ready+0x1e>
		return OPAMP->STATUS.bit.READY1;
    12e0:	4b06      	ldr	r3, [pc, #24]	; (12fc <opamp_is_ready+0x30>)
    12e2:	7898      	ldrb	r0, [r3, #2]
    12e4:	0780      	lsls	r0, r0, #30
    12e6:	0fc0      	lsrs	r0, r0, #31
    12e8:	e006      	b.n	12f8 <opamp_is_ready+0x2c>
	} else if (number == OPAMP_2) {
		return OPAMP->STATUS.bit.READY2;
	}

	return false;
    12ea:	2000      	movs	r0, #0
	/* Get the OPAMP output ready status*/
	if (number == OPAMP_0) {
		return OPAMP->STATUS.bit.READY0;
	} else if (number == OPAMP_1) {
		return OPAMP->STATUS.bit.READY1;
	} else if (number == OPAMP_2) {
    12ec:	2b02      	cmp	r3, #2
    12ee:	d103      	bne.n	12f8 <opamp_is_ready+0x2c>
		return OPAMP->STATUS.bit.READY2;
    12f0:	4b02      	ldr	r3, [pc, #8]	; (12fc <opamp_is_ready+0x30>)
    12f2:	7898      	ldrb	r0, [r3, #2]
    12f4:	0740      	lsls	r0, r0, #29
    12f6:	0fc0      	lsrs	r0, r0, #31
	}

	return false;
}
    12f8:	4770      	bx	lr
    12fa:	46c0      	nop			; (mov r8, r8)
    12fc:	43001800 	.word	0x43001800

00001300 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1300:	b500      	push	{lr}
    1302:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1304:	ab01      	add	r3, sp, #4
    1306:	2280      	movs	r2, #128	; 0x80
    1308:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    130a:	780a      	ldrb	r2, [r1, #0]
    130c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    130e:	784a      	ldrb	r2, [r1, #1]
    1310:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1312:	788a      	ldrb	r2, [r1, #2]
    1314:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1316:	0019      	movs	r1, r3
    1318:	4b01      	ldr	r3, [pc, #4]	; (1320 <port_pin_set_config+0x20>)
    131a:	4798      	blx	r3
}
    131c:	b003      	add	sp, #12
    131e:	bd00      	pop	{pc}
    1320:	000017a1 	.word	0x000017a1

00001324 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1324:	b510      	push	{r4, lr}
	switch (clock_source) {
    1326:	2808      	cmp	r0, #8
    1328:	d803      	bhi.n	1332 <system_clock_source_get_hz+0xe>
    132a:	0080      	lsls	r0, r0, #2
    132c:	4b1c      	ldr	r3, [pc, #112]	; (13a0 <system_clock_source_get_hz+0x7c>)
    132e:	581b      	ldr	r3, [r3, r0]
    1330:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    1332:	2000      	movs	r0, #0
    1334:	e032      	b.n	139c <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1336:	4b1b      	ldr	r3, [pc, #108]	; (13a4 <system_clock_source_get_hz+0x80>)
    1338:	6918      	ldr	r0, [r3, #16]
    133a:	e02f      	b.n	139c <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    133c:	4b1a      	ldr	r3, [pc, #104]	; (13a8 <system_clock_source_get_hz+0x84>)
    133e:	7d18      	ldrb	r0, [r3, #20]
    1340:	0700      	lsls	r0, r0, #28
    1342:	0f80      	lsrs	r0, r0, #30
    1344:	3001      	adds	r0, #1
    1346:	4b19      	ldr	r3, [pc, #100]	; (13ac <system_clock_source_get_hz+0x88>)
    1348:	4358      	muls	r0, r3
    134a:	e027      	b.n	139c <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    134c:	4b15      	ldr	r3, [pc, #84]	; (13a4 <system_clock_source_get_hz+0x80>)
    134e:	6958      	ldr	r0, [r3, #20]
    1350:	e024      	b.n	139c <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    1352:	4b14      	ldr	r3, [pc, #80]	; (13a4 <system_clock_source_get_hz+0x80>)
    1354:	681b      	ldr	r3, [r3, #0]
    1356:	2002      	movs	r0, #2
    1358:	4018      	ands	r0, r3
    135a:	d01f      	beq.n	139c <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    135c:	4912      	ldr	r1, [pc, #72]	; (13a8 <system_clock_source_get_hz+0x84>)
    135e:	2280      	movs	r2, #128	; 0x80
    1360:	0052      	lsls	r2, r2, #1
    1362:	68cb      	ldr	r3, [r1, #12]
    1364:	4213      	tst	r3, r2
    1366:	d0fc      	beq.n	1362 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    1368:	4b0e      	ldr	r3, [pc, #56]	; (13a4 <system_clock_source_get_hz+0x80>)
    136a:	681b      	ldr	r3, [r3, #0]
    136c:	075b      	lsls	r3, r3, #29
    136e:	d514      	bpl.n	139a <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1370:	2000      	movs	r0, #0
    1372:	4b0f      	ldr	r3, [pc, #60]	; (13b0 <system_clock_source_get_hz+0x8c>)
    1374:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1376:	4b0b      	ldr	r3, [pc, #44]	; (13a4 <system_clock_source_get_hz+0x80>)
    1378:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    137a:	041b      	lsls	r3, r3, #16
    137c:	0c1b      	lsrs	r3, r3, #16
    137e:	4358      	muls	r0, r3
    1380:	e00c      	b.n	139c <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1382:	2328      	movs	r3, #40	; 0x28
    1384:	4a08      	ldr	r2, [pc, #32]	; (13a8 <system_clock_source_get_hz+0x84>)
    1386:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1388:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    138a:	079b      	lsls	r3, r3, #30
    138c:	d506      	bpl.n	139c <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    138e:	4b05      	ldr	r3, [pc, #20]	; (13a4 <system_clock_source_get_hz+0x80>)
    1390:	68d8      	ldr	r0, [r3, #12]
    1392:	e003      	b.n	139c <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1394:	2080      	movs	r0, #128	; 0x80
    1396:	0200      	lsls	r0, r0, #8
    1398:	e000      	b.n	139c <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    139a:	4806      	ldr	r0, [pc, #24]	; (13b4 <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    139c:	bd10      	pop	{r4, pc}
    139e:	46c0      	nop			; (mov r8, r8)
    13a0:	00002ec8 	.word	0x00002ec8
    13a4:	200000a8 	.word	0x200000a8
    13a8:	40000c00 	.word	0x40000c00
    13ac:	003d0900 	.word	0x003d0900
    13b0:	000016c9 	.word	0x000016c9
    13b4:	02dc6c00 	.word	0x02dc6c00

000013b8 <system_clock_source_osculp32k_set_config>:
 *
 * \param[in] config  OSCULP32K configuration structure containing the new config
 */
void system_clock_source_osculp32k_set_config(
		struct system_clock_source_osculp32k_config *const config)
{
    13b8:	b510      	push	{r4, lr}
	OSC32KCTRL_OSCULP32K_Type temp = OSC32KCTRL->OSCULP32K;
    13ba:	4905      	ldr	r1, [pc, #20]	; (13d0 <system_clock_source_osculp32k_set_config+0x18>)
    13bc:	69cc      	ldr	r4, [r1, #28]
	/* Update settings via a temporary struct to reduce register access */
	temp.bit.WRTLOCK  = config->write_once;
	OSC32KCTRL->OSCULP32K  = temp;
    13be:	7802      	ldrb	r2, [r0, #0]
    13c0:	2301      	movs	r3, #1
    13c2:	401a      	ands	r2, r3
    13c4:	03d2      	lsls	r2, r2, #15
    13c6:	4b03      	ldr	r3, [pc, #12]	; (13d4 <system_clock_source_osculp32k_set_config+0x1c>)
    13c8:	4023      	ands	r3, r4
    13ca:	4313      	orrs	r3, r2
    13cc:	61cb      	str	r3, [r1, #28]
}
    13ce:	bd10      	pop	{r4, pc}
    13d0:	40001000 	.word	0x40001000
    13d4:	ffff7fff 	.word	0xffff7fff

000013d8 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    13d8:	b510      	push	{r4, lr}
    13da:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    13dc:	2280      	movs	r2, #128	; 0x80
    13de:	0052      	lsls	r2, r2, #1
    13e0:	4b2b      	ldr	r3, [pc, #172]	; (1490 <system_clock_init+0xb8>)
    13e2:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    13e4:	3afd      	subs	r2, #253	; 0xfd
    13e6:	4b2b      	ldr	r3, [pc, #172]	; (1494 <system_clock_init+0xbc>)
    13e8:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    13ea:	4a2b      	ldr	r2, [pc, #172]	; (1498 <system_clock_init+0xc0>)
    13ec:	6853      	ldr	r3, [r2, #4]
    13ee:	211e      	movs	r1, #30
    13f0:	438b      	bics	r3, r1
    13f2:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    13f4:	2380      	movs	r3, #128	; 0x80
    13f6:	05db      	lsls	r3, r3, #23
    13f8:	789b      	ldrb	r3, [r3, #2]
    13fa:	2b02      	cmp	r3, #2
    13fc:	d009      	beq.n	1412 <system_clock_init+0x3a>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    13fe:	2380      	movs	r3, #128	; 0x80
    1400:	05db      	lsls	r3, r3, #23
    1402:	2201      	movs	r2, #1
    1404:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    1406:	3201      	adds	r2, #1
    1408:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    140a:	001a      	movs	r2, r3
    140c:	7993      	ldrb	r3, [r2, #6]
    140e:	2b00      	cmp	r3, #0
    1410:	d0fc      	beq.n	140c <system_clock_init+0x34>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    1412:	4b1f      	ldr	r3, [pc, #124]	; (1490 <system_clock_init+0xb8>)
    1414:	7d1a      	ldrb	r2, [r3, #20]
    1416:	2180      	movs	r1, #128	; 0x80
    1418:	4249      	negs	r1, r1
    141a:	430a      	orrs	r2, r1
    141c:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    141e:	7d1a      	ldrb	r2, [r3, #20]
    1420:	31c0      	adds	r1, #192	; 0xc0
    1422:	438a      	bics	r2, r1
    1424:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1426:	4b1d      	ldr	r3, [pc, #116]	; (149c <system_clock_init+0xc4>)
    1428:	4798      	blx	r3
 * \param[in] divider  CPU clock divider
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    142a:	4c1d      	ldr	r4, [pc, #116]	; (14a0 <system_clock_init+0xc8>)
    142c:	2301      	movs	r3, #1
    142e:	71a3      	strb	r3, [r4, #6]
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_low_power_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    1430:	7163      	strb	r3, [r4, #5]
 * \param[in] divider  CPU clock divider
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    1432:	7123      	strb	r3, [r4, #4]
{
#ifdef  MCLK_CTRLA_CFDEN
	if (enable) {
		MCLK->CTRLA.reg |=  MCLK_CTRLA_CFDEN;
	} else {
		MCLK->CTRLA.reg &= ~MCLK_CTRLA_CFDEN;
    1434:	7822      	ldrb	r2, [r4, #0]
    1436:	2104      	movs	r1, #4
    1438:	438a      	bics	r2, r1
    143a:	7022      	strb	r2, [r4, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    143c:	a901      	add	r1, sp, #4
    143e:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    1440:	2300      	movs	r3, #0
    1442:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
    1444:	2206      	movs	r2, #6
    1446:	700a      	strb	r2, [r1, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1448:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    144a:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    144c:	2000      	movs	r0, #0
    144e:	4b15      	ldr	r3, [pc, #84]	; (14a4 <system_clock_init+0xcc>)
    1450:	4798      	blx	r3
    1452:	2000      	movs	r0, #0
    1454:	4b14      	ldr	r3, [pc, #80]	; (14a8 <system_clock_init+0xd0>)
    1456:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    1458:	2000      	movs	r0, #0
    145a:	4b14      	ldr	r3, [pc, #80]	; (14ac <system_clock_init+0xd4>)
    145c:	4798      	blx	r3
    145e:	7921      	ldrb	r1, [r4, #4]
    1460:	b2c9      	uxtb	r1, r1
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    1462:	4b13      	ldr	r3, [pc, #76]	; (14b0 <system_clock_init+0xd8>)
    1464:	4798      	blx	r3
    1466:	4b13      	ldr	r3, [pc, #76]	; (14b4 <system_clock_init+0xdc>)
    1468:	4298      	cmp	r0, r3
    146a:	d80e      	bhi.n	148a <system_clock_init+0xb2>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    146c:	2380      	movs	r3, #128	; 0x80
    146e:	05db      	lsls	r3, r3, #23
    1470:	789b      	ldrb	r3, [r3, #2]
    1472:	2b00      	cmp	r3, #0
    1474:	d009      	beq.n	148a <system_clock_init+0xb2>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    1476:	2380      	movs	r3, #128	; 0x80
    1478:	05db      	lsls	r3, r3, #23
    147a:	2201      	movs	r2, #1
    147c:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    147e:	2200      	movs	r2, #0
    1480:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    1482:	001a      	movs	r2, r3
    1484:	7993      	ldrb	r3, [r2, #6]
    1486:	2b00      	cmp	r3, #0
    1488:	d0fc      	beq.n	1484 <system_clock_init+0xac>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    148a:	b004      	add	sp, #16
    148c:	bd10      	pop	{r4, pc}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	40000c00 	.word	0x40000c00
    1494:	40001400 	.word	0x40001400
    1498:	41004000 	.word	0x41004000
    149c:	000014b9 	.word	0x000014b9
    14a0:	40000400 	.word	0x40000400
    14a4:	000014dd 	.word	0x000014dd
    14a8:	00001589 	.word	0x00001589
    14ac:	000015c9 	.word	0x000015c9
    14b0:	00001bcd 	.word	0x00001bcd
    14b4:	00b71b00 	.word	0x00b71b00

000014b8 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    14b8:	4a06      	ldr	r2, [pc, #24]	; (14d4 <system_gclk_init+0x1c>)
    14ba:	6951      	ldr	r1, [r2, #20]
    14bc:	2340      	movs	r3, #64	; 0x40
    14be:	430b      	orrs	r3, r1
    14c0:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    14c2:	2201      	movs	r2, #1
    14c4:	4b04      	ldr	r3, [pc, #16]	; (14d8 <system_gclk_init+0x20>)
    14c6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    14c8:	0019      	movs	r1, r3
    14ca:	780b      	ldrb	r3, [r1, #0]
    14cc:	4213      	tst	r3, r2
    14ce:	d1fc      	bne.n	14ca <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    14d0:	4770      	bx	lr
    14d2:	46c0      	nop			; (mov r8, r8)
    14d4:	40000400 	.word	0x40000400
    14d8:	40001800 	.word	0x40001800

000014dc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    14dc:	b570      	push	{r4, r5, r6, lr}
    14de:	0005      	movs	r5, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    14e0:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    14e2:	784b      	ldrb	r3, [r1, #1]
    14e4:	2b00      	cmp	r3, #0
    14e6:	d002      	beq.n	14ee <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    14e8:	2380      	movs	r3, #128	; 0x80
    14ea:	00db      	lsls	r3, r3, #3
    14ec:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    14ee:	7a4b      	ldrb	r3, [r1, #9]
    14f0:	2b00      	cmp	r3, #0
    14f2:	d002      	beq.n	14fa <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    14f4:	2380      	movs	r3, #128	; 0x80
    14f6:	011b      	lsls	r3, r3, #4
    14f8:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    14fa:	684a      	ldr	r2, [r1, #4]
    14fc:	2a01      	cmp	r2, #1
    14fe:	d917      	bls.n	1530 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1500:	1e53      	subs	r3, r2, #1
    1502:	421a      	tst	r2, r3
    1504:	d10f      	bne.n	1526 <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1506:	2a02      	cmp	r2, #2
    1508:	d906      	bls.n	1518 <system_gclk_gen_set_config+0x3c>
    150a:	2302      	movs	r3, #2
    150c:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    150e:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1510:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1512:	429a      	cmp	r2, r3
    1514:	d8fb      	bhi.n	150e <system_gclk_gen_set_config+0x32>
    1516:	e000      	b.n	151a <system_gclk_gen_set_config+0x3e>
    1518:	2000      	movs	r0, #0
    151a:	2380      	movs	r3, #128	; 0x80
    151c:	015b      	lsls	r3, r3, #5
    151e:	431c      	orrs	r4, r3
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1520:	0400      	lsls	r0, r0, #16
    1522:	4304      	orrs	r4, r0
    1524:	e004      	b.n	1530 <system_gclk_gen_set_config+0x54>

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1526:	0412      	lsls	r2, r2, #16
    1528:	2380      	movs	r3, #128	; 0x80
    152a:	009b      	lsls	r3, r3, #2
    152c:	431a      	orrs	r2, r3
    152e:	4314      	orrs	r4, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1530:	7a0b      	ldrb	r3, [r1, #8]
    1532:	2b00      	cmp	r3, #0
    1534:	d002      	beq.n	153c <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1536:	2380      	movs	r3, #128	; 0x80
    1538:	019b      	lsls	r3, r3, #6
    153a:	431c      	orrs	r4, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    153c:	2604      	movs	r6, #4
    153e:	40ae      	lsls	r6, r5
    1540:	490d      	ldr	r1, [pc, #52]	; (1578 <system_gclk_gen_set_config+0x9c>)
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    1542:	4a0e      	ldr	r2, [pc, #56]	; (157c <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1544:	684b      	ldr	r3, [r1, #4]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    1546:	4013      	ands	r3, r2
    1548:	421e      	tst	r6, r3
    154a:	d1fb      	bne.n	1544 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    154c:	4b0c      	ldr	r3, [pc, #48]	; (1580 <system_gclk_gen_set_config+0xa4>)
    154e:	4798      	blx	r3
    1550:	00ad      	lsls	r5, r5, #2
    1552:	4b09      	ldr	r3, [pc, #36]	; (1578 <system_gclk_gen_set_config+0x9c>)
    1554:	469c      	mov	ip, r3
    1556:	4465      	add	r5, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    1558:	6a28      	ldr	r0, [r5, #32]
    155a:	2380      	movs	r3, #128	; 0x80
    155c:	005b      	lsls	r3, r3, #1
    155e:	4018      	ands	r0, r3
    1560:	4320      	orrs	r0, r4
    1562:	6228      	str	r0, [r5, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1564:	4661      	mov	r1, ip

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    1566:	4a05      	ldr	r2, [pc, #20]	; (157c <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1568:	684b      	ldr	r3, [r1, #4]

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    156a:	4013      	ands	r3, r2
    156c:	421e      	tst	r6, r3
    156e:	d1fb      	bne.n	1568 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1570:	4b04      	ldr	r3, [pc, #16]	; (1584 <system_gclk_gen_set_config+0xa8>)
    1572:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    1574:	bd70      	pop	{r4, r5, r6, pc}
    1576:	46c0      	nop			; (mov r8, r8)
    1578:	40001800 	.word	0x40001800
    157c:	000007fc 	.word	0x000007fc
    1580:	00000bf9 	.word	0x00000bf9
    1584:	00000c39 	.word	0x00000c39

00001588 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1588:	b510      	push	{r4, lr}
    158a:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    158c:	2204      	movs	r2, #4
    158e:	4082      	lsls	r2, r0
    1590:	4809      	ldr	r0, [pc, #36]	; (15b8 <system_gclk_gen_enable+0x30>)
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    1592:	490a      	ldr	r1, [pc, #40]	; (15bc <system_gclk_gen_enable+0x34>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1594:	6843      	ldr	r3, [r0, #4]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    1596:	400b      	ands	r3, r1
    1598:	421a      	tst	r2, r3
    159a:	d1fb      	bne.n	1594 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    159c:	4b08      	ldr	r3, [pc, #32]	; (15c0 <system_gclk_gen_enable+0x38>)
    159e:	4798      	blx	r3
    15a0:	00a4      	lsls	r4, r4, #2
    15a2:	4b05      	ldr	r3, [pc, #20]	; (15b8 <system_gclk_gen_enable+0x30>)
    15a4:	469c      	mov	ip, r3
    15a6:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    15a8:	6a23      	ldr	r3, [r4, #32]
    15aa:	2280      	movs	r2, #128	; 0x80
    15ac:	0052      	lsls	r2, r2, #1
    15ae:	4313      	orrs	r3, r2
    15b0:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    15b2:	4b04      	ldr	r3, [pc, #16]	; (15c4 <system_gclk_gen_enable+0x3c>)
    15b4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    15b6:	bd10      	pop	{r4, pc}
    15b8:	40001800 	.word	0x40001800
    15bc:	000007fc 	.word	0x000007fc
    15c0:	00000bf9 	.word	0x00000bf9
    15c4:	00000c39 	.word	0x00000c39

000015c8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    15c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15ca:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    15cc:	2204      	movs	r2, #4
    15ce:	4082      	lsls	r2, r0
    15d0:	4812      	ldr	r0, [pc, #72]	; (161c <system_gclk_gen_get_hz+0x54>)
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    15d2:	4913      	ldr	r1, [pc, #76]	; (1620 <system_gclk_gen_get_hz+0x58>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    15d4:	6843      	ldr	r3, [r0, #4]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    15d6:	400b      	ands	r3, r1
    15d8:	421a      	tst	r2, r3
    15da:	d1fb      	bne.n	15d4 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    15dc:	4b11      	ldr	r3, [pc, #68]	; (1624 <system_gclk_gen_get_hz+0x5c>)
    15de:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    15e0:	4f0e      	ldr	r7, [pc, #56]	; (161c <system_gclk_gen_get_hz+0x54>)
    15e2:	3408      	adds	r4, #8
    15e4:	00a4      	lsls	r4, r4, #2
    15e6:	59e0      	ldr	r0, [r4, r7]
    15e8:	06c0      	lsls	r0, r0, #27
    15ea:	0ec0      	lsrs	r0, r0, #27
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    15ec:	4b0e      	ldr	r3, [pc, #56]	; (1628 <system_gclk_gen_get_hz+0x60>)
    15ee:	4798      	blx	r3
    15f0:	0006      	movs	r6, r0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    15f2:	59e5      	ldr	r5, [r4, r7]
    15f4:	04ed      	lsls	r5, r5, #19
    15f6:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    15f8:	59e4      	ldr	r4, [r4, r7]
    15fa:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    15fc:	4b0b      	ldr	r3, [pc, #44]	; (162c <system_gclk_gen_get_hz+0x64>)
    15fe:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1600:	2d00      	cmp	r5, #0
    1602:	d107      	bne.n	1614 <system_gclk_gen_get_hz+0x4c>
    1604:	2c01      	cmp	r4, #1
    1606:	d907      	bls.n	1618 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1608:	0021      	movs	r1, r4
    160a:	0030      	movs	r0, r6
    160c:	4b08      	ldr	r3, [pc, #32]	; (1630 <system_gclk_gen_get_hz+0x68>)
    160e:	4798      	blx	r3
    1610:	0006      	movs	r6, r0
    1612:	e001      	b.n	1618 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1614:	3401      	adds	r4, #1
    1616:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1618:	0030      	movs	r0, r6
    161a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    161c:	40001800 	.word	0x40001800
    1620:	000007fc 	.word	0x000007fc
    1624:	00000bf9 	.word	0x00000bf9
    1628:	00001325 	.word	0x00001325
    162c:	00000c39 	.word	0x00000c39
    1630:	00001bcd 	.word	0x00001bcd

00001634 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1634:	b510      	push	{r4, lr}
    1636:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1638:	4b09      	ldr	r3, [pc, #36]	; (1660 <system_gclk_chan_enable+0x2c>)
    163a:	4798      	blx	r3
    163c:	00a0      	lsls	r0, r4, #2
    163e:	4b09      	ldr	r3, [pc, #36]	; (1664 <system_gclk_chan_enable+0x30>)
    1640:	469c      	mov	ip, r3
    1642:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    1644:	2280      	movs	r2, #128	; 0x80
    1646:	5881      	ldr	r1, [r0, r2]
    1648:	2340      	movs	r3, #64	; 0x40
    164a:	430b      	orrs	r3, r1
    164c:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    164e:	2180      	movs	r1, #128	; 0x80
    1650:	3a40      	subs	r2, #64	; 0x40
    1652:	5843      	ldr	r3, [r0, r1]
    1654:	421a      	tst	r2, r3
    1656:	d0fc      	beq.n	1652 <system_gclk_chan_enable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1658:	4b03      	ldr	r3, [pc, #12]	; (1668 <system_gclk_chan_enable+0x34>)
    165a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    165c:	bd10      	pop	{r4, pc}
    165e:	46c0      	nop			; (mov r8, r8)
    1660:	00000bf9 	.word	0x00000bf9
    1664:	40001800 	.word	0x40001800
    1668:	00000c39 	.word	0x00000c39

0000166c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    166c:	b510      	push	{r4, lr}
    166e:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1670:	4b09      	ldr	r3, [pc, #36]	; (1698 <system_gclk_chan_disable+0x2c>)
    1672:	4798      	blx	r3
    1674:	00a0      	lsls	r0, r4, #2
    1676:	4b09      	ldr	r3, [pc, #36]	; (169c <system_gclk_chan_disable+0x30>)
    1678:	469c      	mov	ip, r3
    167a:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    167c:	2280      	movs	r2, #128	; 0x80
    167e:	5883      	ldr	r3, [r0, r2]
    1680:	2140      	movs	r1, #64	; 0x40
    1682:	438b      	bics	r3, r1
    1684:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    1686:	3140      	adds	r1, #64	; 0x40
    1688:	3a40      	subs	r2, #64	; 0x40
    168a:	5843      	ldr	r3, [r0, r1]
    168c:	421a      	tst	r2, r3
    168e:	d1fc      	bne.n	168a <system_gclk_chan_disable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1690:	4b03      	ldr	r3, [pc, #12]	; (16a0 <system_gclk_chan_disable+0x34>)
    1692:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1694:	bd10      	pop	{r4, pc}
    1696:	46c0      	nop			; (mov r8, r8)
    1698:	00000bf9 	.word	0x00000bf9
    169c:	40001800 	.word	0x40001800
    16a0:	00000c39 	.word	0x00000c39

000016a4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    16a4:	b570      	push	{r4, r5, r6, lr}
    16a6:	0004      	movs	r4, r0
    16a8:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    16aa:	4b05      	ldr	r3, [pc, #20]	; (16c0 <system_gclk_chan_set_config+0x1c>)
    16ac:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    16ae:	782b      	ldrb	r3, [r5, #0]
    16b0:	220f      	movs	r2, #15
    16b2:	4013      	ands	r3, r2
    16b4:	3420      	adds	r4, #32
    16b6:	00a4      	lsls	r4, r4, #2
    16b8:	4a02      	ldr	r2, [pc, #8]	; (16c4 <system_gclk_chan_set_config+0x20>)
    16ba:	50a3      	str	r3, [r4, r2]


}
    16bc:	bd70      	pop	{r4, r5, r6, pc}
    16be:	46c0      	nop			; (mov r8, r8)
    16c0:	0000166d 	.word	0x0000166d
    16c4:	40001800 	.word	0x40001800

000016c8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    16c8:	b510      	push	{r4, lr}
    16ca:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    16cc:	4b06      	ldr	r3, [pc, #24]	; (16e8 <system_gclk_chan_get_hz+0x20>)
    16ce:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    16d0:	3420      	adds	r4, #32
    16d2:	00a4      	lsls	r4, r4, #2
    16d4:	4b05      	ldr	r3, [pc, #20]	; (16ec <system_gclk_chan_get_hz+0x24>)
    16d6:	58e4      	ldr	r4, [r4, r3]
    16d8:	0724      	lsls	r4, r4, #28
    16da:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    16dc:	4b04      	ldr	r3, [pc, #16]	; (16f0 <system_gclk_chan_get_hz+0x28>)
    16de:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    16e0:	0020      	movs	r0, r4
    16e2:	4b04      	ldr	r3, [pc, #16]	; (16f4 <system_gclk_chan_get_hz+0x2c>)
    16e4:	4798      	blx	r3
}
    16e6:	bd10      	pop	{r4, pc}
    16e8:	00000bf9 	.word	0x00000bf9
    16ec:	40001800 	.word	0x40001800
    16f0:	00000c39 	.word	0x00000c39
    16f4:	000015c9 	.word	0x000015c9

000016f8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    16f8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    16fa:	78d3      	ldrb	r3, [r2, #3]
    16fc:	2b00      	cmp	r3, #0
    16fe:	d11e      	bne.n	173e <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1700:	7813      	ldrb	r3, [r2, #0]
    1702:	2b80      	cmp	r3, #128	; 0x80
    1704:	d004      	beq.n	1710 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1706:	061b      	lsls	r3, r3, #24
    1708:	2480      	movs	r4, #128	; 0x80
    170a:	0264      	lsls	r4, r4, #9
    170c:	4323      	orrs	r3, r4
    170e:	e000      	b.n	1712 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1710:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1712:	7854      	ldrb	r4, [r2, #1]
    1714:	2502      	movs	r5, #2
    1716:	43ac      	bics	r4, r5
    1718:	d10a      	bne.n	1730 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    171a:	7894      	ldrb	r4, [r2, #2]
    171c:	2c00      	cmp	r4, #0
    171e:	d103      	bne.n	1728 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1720:	2480      	movs	r4, #128	; 0x80
    1722:	02a4      	lsls	r4, r4, #10
    1724:	4323      	orrs	r3, r4
    1726:	e002      	b.n	172e <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1728:	24c0      	movs	r4, #192	; 0xc0
    172a:	02e4      	lsls	r4, r4, #11
    172c:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    172e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1730:	7854      	ldrb	r4, [r2, #1]
    1732:	3c01      	subs	r4, #1
    1734:	2c01      	cmp	r4, #1
    1736:	d812      	bhi.n	175e <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1738:	4c18      	ldr	r4, [pc, #96]	; (179c <_system_pinmux_config+0xa4>)
    173a:	4023      	ands	r3, r4
    173c:	e00f      	b.n	175e <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    173e:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1740:	040b      	lsls	r3, r1, #16
    1742:	0c1b      	lsrs	r3, r3, #16
    1744:	24a0      	movs	r4, #160	; 0xa0
    1746:	05e4      	lsls	r4, r4, #23
    1748:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    174a:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    174c:	0c0b      	lsrs	r3, r1, #16
    174e:	24d0      	movs	r4, #208	; 0xd0
    1750:	0624      	lsls	r4, r4, #24
    1752:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1754:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1756:	78d3      	ldrb	r3, [r2, #3]
    1758:	2b00      	cmp	r3, #0
    175a:	d018      	beq.n	178e <_system_pinmux_config+0x96>
    175c:	e01c      	b.n	1798 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    175e:	040c      	lsls	r4, r1, #16
    1760:	0c24      	lsrs	r4, r4, #16
    1762:	25a0      	movs	r5, #160	; 0xa0
    1764:	05ed      	lsls	r5, r5, #23
    1766:	432c      	orrs	r4, r5
    1768:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    176a:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    176c:	0c0c      	lsrs	r4, r1, #16
    176e:	25d0      	movs	r5, #208	; 0xd0
    1770:	062d      	lsls	r5, r5, #24
    1772:	432c      	orrs	r4, r5
    1774:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1776:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1778:	78d4      	ldrb	r4, [r2, #3]
    177a:	2c00      	cmp	r4, #0
    177c:	d10c      	bne.n	1798 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    177e:	035b      	lsls	r3, r3, #13
    1780:	d505      	bpl.n	178e <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1782:	7893      	ldrb	r3, [r2, #2]
    1784:	2b01      	cmp	r3, #1
    1786:	d101      	bne.n	178c <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    1788:	6181      	str	r1, [r0, #24]
    178a:	e000      	b.n	178e <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    178c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    178e:	7853      	ldrb	r3, [r2, #1]
    1790:	3b01      	subs	r3, #1
    1792:	2b01      	cmp	r3, #1
    1794:	d800      	bhi.n	1798 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1796:	6081      	str	r1, [r0, #8]
		}
	}
}
    1798:	bd30      	pop	{r4, r5, pc}
    179a:	46c0      	nop			; (mov r8, r8)
    179c:	fffbffff 	.word	0xfffbffff

000017a0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    17a0:	b510      	push	{r4, lr}
    17a2:	0003      	movs	r3, r0
    17a4:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    17a6:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    17a8:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    17aa:	2900      	cmp	r1, #0
    17ac:	d104      	bne.n	17b8 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    17ae:	0958      	lsrs	r0, r3, #5
    17b0:	01c0      	lsls	r0, r0, #7
    17b2:	4905      	ldr	r1, [pc, #20]	; (17c8 <system_pinmux_pin_set_config+0x28>)
    17b4:	468c      	mov	ip, r1
    17b6:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    17b8:	211f      	movs	r1, #31
    17ba:	400b      	ands	r3, r1
    17bc:	391e      	subs	r1, #30
    17be:	4099      	lsls	r1, r3
    17c0:	4b02      	ldr	r3, [pc, #8]	; (17cc <system_pinmux_pin_set_config+0x2c>)
    17c2:	4798      	blx	r3
}
    17c4:	bd10      	pop	{r4, pc}
    17c6:	46c0      	nop			; (mov r8, r8)
    17c8:	40002800 	.word	0x40002800
    17cc:	000016f9 	.word	0x000016f9

000017d0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    17d0:	4770      	bx	lr
    17d2:	46c0      	nop			; (mov r8, r8)

000017d4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    17d4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    17d6:	4b05      	ldr	r3, [pc, #20]	; (17ec <system_init+0x18>)
    17d8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    17da:	4b05      	ldr	r3, [pc, #20]	; (17f0 <system_init+0x1c>)
    17dc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    17de:	4b05      	ldr	r3, [pc, #20]	; (17f4 <system_init+0x20>)
    17e0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    17e2:	4b05      	ldr	r3, [pc, #20]	; (17f8 <system_init+0x24>)
    17e4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    17e6:	4b05      	ldr	r3, [pc, #20]	; (17fc <system_init+0x28>)
    17e8:	4798      	blx	r3
}
    17ea:	bd10      	pop	{r4, pc}
    17ec:	000013d9 	.word	0x000013d9
    17f0:	00000c69 	.word	0x00000c69
    17f4:	000017d1 	.word	0x000017d1
    17f8:	000017d1 	.word	0x000017d1
    17fc:	000017d1 	.word	0x000017d1

00001800 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1800:	e7fe      	b.n	1800 <Dummy_Handler>
    1802:	46c0      	nop			; (mov r8, r8)

00001804 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1804:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1806:	4b1d      	ldr	r3, [pc, #116]	; (187c <Reset_Handler+0x78>)
    1808:	4a1d      	ldr	r2, [pc, #116]	; (1880 <Reset_Handler+0x7c>)
    180a:	429a      	cmp	r2, r3
    180c:	d003      	beq.n	1816 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    180e:	4b1d      	ldr	r3, [pc, #116]	; (1884 <Reset_Handler+0x80>)
    1810:	4a1a      	ldr	r2, [pc, #104]	; (187c <Reset_Handler+0x78>)
    1812:	429a      	cmp	r2, r3
    1814:	d304      	bcc.n	1820 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1816:	4b1c      	ldr	r3, [pc, #112]	; (1888 <Reset_Handler+0x84>)
    1818:	4a1c      	ldr	r2, [pc, #112]	; (188c <Reset_Handler+0x88>)
    181a:	429a      	cmp	r2, r3
    181c:	d310      	bcc.n	1840 <Reset_Handler+0x3c>
    181e:	e01e      	b.n	185e <Reset_Handler+0x5a>
    1820:	4a1b      	ldr	r2, [pc, #108]	; (1890 <Reset_Handler+0x8c>)
    1822:	4b18      	ldr	r3, [pc, #96]	; (1884 <Reset_Handler+0x80>)
    1824:	3303      	adds	r3, #3
    1826:	1a9b      	subs	r3, r3, r2
    1828:	089b      	lsrs	r3, r3, #2
    182a:	3301      	adds	r3, #1
    182c:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    182e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1830:	4812      	ldr	r0, [pc, #72]	; (187c <Reset_Handler+0x78>)
    1832:	4913      	ldr	r1, [pc, #76]	; (1880 <Reset_Handler+0x7c>)
    1834:	588c      	ldr	r4, [r1, r2]
    1836:	5084      	str	r4, [r0, r2]
    1838:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    183a:	429a      	cmp	r2, r3
    183c:	d1fa      	bne.n	1834 <Reset_Handler+0x30>
    183e:	e7ea      	b.n	1816 <Reset_Handler+0x12>
    1840:	4a14      	ldr	r2, [pc, #80]	; (1894 <Reset_Handler+0x90>)
    1842:	4b11      	ldr	r3, [pc, #68]	; (1888 <Reset_Handler+0x84>)
    1844:	3303      	adds	r3, #3
    1846:	1a9b      	subs	r3, r3, r2
    1848:	089b      	lsrs	r3, r3, #2
    184a:	3301      	adds	r3, #1
    184c:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    184e:	2200      	movs	r2, #0
                *pDest++ = 0;
    1850:	480e      	ldr	r0, [pc, #56]	; (188c <Reset_Handler+0x88>)
    1852:	2100      	movs	r1, #0
    1854:	1814      	adds	r4, r2, r0
    1856:	6021      	str	r1, [r4, #0]
    1858:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    185a:	429a      	cmp	r2, r3
    185c:	d1fa      	bne.n	1854 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    185e:	4a0e      	ldr	r2, [pc, #56]	; (1898 <Reset_Handler+0x94>)
    1860:	21ff      	movs	r1, #255	; 0xff
    1862:	4b0e      	ldr	r3, [pc, #56]	; (189c <Reset_Handler+0x98>)
    1864:	438b      	bics	r3, r1
    1866:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1868:	4a0d      	ldr	r2, [pc, #52]	; (18a0 <Reset_Handler+0x9c>)
    186a:	6851      	ldr	r1, [r2, #4]
    186c:	2380      	movs	r3, #128	; 0x80
    186e:	430b      	orrs	r3, r1
    1870:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1872:	4b0c      	ldr	r3, [pc, #48]	; (18a4 <Reset_Handler+0xa0>)
    1874:	4798      	blx	r3

        /* Branch to main function */
        main();
    1876:	4b0c      	ldr	r3, [pc, #48]	; (18a8 <Reset_Handler+0xa4>)
    1878:	4798      	blx	r3
    187a:	e7fe      	b.n	187a <Reset_Handler+0x76>
    187c:	20000000 	.word	0x20000000
    1880:	00002fb0 	.word	0x00002fb0
    1884:	20000068 	.word	0x20000068
    1888:	20000264 	.word	0x20000264
    188c:	20000068 	.word	0x20000068
    1890:	20000004 	.word	0x20000004
    1894:	2000006c 	.word	0x2000006c
    1898:	e000ed00 	.word	0xe000ed00
    189c:	00000000 	.word	0x00000000
    18a0:	41004000 	.word	0x41004000
    18a4:	00001d3d 	.word	0x00001d3d
    18a8:	00001a35 	.word	0x00001a35

000018ac <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    18ac:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    18ae:	4a06      	ldr	r2, [pc, #24]	; (18c8 <_sbrk+0x1c>)
    18b0:	6812      	ldr	r2, [r2, #0]
    18b2:	2a00      	cmp	r2, #0
    18b4:	d102      	bne.n	18bc <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    18b6:	4905      	ldr	r1, [pc, #20]	; (18cc <_sbrk+0x20>)
    18b8:	4a03      	ldr	r2, [pc, #12]	; (18c8 <_sbrk+0x1c>)
    18ba:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    18bc:	4a02      	ldr	r2, [pc, #8]	; (18c8 <_sbrk+0x1c>)
    18be:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    18c0:	18c3      	adds	r3, r0, r3
    18c2:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    18c4:	4770      	bx	lr
    18c6:	46c0      	nop			; (mov r8, r8)
    18c8:	200000c0 	.word	0x200000c0
    18cc:	20002268 	.word	0x20002268

000018d0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    18d0:	2001      	movs	r0, #1
    18d2:	4240      	negs	r0, r0
    18d4:	4770      	bx	lr
    18d6:	46c0      	nop			; (mov r8, r8)

000018d8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    18d8:	2380      	movs	r3, #128	; 0x80
    18da:	019b      	lsls	r3, r3, #6
    18dc:	604b      	str	r3, [r1, #4]

	return 0;
}
    18de:	2000      	movs	r0, #0
    18e0:	4770      	bx	lr
    18e2:	46c0      	nop			; (mov r8, r8)

000018e4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    18e4:	2001      	movs	r0, #1
    18e6:	4770      	bx	lr

000018e8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    18e8:	2000      	movs	r0, #0
    18ea:	4770      	bx	lr

000018ec <adc_complete_callback>:

/* ADC Callback Function */
void adc_complete_callback(struct adc_module *const module)
{
	/* Set ADC conversion ended flag */
	adc_read_done = true;
    18ec:	2201      	movs	r2, #1
    18ee:	4b01      	ldr	r3, [pc, #4]	; (18f4 <adc_complete_callback+0x8>)
    18f0:	701a      	strb	r2, [r3, #0]
}
    18f2:	4770      	bx	lr
    18f4:	200000c4 	.word	0x200000c4

000018f8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    18f8:	b570      	push	{r4, r5, r6, lr}
    18fa:	b082      	sub	sp, #8
    18fc:	0005      	movs	r5, r0
    18fe:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1900:	2200      	movs	r2, #0
    1902:	466b      	mov	r3, sp
    1904:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1906:	4c06      	ldr	r4, [pc, #24]	; (1920 <usart_serial_getchar+0x28>)
    1908:	466b      	mov	r3, sp
    190a:	1d99      	adds	r1, r3, #6
    190c:	0028      	movs	r0, r5
    190e:	47a0      	blx	r4
    1910:	2800      	cmp	r0, #0
    1912:	d1f9      	bne.n	1908 <usart_serial_getchar+0x10>

	*c = temp;
    1914:	466b      	mov	r3, sp
    1916:	3306      	adds	r3, #6
    1918:	881b      	ldrh	r3, [r3, #0]
    191a:	7033      	strb	r3, [r6, #0]
}
    191c:	b002      	add	sp, #8
    191e:	bd70      	pop	{r4, r5, r6, pc}
    1920:	00000931 	.word	0x00000931

00001924 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    1924:	b570      	push	{r4, r5, r6, lr}
    1926:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1928:	b28c      	uxth	r4, r1
    192a:	4e03      	ldr	r6, [pc, #12]	; (1938 <usart_serial_putchar+0x14>)
    192c:	0021      	movs	r1, r4
    192e:	0028      	movs	r0, r5
    1930:	47b0      	blx	r6
    1932:	2800      	cmp	r0, #0
    1934:	d1fa      	bne.n	192c <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    1936:	bd70      	pop	{r4, r5, r6, pc}
    1938:	00000905 	.word	0x00000905

0000193c <configure_opamp2>:
struct adc_module adc_instance;
struct usart_module usart_instance;

/* Configure OPAMP2 and I/O PORT */
void configure_opamp2(void)
{
    193c:	b510      	push	{r4, lr}
    193e:	b086      	sub	sp, #24
	/* Creates a new configuration structure for the OPAMP2. */
	struct opamp2_config conf;

	/* Initializes OPAMP module. */
	opamp_module_init();
    1940:	4b14      	ldr	r3, [pc, #80]	; (1994 <configure_opamp2+0x58>)
    1942:	4798      	blx	r3

	/* Fill with the default settings. */
	opamp2_get_config_defaults(&conf);
    1944:	ac01      	add	r4, sp, #4
    1946:	0020      	movs	r0, r4
    1948:	4b13      	ldr	r3, [pc, #76]	; (1998 <configure_opamp2+0x5c>)
    194a:	4798      	blx	r3

	/* Set the the OPAMP2 in "Non-Inverted PGA" mode, gain of 4 */
	conf.negative_input           = OPAMP2_NEG_MUX_TAP2;
    194c:	2380      	movs	r3, #128	; 0x80
    194e:	035b      	lsls	r3, r3, #13
    1950:	9301      	str	r3, [sp, #4]
	conf.positive_input           = OPAMP2_POS_MUX_PIN2;
    1952:	2200      	movs	r2, #0
    1954:	6062      	str	r2, [r4, #4]
	conf.r1_connection            = OPAMP2_RES1_MUX_GND;
    1956:	23c0      	movs	r3, #192	; 0xc0
    1958:	015b      	lsls	r3, r3, #5
    195a:	8123      	strh	r3, [r4, #8]
	conf.config_common.potentiometer_selection = OPAMP_POT_MUX_12R_4R;
    195c:	2380      	movs	r3, #128	; 0x80
    195e:	019b      	lsls	r3, r3, #6
    1960:	8163      	strh	r3, [r4, #10]
	conf.config_common.r1_enable  = true;
    1962:	2301      	movs	r3, #1
    1964:	7323      	strb	r3, [r4, #12]
	conf.config_common.r2_out     = true;
    1966:	73a3      	strb	r3, [r4, #14]
	conf.config_common.analog_out = true;
    1968:	74a3      	strb	r3, [r4, #18]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    196a:	4669      	mov	r1, sp
    196c:	704a      	strb	r2, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    196e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1970:	70ca      	strb	r2, [r1, #3]

	/* Set up OA2POS pin as input. */
	struct system_pinmux_config opamp2_input_pin_conf;
	system_pinmux_get_config_defaults(&opamp2_input_pin_conf);
	opamp2_input_pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	opamp2_input_pin_conf.mux_position = OPAMP_INPUT_MUX;
    1972:	700b      	strb	r3, [r1, #0]
	system_pinmux_pin_set_config(OPAMP_INPUT_PIN, &opamp2_input_pin_conf);
    1974:	2005      	movs	r0, #5
    1976:	4b09      	ldr	r3, [pc, #36]	; (199c <configure_opamp2+0x60>)
    1978:	4798      	blx	r3

	/* Initialize and enable the OPAMP2 with the user settings. */
	opamp2_set_config(&conf);
    197a:	0020      	movs	r0, r4
    197c:	4b08      	ldr	r3, [pc, #32]	; (19a0 <configure_opamp2+0x64>)
    197e:	4798      	blx	r3
	opamp_enable(OPAMP_2);
    1980:	2002      	movs	r0, #2
    1982:	4b08      	ldr	r3, [pc, #32]	; (19a4 <configure_opamp2+0x68>)
    1984:	4798      	blx	r3
	
	/* Wait for the output ready. */
	while(!opamp_is_ready(OPAMP_2));
    1986:	4c08      	ldr	r4, [pc, #32]	; (19a8 <configure_opamp2+0x6c>)
    1988:	2002      	movs	r0, #2
    198a:	47a0      	blx	r4
    198c:	2800      	cmp	r0, #0
    198e:	d0fb      	beq.n	1988 <configure_opamp2+0x4c>
}
    1990:	b006      	add	sp, #24
    1992:	bd10      	pop	{r4, pc}
    1994:	000011d9 	.word	0x000011d9
    1998:	00001215 	.word	0x00001215
    199c:	000017a1 	.word	0x000017a1
    19a0:	0000123d 	.word	0x0000123d
    19a4:	00001299 	.word	0x00001299
    19a8:	000012cd 	.word	0x000012cd

000019ac <configure_adc>:

/* Configure ADC */
void configure_adc(void)
{
    19ac:	b530      	push	{r4, r5, lr}
    19ae:	b08d      	sub	sp, #52	; 0x34
	/* Creates a new configuration structure for the ADC */
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
    19b0:	ac01      	add	r4, sp, #4
    19b2:	0020      	movs	r0, r4
    19b4:	4b11      	ldr	r3, [pc, #68]	; (19fc <configure_adc+0x50>)
    19b6:	4798      	blx	r3
	
	/* Setup ADC with OPAMP2 output as ADC input */
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV8;
    19b8:	2302      	movs	r3, #2
    19ba:	70a3      	strb	r3, [r4, #2]
	config_adc.positive_input  = ADC_POSITIVE_INPUT_OPAMP2;
    19bc:	331d      	adds	r3, #29
    19be:	7123      	strb	r3, [r4, #4]
	
	/* Initialize and enable ADC */
	adc_init(&adc_instance, ADC, &config_adc);
    19c0:	4d0f      	ldr	r5, [pc, #60]	; (1a00 <configure_adc+0x54>)
    19c2:	0022      	movs	r2, r4
    19c4:	490f      	ldr	r1, [pc, #60]	; (1a04 <configure_adc+0x58>)
    19c6:	0028      	movs	r0, r5
    19c8:	4b0f      	ldr	r3, [pc, #60]	; (1a08 <configure_adc+0x5c>)
    19ca:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    19cc:	682a      	ldr	r2, [r5, #0]
    19ce:	8c13      	ldrh	r3, [r2, #32]
    19d0:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    19d2:	2b00      	cmp	r3, #0
    19d4:	d1fb      	bne.n	19ce <configure_adc+0x22>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    19d6:	2180      	movs	r1, #128	; 0x80
    19d8:	03c9      	lsls	r1, r1, #15
    19da:	4b0c      	ldr	r3, [pc, #48]	; (1a0c <configure_adc+0x60>)
    19dc:	6019      	str	r1, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    19de:	2307      	movs	r3, #7
    19e0:	7113      	strb	r3, [r2, #4]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    19e2:	7193      	strb	r3, [r2, #6]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    19e4:	7811      	ldrb	r1, [r2, #0]
    19e6:	3b05      	subs	r3, #5
    19e8:	430b      	orrs	r3, r1
    19ea:	7013      	strb	r3, [r2, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    19ec:	4b04      	ldr	r3, [pc, #16]	; (1a00 <configure_adc+0x54>)
    19ee:	681a      	ldr	r2, [r3, #0]

	if (adc_module->SYNCBUSY.reg) {
    19f0:	8c13      	ldrh	r3, [r2, #32]
    19f2:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    19f4:	2b00      	cmp	r3, #0
    19f6:	d1fb      	bne.n	19f0 <configure_adc+0x44>
	adc_enable(&adc_instance);
}
    19f8:	b00d      	add	sp, #52	; 0x34
    19fa:	bd30      	pop	{r4, r5, pc}
    19fc:	00000ca5 	.word	0x00000ca5
    1a00:	20000234 	.word	0x20000234
    1a04:	43000c00 	.word	0x43000c00
    1a08:	00000ce9 	.word	0x00000ce9
    1a0c:	e000e100 	.word	0xe000e100

00001a10 <configure_adc_callbacks>:

/* Enable ADC Callback Function */
void configure_adc_callbacks(void)
{
    1a10:	b510      	push	{r4, lr}
	adc_register_callback(&adc_instance,
    1a12:	4c05      	ldr	r4, [pc, #20]	; (1a28 <configure_adc_callbacks+0x18>)
    1a14:	2200      	movs	r2, #0
    1a16:	4905      	ldr	r1, [pc, #20]	; (1a2c <configure_adc_callbacks+0x1c>)
    1a18:	0020      	movs	r0, r4
    1a1a:	4b05      	ldr	r3, [pc, #20]	; (1a30 <configure_adc_callbacks+0x20>)
    1a1c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    1a1e:	7ee2      	ldrb	r2, [r4, #27]
    1a20:	2301      	movs	r3, #1
    1a22:	4313      	orrs	r3, r2
    1a24:	76e3      	strb	r3, [r4, #27]
			adc_complete_callback, ADC_CALLBACK_READ_BUFFER);
	adc_enable_callback(&adc_instance, ADC_CALLBACK_READ_BUFFER);
}
    1a26:	bd10      	pop	{r4, pc}
    1a28:	20000234 	.word	0x20000234
    1a2c:	000018ed 	.word	0x000018ed
    1a30:	00001179 	.word	0x00001179

00001a34 <main>:
	int i = 0;
	char cmd[10];

/* Main function */
int main(void)
{
    1a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a36:	4657      	mov	r7, sl
    1a38:	4646      	mov	r6, r8
    1a3a:	b4c0      	push	{r6, r7}
    1a3c:	b091      	sub	sp, #68	; 0x44
	
	system_init();
    1a3e:	4b48      	ldr	r3, [pc, #288]	; (1b60 <main+0x12c>)
    1a40:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1a42:	2380      	movs	r3, #128	; 0x80
    1a44:	05db      	lsls	r3, r3, #23
    1a46:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1a48:	2300      	movs	r3, #0
    1a4a:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1a4c:	22ff      	movs	r2, #255	; 0xff
    1a4e:	4669      	mov	r1, sp
    1a50:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1a52:	2200      	movs	r2, #0
    1a54:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1a56:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1a58:	2401      	movs	r4, #1
    1a5a:	2124      	movs	r1, #36	; 0x24
    1a5c:	4668      	mov	r0, sp
    1a5e:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    1a60:	3101      	adds	r1, #1
    1a62:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    1a64:	3101      	adds	r1, #1
    1a66:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    1a68:	3101      	adds	r1, #1
    1a6a:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    1a6c:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1a6e:	3105      	adds	r1, #5
    1a70:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1a72:	3101      	adds	r1, #1
    1a74:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1a76:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1a78:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1a7a:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1a7c:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1a7e:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1a80:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    1a82:	2313      	movs	r3, #19
    1a84:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1a86:	7742      	strb	r2, [r0, #29]
*/
static void configure_usart(void)
{
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate    = 38400;
    1a88:	2396      	movs	r3, #150	; 0x96
    1a8a:	021b      	lsls	r3, r3, #8
    1a8c:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EXT2_UART_SERCOM_MUX_SETTING;
    1a8e:	23c4      	movs	r3, #196	; 0xc4
    1a90:	039b      	lsls	r3, r3, #14
    1a92:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EXT2_UART_SERCOM_PINMUX_PAD0;
    1a94:	2301      	movs	r3, #1
    1a96:	425b      	negs	r3, r3
    1a98:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EXT2_UART_SERCOM_PINMUX_PAD1;
    1a9a:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EXT2_UART_SERCOM_PINMUX_PAD2;
    1a9c:	4b31      	ldr	r3, [pc, #196]	; (1b64 <main+0x130>)
    1a9e:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EXT2_UART_SERCOM_PINMUX_PAD3;
    1aa0:	4b31      	ldr	r3, [pc, #196]	; (1b68 <main+0x134>)
    1aa2:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1aa4:	4d31      	ldr	r5, [pc, #196]	; (1b6c <main+0x138>)
    1aa6:	4b32      	ldr	r3, [pc, #200]	; (1b70 <main+0x13c>)
    1aa8:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1aaa:	4a32      	ldr	r2, [pc, #200]	; (1b74 <main+0x140>)
    1aac:	4b32      	ldr	r3, [pc, #200]	; (1b78 <main+0x144>)
    1aae:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1ab0:	4a32      	ldr	r2, [pc, #200]	; (1b7c <main+0x148>)
    1ab2:	4b33      	ldr	r3, [pc, #204]	; (1b80 <main+0x14c>)
    1ab4:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    1ab6:	466a      	mov	r2, sp
    1ab8:	4932      	ldr	r1, [pc, #200]	; (1b84 <main+0x150>)
    1aba:	0028      	movs	r0, r5
    1abc:	4b32      	ldr	r3, [pc, #200]	; (1b88 <main+0x154>)
    1abe:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1ac0:	4f32      	ldr	r7, [pc, #200]	; (1b8c <main+0x158>)
    1ac2:	683b      	ldr	r3, [r7, #0]
    1ac4:	6898      	ldr	r0, [r3, #8]
    1ac6:	2100      	movs	r1, #0
    1ac8:	4e31      	ldr	r6, [pc, #196]	; (1b90 <main+0x15c>)
    1aca:	47b0      	blx	r6
	setbuf(stdin, NULL);
    1acc:	683b      	ldr	r3, [r7, #0]
    1ace:	6858      	ldr	r0, [r3, #4]
    1ad0:	2100      	movs	r1, #0
    1ad2:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ad4:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1ad6:	0030      	movs	r0, r6
    1ad8:	4b2e      	ldr	r3, [pc, #184]	; (1b94 <main+0x160>)
    1ada:	4798      	blx	r3
    1adc:	231f      	movs	r3, #31
    1ade:	4018      	ands	r0, r3
    1ae0:	4084      	lsls	r4, r0
    1ae2:	4b2d      	ldr	r3, [pc, #180]	; (1b98 <main+0x164>)
    1ae4:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1ae6:	682b      	ldr	r3, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1ae8:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1aea:	2a00      	cmp	r2, #0
    1aec:	d1fc      	bne.n	1ae8 <main+0xb4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1aee:	6832      	ldr	r2, [r6, #0]
    1af0:	2302      	movs	r3, #2
    1af2:	4313      	orrs	r3, r2
    1af4:	6033      	str	r3, [r6, #0]
	
	system_init();
	configure_usart();
	
	/* Initialize OPAMP2 and ADC */
	configure_opamp2();
    1af6:	4b29      	ldr	r3, [pc, #164]	; (1b9c <main+0x168>)
    1af8:	4798      	blx	r3
	configure_adc();
    1afa:	4b29      	ldr	r3, [pc, #164]	; (1ba0 <main+0x16c>)
    1afc:	4798      	blx	r3
	configure_adc_callbacks();
    1afe:	4b29      	ldr	r3, [pc, #164]	; (1ba4 <main+0x170>)
    1b00:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    1b02:	2201      	movs	r2, #1
    1b04:	4b28      	ldr	r3, [pc, #160]	; (1ba8 <main+0x174>)
    1b06:	701a      	strb	r2, [r3, #0]
    1b08:	f3bf 8f5f 	dmb	sy
    1b0c:	b662      	cpsie	i
	while(true) {
		
		//scanf("%s",cmd);
		
		/* Start ADC conversion */
		adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);
    1b0e:	4b27      	ldr	r3, [pc, #156]	; (1bac <main+0x178>)
    1b10:	4698      	mov	r8, r3
    1b12:	2280      	movs	r2, #128	; 0x80
    1b14:	4926      	ldr	r1, [pc, #152]	; (1bb0 <main+0x17c>)
    1b16:	4827      	ldr	r0, [pc, #156]	; (1bb4 <main+0x180>)
    1b18:	47c0      	blx	r8
	
		while (adc_read_done == true) {
    1b1a:	4b27      	ldr	r3, [pc, #156]	; (1bb8 <main+0x184>)
    1b1c:	781b      	ldrb	r3, [r3, #0]
    1b1e:	2b00      	cmp	r3, #0
    1b20:	d0f7      	beq.n	1b12 <main+0xde>
			
			adc_read_done = false;
    1b22:	4b25      	ldr	r3, [pc, #148]	; (1bb8 <main+0x184>)
    1b24:	469a      	mov	sl, r3
    1b26:	2600      	movs	r6, #0
    1b28:	4f24      	ldr	r7, [pc, #144]	; (1bbc <main+0x188>)
    1b2a:	4d25      	ldr	r5, [pc, #148]	; (1bc0 <main+0x18c>)
    1b2c:	2480      	movs	r4, #128	; 0x80
    1b2e:	4653      	mov	r3, sl
    1b30:	701e      	strb	r6, [r3, #0]
    1b32:	6839      	ldr	r1, [r7, #0]
    1b34:	4b1e      	ldr	r3, [pc, #120]	; (1bb0 <main+0x17c>)
    1b36:	1c5a      	adds	r2, r3, #1
    1b38:	32ff      	adds	r2, #255	; 0xff
			
			for(i=0;i<ADC_SAMPLES;i++)
			{
				result += adc_result_buffer[i];
				result = result/2;
    1b3a:	8818      	ldrh	r0, [r3, #0]
    1b3c:	1841      	adds	r1, r0, r1
    1b3e:	0fc8      	lsrs	r0, r1, #31
    1b40:	1841      	adds	r1, r0, r1
    1b42:	1049      	asrs	r1, r1, #1
    1b44:	3302      	adds	r3, #2
	
		while (adc_read_done == true) {
			
			adc_read_done = false;
			
			for(i=0;i<ADC_SAMPLES;i++)
    1b46:	4293      	cmp	r3, r2
    1b48:	d1f7      	bne.n	1b3a <main+0x106>
    1b4a:	4b1c      	ldr	r3, [pc, #112]	; (1bbc <main+0x188>)
    1b4c:	6019      	str	r1, [r3, #0]
    1b4e:	602c      	str	r4, [r5, #0]
			{
				result += adc_result_buffer[i];
				result = result/2;
			}
			
			printf("%d\n\r",result);
    1b50:	481c      	ldr	r0, [pc, #112]	; (1bc4 <main+0x190>)
    1b52:	4b1d      	ldr	r3, [pc, #116]	; (1bc8 <main+0x194>)
    1b54:	4798      	blx	r3
		//scanf("%s",cmd);
		
		/* Start ADC conversion */
		adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);
	
		while (adc_read_done == true) {
    1b56:	4b18      	ldr	r3, [pc, #96]	; (1bb8 <main+0x184>)
    1b58:	781b      	ldrb	r3, [r3, #0]
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	d1e7      	bne.n	1b2e <main+0xfa>
    1b5e:	e7d8      	b.n	1b12 <main+0xde>
    1b60:	000017d5 	.word	0x000017d5
    1b64:	00120002 	.word	0x00120002
    1b68:	00130002 	.word	0x00130002
    1b6c:	20000100 	.word	0x20000100
    1b70:	200000e0 	.word	0x200000e0
    1b74:	00001925 	.word	0x00001925
    1b78:	200000dc 	.word	0x200000dc
    1b7c:	000018f9 	.word	0x000018f9
    1b80:	200000d8 	.word	0x200000d8
    1b84:	42000400 	.word	0x42000400
    1b88:	000005a1 	.word	0x000005a1
    1b8c:	20000064 	.word	0x20000064
    1b90:	00001de1 	.word	0x00001de1
    1b94:	00000b6d 	.word	0x00000b6d
    1b98:	e000e100 	.word	0xe000e100
    1b9c:	0000193d 	.word	0x0000193d
    1ba0:	000019ad 	.word	0x000019ad
    1ba4:	00001a11 	.word	0x00001a11
    1ba8:	20000000 	.word	0x20000000
    1bac:	0000118d 	.word	0x0000118d
    1bb0:	20000134 	.word	0x20000134
    1bb4:	20000234 	.word	0x20000234
    1bb8:	200000c4 	.word	0x200000c4
    1bbc:	200000cc 	.word	0x200000cc
    1bc0:	200000c8 	.word	0x200000c8
    1bc4:	00002eec 	.word	0x00002eec
    1bc8:	00001dad 	.word	0x00001dad

00001bcc <__aeabi_uidiv>:
    1bcc:	2200      	movs	r2, #0
    1bce:	0843      	lsrs	r3, r0, #1
    1bd0:	428b      	cmp	r3, r1
    1bd2:	d374      	bcc.n	1cbe <__aeabi_uidiv+0xf2>
    1bd4:	0903      	lsrs	r3, r0, #4
    1bd6:	428b      	cmp	r3, r1
    1bd8:	d35f      	bcc.n	1c9a <__aeabi_uidiv+0xce>
    1bda:	0a03      	lsrs	r3, r0, #8
    1bdc:	428b      	cmp	r3, r1
    1bde:	d344      	bcc.n	1c6a <__aeabi_uidiv+0x9e>
    1be0:	0b03      	lsrs	r3, r0, #12
    1be2:	428b      	cmp	r3, r1
    1be4:	d328      	bcc.n	1c38 <__aeabi_uidiv+0x6c>
    1be6:	0c03      	lsrs	r3, r0, #16
    1be8:	428b      	cmp	r3, r1
    1bea:	d30d      	bcc.n	1c08 <__aeabi_uidiv+0x3c>
    1bec:	22ff      	movs	r2, #255	; 0xff
    1bee:	0209      	lsls	r1, r1, #8
    1bf0:	ba12      	rev	r2, r2
    1bf2:	0c03      	lsrs	r3, r0, #16
    1bf4:	428b      	cmp	r3, r1
    1bf6:	d302      	bcc.n	1bfe <__aeabi_uidiv+0x32>
    1bf8:	1212      	asrs	r2, r2, #8
    1bfa:	0209      	lsls	r1, r1, #8
    1bfc:	d065      	beq.n	1cca <__aeabi_uidiv+0xfe>
    1bfe:	0b03      	lsrs	r3, r0, #12
    1c00:	428b      	cmp	r3, r1
    1c02:	d319      	bcc.n	1c38 <__aeabi_uidiv+0x6c>
    1c04:	e000      	b.n	1c08 <__aeabi_uidiv+0x3c>
    1c06:	0a09      	lsrs	r1, r1, #8
    1c08:	0bc3      	lsrs	r3, r0, #15
    1c0a:	428b      	cmp	r3, r1
    1c0c:	d301      	bcc.n	1c12 <__aeabi_uidiv+0x46>
    1c0e:	03cb      	lsls	r3, r1, #15
    1c10:	1ac0      	subs	r0, r0, r3
    1c12:	4152      	adcs	r2, r2
    1c14:	0b83      	lsrs	r3, r0, #14
    1c16:	428b      	cmp	r3, r1
    1c18:	d301      	bcc.n	1c1e <__aeabi_uidiv+0x52>
    1c1a:	038b      	lsls	r3, r1, #14
    1c1c:	1ac0      	subs	r0, r0, r3
    1c1e:	4152      	adcs	r2, r2
    1c20:	0b43      	lsrs	r3, r0, #13
    1c22:	428b      	cmp	r3, r1
    1c24:	d301      	bcc.n	1c2a <__aeabi_uidiv+0x5e>
    1c26:	034b      	lsls	r3, r1, #13
    1c28:	1ac0      	subs	r0, r0, r3
    1c2a:	4152      	adcs	r2, r2
    1c2c:	0b03      	lsrs	r3, r0, #12
    1c2e:	428b      	cmp	r3, r1
    1c30:	d301      	bcc.n	1c36 <__aeabi_uidiv+0x6a>
    1c32:	030b      	lsls	r3, r1, #12
    1c34:	1ac0      	subs	r0, r0, r3
    1c36:	4152      	adcs	r2, r2
    1c38:	0ac3      	lsrs	r3, r0, #11
    1c3a:	428b      	cmp	r3, r1
    1c3c:	d301      	bcc.n	1c42 <__aeabi_uidiv+0x76>
    1c3e:	02cb      	lsls	r3, r1, #11
    1c40:	1ac0      	subs	r0, r0, r3
    1c42:	4152      	adcs	r2, r2
    1c44:	0a83      	lsrs	r3, r0, #10
    1c46:	428b      	cmp	r3, r1
    1c48:	d301      	bcc.n	1c4e <__aeabi_uidiv+0x82>
    1c4a:	028b      	lsls	r3, r1, #10
    1c4c:	1ac0      	subs	r0, r0, r3
    1c4e:	4152      	adcs	r2, r2
    1c50:	0a43      	lsrs	r3, r0, #9
    1c52:	428b      	cmp	r3, r1
    1c54:	d301      	bcc.n	1c5a <__aeabi_uidiv+0x8e>
    1c56:	024b      	lsls	r3, r1, #9
    1c58:	1ac0      	subs	r0, r0, r3
    1c5a:	4152      	adcs	r2, r2
    1c5c:	0a03      	lsrs	r3, r0, #8
    1c5e:	428b      	cmp	r3, r1
    1c60:	d301      	bcc.n	1c66 <__aeabi_uidiv+0x9a>
    1c62:	020b      	lsls	r3, r1, #8
    1c64:	1ac0      	subs	r0, r0, r3
    1c66:	4152      	adcs	r2, r2
    1c68:	d2cd      	bcs.n	1c06 <__aeabi_uidiv+0x3a>
    1c6a:	09c3      	lsrs	r3, r0, #7
    1c6c:	428b      	cmp	r3, r1
    1c6e:	d301      	bcc.n	1c74 <__aeabi_uidiv+0xa8>
    1c70:	01cb      	lsls	r3, r1, #7
    1c72:	1ac0      	subs	r0, r0, r3
    1c74:	4152      	adcs	r2, r2
    1c76:	0983      	lsrs	r3, r0, #6
    1c78:	428b      	cmp	r3, r1
    1c7a:	d301      	bcc.n	1c80 <__aeabi_uidiv+0xb4>
    1c7c:	018b      	lsls	r3, r1, #6
    1c7e:	1ac0      	subs	r0, r0, r3
    1c80:	4152      	adcs	r2, r2
    1c82:	0943      	lsrs	r3, r0, #5
    1c84:	428b      	cmp	r3, r1
    1c86:	d301      	bcc.n	1c8c <__aeabi_uidiv+0xc0>
    1c88:	014b      	lsls	r3, r1, #5
    1c8a:	1ac0      	subs	r0, r0, r3
    1c8c:	4152      	adcs	r2, r2
    1c8e:	0903      	lsrs	r3, r0, #4
    1c90:	428b      	cmp	r3, r1
    1c92:	d301      	bcc.n	1c98 <__aeabi_uidiv+0xcc>
    1c94:	010b      	lsls	r3, r1, #4
    1c96:	1ac0      	subs	r0, r0, r3
    1c98:	4152      	adcs	r2, r2
    1c9a:	08c3      	lsrs	r3, r0, #3
    1c9c:	428b      	cmp	r3, r1
    1c9e:	d301      	bcc.n	1ca4 <__aeabi_uidiv+0xd8>
    1ca0:	00cb      	lsls	r3, r1, #3
    1ca2:	1ac0      	subs	r0, r0, r3
    1ca4:	4152      	adcs	r2, r2
    1ca6:	0883      	lsrs	r3, r0, #2
    1ca8:	428b      	cmp	r3, r1
    1caa:	d301      	bcc.n	1cb0 <__aeabi_uidiv+0xe4>
    1cac:	008b      	lsls	r3, r1, #2
    1cae:	1ac0      	subs	r0, r0, r3
    1cb0:	4152      	adcs	r2, r2
    1cb2:	0843      	lsrs	r3, r0, #1
    1cb4:	428b      	cmp	r3, r1
    1cb6:	d301      	bcc.n	1cbc <__aeabi_uidiv+0xf0>
    1cb8:	004b      	lsls	r3, r1, #1
    1cba:	1ac0      	subs	r0, r0, r3
    1cbc:	4152      	adcs	r2, r2
    1cbe:	1a41      	subs	r1, r0, r1
    1cc0:	d200      	bcs.n	1cc4 <__aeabi_uidiv+0xf8>
    1cc2:	4601      	mov	r1, r0
    1cc4:	4152      	adcs	r2, r2
    1cc6:	4610      	mov	r0, r2
    1cc8:	4770      	bx	lr
    1cca:	e7ff      	b.n	1ccc <__aeabi_uidiv+0x100>
    1ccc:	b501      	push	{r0, lr}
    1cce:	2000      	movs	r0, #0
    1cd0:	f000 f806 	bl	1ce0 <__aeabi_idiv0>
    1cd4:	bd02      	pop	{r1, pc}
    1cd6:	46c0      	nop			; (mov r8, r8)

00001cd8 <__aeabi_uidivmod>:
    1cd8:	2900      	cmp	r1, #0
    1cda:	d0f7      	beq.n	1ccc <__aeabi_uidiv+0x100>
    1cdc:	e776      	b.n	1bcc <__aeabi_uidiv>
    1cde:	4770      	bx	lr

00001ce0 <__aeabi_idiv0>:
    1ce0:	4770      	bx	lr
    1ce2:	46c0      	nop			; (mov r8, r8)

00001ce4 <__aeabi_lmul>:
    1ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ce6:	464f      	mov	r7, r9
    1ce8:	4646      	mov	r6, r8
    1cea:	b4c0      	push	{r6, r7}
    1cec:	0416      	lsls	r6, r2, #16
    1cee:	0c36      	lsrs	r6, r6, #16
    1cf0:	4699      	mov	r9, r3
    1cf2:	0033      	movs	r3, r6
    1cf4:	0405      	lsls	r5, r0, #16
    1cf6:	0c2c      	lsrs	r4, r5, #16
    1cf8:	0c07      	lsrs	r7, r0, #16
    1cfa:	0c15      	lsrs	r5, r2, #16
    1cfc:	4363      	muls	r3, r4
    1cfe:	437e      	muls	r6, r7
    1d00:	436f      	muls	r7, r5
    1d02:	4365      	muls	r5, r4
    1d04:	0c1c      	lsrs	r4, r3, #16
    1d06:	19ad      	adds	r5, r5, r6
    1d08:	1964      	adds	r4, r4, r5
    1d0a:	469c      	mov	ip, r3
    1d0c:	42a6      	cmp	r6, r4
    1d0e:	d903      	bls.n	1d18 <__aeabi_lmul+0x34>
    1d10:	2380      	movs	r3, #128	; 0x80
    1d12:	025b      	lsls	r3, r3, #9
    1d14:	4698      	mov	r8, r3
    1d16:	4447      	add	r7, r8
    1d18:	4663      	mov	r3, ip
    1d1a:	0c25      	lsrs	r5, r4, #16
    1d1c:	19ef      	adds	r7, r5, r7
    1d1e:	041d      	lsls	r5, r3, #16
    1d20:	464b      	mov	r3, r9
    1d22:	434a      	muls	r2, r1
    1d24:	4343      	muls	r3, r0
    1d26:	0c2d      	lsrs	r5, r5, #16
    1d28:	0424      	lsls	r4, r4, #16
    1d2a:	1964      	adds	r4, r4, r5
    1d2c:	1899      	adds	r1, r3, r2
    1d2e:	19c9      	adds	r1, r1, r7
    1d30:	0020      	movs	r0, r4
    1d32:	bc0c      	pop	{r2, r3}
    1d34:	4690      	mov	r8, r2
    1d36:	4699      	mov	r9, r3
    1d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d3a:	46c0      	nop			; (mov r8, r8)

00001d3c <__libc_init_array>:
    1d3c:	4b0e      	ldr	r3, [pc, #56]	; (1d78 <__libc_init_array+0x3c>)
    1d3e:	b570      	push	{r4, r5, r6, lr}
    1d40:	2500      	movs	r5, #0
    1d42:	001e      	movs	r6, r3
    1d44:	4c0d      	ldr	r4, [pc, #52]	; (1d7c <__libc_init_array+0x40>)
    1d46:	1ae4      	subs	r4, r4, r3
    1d48:	10a4      	asrs	r4, r4, #2
    1d4a:	42a5      	cmp	r5, r4
    1d4c:	d004      	beq.n	1d58 <__libc_init_array+0x1c>
    1d4e:	00ab      	lsls	r3, r5, #2
    1d50:	58f3      	ldr	r3, [r6, r3]
    1d52:	4798      	blx	r3
    1d54:	3501      	adds	r5, #1
    1d56:	e7f8      	b.n	1d4a <__libc_init_array+0xe>
    1d58:	f001 f91a 	bl	2f90 <_init>
    1d5c:	4b08      	ldr	r3, [pc, #32]	; (1d80 <__libc_init_array+0x44>)
    1d5e:	2500      	movs	r5, #0
    1d60:	001e      	movs	r6, r3
    1d62:	4c08      	ldr	r4, [pc, #32]	; (1d84 <__libc_init_array+0x48>)
    1d64:	1ae4      	subs	r4, r4, r3
    1d66:	10a4      	asrs	r4, r4, #2
    1d68:	42a5      	cmp	r5, r4
    1d6a:	d004      	beq.n	1d76 <__libc_init_array+0x3a>
    1d6c:	00ab      	lsls	r3, r5, #2
    1d6e:	58f3      	ldr	r3, [r6, r3]
    1d70:	4798      	blx	r3
    1d72:	3501      	adds	r5, #1
    1d74:	e7f8      	b.n	1d68 <__libc_init_array+0x2c>
    1d76:	bd70      	pop	{r4, r5, r6, pc}
    1d78:	00002f9c 	.word	0x00002f9c
    1d7c:	00002f9c 	.word	0x00002f9c
    1d80:	00002f9c 	.word	0x00002f9c
    1d84:	00002fa0 	.word	0x00002fa0

00001d88 <memcpy>:
    1d88:	2300      	movs	r3, #0
    1d8a:	b510      	push	{r4, lr}
    1d8c:	429a      	cmp	r2, r3
    1d8e:	d003      	beq.n	1d98 <memcpy+0x10>
    1d90:	5ccc      	ldrb	r4, [r1, r3]
    1d92:	54c4      	strb	r4, [r0, r3]
    1d94:	3301      	adds	r3, #1
    1d96:	e7f9      	b.n	1d8c <memcpy+0x4>
    1d98:	bd10      	pop	{r4, pc}

00001d9a <memset>:
    1d9a:	0003      	movs	r3, r0
    1d9c:	1882      	adds	r2, r0, r2
    1d9e:	4293      	cmp	r3, r2
    1da0:	d002      	beq.n	1da8 <memset+0xe>
    1da2:	7019      	strb	r1, [r3, #0]
    1da4:	3301      	adds	r3, #1
    1da6:	e7fa      	b.n	1d9e <memset+0x4>
    1da8:	4770      	bx	lr
	...

00001dac <iprintf>:
    1dac:	b40f      	push	{r0, r1, r2, r3}
    1dae:	4b0b      	ldr	r3, [pc, #44]	; (1ddc <iprintf+0x30>)
    1db0:	b513      	push	{r0, r1, r4, lr}
    1db2:	681c      	ldr	r4, [r3, #0]
    1db4:	2c00      	cmp	r4, #0
    1db6:	d005      	beq.n	1dc4 <iprintf+0x18>
    1db8:	69a3      	ldr	r3, [r4, #24]
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d102      	bne.n	1dc4 <iprintf+0x18>
    1dbe:	0020      	movs	r0, r4
    1dc0:	f000 f9bc 	bl	213c <__sinit>
    1dc4:	ab05      	add	r3, sp, #20
    1dc6:	9a04      	ldr	r2, [sp, #16]
    1dc8:	68a1      	ldr	r1, [r4, #8]
    1dca:	0020      	movs	r0, r4
    1dcc:	9301      	str	r3, [sp, #4]
    1dce:	f000 fb7b 	bl	24c8 <_vfiprintf_r>
    1dd2:	bc16      	pop	{r1, r2, r4}
    1dd4:	bc08      	pop	{r3}
    1dd6:	b004      	add	sp, #16
    1dd8:	4718      	bx	r3
    1dda:	46c0      	nop			; (mov r8, r8)
    1ddc:	20000064 	.word	0x20000064

00001de0 <setbuf>:
    1de0:	424a      	negs	r2, r1
    1de2:	414a      	adcs	r2, r1
    1de4:	2380      	movs	r3, #128	; 0x80
    1de6:	b510      	push	{r4, lr}
    1de8:	0052      	lsls	r2, r2, #1
    1dea:	00db      	lsls	r3, r3, #3
    1dec:	f000 f802 	bl	1df4 <setvbuf>
    1df0:	bd10      	pop	{r4, pc}
	...

00001df4 <setvbuf>:
    1df4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1df6:	001d      	movs	r5, r3
    1df8:	4b51      	ldr	r3, [pc, #324]	; (1f40 <setvbuf+0x14c>)
    1dfa:	b085      	sub	sp, #20
    1dfc:	681e      	ldr	r6, [r3, #0]
    1dfe:	0004      	movs	r4, r0
    1e00:	000f      	movs	r7, r1
    1e02:	9200      	str	r2, [sp, #0]
    1e04:	2e00      	cmp	r6, #0
    1e06:	d005      	beq.n	1e14 <setvbuf+0x20>
    1e08:	69b3      	ldr	r3, [r6, #24]
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	d102      	bne.n	1e14 <setvbuf+0x20>
    1e0e:	0030      	movs	r0, r6
    1e10:	f000 f994 	bl	213c <__sinit>
    1e14:	4b4b      	ldr	r3, [pc, #300]	; (1f44 <setvbuf+0x150>)
    1e16:	429c      	cmp	r4, r3
    1e18:	d101      	bne.n	1e1e <setvbuf+0x2a>
    1e1a:	6874      	ldr	r4, [r6, #4]
    1e1c:	e008      	b.n	1e30 <setvbuf+0x3c>
    1e1e:	4b4a      	ldr	r3, [pc, #296]	; (1f48 <setvbuf+0x154>)
    1e20:	429c      	cmp	r4, r3
    1e22:	d101      	bne.n	1e28 <setvbuf+0x34>
    1e24:	68b4      	ldr	r4, [r6, #8]
    1e26:	e003      	b.n	1e30 <setvbuf+0x3c>
    1e28:	4b48      	ldr	r3, [pc, #288]	; (1f4c <setvbuf+0x158>)
    1e2a:	429c      	cmp	r4, r3
    1e2c:	d100      	bne.n	1e30 <setvbuf+0x3c>
    1e2e:	68f4      	ldr	r4, [r6, #12]
    1e30:	9b00      	ldr	r3, [sp, #0]
    1e32:	2b02      	cmp	r3, #2
    1e34:	d005      	beq.n	1e42 <setvbuf+0x4e>
    1e36:	2b01      	cmp	r3, #1
    1e38:	d900      	bls.n	1e3c <setvbuf+0x48>
    1e3a:	e07c      	b.n	1f36 <setvbuf+0x142>
    1e3c:	2d00      	cmp	r5, #0
    1e3e:	da00      	bge.n	1e42 <setvbuf+0x4e>
    1e40:	e079      	b.n	1f36 <setvbuf+0x142>
    1e42:	0021      	movs	r1, r4
    1e44:	0030      	movs	r0, r6
    1e46:	f000 f90b 	bl	2060 <_fflush_r>
    1e4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1e4c:	2900      	cmp	r1, #0
    1e4e:	d008      	beq.n	1e62 <setvbuf+0x6e>
    1e50:	0023      	movs	r3, r4
    1e52:	3344      	adds	r3, #68	; 0x44
    1e54:	4299      	cmp	r1, r3
    1e56:	d002      	beq.n	1e5e <setvbuf+0x6a>
    1e58:	0030      	movs	r0, r6
    1e5a:	f000 fa71 	bl	2340 <_free_r>
    1e5e:	2300      	movs	r3, #0
    1e60:	6363      	str	r3, [r4, #52]	; 0x34
    1e62:	2300      	movs	r3, #0
    1e64:	61a3      	str	r3, [r4, #24]
    1e66:	6063      	str	r3, [r4, #4]
    1e68:	89a3      	ldrh	r3, [r4, #12]
    1e6a:	061b      	lsls	r3, r3, #24
    1e6c:	d503      	bpl.n	1e76 <setvbuf+0x82>
    1e6e:	6921      	ldr	r1, [r4, #16]
    1e70:	0030      	movs	r0, r6
    1e72:	f000 fa65 	bl	2340 <_free_r>
    1e76:	89a2      	ldrh	r2, [r4, #12]
    1e78:	4b35      	ldr	r3, [pc, #212]	; (1f50 <setvbuf+0x15c>)
    1e7a:	4013      	ands	r3, r2
    1e7c:	81a3      	strh	r3, [r4, #12]
    1e7e:	9b00      	ldr	r3, [sp, #0]
    1e80:	2b02      	cmp	r3, #2
    1e82:	d021      	beq.n	1ec8 <setvbuf+0xd4>
    1e84:	ab03      	add	r3, sp, #12
    1e86:	aa02      	add	r2, sp, #8
    1e88:	0021      	movs	r1, r4
    1e8a:	0030      	movs	r0, r6
    1e8c:	f000 f9ea 	bl	2264 <__swhatbuf_r>
    1e90:	89a3      	ldrh	r3, [r4, #12]
    1e92:	4318      	orrs	r0, r3
    1e94:	81a0      	strh	r0, [r4, #12]
    1e96:	2d00      	cmp	r5, #0
    1e98:	d101      	bne.n	1e9e <setvbuf+0xaa>
    1e9a:	9d02      	ldr	r5, [sp, #8]
    1e9c:	e001      	b.n	1ea2 <setvbuf+0xae>
    1e9e:	2f00      	cmp	r7, #0
    1ea0:	d125      	bne.n	1eee <setvbuf+0xfa>
    1ea2:	0028      	movs	r0, r5
    1ea4:	f000 fa42 	bl	232c <malloc>
    1ea8:	9501      	str	r5, [sp, #4]
    1eaa:	1e07      	subs	r7, r0, #0
    1eac:	d11a      	bne.n	1ee4 <setvbuf+0xf0>
    1eae:	9b02      	ldr	r3, [sp, #8]
    1eb0:	9301      	str	r3, [sp, #4]
    1eb2:	42ab      	cmp	r3, r5
    1eb4:	d102      	bne.n	1ebc <setvbuf+0xc8>
    1eb6:	2001      	movs	r0, #1
    1eb8:	4240      	negs	r0, r0
    1eba:	e006      	b.n	1eca <setvbuf+0xd6>
    1ebc:	9801      	ldr	r0, [sp, #4]
    1ebe:	f000 fa35 	bl	232c <malloc>
    1ec2:	1e07      	subs	r7, r0, #0
    1ec4:	d10e      	bne.n	1ee4 <setvbuf+0xf0>
    1ec6:	e7f6      	b.n	1eb6 <setvbuf+0xc2>
    1ec8:	2000      	movs	r0, #0
    1eca:	2202      	movs	r2, #2
    1ecc:	89a3      	ldrh	r3, [r4, #12]
    1ece:	4313      	orrs	r3, r2
    1ed0:	81a3      	strh	r3, [r4, #12]
    1ed2:	2300      	movs	r3, #0
    1ed4:	60a3      	str	r3, [r4, #8]
    1ed6:	0023      	movs	r3, r4
    1ed8:	3347      	adds	r3, #71	; 0x47
    1eda:	6023      	str	r3, [r4, #0]
    1edc:	6123      	str	r3, [r4, #16]
    1ede:	2301      	movs	r3, #1
    1ee0:	6163      	str	r3, [r4, #20]
    1ee2:	e02a      	b.n	1f3a <setvbuf+0x146>
    1ee4:	2280      	movs	r2, #128	; 0x80
    1ee6:	89a3      	ldrh	r3, [r4, #12]
    1ee8:	9d01      	ldr	r5, [sp, #4]
    1eea:	4313      	orrs	r3, r2
    1eec:	81a3      	strh	r3, [r4, #12]
    1eee:	69b3      	ldr	r3, [r6, #24]
    1ef0:	2b00      	cmp	r3, #0
    1ef2:	d102      	bne.n	1efa <setvbuf+0x106>
    1ef4:	0030      	movs	r0, r6
    1ef6:	f000 f921 	bl	213c <__sinit>
    1efa:	9b00      	ldr	r3, [sp, #0]
    1efc:	2b01      	cmp	r3, #1
    1efe:	d103      	bne.n	1f08 <setvbuf+0x114>
    1f00:	89a3      	ldrh	r3, [r4, #12]
    1f02:	9a00      	ldr	r2, [sp, #0]
    1f04:	431a      	orrs	r2, r3
    1f06:	81a2      	strh	r2, [r4, #12]
    1f08:	2308      	movs	r3, #8
    1f0a:	89a2      	ldrh	r2, [r4, #12]
    1f0c:	6027      	str	r7, [r4, #0]
    1f0e:	4013      	ands	r3, r2
    1f10:	6127      	str	r7, [r4, #16]
    1f12:	6165      	str	r5, [r4, #20]
    1f14:	1e18      	subs	r0, r3, #0
    1f16:	d00c      	beq.n	1f32 <setvbuf+0x13e>
    1f18:	2301      	movs	r3, #1
    1f1a:	401a      	ands	r2, r3
    1f1c:	2300      	movs	r3, #0
    1f1e:	1e10      	subs	r0, r2, #0
    1f20:	4298      	cmp	r0, r3
    1f22:	d004      	beq.n	1f2e <setvbuf+0x13a>
    1f24:	426d      	negs	r5, r5
    1f26:	60a3      	str	r3, [r4, #8]
    1f28:	61a5      	str	r5, [r4, #24]
    1f2a:	0018      	movs	r0, r3
    1f2c:	e005      	b.n	1f3a <setvbuf+0x146>
    1f2e:	60a5      	str	r5, [r4, #8]
    1f30:	e003      	b.n	1f3a <setvbuf+0x146>
    1f32:	60a3      	str	r3, [r4, #8]
    1f34:	e001      	b.n	1f3a <setvbuf+0x146>
    1f36:	2001      	movs	r0, #1
    1f38:	4240      	negs	r0, r0
    1f3a:	b005      	add	sp, #20
    1f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	20000064 	.word	0x20000064
    1f44:	00002efc 	.word	0x00002efc
    1f48:	00002f1c 	.word	0x00002f1c
    1f4c:	00002f3c 	.word	0x00002f3c
    1f50:	fffff35c 	.word	0xfffff35c

00001f54 <__sflush_r>:
    1f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1f56:	898a      	ldrh	r2, [r1, #12]
    1f58:	0005      	movs	r5, r0
    1f5a:	000c      	movs	r4, r1
    1f5c:	0713      	lsls	r3, r2, #28
    1f5e:	d45a      	bmi.n	2016 <STACK_SIZE+0x16>
    1f60:	684b      	ldr	r3, [r1, #4]
    1f62:	2b00      	cmp	r3, #0
    1f64:	dc02      	bgt.n	1f6c <__sflush_r+0x18>
    1f66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1f68:	2b00      	cmp	r3, #0
    1f6a:	dd19      	ble.n	1fa0 <__sflush_r+0x4c>
    1f6c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1f6e:	2f00      	cmp	r7, #0
    1f70:	d016      	beq.n	1fa0 <__sflush_r+0x4c>
    1f72:	2300      	movs	r3, #0
    1f74:	682e      	ldr	r6, [r5, #0]
    1f76:	602b      	str	r3, [r5, #0]
    1f78:	2380      	movs	r3, #128	; 0x80
    1f7a:	015b      	lsls	r3, r3, #5
    1f7c:	401a      	ands	r2, r3
    1f7e:	d001      	beq.n	1f84 <__sflush_r+0x30>
    1f80:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1f82:	e014      	b.n	1fae <__sflush_r+0x5a>
    1f84:	2301      	movs	r3, #1
    1f86:	6a21      	ldr	r1, [r4, #32]
    1f88:	0028      	movs	r0, r5
    1f8a:	47b8      	blx	r7
    1f8c:	1c43      	adds	r3, r0, #1
    1f8e:	d10e      	bne.n	1fae <__sflush_r+0x5a>
    1f90:	682b      	ldr	r3, [r5, #0]
    1f92:	2b00      	cmp	r3, #0
    1f94:	d00b      	beq.n	1fae <__sflush_r+0x5a>
    1f96:	2b1d      	cmp	r3, #29
    1f98:	d001      	beq.n	1f9e <__sflush_r+0x4a>
    1f9a:	2b16      	cmp	r3, #22
    1f9c:	d102      	bne.n	1fa4 <__sflush_r+0x50>
    1f9e:	602e      	str	r6, [r5, #0]
    1fa0:	2000      	movs	r0, #0
    1fa2:	e05a      	b.n	205a <STACK_SIZE+0x5a>
    1fa4:	2240      	movs	r2, #64	; 0x40
    1fa6:	89a3      	ldrh	r3, [r4, #12]
    1fa8:	4313      	orrs	r3, r2
    1faa:	81a3      	strh	r3, [r4, #12]
    1fac:	e055      	b.n	205a <STACK_SIZE+0x5a>
    1fae:	89a3      	ldrh	r3, [r4, #12]
    1fb0:	075b      	lsls	r3, r3, #29
    1fb2:	d506      	bpl.n	1fc2 <__sflush_r+0x6e>
    1fb4:	6863      	ldr	r3, [r4, #4]
    1fb6:	1ac0      	subs	r0, r0, r3
    1fb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1fba:	2b00      	cmp	r3, #0
    1fbc:	d001      	beq.n	1fc2 <__sflush_r+0x6e>
    1fbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1fc0:	1ac0      	subs	r0, r0, r3
    1fc2:	2300      	movs	r3, #0
    1fc4:	0002      	movs	r2, r0
    1fc6:	6a21      	ldr	r1, [r4, #32]
    1fc8:	0028      	movs	r0, r5
    1fca:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1fcc:	47b8      	blx	r7
    1fce:	89a3      	ldrh	r3, [r4, #12]
    1fd0:	1c42      	adds	r2, r0, #1
    1fd2:	d106      	bne.n	1fe2 <__sflush_r+0x8e>
    1fd4:	6829      	ldr	r1, [r5, #0]
    1fd6:	291d      	cmp	r1, #29
    1fd8:	d83a      	bhi.n	2050 <STACK_SIZE+0x50>
    1fda:	4a20      	ldr	r2, [pc, #128]	; (205c <STACK_SIZE+0x5c>)
    1fdc:	40ca      	lsrs	r2, r1
    1fde:	07d2      	lsls	r2, r2, #31
    1fe0:	d536      	bpl.n	2050 <STACK_SIZE+0x50>
    1fe2:	2200      	movs	r2, #0
    1fe4:	6062      	str	r2, [r4, #4]
    1fe6:	6922      	ldr	r2, [r4, #16]
    1fe8:	6022      	str	r2, [r4, #0]
    1fea:	04db      	lsls	r3, r3, #19
    1fec:	d505      	bpl.n	1ffa <__sflush_r+0xa6>
    1fee:	1c43      	adds	r3, r0, #1
    1ff0:	d102      	bne.n	1ff8 <__sflush_r+0xa4>
    1ff2:	682b      	ldr	r3, [r5, #0]
    1ff4:	2b00      	cmp	r3, #0
    1ff6:	d100      	bne.n	1ffa <__sflush_r+0xa6>
    1ff8:	6560      	str	r0, [r4, #84]	; 0x54
    1ffa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1ffc:	602e      	str	r6, [r5, #0]
    1ffe:	2900      	cmp	r1, #0
    2000:	d0ce      	beq.n	1fa0 <__sflush_r+0x4c>
    2002:	0023      	movs	r3, r4
    2004:	3344      	adds	r3, #68	; 0x44
    2006:	4299      	cmp	r1, r3
    2008:	d002      	beq.n	2010 <STACK_SIZE+0x10>
    200a:	0028      	movs	r0, r5
    200c:	f000 f998 	bl	2340 <_free_r>
    2010:	2000      	movs	r0, #0
    2012:	6360      	str	r0, [r4, #52]	; 0x34
    2014:	e021      	b.n	205a <STACK_SIZE+0x5a>
    2016:	690f      	ldr	r7, [r1, #16]
    2018:	2f00      	cmp	r7, #0
    201a:	d0c1      	beq.n	1fa0 <__sflush_r+0x4c>
    201c:	680b      	ldr	r3, [r1, #0]
    201e:	600f      	str	r7, [r1, #0]
    2020:	1bdb      	subs	r3, r3, r7
    2022:	9301      	str	r3, [sp, #4]
    2024:	2300      	movs	r3, #0
    2026:	0792      	lsls	r2, r2, #30
    2028:	d100      	bne.n	202c <STACK_SIZE+0x2c>
    202a:	694b      	ldr	r3, [r1, #20]
    202c:	60a3      	str	r3, [r4, #8]
    202e:	e003      	b.n	2038 <STACK_SIZE+0x38>
    2030:	9b01      	ldr	r3, [sp, #4]
    2032:	183f      	adds	r7, r7, r0
    2034:	1a1b      	subs	r3, r3, r0
    2036:	9301      	str	r3, [sp, #4]
    2038:	9b01      	ldr	r3, [sp, #4]
    203a:	2b00      	cmp	r3, #0
    203c:	ddb0      	ble.n	1fa0 <__sflush_r+0x4c>
    203e:	9b01      	ldr	r3, [sp, #4]
    2040:	003a      	movs	r2, r7
    2042:	6a21      	ldr	r1, [r4, #32]
    2044:	0028      	movs	r0, r5
    2046:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2048:	47b0      	blx	r6
    204a:	2800      	cmp	r0, #0
    204c:	dcf0      	bgt.n	2030 <STACK_SIZE+0x30>
    204e:	89a3      	ldrh	r3, [r4, #12]
    2050:	2240      	movs	r2, #64	; 0x40
    2052:	2001      	movs	r0, #1
    2054:	4313      	orrs	r3, r2
    2056:	81a3      	strh	r3, [r4, #12]
    2058:	4240      	negs	r0, r0
    205a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    205c:	20400001 	.word	0x20400001

00002060 <_fflush_r>:
    2060:	690b      	ldr	r3, [r1, #16]
    2062:	b570      	push	{r4, r5, r6, lr}
    2064:	0005      	movs	r5, r0
    2066:	000c      	movs	r4, r1
    2068:	2b00      	cmp	r3, #0
    206a:	d101      	bne.n	2070 <_fflush_r+0x10>
    206c:	2000      	movs	r0, #0
    206e:	e01c      	b.n	20aa <_fflush_r+0x4a>
    2070:	2800      	cmp	r0, #0
    2072:	d004      	beq.n	207e <_fflush_r+0x1e>
    2074:	6983      	ldr	r3, [r0, #24]
    2076:	2b00      	cmp	r3, #0
    2078:	d101      	bne.n	207e <_fflush_r+0x1e>
    207a:	f000 f85f 	bl	213c <__sinit>
    207e:	4b0b      	ldr	r3, [pc, #44]	; (20ac <_fflush_r+0x4c>)
    2080:	429c      	cmp	r4, r3
    2082:	d101      	bne.n	2088 <_fflush_r+0x28>
    2084:	686c      	ldr	r4, [r5, #4]
    2086:	e008      	b.n	209a <_fflush_r+0x3a>
    2088:	4b09      	ldr	r3, [pc, #36]	; (20b0 <_fflush_r+0x50>)
    208a:	429c      	cmp	r4, r3
    208c:	d101      	bne.n	2092 <_fflush_r+0x32>
    208e:	68ac      	ldr	r4, [r5, #8]
    2090:	e003      	b.n	209a <_fflush_r+0x3a>
    2092:	4b08      	ldr	r3, [pc, #32]	; (20b4 <_fflush_r+0x54>)
    2094:	429c      	cmp	r4, r3
    2096:	d100      	bne.n	209a <_fflush_r+0x3a>
    2098:	68ec      	ldr	r4, [r5, #12]
    209a:	220c      	movs	r2, #12
    209c:	5ea3      	ldrsh	r3, [r4, r2]
    209e:	2b00      	cmp	r3, #0
    20a0:	d0e4      	beq.n	206c <_fflush_r+0xc>
    20a2:	0021      	movs	r1, r4
    20a4:	0028      	movs	r0, r5
    20a6:	f7ff ff55 	bl	1f54 <__sflush_r>
    20aa:	bd70      	pop	{r4, r5, r6, pc}
    20ac:	00002efc 	.word	0x00002efc
    20b0:	00002f1c 	.word	0x00002f1c
    20b4:	00002f3c 	.word	0x00002f3c

000020b8 <_cleanup_r>:
    20b8:	b510      	push	{r4, lr}
    20ba:	4902      	ldr	r1, [pc, #8]	; (20c4 <_cleanup_r+0xc>)
    20bc:	f000 f8b0 	bl	2220 <_fwalk_reent>
    20c0:	bd10      	pop	{r4, pc}
    20c2:	46c0      	nop			; (mov r8, r8)
    20c4:	00002061 	.word	0x00002061

000020c8 <std.isra.0>:
    20c8:	2300      	movs	r3, #0
    20ca:	b510      	push	{r4, lr}
    20cc:	0004      	movs	r4, r0
    20ce:	6003      	str	r3, [r0, #0]
    20d0:	6043      	str	r3, [r0, #4]
    20d2:	6083      	str	r3, [r0, #8]
    20d4:	8181      	strh	r1, [r0, #12]
    20d6:	6643      	str	r3, [r0, #100]	; 0x64
    20d8:	81c2      	strh	r2, [r0, #14]
    20da:	6103      	str	r3, [r0, #16]
    20dc:	6143      	str	r3, [r0, #20]
    20de:	6183      	str	r3, [r0, #24]
    20e0:	0019      	movs	r1, r3
    20e2:	2208      	movs	r2, #8
    20e4:	305c      	adds	r0, #92	; 0x5c
    20e6:	f7ff fe58 	bl	1d9a <memset>
    20ea:	4b05      	ldr	r3, [pc, #20]	; (2100 <std.isra.0+0x38>)
    20ec:	6224      	str	r4, [r4, #32]
    20ee:	6263      	str	r3, [r4, #36]	; 0x24
    20f0:	4b04      	ldr	r3, [pc, #16]	; (2104 <std.isra.0+0x3c>)
    20f2:	62a3      	str	r3, [r4, #40]	; 0x28
    20f4:	4b04      	ldr	r3, [pc, #16]	; (2108 <std.isra.0+0x40>)
    20f6:	62e3      	str	r3, [r4, #44]	; 0x2c
    20f8:	4b04      	ldr	r3, [pc, #16]	; (210c <std.isra.0+0x44>)
    20fa:	6323      	str	r3, [r4, #48]	; 0x30
    20fc:	bd10      	pop	{r4, pc}
    20fe:	46c0      	nop			; (mov r8, r8)
    2100:	00002a45 	.word	0x00002a45
    2104:	00002a6d 	.word	0x00002a6d
    2108:	00002aa5 	.word	0x00002aa5
    210c:	00002ad1 	.word	0x00002ad1

00002110 <__sfmoreglue>:
    2110:	b570      	push	{r4, r5, r6, lr}
    2112:	2568      	movs	r5, #104	; 0x68
    2114:	1e4b      	subs	r3, r1, #1
    2116:	435d      	muls	r5, r3
    2118:	000e      	movs	r6, r1
    211a:	0029      	movs	r1, r5
    211c:	3174      	adds	r1, #116	; 0x74
    211e:	f000 f955 	bl	23cc <_malloc_r>
    2122:	1e04      	subs	r4, r0, #0
    2124:	d008      	beq.n	2138 <__sfmoreglue+0x28>
    2126:	2100      	movs	r1, #0
    2128:	002a      	movs	r2, r5
    212a:	6001      	str	r1, [r0, #0]
    212c:	6046      	str	r6, [r0, #4]
    212e:	300c      	adds	r0, #12
    2130:	60a0      	str	r0, [r4, #8]
    2132:	3268      	adds	r2, #104	; 0x68
    2134:	f7ff fe31 	bl	1d9a <memset>
    2138:	0020      	movs	r0, r4
    213a:	bd70      	pop	{r4, r5, r6, pc}

0000213c <__sinit>:
    213c:	6983      	ldr	r3, [r0, #24]
    213e:	b513      	push	{r0, r1, r4, lr}
    2140:	0004      	movs	r4, r0
    2142:	2b00      	cmp	r3, #0
    2144:	d128      	bne.n	2198 <__sinit+0x5c>
    2146:	6483      	str	r3, [r0, #72]	; 0x48
    2148:	64c3      	str	r3, [r0, #76]	; 0x4c
    214a:	6503      	str	r3, [r0, #80]	; 0x50
    214c:	4b13      	ldr	r3, [pc, #76]	; (219c <__sinit+0x60>)
    214e:	4a14      	ldr	r2, [pc, #80]	; (21a0 <__sinit+0x64>)
    2150:	681b      	ldr	r3, [r3, #0]
    2152:	6282      	str	r2, [r0, #40]	; 0x28
    2154:	9301      	str	r3, [sp, #4]
    2156:	4298      	cmp	r0, r3
    2158:	d101      	bne.n	215e <__sinit+0x22>
    215a:	2301      	movs	r3, #1
    215c:	6183      	str	r3, [r0, #24]
    215e:	0020      	movs	r0, r4
    2160:	f000 f820 	bl	21a4 <__sfp>
    2164:	6060      	str	r0, [r4, #4]
    2166:	0020      	movs	r0, r4
    2168:	f000 f81c 	bl	21a4 <__sfp>
    216c:	60a0      	str	r0, [r4, #8]
    216e:	0020      	movs	r0, r4
    2170:	f000 f818 	bl	21a4 <__sfp>
    2174:	2200      	movs	r2, #0
    2176:	60e0      	str	r0, [r4, #12]
    2178:	2104      	movs	r1, #4
    217a:	6860      	ldr	r0, [r4, #4]
    217c:	f7ff ffa4 	bl	20c8 <std.isra.0>
    2180:	2201      	movs	r2, #1
    2182:	2109      	movs	r1, #9
    2184:	68a0      	ldr	r0, [r4, #8]
    2186:	f7ff ff9f 	bl	20c8 <std.isra.0>
    218a:	2202      	movs	r2, #2
    218c:	2112      	movs	r1, #18
    218e:	68e0      	ldr	r0, [r4, #12]
    2190:	f7ff ff9a 	bl	20c8 <std.isra.0>
    2194:	2301      	movs	r3, #1
    2196:	61a3      	str	r3, [r4, #24]
    2198:	bd13      	pop	{r0, r1, r4, pc}
    219a:	46c0      	nop			; (mov r8, r8)
    219c:	00002ef8 	.word	0x00002ef8
    21a0:	000020b9 	.word	0x000020b9

000021a4 <__sfp>:
    21a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21a6:	4b1d      	ldr	r3, [pc, #116]	; (221c <__sfp+0x78>)
    21a8:	0006      	movs	r6, r0
    21aa:	681d      	ldr	r5, [r3, #0]
    21ac:	69ab      	ldr	r3, [r5, #24]
    21ae:	2b00      	cmp	r3, #0
    21b0:	d102      	bne.n	21b8 <__sfp+0x14>
    21b2:	0028      	movs	r0, r5
    21b4:	f7ff ffc2 	bl	213c <__sinit>
    21b8:	3548      	adds	r5, #72	; 0x48
    21ba:	68ac      	ldr	r4, [r5, #8]
    21bc:	686b      	ldr	r3, [r5, #4]
    21be:	3b01      	subs	r3, #1
    21c0:	d405      	bmi.n	21ce <__sfp+0x2a>
    21c2:	220c      	movs	r2, #12
    21c4:	5ea7      	ldrsh	r7, [r4, r2]
    21c6:	2f00      	cmp	r7, #0
    21c8:	d010      	beq.n	21ec <__sfp+0x48>
    21ca:	3468      	adds	r4, #104	; 0x68
    21cc:	e7f7      	b.n	21be <__sfp+0x1a>
    21ce:	682b      	ldr	r3, [r5, #0]
    21d0:	2b00      	cmp	r3, #0
    21d2:	d001      	beq.n	21d8 <__sfp+0x34>
    21d4:	682d      	ldr	r5, [r5, #0]
    21d6:	e7f0      	b.n	21ba <__sfp+0x16>
    21d8:	2104      	movs	r1, #4
    21da:	0030      	movs	r0, r6
    21dc:	f7ff ff98 	bl	2110 <__sfmoreglue>
    21e0:	6028      	str	r0, [r5, #0]
    21e2:	2800      	cmp	r0, #0
    21e4:	d1f6      	bne.n	21d4 <__sfp+0x30>
    21e6:	230c      	movs	r3, #12
    21e8:	6033      	str	r3, [r6, #0]
    21ea:	e016      	b.n	221a <__sfp+0x76>
    21ec:	2301      	movs	r3, #1
    21ee:	0020      	movs	r0, r4
    21f0:	425b      	negs	r3, r3
    21f2:	81e3      	strh	r3, [r4, #14]
    21f4:	3302      	adds	r3, #2
    21f6:	81a3      	strh	r3, [r4, #12]
    21f8:	6667      	str	r7, [r4, #100]	; 0x64
    21fa:	6027      	str	r7, [r4, #0]
    21fc:	60a7      	str	r7, [r4, #8]
    21fe:	6067      	str	r7, [r4, #4]
    2200:	6127      	str	r7, [r4, #16]
    2202:	6167      	str	r7, [r4, #20]
    2204:	61a7      	str	r7, [r4, #24]
    2206:	305c      	adds	r0, #92	; 0x5c
    2208:	2208      	movs	r2, #8
    220a:	0039      	movs	r1, r7
    220c:	f7ff fdc5 	bl	1d9a <memset>
    2210:	0020      	movs	r0, r4
    2212:	6367      	str	r7, [r4, #52]	; 0x34
    2214:	63a7      	str	r7, [r4, #56]	; 0x38
    2216:	64a7      	str	r7, [r4, #72]	; 0x48
    2218:	64e7      	str	r7, [r4, #76]	; 0x4c
    221a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    221c:	00002ef8 	.word	0x00002ef8

00002220 <_fwalk_reent>:
    2220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2222:	0004      	movs	r4, r0
    2224:	0007      	movs	r7, r0
    2226:	2600      	movs	r6, #0
    2228:	9101      	str	r1, [sp, #4]
    222a:	3448      	adds	r4, #72	; 0x48
    222c:	2c00      	cmp	r4, #0
    222e:	d016      	beq.n	225e <_fwalk_reent+0x3e>
    2230:	6863      	ldr	r3, [r4, #4]
    2232:	68a5      	ldr	r5, [r4, #8]
    2234:	9300      	str	r3, [sp, #0]
    2236:	9b00      	ldr	r3, [sp, #0]
    2238:	3b01      	subs	r3, #1
    223a:	9300      	str	r3, [sp, #0]
    223c:	d40d      	bmi.n	225a <_fwalk_reent+0x3a>
    223e:	89ab      	ldrh	r3, [r5, #12]
    2240:	2b01      	cmp	r3, #1
    2242:	d908      	bls.n	2256 <_fwalk_reent+0x36>
    2244:	220e      	movs	r2, #14
    2246:	5eab      	ldrsh	r3, [r5, r2]
    2248:	3301      	adds	r3, #1
    224a:	d004      	beq.n	2256 <_fwalk_reent+0x36>
    224c:	0029      	movs	r1, r5
    224e:	0038      	movs	r0, r7
    2250:	9b01      	ldr	r3, [sp, #4]
    2252:	4798      	blx	r3
    2254:	4306      	orrs	r6, r0
    2256:	3568      	adds	r5, #104	; 0x68
    2258:	e7ed      	b.n	2236 <_fwalk_reent+0x16>
    225a:	6824      	ldr	r4, [r4, #0]
    225c:	e7e6      	b.n	222c <_fwalk_reent+0xc>
    225e:	0030      	movs	r0, r6
    2260:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00002264 <__swhatbuf_r>:
    2264:	b570      	push	{r4, r5, r6, lr}
    2266:	000e      	movs	r6, r1
    2268:	001d      	movs	r5, r3
    226a:	230e      	movs	r3, #14
    226c:	5ec9      	ldrsh	r1, [r1, r3]
    226e:	b090      	sub	sp, #64	; 0x40
    2270:	0014      	movs	r4, r2
    2272:	2900      	cmp	r1, #0
    2274:	da06      	bge.n	2284 <__swhatbuf_r+0x20>
    2276:	2300      	movs	r3, #0
    2278:	602b      	str	r3, [r5, #0]
    227a:	89b3      	ldrh	r3, [r6, #12]
    227c:	061b      	lsls	r3, r3, #24
    227e:	d50f      	bpl.n	22a0 <__swhatbuf_r+0x3c>
    2280:	2340      	movs	r3, #64	; 0x40
    2282:	e00f      	b.n	22a4 <__swhatbuf_r+0x40>
    2284:	aa01      	add	r2, sp, #4
    2286:	f000 fd1d 	bl	2cc4 <_fstat_r>
    228a:	2800      	cmp	r0, #0
    228c:	dbf3      	blt.n	2276 <__swhatbuf_r+0x12>
    228e:	23f0      	movs	r3, #240	; 0xf0
    2290:	9a02      	ldr	r2, [sp, #8]
    2292:	021b      	lsls	r3, r3, #8
    2294:	4013      	ands	r3, r2
    2296:	4a05      	ldr	r2, [pc, #20]	; (22ac <__swhatbuf_r+0x48>)
    2298:	189b      	adds	r3, r3, r2
    229a:	425a      	negs	r2, r3
    229c:	4153      	adcs	r3, r2
    229e:	602b      	str	r3, [r5, #0]
    22a0:	2380      	movs	r3, #128	; 0x80
    22a2:	00db      	lsls	r3, r3, #3
    22a4:	2000      	movs	r0, #0
    22a6:	6023      	str	r3, [r4, #0]
    22a8:	b010      	add	sp, #64	; 0x40
    22aa:	bd70      	pop	{r4, r5, r6, pc}
    22ac:	ffffe000 	.word	0xffffe000

000022b0 <__smakebuf_r>:
    22b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    22b2:	2602      	movs	r6, #2
    22b4:	898b      	ldrh	r3, [r1, #12]
    22b6:	0005      	movs	r5, r0
    22b8:	000c      	movs	r4, r1
    22ba:	4233      	tst	r3, r6
    22bc:	d110      	bne.n	22e0 <__smakebuf_r+0x30>
    22be:	ab01      	add	r3, sp, #4
    22c0:	466a      	mov	r2, sp
    22c2:	f7ff ffcf 	bl	2264 <__swhatbuf_r>
    22c6:	9900      	ldr	r1, [sp, #0]
    22c8:	0007      	movs	r7, r0
    22ca:	0028      	movs	r0, r5
    22cc:	f000 f87e 	bl	23cc <_malloc_r>
    22d0:	2800      	cmp	r0, #0
    22d2:	d10c      	bne.n	22ee <__smakebuf_r+0x3e>
    22d4:	220c      	movs	r2, #12
    22d6:	5ea3      	ldrsh	r3, [r4, r2]
    22d8:	059a      	lsls	r2, r3, #22
    22da:	d423      	bmi.n	2324 <__smakebuf_r+0x74>
    22dc:	4333      	orrs	r3, r6
    22de:	81a3      	strh	r3, [r4, #12]
    22e0:	0023      	movs	r3, r4
    22e2:	3347      	adds	r3, #71	; 0x47
    22e4:	6023      	str	r3, [r4, #0]
    22e6:	6123      	str	r3, [r4, #16]
    22e8:	2301      	movs	r3, #1
    22ea:	6163      	str	r3, [r4, #20]
    22ec:	e01a      	b.n	2324 <__smakebuf_r+0x74>
    22ee:	2280      	movs	r2, #128	; 0x80
    22f0:	4b0d      	ldr	r3, [pc, #52]	; (2328 <__smakebuf_r+0x78>)
    22f2:	62ab      	str	r3, [r5, #40]	; 0x28
    22f4:	89a3      	ldrh	r3, [r4, #12]
    22f6:	6020      	str	r0, [r4, #0]
    22f8:	4313      	orrs	r3, r2
    22fa:	81a3      	strh	r3, [r4, #12]
    22fc:	9b00      	ldr	r3, [sp, #0]
    22fe:	6120      	str	r0, [r4, #16]
    2300:	6163      	str	r3, [r4, #20]
    2302:	9b01      	ldr	r3, [sp, #4]
    2304:	2b00      	cmp	r3, #0
    2306:	d00a      	beq.n	231e <__smakebuf_r+0x6e>
    2308:	230e      	movs	r3, #14
    230a:	5ee1      	ldrsh	r1, [r4, r3]
    230c:	0028      	movs	r0, r5
    230e:	f000 fceb 	bl	2ce8 <_isatty_r>
    2312:	2800      	cmp	r0, #0
    2314:	d003      	beq.n	231e <__smakebuf_r+0x6e>
    2316:	2201      	movs	r2, #1
    2318:	89a3      	ldrh	r3, [r4, #12]
    231a:	4313      	orrs	r3, r2
    231c:	81a3      	strh	r3, [r4, #12]
    231e:	89a3      	ldrh	r3, [r4, #12]
    2320:	431f      	orrs	r7, r3
    2322:	81a7      	strh	r7, [r4, #12]
    2324:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2326:	46c0      	nop			; (mov r8, r8)
    2328:	000020b9 	.word	0x000020b9

0000232c <malloc>:
    232c:	b510      	push	{r4, lr}
    232e:	4b03      	ldr	r3, [pc, #12]	; (233c <malloc+0x10>)
    2330:	0001      	movs	r1, r0
    2332:	6818      	ldr	r0, [r3, #0]
    2334:	f000 f84a 	bl	23cc <_malloc_r>
    2338:	bd10      	pop	{r4, pc}
    233a:	46c0      	nop			; (mov r8, r8)
    233c:	20000064 	.word	0x20000064

00002340 <_free_r>:
    2340:	b530      	push	{r4, r5, lr}
    2342:	2900      	cmp	r1, #0
    2344:	d03e      	beq.n	23c4 <_free_r+0x84>
    2346:	3904      	subs	r1, #4
    2348:	680b      	ldr	r3, [r1, #0]
    234a:	2b00      	cmp	r3, #0
    234c:	da00      	bge.n	2350 <_free_r+0x10>
    234e:	18c9      	adds	r1, r1, r3
    2350:	4a1d      	ldr	r2, [pc, #116]	; (23c8 <_free_r+0x88>)
    2352:	6813      	ldr	r3, [r2, #0]
    2354:	0014      	movs	r4, r2
    2356:	2b00      	cmp	r3, #0
    2358:	d102      	bne.n	2360 <_free_r+0x20>
    235a:	604b      	str	r3, [r1, #4]
    235c:	6011      	str	r1, [r2, #0]
    235e:	e031      	b.n	23c4 <_free_r+0x84>
    2360:	428b      	cmp	r3, r1
    2362:	d90d      	bls.n	2380 <_free_r+0x40>
    2364:	680a      	ldr	r2, [r1, #0]
    2366:	1888      	adds	r0, r1, r2
    2368:	4283      	cmp	r3, r0
    236a:	d103      	bne.n	2374 <_free_r+0x34>
    236c:	6818      	ldr	r0, [r3, #0]
    236e:	685b      	ldr	r3, [r3, #4]
    2370:	1882      	adds	r2, r0, r2
    2372:	600a      	str	r2, [r1, #0]
    2374:	604b      	str	r3, [r1, #4]
    2376:	6021      	str	r1, [r4, #0]
    2378:	e024      	b.n	23c4 <_free_r+0x84>
    237a:	428a      	cmp	r2, r1
    237c:	d803      	bhi.n	2386 <_free_r+0x46>
    237e:	0013      	movs	r3, r2
    2380:	685a      	ldr	r2, [r3, #4]
    2382:	2a00      	cmp	r2, #0
    2384:	d1f9      	bne.n	237a <_free_r+0x3a>
    2386:	681d      	ldr	r5, [r3, #0]
    2388:	195c      	adds	r4, r3, r5
    238a:	428c      	cmp	r4, r1
    238c:	d10b      	bne.n	23a6 <_free_r+0x66>
    238e:	6809      	ldr	r1, [r1, #0]
    2390:	1869      	adds	r1, r5, r1
    2392:	1858      	adds	r0, r3, r1
    2394:	6019      	str	r1, [r3, #0]
    2396:	4282      	cmp	r2, r0
    2398:	d114      	bne.n	23c4 <_free_r+0x84>
    239a:	6810      	ldr	r0, [r2, #0]
    239c:	6852      	ldr	r2, [r2, #4]
    239e:	1841      	adds	r1, r0, r1
    23a0:	6019      	str	r1, [r3, #0]
    23a2:	605a      	str	r2, [r3, #4]
    23a4:	e00e      	b.n	23c4 <_free_r+0x84>
    23a6:	428c      	cmp	r4, r1
    23a8:	d902      	bls.n	23b0 <_free_r+0x70>
    23aa:	230c      	movs	r3, #12
    23ac:	6003      	str	r3, [r0, #0]
    23ae:	e009      	b.n	23c4 <_free_r+0x84>
    23b0:	6808      	ldr	r0, [r1, #0]
    23b2:	180c      	adds	r4, r1, r0
    23b4:	42a2      	cmp	r2, r4
    23b6:	d103      	bne.n	23c0 <_free_r+0x80>
    23b8:	6814      	ldr	r4, [r2, #0]
    23ba:	6852      	ldr	r2, [r2, #4]
    23bc:	1820      	adds	r0, r4, r0
    23be:	6008      	str	r0, [r1, #0]
    23c0:	604a      	str	r2, [r1, #4]
    23c2:	6059      	str	r1, [r3, #4]
    23c4:	bd30      	pop	{r4, r5, pc}
    23c6:	46c0      	nop			; (mov r8, r8)
    23c8:	200000d4 	.word	0x200000d4

000023cc <_malloc_r>:
    23cc:	2303      	movs	r3, #3
    23ce:	b570      	push	{r4, r5, r6, lr}
    23d0:	1ccd      	adds	r5, r1, #3
    23d2:	439d      	bics	r5, r3
    23d4:	3508      	adds	r5, #8
    23d6:	0006      	movs	r6, r0
    23d8:	2d0c      	cmp	r5, #12
    23da:	d201      	bcs.n	23e0 <_malloc_r+0x14>
    23dc:	250c      	movs	r5, #12
    23de:	e005      	b.n	23ec <_malloc_r+0x20>
    23e0:	2d00      	cmp	r5, #0
    23e2:	da03      	bge.n	23ec <_malloc_r+0x20>
    23e4:	230c      	movs	r3, #12
    23e6:	2000      	movs	r0, #0
    23e8:	6033      	str	r3, [r6, #0]
    23ea:	e040      	b.n	246e <_malloc_r+0xa2>
    23ec:	42a9      	cmp	r1, r5
    23ee:	d8f9      	bhi.n	23e4 <_malloc_r+0x18>
    23f0:	4b1f      	ldr	r3, [pc, #124]	; (2470 <_malloc_r+0xa4>)
    23f2:	681c      	ldr	r4, [r3, #0]
    23f4:	001a      	movs	r2, r3
    23f6:	0021      	movs	r1, r4
    23f8:	2900      	cmp	r1, #0
    23fa:	d013      	beq.n	2424 <_malloc_r+0x58>
    23fc:	680b      	ldr	r3, [r1, #0]
    23fe:	1b5b      	subs	r3, r3, r5
    2400:	d40d      	bmi.n	241e <_malloc_r+0x52>
    2402:	2b0b      	cmp	r3, #11
    2404:	d902      	bls.n	240c <_malloc_r+0x40>
    2406:	600b      	str	r3, [r1, #0]
    2408:	18cc      	adds	r4, r1, r3
    240a:	e01e      	b.n	244a <_malloc_r+0x7e>
    240c:	428c      	cmp	r4, r1
    240e:	d102      	bne.n	2416 <_malloc_r+0x4a>
    2410:	6863      	ldr	r3, [r4, #4]
    2412:	6013      	str	r3, [r2, #0]
    2414:	e01a      	b.n	244c <_malloc_r+0x80>
    2416:	684b      	ldr	r3, [r1, #4]
    2418:	6063      	str	r3, [r4, #4]
    241a:	000c      	movs	r4, r1
    241c:	e016      	b.n	244c <_malloc_r+0x80>
    241e:	000c      	movs	r4, r1
    2420:	6849      	ldr	r1, [r1, #4]
    2422:	e7e9      	b.n	23f8 <_malloc_r+0x2c>
    2424:	4c13      	ldr	r4, [pc, #76]	; (2474 <_malloc_r+0xa8>)
    2426:	6823      	ldr	r3, [r4, #0]
    2428:	2b00      	cmp	r3, #0
    242a:	d103      	bne.n	2434 <_malloc_r+0x68>
    242c:	0030      	movs	r0, r6
    242e:	f000 faf7 	bl	2a20 <_sbrk_r>
    2432:	6020      	str	r0, [r4, #0]
    2434:	0029      	movs	r1, r5
    2436:	0030      	movs	r0, r6
    2438:	f000 faf2 	bl	2a20 <_sbrk_r>
    243c:	1c43      	adds	r3, r0, #1
    243e:	d0d1      	beq.n	23e4 <_malloc_r+0x18>
    2440:	2303      	movs	r3, #3
    2442:	1cc4      	adds	r4, r0, #3
    2444:	439c      	bics	r4, r3
    2446:	42a0      	cmp	r0, r4
    2448:	d10a      	bne.n	2460 <_malloc_r+0x94>
    244a:	6025      	str	r5, [r4, #0]
    244c:	0020      	movs	r0, r4
    244e:	2207      	movs	r2, #7
    2450:	300b      	adds	r0, #11
    2452:	1d23      	adds	r3, r4, #4
    2454:	4390      	bics	r0, r2
    2456:	1ac3      	subs	r3, r0, r3
    2458:	d009      	beq.n	246e <_malloc_r+0xa2>
    245a:	425a      	negs	r2, r3
    245c:	50e2      	str	r2, [r4, r3]
    245e:	e006      	b.n	246e <_malloc_r+0xa2>
    2460:	1a21      	subs	r1, r4, r0
    2462:	0030      	movs	r0, r6
    2464:	f000 fadc 	bl	2a20 <_sbrk_r>
    2468:	1c43      	adds	r3, r0, #1
    246a:	d1ee      	bne.n	244a <_malloc_r+0x7e>
    246c:	e7ba      	b.n	23e4 <_malloc_r+0x18>
    246e:	bd70      	pop	{r4, r5, r6, pc}
    2470:	200000d4 	.word	0x200000d4
    2474:	200000d0 	.word	0x200000d0

00002478 <__sfputc_r>:
    2478:	6893      	ldr	r3, [r2, #8]
    247a:	b510      	push	{r4, lr}
    247c:	3b01      	subs	r3, #1
    247e:	6093      	str	r3, [r2, #8]
    2480:	2b00      	cmp	r3, #0
    2482:	da05      	bge.n	2490 <__sfputc_r+0x18>
    2484:	6994      	ldr	r4, [r2, #24]
    2486:	42a3      	cmp	r3, r4
    2488:	db08      	blt.n	249c <__sfputc_r+0x24>
    248a:	b2cb      	uxtb	r3, r1
    248c:	2b0a      	cmp	r3, #10
    248e:	d005      	beq.n	249c <__sfputc_r+0x24>
    2490:	6813      	ldr	r3, [r2, #0]
    2492:	1c58      	adds	r0, r3, #1
    2494:	6010      	str	r0, [r2, #0]
    2496:	7019      	strb	r1, [r3, #0]
    2498:	b2c8      	uxtb	r0, r1
    249a:	e001      	b.n	24a0 <__sfputc_r+0x28>
    249c:	f000 fb1e 	bl	2adc <__swbuf_r>
    24a0:	bd10      	pop	{r4, pc}

000024a2 <__sfputs_r>:
    24a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24a4:	0006      	movs	r6, r0
    24a6:	000f      	movs	r7, r1
    24a8:	0014      	movs	r4, r2
    24aa:	18d5      	adds	r5, r2, r3
    24ac:	42ac      	cmp	r4, r5
    24ae:	d008      	beq.n	24c2 <__sfputs_r+0x20>
    24b0:	7821      	ldrb	r1, [r4, #0]
    24b2:	003a      	movs	r2, r7
    24b4:	0030      	movs	r0, r6
    24b6:	f7ff ffdf 	bl	2478 <__sfputc_r>
    24ba:	3401      	adds	r4, #1
    24bc:	1c43      	adds	r3, r0, #1
    24be:	d1f5      	bne.n	24ac <__sfputs_r+0xa>
    24c0:	e000      	b.n	24c4 <__sfputs_r+0x22>
    24c2:	2000      	movs	r0, #0
    24c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000024c8 <_vfiprintf_r>:
    24c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    24ca:	b09f      	sub	sp, #124	; 0x7c
    24cc:	0006      	movs	r6, r0
    24ce:	000f      	movs	r7, r1
    24d0:	9202      	str	r2, [sp, #8]
    24d2:	9305      	str	r3, [sp, #20]
    24d4:	2800      	cmp	r0, #0
    24d6:	d004      	beq.n	24e2 <_vfiprintf_r+0x1a>
    24d8:	6983      	ldr	r3, [r0, #24]
    24da:	2b00      	cmp	r3, #0
    24dc:	d101      	bne.n	24e2 <_vfiprintf_r+0x1a>
    24de:	f7ff fe2d 	bl	213c <__sinit>
    24e2:	4b7f      	ldr	r3, [pc, #508]	; (26e0 <_vfiprintf_r+0x218>)
    24e4:	429f      	cmp	r7, r3
    24e6:	d101      	bne.n	24ec <_vfiprintf_r+0x24>
    24e8:	6877      	ldr	r7, [r6, #4]
    24ea:	e008      	b.n	24fe <_vfiprintf_r+0x36>
    24ec:	4b7d      	ldr	r3, [pc, #500]	; (26e4 <_vfiprintf_r+0x21c>)
    24ee:	429f      	cmp	r7, r3
    24f0:	d101      	bne.n	24f6 <_vfiprintf_r+0x2e>
    24f2:	68b7      	ldr	r7, [r6, #8]
    24f4:	e003      	b.n	24fe <_vfiprintf_r+0x36>
    24f6:	4b7c      	ldr	r3, [pc, #496]	; (26e8 <_vfiprintf_r+0x220>)
    24f8:	429f      	cmp	r7, r3
    24fa:	d100      	bne.n	24fe <_vfiprintf_r+0x36>
    24fc:	68f7      	ldr	r7, [r6, #12]
    24fe:	89bb      	ldrh	r3, [r7, #12]
    2500:	071b      	lsls	r3, r3, #28
    2502:	d50a      	bpl.n	251a <_vfiprintf_r+0x52>
    2504:	693b      	ldr	r3, [r7, #16]
    2506:	2b00      	cmp	r3, #0
    2508:	d007      	beq.n	251a <_vfiprintf_r+0x52>
    250a:	2300      	movs	r3, #0
    250c:	ad06      	add	r5, sp, #24
    250e:	616b      	str	r3, [r5, #20]
    2510:	3320      	adds	r3, #32
    2512:	766b      	strb	r3, [r5, #25]
    2514:	3310      	adds	r3, #16
    2516:	76ab      	strb	r3, [r5, #26]
    2518:	e03d      	b.n	2596 <_vfiprintf_r+0xce>
    251a:	0039      	movs	r1, r7
    251c:	0030      	movs	r0, r6
    251e:	f000 fb49 	bl	2bb4 <__swsetup_r>
    2522:	2800      	cmp	r0, #0
    2524:	d0f1      	beq.n	250a <_vfiprintf_r+0x42>
    2526:	2001      	movs	r0, #1
    2528:	4240      	negs	r0, r0
    252a:	e0d6      	b.n	26da <_vfiprintf_r+0x212>
    252c:	9a05      	ldr	r2, [sp, #20]
    252e:	1d11      	adds	r1, r2, #4
    2530:	6812      	ldr	r2, [r2, #0]
    2532:	9105      	str	r1, [sp, #20]
    2534:	2a00      	cmp	r2, #0
    2536:	da00      	bge.n	253a <_vfiprintf_r+0x72>
    2538:	e07f      	b.n	263a <_vfiprintf_r+0x172>
    253a:	9209      	str	r2, [sp, #36]	; 0x24
    253c:	3401      	adds	r4, #1
    253e:	7823      	ldrb	r3, [r4, #0]
    2540:	2b2e      	cmp	r3, #46	; 0x2e
    2542:	d100      	bne.n	2546 <_vfiprintf_r+0x7e>
    2544:	e08d      	b.n	2662 <_vfiprintf_r+0x19a>
    2546:	7821      	ldrb	r1, [r4, #0]
    2548:	2203      	movs	r2, #3
    254a:	4868      	ldr	r0, [pc, #416]	; (26ec <_vfiprintf_r+0x224>)
    254c:	f000 fbf2 	bl	2d34 <memchr>
    2550:	2800      	cmp	r0, #0
    2552:	d007      	beq.n	2564 <_vfiprintf_r+0x9c>
    2554:	4b65      	ldr	r3, [pc, #404]	; (26ec <_vfiprintf_r+0x224>)
    2556:	682a      	ldr	r2, [r5, #0]
    2558:	1ac0      	subs	r0, r0, r3
    255a:	2340      	movs	r3, #64	; 0x40
    255c:	4083      	lsls	r3, r0
    255e:	4313      	orrs	r3, r2
    2560:	602b      	str	r3, [r5, #0]
    2562:	3401      	adds	r4, #1
    2564:	7821      	ldrb	r1, [r4, #0]
    2566:	1c63      	adds	r3, r4, #1
    2568:	2206      	movs	r2, #6
    256a:	4861      	ldr	r0, [pc, #388]	; (26f0 <_vfiprintf_r+0x228>)
    256c:	9302      	str	r3, [sp, #8]
    256e:	7629      	strb	r1, [r5, #24]
    2570:	f000 fbe0 	bl	2d34 <memchr>
    2574:	2800      	cmp	r0, #0
    2576:	d100      	bne.n	257a <_vfiprintf_r+0xb2>
    2578:	e09d      	b.n	26b6 <_vfiprintf_r+0x1ee>
    257a:	4b5e      	ldr	r3, [pc, #376]	; (26f4 <_vfiprintf_r+0x22c>)
    257c:	2b00      	cmp	r3, #0
    257e:	d000      	beq.n	2582 <_vfiprintf_r+0xba>
    2580:	e090      	b.n	26a4 <_vfiprintf_r+0x1dc>
    2582:	2207      	movs	r2, #7
    2584:	9b05      	ldr	r3, [sp, #20]
    2586:	3307      	adds	r3, #7
    2588:	4393      	bics	r3, r2
    258a:	3308      	adds	r3, #8
    258c:	9305      	str	r3, [sp, #20]
    258e:	696b      	ldr	r3, [r5, #20]
    2590:	9a03      	ldr	r2, [sp, #12]
    2592:	189b      	adds	r3, r3, r2
    2594:	616b      	str	r3, [r5, #20]
    2596:	9c02      	ldr	r4, [sp, #8]
    2598:	7823      	ldrb	r3, [r4, #0]
    259a:	2b00      	cmp	r3, #0
    259c:	d104      	bne.n	25a8 <_vfiprintf_r+0xe0>
    259e:	9b02      	ldr	r3, [sp, #8]
    25a0:	1ae3      	subs	r3, r4, r3
    25a2:	9304      	str	r3, [sp, #16]
    25a4:	d012      	beq.n	25cc <_vfiprintf_r+0x104>
    25a6:	e003      	b.n	25b0 <_vfiprintf_r+0xe8>
    25a8:	2b25      	cmp	r3, #37	; 0x25
    25aa:	d0f8      	beq.n	259e <_vfiprintf_r+0xd6>
    25ac:	3401      	adds	r4, #1
    25ae:	e7f3      	b.n	2598 <_vfiprintf_r+0xd0>
    25b0:	9b04      	ldr	r3, [sp, #16]
    25b2:	9a02      	ldr	r2, [sp, #8]
    25b4:	0039      	movs	r1, r7
    25b6:	0030      	movs	r0, r6
    25b8:	f7ff ff73 	bl	24a2 <__sfputs_r>
    25bc:	1c43      	adds	r3, r0, #1
    25be:	d100      	bne.n	25c2 <_vfiprintf_r+0xfa>
    25c0:	e086      	b.n	26d0 <_vfiprintf_r+0x208>
    25c2:	696a      	ldr	r2, [r5, #20]
    25c4:	9b04      	ldr	r3, [sp, #16]
    25c6:	4694      	mov	ip, r2
    25c8:	4463      	add	r3, ip
    25ca:	616b      	str	r3, [r5, #20]
    25cc:	7823      	ldrb	r3, [r4, #0]
    25ce:	2b00      	cmp	r3, #0
    25d0:	d07e      	beq.n	26d0 <_vfiprintf_r+0x208>
    25d2:	2201      	movs	r2, #1
    25d4:	2300      	movs	r3, #0
    25d6:	4252      	negs	r2, r2
    25d8:	606a      	str	r2, [r5, #4]
    25da:	a902      	add	r1, sp, #8
    25dc:	3254      	adds	r2, #84	; 0x54
    25de:	1852      	adds	r2, r2, r1
    25e0:	3401      	adds	r4, #1
    25e2:	602b      	str	r3, [r5, #0]
    25e4:	60eb      	str	r3, [r5, #12]
    25e6:	60ab      	str	r3, [r5, #8]
    25e8:	7013      	strb	r3, [r2, #0]
    25ea:	65ab      	str	r3, [r5, #88]	; 0x58
    25ec:	7821      	ldrb	r1, [r4, #0]
    25ee:	2205      	movs	r2, #5
    25f0:	4841      	ldr	r0, [pc, #260]	; (26f8 <_vfiprintf_r+0x230>)
    25f2:	f000 fb9f 	bl	2d34 <memchr>
    25f6:	2800      	cmp	r0, #0
    25f8:	d008      	beq.n	260c <_vfiprintf_r+0x144>
    25fa:	4b3f      	ldr	r3, [pc, #252]	; (26f8 <_vfiprintf_r+0x230>)
    25fc:	682a      	ldr	r2, [r5, #0]
    25fe:	1ac0      	subs	r0, r0, r3
    2600:	2301      	movs	r3, #1
    2602:	4083      	lsls	r3, r0
    2604:	4313      	orrs	r3, r2
    2606:	602b      	str	r3, [r5, #0]
    2608:	3401      	adds	r4, #1
    260a:	e7ef      	b.n	25ec <_vfiprintf_r+0x124>
    260c:	682b      	ldr	r3, [r5, #0]
    260e:	06da      	lsls	r2, r3, #27
    2610:	d504      	bpl.n	261c <_vfiprintf_r+0x154>
    2612:	2253      	movs	r2, #83	; 0x53
    2614:	2120      	movs	r1, #32
    2616:	a802      	add	r0, sp, #8
    2618:	1812      	adds	r2, r2, r0
    261a:	7011      	strb	r1, [r2, #0]
    261c:	071a      	lsls	r2, r3, #28
    261e:	d504      	bpl.n	262a <_vfiprintf_r+0x162>
    2620:	2253      	movs	r2, #83	; 0x53
    2622:	212b      	movs	r1, #43	; 0x2b
    2624:	a802      	add	r0, sp, #8
    2626:	1812      	adds	r2, r2, r0
    2628:	7011      	strb	r1, [r2, #0]
    262a:	7822      	ldrb	r2, [r4, #0]
    262c:	2a2a      	cmp	r2, #42	; 0x2a
    262e:	d100      	bne.n	2632 <_vfiprintf_r+0x16a>
    2630:	e77c      	b.n	252c <_vfiprintf_r+0x64>
    2632:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2634:	2000      	movs	r0, #0
    2636:	210a      	movs	r1, #10
    2638:	e005      	b.n	2646 <_vfiprintf_r+0x17e>
    263a:	4252      	negs	r2, r2
    263c:	60ea      	str	r2, [r5, #12]
    263e:	2202      	movs	r2, #2
    2640:	4313      	orrs	r3, r2
    2642:	602b      	str	r3, [r5, #0]
    2644:	e77a      	b.n	253c <_vfiprintf_r+0x74>
    2646:	7822      	ldrb	r2, [r4, #0]
    2648:	3a30      	subs	r2, #48	; 0x30
    264a:	2a09      	cmp	r2, #9
    264c:	d804      	bhi.n	2658 <_vfiprintf_r+0x190>
    264e:	434b      	muls	r3, r1
    2650:	3401      	adds	r4, #1
    2652:	189b      	adds	r3, r3, r2
    2654:	2001      	movs	r0, #1
    2656:	e7f6      	b.n	2646 <_vfiprintf_r+0x17e>
    2658:	2800      	cmp	r0, #0
    265a:	d100      	bne.n	265e <_vfiprintf_r+0x196>
    265c:	e76f      	b.n	253e <_vfiprintf_r+0x76>
    265e:	9309      	str	r3, [sp, #36]	; 0x24
    2660:	e76d      	b.n	253e <_vfiprintf_r+0x76>
    2662:	7863      	ldrb	r3, [r4, #1]
    2664:	2b2a      	cmp	r3, #42	; 0x2a
    2666:	d10a      	bne.n	267e <_vfiprintf_r+0x1b6>
    2668:	9b05      	ldr	r3, [sp, #20]
    266a:	3402      	adds	r4, #2
    266c:	1d1a      	adds	r2, r3, #4
    266e:	681b      	ldr	r3, [r3, #0]
    2670:	9205      	str	r2, [sp, #20]
    2672:	2b00      	cmp	r3, #0
    2674:	da01      	bge.n	267a <_vfiprintf_r+0x1b2>
    2676:	2301      	movs	r3, #1
    2678:	425b      	negs	r3, r3
    267a:	9307      	str	r3, [sp, #28]
    267c:	e763      	b.n	2546 <_vfiprintf_r+0x7e>
    267e:	2300      	movs	r3, #0
    2680:	200a      	movs	r0, #10
    2682:	001a      	movs	r2, r3
    2684:	3401      	adds	r4, #1
    2686:	606b      	str	r3, [r5, #4]
    2688:	7821      	ldrb	r1, [r4, #0]
    268a:	3930      	subs	r1, #48	; 0x30
    268c:	2909      	cmp	r1, #9
    268e:	d804      	bhi.n	269a <_vfiprintf_r+0x1d2>
    2690:	4342      	muls	r2, r0
    2692:	3401      	adds	r4, #1
    2694:	1852      	adds	r2, r2, r1
    2696:	2301      	movs	r3, #1
    2698:	e7f6      	b.n	2688 <_vfiprintf_r+0x1c0>
    269a:	2b00      	cmp	r3, #0
    269c:	d100      	bne.n	26a0 <_vfiprintf_r+0x1d8>
    269e:	e752      	b.n	2546 <_vfiprintf_r+0x7e>
    26a0:	9207      	str	r2, [sp, #28]
    26a2:	e750      	b.n	2546 <_vfiprintf_r+0x7e>
    26a4:	ab05      	add	r3, sp, #20
    26a6:	9300      	str	r3, [sp, #0]
    26a8:	003a      	movs	r2, r7
    26aa:	4b14      	ldr	r3, [pc, #80]	; (26fc <_vfiprintf_r+0x234>)
    26ac:	0029      	movs	r1, r5
    26ae:	0030      	movs	r0, r6
    26b0:	e000      	b.n	26b4 <_vfiprintf_r+0x1ec>
    26b2:	bf00      	nop
    26b4:	e007      	b.n	26c6 <_vfiprintf_r+0x1fe>
    26b6:	ab05      	add	r3, sp, #20
    26b8:	9300      	str	r3, [sp, #0]
    26ba:	003a      	movs	r2, r7
    26bc:	4b0f      	ldr	r3, [pc, #60]	; (26fc <_vfiprintf_r+0x234>)
    26be:	0029      	movs	r1, r5
    26c0:	0030      	movs	r0, r6
    26c2:	f000 f88b 	bl	27dc <_printf_i>
    26c6:	9003      	str	r0, [sp, #12]
    26c8:	9b03      	ldr	r3, [sp, #12]
    26ca:	3301      	adds	r3, #1
    26cc:	d000      	beq.n	26d0 <_vfiprintf_r+0x208>
    26ce:	e75e      	b.n	258e <_vfiprintf_r+0xc6>
    26d0:	89bb      	ldrh	r3, [r7, #12]
    26d2:	065b      	lsls	r3, r3, #25
    26d4:	d500      	bpl.n	26d8 <_vfiprintf_r+0x210>
    26d6:	e726      	b.n	2526 <_vfiprintf_r+0x5e>
    26d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    26da:	b01f      	add	sp, #124	; 0x7c
    26dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26de:	46c0      	nop			; (mov r8, r8)
    26e0:	00002efc 	.word	0x00002efc
    26e4:	00002f1c 	.word	0x00002f1c
    26e8:	00002f3c 	.word	0x00002f3c
    26ec:	00002f62 	.word	0x00002f62
    26f0:	00002f66 	.word	0x00002f66
    26f4:	00000000 	.word	0x00000000
    26f8:	00002f5c 	.word	0x00002f5c
    26fc:	000024a3 	.word	0x000024a3

00002700 <_printf_common>:
    2700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2702:	0017      	movs	r7, r2
    2704:	9301      	str	r3, [sp, #4]
    2706:	688a      	ldr	r2, [r1, #8]
    2708:	690b      	ldr	r3, [r1, #16]
    270a:	9000      	str	r0, [sp, #0]
    270c:	000c      	movs	r4, r1
    270e:	4293      	cmp	r3, r2
    2710:	da00      	bge.n	2714 <_printf_common+0x14>
    2712:	0013      	movs	r3, r2
    2714:	0022      	movs	r2, r4
    2716:	603b      	str	r3, [r7, #0]
    2718:	3243      	adds	r2, #67	; 0x43
    271a:	7812      	ldrb	r2, [r2, #0]
    271c:	2a00      	cmp	r2, #0
    271e:	d001      	beq.n	2724 <_printf_common+0x24>
    2720:	3301      	adds	r3, #1
    2722:	603b      	str	r3, [r7, #0]
    2724:	6823      	ldr	r3, [r4, #0]
    2726:	069b      	lsls	r3, r3, #26
    2728:	d502      	bpl.n	2730 <_printf_common+0x30>
    272a:	683b      	ldr	r3, [r7, #0]
    272c:	3302      	adds	r3, #2
    272e:	603b      	str	r3, [r7, #0]
    2730:	2506      	movs	r5, #6
    2732:	6823      	ldr	r3, [r4, #0]
    2734:	401d      	ands	r5, r3
    2736:	d01e      	beq.n	2776 <_printf_common+0x76>
    2738:	0023      	movs	r3, r4
    273a:	3343      	adds	r3, #67	; 0x43
    273c:	781b      	ldrb	r3, [r3, #0]
    273e:	1e5a      	subs	r2, r3, #1
    2740:	4193      	sbcs	r3, r2
    2742:	6822      	ldr	r2, [r4, #0]
    2744:	0692      	lsls	r2, r2, #26
    2746:	d51c      	bpl.n	2782 <_printf_common+0x82>
    2748:	2030      	movs	r0, #48	; 0x30
    274a:	18e1      	adds	r1, r4, r3
    274c:	3143      	adds	r1, #67	; 0x43
    274e:	7008      	strb	r0, [r1, #0]
    2750:	0021      	movs	r1, r4
    2752:	1c5a      	adds	r2, r3, #1
    2754:	3145      	adds	r1, #69	; 0x45
    2756:	7809      	ldrb	r1, [r1, #0]
    2758:	18a2      	adds	r2, r4, r2
    275a:	3243      	adds	r2, #67	; 0x43
    275c:	3302      	adds	r3, #2
    275e:	7011      	strb	r1, [r2, #0]
    2760:	e00f      	b.n	2782 <_printf_common+0x82>
    2762:	0022      	movs	r2, r4
    2764:	2301      	movs	r3, #1
    2766:	3219      	adds	r2, #25
    2768:	9901      	ldr	r1, [sp, #4]
    276a:	9800      	ldr	r0, [sp, #0]
    276c:	9e08      	ldr	r6, [sp, #32]
    276e:	47b0      	blx	r6
    2770:	1c43      	adds	r3, r0, #1
    2772:	d00e      	beq.n	2792 <_printf_common+0x92>
    2774:	3501      	adds	r5, #1
    2776:	68e3      	ldr	r3, [r4, #12]
    2778:	683a      	ldr	r2, [r7, #0]
    277a:	1a9b      	subs	r3, r3, r2
    277c:	429d      	cmp	r5, r3
    277e:	dbf0      	blt.n	2762 <_printf_common+0x62>
    2780:	e7da      	b.n	2738 <_printf_common+0x38>
    2782:	0022      	movs	r2, r4
    2784:	9901      	ldr	r1, [sp, #4]
    2786:	3243      	adds	r2, #67	; 0x43
    2788:	9800      	ldr	r0, [sp, #0]
    278a:	9d08      	ldr	r5, [sp, #32]
    278c:	47a8      	blx	r5
    278e:	1c43      	adds	r3, r0, #1
    2790:	d102      	bne.n	2798 <_printf_common+0x98>
    2792:	2001      	movs	r0, #1
    2794:	4240      	negs	r0, r0
    2796:	e020      	b.n	27da <_printf_common+0xda>
    2798:	2306      	movs	r3, #6
    279a:	6820      	ldr	r0, [r4, #0]
    279c:	68e1      	ldr	r1, [r4, #12]
    279e:	683a      	ldr	r2, [r7, #0]
    27a0:	4003      	ands	r3, r0
    27a2:	2500      	movs	r5, #0
    27a4:	2b04      	cmp	r3, #4
    27a6:	d103      	bne.n	27b0 <_printf_common+0xb0>
    27a8:	1a8d      	subs	r5, r1, r2
    27aa:	43eb      	mvns	r3, r5
    27ac:	17db      	asrs	r3, r3, #31
    27ae:	401d      	ands	r5, r3
    27b0:	68a3      	ldr	r3, [r4, #8]
    27b2:	6922      	ldr	r2, [r4, #16]
    27b4:	4293      	cmp	r3, r2
    27b6:	dd01      	ble.n	27bc <_printf_common+0xbc>
    27b8:	1a9b      	subs	r3, r3, r2
    27ba:	18ed      	adds	r5, r5, r3
    27bc:	2700      	movs	r7, #0
    27be:	42bd      	cmp	r5, r7
    27c0:	d00a      	beq.n	27d8 <_printf_common+0xd8>
    27c2:	0022      	movs	r2, r4
    27c4:	2301      	movs	r3, #1
    27c6:	321a      	adds	r2, #26
    27c8:	9901      	ldr	r1, [sp, #4]
    27ca:	9800      	ldr	r0, [sp, #0]
    27cc:	9e08      	ldr	r6, [sp, #32]
    27ce:	47b0      	blx	r6
    27d0:	1c43      	adds	r3, r0, #1
    27d2:	d0de      	beq.n	2792 <_printf_common+0x92>
    27d4:	3701      	adds	r7, #1
    27d6:	e7f2      	b.n	27be <_printf_common+0xbe>
    27d8:	2000      	movs	r0, #0
    27da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000027dc <_printf_i>:
    27dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    27de:	b08b      	sub	sp, #44	; 0x2c
    27e0:	9206      	str	r2, [sp, #24]
    27e2:	000a      	movs	r2, r1
    27e4:	3243      	adds	r2, #67	; 0x43
    27e6:	9307      	str	r3, [sp, #28]
    27e8:	9005      	str	r0, [sp, #20]
    27ea:	9204      	str	r2, [sp, #16]
    27ec:	7e0a      	ldrb	r2, [r1, #24]
    27ee:	000c      	movs	r4, r1
    27f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    27f2:	2a6e      	cmp	r2, #110	; 0x6e
    27f4:	d100      	bne.n	27f8 <_printf_i+0x1c>
    27f6:	e0ab      	b.n	2950 <_printf_i+0x174>
    27f8:	d811      	bhi.n	281e <_printf_i+0x42>
    27fa:	2a63      	cmp	r2, #99	; 0x63
    27fc:	d022      	beq.n	2844 <_printf_i+0x68>
    27fe:	d809      	bhi.n	2814 <_printf_i+0x38>
    2800:	2a00      	cmp	r2, #0
    2802:	d100      	bne.n	2806 <_printf_i+0x2a>
    2804:	e0b5      	b.n	2972 <_printf_i+0x196>
    2806:	2a58      	cmp	r2, #88	; 0x58
    2808:	d000      	beq.n	280c <_printf_i+0x30>
    280a:	e0c5      	b.n	2998 <_printf_i+0x1bc>
    280c:	3145      	adds	r1, #69	; 0x45
    280e:	700a      	strb	r2, [r1, #0]
    2810:	4a81      	ldr	r2, [pc, #516]	; (2a18 <_printf_i+0x23c>)
    2812:	e04f      	b.n	28b4 <_printf_i+0xd8>
    2814:	2a64      	cmp	r2, #100	; 0x64
    2816:	d01d      	beq.n	2854 <_printf_i+0x78>
    2818:	2a69      	cmp	r2, #105	; 0x69
    281a:	d01b      	beq.n	2854 <_printf_i+0x78>
    281c:	e0bc      	b.n	2998 <_printf_i+0x1bc>
    281e:	2a73      	cmp	r2, #115	; 0x73
    2820:	d100      	bne.n	2824 <_printf_i+0x48>
    2822:	e0aa      	b.n	297a <_printf_i+0x19e>
    2824:	d809      	bhi.n	283a <_printf_i+0x5e>
    2826:	2a6f      	cmp	r2, #111	; 0x6f
    2828:	d029      	beq.n	287e <_printf_i+0xa2>
    282a:	2a70      	cmp	r2, #112	; 0x70
    282c:	d000      	beq.n	2830 <_printf_i+0x54>
    282e:	e0b3      	b.n	2998 <_printf_i+0x1bc>
    2830:	2220      	movs	r2, #32
    2832:	6809      	ldr	r1, [r1, #0]
    2834:	430a      	orrs	r2, r1
    2836:	6022      	str	r2, [r4, #0]
    2838:	e037      	b.n	28aa <_printf_i+0xce>
    283a:	2a75      	cmp	r2, #117	; 0x75
    283c:	d01f      	beq.n	287e <_printf_i+0xa2>
    283e:	2a78      	cmp	r2, #120	; 0x78
    2840:	d033      	beq.n	28aa <_printf_i+0xce>
    2842:	e0a9      	b.n	2998 <_printf_i+0x1bc>
    2844:	000e      	movs	r6, r1
    2846:	681a      	ldr	r2, [r3, #0]
    2848:	3642      	adds	r6, #66	; 0x42
    284a:	1d11      	adds	r1, r2, #4
    284c:	6019      	str	r1, [r3, #0]
    284e:	6813      	ldr	r3, [r2, #0]
    2850:	7033      	strb	r3, [r6, #0]
    2852:	e0a4      	b.n	299e <_printf_i+0x1c2>
    2854:	6821      	ldr	r1, [r4, #0]
    2856:	681a      	ldr	r2, [r3, #0]
    2858:	0608      	lsls	r0, r1, #24
    285a:	d406      	bmi.n	286a <_printf_i+0x8e>
    285c:	0649      	lsls	r1, r1, #25
    285e:	d504      	bpl.n	286a <_printf_i+0x8e>
    2860:	1d11      	adds	r1, r2, #4
    2862:	6019      	str	r1, [r3, #0]
    2864:	2300      	movs	r3, #0
    2866:	5ed5      	ldrsh	r5, [r2, r3]
    2868:	e002      	b.n	2870 <_printf_i+0x94>
    286a:	1d11      	adds	r1, r2, #4
    286c:	6019      	str	r1, [r3, #0]
    286e:	6815      	ldr	r5, [r2, #0]
    2870:	2d00      	cmp	r5, #0
    2872:	da3b      	bge.n	28ec <_printf_i+0x110>
    2874:	232d      	movs	r3, #45	; 0x2d
    2876:	9a04      	ldr	r2, [sp, #16]
    2878:	426d      	negs	r5, r5
    287a:	7013      	strb	r3, [r2, #0]
    287c:	e036      	b.n	28ec <_printf_i+0x110>
    287e:	6821      	ldr	r1, [r4, #0]
    2880:	681a      	ldr	r2, [r3, #0]
    2882:	0608      	lsls	r0, r1, #24
    2884:	d406      	bmi.n	2894 <_printf_i+0xb8>
    2886:	0649      	lsls	r1, r1, #25
    2888:	d504      	bpl.n	2894 <_printf_i+0xb8>
    288a:	6815      	ldr	r5, [r2, #0]
    288c:	1d11      	adds	r1, r2, #4
    288e:	6019      	str	r1, [r3, #0]
    2890:	b2ad      	uxth	r5, r5
    2892:	e002      	b.n	289a <_printf_i+0xbe>
    2894:	1d11      	adds	r1, r2, #4
    2896:	6019      	str	r1, [r3, #0]
    2898:	6815      	ldr	r5, [r2, #0]
    289a:	4b5f      	ldr	r3, [pc, #380]	; (2a18 <_printf_i+0x23c>)
    289c:	7e22      	ldrb	r2, [r4, #24]
    289e:	9303      	str	r3, [sp, #12]
    28a0:	2708      	movs	r7, #8
    28a2:	2a6f      	cmp	r2, #111	; 0x6f
    28a4:	d01d      	beq.n	28e2 <_printf_i+0x106>
    28a6:	270a      	movs	r7, #10
    28a8:	e01b      	b.n	28e2 <_printf_i+0x106>
    28aa:	0022      	movs	r2, r4
    28ac:	2178      	movs	r1, #120	; 0x78
    28ae:	3245      	adds	r2, #69	; 0x45
    28b0:	7011      	strb	r1, [r2, #0]
    28b2:	4a5a      	ldr	r2, [pc, #360]	; (2a1c <_printf_i+0x240>)
    28b4:	6819      	ldr	r1, [r3, #0]
    28b6:	9203      	str	r2, [sp, #12]
    28b8:	1d08      	adds	r0, r1, #4
    28ba:	6822      	ldr	r2, [r4, #0]
    28bc:	6018      	str	r0, [r3, #0]
    28be:	680d      	ldr	r5, [r1, #0]
    28c0:	0610      	lsls	r0, r2, #24
    28c2:	d402      	bmi.n	28ca <_printf_i+0xee>
    28c4:	0650      	lsls	r0, r2, #25
    28c6:	d500      	bpl.n	28ca <_printf_i+0xee>
    28c8:	b2ad      	uxth	r5, r5
    28ca:	07d3      	lsls	r3, r2, #31
    28cc:	d502      	bpl.n	28d4 <_printf_i+0xf8>
    28ce:	2320      	movs	r3, #32
    28d0:	431a      	orrs	r2, r3
    28d2:	6022      	str	r2, [r4, #0]
    28d4:	2710      	movs	r7, #16
    28d6:	2d00      	cmp	r5, #0
    28d8:	d103      	bne.n	28e2 <_printf_i+0x106>
    28da:	2320      	movs	r3, #32
    28dc:	6822      	ldr	r2, [r4, #0]
    28de:	439a      	bics	r2, r3
    28e0:	6022      	str	r2, [r4, #0]
    28e2:	0023      	movs	r3, r4
    28e4:	2200      	movs	r2, #0
    28e6:	3343      	adds	r3, #67	; 0x43
    28e8:	701a      	strb	r2, [r3, #0]
    28ea:	e002      	b.n	28f2 <_printf_i+0x116>
    28ec:	270a      	movs	r7, #10
    28ee:	4b4a      	ldr	r3, [pc, #296]	; (2a18 <_printf_i+0x23c>)
    28f0:	9303      	str	r3, [sp, #12]
    28f2:	6863      	ldr	r3, [r4, #4]
    28f4:	60a3      	str	r3, [r4, #8]
    28f6:	2b00      	cmp	r3, #0
    28f8:	db09      	blt.n	290e <_printf_i+0x132>
    28fa:	2204      	movs	r2, #4
    28fc:	6821      	ldr	r1, [r4, #0]
    28fe:	4391      	bics	r1, r2
    2900:	6021      	str	r1, [r4, #0]
    2902:	2d00      	cmp	r5, #0
    2904:	d105      	bne.n	2912 <_printf_i+0x136>
    2906:	9e04      	ldr	r6, [sp, #16]
    2908:	2b00      	cmp	r3, #0
    290a:	d011      	beq.n	2930 <_printf_i+0x154>
    290c:	e07b      	b.n	2a06 <_printf_i+0x22a>
    290e:	2d00      	cmp	r5, #0
    2910:	d079      	beq.n	2a06 <_printf_i+0x22a>
    2912:	9e04      	ldr	r6, [sp, #16]
    2914:	0028      	movs	r0, r5
    2916:	0039      	movs	r1, r7
    2918:	f7ff f9de 	bl	1cd8 <__aeabi_uidivmod>
    291c:	9b03      	ldr	r3, [sp, #12]
    291e:	3e01      	subs	r6, #1
    2920:	5c5b      	ldrb	r3, [r3, r1]
    2922:	0028      	movs	r0, r5
    2924:	7033      	strb	r3, [r6, #0]
    2926:	0039      	movs	r1, r7
    2928:	f7ff f950 	bl	1bcc <__aeabi_uidiv>
    292c:	1e05      	subs	r5, r0, #0
    292e:	d1f1      	bne.n	2914 <_printf_i+0x138>
    2930:	2f08      	cmp	r7, #8
    2932:	d109      	bne.n	2948 <_printf_i+0x16c>
    2934:	6823      	ldr	r3, [r4, #0]
    2936:	07db      	lsls	r3, r3, #31
    2938:	d506      	bpl.n	2948 <_printf_i+0x16c>
    293a:	6863      	ldr	r3, [r4, #4]
    293c:	6922      	ldr	r2, [r4, #16]
    293e:	4293      	cmp	r3, r2
    2940:	dc02      	bgt.n	2948 <_printf_i+0x16c>
    2942:	2330      	movs	r3, #48	; 0x30
    2944:	3e01      	subs	r6, #1
    2946:	7033      	strb	r3, [r6, #0]
    2948:	9b04      	ldr	r3, [sp, #16]
    294a:	1b9b      	subs	r3, r3, r6
    294c:	6123      	str	r3, [r4, #16]
    294e:	e02b      	b.n	29a8 <_printf_i+0x1cc>
    2950:	6809      	ldr	r1, [r1, #0]
    2952:	681a      	ldr	r2, [r3, #0]
    2954:	0608      	lsls	r0, r1, #24
    2956:	d407      	bmi.n	2968 <_printf_i+0x18c>
    2958:	0649      	lsls	r1, r1, #25
    295a:	d505      	bpl.n	2968 <_printf_i+0x18c>
    295c:	1d11      	adds	r1, r2, #4
    295e:	6019      	str	r1, [r3, #0]
    2960:	6813      	ldr	r3, [r2, #0]
    2962:	8aa2      	ldrh	r2, [r4, #20]
    2964:	801a      	strh	r2, [r3, #0]
    2966:	e004      	b.n	2972 <_printf_i+0x196>
    2968:	1d11      	adds	r1, r2, #4
    296a:	6019      	str	r1, [r3, #0]
    296c:	6813      	ldr	r3, [r2, #0]
    296e:	6962      	ldr	r2, [r4, #20]
    2970:	601a      	str	r2, [r3, #0]
    2972:	2300      	movs	r3, #0
    2974:	9e04      	ldr	r6, [sp, #16]
    2976:	6123      	str	r3, [r4, #16]
    2978:	e016      	b.n	29a8 <_printf_i+0x1cc>
    297a:	681a      	ldr	r2, [r3, #0]
    297c:	1d11      	adds	r1, r2, #4
    297e:	6019      	str	r1, [r3, #0]
    2980:	6816      	ldr	r6, [r2, #0]
    2982:	2100      	movs	r1, #0
    2984:	6862      	ldr	r2, [r4, #4]
    2986:	0030      	movs	r0, r6
    2988:	f000 f9d4 	bl	2d34 <memchr>
    298c:	2800      	cmp	r0, #0
    298e:	d001      	beq.n	2994 <_printf_i+0x1b8>
    2990:	1b80      	subs	r0, r0, r6
    2992:	6060      	str	r0, [r4, #4]
    2994:	6863      	ldr	r3, [r4, #4]
    2996:	e003      	b.n	29a0 <_printf_i+0x1c4>
    2998:	0026      	movs	r6, r4
    299a:	3642      	adds	r6, #66	; 0x42
    299c:	7032      	strb	r2, [r6, #0]
    299e:	2301      	movs	r3, #1
    29a0:	6123      	str	r3, [r4, #16]
    29a2:	2300      	movs	r3, #0
    29a4:	9a04      	ldr	r2, [sp, #16]
    29a6:	7013      	strb	r3, [r2, #0]
    29a8:	9b07      	ldr	r3, [sp, #28]
    29aa:	aa09      	add	r2, sp, #36	; 0x24
    29ac:	9300      	str	r3, [sp, #0]
    29ae:	0021      	movs	r1, r4
    29b0:	9b06      	ldr	r3, [sp, #24]
    29b2:	9805      	ldr	r0, [sp, #20]
    29b4:	f7ff fea4 	bl	2700 <_printf_common>
    29b8:	1c43      	adds	r3, r0, #1
    29ba:	d102      	bne.n	29c2 <_printf_i+0x1e6>
    29bc:	2001      	movs	r0, #1
    29be:	4240      	negs	r0, r0
    29c0:	e027      	b.n	2a12 <_printf_i+0x236>
    29c2:	6923      	ldr	r3, [r4, #16]
    29c4:	0032      	movs	r2, r6
    29c6:	9906      	ldr	r1, [sp, #24]
    29c8:	9805      	ldr	r0, [sp, #20]
    29ca:	9d07      	ldr	r5, [sp, #28]
    29cc:	47a8      	blx	r5
    29ce:	1c43      	adds	r3, r0, #1
    29d0:	d0f4      	beq.n	29bc <_printf_i+0x1e0>
    29d2:	6823      	ldr	r3, [r4, #0]
    29d4:	2500      	movs	r5, #0
    29d6:	079b      	lsls	r3, r3, #30
    29d8:	d40f      	bmi.n	29fa <_printf_i+0x21e>
    29da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    29dc:	68e0      	ldr	r0, [r4, #12]
    29de:	4298      	cmp	r0, r3
    29e0:	da17      	bge.n	2a12 <_printf_i+0x236>
    29e2:	0018      	movs	r0, r3
    29e4:	e015      	b.n	2a12 <_printf_i+0x236>
    29e6:	0022      	movs	r2, r4
    29e8:	2301      	movs	r3, #1
    29ea:	3219      	adds	r2, #25
    29ec:	9906      	ldr	r1, [sp, #24]
    29ee:	9805      	ldr	r0, [sp, #20]
    29f0:	9e07      	ldr	r6, [sp, #28]
    29f2:	47b0      	blx	r6
    29f4:	1c43      	adds	r3, r0, #1
    29f6:	d0e1      	beq.n	29bc <_printf_i+0x1e0>
    29f8:	3501      	adds	r5, #1
    29fa:	68e3      	ldr	r3, [r4, #12]
    29fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    29fe:	1a9b      	subs	r3, r3, r2
    2a00:	429d      	cmp	r5, r3
    2a02:	dbf0      	blt.n	29e6 <_printf_i+0x20a>
    2a04:	e7e9      	b.n	29da <_printf_i+0x1fe>
    2a06:	0026      	movs	r6, r4
    2a08:	9b03      	ldr	r3, [sp, #12]
    2a0a:	3642      	adds	r6, #66	; 0x42
    2a0c:	781b      	ldrb	r3, [r3, #0]
    2a0e:	7033      	strb	r3, [r6, #0]
    2a10:	e78e      	b.n	2930 <_printf_i+0x154>
    2a12:	b00b      	add	sp, #44	; 0x2c
    2a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a16:	46c0      	nop			; (mov r8, r8)
    2a18:	00002f6d 	.word	0x00002f6d
    2a1c:	00002f7e 	.word	0x00002f7e

00002a20 <_sbrk_r>:
    2a20:	2300      	movs	r3, #0
    2a22:	b570      	push	{r4, r5, r6, lr}
    2a24:	4c06      	ldr	r4, [pc, #24]	; (2a40 <_sbrk_r+0x20>)
    2a26:	0005      	movs	r5, r0
    2a28:	0008      	movs	r0, r1
    2a2a:	6023      	str	r3, [r4, #0]
    2a2c:	f7fe ff3e 	bl	18ac <_sbrk>
    2a30:	1c43      	adds	r3, r0, #1
    2a32:	d103      	bne.n	2a3c <_sbrk_r+0x1c>
    2a34:	6823      	ldr	r3, [r4, #0]
    2a36:	2b00      	cmp	r3, #0
    2a38:	d000      	beq.n	2a3c <_sbrk_r+0x1c>
    2a3a:	602b      	str	r3, [r5, #0]
    2a3c:	bd70      	pop	{r4, r5, r6, pc}
    2a3e:	46c0      	nop			; (mov r8, r8)
    2a40:	20000260 	.word	0x20000260

00002a44 <__sread>:
    2a44:	b570      	push	{r4, r5, r6, lr}
    2a46:	000c      	movs	r4, r1
    2a48:	250e      	movs	r5, #14
    2a4a:	5f49      	ldrsh	r1, [r1, r5]
    2a4c:	f000 f97e 	bl	2d4c <_read_r>
    2a50:	2800      	cmp	r0, #0
    2a52:	db03      	blt.n	2a5c <__sread+0x18>
    2a54:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2a56:	181b      	adds	r3, r3, r0
    2a58:	6563      	str	r3, [r4, #84]	; 0x54
    2a5a:	e003      	b.n	2a64 <__sread+0x20>
    2a5c:	89a2      	ldrh	r2, [r4, #12]
    2a5e:	4b02      	ldr	r3, [pc, #8]	; (2a68 <__sread+0x24>)
    2a60:	4013      	ands	r3, r2
    2a62:	81a3      	strh	r3, [r4, #12]
    2a64:	bd70      	pop	{r4, r5, r6, pc}
    2a66:	46c0      	nop			; (mov r8, r8)
    2a68:	ffffefff 	.word	0xffffefff

00002a6c <__swrite>:
    2a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a6e:	001f      	movs	r7, r3
    2a70:	898b      	ldrh	r3, [r1, #12]
    2a72:	0005      	movs	r5, r0
    2a74:	000c      	movs	r4, r1
    2a76:	0016      	movs	r6, r2
    2a78:	05db      	lsls	r3, r3, #23
    2a7a:	d505      	bpl.n	2a88 <__swrite+0x1c>
    2a7c:	230e      	movs	r3, #14
    2a7e:	5ec9      	ldrsh	r1, [r1, r3]
    2a80:	2200      	movs	r2, #0
    2a82:	2302      	movs	r3, #2
    2a84:	f000 f942 	bl	2d0c <_lseek_r>
    2a88:	89a2      	ldrh	r2, [r4, #12]
    2a8a:	4b05      	ldr	r3, [pc, #20]	; (2aa0 <__swrite+0x34>)
    2a8c:	0028      	movs	r0, r5
    2a8e:	4013      	ands	r3, r2
    2a90:	81a3      	strh	r3, [r4, #12]
    2a92:	0032      	movs	r2, r6
    2a94:	230e      	movs	r3, #14
    2a96:	5ee1      	ldrsh	r1, [r4, r3]
    2a98:	003b      	movs	r3, r7
    2a9a:	f000 f877 	bl	2b8c <_write_r>
    2a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2aa0:	ffffefff 	.word	0xffffefff

00002aa4 <__sseek>:
    2aa4:	b570      	push	{r4, r5, r6, lr}
    2aa6:	000c      	movs	r4, r1
    2aa8:	250e      	movs	r5, #14
    2aaa:	5f49      	ldrsh	r1, [r1, r5]
    2aac:	f000 f92e 	bl	2d0c <_lseek_r>
    2ab0:	89a3      	ldrh	r3, [r4, #12]
    2ab2:	1c42      	adds	r2, r0, #1
    2ab4:	d103      	bne.n	2abe <__sseek+0x1a>
    2ab6:	4a05      	ldr	r2, [pc, #20]	; (2acc <__sseek+0x28>)
    2ab8:	4013      	ands	r3, r2
    2aba:	81a3      	strh	r3, [r4, #12]
    2abc:	e004      	b.n	2ac8 <__sseek+0x24>
    2abe:	2280      	movs	r2, #128	; 0x80
    2ac0:	0152      	lsls	r2, r2, #5
    2ac2:	4313      	orrs	r3, r2
    2ac4:	81a3      	strh	r3, [r4, #12]
    2ac6:	6560      	str	r0, [r4, #84]	; 0x54
    2ac8:	bd70      	pop	{r4, r5, r6, pc}
    2aca:	46c0      	nop			; (mov r8, r8)
    2acc:	ffffefff 	.word	0xffffefff

00002ad0 <__sclose>:
    2ad0:	b510      	push	{r4, lr}
    2ad2:	230e      	movs	r3, #14
    2ad4:	5ec9      	ldrsh	r1, [r1, r3]
    2ad6:	f000 f8e3 	bl	2ca0 <_close_r>
    2ada:	bd10      	pop	{r4, pc}

00002adc <__swbuf_r>:
    2adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ade:	0005      	movs	r5, r0
    2ae0:	000f      	movs	r7, r1
    2ae2:	0014      	movs	r4, r2
    2ae4:	2800      	cmp	r0, #0
    2ae6:	d004      	beq.n	2af2 <__swbuf_r+0x16>
    2ae8:	6983      	ldr	r3, [r0, #24]
    2aea:	2b00      	cmp	r3, #0
    2aec:	d101      	bne.n	2af2 <__swbuf_r+0x16>
    2aee:	f7ff fb25 	bl	213c <__sinit>
    2af2:	4b23      	ldr	r3, [pc, #140]	; (2b80 <__swbuf_r+0xa4>)
    2af4:	429c      	cmp	r4, r3
    2af6:	d101      	bne.n	2afc <__swbuf_r+0x20>
    2af8:	686c      	ldr	r4, [r5, #4]
    2afa:	e008      	b.n	2b0e <__swbuf_r+0x32>
    2afc:	4b21      	ldr	r3, [pc, #132]	; (2b84 <__swbuf_r+0xa8>)
    2afe:	429c      	cmp	r4, r3
    2b00:	d101      	bne.n	2b06 <__swbuf_r+0x2a>
    2b02:	68ac      	ldr	r4, [r5, #8]
    2b04:	e003      	b.n	2b0e <__swbuf_r+0x32>
    2b06:	4b20      	ldr	r3, [pc, #128]	; (2b88 <__swbuf_r+0xac>)
    2b08:	429c      	cmp	r4, r3
    2b0a:	d100      	bne.n	2b0e <__swbuf_r+0x32>
    2b0c:	68ec      	ldr	r4, [r5, #12]
    2b0e:	69a3      	ldr	r3, [r4, #24]
    2b10:	60a3      	str	r3, [r4, #8]
    2b12:	89a3      	ldrh	r3, [r4, #12]
    2b14:	071b      	lsls	r3, r3, #28
    2b16:	d50a      	bpl.n	2b2e <__swbuf_r+0x52>
    2b18:	6923      	ldr	r3, [r4, #16]
    2b1a:	2b00      	cmp	r3, #0
    2b1c:	d007      	beq.n	2b2e <__swbuf_r+0x52>
    2b1e:	6823      	ldr	r3, [r4, #0]
    2b20:	6922      	ldr	r2, [r4, #16]
    2b22:	b2fe      	uxtb	r6, r7
    2b24:	1a98      	subs	r0, r3, r2
    2b26:	6963      	ldr	r3, [r4, #20]
    2b28:	4298      	cmp	r0, r3
    2b2a:	db0f      	blt.n	2b4c <__swbuf_r+0x70>
    2b2c:	e008      	b.n	2b40 <__swbuf_r+0x64>
    2b2e:	0021      	movs	r1, r4
    2b30:	0028      	movs	r0, r5
    2b32:	f000 f83f 	bl	2bb4 <__swsetup_r>
    2b36:	2800      	cmp	r0, #0
    2b38:	d0f1      	beq.n	2b1e <__swbuf_r+0x42>
    2b3a:	2001      	movs	r0, #1
    2b3c:	4240      	negs	r0, r0
    2b3e:	e01d      	b.n	2b7c <__swbuf_r+0xa0>
    2b40:	0021      	movs	r1, r4
    2b42:	0028      	movs	r0, r5
    2b44:	f7ff fa8c 	bl	2060 <_fflush_r>
    2b48:	2800      	cmp	r0, #0
    2b4a:	d1f6      	bne.n	2b3a <__swbuf_r+0x5e>
    2b4c:	68a3      	ldr	r3, [r4, #8]
    2b4e:	3001      	adds	r0, #1
    2b50:	3b01      	subs	r3, #1
    2b52:	60a3      	str	r3, [r4, #8]
    2b54:	6823      	ldr	r3, [r4, #0]
    2b56:	1c5a      	adds	r2, r3, #1
    2b58:	6022      	str	r2, [r4, #0]
    2b5a:	701f      	strb	r7, [r3, #0]
    2b5c:	6963      	ldr	r3, [r4, #20]
    2b5e:	4298      	cmp	r0, r3
    2b60:	d005      	beq.n	2b6e <__swbuf_r+0x92>
    2b62:	89a3      	ldrh	r3, [r4, #12]
    2b64:	0030      	movs	r0, r6
    2b66:	07db      	lsls	r3, r3, #31
    2b68:	d508      	bpl.n	2b7c <__swbuf_r+0xa0>
    2b6a:	2e0a      	cmp	r6, #10
    2b6c:	d106      	bne.n	2b7c <__swbuf_r+0xa0>
    2b6e:	0021      	movs	r1, r4
    2b70:	0028      	movs	r0, r5
    2b72:	f7ff fa75 	bl	2060 <_fflush_r>
    2b76:	2800      	cmp	r0, #0
    2b78:	d1df      	bne.n	2b3a <__swbuf_r+0x5e>
    2b7a:	0030      	movs	r0, r6
    2b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b7e:	46c0      	nop			; (mov r8, r8)
    2b80:	00002efc 	.word	0x00002efc
    2b84:	00002f1c 	.word	0x00002f1c
    2b88:	00002f3c 	.word	0x00002f3c

00002b8c <_write_r>:
    2b8c:	b570      	push	{r4, r5, r6, lr}
    2b8e:	0005      	movs	r5, r0
    2b90:	0008      	movs	r0, r1
    2b92:	0011      	movs	r1, r2
    2b94:	2200      	movs	r2, #0
    2b96:	4c06      	ldr	r4, [pc, #24]	; (2bb0 <_write_r+0x24>)
    2b98:	6022      	str	r2, [r4, #0]
    2b9a:	001a      	movs	r2, r3
    2b9c:	f7fd fcd8 	bl	550 <_write>
    2ba0:	1c43      	adds	r3, r0, #1
    2ba2:	d103      	bne.n	2bac <_write_r+0x20>
    2ba4:	6823      	ldr	r3, [r4, #0]
    2ba6:	2b00      	cmp	r3, #0
    2ba8:	d000      	beq.n	2bac <_write_r+0x20>
    2baa:	602b      	str	r3, [r5, #0]
    2bac:	bd70      	pop	{r4, r5, r6, pc}
    2bae:	46c0      	nop			; (mov r8, r8)
    2bb0:	20000260 	.word	0x20000260

00002bb4 <__swsetup_r>:
    2bb4:	4b36      	ldr	r3, [pc, #216]	; (2c90 <__swsetup_r+0xdc>)
    2bb6:	b570      	push	{r4, r5, r6, lr}
    2bb8:	681d      	ldr	r5, [r3, #0]
    2bba:	0006      	movs	r6, r0
    2bbc:	000c      	movs	r4, r1
    2bbe:	2d00      	cmp	r5, #0
    2bc0:	d005      	beq.n	2bce <__swsetup_r+0x1a>
    2bc2:	69ab      	ldr	r3, [r5, #24]
    2bc4:	2b00      	cmp	r3, #0
    2bc6:	d102      	bne.n	2bce <__swsetup_r+0x1a>
    2bc8:	0028      	movs	r0, r5
    2bca:	f7ff fab7 	bl	213c <__sinit>
    2bce:	4b31      	ldr	r3, [pc, #196]	; (2c94 <__swsetup_r+0xe0>)
    2bd0:	429c      	cmp	r4, r3
    2bd2:	d101      	bne.n	2bd8 <__swsetup_r+0x24>
    2bd4:	686c      	ldr	r4, [r5, #4]
    2bd6:	e008      	b.n	2bea <__swsetup_r+0x36>
    2bd8:	4b2f      	ldr	r3, [pc, #188]	; (2c98 <__swsetup_r+0xe4>)
    2bda:	429c      	cmp	r4, r3
    2bdc:	d101      	bne.n	2be2 <__swsetup_r+0x2e>
    2bde:	68ac      	ldr	r4, [r5, #8]
    2be0:	e003      	b.n	2bea <__swsetup_r+0x36>
    2be2:	4b2e      	ldr	r3, [pc, #184]	; (2c9c <__swsetup_r+0xe8>)
    2be4:	429c      	cmp	r4, r3
    2be6:	d100      	bne.n	2bea <__swsetup_r+0x36>
    2be8:	68ec      	ldr	r4, [r5, #12]
    2bea:	220c      	movs	r2, #12
    2bec:	5ea3      	ldrsh	r3, [r4, r2]
    2bee:	b29a      	uxth	r2, r3
    2bf0:	0711      	lsls	r1, r2, #28
    2bf2:	d423      	bmi.n	2c3c <__swsetup_r+0x88>
    2bf4:	06d1      	lsls	r1, r2, #27
    2bf6:	d407      	bmi.n	2c08 <__swsetup_r+0x54>
    2bf8:	2209      	movs	r2, #9
    2bfa:	2001      	movs	r0, #1
    2bfc:	6032      	str	r2, [r6, #0]
    2bfe:	3237      	adds	r2, #55	; 0x37
    2c00:	4313      	orrs	r3, r2
    2c02:	81a3      	strh	r3, [r4, #12]
    2c04:	4240      	negs	r0, r0
    2c06:	e042      	b.n	2c8e <__swsetup_r+0xda>
    2c08:	0753      	lsls	r3, r2, #29
    2c0a:	d513      	bpl.n	2c34 <__swsetup_r+0x80>
    2c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2c0e:	2900      	cmp	r1, #0
    2c10:	d008      	beq.n	2c24 <__swsetup_r+0x70>
    2c12:	0023      	movs	r3, r4
    2c14:	3344      	adds	r3, #68	; 0x44
    2c16:	4299      	cmp	r1, r3
    2c18:	d002      	beq.n	2c20 <__swsetup_r+0x6c>
    2c1a:	0030      	movs	r0, r6
    2c1c:	f7ff fb90 	bl	2340 <_free_r>
    2c20:	2300      	movs	r3, #0
    2c22:	6363      	str	r3, [r4, #52]	; 0x34
    2c24:	2224      	movs	r2, #36	; 0x24
    2c26:	89a3      	ldrh	r3, [r4, #12]
    2c28:	4393      	bics	r3, r2
    2c2a:	81a3      	strh	r3, [r4, #12]
    2c2c:	2300      	movs	r3, #0
    2c2e:	6063      	str	r3, [r4, #4]
    2c30:	6923      	ldr	r3, [r4, #16]
    2c32:	6023      	str	r3, [r4, #0]
    2c34:	2208      	movs	r2, #8
    2c36:	89a3      	ldrh	r3, [r4, #12]
    2c38:	4313      	orrs	r3, r2
    2c3a:	81a3      	strh	r3, [r4, #12]
    2c3c:	6923      	ldr	r3, [r4, #16]
    2c3e:	2b00      	cmp	r3, #0
    2c40:	d10b      	bne.n	2c5a <__swsetup_r+0xa6>
    2c42:	23a0      	movs	r3, #160	; 0xa0
    2c44:	89a2      	ldrh	r2, [r4, #12]
    2c46:	009b      	lsls	r3, r3, #2
    2c48:	4013      	ands	r3, r2
    2c4a:	2280      	movs	r2, #128	; 0x80
    2c4c:	0092      	lsls	r2, r2, #2
    2c4e:	4293      	cmp	r3, r2
    2c50:	d003      	beq.n	2c5a <__swsetup_r+0xa6>
    2c52:	0021      	movs	r1, r4
    2c54:	0030      	movs	r0, r6
    2c56:	f7ff fb2b 	bl	22b0 <__smakebuf_r>
    2c5a:	2301      	movs	r3, #1
    2c5c:	89a2      	ldrh	r2, [r4, #12]
    2c5e:	4013      	ands	r3, r2
    2c60:	d005      	beq.n	2c6e <__swsetup_r+0xba>
    2c62:	2300      	movs	r3, #0
    2c64:	60a3      	str	r3, [r4, #8]
    2c66:	6963      	ldr	r3, [r4, #20]
    2c68:	425b      	negs	r3, r3
    2c6a:	61a3      	str	r3, [r4, #24]
    2c6c:	e003      	b.n	2c76 <__swsetup_r+0xc2>
    2c6e:	0792      	lsls	r2, r2, #30
    2c70:	d400      	bmi.n	2c74 <__swsetup_r+0xc0>
    2c72:	6963      	ldr	r3, [r4, #20]
    2c74:	60a3      	str	r3, [r4, #8]
    2c76:	2000      	movs	r0, #0
    2c78:	6923      	ldr	r3, [r4, #16]
    2c7a:	4283      	cmp	r3, r0
    2c7c:	d107      	bne.n	2c8e <__swsetup_r+0xda>
    2c7e:	220c      	movs	r2, #12
    2c80:	5ea3      	ldrsh	r3, [r4, r2]
    2c82:	061a      	lsls	r2, r3, #24
    2c84:	d503      	bpl.n	2c8e <__swsetup_r+0xda>
    2c86:	2240      	movs	r2, #64	; 0x40
    2c88:	4313      	orrs	r3, r2
    2c8a:	81a3      	strh	r3, [r4, #12]
    2c8c:	3801      	subs	r0, #1
    2c8e:	bd70      	pop	{r4, r5, r6, pc}
    2c90:	20000064 	.word	0x20000064
    2c94:	00002efc 	.word	0x00002efc
    2c98:	00002f1c 	.word	0x00002f1c
    2c9c:	00002f3c 	.word	0x00002f3c

00002ca0 <_close_r>:
    2ca0:	2300      	movs	r3, #0
    2ca2:	b570      	push	{r4, r5, r6, lr}
    2ca4:	4c06      	ldr	r4, [pc, #24]	; (2cc0 <_close_r+0x20>)
    2ca6:	0005      	movs	r5, r0
    2ca8:	0008      	movs	r0, r1
    2caa:	6023      	str	r3, [r4, #0]
    2cac:	f7fe fe10 	bl	18d0 <_close>
    2cb0:	1c43      	adds	r3, r0, #1
    2cb2:	d103      	bne.n	2cbc <_close_r+0x1c>
    2cb4:	6823      	ldr	r3, [r4, #0]
    2cb6:	2b00      	cmp	r3, #0
    2cb8:	d000      	beq.n	2cbc <_close_r+0x1c>
    2cba:	602b      	str	r3, [r5, #0]
    2cbc:	bd70      	pop	{r4, r5, r6, pc}
    2cbe:	46c0      	nop			; (mov r8, r8)
    2cc0:	20000260 	.word	0x20000260

00002cc4 <_fstat_r>:
    2cc4:	2300      	movs	r3, #0
    2cc6:	b570      	push	{r4, r5, r6, lr}
    2cc8:	4c06      	ldr	r4, [pc, #24]	; (2ce4 <_fstat_r+0x20>)
    2cca:	0005      	movs	r5, r0
    2ccc:	0008      	movs	r0, r1
    2cce:	0011      	movs	r1, r2
    2cd0:	6023      	str	r3, [r4, #0]
    2cd2:	f7fe fe01 	bl	18d8 <_fstat>
    2cd6:	1c43      	adds	r3, r0, #1
    2cd8:	d103      	bne.n	2ce2 <_fstat_r+0x1e>
    2cda:	6823      	ldr	r3, [r4, #0]
    2cdc:	2b00      	cmp	r3, #0
    2cde:	d000      	beq.n	2ce2 <_fstat_r+0x1e>
    2ce0:	602b      	str	r3, [r5, #0]
    2ce2:	bd70      	pop	{r4, r5, r6, pc}
    2ce4:	20000260 	.word	0x20000260

00002ce8 <_isatty_r>:
    2ce8:	2300      	movs	r3, #0
    2cea:	b570      	push	{r4, r5, r6, lr}
    2cec:	4c06      	ldr	r4, [pc, #24]	; (2d08 <_isatty_r+0x20>)
    2cee:	0005      	movs	r5, r0
    2cf0:	0008      	movs	r0, r1
    2cf2:	6023      	str	r3, [r4, #0]
    2cf4:	f7fe fdf6 	bl	18e4 <_isatty>
    2cf8:	1c43      	adds	r3, r0, #1
    2cfa:	d103      	bne.n	2d04 <_isatty_r+0x1c>
    2cfc:	6823      	ldr	r3, [r4, #0]
    2cfe:	2b00      	cmp	r3, #0
    2d00:	d000      	beq.n	2d04 <_isatty_r+0x1c>
    2d02:	602b      	str	r3, [r5, #0]
    2d04:	bd70      	pop	{r4, r5, r6, pc}
    2d06:	46c0      	nop			; (mov r8, r8)
    2d08:	20000260 	.word	0x20000260

00002d0c <_lseek_r>:
    2d0c:	b570      	push	{r4, r5, r6, lr}
    2d0e:	0005      	movs	r5, r0
    2d10:	0008      	movs	r0, r1
    2d12:	0011      	movs	r1, r2
    2d14:	2200      	movs	r2, #0
    2d16:	4c06      	ldr	r4, [pc, #24]	; (2d30 <_lseek_r+0x24>)
    2d18:	6022      	str	r2, [r4, #0]
    2d1a:	001a      	movs	r2, r3
    2d1c:	f7fe fde4 	bl	18e8 <_lseek>
    2d20:	1c43      	adds	r3, r0, #1
    2d22:	d103      	bne.n	2d2c <_lseek_r+0x20>
    2d24:	6823      	ldr	r3, [r4, #0]
    2d26:	2b00      	cmp	r3, #0
    2d28:	d000      	beq.n	2d2c <_lseek_r+0x20>
    2d2a:	602b      	str	r3, [r5, #0]
    2d2c:	bd70      	pop	{r4, r5, r6, pc}
    2d2e:	46c0      	nop			; (mov r8, r8)
    2d30:	20000260 	.word	0x20000260

00002d34 <memchr>:
    2d34:	b2c9      	uxtb	r1, r1
    2d36:	1882      	adds	r2, r0, r2
    2d38:	4290      	cmp	r0, r2
    2d3a:	d004      	beq.n	2d46 <memchr+0x12>
    2d3c:	7803      	ldrb	r3, [r0, #0]
    2d3e:	428b      	cmp	r3, r1
    2d40:	d002      	beq.n	2d48 <memchr+0x14>
    2d42:	3001      	adds	r0, #1
    2d44:	e7f8      	b.n	2d38 <memchr+0x4>
    2d46:	2000      	movs	r0, #0
    2d48:	4770      	bx	lr
	...

00002d4c <_read_r>:
    2d4c:	b570      	push	{r4, r5, r6, lr}
    2d4e:	0005      	movs	r5, r0
    2d50:	0008      	movs	r0, r1
    2d52:	0011      	movs	r1, r2
    2d54:	2200      	movs	r2, #0
    2d56:	4c06      	ldr	r4, [pc, #24]	; (2d70 <_read_r+0x24>)
    2d58:	6022      	str	r2, [r4, #0]
    2d5a:	001a      	movs	r2, r3
    2d5c:	f7fd fbd8 	bl	510 <_read>
    2d60:	1c43      	adds	r3, r0, #1
    2d62:	d103      	bne.n	2d6c <_read_r+0x20>
    2d64:	6823      	ldr	r3, [r4, #0]
    2d66:	2b00      	cmp	r3, #0
    2d68:	d000      	beq.n	2d6c <_read_r+0x20>
    2d6a:	602b      	str	r3, [r5, #0]
    2d6c:	bd70      	pop	{r4, r5, r6, pc}
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	20000260 	.word	0x20000260
    2d74:	42000000 	.word	0x42000000
    2d78:	42000400 	.word	0x42000400
    2d7c:	42000800 	.word	0x42000800
    2d80:	42000c00 	.word	0x42000c00
    2d84:	42001000 	.word	0x42001000
    2d88:	43000400 	.word	0x43000400
    2d8c:	0b0a0908 	.word	0x0b0a0908
    2d90:	00000d0c 	.word	0x00000d0c
    2d94:	00000e66 	.word	0x00000e66
    2d98:	000010a4 	.word	0x000010a4
    2d9c:	000010a4 	.word	0x000010a4
    2da0:	000010a4 	.word	0x000010a4
    2da4:	000010a4 	.word	0x000010a4
    2da8:	000010a4 	.word	0x000010a4
    2dac:	000010a4 	.word	0x000010a4
    2db0:	000010a4 	.word	0x000010a4
    2db4:	000010a4 	.word	0x000010a4
    2db8:	000010a4 	.word	0x000010a4
    2dbc:	000010a4 	.word	0x000010a4
    2dc0:	000010a4 	.word	0x000010a4
    2dc4:	000010a4 	.word	0x000010a4
    2dc8:	000010a4 	.word	0x000010a4
    2dcc:	000010a4 	.word	0x000010a4
    2dd0:	000010a4 	.word	0x000010a4
    2dd4:	00000e4e 	.word	0x00000e4e
    2dd8:	000010a4 	.word	0x000010a4
    2ddc:	000010a4 	.word	0x000010a4
    2de0:	000010a4 	.word	0x000010a4
    2de4:	000010a4 	.word	0x000010a4
    2de8:	000010a4 	.word	0x000010a4
    2dec:	000010a4 	.word	0x000010a4
    2df0:	000010a4 	.word	0x000010a4
    2df4:	000010a4 	.word	0x000010a4
    2df8:	000010a4 	.word	0x000010a4
    2dfc:	000010a4 	.word	0x000010a4
    2e00:	000010a4 	.word	0x000010a4
    2e04:	000010a4 	.word	0x000010a4
    2e08:	000010a4 	.word	0x000010a4
    2e0c:	000010a4 	.word	0x000010a4
    2e10:	000010a4 	.word	0x000010a4
    2e14:	00000e5e 	.word	0x00000e5e
    2e18:	000010a4 	.word	0x000010a4
    2e1c:	000010a4 	.word	0x000010a4
    2e20:	000010a4 	.word	0x000010a4
    2e24:	000010a4 	.word	0x000010a4
    2e28:	000010a4 	.word	0x000010a4
    2e2c:	000010a4 	.word	0x000010a4
    2e30:	000010a4 	.word	0x000010a4
    2e34:	000010a4 	.word	0x000010a4
    2e38:	000010a4 	.word	0x000010a4
    2e3c:	000010a4 	.word	0x000010a4
    2e40:	000010a4 	.word	0x000010a4
    2e44:	000010a4 	.word	0x000010a4
    2e48:	000010a4 	.word	0x000010a4
    2e4c:	000010a4 	.word	0x000010a4
    2e50:	000010a4 	.word	0x000010a4
    2e54:	00000e56 	.word	0x00000e56
    2e58:	00000e6e 	.word	0x00000e6e
    2e5c:	00000e36 	.word	0x00000e36
    2e60:	00000e46 	.word	0x00000e46
    2e64:	00000e3e 	.word	0x00000e3e
    2e68:	00000002 	.word	0x00000002
    2e6c:	00000003 	.word	0x00000003
    2e70:	00000028 	.word	0x00000028
    2e74:	00000029 	.word	0x00000029
    2e78:	00000004 	.word	0x00000004
    2e7c:	00000005 	.word	0x00000005
    2e80:	00000006 	.word	0x00000006
    2e84:	00000007 	.word	0x00000007
    2e88:	00000020 	.word	0x00000020
    2e8c:	00000021 	.word	0x00000021
    2e90:	00000022 	.word	0x00000022
    2e94:	00000023 	.word	0x00000023
    2e98:	00000024 	.word	0x00000024
    2e9c:	00000025 	.word	0x00000025
    2ea0:	00000026 	.word	0x00000026
    2ea4:	00000027 	.word	0x00000027
    2ea8:	00000008 	.word	0x00000008
    2eac:	00000009 	.word	0x00000009
    2eb0:	0000000a 	.word	0x0000000a
    2eb4:	0000000b 	.word	0x0000000b
    2eb8:	0000ffff 	.word	0x0000ffff
    2ebc:	0000ffff 	.word	0x0000ffff
    2ec0:	0000ffff 	.word	0x0000ffff
    2ec4:	0000ffff 	.word	0x0000ffff
    2ec8:	00001336 	.word	0x00001336
    2ecc:	00001332 	.word	0x00001332
    2ed0:	00001332 	.word	0x00001332
    2ed4:	00001394 	.word	0x00001394
    2ed8:	00001394 	.word	0x00001394
    2edc:	0000134c 	.word	0x0000134c
    2ee0:	0000133c 	.word	0x0000133c
    2ee4:	00001352 	.word	0x00001352
    2ee8:	00001382 	.word	0x00001382
    2eec:	0d0a6425 	.word	0x0d0a6425
    2ef0:	00000000 	.word	0x00000000
    2ef4:	00000043 	.word	0x00000043

00002ef8 <_global_impure_ptr>:
    2ef8:	20000004                                ... 

00002efc <__sf_fake_stdin>:
	...

00002f1c <__sf_fake_stdout>:
	...

00002f3c <__sf_fake_stderr>:
	...
    2f5c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2f6c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2f7c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2f8c:	00006665                                ef..

00002f90 <_init>:
    2f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f92:	46c0      	nop			; (mov r8, r8)
    2f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f96:	bc08      	pop	{r3}
    2f98:	469e      	mov	lr, r3
    2f9a:	4770      	bx	lr

00002f9c <__init_array_start>:
    2f9c:	000000dd 	.word	0x000000dd

00002fa0 <_fini>:
    2fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fa2:	46c0      	nop			; (mov r8, r8)
    2fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2fa6:	bc08      	pop	{r3}
    2fa8:	469e      	mov	lr, r3
    2faa:	4770      	bx	lr

00002fac <__fini_array_start>:
    2fac:	000000b5 	.word	0x000000b5
