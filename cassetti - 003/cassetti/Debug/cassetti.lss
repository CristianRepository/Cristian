
cassetti.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006ea4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000b4  20000000  00006ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  000200b4  2**0
                  CONTENTS
  3 .bss          00003fc4  200000b4  00006f58  000200b4  2**2
                  ALLOC
  4 .stack        00002000  20004078  0000af1c  000200b4  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
  7 .debug_info   00032b30  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004d51  00000000  00000000  00052c65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009a7f  00000000  00000000  000579b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b10  00000000  00000000  00061435  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b80  00000000  00000000  00061f45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002212a  00000000  00000000  00062ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00014e5b  00000000  00000000  00084bef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a5674  00000000  00000000  00099a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002270  00000000  00000000  0013f0c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20006078 	.word	0x20006078
       4:	000039b1 	.word	0x000039b1
       8:	000039ad 	.word	0x000039ad
       c:	000039ad 	.word	0x000039ad
	...
      2c:	00001031 	.word	0x00001031
	...
      38:	00001099 	.word	0x00001099
      3c:	000010dd 	.word	0x000010dd
      40:	000039ad 	.word	0x000039ad
      44:	000039ad 	.word	0x000039ad
      48:	000039ad 	.word	0x000039ad
      4c:	000039ad 	.word	0x000039ad
      50:	000039ad 	.word	0x000039ad
      54:	000039ad 	.word	0x000039ad
      58:	000039ad 	.word	0x000039ad
      5c:	000039ad 	.word	0x000039ad
      60:	00002cb5 	.word	0x00002cb5
      64:	00002cc5 	.word	0x00002cc5
      68:	00002cd5 	.word	0x00002cd5
      6c:	00002ce5 	.word	0x00002ce5
      70:	00002cf5 	.word	0x00002cf5
      74:	00002d05 	.word	0x00002d05
      78:	000039ad 	.word	0x000039ad
      7c:	000039ad 	.word	0x000039ad
      80:	000039ad 	.word	0x000039ad
      84:	000039ad 	.word	0x000039ad
      88:	000039ad 	.word	0x000039ad
      8c:	000039ad 	.word	0x000039ad
      90:	000039ad 	.word	0x000039ad
      94:	000039ad 	.word	0x000039ad
      98:	00003259 	.word	0x00003259
      9c:	000039ad 	.word	0x000039ad
      a0:	000039ad 	.word	0x000039ad
      a4:	000039ad 	.word	0x000039ad
      a8:	000039ad 	.word	0x000039ad
      ac:	000039ad 	.word	0x000039ad
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000b4 	.word	0x200000b4
      d4:	00000000 	.word	0x00000000
      d8:	00006ea4 	.word	0x00006ea4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000b8 	.word	0x200000b8
     108:	00006ea4 	.word	0x00006ea4
     10c:	00006ea4 	.word	0x00006ea4
     110:	00000000 	.word	0x00000000

00000114 <lis302dl_write_configuration>:
	0x88,
	0x08,
};


void lis302dl_write_configuration(void) {
     114:	b530      	push	{r4, r5, lr}
     116:	b085      	sub	sp, #20
	

	struct i2c_master_packet packet = {
     118:	aa01      	add	r2, sp, #4
     11a:	4b06      	ldr	r3, [pc, #24]	; (134 <lis302dl_write_configuration+0x20>)
     11c:	cb13      	ldmia	r3!, {r0, r1, r4}
     11e:	c213      	stmia	r2!, {r0, r1, r4}
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) != STATUS_OK);
     120:	4d05      	ldr	r5, [pc, #20]	; (138 <lis302dl_write_configuration+0x24>)
     122:	4c06      	ldr	r4, [pc, #24]	; (13c <lis302dl_write_configuration+0x28>)
     124:	a901      	add	r1, sp, #4
     126:	0028      	movs	r0, r5
     128:	47a0      	blx	r4
     12a:	2800      	cmp	r0, #0
     12c:	d1fa      	bne.n	124 <lis302dl_write_configuration+0x10>

	return;
}
     12e:	b005      	add	sp, #20
     130:	bd30      	pop	{r4, r5, pc}
     132:	46c0      	nop			; (mov r8, r8)
     134:	00006b94 	.word	0x00006b94
     138:	20003f8c 	.word	0x20003f8c
     13c:	00000891 	.word	0x00000891

00000140 <lis302dl_read_byte>:

	return;
}


uint8_t lis302dl_read_byte(uint8_t reg_address) {
     140:	b530      	push	{r4, r5, lr}
     142:	b08b      	sub	sp, #44	; 0x2c
     144:	466b      	mov	r3, sp
     146:	1dda      	adds	r2, r3, #7
     148:	71d8      	strb	r0, [r3, #7]

	uint8_t data;

	struct i2c_master_packet packet1 = {
     14a:	ab06      	add	r3, sp, #24
     14c:	211c      	movs	r1, #28
     14e:	8019      	strh	r1, [r3, #0]
     150:	391a      	subs	r1, #26
     152:	8059      	strh	r1, [r3, #2]
     154:	9207      	str	r2, [sp, #28]
     156:	2200      	movs	r2, #0
     158:	721a      	strb	r2, [r3, #8]
     15a:	725a      	strb	r2, [r3, #9]
     15c:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet1) != STATUS_OK);
     15e:	4d0f      	ldr	r5, [pc, #60]	; (19c <lis302dl_read_byte+0x5c>)
     160:	4c0f      	ldr	r4, [pc, #60]	; (1a0 <lis302dl_read_byte+0x60>)
     162:	a906      	add	r1, sp, #24
     164:	0028      	movs	r0, r5
     166:	47a0      	blx	r4
     168:	2800      	cmp	r0, #0
     16a:	d1fa      	bne.n	162 <lis302dl_read_byte+0x22>

	struct i2c_master_packet packet2 = {
     16c:	ab03      	add	r3, sp, #12
     16e:	221c      	movs	r2, #28
     170:	801a      	strh	r2, [r3, #0]
     172:	3a1b      	subs	r2, #27
     174:	805a      	strh	r2, [r3, #2]
     176:	3226      	adds	r2, #38	; 0x26
     178:	446a      	add	r2, sp
     17a:	9204      	str	r2, [sp, #16]
     17c:	2200      	movs	r2, #0
     17e:	721a      	strb	r2, [r3, #8]
     180:	725a      	strb	r2, [r3, #9]
     182:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet2) != STATUS_OK);
     184:	4d05      	ldr	r5, [pc, #20]	; (19c <lis302dl_read_byte+0x5c>)
     186:	4c07      	ldr	r4, [pc, #28]	; (1a4 <lis302dl_read_byte+0x64>)
     188:	a903      	add	r1, sp, #12
     18a:	0028      	movs	r0, r5
     18c:	47a0      	blx	r4
     18e:	2800      	cmp	r0, #0
     190:	d1fa      	bne.n	188 <lis302dl_read_byte+0x48>

	return data;
     192:	2327      	movs	r3, #39	; 0x27
     194:	446b      	add	r3, sp
     196:	7818      	ldrb	r0, [r3, #0]

}
     198:	b00b      	add	sp, #44	; 0x2c
     19a:	bd30      	pop	{r4, r5, pc}
     19c:	20003f8c 	.word	0x20003f8c
     1a0:	00000891 	.word	0x00000891
     1a4:	00000871 	.word	0x00000871

000001a8 <lis302dl_read_all>:



void lis302dl_read_all(void) {
     1a8:	b530      	push	{r4, r5, lr}
     1aa:	b087      	sub	sp, #28

	uint8_t data;

	struct i2c_master_packet packet1 = {
     1ac:	aa03      	add	r2, sp, #12
     1ae:	4b0c      	ldr	r3, [pc, #48]	; (1e0 <lis302dl_read_all+0x38>)
     1b0:	330c      	adds	r3, #12
     1b2:	cb13      	ldmia	r3!, {r0, r1, r4}
     1b4:	c213      	stmia	r2!, {r0, r1, r4}
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet1) != STATUS_OK);
     1b6:	4d0b      	ldr	r5, [pc, #44]	; (1e4 <lis302dl_read_all+0x3c>)
     1b8:	4c0b      	ldr	r4, [pc, #44]	; (1e8 <lis302dl_read_all+0x40>)
     1ba:	a903      	add	r1, sp, #12
     1bc:	0028      	movs	r0, r5
     1be:	47a0      	blx	r4
     1c0:	2800      	cmp	r0, #0
     1c2:	d1fa      	bne.n	1ba <lis302dl_read_all+0x12>

	struct i2c_master_packet packet2 = {
     1c4:	466a      	mov	r2, sp
     1c6:	4b06      	ldr	r3, [pc, #24]	; (1e0 <lis302dl_read_all+0x38>)
     1c8:	3318      	adds	r3, #24
     1ca:	cb13      	ldmia	r3!, {r0, r1, r4}
     1cc:	c213      	stmia	r2!, {r0, r1, r4}
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet2) != STATUS_OK);
     1ce:	4d05      	ldr	r5, [pc, #20]	; (1e4 <lis302dl_read_all+0x3c>)
     1d0:	4c06      	ldr	r4, [pc, #24]	; (1ec <lis302dl_read_all+0x44>)
     1d2:	4669      	mov	r1, sp
     1d4:	0028      	movs	r0, r5
     1d6:	47a0      	blx	r4
     1d8:	2800      	cmp	r0, #0
     1da:	d1fa      	bne.n	1d2 <lis302dl_read_all+0x2a>

	return data;

}
     1dc:	b007      	add	sp, #28
     1de:	bd30      	pop	{r4, r5, pc}
     1e0:	00006b94 	.word	0x00006b94
     1e4:	20003f8c 	.word	0x20003f8c
     1e8:	00000891 	.word	0x00000891
     1ec:	00000871 	.word	0x00000871

000001f0 <trimmer_value>:
extern struct i2c_master_module i2c_master_instance;


uint8_t trimmer_value(uint8_t value)
{
	return  value << 3;
     1f0:	00c0      	lsls	r0, r0, #3
     1f2:	b2c0      	uxtb	r0, r0
}
     1f4:	4770      	bx	lr
     1f6:	46c0      	nop			; (mov r8, r8)

000001f8 <MAX5435M_write_byte>:


void MAX5435M_write_byte(uint8_t byte_address, uint8_t byte_value) {
     1f8:	b530      	push	{r4, r5, lr}
     1fa:	b085      	sub	sp, #20
	
	
	uint8_t pack[2];
	pack[0] = byte_address;
     1fc:	ab03      	add	r3, sp, #12
     1fe:	7018      	strb	r0, [r3, #0]
	pack[1] = byte_value;
     200:	7059      	strb	r1, [r3, #1]

	
	struct i2c_master_packet packet = {
     202:	222c      	movs	r2, #44	; 0x2c
     204:	4669      	mov	r1, sp
     206:	800a      	strh	r2, [r1, #0]
     208:	3a2a      	subs	r2, #42	; 0x2a
     20a:	804a      	strh	r2, [r1, #2]
     20c:	9301      	str	r3, [sp, #4]
     20e:	2300      	movs	r3, #0
     210:	720b      	strb	r3, [r1, #8]
     212:	724b      	strb	r3, [r1, #9]
     214:	728b      	strb	r3, [r1, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) != STATUS_OK);
     216:	4d04      	ldr	r5, [pc, #16]	; (228 <MAX5435M_write_byte+0x30>)
     218:	4c04      	ldr	r4, [pc, #16]	; (22c <MAX5435M_write_byte+0x34>)
     21a:	4669      	mov	r1, sp
     21c:	0028      	movs	r0, r5
     21e:	47a0      	blx	r4
     220:	2800      	cmp	r0, #0
     222:	d1fa      	bne.n	21a <MAX5435M_write_byte+0x22>

	return;
}
     224:	b005      	add	sp, #20
     226:	bd30      	pop	{r4, r5, pc}
     228:	20003f8c 	.word	0x20003f8c
     22c:	00000891 	.word	0x00000891

00000230 <MAX5435L_write_byte>:

void MAX5435L_write_byte(uint8_t byte_address, uint8_t byte_value) {
     230:	b530      	push	{r4, r5, lr}
     232:	b085      	sub	sp, #20
	
	
	uint8_t pack[2];
	pack[0] = byte_address;
     234:	ab03      	add	r3, sp, #12
     236:	7018      	strb	r0, [r3, #0]
	pack[1] = byte_value;
     238:	7059      	strb	r1, [r3, #1]

	
	struct i2c_master_packet packet = {
     23a:	2228      	movs	r2, #40	; 0x28
     23c:	4669      	mov	r1, sp
     23e:	800a      	strh	r2, [r1, #0]
     240:	3a26      	subs	r2, #38	; 0x26
     242:	804a      	strh	r2, [r1, #2]
     244:	9301      	str	r3, [sp, #4]
     246:	2300      	movs	r3, #0
     248:	720b      	strb	r3, [r1, #8]
     24a:	724b      	strb	r3, [r1, #9]
     24c:	728b      	strb	r3, [r1, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) != STATUS_OK);
     24e:	4d04      	ldr	r5, [pc, #16]	; (260 <MAX5435L_write_byte+0x30>)
     250:	4c04      	ldr	r4, [pc, #16]	; (264 <MAX5435L_write_byte+0x34>)
     252:	4669      	mov	r1, sp
     254:	0028      	movs	r0, r5
     256:	47a0      	blx	r4
     258:	2800      	cmp	r0, #0
     25a:	d1fa      	bne.n	252 <MAX5435L_write_byte+0x22>

	return;
}
     25c:	b005      	add	sp, #20
     25e:	bd30      	pop	{r4, r5, pc}
     260:	20003f8c 	.word	0x20003f8c
     264:	00000891 	.word	0x00000891

00000268 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     268:	6801      	ldr	r1, [r0, #0]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     26a:	2207      	movs	r2, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     26c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     26e:	421a      	tst	r2, r3
     270:	d1fc      	bne.n	26c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     272:	4770      	bx	lr

00000274 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     274:	b5f0      	push	{r4, r5, r6, r7, lr}
     276:	465f      	mov	r7, fp
     278:	4656      	mov	r6, sl
     27a:	464d      	mov	r5, r9
     27c:	4644      	mov	r4, r8
     27e:	b4f0      	push	{r4, r5, r6, r7}
     280:	b08b      	sub	sp, #44	; 0x2c
     282:	0007      	movs	r7, r0
     284:	000d      	movs	r5, r1
     286:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     288:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     28a:	0008      	movs	r0, r1
     28c:	4b9e      	ldr	r3, [pc, #632]	; (508 <i2c_master_init+0x294>)
     28e:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
     290:	2805      	cmp	r0, #5
     292:	d100      	bne.n	296 <i2c_master_init+0x22>
     294:	e117      	b.n	4c6 <i2c_master_init+0x252>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     296:	0004      	movs	r4, r0
     298:	3412      	adds	r4, #18
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     29a:	499c      	ldr	r1, [pc, #624]	; (50c <i2c_master_init+0x298>)
     29c:	69ca      	ldr	r2, [r1, #28]
     29e:	2301      	movs	r3, #1
     2a0:	4083      	lsls	r3, r0
     2a2:	4313      	orrs	r3, r2
     2a4:	61cb      	str	r3, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     2a6:	a909      	add	r1, sp, #36	; 0x24
     2a8:	7b33      	ldrb	r3, [r6, #12]
     2aa:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     2ac:	b2e4      	uxtb	r4, r4
     2ae:	0020      	movs	r0, r4
     2b0:	4b97      	ldr	r3, [pc, #604]	; (510 <i2c_master_init+0x29c>)
     2b2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     2b4:	0020      	movs	r0, r4
     2b6:	4b97      	ldr	r3, [pc, #604]	; (514 <i2c_master_init+0x2a0>)
     2b8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     2ba:	7b30      	ldrb	r0, [r6, #12]
     2bc:	2100      	movs	r1, #0
     2be:	4b96      	ldr	r3, [pc, #600]	; (518 <i2c_master_init+0x2a4>)
     2c0:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     2c2:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
     2c4:	201c      	movs	r0, #28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     2c6:	079b      	lsls	r3, r3, #30
     2c8:	d500      	bpl.n	2cc <i2c_master_init+0x58>
     2ca:	e116      	b.n	4fa <i2c_master_init+0x286>
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     2cc:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
     2ce:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     2d0:	07db      	lsls	r3, r3, #31
     2d2:	d500      	bpl.n	2d6 <i2c_master_init+0x62>
     2d4:	e111      	b.n	4fa <i2c_master_init+0x286>
		return STATUS_BUSY;
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     2d6:	6838      	ldr	r0, [r7, #0]
     2d8:	4b8b      	ldr	r3, [pc, #556]	; (508 <i2c_master_init+0x294>)
     2da:	4699      	mov	r9, r3
     2dc:	4798      	blx	r3
     2de:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     2e0:	498e      	ldr	r1, [pc, #568]	; (51c <i2c_master_init+0x2a8>)
     2e2:	4b8f      	ldr	r3, [pc, #572]	; (520 <i2c_master_init+0x2ac>)
     2e4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     2e6:	00a4      	lsls	r4, r4, #2
     2e8:	4b8e      	ldr	r3, [pc, #568]	; (524 <i2c_master_init+0x2b0>)
     2ea:	50e7      	str	r7, [r4, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
     2ec:	2300      	movs	r3, #0
     2ee:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
     2f0:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
     2f2:	2400      	movs	r4, #0
     2f4:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
     2f6:	83bb      	strh	r3, [r7, #28]

	module->status = STATUS_OK;
     2f8:	2225      	movs	r2, #37	; 0x25
     2fa:	54bc      	strb	r4, [r7, r2]
	module->buffer = NULL;
     2fc:	623b      	str	r3, [r7, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     2fe:	3314      	adds	r3, #20
     300:	602b      	str	r3, [r5, #0]
	int32_t tmp_baud = 0;
	int32_t tmp_baud_hs = 0;
	int32_t tmp_baudlow_hs = 0;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     302:	683b      	ldr	r3, [r7, #0]
     304:	4698      	mov	r8, r3
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     306:	0018      	movs	r0, r3
     308:	47c8      	blx	r9
     30a:	4681      	mov	r9, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     30c:	2380      	movs	r3, #128	; 0x80
     30e:	aa08      	add	r2, sp, #32
     310:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     312:	7054      	strb	r4, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     314:	2301      	movs	r3, #1
     316:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     318:	70d4      	strb	r4, [r2, #3]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
     31a:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     31c:	6a35      	ldr	r5, [r6, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     31e:	2800      	cmp	r0, #0
     320:	d103      	bne.n	32a <i2c_master_init+0xb6>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     322:	2100      	movs	r1, #0
     324:	4640      	mov	r0, r8
     326:	4b80      	ldr	r3, [pc, #512]	; (528 <i2c_master_init+0x2b4>)
     328:	4798      	blx	r3
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     32a:	ab08      	add	r3, sp, #32
     32c:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     32e:	2302      	movs	r3, #2
     330:	aa08      	add	r2, sp, #32
     332:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     334:	0c00      	lsrs	r0, r0, #16
     336:	b2c0      	uxtb	r0, r0
     338:	0011      	movs	r1, r2
     33a:	4b7c      	ldr	r3, [pc, #496]	; (52c <i2c_master_init+0x2b8>)
     33c:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     33e:	2d00      	cmp	r5, #0
     340:	d104      	bne.n	34c <i2c_master_init+0xd8>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     342:	2101      	movs	r1, #1
     344:	4640      	mov	r0, r8
     346:	4b78      	ldr	r3, [pc, #480]	; (528 <i2c_master_init+0x2b4>)
     348:	4798      	blx	r3
     34a:	0005      	movs	r5, r0
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     34c:	ab08      	add	r3, sp, #32
     34e:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     350:	2302      	movs	r3, #2
     352:	aa08      	add	r2, sp, #32
     354:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     356:	0c28      	lsrs	r0, r5, #16
     358:	b2c0      	uxtb	r0, r0
     35a:	0011      	movs	r1, r2
     35c:	4b73      	ldr	r3, [pc, #460]	; (52c <i2c_master_init+0x2b8>)
     35e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     360:	8ab3      	ldrh	r3, [r6, #20]
     362:	80fb      	strh	r3, [r7, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     364:	8af3      	ldrh	r3, [r6, #22]
     366:	813b      	strh	r3, [r7, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     368:	7e32      	ldrb	r2, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     36a:	2380      	movs	r3, #128	; 0x80

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     36c:	2a00      	cmp	r2, #0
     36e:	d104      	bne.n	37a <i2c_master_init+0x106>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     370:	4b6f      	ldr	r3, [pc, #444]	; (530 <i2c_master_init+0x2bc>)
     372:	789b      	ldrb	r3, [r3, #2]
     374:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     376:	0fdb      	lsrs	r3, r3, #31
     378:	01db      	lsls	r3, r3, #7
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
		tmp_ctrla |= config->start_hold_time;
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     37a:	68b1      	ldr	r1, [r6, #8]
     37c:	6932      	ldr	r2, [r6, #16]
     37e:	430a      	orrs	r2, r1
     380:	4313      	orrs	r3, r2

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     382:	2224      	movs	r2, #36	; 0x24
     384:	5cb2      	ldrb	r2, [r6, r2]
     386:	2a00      	cmp	r2, #0
     388:	d002      	beq.n	390 <i2c_master_init+0x11c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     38a:	2280      	movs	r2, #128	; 0x80
     38c:	05d2      	lsls	r2, r2, #23
     38e:	4313      	orrs	r3, r2
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
		tmp_ctrla |= config->inactive_timeout;
     390:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     392:	4313      	orrs	r3, r2
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     394:	222c      	movs	r2, #44	; 0x2c
     396:	5cb2      	ldrb	r2, [r6, r2]
     398:	2a00      	cmp	r2, #0
     39a:	d103      	bne.n	3a4 <i2c_master_init+0x130>
     39c:	2280      	movs	r2, #128	; 0x80
     39e:	0492      	lsls	r2, r2, #18
     3a0:	4291      	cmp	r1, r2
     3a2:	d102      	bne.n	3aa <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     3a4:	2280      	movs	r2, #128	; 0x80
     3a6:	0512      	lsls	r2, r2, #20
     3a8:	4313      	orrs	r3, r2
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     3aa:	222d      	movs	r2, #45	; 0x2d
     3ac:	5cb2      	ldrb	r2, [r6, r2]
     3ae:	2a00      	cmp	r2, #0
     3b0:	d002      	beq.n	3b8 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     3b2:	2280      	movs	r2, #128	; 0x80
     3b4:	0412      	lsls	r2, r2, #16
     3b6:	4313      	orrs	r3, r2
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     3b8:	222e      	movs	r2, #46	; 0x2e
     3ba:	5cb2      	ldrb	r2, [r6, r2]
     3bc:	2a00      	cmp	r2, #0
     3be:	d002      	beq.n	3c6 <i2c_master_init+0x152>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     3c0:	2280      	movs	r2, #128	; 0x80
     3c2:	03d2      	lsls	r2, r2, #15
     3c4:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     3c6:	4642      	mov	r2, r8
     3c8:	6812      	ldr	r2, [r2, #0]
     3ca:	4313      	orrs	r3, r2
     3cc:	4642      	mov	r2, r8
     3ce:	6013      	str	r3, [r2, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     3d0:	2380      	movs	r3, #128	; 0x80
     3d2:	005b      	lsls	r3, r3, #1
     3d4:	6053      	str	r3, [r2, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     3d6:	464c      	mov	r4, r9
     3d8:	3412      	adds	r4, #18
     3da:	b2e0      	uxtb	r0, r4
     3dc:	4b55      	ldr	r3, [pc, #340]	; (534 <i2c_master_init+0x2c0>)
     3de:	4798      	blx	r3
     3e0:	0005      	movs	r5, r0
     3e2:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     3e4:	27fa      	movs	r7, #250	; 0xfa
     3e6:	00bf      	lsls	r7, r7, #2
     3e8:	6833      	ldr	r3, [r6, #0]
     3ea:	435f      	muls	r7, r3
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     3ec:	6873      	ldr	r3, [r6, #4]
     3ee:	469a      	mov	sl, r3
	uint32_t trise       = config->sda_scl_rise_time_ns;
	
	tmp_baud = (int32_t)(div_ceil(
     3f0:	4c51      	ldr	r4, [pc, #324]	; (538 <i2c_master_init+0x2c4>)
     3f2:	47a0      	blx	r4
     3f4:	9002      	str	r0, [sp, #8]
     3f6:	9103      	str	r1, [sp, #12]
     3f8:	0078      	lsls	r0, r7, #1
     3fa:	47a0      	blx	r4
     3fc:	9000      	str	r0, [sp, #0]
     3fe:	9101      	str	r1, [sp, #4]
     400:	8e30      	ldrh	r0, [r6, #48]	; 0x30
     402:	4368      	muls	r0, r5
     404:	47a0      	blx	r4
     406:	4b4d      	ldr	r3, [pc, #308]	; (53c <i2c_master_init+0x2c8>)
     408:	469b      	mov	fp, r3
     40a:	4a4d      	ldr	r2, [pc, #308]	; (540 <i2c_master_init+0x2cc>)
     40c:	4b4d      	ldr	r3, [pc, #308]	; (544 <i2c_master_init+0x2d0>)
     40e:	47d8      	blx	fp
     410:	4d4d      	ldr	r5, [pc, #308]	; (548 <i2c_master_init+0x2d4>)
     412:	2200      	movs	r2, #0
     414:	4b4d      	ldr	r3, [pc, #308]	; (54c <i2c_master_init+0x2d8>)
     416:	47a8      	blx	r5
     418:	9004      	str	r0, [sp, #16]
     41a:	9105      	str	r1, [sp, #20]
     41c:	0038      	movs	r0, r7
     41e:	47a0      	blx	r4
     420:	0002      	movs	r2, r0
     422:	000b      	movs	r3, r1
     424:	9804      	ldr	r0, [sp, #16]
     426:	9905      	ldr	r1, [sp, #20]
     428:	47d8      	blx	fp
     42a:	0002      	movs	r2, r0
     42c:	000b      	movs	r3, r1
     42e:	4c48      	ldr	r4, [pc, #288]	; (550 <i2c_master_init+0x2dc>)
     430:	9802      	ldr	r0, [sp, #8]
     432:	9903      	ldr	r1, [sp, #12]
     434:	47a0      	blx	r4
     436:	9a00      	ldr	r2, [sp, #0]
     438:	9b01      	ldr	r3, [sp, #4]
     43a:	47a8      	blx	r5
     43c:	2200      	movs	r2, #0
     43e:	4b45      	ldr	r3, [pc, #276]	; (554 <i2c_master_init+0x2e0>)
     440:	47a0      	blx	r4
     442:	9a00      	ldr	r2, [sp, #0]
     444:	9b01      	ldr	r3, [sp, #4]
     446:	4c44      	ldr	r4, [pc, #272]	; (558 <i2c_master_init+0x2e4>)
     448:	47a0      	blx	r4
     44a:	4b44      	ldr	r3, [pc, #272]	; (55c <i2c_master_init+0x2e8>)
     44c:	4798      	blx	r3
     44e:	0004      	movs	r4, r0
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     450:	68b2      	ldr	r2, [r6, #8]
     452:	2380      	movs	r3, #128	; 0x80
     454:	049b      	lsls	r3, r3, #18
     456:	429a      	cmp	r2, r3
     458:	d149      	bne.n	4ee <i2c_master_init+0x27a>
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
	uint32_t fscl        = 1000 * config->baud_rate;
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     45a:	21fa      	movs	r1, #250	; 0xfa
     45c:	0089      	lsls	r1, r1, #2
     45e:	4657      	mov	r7, sl
     460:	434f      	muls	r7, r1
	tmp_baud = (int32_t)(div_ceil(
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     462:	9802      	ldr	r0, [sp, #8]
     464:	9903      	ldr	r1, [sp, #12]
     466:	0002      	movs	r2, r0
     468:	000b      	movs	r3, r1
     46a:	47a8      	blx	r5
     46c:	9000      	str	r0, [sp, #0]
     46e:	9101      	str	r1, [sp, #4]
     470:	0038      	movs	r0, r7
     472:	4b31      	ldr	r3, [pc, #196]	; (538 <i2c_master_init+0x2c4>)
     474:	4798      	blx	r3
     476:	2200      	movs	r2, #0
     478:	4b39      	ldr	r3, [pc, #228]	; (560 <i2c_master_init+0x2ec>)
     47a:	47d8      	blx	fp
     47c:	0002      	movs	r2, r0
     47e:	000b      	movs	r3, r1
     480:	9800      	ldr	r0, [sp, #0]
     482:	9901      	ldr	r1, [sp, #4]
     484:	4e34      	ldr	r6, [pc, #208]	; (558 <i2c_master_init+0x2e4>)
     486:	47b0      	blx	r6
     488:	2200      	movs	r2, #0
     48a:	4b32      	ldr	r3, [pc, #200]	; (554 <i2c_master_init+0x2e0>)
     48c:	4e30      	ldr	r6, [pc, #192]	; (550 <i2c_master_init+0x2dc>)
     48e:	47b0      	blx	r6
     490:	4b32      	ldr	r3, [pc, #200]	; (55c <i2c_master_init+0x2e8>)
     492:	4798      	blx	r3
     494:	1e06      	subs	r6, r0, #0
		if (tmp_baudlow_hs) {
     496:	d006      	beq.n	4a6 <i2c_master_init+0x232>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     498:	0039      	movs	r1, r7
     49a:	9807      	ldr	r0, [sp, #28]
     49c:	4b31      	ldr	r3, [pc, #196]	; (564 <i2c_master_init+0x2f0>)
     49e:	4798      	blx	r3
     4a0:	3802      	subs	r0, #2
     4a2:	1b83      	subs	r3, r0, r6
     4a4:	e007      	b.n	4b6 <i2c_master_init+0x242>
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     4a6:	0079      	lsls	r1, r7, #1
     4a8:	1e48      	subs	r0, r1, #1
     4aa:	9b07      	ldr	r3, [sp, #28]
     4ac:	469c      	mov	ip, r3
     4ae:	4460      	add	r0, ip
     4b0:	4b2c      	ldr	r3, [pc, #176]	; (564 <i2c_master_init+0x2f0>)
     4b2:	4798      	blx	r3
     4b4:	1e43      	subs	r3, r0, #1
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     4b6:	2cff      	cmp	r4, #255	; 0xff
     4b8:	d803      	bhi.n	4c2 <i2c_master_init+0x24e>
     4ba:	2bff      	cmp	r3, #255	; 0xff
     4bc:	d90a      	bls.n	4d4 <i2c_master_init+0x260>
     4be:	2040      	movs	r0, #64	; 0x40
     4c0:	e01b      	b.n	4fa <i2c_master_init+0x286>
     4c2:	2040      	movs	r0, #64	; 0x40

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
     4c4:	e019      	b.n	4fa <i2c_master_init+0x286>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     4c6:	4a11      	ldr	r2, [pc, #68]	; (50c <i2c_master_init+0x298>)
     4c8:	6a11      	ldr	r1, [r2, #32]
     4ca:	2302      	movs	r3, #2
     4cc:	430b      	orrs	r3, r1
     4ce:	6213      	str	r3, [r2, #32]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     4d0:	2418      	movs	r4, #24
     4d2:	e6e8      	b.n	2a6 <i2c_master_init+0x32>
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     4d4:	22ff      	movs	r2, #255	; 0xff
     4d6:	4014      	ands	r4, r2
     4d8:	0636      	lsls	r6, r6, #24
     4da:	4334      	orrs	r4, r6
     4dc:	041b      	lsls	r3, r3, #16
     4de:	22ff      	movs	r2, #255	; 0xff
     4e0:	0412      	lsls	r2, r2, #16
     4e2:	4013      	ands	r3, r2
     4e4:	431c      	orrs	r4, r3
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     4e6:	4643      	mov	r3, r8
     4e8:	60dc      	str	r4, [r3, #12]
	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
	int32_t tmp_baud_hs = 0;
	int32_t tmp_baudlow_hs = 0;
	enum status_code tmp_status_code = STATUS_OK;
     4ea:	2000      	movs	r0, #0
     4ec:	e005      	b.n	4fa <i2c_master_init+0x286>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     4ee:	2040      	movs	r0, #64	; 0x40
     4f0:	2cff      	cmp	r4, #255	; 0xff
     4f2:	d802      	bhi.n	4fa <i2c_master_init+0x286>

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
	int32_t tmp_baud_hs = 0;
	int32_t tmp_baudlow_hs = 0;
     4f4:	2600      	movs	r6, #0
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
	int32_t tmp_baud_hs = 0;
     4f6:	2300      	movs	r3, #0
     4f8:	e7ec      	b.n	4d4 <i2c_master_init+0x260>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     4fa:	b00b      	add	sp, #44	; 0x2c
     4fc:	bc3c      	pop	{r2, r3, r4, r5}
     4fe:	4690      	mov	r8, r2
     500:	4699      	mov	r9, r3
     502:	46a2      	mov	sl, r4
     504:	46ab      	mov	fp, r5
     506:	bdf0      	pop	{r4, r5, r6, r7, pc}
     508:	00000f11 	.word	0x00000f11
     50c:	40000400 	.word	0x40000400
     510:	00003851 	.word	0x00003851
     514:	000037e1 	.word	0x000037e1
     518:	00000d41 	.word	0x00000d41
     51c:	0000097d 	.word	0x0000097d
     520:	00002c4d 	.word	0x00002c4d
     524:	20003d64 	.word	0x20003d64
     528:	00000d8d 	.word	0x00000d8d
     52c:	0000394d 	.word	0x0000394d
     530:	41002000 	.word	0x41002000
     534:	00003875 	.word	0x00003875
     538:	000062e5 	.word	0x000062e5
     53c:	000056dd 	.word	0x000056dd
     540:	e826d695 	.word	0xe826d695
     544:	3e112e0b 	.word	0x3e112e0b
     548:	00004a59 	.word	0x00004a59
     54c:	40240000 	.word	0x40240000
     550:	00005bd1 	.word	0x00005bd1
     554:	3ff00000 	.word	0x3ff00000
     558:	000050b1 	.word	0x000050b1
     55c:	00006279 	.word	0x00006279
     560:	40080000 	.word	0x40080000
     564:	00004715 	.word	0x00004715

00000568 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     568:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     56a:	7e1a      	ldrb	r2, [r3, #24]
     56c:	0792      	lsls	r2, r2, #30
     56e:	d507      	bpl.n	580 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     570:	2202      	movs	r2, #2
     572:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     574:	8b5b      	ldrh	r3, [r3, #26]
     576:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     578:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     57a:	17db      	asrs	r3, r3, #31
     57c:	4018      	ands	r0, r3
     57e:	e00a      	b.n	596 <_i2c_master_address_response+0x2e>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     580:	8b5a      	ldrh	r2, [r3, #26]
     582:	0752      	lsls	r2, r2, #29
     584:	d506      	bpl.n	594 <_i2c_master_address_response+0x2c>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     586:	685a      	ldr	r2, [r3, #4]
     588:	21c0      	movs	r1, #192	; 0xc0
     58a:	0289      	lsls	r1, r1, #10
     58c:	430a      	orrs	r2, r1
     58e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     590:	2018      	movs	r0, #24
     592:	e000      	b.n	596 <_i2c_master_address_response+0x2e>
	}

	return STATUS_OK;
     594:	2000      	movs	r0, #0
}
     596:	4770      	bx	lr

00000598 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     598:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     59a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     59c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     59e:	2401      	movs	r4, #1
     5a0:	2502      	movs	r5, #2
     5a2:	e004      	b.n	5ae <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     5a4:	3301      	adds	r3, #1
     5a6:	b29b      	uxth	r3, r3
     5a8:	8901      	ldrh	r1, [r0, #8]
     5aa:	4299      	cmp	r1, r3
     5ac:	d907      	bls.n	5be <_i2c_master_wait_for_bus+0x26>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     5ae:	7e11      	ldrb	r1, [r2, #24]
     5b0:	4221      	tst	r1, r4
     5b2:	d106      	bne.n	5c2 <_i2c_master_wait_for_bus+0x2a>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     5b4:	7e11      	ldrb	r1, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     5b6:	4229      	tst	r1, r5
     5b8:	d0f4      	beq.n	5a4 <_i2c_master_wait_for_bus+0xc>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     5ba:	2000      	movs	r0, #0
     5bc:	e002      	b.n	5c4 <_i2c_master_wait_for_bus+0x2c>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
     5be:	2012      	movs	r0, #18
     5c0:	e000      	b.n	5c4 <_i2c_master_wait_for_bus+0x2c>
		}
	}
	return STATUS_OK;
     5c2:	2000      	movs	r0, #0
}
     5c4:	bd30      	pop	{r4, r5, pc}
     5c6:	46c0      	nop			; (mov r8, r8)

000005c8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     5c8:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5ca:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     5cc:	6863      	ldr	r3, [r4, #4]
     5ce:	2280      	movs	r2, #128	; 0x80
     5d0:	02d2      	lsls	r2, r2, #11
     5d2:	4313      	orrs	r3, r2
     5d4:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     5d6:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     5d8:	4b02      	ldr	r3, [pc, #8]	; (5e4 <_i2c_master_send_hs_master_code+0x1c>)
     5da:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     5dc:	2301      	movs	r3, #1
     5de:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     5e0:	bd10      	pop	{r4, pc}
     5e2:	46c0      	nop			; (mov r8, r8)
     5e4:	00000599 	.word	0x00000599

000005e8 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ea:	465f      	mov	r7, fp
     5ec:	4656      	mov	r6, sl
     5ee:	464d      	mov	r5, r9
     5f0:	4644      	mov	r4, r8
     5f2:	b4f0      	push	{r4, r5, r6, r7}
     5f4:	b083      	sub	sp, #12
     5f6:	0006      	movs	r6, r0
     5f8:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5fa:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     5fc:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     5fe:	682b      	ldr	r3, [r5, #0]
     600:	011b      	lsls	r3, r3, #4
     602:	0fdb      	lsrs	r3, r3, #31
     604:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     606:	7a4b      	ldrb	r3, [r1, #9]
     608:	2b00      	cmp	r3, #0
     60a:	d002      	beq.n	612 <_i2c_master_read_packet+0x2a>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     60c:	7a89      	ldrb	r1, [r1, #10]
     60e:	4b56      	ldr	r3, [pc, #344]	; (768 <_i2c_master_read_packet+0x180>)
     610:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     612:	686a      	ldr	r2, [r5, #4]
     614:	4b55      	ldr	r3, [pc, #340]	; (76c <_i2c_master_read_packet+0x184>)
     616:	4013      	ands	r3, r2
     618:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     61a:	464b      	mov	r3, r9
     61c:	7a1b      	ldrb	r3, [r3, #8]
     61e:	2b00      	cmp	r3, #0
     620:	d028      	beq.n	674 <_i2c_master_read_packet+0x8c>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     622:	464b      	mov	r3, r9
     624:	881b      	ldrh	r3, [r3, #0]
     626:	005a      	lsls	r2, r3, #1
     628:	464b      	mov	r3, r9
     62a:	7a5b      	ldrb	r3, [r3, #9]
     62c:	039b      	lsls	r3, r3, #14
     62e:	4313      	orrs	r3, r2
     630:	2280      	movs	r2, #128	; 0x80
     632:	0212      	lsls	r2, r2, #8
     634:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     636:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     638:	0030      	movs	r0, r6
     63a:	4b4d      	ldr	r3, [pc, #308]	; (770 <_i2c_master_read_packet+0x188>)
     63c:	4798      	blx	r3

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     63e:	6869      	ldr	r1, [r5, #4]
     640:	4b4a      	ldr	r3, [pc, #296]	; (76c <_i2c_master_read_packet+0x184>)
     642:	400b      	ands	r3, r1
     644:	606b      	str	r3, [r5, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
     646:	2800      	cmp	r0, #0
     648:	d000      	beq.n	64c <_i2c_master_read_packet+0x64>
     64a:	e086      	b.n	75a <_i2c_master_read_packet+0x172>
			tmp_status = _i2c_master_address_response(module);
     64c:	0030      	movs	r0, r6
     64e:	4b49      	ldr	r3, [pc, #292]	; (774 <_i2c_master_read_packet+0x18c>)
     650:	4798      	blx	r3
		}

		if (tmp_status == STATUS_OK) {
     652:	2800      	cmp	r0, #0
     654:	d000      	beq.n	658 <_i2c_master_read_packet+0x70>
     656:	e080      	b.n	75a <_i2c_master_read_packet+0x172>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     658:	464b      	mov	r3, r9
     65a:	881b      	ldrh	r3, [r3, #0]
     65c:	0a1b      	lsrs	r3, r3, #8
     65e:	2278      	movs	r2, #120	; 0x78
     660:	4313      	orrs	r3, r2
     662:	0059      	lsls	r1, r3, #1
     664:	464b      	mov	r3, r9
     666:	7a5b      	ldrb	r3, [r3, #9]
     668:	039b      	lsls	r3, r3, #14
     66a:	3a77      	subs	r2, #119	; 0x77
     66c:	4313      	orrs	r3, r2
     66e:	430b      	orrs	r3, r1
     670:	626b      	str	r3, [r5, #36]	; 0x24
     672:	e009      	b.n	688 <_i2c_master_read_packet+0xa0>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     674:	464b      	mov	r3, r9
     676:	881b      	ldrh	r3, [r3, #0]
     678:	005a      	lsls	r2, r3, #1
     67a:	464b      	mov	r3, r9
     67c:	7a5b      	ldrb	r3, [r3, #9]
     67e:	039b      	lsls	r3, r3, #14
     680:	4313      	orrs	r3, r2
     682:	2201      	movs	r2, #1
     684:	4313      	orrs	r3, r2
     686:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     688:	0030      	movs	r0, r6
     68a:	4b39      	ldr	r3, [pc, #228]	; (770 <_i2c_master_read_packet+0x188>)
     68c:	4798      	blx	r3
     68e:	0002      	movs	r2, r0

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     690:	4653      	mov	r3, sl
     692:	2b00      	cmp	r3, #0
     694:	d009      	beq.n	6aa <_i2c_master_read_packet+0xc2>
     696:	464b      	mov	r3, r9
     698:	885b      	ldrh	r3, [r3, #2]
     69a:	2b01      	cmp	r3, #1
     69c:	d105      	bne.n	6aa <_i2c_master_read_packet+0xc2>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     69e:	686b      	ldr	r3, [r5, #4]
     6a0:	2180      	movs	r1, #128	; 0x80
     6a2:	02c9      	lsls	r1, r1, #11
     6a4:	430b      	orrs	r3, r1
     6a6:	606b      	str	r3, [r5, #4]
     6a8:	e003      	b.n	6b2 <_i2c_master_read_packet+0xca>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     6aa:	6869      	ldr	r1, [r5, #4]
     6ac:	4b2f      	ldr	r3, [pc, #188]	; (76c <_i2c_master_read_packet+0x184>)
     6ae:	400b      	ands	r3, r1
     6b0:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     6b2:	2a00      	cmp	r2, #0
     6b4:	d151      	bne.n	75a <_i2c_master_read_packet+0x172>
		tmp_status = _i2c_master_address_response(module);
     6b6:	0030      	movs	r0, r6
     6b8:	4b2e      	ldr	r3, [pc, #184]	; (774 <_i2c_master_read_packet+0x18c>)
     6ba:	4798      	blx	r3
     6bc:	9001      	str	r0, [sp, #4]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     6be:	2800      	cmp	r0, #0
     6c0:	d14b      	bne.n	75a <_i2c_master_read_packet+0x172>
     6c2:	3c01      	subs	r4, #1
     6c4:	b2a4      	uxth	r4, r4
     6c6:	4680      	mov	r8, r0
		/* Read data buffer. */
		while (tmp_data_length--) {
     6c8:	4b2b      	ldr	r3, [pc, #172]	; (778 <_i2c_master_read_packet+0x190>)
     6ca:	469b      	mov	fp, r3
     6cc:	e029      	b.n	722 <_i2c_master_read_packet+0x13a>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     6ce:	8b6b      	ldrh	r3, [r5, #26]
     6d0:	069b      	lsls	r3, r3, #26
     6d2:	d541      	bpl.n	758 <_i2c_master_read_packet+0x170>
				return STATUS_ERR_PACKET_COLLISION;
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     6d4:	7af3      	ldrb	r3, [r6, #11]
     6d6:	2b00      	cmp	r3, #0
     6d8:	d00f      	beq.n	6fa <_i2c_master_read_packet+0x112>
     6da:	4653      	mov	r3, sl
     6dc:	2b00      	cmp	r3, #0
     6de:	d102      	bne.n	6e6 <_i2c_master_read_packet+0xfe>
     6e0:	2c00      	cmp	r4, #0
     6e2:	d002      	beq.n	6ea <_i2c_master_read_packet+0x102>
     6e4:	e009      	b.n	6fa <_i2c_master_read_packet+0x112>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     6e6:	2c01      	cmp	r4, #1
     6e8:	d107      	bne.n	6fa <_i2c_master_read_packet+0x112>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     6ea:	686b      	ldr	r3, [r5, #4]
     6ec:	2280      	movs	r2, #128	; 0x80
     6ee:	02d2      	lsls	r2, r2, #11
     6f0:	4313      	orrs	r3, r2
     6f2:	606b      	str	r3, [r5, #4]
     6f4:	3c01      	subs	r4, #1
     6f6:	b2a4      	uxth	r4, r4
     6f8:	e013      	b.n	722 <_i2c_master_read_packet+0x13a>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
     6fa:	0030      	movs	r0, r6
     6fc:	4b1f      	ldr	r3, [pc, #124]	; (77c <_i2c_master_read_packet+0x194>)
     6fe:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     700:	4643      	mov	r3, r8
     702:	1c5f      	adds	r7, r3, #1
     704:	b2bf      	uxth	r7, r7
     706:	2328      	movs	r3, #40	; 0x28
     708:	5ceb      	ldrb	r3, [r5, r3]
     70a:	464a      	mov	r2, r9
     70c:	6852      	ldr	r2, [r2, #4]
     70e:	4641      	mov	r1, r8
     710:	5453      	strb	r3, [r2, r1]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     712:	0030      	movs	r0, r6
     714:	4b16      	ldr	r3, [pc, #88]	; (770 <_i2c_master_read_packet+0x188>)
     716:	4798      	blx	r3
     718:	3c01      	subs	r4, #1
     71a:	b2a4      	uxth	r4, r4
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     71c:	2800      	cmp	r0, #0
     71e:	d103      	bne.n	728 <_i2c_master_read_packet+0x140>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     720:	46b8      	mov	r8, r7
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     722:	455c      	cmp	r4, fp
     724:	d1d3      	bne.n	6ce <_i2c_master_read_packet+0xe6>
     726:	e001      	b.n	72c <_i2c_master_read_packet+0x144>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     728:	46b8      	mov	r8, r7
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     72a:	9001      	str	r0, [sp, #4]
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
     72c:	7ab3      	ldrb	r3, [r6, #10]
     72e:	2b00      	cmp	r3, #0
     730:	d007      	beq.n	742 <_i2c_master_read_packet+0x15a>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
     732:	0030      	movs	r0, r6
     734:	4b11      	ldr	r3, [pc, #68]	; (77c <_i2c_master_read_packet+0x194>)
     736:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     738:	686b      	ldr	r3, [r5, #4]
     73a:	22c0      	movs	r2, #192	; 0xc0
     73c:	0292      	lsls	r2, r2, #10
     73e:	4313      	orrs	r3, r2
     740:	606b      	str	r3, [r5, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
     742:	0030      	movs	r0, r6
     744:	4b0d      	ldr	r3, [pc, #52]	; (77c <_i2c_master_read_packet+0x194>)
     746:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     748:	2328      	movs	r3, #40	; 0x28
     74a:	5cea      	ldrb	r2, [r5, r3]
     74c:	464b      	mov	r3, r9
     74e:	685b      	ldr	r3, [r3, #4]
     750:	4641      	mov	r1, r8
     752:	545a      	strb	r2, [r3, r1]
     754:	9801      	ldr	r0, [sp, #4]
     756:	e000      	b.n	75a <_i2c_master_read_packet+0x172>
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     758:	2041      	movs	r0, #65	; 0x41
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     75a:	b003      	add	sp, #12
     75c:	bc3c      	pop	{r2, r3, r4, r5}
     75e:	4690      	mov	r8, r2
     760:	4699      	mov	r9, r3
     762:	46a2      	mov	sl, r4
     764:	46ab      	mov	fp, r5
     766:	bdf0      	pop	{r4, r5, r6, r7, pc}
     768:	000005c9 	.word	0x000005c9
     76c:	fffbffff 	.word	0xfffbffff
     770:	00000599 	.word	0x00000599
     774:	00000569 	.word	0x00000569
     778:	0000ffff 	.word	0x0000ffff
     77c:	00000269 	.word	0x00000269

00000780 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     780:	b5f0      	push	{r4, r5, r6, r7, lr}
     782:	465f      	mov	r7, fp
     784:	4656      	mov	r6, sl
     786:	464d      	mov	r5, r9
     788:	4644      	mov	r4, r8
     78a:	b4f0      	push	{r4, r5, r6, r7}
     78c:	b083      	sub	sp, #12
     78e:	0006      	movs	r6, r0
     790:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     792:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     794:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     796:	4b31      	ldr	r3, [pc, #196]	; (85c <_i2c_master_write_packet+0xdc>)
     798:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     79a:	7a7b      	ldrb	r3, [r7, #9]
     79c:	2b00      	cmp	r3, #0
     79e:	d003      	beq.n	7a8 <_i2c_master_write_packet+0x28>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     7a0:	7ab9      	ldrb	r1, [r7, #10]
     7a2:	0030      	movs	r0, r6
     7a4:	4b2e      	ldr	r3, [pc, #184]	; (860 <_i2c_master_write_packet+0xe0>)
     7a6:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     7a8:	686a      	ldr	r2, [r5, #4]
     7aa:	4b2e      	ldr	r3, [pc, #184]	; (864 <_i2c_master_write_packet+0xe4>)
     7ac:	4013      	ands	r3, r2
     7ae:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     7b0:	7a3b      	ldrb	r3, [r7, #8]
     7b2:	2b00      	cmp	r3, #0
     7b4:	d009      	beq.n	7ca <_i2c_master_write_packet+0x4a>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     7b6:	883b      	ldrh	r3, [r7, #0]
     7b8:	005a      	lsls	r2, r3, #1
     7ba:	7a7b      	ldrb	r3, [r7, #9]
     7bc:	039b      	lsls	r3, r3, #14
     7be:	4313      	orrs	r3, r2
     7c0:	2280      	movs	r2, #128	; 0x80
     7c2:	0212      	lsls	r2, r2, #8
     7c4:	4313      	orrs	r3, r2
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     7c6:	626b      	str	r3, [r5, #36]	; 0x24
     7c8:	e005      	b.n	7d6 <_i2c_master_write_packet+0x56>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     7ca:	883b      	ldrh	r3, [r7, #0]
     7cc:	005a      	lsls	r2, r3, #1
     7ce:	7a7b      	ldrb	r3, [r7, #9]
     7d0:	039b      	lsls	r3, r3, #14
     7d2:	4313      	orrs	r3, r2
     7d4:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     7d6:	0030      	movs	r0, r6
     7d8:	4b23      	ldr	r3, [pc, #140]	; (868 <_i2c_master_write_packet+0xe8>)
     7da:	4798      	blx	r3

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     7dc:	2800      	cmp	r0, #0
     7de:	d136      	bne.n	84e <_i2c_master_write_packet+0xce>
		tmp_status = _i2c_master_address_response(module);
     7e0:	0030      	movs	r0, r6
     7e2:	4b22      	ldr	r3, [pc, #136]	; (86c <_i2c_master_write_packet+0xec>)
     7e4:	4798      	blx	r3
     7e6:	1e03      	subs	r3, r0, #0
     7e8:	9001      	str	r0, [sp, #4]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     7ea:	d130      	bne.n	84e <_i2c_master_write_packet+0xce>
     7ec:	46a0      	mov	r8, r4
     7ee:	2400      	movs	r4, #0
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     7f0:	3320      	adds	r3, #32
     7f2:	4699      	mov	r9, r3
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     7f4:	4b19      	ldr	r3, [pc, #100]	; (85c <_i2c_master_write_packet+0xdc>)
     7f6:	469b      	mov	fp, r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     7f8:	4b1b      	ldr	r3, [pc, #108]	; (868 <_i2c_master_write_packet+0xe8>)
     7fa:	469a      	mov	sl, r3
     7fc:	e011      	b.n	822 <_i2c_master_write_packet+0xa2>
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     7fe:	8b6b      	ldrh	r3, [r5, #26]
     800:	464a      	mov	r2, r9
     802:	4213      	tst	r3, r2
     804:	d022      	beq.n	84c <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     806:	0030      	movs	r0, r6
     808:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     80a:	687b      	ldr	r3, [r7, #4]
     80c:	5d1a      	ldrb	r2, [r3, r4]
     80e:	2328      	movs	r3, #40	; 0x28
     810:	54ea      	strb	r2, [r5, r3]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     812:	0030      	movs	r0, r6
     814:	47d0      	blx	sl

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     816:	2800      	cmp	r0, #0
     818:	d106      	bne.n	828 <_i2c_master_write_packet+0xa8>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     81a:	8b6b      	ldrh	r3, [r5, #26]
     81c:	3401      	adds	r4, #1
     81e:	075b      	lsls	r3, r3, #29
     820:	d404      	bmi.n	82c <_i2c_master_write_packet+0xac>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     822:	45a0      	cmp	r8, r4
     824:	d1eb      	bne.n	7fe <_i2c_master_write_packet+0x7e>
     826:	e003      	b.n	830 <_i2c_master_write_packet+0xb0>
			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     828:	9001      	str	r0, [sp, #4]
     82a:	e001      	b.n	830 <_i2c_master_write_packet+0xb0>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     82c:	231e      	movs	r3, #30
     82e:	9301      	str	r3, [sp, #4]
				break;
			}
		}

		if (module->send_stop) {
     830:	7ab3      	ldrb	r3, [r6, #10]
     832:	9801      	ldr	r0, [sp, #4]
     834:	2b00      	cmp	r3, #0
     836:	d00a      	beq.n	84e <_i2c_master_write_packet+0xce>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     838:	0030      	movs	r0, r6
     83a:	4b08      	ldr	r3, [pc, #32]	; (85c <_i2c_master_write_packet+0xdc>)
     83c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     83e:	686b      	ldr	r3, [r5, #4]
     840:	22c0      	movs	r2, #192	; 0xc0
     842:	0292      	lsls	r2, r2, #10
     844:	4313      	orrs	r3, r2
     846:	606b      	str	r3, [r5, #4]
     848:	9801      	ldr	r0, [sp, #4]
     84a:	e000      	b.n	84e <_i2c_master_write_packet+0xce>

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     84c:	2041      	movs	r0, #65	; 0x41
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     84e:	b003      	add	sp, #12
     850:	bc3c      	pop	{r2, r3, r4, r5}
     852:	4690      	mov	r8, r2
     854:	4699      	mov	r9, r3
     856:	46a2      	mov	sl, r4
     858:	46ab      	mov	fp, r5
     85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     85c:	00000269 	.word	0x00000269
     860:	000005c9 	.word	0x000005c9
     864:	fffbffff 	.word	0xfffbffff
     868:	00000599 	.word	0x00000599
     86c:	00000569 	.word	0x00000569

00000870 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     870:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
     872:	8b83      	ldrh	r3, [r0, #28]
     874:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     876:	2205      	movs	r2, #5
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
     878:	2b00      	cmp	r3, #0
     87a:	d105      	bne.n	888 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     87c:	3301      	adds	r3, #1
     87e:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     880:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_read_packet(module, packet);
     882:	4b02      	ldr	r3, [pc, #8]	; (88c <i2c_master_read_packet_wait+0x1c>)
     884:	4798      	blx	r3
     886:	0002      	movs	r2, r0
}
     888:	0010      	movs	r0, r2
     88a:	bd10      	pop	{r4, pc}
     88c:	000005e9 	.word	0x000005e9

00000890 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     890:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     892:	8b83      	ldrh	r3, [r0, #28]
     894:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     896:	2205      	movs	r2, #5
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     898:	2b00      	cmp	r3, #0
     89a:	d105      	bne.n	8a8 <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     89c:	3301      	adds	r3, #1
     89e:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     8a0:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
     8a2:	4b02      	ldr	r3, [pc, #8]	; (8ac <i2c_master_write_packet_wait+0x1c>)
     8a4:	4798      	blx	r3
     8a6:	0002      	movs	r2, r0
}
     8a8:	0010      	movs	r0, r2
     8aa:	bd10      	pop	{r4, pc}
     8ac:	00000781 	.word	0x00000781

000008b0 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     8b0:	6801      	ldr	r1, [r0, #0]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     8b2:	2207      	movs	r2, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     8b4:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     8b6:	421a      	tst	r2, r3
     8b8:	d1fc      	bne.n	8b4 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     8ba:	4770      	bx	lr

000008bc <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     8bc:	b570      	push	{r4, r5, r6, lr}
     8be:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8c0:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     8c2:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     8c4:	8b43      	ldrh	r3, [r0, #26]
	buffer_index -= module->buffer_remaining;
     8c6:	8b85      	ldrh	r5, [r0, #28]
     8c8:	1b5d      	subs	r5, r3, r5
     8ca:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     8cc:	8b83      	ldrh	r3, [r0, #28]
     8ce:	3b01      	subs	r3, #1
     8d0:	b29b      	uxth	r3, r3
     8d2:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     8d4:	0113      	lsls	r3, r2, #4
     8d6:	d50c      	bpl.n	8f2 <_i2c_master_read+0x36>
		if (module->send_nack && module->buffer_remaining == 1) {
     8d8:	7ac3      	ldrb	r3, [r0, #11]
     8da:	2b00      	cmp	r3, #0
     8dc:	d015      	beq.n	90a <_i2c_master_read+0x4e>
     8de:	8b83      	ldrh	r3, [r0, #28]
     8e0:	b29b      	uxth	r3, r3
     8e2:	2b01      	cmp	r3, #1
     8e4:	d111      	bne.n	90a <_i2c_master_read+0x4e>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     8e6:	6873      	ldr	r3, [r6, #4]
     8e8:	2280      	movs	r2, #128	; 0x80
     8ea:	02d2      	lsls	r2, r2, #11
     8ec:	4313      	orrs	r3, r2
     8ee:	6073      	str	r3, [r6, #4]
     8f0:	e00b      	b.n	90a <_i2c_master_read+0x4e>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
     8f2:	7ac3      	ldrb	r3, [r0, #11]
     8f4:	2b00      	cmp	r3, #0
     8f6:	d008      	beq.n	90a <_i2c_master_read+0x4e>
     8f8:	8b83      	ldrh	r3, [r0, #28]
     8fa:	b29b      	uxth	r3, r3
     8fc:	2b00      	cmp	r3, #0
     8fe:	d104      	bne.n	90a <_i2c_master_read+0x4e>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     900:	6873      	ldr	r3, [r6, #4]
     902:	2280      	movs	r2, #128	; 0x80
     904:	02d2      	lsls	r2, r2, #11
     906:	4313      	orrs	r3, r2
     908:	6073      	str	r3, [r6, #4]
		}
	}

	if (module->buffer_remaining == 0) {
     90a:	8ba3      	ldrh	r3, [r4, #28]
     90c:	b29b      	uxth	r3, r3
     90e:	2b00      	cmp	r3, #0
     910:	d10a      	bne.n	928 <_i2c_master_read+0x6c>
		if (module->send_stop) {
     912:	7aa3      	ldrb	r3, [r4, #10]
     914:	2b00      	cmp	r3, #0
     916:	d007      	beq.n	928 <_i2c_master_read+0x6c>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     918:	0020      	movs	r0, r4
     91a:	4b08      	ldr	r3, [pc, #32]	; (93c <_i2c_master_read+0x80>)
     91c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     91e:	6873      	ldr	r3, [r6, #4]
     920:	22c0      	movs	r2, #192	; 0xc0
     922:	0292      	lsls	r2, r2, #10
     924:	4313      	orrs	r3, r2
     926:	6073      	str	r3, [r6, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     928:	0020      	movs	r0, r4
     92a:	4b04      	ldr	r3, [pc, #16]	; (93c <_i2c_master_read+0x80>)
     92c:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     92e:	6a23      	ldr	r3, [r4, #32]
     930:	195d      	adds	r5, r3, r5
     932:	2328      	movs	r3, #40	; 0x28
     934:	5cf3      	ldrb	r3, [r6, r3]
     936:	b2db      	uxtb	r3, r3
     938:	702b      	strb	r3, [r5, #0]
}
     93a:	bd70      	pop	{r4, r5, r6, pc}
     93c:	000008b1 	.word	0x000008b1

00000940 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     940:	b570      	push	{r4, r5, r6, lr}
     942:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     944:	6806      	ldr	r6, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     946:	8b73      	ldrh	r3, [r6, #26]
     948:	075b      	lsls	r3, r3, #29
     94a:	d503      	bpl.n	954 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     94c:	221e      	movs	r2, #30
     94e:	2325      	movs	r3, #37	; 0x25
     950:	54c2      	strb	r2, [r0, r3]
		/* Do not write more data */
		return;
     952:	e00f      	b.n	974 <_i2c_master_write+0x34>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
     954:	8b43      	ldrh	r3, [r0, #26]
	buffer_index -= module->buffer_remaining;
     956:	8b85      	ldrh	r5, [r0, #28]
     958:	1b5d      	subs	r5, r3, r5
     95a:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     95c:	8b83      	ldrh	r3, [r0, #28]
     95e:	3b01      	subs	r3, #1
     960:	b29b      	uxth	r3, r3
     962:	8383      	strh	r3, [r0, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
     964:	4b04      	ldr	r3, [pc, #16]	; (978 <_i2c_master_write+0x38>)
     966:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     968:	6a23      	ldr	r3, [r4, #32]
     96a:	195d      	adds	r5, r3, r5
     96c:	782b      	ldrb	r3, [r5, #0]
     96e:	b2db      	uxtb	r3, r3
     970:	2228      	movs	r2, #40	; 0x28
     972:	54b3      	strb	r3, [r6, r2]
}
     974:	bd70      	pop	{r4, r5, r6, pc}
     976:	46c0      	nop			; (mov r8, r8)
     978:	000008b1 	.word	0x000008b1

0000097c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     97c:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     97e:	0080      	lsls	r0, r0, #2
     980:	4b6f      	ldr	r3, [pc, #444]	; (b40 <_i2c_master_interrupt_handler+0x1c4>)
     982:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     984:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     986:	682b      	ldr	r3, [r5, #0]
     988:	011b      	lsls	r3, r3, #4
     98a:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     98c:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     98e:	7e26      	ldrb	r6, [r4, #24]
     990:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     992:	8b63      	ldrh	r3, [r4, #26]
     994:	b29b      	uxth	r3, r3
     996:	2b00      	cmp	r3, #0
     998:	d135      	bne.n	a06 <_i2c_master_interrupt_handler+0x8a>
     99a:	8ba3      	ldrh	r3, [r4, #28]
     99c:	b29b      	uxth	r3, r3
     99e:	2b00      	cmp	r3, #0
     9a0:	d031      	beq.n	a06 <_i2c_master_interrupt_handler+0x8a>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     9a2:	7e2b      	ldrb	r3, [r5, #24]
     9a4:	07db      	lsls	r3, r3, #31
     9a6:	d51b      	bpl.n	9e0 <_i2c_master_interrupt_handler+0x64>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     9a8:	2301      	movs	r3, #1
     9aa:	762b      	strb	r3, [r5, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     9ac:	8b6b      	ldrh	r3, [r5, #26]
     9ae:	079b      	lsls	r3, r3, #30
     9b0:	d503      	bpl.n	9ba <_i2c_master_interrupt_handler+0x3e>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
     9b2:	2241      	movs	r2, #65	; 0x41
     9b4:	2325      	movs	r3, #37	; 0x25
     9b6:	54e2      	strb	r2, [r4, r3]
     9b8:	e012      	b.n	9e0 <_i2c_master_interrupt_handler+0x64>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     9ba:	8b6b      	ldrh	r3, [r5, #26]
     9bc:	075b      	lsls	r3, r3, #29
     9be:	d50f      	bpl.n	9e0 <_i2c_master_interrupt_handler+0x64>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     9c0:	2218      	movs	r2, #24
     9c2:	2325      	movs	r3, #37	; 0x25
     9c4:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     9c6:	2300      	movs	r3, #0
     9c8:	83a3      	strh	r3, [r4, #28]

			if (module->send_stop) {
     9ca:	7aa3      	ldrb	r3, [r4, #10]
     9cc:	2b00      	cmp	r3, #0
     9ce:	d007      	beq.n	9e0 <_i2c_master_interrupt_handler+0x64>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
     9d0:	0020      	movs	r0, r4
     9d2:	4b5c      	ldr	r3, [pc, #368]	; (b44 <_i2c_master_interrupt_handler+0x1c8>)
     9d4:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     9d6:	686b      	ldr	r3, [r5, #4]
     9d8:	22c0      	movs	r2, #192	; 0xc0
     9da:	0292      	lsls	r2, r2, #10
     9dc:	4313      	orrs	r3, r2
     9de:	606b      	str	r3, [r5, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
     9e0:	8ba3      	ldrh	r3, [r4, #28]
     9e2:	b29b      	uxth	r3, r3
     9e4:	8363      	strh	r3, [r4, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
     9e6:	2325      	movs	r3, #37	; 0x25
     9e8:	5ce3      	ldrb	r3, [r4, r3]
     9ea:	2b05      	cmp	r3, #5
     9ec:	d156      	bne.n	a9c <_i2c_master_interrupt_handler+0x120>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     9ee:	331f      	adds	r3, #31
     9f0:	5ce3      	ldrb	r3, [r4, r3]
     9f2:	2b00      	cmp	r3, #0
     9f4:	d103      	bne.n	9fe <_i2c_master_interrupt_handler+0x82>
			_i2c_master_write(module);
     9f6:	0020      	movs	r0, r4
     9f8:	4b53      	ldr	r3, [pc, #332]	; (b48 <_i2c_master_interrupt_handler+0x1cc>)
     9fa:	4798      	blx	r3
     9fc:	e04e      	b.n	a9c <_i2c_master_interrupt_handler+0x120>
		} else {
			_i2c_master_read(module);
     9fe:	0020      	movs	r0, r4
     a00:	4b52      	ldr	r3, [pc, #328]	; (b4c <_i2c_master_interrupt_handler+0x1d0>)
     a02:	4798      	blx	r3
     a04:	e04a      	b.n	a9c <_i2c_master_interrupt_handler+0x120>
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     a06:	8b63      	ldrh	r3, [r4, #26]
     a08:	b29b      	uxth	r3, r3
     a0a:	2b00      	cmp	r3, #0
     a0c:	d026      	beq.n	a5c <_i2c_master_interrupt_handler+0xe0>
     a0e:	8ba3      	ldrh	r3, [r4, #28]
     a10:	b29b      	uxth	r3, r3
     a12:	2b00      	cmp	r3, #0
     a14:	d122      	bne.n	a5c <_i2c_master_interrupt_handler+0xe0>
			(module->status == STATUS_BUSY) &&
     a16:	3325      	adds	r3, #37	; 0x25
     a18:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     a1a:	2b05      	cmp	r3, #5
     a1c:	d11e      	bne.n	a5c <_i2c_master_interrupt_handler+0xe0>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     a1e:	331f      	adds	r3, #31
     a20:	5ce3      	ldrb	r3, [r4, r3]
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
     a22:	2b00      	cmp	r3, #0
     a24:	d11a      	bne.n	a5c <_i2c_master_interrupt_handler+0xe0>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     a26:	3303      	adds	r3, #3
     a28:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     a2a:	2300      	movs	r3, #0
     a2c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     a2e:	3325      	adds	r3, #37	; 0x25
     a30:	2200      	movs	r2, #0
     a32:	54e2      	strb	r2, [r4, r3]

		if (module->send_stop) {
     a34:	7aa3      	ldrb	r3, [r4, #10]
     a36:	2b00      	cmp	r3, #0
     a38:	d008      	beq.n	a4c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     a3a:	0020      	movs	r0, r4
     a3c:	4b41      	ldr	r3, [pc, #260]	; (b44 <_i2c_master_interrupt_handler+0x1c8>)
     a3e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     a40:	686b      	ldr	r3, [r5, #4]
     a42:	22c0      	movs	r2, #192	; 0xc0
     a44:	0292      	lsls	r2, r2, #10
     a46:	4313      	orrs	r3, r2
     a48:	606b      	str	r3, [r5, #4]
     a4a:	e001      	b.n	a50 <_i2c_master_interrupt_handler+0xd4>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     a4c:	2301      	movs	r3, #1
     a4e:	762b      	strb	r3, [r5, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     a50:	07f3      	lsls	r3, r6, #31
     a52:	d523      	bpl.n	a9c <_i2c_master_interrupt_handler+0x120>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     a54:	68e3      	ldr	r3, [r4, #12]
     a56:	0020      	movs	r0, r4
     a58:	4798      	blx	r3
     a5a:	e01f      	b.n	a9c <_i2c_master_interrupt_handler+0x120>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     a5c:	8b63      	ldrh	r3, [r4, #26]
     a5e:	b29b      	uxth	r3, r3
     a60:	2b00      	cmp	r3, #0
     a62:	d01b      	beq.n	a9c <_i2c_master_interrupt_handler+0x120>
     a64:	8ba3      	ldrh	r3, [r4, #28]
     a66:	b29b      	uxth	r3, r3
     a68:	2b00      	cmp	r3, #0
     a6a:	d017      	beq.n	a9c <_i2c_master_interrupt_handler+0x120>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     a6c:	8b6b      	ldrh	r3, [r5, #26]
     a6e:	069b      	lsls	r3, r3, #26
     a70:	d409      	bmi.n	a86 <_i2c_master_interrupt_handler+0x10a>
     a72:	2a00      	cmp	r2, #0
     a74:	d003      	beq.n	a7e <_i2c_master_interrupt_handler+0x102>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     a76:	8ba3      	ldrh	r3, [r4, #28]
     a78:	b29b      	uxth	r3, r3
     a7a:	2b01      	cmp	r3, #1
     a7c:	d003      	beq.n	a86 <_i2c_master_interrupt_handler+0x10a>
			module->status = STATUS_ERR_PACKET_COLLISION;
     a7e:	2241      	movs	r2, #65	; 0x41
     a80:	2325      	movs	r3, #37	; 0x25
     a82:	54e2      	strb	r2, [r4, r3]
     a84:	e00a      	b.n	a9c <_i2c_master_interrupt_handler+0x120>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     a86:	2324      	movs	r3, #36	; 0x24
     a88:	5ce3      	ldrb	r3, [r4, r3]
     a8a:	2b00      	cmp	r3, #0
     a8c:	d103      	bne.n	a96 <_i2c_master_interrupt_handler+0x11a>
			_i2c_master_write(module);
     a8e:	0020      	movs	r0, r4
     a90:	4b2d      	ldr	r3, [pc, #180]	; (b48 <_i2c_master_interrupt_handler+0x1cc>)
     a92:	4798      	blx	r3
     a94:	e002      	b.n	a9c <_i2c_master_interrupt_handler+0x120>
		} else {
			_i2c_master_read(module);
     a96:	0020      	movs	r0, r4
     a98:	4b2c      	ldr	r3, [pc, #176]	; (b4c <_i2c_master_interrupt_handler+0x1d0>)
     a9a:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     a9c:	8b63      	ldrh	r3, [r4, #26]
     a9e:	b29b      	uxth	r3, r3
     aa0:	2b00      	cmp	r3, #0
     aa2:	d02a      	beq.n	afa <_i2c_master_interrupt_handler+0x17e>
     aa4:	8ba3      	ldrh	r3, [r4, #28]
     aa6:	b29b      	uxth	r3, r3
     aa8:	2b00      	cmp	r3, #0
     aaa:	d126      	bne.n	afa <_i2c_master_interrupt_handler+0x17e>
			(module->status == STATUS_BUSY) &&
     aac:	3325      	adds	r3, #37	; 0x25
     aae:	5ce3      	ldrb	r3, [r4, r3]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     ab0:	2b05      	cmp	r3, #5
     ab2:	d122      	bne.n	afa <_i2c_master_interrupt_handler+0x17e>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     ab4:	331f      	adds	r3, #31
     ab6:	5ce3      	ldrb	r3, [r4, r3]
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
     ab8:	2b01      	cmp	r3, #1
     aba:	d11e      	bne.n	afa <_i2c_master_interrupt_handler+0x17e>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     abc:	7e2b      	ldrb	r3, [r5, #24]
     abe:	079b      	lsls	r3, r3, #30
     ac0:	d501      	bpl.n	ac6 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     ac2:	2302      	movs	r3, #2
     ac4:	762b      	strb	r3, [r5, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     ac6:	2303      	movs	r3, #3
     ac8:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
     aca:	2300      	movs	r3, #0
     acc:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     ace:	3325      	adds	r3, #37	; 0x25
     ad0:	2200      	movs	r2, #0
     ad2:	54e2      	strb	r2, [r4, r3]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     ad4:	07b3      	lsls	r3, r6, #30
     ad6:	d507      	bpl.n	ae8 <_i2c_master_interrupt_handler+0x16c>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     ad8:	2324      	movs	r3, #36	; 0x24
     ada:	5ce3      	ldrb	r3, [r4, r3]
     adc:	2b01      	cmp	r3, #1
     ade:	d103      	bne.n	ae8 <_i2c_master_interrupt_handler+0x16c>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     ae0:	6923      	ldr	r3, [r4, #16]
     ae2:	0020      	movs	r0, r4
     ae4:	4798      	blx	r3
     ae6:	e008      	b.n	afa <_i2c_master_interrupt_handler+0x17e>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     ae8:	07f3      	lsls	r3, r6, #31
     aea:	d506      	bpl.n	afa <_i2c_master_interrupt_handler+0x17e>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     aec:	2324      	movs	r3, #36	; 0x24
     aee:	5ce3      	ldrb	r3, [r4, r3]
     af0:	2b00      	cmp	r3, #0
     af2:	d102      	bne.n	afa <_i2c_master_interrupt_handler+0x17e>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     af4:	68e3      	ldr	r3, [r4, #12]
     af6:	0020      	movs	r0, r4
     af8:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     afa:	2325      	movs	r3, #37	; 0x25
     afc:	5ce3      	ldrb	r3, [r4, r3]
     afe:	2b05      	cmp	r3, #5
     b00:	d01c      	beq.n	b3c <_i2c_master_interrupt_handler+0x1c0>
     b02:	2325      	movs	r3, #37	; 0x25
     b04:	5ce3      	ldrb	r3, [r4, r3]
     b06:	2b00      	cmp	r3, #0
     b08:	d018      	beq.n	b3c <_i2c_master_interrupt_handler+0x1c0>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     b0a:	2303      	movs	r3, #3
     b0c:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     b0e:	2300      	movs	r3, #0
     b10:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     b12:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     b14:	3325      	adds	r3, #37	; 0x25
     b16:	5ce3      	ldrb	r3, [r4, r3]
     b18:	2b41      	cmp	r3, #65	; 0x41
     b1a:	d00a      	beq.n	b32 <_i2c_master_interrupt_handler+0x1b6>
     b1c:	7aa3      	ldrb	r3, [r4, #10]
     b1e:	2b00      	cmp	r3, #0
     b20:	d007      	beq.n	b32 <_i2c_master_interrupt_handler+0x1b6>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
     b22:	0020      	movs	r0, r4
     b24:	4b07      	ldr	r3, [pc, #28]	; (b44 <_i2c_master_interrupt_handler+0x1c8>)
     b26:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     b28:	686b      	ldr	r3, [r5, #4]
     b2a:	22e0      	movs	r2, #224	; 0xe0
     b2c:	02d2      	lsls	r2, r2, #11
     b2e:	4313      	orrs	r3, r2
     b30:	606b      	str	r3, [r5, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     b32:	0773      	lsls	r3, r6, #29
     b34:	d502      	bpl.n	b3c <_i2c_master_interrupt_handler+0x1c0>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     b36:	6963      	ldr	r3, [r4, #20]
     b38:	0020      	movs	r0, r4
     b3a:	4798      	blx	r3
		}
	}
}
     b3c:	bd70      	pop	{r4, r5, r6, pc}
     b3e:	46c0      	nop			; (mov r8, r8)
     b40:	20003d64 	.word	0x20003d64
     b44:	000008b1 	.word	0x000008b1
     b48:	00000941 	.word	0x00000941
     b4c:	000008bd 	.word	0x000008bd

00000b50 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     b50:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     b52:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b54:	2340      	movs	r3, #64	; 0x40
     b56:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     b58:	4281      	cmp	r1, r0
     b5a:	d201      	bcs.n	b60 <_sercom_get_sync_baud_val+0x10>
     b5c:	e00a      	b.n	b74 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     b5e:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     b60:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     b62:	1c63      	adds	r3, r4, #1
     b64:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     b66:	4288      	cmp	r0, r1
     b68:	d9f9      	bls.n	b5e <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b6a:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     b6c:	2cff      	cmp	r4, #255	; 0xff
     b6e:	d801      	bhi.n	b74 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     b70:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     b72:	2300      	movs	r3, #0
	}
}
     b74:	0018      	movs	r0, r3
     b76:	bd10      	pop	{r4, pc}

00000b78 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     b78:	b5f0      	push	{r4, r5, r6, r7, lr}
     b7a:	465f      	mov	r7, fp
     b7c:	4656      	mov	r6, sl
     b7e:	464d      	mov	r5, r9
     b80:	4644      	mov	r4, r8
     b82:	b4f0      	push	{r4, r5, r6, r7}
     b84:	b089      	sub	sp, #36	; 0x24
     b86:	000c      	movs	r4, r1
     b88:	9205      	str	r2, [sp, #20]
     b8a:	aa12      	add	r2, sp, #72	; 0x48
     b8c:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     b8e:	0002      	movs	r2, r0
     b90:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b92:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     b94:	42a2      	cmp	r2, r4
     b96:	d900      	bls.n	b9a <_sercom_get_async_baud_val+0x22>
     b98:	e0c6      	b.n	d28 <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     b9a:	2b00      	cmp	r3, #0
     b9c:	d151      	bne.n	c42 <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     b9e:	0002      	movs	r2, r0
     ba0:	0008      	movs	r0, r1
     ba2:	2100      	movs	r1, #0
     ba4:	4d64      	ldr	r5, [pc, #400]	; (d38 <_sercom_get_async_baud_val+0x1c0>)
     ba6:	47a8      	blx	r5
     ba8:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     baa:	0026      	movs	r6, r4
     bac:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     bae:	2300      	movs	r3, #0
     bb0:	2400      	movs	r4, #0
     bb2:	9300      	str	r3, [sp, #0]
     bb4:	9401      	str	r4, [sp, #4]
     bb6:	2200      	movs	r2, #0
     bb8:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     bba:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     bbc:	2120      	movs	r1, #32
     bbe:	468c      	mov	ip, r1
     bc0:	391f      	subs	r1, #31
     bc2:	9602      	str	r6, [sp, #8]
     bc4:	9703      	str	r7, [sp, #12]
     bc6:	2420      	movs	r4, #32
     bc8:	4264      	negs	r4, r4
     bca:	1904      	adds	r4, r0, r4
     bcc:	d403      	bmi.n	bd6 <_sercom_get_async_baud_val+0x5e>
     bce:	000d      	movs	r5, r1
     bd0:	40a5      	lsls	r5, r4
     bd2:	46a8      	mov	r8, r5
     bd4:	e004      	b.n	be0 <_sercom_get_async_baud_val+0x68>
     bd6:	4664      	mov	r4, ip
     bd8:	1a24      	subs	r4, r4, r0
     bda:	000d      	movs	r5, r1
     bdc:	40e5      	lsrs	r5, r4
     bde:	46a8      	mov	r8, r5
     be0:	000c      	movs	r4, r1
     be2:	4084      	lsls	r4, r0
     be4:	46a1      	mov	r9, r4

		r = r << 1;
     be6:	0014      	movs	r4, r2
     be8:	001d      	movs	r5, r3
     bea:	18a4      	adds	r4, r4, r2
     bec:	415d      	adcs	r5, r3
     bee:	0022      	movs	r2, r4
     bf0:	002b      	movs	r3, r5

		if (n & bit_shift) {
     bf2:	4646      	mov	r6, r8
     bf4:	465f      	mov	r7, fp
     bf6:	423e      	tst	r6, r7
     bf8:	d003      	beq.n	c02 <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
     bfa:	000e      	movs	r6, r1
     bfc:	4326      	orrs	r6, r4
     bfe:	0032      	movs	r2, r6
     c00:	002b      	movs	r3, r5
		}

		if (r >= d) {
     c02:	9c02      	ldr	r4, [sp, #8]
     c04:	9d03      	ldr	r5, [sp, #12]
     c06:	429d      	cmp	r5, r3
     c08:	d80f      	bhi.n	c2a <_sercom_get_async_baud_val+0xb2>
     c0a:	d101      	bne.n	c10 <_sercom_get_async_baud_val+0x98>
     c0c:	4294      	cmp	r4, r2
     c0e:	d80c      	bhi.n	c2a <_sercom_get_async_baud_val+0xb2>
			r = r - d;
     c10:	9c02      	ldr	r4, [sp, #8]
     c12:	9d03      	ldr	r5, [sp, #12]
     c14:	1b12      	subs	r2, r2, r4
     c16:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     c18:	464d      	mov	r5, r9
     c1a:	9e00      	ldr	r6, [sp, #0]
     c1c:	9f01      	ldr	r7, [sp, #4]
     c1e:	4335      	orrs	r5, r6
     c20:	003c      	movs	r4, r7
     c22:	4646      	mov	r6, r8
     c24:	4334      	orrs	r4, r6
     c26:	9500      	str	r5, [sp, #0]
     c28:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     c2a:	3801      	subs	r0, #1
     c2c:	d2cb      	bcs.n	bc6 <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
     c2e:	2200      	movs	r2, #0
     c30:	2301      	movs	r3, #1
     c32:	9800      	ldr	r0, [sp, #0]
     c34:	9901      	ldr	r1, [sp, #4]
     c36:	1a12      	subs	r2, r2, r0
     c38:	418b      	sbcs	r3, r1
     c3a:	0c12      	lsrs	r2, r2, #16
     c3c:	041b      	lsls	r3, r3, #16
     c3e:	431a      	orrs	r2, r3
     c40:	e06f      	b.n	d22 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     c42:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     c44:	2b01      	cmp	r3, #1
     c46:	d16c      	bne.n	d22 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     c48:	0f63      	lsrs	r3, r4, #29
     c4a:	9304      	str	r3, [sp, #16]
     c4c:	00e3      	lsls	r3, r4, #3
     c4e:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     c50:	000a      	movs	r2, r1
     c52:	2300      	movs	r3, #0
     c54:	2100      	movs	r1, #0
     c56:	4c38      	ldr	r4, [pc, #224]	; (d38 <_sercom_get_async_baud_val+0x1c0>)
     c58:	47a0      	blx	r4
     c5a:	0004      	movs	r4, r0
     c5c:	000d      	movs	r5, r1
     c5e:	2300      	movs	r3, #0
     c60:	469c      	mov	ip, r3
     c62:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     c64:	3320      	adds	r3, #32
     c66:	469b      	mov	fp, r3
     c68:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     c6a:	4663      	mov	r3, ip
     c6c:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     c6e:	2300      	movs	r3, #0
     c70:	9302      	str	r3, [sp, #8]
     c72:	2200      	movs	r2, #0
     c74:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     c76:	213f      	movs	r1, #63	; 0x3f
     c78:	9400      	str	r4, [sp, #0]
     c7a:	9501      	str	r5, [sp, #4]
     c7c:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
     c7e:	2120      	movs	r1, #32
     c80:	4249      	negs	r1, r1
     c82:	1879      	adds	r1, r7, r1
     c84:	d403      	bmi.n	c8e <_sercom_get_async_baud_val+0x116>
     c86:	0030      	movs	r0, r6
     c88:	4088      	lsls	r0, r1
     c8a:	4684      	mov	ip, r0
     c8c:	e004      	b.n	c98 <_sercom_get_async_baud_val+0x120>
     c8e:	4659      	mov	r1, fp
     c90:	1bc9      	subs	r1, r1, r7
     c92:	0030      	movs	r0, r6
     c94:	40c8      	lsrs	r0, r1
     c96:	4684      	mov	ip, r0
     c98:	0031      	movs	r1, r6
     c9a:	40b9      	lsls	r1, r7
     c9c:	4689      	mov	r9, r1

		r = r << 1;
     c9e:	0010      	movs	r0, r2
     ca0:	0019      	movs	r1, r3
     ca2:	1880      	adds	r0, r0, r2
     ca4:	4159      	adcs	r1, r3
     ca6:	0002      	movs	r2, r0
     ca8:	000b      	movs	r3, r1

		if (n & bit_shift) {
     caa:	4644      	mov	r4, r8
     cac:	464d      	mov	r5, r9
     cae:	402c      	ands	r4, r5
     cb0:	46a2      	mov	sl, r4
     cb2:	4664      	mov	r4, ip
     cb4:	9d04      	ldr	r5, [sp, #16]
     cb6:	402c      	ands	r4, r5
     cb8:	46a4      	mov	ip, r4
     cba:	4654      	mov	r4, sl
     cbc:	4665      	mov	r5, ip
     cbe:	432c      	orrs	r4, r5
     cc0:	d003      	beq.n	cca <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
     cc2:	0034      	movs	r4, r6
     cc4:	4304      	orrs	r4, r0
     cc6:	0022      	movs	r2, r4
     cc8:	000b      	movs	r3, r1
		}

		if (r >= d) {
     cca:	9800      	ldr	r0, [sp, #0]
     ccc:	9901      	ldr	r1, [sp, #4]
     cce:	4299      	cmp	r1, r3
     cd0:	d80a      	bhi.n	ce8 <_sercom_get_async_baud_val+0x170>
     cd2:	d101      	bne.n	cd8 <_sercom_get_async_baud_val+0x160>
     cd4:	4290      	cmp	r0, r2
     cd6:	d807      	bhi.n	ce8 <_sercom_get_async_baud_val+0x170>
			r = r - d;
     cd8:	9800      	ldr	r0, [sp, #0]
     cda:	9901      	ldr	r1, [sp, #4]
     cdc:	1a12      	subs	r2, r2, r0
     cde:	418b      	sbcs	r3, r1
			q |= bit_shift;
     ce0:	9902      	ldr	r1, [sp, #8]
     ce2:	4648      	mov	r0, r9
     ce4:	4301      	orrs	r1, r0
     ce6:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     ce8:	3f01      	subs	r7, #1
     cea:	d2c8      	bcs.n	c7e <_sercom_get_async_baud_val+0x106>
     cec:	9c00      	ldr	r4, [sp, #0]
     cee:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     cf0:	9902      	ldr	r1, [sp, #8]
     cf2:	9a07      	ldr	r2, [sp, #28]
     cf4:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     cf6:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     cf8:	4910      	ldr	r1, [pc, #64]	; (d3c <_sercom_get_async_baud_val+0x1c4>)
     cfa:	428b      	cmp	r3, r1
     cfc:	d90b      	bls.n	d16 <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     cfe:	9b06      	ldr	r3, [sp, #24]
     d00:	3301      	adds	r3, #1
     d02:	b2db      	uxtb	r3, r3
     d04:	0019      	movs	r1, r3
     d06:	9306      	str	r3, [sp, #24]
     d08:	0013      	movs	r3, r2
     d0a:	3301      	adds	r3, #1
     d0c:	9307      	str	r3, [sp, #28]
     d0e:	2908      	cmp	r1, #8
     d10:	d1ad      	bne.n	c6e <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d12:	2540      	movs	r5, #64	; 0x40
     d14:	e008      	b.n	d28 <_sercom_get_async_baud_val+0x1b0>
     d16:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     d18:	9a06      	ldr	r2, [sp, #24]
     d1a:	2a08      	cmp	r2, #8
     d1c:	d004      	beq.n	d28 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     d1e:	0352      	lsls	r2, r2, #13
     d20:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     d22:	9b05      	ldr	r3, [sp, #20]
     d24:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     d26:	2500      	movs	r5, #0
}
     d28:	0028      	movs	r0, r5
     d2a:	b009      	add	sp, #36	; 0x24
     d2c:	bc3c      	pop	{r2, r3, r4, r5}
     d2e:	4690      	mov	r8, r2
     d30:	4699      	mov	r9, r3
     d32:	46a2      	mov	sl, r4
     d34:	46ab      	mov	fp, r5
     d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d38:	00004a01 	.word	0x00004a01
     d3c:	00001fff 	.word	0x00001fff

00000d40 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     d40:	b510      	push	{r4, lr}
     d42:	b082      	sub	sp, #8
     d44:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     d46:	4b0e      	ldr	r3, [pc, #56]	; (d80 <sercom_set_gclk_generator+0x40>)
     d48:	781b      	ldrb	r3, [r3, #0]
     d4a:	2b00      	cmp	r3, #0
     d4c:	d001      	beq.n	d52 <sercom_set_gclk_generator+0x12>
     d4e:	2900      	cmp	r1, #0
     d50:	d00d      	beq.n	d6e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     d52:	a901      	add	r1, sp, #4
     d54:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     d56:	2011      	movs	r0, #17
     d58:	4b0a      	ldr	r3, [pc, #40]	; (d84 <sercom_set_gclk_generator+0x44>)
     d5a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     d5c:	2011      	movs	r0, #17
     d5e:	4b0a      	ldr	r3, [pc, #40]	; (d88 <sercom_set_gclk_generator+0x48>)
     d60:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     d62:	4b07      	ldr	r3, [pc, #28]	; (d80 <sercom_set_gclk_generator+0x40>)
     d64:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     d66:	2201      	movs	r2, #1
     d68:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     d6a:	2000      	movs	r0, #0
     d6c:	e006      	b.n	d7c <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     d6e:	4b04      	ldr	r3, [pc, #16]	; (d80 <sercom_set_gclk_generator+0x40>)
     d70:	785b      	ldrb	r3, [r3, #1]
     d72:	4283      	cmp	r3, r0
     d74:	d001      	beq.n	d7a <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     d76:	201d      	movs	r0, #29
     d78:	e000      	b.n	d7c <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     d7a:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     d7c:	b002      	add	sp, #8
     d7e:	bd10      	pop	{r4, pc}
     d80:	200000d0 	.word	0x200000d0
     d84:	00003851 	.word	0x00003851
     d88:	000037e1 	.word	0x000037e1

00000d8c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     d8c:	4b44      	ldr	r3, [pc, #272]	; (ea0 <_sercom_get_default_pad+0x114>)
     d8e:	4298      	cmp	r0, r3
     d90:	d034      	beq.n	dfc <_sercom_get_default_pad+0x70>
     d92:	d807      	bhi.n	da4 <_sercom_get_default_pad+0x18>
     d94:	2384      	movs	r3, #132	; 0x84
     d96:	05db      	lsls	r3, r3, #23
     d98:	4298      	cmp	r0, r3
     d9a:	d00d      	beq.n	db8 <_sercom_get_default_pad+0x2c>
     d9c:	4b41      	ldr	r3, [pc, #260]	; (ea4 <_sercom_get_default_pad+0x118>)
     d9e:	4298      	cmp	r0, r3
     da0:	d01b      	beq.n	dda <_sercom_get_default_pad+0x4e>
     da2:	e06f      	b.n	e84 <_sercom_get_default_pad+0xf8>
     da4:	4b40      	ldr	r3, [pc, #256]	; (ea8 <_sercom_get_default_pad+0x11c>)
     da6:	4298      	cmp	r0, r3
     da8:	d04a      	beq.n	e40 <_sercom_get_default_pad+0xb4>
     daa:	4b40      	ldr	r3, [pc, #256]	; (eac <_sercom_get_default_pad+0x120>)
     dac:	4298      	cmp	r0, r3
     dae:	d058      	beq.n	e62 <_sercom_get_default_pad+0xd6>
     db0:	4b3f      	ldr	r3, [pc, #252]	; (eb0 <_sercom_get_default_pad+0x124>)
     db2:	4298      	cmp	r0, r3
     db4:	d166      	bne.n	e84 <_sercom_get_default_pad+0xf8>
     db6:	e032      	b.n	e1e <_sercom_get_default_pad+0x92>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     db8:	2901      	cmp	r1, #1
     dba:	d006      	beq.n	dca <_sercom_get_default_pad+0x3e>
     dbc:	2900      	cmp	r1, #0
     dbe:	d063      	beq.n	e88 <_sercom_get_default_pad+0xfc>
     dc0:	2902      	cmp	r1, #2
     dc2:	d006      	beq.n	dd2 <_sercom_get_default_pad+0x46>
     dc4:	2903      	cmp	r1, #3
     dc6:	d006      	beq.n	dd6 <_sercom_get_default_pad+0x4a>
     dc8:	e001      	b.n	dce <_sercom_get_default_pad+0x42>
     dca:	483a      	ldr	r0, [pc, #232]	; (eb4 <_sercom_get_default_pad+0x128>)
     dcc:	e067      	b.n	e9e <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     dce:	2000      	movs	r0, #0
     dd0:	e065      	b.n	e9e <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dd2:	4839      	ldr	r0, [pc, #228]	; (eb8 <_sercom_get_default_pad+0x12c>)
     dd4:	e063      	b.n	e9e <_sercom_get_default_pad+0x112>
     dd6:	4839      	ldr	r0, [pc, #228]	; (ebc <_sercom_get_default_pad+0x130>)
     dd8:	e061      	b.n	e9e <_sercom_get_default_pad+0x112>
     dda:	2901      	cmp	r1, #1
     ddc:	d006      	beq.n	dec <_sercom_get_default_pad+0x60>
     dde:	2900      	cmp	r1, #0
     de0:	d054      	beq.n	e8c <_sercom_get_default_pad+0x100>
     de2:	2902      	cmp	r1, #2
     de4:	d006      	beq.n	df4 <_sercom_get_default_pad+0x68>
     de6:	2903      	cmp	r1, #3
     de8:	d006      	beq.n	df8 <_sercom_get_default_pad+0x6c>
     dea:	e001      	b.n	df0 <_sercom_get_default_pad+0x64>
     dec:	4834      	ldr	r0, [pc, #208]	; (ec0 <_sercom_get_default_pad+0x134>)
     dee:	e056      	b.n	e9e <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     df0:	2000      	movs	r0, #0
     df2:	e054      	b.n	e9e <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     df4:	4833      	ldr	r0, [pc, #204]	; (ec4 <_sercom_get_default_pad+0x138>)
     df6:	e052      	b.n	e9e <_sercom_get_default_pad+0x112>
     df8:	4833      	ldr	r0, [pc, #204]	; (ec8 <_sercom_get_default_pad+0x13c>)
     dfa:	e050      	b.n	e9e <_sercom_get_default_pad+0x112>
     dfc:	2901      	cmp	r1, #1
     dfe:	d006      	beq.n	e0e <_sercom_get_default_pad+0x82>
     e00:	2900      	cmp	r1, #0
     e02:	d045      	beq.n	e90 <_sercom_get_default_pad+0x104>
     e04:	2902      	cmp	r1, #2
     e06:	d006      	beq.n	e16 <_sercom_get_default_pad+0x8a>
     e08:	2903      	cmp	r1, #3
     e0a:	d006      	beq.n	e1a <_sercom_get_default_pad+0x8e>
     e0c:	e001      	b.n	e12 <_sercom_get_default_pad+0x86>
     e0e:	482f      	ldr	r0, [pc, #188]	; (ecc <_sercom_get_default_pad+0x140>)
     e10:	e045      	b.n	e9e <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     e12:	2000      	movs	r0, #0
     e14:	e043      	b.n	e9e <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e16:	482e      	ldr	r0, [pc, #184]	; (ed0 <_sercom_get_default_pad+0x144>)
     e18:	e041      	b.n	e9e <_sercom_get_default_pad+0x112>
     e1a:	482e      	ldr	r0, [pc, #184]	; (ed4 <_sercom_get_default_pad+0x148>)
     e1c:	e03f      	b.n	e9e <_sercom_get_default_pad+0x112>
     e1e:	2901      	cmp	r1, #1
     e20:	d006      	beq.n	e30 <_sercom_get_default_pad+0xa4>
     e22:	2900      	cmp	r1, #0
     e24:	d036      	beq.n	e94 <_sercom_get_default_pad+0x108>
     e26:	2902      	cmp	r1, #2
     e28:	d006      	beq.n	e38 <_sercom_get_default_pad+0xac>
     e2a:	2903      	cmp	r1, #3
     e2c:	d006      	beq.n	e3c <_sercom_get_default_pad+0xb0>
     e2e:	e001      	b.n	e34 <_sercom_get_default_pad+0xa8>
     e30:	4829      	ldr	r0, [pc, #164]	; (ed8 <_sercom_get_default_pad+0x14c>)
     e32:	e034      	b.n	e9e <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     e34:	2000      	movs	r0, #0
     e36:	e032      	b.n	e9e <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e38:	4828      	ldr	r0, [pc, #160]	; (edc <_sercom_get_default_pad+0x150>)
     e3a:	e030      	b.n	e9e <_sercom_get_default_pad+0x112>
     e3c:	4828      	ldr	r0, [pc, #160]	; (ee0 <_sercom_get_default_pad+0x154>)
     e3e:	e02e      	b.n	e9e <_sercom_get_default_pad+0x112>
     e40:	2901      	cmp	r1, #1
     e42:	d006      	beq.n	e52 <_sercom_get_default_pad+0xc6>
     e44:	2900      	cmp	r1, #0
     e46:	d027      	beq.n	e98 <_sercom_get_default_pad+0x10c>
     e48:	2902      	cmp	r1, #2
     e4a:	d006      	beq.n	e5a <_sercom_get_default_pad+0xce>
     e4c:	2903      	cmp	r1, #3
     e4e:	d006      	beq.n	e5e <_sercom_get_default_pad+0xd2>
     e50:	e001      	b.n	e56 <_sercom_get_default_pad+0xca>
     e52:	4824      	ldr	r0, [pc, #144]	; (ee4 <_sercom_get_default_pad+0x158>)
     e54:	e023      	b.n	e9e <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     e56:	2000      	movs	r0, #0
     e58:	e021      	b.n	e9e <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e5a:	4823      	ldr	r0, [pc, #140]	; (ee8 <_sercom_get_default_pad+0x15c>)
     e5c:	e01f      	b.n	e9e <_sercom_get_default_pad+0x112>
     e5e:	4823      	ldr	r0, [pc, #140]	; (eec <_sercom_get_default_pad+0x160>)
     e60:	e01d      	b.n	e9e <_sercom_get_default_pad+0x112>
     e62:	2901      	cmp	r1, #1
     e64:	d006      	beq.n	e74 <_sercom_get_default_pad+0xe8>
     e66:	2900      	cmp	r1, #0
     e68:	d018      	beq.n	e9c <_sercom_get_default_pad+0x110>
     e6a:	2902      	cmp	r1, #2
     e6c:	d006      	beq.n	e7c <_sercom_get_default_pad+0xf0>
     e6e:	2903      	cmp	r1, #3
     e70:	d006      	beq.n	e80 <_sercom_get_default_pad+0xf4>
     e72:	e001      	b.n	e78 <_sercom_get_default_pad+0xec>
     e74:	481e      	ldr	r0, [pc, #120]	; (ef0 <_sercom_get_default_pad+0x164>)
     e76:	e012      	b.n	e9e <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     e78:	2000      	movs	r0, #0
     e7a:	e010      	b.n	e9e <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e7c:	481d      	ldr	r0, [pc, #116]	; (ef4 <_sercom_get_default_pad+0x168>)
     e7e:	e00e      	b.n	e9e <_sercom_get_default_pad+0x112>
     e80:	481d      	ldr	r0, [pc, #116]	; (ef8 <_sercom_get_default_pad+0x16c>)
     e82:	e00c      	b.n	e9e <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     e84:	2000      	movs	r0, #0
     e86:	e00a      	b.n	e9e <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e88:	481c      	ldr	r0, [pc, #112]	; (efc <_sercom_get_default_pad+0x170>)
     e8a:	e008      	b.n	e9e <_sercom_get_default_pad+0x112>
     e8c:	2003      	movs	r0, #3
     e8e:	e006      	b.n	e9e <_sercom_get_default_pad+0x112>
     e90:	481b      	ldr	r0, [pc, #108]	; (f00 <_sercom_get_default_pad+0x174>)
     e92:	e004      	b.n	e9e <_sercom_get_default_pad+0x112>
     e94:	481b      	ldr	r0, [pc, #108]	; (f04 <_sercom_get_default_pad+0x178>)
     e96:	e002      	b.n	e9e <_sercom_get_default_pad+0x112>
     e98:	481b      	ldr	r0, [pc, #108]	; (f08 <_sercom_get_default_pad+0x17c>)
     e9a:	e000      	b.n	e9e <_sercom_get_default_pad+0x112>
     e9c:	481b      	ldr	r0, [pc, #108]	; (f0c <_sercom_get_default_pad+0x180>)
	}

	Assert(false);
	return 0;
}
     e9e:	4770      	bx	lr
     ea0:	42000800 	.word	0x42000800
     ea4:	42000400 	.word	0x42000400
     ea8:	42001000 	.word	0x42001000
     eac:	43000400 	.word	0x43000400
     eb0:	42000c00 	.word	0x42000c00
     eb4:	00050003 	.word	0x00050003
     eb8:	00060003 	.word	0x00060003
     ebc:	00070003 	.word	0x00070003
     ec0:	00010003 	.word	0x00010003
     ec4:	001e0003 	.word	0x001e0003
     ec8:	001f0003 	.word	0x001f0003
     ecc:	00090003 	.word	0x00090003
     ed0:	000a0003 	.word	0x000a0003
     ed4:	000b0003 	.word	0x000b0003
     ed8:	00110003 	.word	0x00110003
     edc:	00120003 	.word	0x00120003
     ee0:	00130003 	.word	0x00130003
     ee4:	000d0003 	.word	0x000d0003
     ee8:	000e0003 	.word	0x000e0003
     eec:	000f0003 	.word	0x000f0003
     ef0:	00170003 	.word	0x00170003
     ef4:	00180003 	.word	0x00180003
     ef8:	00190003 	.word	0x00190003
     efc:	00040003 	.word	0x00040003
     f00:	00080003 	.word	0x00080003
     f04:	00100003 	.word	0x00100003
     f08:	000c0003 	.word	0x000c0003
     f0c:	00160003 	.word	0x00160003

00000f10 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     f10:	b530      	push	{r4, r5, lr}
     f12:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     f14:	4b0c      	ldr	r3, [pc, #48]	; (f48 <_sercom_get_sercom_inst_index+0x38>)
     f16:	466a      	mov	r2, sp
     f18:	cb32      	ldmia	r3!, {r1, r4, r5}
     f1a:	c232      	stmia	r2!, {r1, r4, r5}
     f1c:	cb32      	ldmia	r3!, {r1, r4, r5}
     f1e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     f20:	9b00      	ldr	r3, [sp, #0]
     f22:	4283      	cmp	r3, r0
     f24:	d006      	beq.n	f34 <_sercom_get_sercom_inst_index+0x24>
     f26:	2301      	movs	r3, #1
     f28:	009a      	lsls	r2, r3, #2
     f2a:	4669      	mov	r1, sp
     f2c:	5852      	ldr	r2, [r2, r1]
     f2e:	4282      	cmp	r2, r0
     f30:	d103      	bne.n	f3a <_sercom_get_sercom_inst_index+0x2a>
     f32:	e000      	b.n	f36 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f34:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     f36:	b2d8      	uxtb	r0, r3
     f38:	e003      	b.n	f42 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f3a:	3301      	adds	r3, #1
     f3c:	2b06      	cmp	r3, #6
     f3e:	d1f3      	bne.n	f28 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     f40:	2000      	movs	r0, #0
}
     f42:	b007      	add	sp, #28
     f44:	bd30      	pop	{r4, r5, pc}
     f46:	46c0      	nop			; (mov r8, r8)
     f48:	00006bb8 	.word	0x00006bb8

00000f4c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f4e:	4647      	mov	r7, r8
     f50:	b480      	push	{r7}
     f52:	000c      	movs	r4, r1
     f54:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     f56:	2800      	cmp	r0, #0
     f58:	d10d      	bne.n	f76 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
     f5a:	2a00      	cmp	r2, #0
     f5c:	dd0e      	ble.n	f7c <_read+0x30>
     f5e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     f60:	4e08      	ldr	r6, [pc, #32]	; (f84 <_read+0x38>)
     f62:	4d09      	ldr	r5, [pc, #36]	; (f88 <_read+0x3c>)
     f64:	6830      	ldr	r0, [r6, #0]
     f66:	0021      	movs	r1, r4
     f68:	682b      	ldr	r3, [r5, #0]
     f6a:	4798      	blx	r3
		ptr++;
     f6c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     f6e:	42a7      	cmp	r7, r4
     f70:	d1f8      	bne.n	f64 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     f72:	4640      	mov	r0, r8
     f74:	e003      	b.n	f7e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     f76:	2001      	movs	r0, #1
     f78:	4240      	negs	r0, r0
     f7a:	e000      	b.n	f7e <_read+0x32>
	}

	for (; len > 0; --len) {
     f7c:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     f7e:	bc04      	pop	{r2}
     f80:	4690      	mov	r8, r2
     f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f84:	20003d60 	.word	0x20003d60
     f88:	20003d58 	.word	0x20003d58

00000f8c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f8e:	4647      	mov	r7, r8
     f90:	b480      	push	{r7}
     f92:	000e      	movs	r6, r1
     f94:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     f96:	3801      	subs	r0, #1
     f98:	2802      	cmp	r0, #2
     f9a:	d811      	bhi.n	fc0 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
     f9c:	2a00      	cmp	r2, #0
     f9e:	d012      	beq.n	fc6 <_write+0x3a>
     fa0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     fa2:	4b0c      	ldr	r3, [pc, #48]	; (fd4 <_write+0x48>)
     fa4:	4698      	mov	r8, r3
     fa6:	4f0c      	ldr	r7, [pc, #48]	; (fd8 <_write+0x4c>)
     fa8:	4643      	mov	r3, r8
     faa:	6818      	ldr	r0, [r3, #0]
     fac:	5d31      	ldrb	r1, [r6, r4]
     fae:	683b      	ldr	r3, [r7, #0]
     fb0:	4798      	blx	r3
     fb2:	2800      	cmp	r0, #0
     fb4:	db09      	blt.n	fca <_write+0x3e>
			return -1;
		}
		++nChars;
     fb6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     fb8:	42a5      	cmp	r5, r4
     fba:	d1f5      	bne.n	fa8 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
     fbc:	0020      	movs	r0, r4
     fbe:	e006      	b.n	fce <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     fc0:	2001      	movs	r0, #1
     fc2:	4240      	negs	r0, r0
     fc4:	e003      	b.n	fce <_write+0x42>
	}

	for (; len != 0; --len) {
     fc6:	2000      	movs	r0, #0
     fc8:	e001      	b.n	fce <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     fca:	2001      	movs	r0, #1
     fcc:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
     fce:	bc04      	pop	{r2}
     fd0:	4690      	mov	r8, r2
     fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fd4:	20003d60 	.word	0x20003d60
     fd8:	20003d5c 	.word	0x20003d5c

00000fdc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     fdc:	4b03      	ldr	r3, [pc, #12]	; (fec <prvTaskExitError+0x10>)
     fde:	681b      	ldr	r3, [r3, #0]
     fe0:	3301      	adds	r3, #1
     fe2:	d001      	beq.n	fe8 <prvTaskExitError+0xc>
     fe4:	b672      	cpsid	i
     fe6:	e7fe      	b.n	fe6 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
     fe8:	b672      	cpsid	i
     fea:	e7fe      	b.n	fea <prvTaskExitError+0xe>
     fec:	20000024 	.word	0x20000024

00000ff0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
     ff0:	4a06      	ldr	r2, [pc, #24]	; (100c <pxCurrentTCBConst2>)
     ff2:	6813      	ldr	r3, [r2, #0]
     ff4:	6818      	ldr	r0, [r3, #0]
     ff6:	3020      	adds	r0, #32
     ff8:	f380 8809 	msr	PSP, r0
     ffc:	2002      	movs	r0, #2
     ffe:	f380 8814 	msr	CONTROL, r0
    1002:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    1004:	46ae      	mov	lr, r5
    1006:	b662      	cpsie	i
    1008:	bd00      	pop	{pc}
    100a:	46c0      	nop			; (mov r8, r8)

0000100c <pxCurrentTCBConst2>:
    100c:	20003c28 	.word	0x20003c28

00001010 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    1010:	b510      	push	{r4, lr}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    1012:	1f03      	subs	r3, r0, #4
    1014:	2480      	movs	r4, #128	; 0x80
    1016:	0464      	lsls	r4, r4, #17
    1018:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    101a:	3b04      	subs	r3, #4
    101c:	6019      	str	r1, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    101e:	3b04      	subs	r3, #4
    1020:	4902      	ldr	r1, [pc, #8]	; (102c <pxPortInitialiseStack+0x1c>)
    1022:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    1024:	3b14      	subs	r3, #20
    1026:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    1028:	3840      	subs	r0, #64	; 0x40

	return pxTopOfStack;
}
    102a:	bd10      	pop	{r4, pc}
    102c:	00000fdd 	.word	0x00000fdd

00001030 <SVC_Handler>:

void vPortSVCHandler( void )
{
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    1030:	4770      	bx	lr
    1032:	46c0      	nop			; (mov r8, r8)

00001034 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    1034:	2280      	movs	r2, #128	; 0x80
    1036:	0552      	lsls	r2, r2, #21
    1038:	4b03      	ldr	r3, [pc, #12]	; (1048 <vPortYield+0x14>)
    103a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    103c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1040:	f3bf 8f6f 	isb	sy
}
    1044:	4770      	bx	lr
    1046:	46c0      	nop			; (mov r8, r8)
    1048:	e000ed04 	.word	0xe000ed04

0000104c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    104c:	b672      	cpsid	i
    uxCriticalNesting++;
    104e:	4a04      	ldr	r2, [pc, #16]	; (1060 <vPortEnterCritical+0x14>)
    1050:	6813      	ldr	r3, [r2, #0]
    1052:	3301      	adds	r3, #1
    1054:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
    1056:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    105a:	f3bf 8f6f 	isb	sy
}
    105e:	4770      	bx	lr
    1060:	20000024 	.word	0x20000024

00001064 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
    1064:	4b06      	ldr	r3, [pc, #24]	; (1080 <vPortExitCritical+0x1c>)
    1066:	681b      	ldr	r3, [r3, #0]
    1068:	2b00      	cmp	r3, #0
    106a:	d101      	bne.n	1070 <vPortExitCritical+0xc>
    106c:	b672      	cpsid	i
    106e:	e7fe      	b.n	106e <vPortExitCritical+0xa>
    uxCriticalNesting--;
    1070:	3b01      	subs	r3, #1
    1072:	4a03      	ldr	r2, [pc, #12]	; (1080 <vPortExitCritical+0x1c>)
    1074:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    1076:	2b00      	cmp	r3, #0
    1078:	d100      	bne.n	107c <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
    107a:	b662      	cpsie	i
    }
}
    107c:	4770      	bx	lr
    107e:	46c0      	nop			; (mov r8, r8)
    1080:	20000024 	.word	0x20000024

00001084 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    1084:	f3ef 8010 	mrs	r0, PRIMASK
    1088:	b672      	cpsid	i
    108a:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
    108c:	2000      	movs	r0, #0
    108e:	46c0      	nop			; (mov r8, r8)

00001090 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    1090:	f380 8810 	msr	PRIMASK, r0
    1094:	4770      	bx	lr
    1096:	46c0      	nop			; (mov r8, r8)

00001098 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    1098:	f3ef 8009 	mrs	r0, PSP
    109c:	4b0e      	ldr	r3, [pc, #56]	; (10d8 <pxCurrentTCBConst>)
    109e:	681a      	ldr	r2, [r3, #0]
    10a0:	3820      	subs	r0, #32
    10a2:	6010      	str	r0, [r2, #0]
    10a4:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    10a6:	4644      	mov	r4, r8
    10a8:	464d      	mov	r5, r9
    10aa:	4656      	mov	r6, sl
    10ac:	465f      	mov	r7, fp
    10ae:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    10b0:	b508      	push	{r3, lr}
    10b2:	b672      	cpsid	i
    10b4:	f000 ff20 	bl	1ef8 <vTaskSwitchContext>
    10b8:	b662      	cpsie	i
    10ba:	bc0c      	pop	{r2, r3}
    10bc:	6811      	ldr	r1, [r2, #0]
    10be:	6808      	ldr	r0, [r1, #0]
    10c0:	3010      	adds	r0, #16
    10c2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    10c4:	46a0      	mov	r8, r4
    10c6:	46a9      	mov	r9, r5
    10c8:	46b2      	mov	sl, r6
    10ca:	46bb      	mov	fp, r7
    10cc:	f380 8809 	msr	PSP, r0
    10d0:	3820      	subs	r0, #32
    10d2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    10d4:	4718      	bx	r3
    10d6:	46c0      	nop			; (mov r8, r8)

000010d8 <pxCurrentTCBConst>:
    10d8:	20003c28 	.word	0x20003c28

000010dc <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    10dc:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    10de:	4b07      	ldr	r3, [pc, #28]	; (10fc <SysTick_Handler+0x20>)
    10e0:	4798      	blx	r3
    10e2:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    10e4:	4b06      	ldr	r3, [pc, #24]	; (1100 <SysTick_Handler+0x24>)
    10e6:	4798      	blx	r3
    10e8:	2800      	cmp	r0, #0
    10ea:	d003      	beq.n	10f4 <SysTick_Handler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    10ec:	2280      	movs	r2, #128	; 0x80
    10ee:	0552      	lsls	r2, r2, #21
    10f0:	4b04      	ldr	r3, [pc, #16]	; (1104 <SysTick_Handler+0x28>)
    10f2:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    10f4:	0020      	movs	r0, r4
    10f6:	4b04      	ldr	r3, [pc, #16]	; (1108 <SysTick_Handler+0x2c>)
    10f8:	4798      	blx	r3
}
    10fa:	bd10      	pop	{r4, pc}
    10fc:	00001085 	.word	0x00001085
    1100:	00001bf5 	.word	0x00001bf5
    1104:	e000ed04 	.word	0xe000ed04
    1108:	00001091 	.word	0x00001091

0000110c <vPortSetupTimerInterrupt>:
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
    110c:	2200      	movs	r2, #0
    110e:	4b04      	ldr	r3, [pc, #16]	; (1120 <vPortSetupTimerInterrupt+0x14>)
    1110:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    1112:	4a04      	ldr	r2, [pc, #16]	; (1124 <vPortSetupTimerInterrupt+0x18>)
    1114:	4b04      	ldr	r3, [pc, #16]	; (1128 <vPortSetupTimerInterrupt+0x1c>)
    1116:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    1118:	2207      	movs	r2, #7
    111a:	4b04      	ldr	r3, [pc, #16]	; (112c <vPortSetupTimerInterrupt+0x20>)
    111c:	601a      	str	r2, [r3, #0]
}
    111e:	4770      	bx	lr
    1120:	e000e018 	.word	0xe000e018
    1124:	00001f3f 	.word	0x00001f3f
    1128:	e000e014 	.word	0xe000e014
    112c:	e000e010 	.word	0xe000e010

00001130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    1130:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    1132:	4b0a      	ldr	r3, [pc, #40]	; (115c <xPortStartScheduler+0x2c>)
    1134:	681a      	ldr	r2, [r3, #0]
    1136:	21ff      	movs	r1, #255	; 0xff
    1138:	0409      	lsls	r1, r1, #16
    113a:	430a      	orrs	r2, r1
    113c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    113e:	681a      	ldr	r2, [r3, #0]
    1140:	21ff      	movs	r1, #255	; 0xff
    1142:	0609      	lsls	r1, r1, #24
    1144:	430a      	orrs	r2, r1
    1146:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    1148:	4b05      	ldr	r3, [pc, #20]	; (1160 <xPortStartScheduler+0x30>)
    114a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    114c:	2200      	movs	r2, #0
    114e:	4b05      	ldr	r3, [pc, #20]	; (1164 <xPortStartScheduler+0x34>)
    1150:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    1152:	4b05      	ldr	r3, [pc, #20]	; (1168 <xPortStartScheduler+0x38>)
    1154:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    1156:	4b05      	ldr	r3, [pc, #20]	; (116c <xPortStartScheduler+0x3c>)
    1158:	4798      	blx	r3
    115a:	46c0      	nop			; (mov r8, r8)
    115c:	e000ed20 	.word	0xe000ed20
    1160:	0000110d 	.word	0x0000110d
    1164:	20000024 	.word	0x20000024
    1168:	00000ff1 	.word	0x00000ff1
    116c:	00000fdd 	.word	0x00000fdd

00001170 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1170:	b570      	push	{r4, r5, r6, lr}
    1172:	0004      	movs	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    1174:	0743      	lsls	r3, r0, #29
    1176:	d002      	beq.n	117e <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    1178:	2307      	movs	r3, #7
    117a:	439c      	bics	r4, r3
    117c:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
    117e:	4b10      	ldr	r3, [pc, #64]	; (11c0 <pvPortMalloc+0x50>)
    1180:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    1182:	4b10      	ldr	r3, [pc, #64]	; (11c4 <pvPortMalloc+0x54>)
    1184:	681b      	ldr	r3, [r3, #0]
    1186:	2b00      	cmp	r3, #0
    1188:	d105      	bne.n	1196 <pvPortMalloc+0x26>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    118a:	2207      	movs	r2, #7
    118c:	4b0e      	ldr	r3, [pc, #56]	; (11c8 <pvPortMalloc+0x58>)
    118e:	3308      	adds	r3, #8
    1190:	4393      	bics	r3, r2
    1192:	4a0c      	ldr	r2, [pc, #48]	; (11c4 <pvPortMalloc+0x54>)
    1194:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1196:	4b0d      	ldr	r3, [pc, #52]	; (11cc <pvPortMalloc+0x5c>)
    1198:	681b      	ldr	r3, [r3, #0]
    119a:	18e4      	adds	r4, r4, r3
    119c:	4a0c      	ldr	r2, [pc, #48]	; (11d0 <pvPortMalloc+0x60>)
    119e:	4294      	cmp	r4, r2
    11a0:	d807      	bhi.n	11b2 <pvPortMalloc+0x42>
    11a2:	42a3      	cmp	r3, r4
    11a4:	d207      	bcs.n	11b6 <pvPortMalloc+0x46>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    11a6:	4a07      	ldr	r2, [pc, #28]	; (11c4 <pvPortMalloc+0x54>)
    11a8:	6815      	ldr	r5, [r2, #0]
    11aa:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
    11ac:	4b07      	ldr	r3, [pc, #28]	; (11cc <pvPortMalloc+0x5c>)
    11ae:	601c      	str	r4, [r3, #0]
    11b0:	e002      	b.n	11b8 <pvPortMalloc+0x48>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    11b2:	2500      	movs	r5, #0
    11b4:	e000      	b.n	11b8 <pvPortMalloc+0x48>
    11b6:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    11b8:	4b06      	ldr	r3, [pc, #24]	; (11d4 <pvPortMalloc+0x64>)
    11ba:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    11bc:	0028      	movs	r0, r5
    11be:	bd70      	pop	{r4, r5, r6, pc}
    11c0:	00001bc5 	.word	0x00001bc5
    11c4:	20003b70 	.word	0x20003b70
    11c8:	200000d8 	.word	0x200000d8
    11cc:	200000d4 	.word	0x200000d4
    11d0:	00003a8f 	.word	0x00003a8f
    11d4:	00001d19 	.word	0x00001d19

000011d8 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    11d8:	2800      	cmp	r0, #0
    11da:	d001      	beq.n	11e0 <vPortFree+0x8>
    11dc:	b672      	cpsid	i
    11de:	e7fe      	b.n	11de <vPortFree+0x6>
}
    11e0:	4770      	bx	lr
    11e2:	46c0      	nop			; (mov r8, r8)

000011e4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    11e4:	0003      	movs	r3, r0
    11e6:	3308      	adds	r3, #8
    11e8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    11ea:	2201      	movs	r2, #1
    11ec:	4252      	negs	r2, r2
    11ee:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    11f0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    11f2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    11f4:	2300      	movs	r3, #0
    11f6:	6003      	str	r3, [r0, #0]
}
    11f8:	4770      	bx	lr
    11fa:	46c0      	nop			; (mov r8, r8)

000011fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    11fc:	2300      	movs	r3, #0
    11fe:	6103      	str	r3, [r0, #16]
}
    1200:	4770      	bx	lr
    1202:	46c0      	nop			; (mov r8, r8)

00001204 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    1204:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1206:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1208:	689a      	ldr	r2, [r3, #8]
    120a:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    120c:	689a      	ldr	r2, [r3, #8]
    120e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    1210:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1212:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1214:	6803      	ldr	r3, [r0, #0]
    1216:	3301      	adds	r3, #1
    1218:	6003      	str	r3, [r0, #0]
}
    121a:	4770      	bx	lr

0000121c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    121c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    121e:	680c      	ldr	r4, [r1, #0]
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1220:	0002      	movs	r2, r0
    1222:	3208      	adds	r2, #8
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1224:	1c63      	adds	r3, r4, #1
    1226:	d102      	bne.n	122e <vListInsert+0x12>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1228:	6902      	ldr	r2, [r0, #16]
    122a:	e004      	b.n	1236 <vListInsert+0x1a>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    122c:	001a      	movs	r2, r3
    122e:	6853      	ldr	r3, [r2, #4]
    1230:	681d      	ldr	r5, [r3, #0]
    1232:	42ac      	cmp	r4, r5
    1234:	d2fa      	bcs.n	122c <vListInsert+0x10>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1236:	6853      	ldr	r3, [r2, #4]
    1238:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    123a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    123c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    123e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1240:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1242:	6803      	ldr	r3, [r0, #0]
    1244:	3301      	adds	r3, #1
    1246:	6003      	str	r3, [r0, #0]
}
    1248:	bd30      	pop	{r4, r5, pc}
    124a:	46c0      	nop			; (mov r8, r8)

0000124c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    124c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    124e:	6842      	ldr	r2, [r0, #4]
    1250:	6881      	ldr	r1, [r0, #8]
    1252:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1254:	6882      	ldr	r2, [r0, #8]
    1256:	6841      	ldr	r1, [r0, #4]
    1258:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    125a:	685a      	ldr	r2, [r3, #4]
    125c:	4290      	cmp	r0, r2
    125e:	d101      	bne.n	1264 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1260:	6882      	ldr	r2, [r0, #8]
    1262:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1264:	2200      	movs	r2, #0
    1266:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    1268:	681a      	ldr	r2, [r3, #0]
    126a:	1e50      	subs	r0, r2, #1
    126c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
    126e:	4770      	bx	lr

00001270 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    1270:	b570      	push	{r4, r5, r6, lr}
    1272:	0004      	movs	r4, r0
    1274:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    1276:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1278:	2a00      	cmp	r2, #0
    127a:	d108      	bne.n	128e <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    127c:	6803      	ldr	r3, [r0, #0]
    127e:	2b00      	cmp	r3, #0
    1280:	d12c      	bne.n	12dc <prvCopyDataToQueue+0x6c>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    1282:	6840      	ldr	r0, [r0, #4]
    1284:	4b17      	ldr	r3, [pc, #92]	; (12e4 <prvCopyDataToQueue+0x74>)
    1286:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    1288:	2300      	movs	r3, #0
    128a:	6063      	str	r3, [r4, #4]
    128c:	e026      	b.n	12dc <prvCopyDataToQueue+0x6c>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    128e:	2d00      	cmp	r5, #0
    1290:	d10d      	bne.n	12ae <prvCopyDataToQueue+0x3e>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    1292:	6880      	ldr	r0, [r0, #8]
    1294:	4b14      	ldr	r3, [pc, #80]	; (12e8 <prvCopyDataToQueue+0x78>)
    1296:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1298:	68a3      	ldr	r3, [r4, #8]
    129a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    129c:	4694      	mov	ip, r2
    129e:	4463      	add	r3, ip
    12a0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    12a2:	6862      	ldr	r2, [r4, #4]
    12a4:	4293      	cmp	r3, r2
    12a6:	d319      	bcc.n	12dc <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    12a8:	6823      	ldr	r3, [r4, #0]
    12aa:	60a3      	str	r3, [r4, #8]
    12ac:	e016      	b.n	12dc <prvCopyDataToQueue+0x6c>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    12ae:	68c0      	ldr	r0, [r0, #12]
    12b0:	4b0d      	ldr	r3, [pc, #52]	; (12e8 <prvCopyDataToQueue+0x78>)
    12b2:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    12b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    12b6:	425b      	negs	r3, r3
    12b8:	68e2      	ldr	r2, [r4, #12]
    12ba:	18d2      	adds	r2, r2, r3
    12bc:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    12be:	6821      	ldr	r1, [r4, #0]
    12c0:	428a      	cmp	r2, r1
    12c2:	d203      	bcs.n	12cc <prvCopyDataToQueue+0x5c>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    12c4:	6862      	ldr	r2, [r4, #4]
    12c6:	4694      	mov	ip, r2
    12c8:	4463      	add	r3, ip
    12ca:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    12cc:	2d02      	cmp	r5, #2
    12ce:	d105      	bne.n	12dc <prvCopyDataToQueue+0x6c>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    12d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    12d2:	2b00      	cmp	r3, #0
    12d4:	d002      	beq.n	12dc <prvCopyDataToQueue+0x6c>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    12d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    12d8:	3b01      	subs	r3, #1
    12da:	63a3      	str	r3, [r4, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    12dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    12de:	3301      	adds	r3, #1
    12e0:	63a3      	str	r3, [r4, #56]	; 0x38
}
    12e2:	bd70      	pop	{r4, r5, r6, pc}
    12e4:	0000220d 	.word	0x0000220d
    12e8:	000063dd 	.word	0x000063dd

000012ec <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    12ec:	b510      	push	{r4, lr}
    12ee:	b082      	sub	sp, #8
    12f0:	9001      	str	r0, [sp, #4]
    12f2:	000a      	movs	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    12f4:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    12f6:	2c00      	cmp	r4, #0
    12f8:	d101      	bne.n	12fe <prvNotifyQueueSetContainer+0x12>
    12fa:	b672      	cpsid	i
    12fc:	e7fe      	b.n	12fc <prvNotifyQueueSetContainer+0x10>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    12fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1300:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1302:	4299      	cmp	r1, r3
    1304:	d301      	bcc.n	130a <prvNotifyQueueSetContainer+0x1e>
    1306:	b672      	cpsid	i
    1308:	e7fe      	b.n	1308 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    130a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    130c:	2000      	movs	r0, #0
		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    130e:	428b      	cmp	r3, r1
    1310:	d90d      	bls.n	132e <prvNotifyQueueSetContainer+0x42>
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    1312:	a901      	add	r1, sp, #4
    1314:	0020      	movs	r0, r4
    1316:	4b07      	ldr	r3, [pc, #28]	; (1334 <prvNotifyQueueSetContainer+0x48>)
    1318:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    131a:	2000      	movs	r0, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    131c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    131e:	2b00      	cmp	r3, #0
    1320:	d005      	beq.n	132e <prvNotifyQueueSetContainer+0x42>
			{
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    1322:	0020      	movs	r0, r4
    1324:	3024      	adds	r0, #36	; 0x24
    1326:	4b04      	ldr	r3, [pc, #16]	; (1338 <prvNotifyQueueSetContainer+0x4c>)
    1328:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    132a:	1e43      	subs	r3, r0, #1
    132c:	4198      	sbcs	r0, r3
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    132e:	b002      	add	sp, #8
    1330:	bd10      	pop	{r4, pc}
    1332:	46c0      	nop			; (mov r8, r8)
    1334:	00001271 	.word	0x00001271
    1338:	0000203d 	.word	0x0000203d

0000133c <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    133c:	b570      	push	{r4, r5, r6, lr}
    133e:	000c      	movs	r4, r1
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    1340:	6801      	ldr	r1, [r0, #0]
    1342:	2900      	cmp	r1, #0
    1344:	d00b      	beq.n	135e <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1346:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1348:	68c3      	ldr	r3, [r0, #12]
    134a:	189b      	adds	r3, r3, r2
    134c:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    134e:	6845      	ldr	r5, [r0, #4]
    1350:	42ab      	cmp	r3, r5
    1352:	d300      	bcc.n	1356 <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1354:	60c1      	str	r1, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    1356:	68c1      	ldr	r1, [r0, #12]
    1358:	0020      	movs	r0, r4
    135a:	4b01      	ldr	r3, [pc, #4]	; (1360 <prvCopyDataFromQueue+0x24>)
    135c:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    135e:	bd70      	pop	{r4, r5, r6, pc}
    1360:	000063dd 	.word	0x000063dd

00001364 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    1364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1366:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1368:	4b24      	ldr	r3, [pc, #144]	; (13fc <prvUnlockQueue+0x98>)
    136a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    136c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    136e:	2b00      	cmp	r3, #0
    1370:	dd1c      	ble.n	13ac <prvUnlockQueue+0x48>
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    1372:	4d23      	ldr	r5, [pc, #140]	; (1400 <prvUnlockQueue+0x9c>)
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1374:	4e23      	ldr	r6, [pc, #140]	; (1404 <prvUnlockQueue+0xa0>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    1376:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1378:	2b00      	cmp	r3, #0
    137a:	d007      	beq.n	138c <prvUnlockQueue+0x28>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    137c:	2100      	movs	r1, #0
    137e:	0020      	movs	r0, r4
    1380:	47a8      	blx	r5
    1382:	2801      	cmp	r0, #1
    1384:	d10c      	bne.n	13a0 <prvUnlockQueue+0x3c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    1386:	4b20      	ldr	r3, [pc, #128]	; (1408 <prvUnlockQueue+0xa4>)
    1388:	4798      	blx	r3
    138a:	e009      	b.n	13a0 <prvUnlockQueue+0x3c>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    138c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    138e:	2b00      	cmp	r3, #0
    1390:	d00c      	beq.n	13ac <prvUnlockQueue+0x48>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1392:	0020      	movs	r0, r4
    1394:	3024      	adds	r0, #36	; 0x24
    1396:	47b0      	blx	r6
    1398:	2800      	cmp	r0, #0
    139a:	d001      	beq.n	13a0 <prvUnlockQueue+0x3c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    139c:	4b1a      	ldr	r3, [pc, #104]	; (1408 <prvUnlockQueue+0xa4>)
    139e:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    13a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    13a2:	3b01      	subs	r3, #1
    13a4:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    13a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    13a8:	2b00      	cmp	r3, #0
    13aa:	dce4      	bgt.n	1376 <prvUnlockQueue+0x12>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    13ac:	2301      	movs	r3, #1
    13ae:	425b      	negs	r3, r3
    13b0:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    13b2:	4b16      	ldr	r3, [pc, #88]	; (140c <prvUnlockQueue+0xa8>)
    13b4:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    13b6:	4b11      	ldr	r3, [pc, #68]	; (13fc <prvUnlockQueue+0x98>)
    13b8:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    13ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
    13bc:	2b00      	cmp	r3, #0
    13be:	dd16      	ble.n	13ee <prvUnlockQueue+0x8a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    13c0:	6923      	ldr	r3, [r4, #16]
    13c2:	2b00      	cmp	r3, #0
    13c4:	d104      	bne.n	13d0 <prvUnlockQueue+0x6c>
    13c6:	e012      	b.n	13ee <prvUnlockQueue+0x8a>
    13c8:	6923      	ldr	r3, [r4, #16]
    13ca:	2b00      	cmp	r3, #0
    13cc:	d104      	bne.n	13d8 <prvUnlockQueue+0x74>
    13ce:	e00e      	b.n	13ee <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    13d0:	0025      	movs	r5, r4
    13d2:	3510      	adds	r5, #16
    13d4:	4f0b      	ldr	r7, [pc, #44]	; (1404 <prvUnlockQueue+0xa0>)
				{
					vTaskMissedYield();
    13d6:	4e0c      	ldr	r6, [pc, #48]	; (1408 <prvUnlockQueue+0xa4>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    13d8:	0028      	movs	r0, r5
    13da:	47b8      	blx	r7
    13dc:	2800      	cmp	r0, #0
    13de:	d000      	beq.n	13e2 <prvUnlockQueue+0x7e>
				{
					vTaskMissedYield();
    13e0:	47b0      	blx	r6
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    13e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    13e4:	3b01      	subs	r3, #1
    13e6:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    13e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    13ea:	2b00      	cmp	r3, #0
    13ec:	dcec      	bgt.n	13c8 <prvUnlockQueue+0x64>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    13ee:	2301      	movs	r3, #1
    13f0:	425b      	negs	r3, r3
    13f2:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    13f4:	4b05      	ldr	r3, [pc, #20]	; (140c <prvUnlockQueue+0xa8>)
    13f6:	4798      	blx	r3
}
    13f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13fa:	46c0      	nop			; (mov r8, r8)
    13fc:	0000104d 	.word	0x0000104d
    1400:	000012ed 	.word	0x000012ed
    1404:	0000203d 	.word	0x0000203d
    1408:	00002155 	.word	0x00002155
    140c:	00001065 	.word	0x00001065

00001410 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1410:	b570      	push	{r4, r5, r6, lr}
    1412:	0004      	movs	r4, r0
    1414:	000d      	movs	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    1416:	2800      	cmp	r0, #0
    1418:	d101      	bne.n	141e <xQueueGenericReset+0xe>
    141a:	b672      	cpsid	i
    141c:	e7fe      	b.n	141c <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
    141e:	4b15      	ldr	r3, [pc, #84]	; (1474 <xQueueGenericReset+0x64>)
    1420:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1422:	6822      	ldr	r2, [r4, #0]
    1424:	6c21      	ldr	r1, [r4, #64]	; 0x40
    1426:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1428:	434b      	muls	r3, r1
    142a:	18d0      	adds	r0, r2, r3
    142c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    142e:	2000      	movs	r0, #0
    1430:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1432:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1434:	1a5b      	subs	r3, r3, r1
    1436:	18d3      	adds	r3, r2, r3
    1438:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    143a:	2301      	movs	r3, #1
    143c:	425b      	negs	r3, r3
    143e:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    1440:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
    1442:	2d00      	cmp	r5, #0
    1444:	d10b      	bne.n	145e <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1446:	6923      	ldr	r3, [r4, #16]
    1448:	2b00      	cmp	r3, #0
    144a:	d00f      	beq.n	146c <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    144c:	0020      	movs	r0, r4
    144e:	3010      	adds	r0, #16
    1450:	4b09      	ldr	r3, [pc, #36]	; (1478 <xQueueGenericReset+0x68>)
    1452:	4798      	blx	r3
    1454:	2801      	cmp	r0, #1
    1456:	d109      	bne.n	146c <xQueueGenericReset+0x5c>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1458:	4b08      	ldr	r3, [pc, #32]	; (147c <xQueueGenericReset+0x6c>)
    145a:	4798      	blx	r3
    145c:	e006      	b.n	146c <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    145e:	0020      	movs	r0, r4
    1460:	3010      	adds	r0, #16
    1462:	4d07      	ldr	r5, [pc, #28]	; (1480 <xQueueGenericReset+0x70>)
    1464:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1466:	0020      	movs	r0, r4
    1468:	3024      	adds	r0, #36	; 0x24
    146a:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
    146c:	4b05      	ldr	r3, [pc, #20]	; (1484 <xQueueGenericReset+0x74>)
    146e:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    1470:	2001      	movs	r0, #1
    1472:	bd70      	pop	{r4, r5, r6, pc}
    1474:	0000104d 	.word	0x0000104d
    1478:	0000203d 	.word	0x0000203d
    147c:	00001035 	.word	0x00001035
    1480:	000011e5 	.word	0x000011e5
    1484:	00001065 	.word	0x00001065

00001488 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    1488:	b570      	push	{r4, r5, r6, lr}
    148a:	0005      	movs	r5, r0
    148c:	000e      	movs	r6, r1
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    148e:	2800      	cmp	r0, #0
    1490:	d011      	beq.n	14b6 <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    1492:	2050      	movs	r0, #80	; 0x50
    1494:	4b0e      	ldr	r3, [pc, #56]	; (14d0 <xQueueGenericCreate+0x48>)
    1496:	4798      	blx	r3
    1498:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    149a:	d00c      	beq.n	14b6 <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    149c:	0030      	movs	r0, r6
    149e:	4368      	muls	r0, r5
    14a0:	3001      	adds	r0, #1
    14a2:	4b0b      	ldr	r3, [pc, #44]	; (14d0 <xQueueGenericCreate+0x48>)
    14a4:	4798      	blx	r3
    14a6:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
    14a8:	2800      	cmp	r0, #0
    14aa:	d106      	bne.n	14ba <xQueueGenericCreate+0x32>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    14ac:	0020      	movs	r0, r4
    14ae:	4b09      	ldr	r3, [pc, #36]	; (14d4 <xQueueGenericCreate+0x4c>)
    14b0:	4798      	blx	r3
    14b2:	e000      	b.n	14b6 <xQueueGenericCreate+0x2e>
    14b4:	e7fe      	b.n	14b4 <xQueueGenericCreate+0x2c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    14b6:	b672      	cpsid	i
    14b8:	e7fc      	b.n	14b4 <xQueueGenericCreate+0x2c>
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    14ba:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    14bc:	6426      	str	r6, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    14be:	2101      	movs	r1, #1
    14c0:	0020      	movs	r0, r4
    14c2:	4b05      	ldr	r3, [pc, #20]	; (14d8 <xQueueGenericCreate+0x50>)
    14c4:	4798      	blx	r3
				}
				#endif /* configUSE_TRACE_FACILITY */

				#if( configUSE_QUEUE_SETS == 1 )
				{
					pxNewQueue->pxQueueSetContainer = NULL;
    14c6:	2300      	movs	r3, #0
    14c8:	64e3      	str	r3, [r4, #76]	; 0x4c
	}

	configASSERT( xReturn );

	return xReturn;
}
    14ca:	0020      	movs	r0, r4
    14cc:	bd70      	pop	{r4, r5, r6, pc}
    14ce:	46c0      	nop			; (mov r8, r8)
    14d0:	00001171 	.word	0x00001171
    14d4:	000011d9 	.word	0x000011d9
    14d8:	00001411 	.word	0x00001411

000014dc <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    14dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    14de:	4657      	mov	r7, sl
    14e0:	464e      	mov	r6, r9
    14e2:	4645      	mov	r5, r8
    14e4:	b4e0      	push	{r5, r6, r7}
    14e6:	b084      	sub	sp, #16
    14e8:	0004      	movs	r4, r0
    14ea:	000f      	movs	r7, r1
    14ec:	9201      	str	r2, [sp, #4]
    14ee:	001d      	movs	r5, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    14f0:	2800      	cmp	r0, #0
    14f2:	d101      	bne.n	14f8 <xQueueGenericSend+0x1c>
    14f4:	b672      	cpsid	i
    14f6:	e7fe      	b.n	14f6 <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    14f8:	2900      	cmp	r1, #0
    14fa:	d104      	bne.n	1506 <xQueueGenericSend+0x2a>
    14fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
    14fe:	2b00      	cmp	r3, #0
    1500:	d001      	beq.n	1506 <xQueueGenericSend+0x2a>
    1502:	b672      	cpsid	i
    1504:	e7fe      	b.n	1504 <xQueueGenericSend+0x28>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1506:	2d02      	cmp	r5, #2
    1508:	d104      	bne.n	1514 <xQueueGenericSend+0x38>
    150a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    150c:	2b01      	cmp	r3, #1
    150e:	d001      	beq.n	1514 <xQueueGenericSend+0x38>
    1510:	b672      	cpsid	i
    1512:	e7fe      	b.n	1512 <xQueueGenericSend+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1514:	4b42      	ldr	r3, [pc, #264]	; (1620 <xQueueGenericSend+0x144>)
    1516:	4798      	blx	r3
    1518:	2800      	cmp	r0, #0
    151a:	d104      	bne.n	1526 <xQueueGenericSend+0x4a>
    151c:	9b01      	ldr	r3, [sp, #4]
    151e:	2b00      	cmp	r3, #0
    1520:	d003      	beq.n	152a <xQueueGenericSend+0x4e>
    1522:	b672      	cpsid	i
    1524:	e7fe      	b.n	1524 <xQueueGenericSend+0x48>
    1526:	2600      	movs	r6, #0
    1528:	e000      	b.n	152c <xQueueGenericSend+0x50>
    152a:	2600      	movs	r6, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    152c:	4b3d      	ldr	r3, [pc, #244]	; (1624 <xQueueGenericSend+0x148>)
    152e:	4698      	mov	r8, r3
    1530:	47c0      	blx	r8
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1532:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1534:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1536:	4293      	cmp	r3, r2
    1538:	d301      	bcc.n	153e <xQueueGenericSend+0x62>
    153a:	2d02      	cmp	r5, #2
    153c:	d11f      	bne.n	157e <xQueueGenericSend+0xa2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    153e:	002a      	movs	r2, r5
    1540:	0039      	movs	r1, r7
    1542:	0020      	movs	r0, r4
    1544:	4b38      	ldr	r3, [pc, #224]	; (1628 <xQueueGenericSend+0x14c>)
    1546:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    1548:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    154a:	2b00      	cmp	r3, #0
    154c:	d008      	beq.n	1560 <xQueueGenericSend+0x84>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    154e:	0029      	movs	r1, r5
    1550:	0020      	movs	r0, r4
    1552:	4b36      	ldr	r3, [pc, #216]	; (162c <xQueueGenericSend+0x150>)
    1554:	4798      	blx	r3
    1556:	2801      	cmp	r0, #1
    1558:	d10d      	bne.n	1576 <xQueueGenericSend+0x9a>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    155a:	4b35      	ldr	r3, [pc, #212]	; (1630 <xQueueGenericSend+0x154>)
    155c:	4798      	blx	r3
    155e:	e00a      	b.n	1576 <xQueueGenericSend+0x9a>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1560:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1562:	2b00      	cmp	r3, #0
    1564:	d007      	beq.n	1576 <xQueueGenericSend+0x9a>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1566:	0020      	movs	r0, r4
    1568:	3024      	adds	r0, #36	; 0x24
    156a:	4b32      	ldr	r3, [pc, #200]	; (1634 <xQueueGenericSend+0x158>)
    156c:	4798      	blx	r3
    156e:	2801      	cmp	r0, #1
    1570:	d101      	bne.n	1576 <xQueueGenericSend+0x9a>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    1572:	4b2f      	ldr	r3, [pc, #188]	; (1630 <xQueueGenericSend+0x154>)
    1574:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1576:	4b30      	ldr	r3, [pc, #192]	; (1638 <xQueueGenericSend+0x15c>)
    1578:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    157a:	2001      	movs	r0, #1
    157c:	e049      	b.n	1612 <xQueueGenericSend+0x136>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    157e:	9b01      	ldr	r3, [sp, #4]
    1580:	2b00      	cmp	r3, #0
    1582:	d103      	bne.n	158c <xQueueGenericSend+0xb0>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1584:	4b2c      	ldr	r3, [pc, #176]	; (1638 <xQueueGenericSend+0x15c>)
    1586:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1588:	2000      	movs	r0, #0
    158a:	e042      	b.n	1612 <xQueueGenericSend+0x136>
				}
				else if( xEntryTimeSet == pdFALSE )
    158c:	2e00      	cmp	r6, #0
    158e:	d103      	bne.n	1598 <xQueueGenericSend+0xbc>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1590:	a802      	add	r0, sp, #8
    1592:	4b2a      	ldr	r3, [pc, #168]	; (163c <xQueueGenericSend+0x160>)
    1594:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    1596:	3601      	adds	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1598:	4b27      	ldr	r3, [pc, #156]	; (1638 <xQueueGenericSend+0x15c>)
    159a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    159c:	4b28      	ldr	r3, [pc, #160]	; (1640 <xQueueGenericSend+0x164>)
    159e:	4798      	blx	r3
		prvLockQueue( pxQueue );
    15a0:	4b20      	ldr	r3, [pc, #128]	; (1624 <xQueueGenericSend+0x148>)
    15a2:	4798      	blx	r3
    15a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    15a6:	3301      	adds	r3, #1
    15a8:	d101      	bne.n	15ae <xQueueGenericSend+0xd2>
    15aa:	2300      	movs	r3, #0
    15ac:	6463      	str	r3, [r4, #68]	; 0x44
    15ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    15b0:	3301      	adds	r3, #1
    15b2:	d101      	bne.n	15b8 <xQueueGenericSend+0xdc>
    15b4:	2300      	movs	r3, #0
    15b6:	64a3      	str	r3, [r4, #72]	; 0x48
    15b8:	4b1f      	ldr	r3, [pc, #124]	; (1638 <xQueueGenericSend+0x15c>)
    15ba:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    15bc:	a901      	add	r1, sp, #4
    15be:	a802      	add	r0, sp, #8
    15c0:	4b20      	ldr	r3, [pc, #128]	; (1644 <xQueueGenericSend+0x168>)
    15c2:	4798      	blx	r3
    15c4:	2800      	cmp	r0, #0
    15c6:	d11e      	bne.n	1606 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    15c8:	4b16      	ldr	r3, [pc, #88]	; (1624 <xQueueGenericSend+0x148>)
    15ca:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    15cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    15ce:	469a      	mov	sl, r3
    15d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    15d2:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    15d4:	4b18      	ldr	r3, [pc, #96]	; (1638 <xQueueGenericSend+0x15c>)
    15d6:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    15d8:	45ca      	cmp	sl, r9
    15da:	d10e      	bne.n	15fa <xQueueGenericSend+0x11e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    15dc:	0020      	movs	r0, r4
    15de:	3010      	adds	r0, #16
    15e0:	9901      	ldr	r1, [sp, #4]
    15e2:	4b19      	ldr	r3, [pc, #100]	; (1648 <xQueueGenericSend+0x16c>)
    15e4:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    15e6:	0020      	movs	r0, r4
    15e8:	4b18      	ldr	r3, [pc, #96]	; (164c <xQueueGenericSend+0x170>)
    15ea:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    15ec:	4b18      	ldr	r3, [pc, #96]	; (1650 <xQueueGenericSend+0x174>)
    15ee:	4798      	blx	r3
    15f0:	2800      	cmp	r0, #0
    15f2:	d19d      	bne.n	1530 <xQueueGenericSend+0x54>
				{
					portYIELD_WITHIN_API();
    15f4:	4b0e      	ldr	r3, [pc, #56]	; (1630 <xQueueGenericSend+0x154>)
    15f6:	4798      	blx	r3
    15f8:	e79a      	b.n	1530 <xQueueGenericSend+0x54>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    15fa:	0020      	movs	r0, r4
    15fc:	4b13      	ldr	r3, [pc, #76]	; (164c <xQueueGenericSend+0x170>)
    15fe:	4798      	blx	r3
				( void ) xTaskResumeAll();
    1600:	4b13      	ldr	r3, [pc, #76]	; (1650 <xQueueGenericSend+0x174>)
    1602:	4798      	blx	r3
    1604:	e794      	b.n	1530 <xQueueGenericSend+0x54>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1606:	0020      	movs	r0, r4
    1608:	4b10      	ldr	r3, [pc, #64]	; (164c <xQueueGenericSend+0x170>)
    160a:	4798      	blx	r3
			( void ) xTaskResumeAll();
    160c:	4b10      	ldr	r3, [pc, #64]	; (1650 <xQueueGenericSend+0x174>)
    160e:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    1610:	2000      	movs	r0, #0
		}
	}
}
    1612:	b004      	add	sp, #16
    1614:	bc1c      	pop	{r2, r3, r4}
    1616:	4690      	mov	r8, r2
    1618:	4699      	mov	r9, r3
    161a:	46a2      	mov	sl, r4
    161c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    161e:	46c0      	nop			; (mov r8, r8)
    1620:	0000216d 	.word	0x0000216d
    1624:	0000104d 	.word	0x0000104d
    1628:	00001271 	.word	0x00001271
    162c:	000012ed 	.word	0x000012ed
    1630:	00001035 	.word	0x00001035
    1634:	0000203d 	.word	0x0000203d
    1638:	00001065 	.word	0x00001065
    163c:	000020c5 	.word	0x000020c5
    1640:	00001bc5 	.word	0x00001bc5
    1644:	000020e5 	.word	0x000020e5
    1648:	00001fa5 	.word	0x00001fa5
    164c:	00001365 	.word	0x00001365
    1650:	00001d19 	.word	0x00001d19

00001654 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    1654:	b5f0      	push	{r4, r5, r6, r7, lr}
    1656:	b083      	sub	sp, #12
    1658:	0004      	movs	r4, r0
    165a:	000f      	movs	r7, r1
    165c:	0016      	movs	r6, r2
    165e:	001d      	movs	r5, r3
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    1660:	2800      	cmp	r0, #0
    1662:	d101      	bne.n	1668 <xQueueGenericSendFromISR+0x14>
    1664:	b672      	cpsid	i
    1666:	e7fe      	b.n	1666 <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1668:	2900      	cmp	r1, #0
    166a:	d104      	bne.n	1676 <xQueueGenericSendFromISR+0x22>
    166c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    166e:	2b00      	cmp	r3, #0
    1670:	d001      	beq.n	1676 <xQueueGenericSendFromISR+0x22>
    1672:	b672      	cpsid	i
    1674:	e7fe      	b.n	1674 <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1676:	2d02      	cmp	r5, #2
    1678:	d138      	bne.n	16ec <xQueueGenericSendFromISR+0x98>
    167a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    167c:	2b01      	cmp	r3, #1
    167e:	d030      	beq.n	16e2 <xQueueGenericSendFromISR+0x8e>
    1680:	b672      	cpsid	i
    1682:	e7fe      	b.n	1682 <xQueueGenericSendFromISR+0x2e>
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1684:	002a      	movs	r2, r5
    1686:	0039      	movs	r1, r7
    1688:	0020      	movs	r0, r4
    168a:	4b1f      	ldr	r3, [pc, #124]	; (1708 <xQueueGenericSendFromISR+0xb4>)
    168c:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    168e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1690:	3301      	adds	r3, #1
    1692:	d11d      	bne.n	16d0 <xQueueGenericSendFromISR+0x7c>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    1694:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1696:	2b00      	cmp	r3, #0
    1698:	d00b      	beq.n	16b2 <xQueueGenericSendFromISR+0x5e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    169a:	0029      	movs	r1, r5
    169c:	0020      	movs	r0, r4
    169e:	4b1b      	ldr	r3, [pc, #108]	; (170c <xQueueGenericSendFromISR+0xb8>)
    16a0:	4798      	blx	r3
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    16a2:	2501      	movs	r5, #1
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    16a4:	2801      	cmp	r0, #1
    16a6:	d129      	bne.n	16fc <xQueueGenericSendFromISR+0xa8>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    16a8:	2e00      	cmp	r6, #0
    16aa:	d016      	beq.n	16da <xQueueGenericSendFromISR+0x86>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    16ac:	2301      	movs	r3, #1
    16ae:	6033      	str	r3, [r6, #0]
    16b0:	e024      	b.n	16fc <xQueueGenericSendFromISR+0xa8>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    16b2:	2501      	movs	r5, #1
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    16b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    16b6:	2b00      	cmp	r3, #0
    16b8:	d020      	beq.n	16fc <xQueueGenericSendFromISR+0xa8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    16ba:	0020      	movs	r0, r4
    16bc:	3024      	adds	r0, #36	; 0x24
    16be:	4b14      	ldr	r3, [pc, #80]	; (1710 <xQueueGenericSendFromISR+0xbc>)
    16c0:	4798      	blx	r3
    16c2:	2800      	cmp	r0, #0
    16c4:	d01a      	beq.n	16fc <xQueueGenericSendFromISR+0xa8>
							{
								/* The task waiting has a higher priority so record that a
								context	switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    16c6:	2e00      	cmp	r6, #0
    16c8:	d009      	beq.n	16de <xQueueGenericSendFromISR+0x8a>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    16ca:	2301      	movs	r3, #1
    16cc:	6033      	str	r3, [r6, #0]
    16ce:	e015      	b.n	16fc <xQueueGenericSendFromISR+0xa8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    16d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    16d2:	3301      	adds	r3, #1
    16d4:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
    16d6:	2501      	movs	r5, #1
    16d8:	e010      	b.n	16fc <xQueueGenericSendFromISR+0xa8>
    16da:	2501      	movs	r5, #1
    16dc:	e00e      	b.n	16fc <xQueueGenericSendFromISR+0xa8>
    16de:	2501      	movs	r5, #1
    16e0:	e00c      	b.n	16fc <xQueueGenericSendFromISR+0xa8>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    16e2:	4b0c      	ldr	r3, [pc, #48]	; (1714 <xQueueGenericSendFromISR+0xc0>)
    16e4:	4798      	blx	r3
    16e6:	9001      	str	r0, [sp, #4]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    16e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    16ea:	e7cb      	b.n	1684 <xQueueGenericSendFromISR+0x30>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    16ec:	4b09      	ldr	r3, [pc, #36]	; (1714 <xQueueGenericSendFromISR+0xc0>)
    16ee:	4798      	blx	r3
    16f0:	9001      	str	r0, [sp, #4]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    16f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    16f4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    16f6:	429a      	cmp	r2, r3
    16f8:	d8c4      	bhi.n	1684 <xQueueGenericSendFromISR+0x30>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    16fa:	2500      	movs	r5, #0
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    16fc:	9801      	ldr	r0, [sp, #4]
    16fe:	4b06      	ldr	r3, [pc, #24]	; (1718 <xQueueGenericSendFromISR+0xc4>)
    1700:	4798      	blx	r3

	return xReturn;
}
    1702:	0028      	movs	r0, r5
    1704:	b003      	add	sp, #12
    1706:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1708:	00001271 	.word	0x00001271
    170c:	000012ed 	.word	0x000012ed
    1710:	0000203d 	.word	0x0000203d
    1714:	00001085 	.word	0x00001085
    1718:	00001091 	.word	0x00001091

0000171c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    171c:	b5f0      	push	{r4, r5, r6, r7, lr}
    171e:	464f      	mov	r7, r9
    1720:	4646      	mov	r6, r8
    1722:	b4c0      	push	{r6, r7}
    1724:	b085      	sub	sp, #20
    1726:	0004      	movs	r4, r0
    1728:	000e      	movs	r6, r1
    172a:	9201      	str	r2, [sp, #4]
    172c:	001f      	movs	r7, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    172e:	2800      	cmp	r0, #0
    1730:	d101      	bne.n	1736 <xQueueGenericReceive+0x1a>
    1732:	b672      	cpsid	i
    1734:	e7fe      	b.n	1734 <xQueueGenericReceive+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1736:	2900      	cmp	r1, #0
    1738:	d104      	bne.n	1744 <xQueueGenericReceive+0x28>
    173a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    173c:	2b00      	cmp	r3, #0
    173e:	d001      	beq.n	1744 <xQueueGenericReceive+0x28>
    1740:	b672      	cpsid	i
    1742:	e7fe      	b.n	1742 <xQueueGenericReceive+0x26>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1744:	4b4a      	ldr	r3, [pc, #296]	; (1870 <xQueueGenericReceive+0x154>)
    1746:	4798      	blx	r3
    1748:	2800      	cmp	r0, #0
    174a:	d104      	bne.n	1756 <xQueueGenericReceive+0x3a>
    174c:	9b01      	ldr	r3, [sp, #4]
    174e:	2b00      	cmp	r3, #0
    1750:	d003      	beq.n	175a <xQueueGenericReceive+0x3e>
    1752:	b672      	cpsid	i
    1754:	e7fe      	b.n	1754 <xQueueGenericReceive+0x38>
    1756:	2500      	movs	r5, #0
    1758:	e000      	b.n	175c <xQueueGenericReceive+0x40>
    175a:	2500      	movs	r5, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    175c:	4b45      	ldr	r3, [pc, #276]	; (1874 <xQueueGenericReceive+0x158>)
    175e:	4698      	mov	r8, r3
    1760:	47c0      	blx	r8
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1762:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1764:	2b00      	cmp	r3, #0
    1766:	d02b      	beq.n	17c0 <xQueueGenericReceive+0xa4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1768:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    176a:	0031      	movs	r1, r6
    176c:	0020      	movs	r0, r4
    176e:	4b42      	ldr	r3, [pc, #264]	; (1878 <xQueueGenericReceive+0x15c>)
    1770:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    1772:	2f00      	cmp	r7, #0
    1774:	d114      	bne.n	17a0 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    1776:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1778:	3b01      	subs	r3, #1
    177a:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    177c:	6823      	ldr	r3, [r4, #0]
    177e:	2b00      	cmp	r3, #0
    1780:	d102      	bne.n	1788 <xQueueGenericReceive+0x6c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1782:	4b3e      	ldr	r3, [pc, #248]	; (187c <xQueueGenericReceive+0x160>)
    1784:	4798      	blx	r3
    1786:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1788:	6923      	ldr	r3, [r4, #16]
    178a:	2b00      	cmp	r3, #0
    178c:	d014      	beq.n	17b8 <xQueueGenericReceive+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    178e:	0020      	movs	r0, r4
    1790:	3010      	adds	r0, #16
    1792:	4b3b      	ldr	r3, [pc, #236]	; (1880 <xQueueGenericReceive+0x164>)
    1794:	4798      	blx	r3
    1796:	2801      	cmp	r0, #1
    1798:	d10e      	bne.n	17b8 <xQueueGenericReceive+0x9c>
						{
							queueYIELD_IF_USING_PREEMPTION();
    179a:	4b3a      	ldr	r3, [pc, #232]	; (1884 <xQueueGenericReceive+0x168>)
    179c:	4798      	blx	r3
    179e:	e00b      	b.n	17b8 <xQueueGenericReceive+0x9c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    17a0:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    17a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    17a4:	2b00      	cmp	r3, #0
    17a6:	d007      	beq.n	17b8 <xQueueGenericReceive+0x9c>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    17a8:	0020      	movs	r0, r4
    17aa:	3024      	adds	r0, #36	; 0x24
    17ac:	4b34      	ldr	r3, [pc, #208]	; (1880 <xQueueGenericReceive+0x164>)
    17ae:	4798      	blx	r3
    17b0:	2800      	cmp	r0, #0
    17b2:	d001      	beq.n	17b8 <xQueueGenericReceive+0x9c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    17b4:	4b33      	ldr	r3, [pc, #204]	; (1884 <xQueueGenericReceive+0x168>)
    17b6:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    17b8:	4b33      	ldr	r3, [pc, #204]	; (1888 <xQueueGenericReceive+0x16c>)
    17ba:	4798      	blx	r3
				return pdPASS;
    17bc:	2001      	movs	r0, #1
    17be:	e052      	b.n	1866 <xQueueGenericReceive+0x14a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    17c0:	9b01      	ldr	r3, [sp, #4]
    17c2:	2b00      	cmp	r3, #0
    17c4:	d103      	bne.n	17ce <xQueueGenericReceive+0xb2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    17c6:	4b30      	ldr	r3, [pc, #192]	; (1888 <xQueueGenericReceive+0x16c>)
    17c8:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    17ca:	2000      	movs	r0, #0
    17cc:	e04b      	b.n	1866 <xQueueGenericReceive+0x14a>
				}
				else if( xEntryTimeSet == pdFALSE )
    17ce:	2d00      	cmp	r5, #0
    17d0:	d103      	bne.n	17da <xQueueGenericReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    17d2:	a802      	add	r0, sp, #8
    17d4:	4b2d      	ldr	r3, [pc, #180]	; (188c <xQueueGenericReceive+0x170>)
    17d6:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    17d8:	3501      	adds	r5, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    17da:	4b2b      	ldr	r3, [pc, #172]	; (1888 <xQueueGenericReceive+0x16c>)
    17dc:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    17de:	4b2c      	ldr	r3, [pc, #176]	; (1890 <xQueueGenericReceive+0x174>)
    17e0:	4798      	blx	r3
		prvLockQueue( pxQueue );
    17e2:	4b24      	ldr	r3, [pc, #144]	; (1874 <xQueueGenericReceive+0x158>)
    17e4:	4798      	blx	r3
    17e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    17e8:	3301      	adds	r3, #1
    17ea:	d101      	bne.n	17f0 <xQueueGenericReceive+0xd4>
    17ec:	2300      	movs	r3, #0
    17ee:	6463      	str	r3, [r4, #68]	; 0x44
    17f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    17f2:	3301      	adds	r3, #1
    17f4:	d101      	bne.n	17fa <xQueueGenericReceive+0xde>
    17f6:	2300      	movs	r3, #0
    17f8:	64a3      	str	r3, [r4, #72]	; 0x48
    17fa:	4b23      	ldr	r3, [pc, #140]	; (1888 <xQueueGenericReceive+0x16c>)
    17fc:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    17fe:	a901      	add	r1, sp, #4
    1800:	a802      	add	r0, sp, #8
    1802:	4b24      	ldr	r3, [pc, #144]	; (1894 <xQueueGenericReceive+0x178>)
    1804:	4798      	blx	r3
    1806:	2800      	cmp	r0, #0
    1808:	d127      	bne.n	185a <xQueueGenericReceive+0x13e>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    180a:	4b1a      	ldr	r3, [pc, #104]	; (1874 <xQueueGenericReceive+0x158>)
    180c:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    180e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1810:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1812:	4b1d      	ldr	r3, [pc, #116]	; (1888 <xQueueGenericReceive+0x16c>)
    1814:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1816:	464b      	mov	r3, r9
    1818:	2b00      	cmp	r3, #0
    181a:	d118      	bne.n	184e <xQueueGenericReceive+0x132>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    181c:	6823      	ldr	r3, [r4, #0]
    181e:	2b00      	cmp	r3, #0
    1820:	d106      	bne.n	1830 <xQueueGenericReceive+0x114>
					{
						taskENTER_CRITICAL();
    1822:	4b14      	ldr	r3, [pc, #80]	; (1874 <xQueueGenericReceive+0x158>)
    1824:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1826:	6860      	ldr	r0, [r4, #4]
    1828:	4b1b      	ldr	r3, [pc, #108]	; (1898 <xQueueGenericReceive+0x17c>)
    182a:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    182c:	4b16      	ldr	r3, [pc, #88]	; (1888 <xQueueGenericReceive+0x16c>)
    182e:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1830:	0020      	movs	r0, r4
    1832:	3024      	adds	r0, #36	; 0x24
    1834:	9901      	ldr	r1, [sp, #4]
    1836:	4b19      	ldr	r3, [pc, #100]	; (189c <xQueueGenericReceive+0x180>)
    1838:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    183a:	0020      	movs	r0, r4
    183c:	4b18      	ldr	r3, [pc, #96]	; (18a0 <xQueueGenericReceive+0x184>)
    183e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    1840:	4b18      	ldr	r3, [pc, #96]	; (18a4 <xQueueGenericReceive+0x188>)
    1842:	4798      	blx	r3
    1844:	2800      	cmp	r0, #0
    1846:	d18b      	bne.n	1760 <xQueueGenericReceive+0x44>
				{
					portYIELD_WITHIN_API();
    1848:	4b0e      	ldr	r3, [pc, #56]	; (1884 <xQueueGenericReceive+0x168>)
    184a:	4798      	blx	r3
    184c:	e788      	b.n	1760 <xQueueGenericReceive+0x44>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    184e:	0020      	movs	r0, r4
    1850:	4b13      	ldr	r3, [pc, #76]	; (18a0 <xQueueGenericReceive+0x184>)
    1852:	4798      	blx	r3
				( void ) xTaskResumeAll();
    1854:	4b13      	ldr	r3, [pc, #76]	; (18a4 <xQueueGenericReceive+0x188>)
    1856:	4798      	blx	r3
    1858:	e782      	b.n	1760 <xQueueGenericReceive+0x44>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    185a:	0020      	movs	r0, r4
    185c:	4b10      	ldr	r3, [pc, #64]	; (18a0 <xQueueGenericReceive+0x184>)
    185e:	4798      	blx	r3
			( void ) xTaskResumeAll();
    1860:	4b10      	ldr	r3, [pc, #64]	; (18a4 <xQueueGenericReceive+0x188>)
    1862:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1864:	2000      	movs	r0, #0
		}
	}
}
    1866:	b005      	add	sp, #20
    1868:	bc0c      	pop	{r2, r3}
    186a:	4690      	mov	r8, r2
    186c:	4699      	mov	r9, r3
    186e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1870:	0000216d 	.word	0x0000216d
    1874:	0000104d 	.word	0x0000104d
    1878:	0000133d 	.word	0x0000133d
    187c:	00002161 	.word	0x00002161
    1880:	0000203d 	.word	0x0000203d
    1884:	00001035 	.word	0x00001035
    1888:	00001065 	.word	0x00001065
    188c:	000020c5 	.word	0x000020c5
    1890:	00001bc5 	.word	0x00001bc5
    1894:	000020e5 	.word	0x000020e5
    1898:	0000218d 	.word	0x0000218d
    189c:	00001fa5 	.word	0x00001fa5
    18a0:	00001365 	.word	0x00001365
    18a4:	00001d19 	.word	0x00001d19

000018a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    18a8:	b570      	push	{r4, r5, r6, lr}
    18aa:	0004      	movs	r4, r0
    18ac:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    18ae:	4b0d      	ldr	r3, [pc, #52]	; (18e4 <vQueueWaitForMessageRestricted+0x3c>)
    18b0:	4798      	blx	r3
    18b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    18b4:	3301      	adds	r3, #1
    18b6:	d101      	bne.n	18bc <vQueueWaitForMessageRestricted+0x14>
    18b8:	2300      	movs	r3, #0
    18ba:	6463      	str	r3, [r4, #68]	; 0x44
    18bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    18be:	3301      	adds	r3, #1
    18c0:	d101      	bne.n	18c6 <vQueueWaitForMessageRestricted+0x1e>
    18c2:	2300      	movs	r3, #0
    18c4:	64a3      	str	r3, [r4, #72]	; 0x48
    18c6:	4b08      	ldr	r3, [pc, #32]	; (18e8 <vQueueWaitForMessageRestricted+0x40>)
    18c8:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    18ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    18cc:	2b00      	cmp	r3, #0
    18ce:	d104      	bne.n	18da <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    18d0:	0020      	movs	r0, r4
    18d2:	3024      	adds	r0, #36	; 0x24
    18d4:	0029      	movs	r1, r5
    18d6:	4b05      	ldr	r3, [pc, #20]	; (18ec <vQueueWaitForMessageRestricted+0x44>)
    18d8:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    18da:	0020      	movs	r0, r4
    18dc:	4b04      	ldr	r3, [pc, #16]	; (18f0 <vQueueWaitForMessageRestricted+0x48>)
    18de:	4798      	blx	r3
	}
    18e0:	bd70      	pop	{r4, r5, r6, pc}
    18e2:	46c0      	nop			; (mov r8, r8)
    18e4:	0000104d 	.word	0x0000104d
    18e8:	00001065 	.word	0x00001065
    18ec:	00001ffd 	.word	0x00001ffd
    18f0:	00001365 	.word	0x00001365

000018f4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    18f4:	4b08      	ldr	r3, [pc, #32]	; (1918 <prvResetNextTaskUnblockTime+0x24>)
    18f6:	681b      	ldr	r3, [r3, #0]
    18f8:	681b      	ldr	r3, [r3, #0]
    18fa:	2b00      	cmp	r3, #0
    18fc:	d104      	bne.n	1908 <prvResetNextTaskUnblockTime+0x14>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    18fe:	2201      	movs	r2, #1
    1900:	4252      	negs	r2, r2
    1902:	4b06      	ldr	r3, [pc, #24]	; (191c <prvResetNextTaskUnblockTime+0x28>)
    1904:	601a      	str	r2, [r3, #0]
    1906:	e006      	b.n	1916 <prvResetNextTaskUnblockTime+0x22>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1908:	4b03      	ldr	r3, [pc, #12]	; (1918 <prvResetNextTaskUnblockTime+0x24>)
    190a:	681b      	ldr	r3, [r3, #0]
    190c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    190e:	68db      	ldr	r3, [r3, #12]
    1910:	685a      	ldr	r2, [r3, #4]
    1912:	4b02      	ldr	r3, [pc, #8]	; (191c <prvResetNextTaskUnblockTime+0x28>)
    1914:	601a      	str	r2, [r3, #0]
	}
}
    1916:	4770      	bx	lr
    1918:	20003b78 	.word	0x20003b78
    191c:	20000028 	.word	0x20000028

00001920 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    1920:	b510      	push	{r4, lr}
    1922:	1e04      	subs	r4, r0, #0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    1924:	4b0e      	ldr	r3, [pc, #56]	; (1960 <prvAddCurrentTaskToDelayedList+0x40>)
    1926:	681b      	ldr	r3, [r3, #0]
    1928:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
    192a:	4b0e      	ldr	r3, [pc, #56]	; (1964 <prvAddCurrentTaskToDelayedList+0x44>)
    192c:	681b      	ldr	r3, [r3, #0]
    192e:	429c      	cmp	r4, r3
    1930:	d207      	bcs.n	1942 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1932:	4b0d      	ldr	r3, [pc, #52]	; (1968 <prvAddCurrentTaskToDelayedList+0x48>)
    1934:	6818      	ldr	r0, [r3, #0]
    1936:	4b0a      	ldr	r3, [pc, #40]	; (1960 <prvAddCurrentTaskToDelayedList+0x40>)
    1938:	6819      	ldr	r1, [r3, #0]
    193a:	3104      	adds	r1, #4
    193c:	4b0b      	ldr	r3, [pc, #44]	; (196c <prvAddCurrentTaskToDelayedList+0x4c>)
    193e:	4798      	blx	r3
    1940:	e00c      	b.n	195c <prvAddCurrentTaskToDelayedList+0x3c>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1942:	4b0b      	ldr	r3, [pc, #44]	; (1970 <prvAddCurrentTaskToDelayedList+0x50>)
    1944:	6818      	ldr	r0, [r3, #0]
    1946:	4b06      	ldr	r3, [pc, #24]	; (1960 <prvAddCurrentTaskToDelayedList+0x40>)
    1948:	6819      	ldr	r1, [r3, #0]
    194a:	3104      	adds	r1, #4
    194c:	4b07      	ldr	r3, [pc, #28]	; (196c <prvAddCurrentTaskToDelayedList+0x4c>)
    194e:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    1950:	4b08      	ldr	r3, [pc, #32]	; (1974 <prvAddCurrentTaskToDelayedList+0x54>)
    1952:	681b      	ldr	r3, [r3, #0]
    1954:	429c      	cmp	r4, r3
    1956:	d201      	bcs.n	195c <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
    1958:	4b06      	ldr	r3, [pc, #24]	; (1974 <prvAddCurrentTaskToDelayedList+0x54>)
    195a:	601c      	str	r4, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    195c:	bd10      	pop	{r4, pc}
    195e:	46c0      	nop			; (mov r8, r8)
    1960:	20003c28 	.word	0x20003c28
    1964:	20003c44 	.word	0x20003c44
    1968:	20003c48 	.word	0x20003c48
    196c:	0000121d 	.word	0x0000121d
    1970:	20003b78 	.word	0x20003b78
    1974:	20000028 	.word	0x20000028

00001978 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    1978:	b5f0      	push	{r4, r5, r6, r7, lr}
    197a:	464f      	mov	r7, r9
    197c:	4646      	mov	r6, r8
    197e:	b4c0      	push	{r6, r7}
    1980:	b085      	sub	sp, #20
    1982:	9002      	str	r0, [sp, #8]
    1984:	000f      	movs	r7, r1
    1986:	0016      	movs	r6, r2
    1988:	9303      	str	r3, [sp, #12]
    198a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
    198c:	2800      	cmp	r0, #0
    198e:	d101      	bne.n	1994 <xTaskGenericCreate+0x1c>
    1990:	b672      	cpsid	i
    1992:	e7fe      	b.n	1992 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    1994:	2c04      	cmp	r4, #4
    1996:	d901      	bls.n	199c <xTaskGenericCreate+0x24>
    1998:	b672      	cpsid	i
    199a:	e7fe      	b.n	199a <xTaskGenericCreate+0x22>
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    199c:	2040      	movs	r0, #64	; 0x40
    199e:	4b5a      	ldr	r3, [pc, #360]	; (1b08 <xTaskGenericCreate+0x190>)
    19a0:	4798      	blx	r3
    19a2:	1e05      	subs	r5, r0, #0

	if( pxNewTCB != NULL )
    19a4:	d100      	bne.n	19a8 <xTaskGenericCreate+0x30>
    19a6:	e0a8      	b.n	1afa <xTaskGenericCreate+0x182>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    19a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    19aa:	2b00      	cmp	r3, #0
    19ac:	d000      	beq.n	19b0 <xTaskGenericCreate+0x38>
    19ae:	e0a1      	b.n	1af4 <xTaskGenericCreate+0x17c>
    19b0:	00b0      	lsls	r0, r6, #2
    19b2:	4b55      	ldr	r3, [pc, #340]	; (1b08 <xTaskGenericCreate+0x190>)
    19b4:	4798      	blx	r3
    19b6:	6328      	str	r0, [r5, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    19b8:	2800      	cmp	r0, #0
    19ba:	d103      	bne.n	19c4 <xTaskGenericCreate+0x4c>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    19bc:	0028      	movs	r0, r5
    19be:	4b53      	ldr	r3, [pc, #332]	; (1b0c <xTaskGenericCreate+0x194>)
    19c0:	4798      	blx	r3
    19c2:	e09a      	b.n	1afa <xTaskGenericCreate+0x182>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    19c4:	4b52      	ldr	r3, [pc, #328]	; (1b10 <xTaskGenericCreate+0x198>)
    19c6:	18f3      	adds	r3, r6, r3
    19c8:	009b      	lsls	r3, r3, #2
    19ca:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    19cc:	4694      	mov	ip, r2
    19ce:	4463      	add	r3, ip
    19d0:	2207      	movs	r2, #7
    19d2:	4393      	bics	r3, r2
    19d4:	4698      	mov	r8, r3
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    19d6:	783a      	ldrb	r2, [r7, #0]
    19d8:	2334      	movs	r3, #52	; 0x34
    19da:	54ea      	strb	r2, [r5, r3]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    19dc:	783b      	ldrb	r3, [r7, #0]
    19de:	2b00      	cmp	r3, #0
    19e0:	d00d      	beq.n	19fe <xTaskGenericCreate+0x86>
    19e2:	1c7a      	adds	r2, r7, #1
    19e4:	002b      	movs	r3, r5
    19e6:	3335      	adds	r3, #53	; 0x35
    19e8:	0029      	movs	r1, r5
    19ea:	313c      	adds	r1, #60	; 0x3c
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    19ec:	7810      	ldrb	r0, [r2, #0]
    19ee:	7018      	strb	r0, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    19f0:	7810      	ldrb	r0, [r2, #0]
    19f2:	2800      	cmp	r0, #0
    19f4:	d003      	beq.n	19fe <xTaskGenericCreate+0x86>
    19f6:	3201      	adds	r2, #1
    19f8:	3301      	adds	r3, #1
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    19fa:	4299      	cmp	r1, r3
    19fc:	d1f6      	bne.n	19ec <xTaskGenericCreate+0x74>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    19fe:	2200      	movs	r2, #0
    1a00:	233b      	movs	r3, #59	; 0x3b
    1a02:	54ea      	strb	r2, [r5, r3]
    1a04:	1e27      	subs	r7, r4, #0
    1a06:	2f04      	cmp	r7, #4
    1a08:	d900      	bls.n	1a0c <xTaskGenericCreate+0x94>
    1a0a:	2704      	movs	r7, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    1a0c:	62ef      	str	r7, [r5, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    1a0e:	63ef      	str	r7, [r5, #60]	; 0x3c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    1a10:	1d2b      	adds	r3, r5, #4
    1a12:	9301      	str	r3, [sp, #4]
    1a14:	0018      	movs	r0, r3
    1a16:	4e3f      	ldr	r6, [pc, #252]	; (1b14 <xTaskGenericCreate+0x19c>)
    1a18:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    1a1a:	0028      	movs	r0, r5
    1a1c:	3018      	adds	r0, #24
    1a1e:	47b0      	blx	r6

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    1a20:	612d      	str	r5, [r5, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1a22:	2305      	movs	r3, #5
    1a24:	1bdb      	subs	r3, r3, r7
    1a26:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    1a28:	626d      	str	r5, [r5, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1a2a:	9a03      	ldr	r2, [sp, #12]
    1a2c:	9902      	ldr	r1, [sp, #8]
    1a2e:	4640      	mov	r0, r8
    1a30:	4b39      	ldr	r3, [pc, #228]	; (1b18 <xTaskGenericCreate+0x1a0>)
    1a32:	4798      	blx	r3
    1a34:	6028      	str	r0, [r5, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    1a36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1a38:	2b00      	cmp	r3, #0
    1a3a:	d000      	beq.n	1a3e <xTaskGenericCreate+0xc6>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    1a3c:	601d      	str	r5, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    1a3e:	4b37      	ldr	r3, [pc, #220]	; (1b1c <xTaskGenericCreate+0x1a4>)
    1a40:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
    1a42:	4a37      	ldr	r2, [pc, #220]	; (1b20 <xTaskGenericCreate+0x1a8>)
    1a44:	6813      	ldr	r3, [r2, #0]
    1a46:	3301      	adds	r3, #1
    1a48:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
    1a4a:	4b36      	ldr	r3, [pc, #216]	; (1b24 <xTaskGenericCreate+0x1ac>)
    1a4c:	681b      	ldr	r3, [r3, #0]
    1a4e:	2b00      	cmp	r3, #0
    1a50:	d122      	bne.n	1a98 <xTaskGenericCreate+0x120>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    1a52:	4b34      	ldr	r3, [pc, #208]	; (1b24 <xTaskGenericCreate+0x1ac>)
    1a54:	601d      	str	r5, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    1a56:	6813      	ldr	r3, [r2, #0]
    1a58:	2b01      	cmp	r3, #1
    1a5a:	d128      	bne.n	1aae <xTaskGenericCreate+0x136>
    1a5c:	4e32      	ldr	r6, [pc, #200]	; (1b28 <xTaskGenericCreate+0x1b0>)
    1a5e:	3363      	adds	r3, #99	; 0x63
    1a60:	4699      	mov	r9, r3
    1a62:	44b1      	add	r9, r6
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    1a64:	4f31      	ldr	r7, [pc, #196]	; (1b2c <xTaskGenericCreate+0x1b4>)
    1a66:	0030      	movs	r0, r6
    1a68:	47b8      	blx	r7
    1a6a:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    1a6c:	454e      	cmp	r6, r9
    1a6e:	d1fa      	bne.n	1a66 <xTaskGenericCreate+0xee>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    1a70:	4b2f      	ldr	r3, [pc, #188]	; (1b30 <xTaskGenericCreate+0x1b8>)
    1a72:	4699      	mov	r9, r3
    1a74:	0018      	movs	r0, r3
    1a76:	4e2d      	ldr	r6, [pc, #180]	; (1b2c <xTaskGenericCreate+0x1b4>)
    1a78:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    1a7a:	4f2e      	ldr	r7, [pc, #184]	; (1b34 <xTaskGenericCreate+0x1bc>)
    1a7c:	0038      	movs	r0, r7
    1a7e:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    1a80:	482d      	ldr	r0, [pc, #180]	; (1b38 <xTaskGenericCreate+0x1c0>)
    1a82:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    1a84:	482d      	ldr	r0, [pc, #180]	; (1b3c <xTaskGenericCreate+0x1c4>)
    1a86:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    1a88:	482d      	ldr	r0, [pc, #180]	; (1b40 <xTaskGenericCreate+0x1c8>)
    1a8a:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    1a8c:	4b2d      	ldr	r3, [pc, #180]	; (1b44 <xTaskGenericCreate+0x1cc>)
    1a8e:	464a      	mov	r2, r9
    1a90:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1a92:	4b2d      	ldr	r3, [pc, #180]	; (1b48 <xTaskGenericCreate+0x1d0>)
    1a94:	601f      	str	r7, [r3, #0]
    1a96:	e00a      	b.n	1aae <xTaskGenericCreate+0x136>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    1a98:	4b2c      	ldr	r3, [pc, #176]	; (1b4c <xTaskGenericCreate+0x1d4>)
    1a9a:	681b      	ldr	r3, [r3, #0]
    1a9c:	2b00      	cmp	r3, #0
    1a9e:	d106      	bne.n	1aae <xTaskGenericCreate+0x136>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    1aa0:	4b20      	ldr	r3, [pc, #128]	; (1b24 <xTaskGenericCreate+0x1ac>)
    1aa2:	681b      	ldr	r3, [r3, #0]
    1aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1aa6:	429c      	cmp	r4, r3
    1aa8:	d301      	bcc.n	1aae <xTaskGenericCreate+0x136>
					{
						pxCurrentTCB = pxNewTCB;
    1aaa:	4b1e      	ldr	r3, [pc, #120]	; (1b24 <xTaskGenericCreate+0x1ac>)
    1aac:	601d      	str	r5, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    1aae:	4a28      	ldr	r2, [pc, #160]	; (1b50 <xTaskGenericCreate+0x1d8>)
    1ab0:	6813      	ldr	r3, [r2, #0]
    1ab2:	3301      	adds	r3, #1
    1ab4:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    1ab6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    1ab8:	4a26      	ldr	r2, [pc, #152]	; (1b54 <xTaskGenericCreate+0x1dc>)
    1aba:	6812      	ldr	r2, [r2, #0]
    1abc:	4293      	cmp	r3, r2
    1abe:	d901      	bls.n	1ac4 <xTaskGenericCreate+0x14c>
    1ac0:	4a24      	ldr	r2, [pc, #144]	; (1b54 <xTaskGenericCreate+0x1dc>)
    1ac2:	6013      	str	r3, [r2, #0]
    1ac4:	0098      	lsls	r0, r3, #2
    1ac6:	18c3      	adds	r3, r0, r3
    1ac8:	009b      	lsls	r3, r3, #2
    1aca:	4817      	ldr	r0, [pc, #92]	; (1b28 <xTaskGenericCreate+0x1b0>)
    1acc:	18c0      	adds	r0, r0, r3
    1ace:	9901      	ldr	r1, [sp, #4]
    1ad0:	4b21      	ldr	r3, [pc, #132]	; (1b58 <xTaskGenericCreate+0x1e0>)
    1ad2:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    1ad4:	4b21      	ldr	r3, [pc, #132]	; (1b5c <xTaskGenericCreate+0x1e4>)
    1ad6:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    1ad8:	4b1c      	ldr	r3, [pc, #112]	; (1b4c <xTaskGenericCreate+0x1d4>)
    1ada:	681b      	ldr	r3, [r3, #0]
    1adc:	2001      	movs	r0, #1
    1ade:	2b00      	cmp	r3, #0
    1ae0:	d00d      	beq.n	1afe <xTaskGenericCreate+0x186>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    1ae2:	4b10      	ldr	r3, [pc, #64]	; (1b24 <xTaskGenericCreate+0x1ac>)
    1ae4:	681b      	ldr	r3, [r3, #0]
    1ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1ae8:	429c      	cmp	r4, r3
    1aea:	d908      	bls.n	1afe <xTaskGenericCreate+0x186>
			{
				taskYIELD_IF_USING_PREEMPTION();
    1aec:	4b1c      	ldr	r3, [pc, #112]	; (1b60 <xTaskGenericCreate+0x1e8>)
    1aee:	4798      	blx	r3
    1af0:	2001      	movs	r0, #1
    1af2:	e004      	b.n	1afe <xTaskGenericCreate+0x186>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1af4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1af6:	6303      	str	r3, [r0, #48]	; 0x30
    1af8:	e764      	b.n	19c4 <xTaskGenericCreate+0x4c>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1afa:	2001      	movs	r0, #1
    1afc:	4240      	negs	r0, r0
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
    1afe:	b005      	add	sp, #20
    1b00:	bc0c      	pop	{r2, r3}
    1b02:	4690      	mov	r8, r2
    1b04:	4699      	mov	r9, r3
    1b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b08:	00001171 	.word	0x00001171
    1b0c:	000011d9 	.word	0x000011d9
    1b10:	3fffffff 	.word	0x3fffffff
    1b14:	000011fd 	.word	0x000011fd
    1b18:	00001011 	.word	0x00001011
    1b1c:	0000104d 	.word	0x0000104d
    1b20:	20003c50 	.word	0x20003c50
    1b24:	20003c28 	.word	0x20003c28
    1b28:	20003bb0 	.word	0x20003bb0
    1b2c:	000011e5 	.word	0x000011e5
    1b30:	20003b84 	.word	0x20003b84
    1b34:	20003b98 	.word	0x20003b98
    1b38:	20003c2c 	.word	0x20003c2c
    1b3c:	20003c14 	.word	0x20003c14
    1b40:	20003c54 	.word	0x20003c54
    1b44:	20003b78 	.word	0x20003b78
    1b48:	20003c48 	.word	0x20003c48
    1b4c:	20003b7c 	.word	0x20003b7c
    1b50:	20003c4c 	.word	0x20003c4c
    1b54:	20003c68 	.word	0x20003c68
    1b58:	00001205 	.word	0x00001205
    1b5c:	00001065 	.word	0x00001065
    1b60:	00001035 	.word	0x00001035

00001b64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    1b64:	b510      	push	{r4, lr}
    1b66:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    1b68:	2300      	movs	r3, #0
    1b6a:	9303      	str	r3, [sp, #12]
    1b6c:	9302      	str	r3, [sp, #8]
    1b6e:	9301      	str	r3, [sp, #4]
    1b70:	9300      	str	r3, [sp, #0]
    1b72:	2264      	movs	r2, #100	; 0x64
    1b74:	490c      	ldr	r1, [pc, #48]	; (1ba8 <vTaskStartScheduler+0x44>)
    1b76:	480d      	ldr	r0, [pc, #52]	; (1bac <vTaskStartScheduler+0x48>)
    1b78:	4c0d      	ldr	r4, [pc, #52]	; (1bb0 <vTaskStartScheduler+0x4c>)
    1b7a:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    1b7c:	2801      	cmp	r0, #1
    1b7e:	d10d      	bne.n	1b9c <vTaskStartScheduler+0x38>
		{
			xReturn = xTimerCreateTimerTask();
    1b80:	4b0c      	ldr	r3, [pc, #48]	; (1bb4 <vTaskStartScheduler+0x50>)
    1b82:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    1b84:	2801      	cmp	r0, #1
    1b86:	d109      	bne.n	1b9c <vTaskStartScheduler+0x38>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    1b88:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    1b8a:	2201      	movs	r2, #1
    1b8c:	4b0a      	ldr	r3, [pc, #40]	; (1bb8 <vTaskStartScheduler+0x54>)
    1b8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    1b90:	2200      	movs	r2, #0
    1b92:	4b0a      	ldr	r3, [pc, #40]	; (1bbc <vTaskStartScheduler+0x58>)
    1b94:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1b96:	4b0a      	ldr	r3, [pc, #40]	; (1bc0 <vTaskStartScheduler+0x5c>)
    1b98:	4798      	blx	r3
    1b9a:	e003      	b.n	1ba4 <vTaskStartScheduler+0x40>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
    1b9c:	2800      	cmp	r0, #0
    1b9e:	d101      	bne.n	1ba4 <vTaskStartScheduler+0x40>
    1ba0:	b672      	cpsid	i
    1ba2:	e7fe      	b.n	1ba2 <vTaskStartScheduler+0x3e>
	}
}
    1ba4:	b004      	add	sp, #16
    1ba6:	bd10      	pop	{r4, pc}
    1ba8:	00006bd0 	.word	0x00006bd0
    1bac:	00001e6d 	.word	0x00001e6d
    1bb0:	00001979 	.word	0x00001979
    1bb4:	00002311 	.word	0x00002311
    1bb8:	20003b7c 	.word	0x20003b7c
    1bbc:	20003c44 	.word	0x20003c44
    1bc0:	00001131 	.word	0x00001131

00001bc4 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    1bc4:	4a02      	ldr	r2, [pc, #8]	; (1bd0 <vTaskSuspendAll+0xc>)
    1bc6:	6813      	ldr	r3, [r2, #0]
    1bc8:	3301      	adds	r3, #1
    1bca:	6013      	str	r3, [r2, #0]
}
    1bcc:	4770      	bx	lr
    1bce:	46c0      	nop			; (mov r8, r8)
    1bd0:	20003c40 	.word	0x20003c40

00001bd4 <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    1bd4:	b510      	push	{r4, lr}
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    1bd6:	4b04      	ldr	r3, [pc, #16]	; (1be8 <xTaskGetTickCount+0x14>)
    1bd8:	4798      	blx	r3
	{
		xTicks = xTickCount;
    1bda:	4b04      	ldr	r3, [pc, #16]	; (1bec <xTaskGetTickCount+0x18>)
    1bdc:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
    1bde:	4b04      	ldr	r3, [pc, #16]	; (1bf0 <xTaskGetTickCount+0x1c>)
    1be0:	4798      	blx	r3

	return xTicks;
}
    1be2:	0020      	movs	r0, r4
    1be4:	bd10      	pop	{r4, pc}
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	0000104d 	.word	0x0000104d
    1bec:	20003c44 	.word	0x20003c44
    1bf0:	00001065 	.word	0x00001065

00001bf4 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    1bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bf6:	b083      	sub	sp, #12

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1bf8:	4b39      	ldr	r3, [pc, #228]	; (1ce0 <xTaskIncrementTick+0xec>)
    1bfa:	681b      	ldr	r3, [r3, #0]
    1bfc:	2b00      	cmp	r3, #0
    1bfe:	d162      	bne.n	1cc6 <xTaskIncrementTick+0xd2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    1c00:	4b38      	ldr	r3, [pc, #224]	; (1ce4 <xTaskIncrementTick+0xf0>)
    1c02:	681a      	ldr	r2, [r3, #0]
    1c04:	3201      	adds	r2, #1
    1c06:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    1c08:	681c      	ldr	r4, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
    1c0a:	2c00      	cmp	r4, #0
    1c0c:	d112      	bne.n	1c34 <xTaskIncrementTick+0x40>
			{
				taskSWITCH_DELAYED_LISTS();
    1c0e:	4b36      	ldr	r3, [pc, #216]	; (1ce8 <xTaskIncrementTick+0xf4>)
    1c10:	681b      	ldr	r3, [r3, #0]
    1c12:	681b      	ldr	r3, [r3, #0]
    1c14:	2b00      	cmp	r3, #0
    1c16:	d001      	beq.n	1c1c <xTaskIncrementTick+0x28>
    1c18:	b672      	cpsid	i
    1c1a:	e7fe      	b.n	1c1a <xTaskIncrementTick+0x26>
    1c1c:	4a32      	ldr	r2, [pc, #200]	; (1ce8 <xTaskIncrementTick+0xf4>)
    1c1e:	6811      	ldr	r1, [r2, #0]
    1c20:	4b32      	ldr	r3, [pc, #200]	; (1cec <xTaskIncrementTick+0xf8>)
    1c22:	6818      	ldr	r0, [r3, #0]
    1c24:	6010      	str	r0, [r2, #0]
    1c26:	6019      	str	r1, [r3, #0]
    1c28:	4a31      	ldr	r2, [pc, #196]	; (1cf0 <xTaskIncrementTick+0xfc>)
    1c2a:	6813      	ldr	r3, [r2, #0]
    1c2c:	3301      	adds	r3, #1
    1c2e:	6013      	str	r3, [r2, #0]
    1c30:	4b30      	ldr	r3, [pc, #192]	; (1cf4 <xTaskIncrementTick+0x100>)
    1c32:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    1c34:	4b30      	ldr	r3, [pc, #192]	; (1cf8 <xTaskIncrementTick+0x104>)
    1c36:	681b      	ldr	r3, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    1c38:	2600      	movs	r6, #0

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    1c3a:	429c      	cmp	r4, r3
    1c3c:	d337      	bcc.n	1cae <xTaskIncrementTick+0xba>
    1c3e:	2600      	movs	r6, #0
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1c40:	4d29      	ldr	r5, [pc, #164]	; (1ce8 <xTaskIncrementTick+0xf4>)
    1c42:	682b      	ldr	r3, [r5, #0]
    1c44:	681b      	ldr	r3, [r3, #0]
    1c46:	2b00      	cmp	r3, #0
    1c48:	d104      	bne.n	1c54 <xTaskIncrementTick+0x60>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    1c4a:	2201      	movs	r2, #1
    1c4c:	4252      	negs	r2, r2
    1c4e:	4b2a      	ldr	r3, [pc, #168]	; (1cf8 <xTaskIncrementTick+0x104>)
    1c50:	601a      	str	r2, [r3, #0]
						break;
    1c52:	e02c      	b.n	1cae <xTaskIncrementTick+0xba>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1c54:	4b24      	ldr	r3, [pc, #144]	; (1ce8 <xTaskIncrementTick+0xf4>)
    1c56:	681b      	ldr	r3, [r3, #0]
    1c58:	68db      	ldr	r3, [r3, #12]
    1c5a:	68df      	ldr	r7, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    1c5c:	687b      	ldr	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
    1c5e:	429c      	cmp	r4, r3
    1c60:	d202      	bcs.n	1c68 <xTaskIncrementTick+0x74>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    1c62:	4a25      	ldr	r2, [pc, #148]	; (1cf8 <xTaskIncrementTick+0x104>)
    1c64:	6013      	str	r3, [r2, #0]
							break;
    1c66:	e022      	b.n	1cae <xTaskIncrementTick+0xba>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    1c68:	1d3b      	adds	r3, r7, #4
    1c6a:	9301      	str	r3, [sp, #4]
    1c6c:	0018      	movs	r0, r3
    1c6e:	4b23      	ldr	r3, [pc, #140]	; (1cfc <xTaskIncrementTick+0x108>)
    1c70:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1c74:	2b00      	cmp	r3, #0
    1c76:	d003      	beq.n	1c80 <xTaskIncrementTick+0x8c>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1c78:	0038      	movs	r0, r7
    1c7a:	3018      	adds	r0, #24
    1c7c:	4b1f      	ldr	r3, [pc, #124]	; (1cfc <xTaskIncrementTick+0x108>)
    1c7e:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    1c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c82:	4a1f      	ldr	r2, [pc, #124]	; (1d00 <xTaskIncrementTick+0x10c>)
    1c84:	6812      	ldr	r2, [r2, #0]
    1c86:	4293      	cmp	r3, r2
    1c88:	d901      	bls.n	1c8e <xTaskIncrementTick+0x9a>
    1c8a:	4a1d      	ldr	r2, [pc, #116]	; (1d00 <xTaskIncrementTick+0x10c>)
    1c8c:	6013      	str	r3, [r2, #0]
    1c8e:	0098      	lsls	r0, r3, #2
    1c90:	18c3      	adds	r3, r0, r3
    1c92:	009b      	lsls	r3, r3, #2
    1c94:	481b      	ldr	r0, [pc, #108]	; (1d04 <xTaskIncrementTick+0x110>)
    1c96:	18c0      	adds	r0, r0, r3
    1c98:	9901      	ldr	r1, [sp, #4]
    1c9a:	4b1b      	ldr	r3, [pc, #108]	; (1d08 <xTaskIncrementTick+0x114>)
    1c9c:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1c9e:	4b1b      	ldr	r3, [pc, #108]	; (1d0c <xTaskIncrementTick+0x118>)
    1ca0:	681b      	ldr	r3, [r3, #0]
    1ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1ca6:	429a      	cmp	r2, r3
    1ca8:	d3cb      	bcc.n	1c42 <xTaskIncrementTick+0x4e>
							{
								xSwitchRequired = pdTRUE;
    1caa:	2601      	movs	r6, #1
    1cac:	e7c9      	b.n	1c42 <xTaskIncrementTick+0x4e>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    1cae:	4b17      	ldr	r3, [pc, #92]	; (1d0c <xTaskIncrementTick+0x118>)
    1cb0:	681b      	ldr	r3, [r3, #0]
    1cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1cb4:	009a      	lsls	r2, r3, #2
    1cb6:	18d3      	adds	r3, r2, r3
    1cb8:	009b      	lsls	r3, r3, #2
    1cba:	4a12      	ldr	r2, [pc, #72]	; (1d04 <xTaskIncrementTick+0x110>)
    1cbc:	589b      	ldr	r3, [r3, r2]
    1cbe:	2b01      	cmp	r3, #1
    1cc0:	d906      	bls.n	1cd0 <xTaskIncrementTick+0xdc>
			{
				xSwitchRequired = pdTRUE;
    1cc2:	2601      	movs	r6, #1
    1cc4:	e004      	b.n	1cd0 <xTaskIncrementTick+0xdc>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    1cc6:	4a12      	ldr	r2, [pc, #72]	; (1d10 <xTaskIncrementTick+0x11c>)
    1cc8:	6813      	ldr	r3, [r2, #0]
    1cca:	3301      	adds	r3, #1
    1ccc:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    1cce:	2600      	movs	r6, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    1cd0:	4b10      	ldr	r3, [pc, #64]	; (1d14 <xTaskIncrementTick+0x120>)
    1cd2:	681b      	ldr	r3, [r3, #0]
    1cd4:	2b00      	cmp	r3, #0
    1cd6:	d000      	beq.n	1cda <xTaskIncrementTick+0xe6>
		{
			xSwitchRequired = pdTRUE;
    1cd8:	2601      	movs	r6, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    1cda:	0030      	movs	r0, r6
    1cdc:	b003      	add	sp, #12
    1cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ce0:	20003c40 	.word	0x20003c40
    1ce4:	20003c44 	.word	0x20003c44
    1ce8:	20003b78 	.word	0x20003b78
    1cec:	20003c48 	.word	0x20003c48
    1cf0:	20003b74 	.word	0x20003b74
    1cf4:	000018f5 	.word	0x000018f5
    1cf8:	20000028 	.word	0x20000028
    1cfc:	0000124d 	.word	0x0000124d
    1d00:	20003c68 	.word	0x20003c68
    1d04:	20003bb0 	.word	0x20003bb0
    1d08:	00001205 	.word	0x00001205
    1d0c:	20003c28 	.word	0x20003c28
    1d10:	20003bac 	.word	0x20003bac
    1d14:	20003c6c 	.word	0x20003c6c

00001d18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    1d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    1d1a:	4b2f      	ldr	r3, [pc, #188]	; (1dd8 <xTaskResumeAll+0xc0>)
    1d1c:	681b      	ldr	r3, [r3, #0]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d101      	bne.n	1d26 <xTaskResumeAll+0xe>
    1d22:	b672      	cpsid	i
    1d24:	e7fe      	b.n	1d24 <xTaskResumeAll+0xc>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1d26:	4b2d      	ldr	r3, [pc, #180]	; (1ddc <xTaskResumeAll+0xc4>)
    1d28:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    1d2a:	4b2b      	ldr	r3, [pc, #172]	; (1dd8 <xTaskResumeAll+0xc0>)
    1d2c:	681a      	ldr	r2, [r3, #0]
    1d2e:	3a01      	subs	r2, #1
    1d30:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1d32:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    1d34:	2400      	movs	r4, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1d36:	2b00      	cmp	r3, #0
    1d38:	d14a      	bne.n	1dd0 <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1d3a:	4b29      	ldr	r3, [pc, #164]	; (1de0 <xTaskResumeAll+0xc8>)
    1d3c:	681b      	ldr	r3, [r3, #0]
    1d3e:	2b00      	cmp	r3, #0
    1d40:	d123      	bne.n	1d8a <xTaskResumeAll+0x72>
    1d42:	e045      	b.n	1dd0 <xTaskResumeAll+0xb8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1d44:	68fb      	ldr	r3, [r7, #12]
    1d46:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1d48:	0030      	movs	r0, r6
    1d4a:	3018      	adds	r0, #24
    1d4c:	4b25      	ldr	r3, [pc, #148]	; (1de4 <xTaskResumeAll+0xcc>)
    1d4e:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    1d50:	1d35      	adds	r5, r6, #4
    1d52:	0028      	movs	r0, r5
    1d54:	4b23      	ldr	r3, [pc, #140]	; (1de4 <xTaskResumeAll+0xcc>)
    1d56:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    1d58:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1d5a:	4a23      	ldr	r2, [pc, #140]	; (1de8 <xTaskResumeAll+0xd0>)
    1d5c:	6812      	ldr	r2, [r2, #0]
    1d5e:	4293      	cmp	r3, r2
    1d60:	d901      	bls.n	1d66 <xTaskResumeAll+0x4e>
    1d62:	4a21      	ldr	r2, [pc, #132]	; (1de8 <xTaskResumeAll+0xd0>)
    1d64:	6013      	str	r3, [r2, #0]
    1d66:	0098      	lsls	r0, r3, #2
    1d68:	18c3      	adds	r3, r0, r3
    1d6a:	009b      	lsls	r3, r3, #2
    1d6c:	481f      	ldr	r0, [pc, #124]	; (1dec <xTaskResumeAll+0xd4>)
    1d6e:	18c0      	adds	r0, r0, r3
    1d70:	0029      	movs	r1, r5
    1d72:	4b1f      	ldr	r3, [pc, #124]	; (1df0 <xTaskResumeAll+0xd8>)
    1d74:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1d76:	4b1f      	ldr	r3, [pc, #124]	; (1df4 <xTaskResumeAll+0xdc>)
    1d78:	681b      	ldr	r3, [r3, #0]
    1d7a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    1d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1d7e:	429a      	cmp	r2, r3
    1d80:	d305      	bcc.n	1d8e <xTaskResumeAll+0x76>
					{
						xYieldPending = pdTRUE;
    1d82:	2201      	movs	r2, #1
    1d84:	4b1c      	ldr	r3, [pc, #112]	; (1df8 <xTaskResumeAll+0xe0>)
    1d86:	601a      	str	r2, [r3, #0]
    1d88:	e001      	b.n	1d8e <xTaskResumeAll+0x76>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1d8a:	4c1c      	ldr	r4, [pc, #112]	; (1dfc <xTaskResumeAll+0xe4>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1d8c:	0027      	movs	r7, r4
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1d8e:	6823      	ldr	r3, [r4, #0]
    1d90:	2b00      	cmp	r3, #0
    1d92:	d1d7      	bne.n	1d44 <xTaskResumeAll+0x2c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    1d94:	4b1a      	ldr	r3, [pc, #104]	; (1e00 <xTaskResumeAll+0xe8>)
    1d96:	681b      	ldr	r3, [r3, #0]
    1d98:	2b00      	cmp	r3, #0
    1d9a:	d011      	beq.n	1dc0 <xTaskResumeAll+0xa8>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    1d9c:	4b18      	ldr	r3, [pc, #96]	; (1e00 <xTaskResumeAll+0xe8>)
    1d9e:	681b      	ldr	r3, [r3, #0]
    1da0:	2b00      	cmp	r3, #0
    1da2:	d00d      	beq.n	1dc0 <xTaskResumeAll+0xa8>
					{
						if( xTaskIncrementTick() != pdFALSE )
    1da4:	4e17      	ldr	r6, [pc, #92]	; (1e04 <xTaskResumeAll+0xec>)
						{
							xYieldPending = pdTRUE;
    1da6:	4d14      	ldr	r5, [pc, #80]	; (1df8 <xTaskResumeAll+0xe0>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    1da8:	4c15      	ldr	r4, [pc, #84]	; (1e00 <xTaskResumeAll+0xe8>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
    1daa:	47b0      	blx	r6
    1dac:	2800      	cmp	r0, #0
    1dae:	d001      	beq.n	1db4 <xTaskResumeAll+0x9c>
						{
							xYieldPending = pdTRUE;
    1db0:	2301      	movs	r3, #1
    1db2:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    1db4:	6823      	ldr	r3, [r4, #0]
    1db6:	3b01      	subs	r3, #1
    1db8:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    1dba:	6823      	ldr	r3, [r4, #0]
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	d1f4      	bne.n	1daa <xTaskResumeAll+0x92>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    1dc0:	4b0d      	ldr	r3, [pc, #52]	; (1df8 <xTaskResumeAll+0xe0>)
    1dc2:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    1dc4:	2400      	movs	r4, #0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    1dc6:	2b01      	cmp	r3, #1
    1dc8:	d102      	bne.n	1dd0 <xTaskResumeAll+0xb8>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    1dca:	4b0f      	ldr	r3, [pc, #60]	; (1e08 <xTaskResumeAll+0xf0>)
    1dcc:	4798      	blx	r3

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    1dce:	3401      	adds	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    1dd0:	4b0e      	ldr	r3, [pc, #56]	; (1e0c <xTaskResumeAll+0xf4>)
    1dd2:	4798      	blx	r3

	return xAlreadyYielded;
}
    1dd4:	0020      	movs	r0, r4
    1dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dd8:	20003c40 	.word	0x20003c40
    1ddc:	0000104d 	.word	0x0000104d
    1de0:	20003c50 	.word	0x20003c50
    1de4:	0000124d 	.word	0x0000124d
    1de8:	20003c68 	.word	0x20003c68
    1dec:	20003bb0 	.word	0x20003bb0
    1df0:	00001205 	.word	0x00001205
    1df4:	20003c28 	.word	0x20003c28
    1df8:	20003c6c 	.word	0x20003c6c
    1dfc:	20003c2c 	.word	0x20003c2c
    1e00:	20003bac 	.word	0x20003bac
    1e04:	00001bf5 	.word	0x00001bf5
    1e08:	00001035 	.word	0x00001035
    1e0c:	00001065 	.word	0x00001065

00001e10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    1e10:	b510      	push	{r4, lr}
    1e12:	1e04      	subs	r4, r0, #0
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    1e14:	d016      	beq.n	1e44 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    1e16:	4b0d      	ldr	r3, [pc, #52]	; (1e4c <vTaskDelay+0x3c>)
    1e18:	681b      	ldr	r3, [r3, #0]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d001      	beq.n	1e22 <vTaskDelay+0x12>
    1e1e:	b672      	cpsid	i
    1e20:	e7fe      	b.n	1e20 <vTaskDelay+0x10>
			vTaskSuspendAll();
    1e22:	4b0b      	ldr	r3, [pc, #44]	; (1e50 <vTaskDelay+0x40>)
    1e24:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1e26:	4b0b      	ldr	r3, [pc, #44]	; (1e54 <vTaskDelay+0x44>)
    1e28:	681b      	ldr	r3, [r3, #0]
    1e2a:	18e4      	adds	r4, r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1e2c:	4b0a      	ldr	r3, [pc, #40]	; (1e58 <vTaskDelay+0x48>)
    1e2e:	6818      	ldr	r0, [r3, #0]
    1e30:	3004      	adds	r0, #4
    1e32:	4b0a      	ldr	r3, [pc, #40]	; (1e5c <vTaskDelay+0x4c>)
    1e34:	4798      	blx	r3
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1e36:	0020      	movs	r0, r4
    1e38:	4b09      	ldr	r3, [pc, #36]	; (1e60 <vTaskDelay+0x50>)
    1e3a:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    1e3c:	4b09      	ldr	r3, [pc, #36]	; (1e64 <vTaskDelay+0x54>)
    1e3e:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1e40:	2800      	cmp	r0, #0
    1e42:	d101      	bne.n	1e48 <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    1e44:	4b08      	ldr	r3, [pc, #32]	; (1e68 <vTaskDelay+0x58>)
    1e46:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1e48:	bd10      	pop	{r4, pc}
    1e4a:	46c0      	nop			; (mov r8, r8)
    1e4c:	20003c40 	.word	0x20003c40
    1e50:	00001bc5 	.word	0x00001bc5
    1e54:	20003c44 	.word	0x20003c44
    1e58:	20003c28 	.word	0x20003c28
    1e5c:	0000124d 	.word	0x0000124d
    1e60:	00001921 	.word	0x00001921
    1e64:	00001d19 	.word	0x00001d19
    1e68:	00001035 	.word	0x00001035

00001e6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    1e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e6e:	4647      	mov	r7, r8
    1e70:	b480      	push	{r7}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    1e72:	4d16      	ldr	r5, [pc, #88]	; (1ecc <prvIdleTask+0x60>)
		{
			vTaskSuspendAll();
    1e74:	4f16      	ldr	r7, [pc, #88]	; (1ed0 <prvIdleTask+0x64>)
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1e76:	4e17      	ldr	r6, [pc, #92]	; (1ed4 <prvIdleTask+0x68>)
    1e78:	e01d      	b.n	1eb6 <prvIdleTask+0x4a>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    1e7a:	47b8      	blx	r7
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1e7c:	6834      	ldr	r4, [r6, #0]
			}
			( void ) xTaskResumeAll();
    1e7e:	4b16      	ldr	r3, [pc, #88]	; (1ed8 <prvIdleTask+0x6c>)
    1e80:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    1e82:	2c00      	cmp	r4, #0
    1e84:	d017      	beq.n	1eb6 <prvIdleTask+0x4a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    1e86:	4b15      	ldr	r3, [pc, #84]	; (1edc <prvIdleTask+0x70>)
    1e88:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    1e8a:	4b12      	ldr	r3, [pc, #72]	; (1ed4 <prvIdleTask+0x68>)
    1e8c:	68db      	ldr	r3, [r3, #12]
    1e8e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    1e90:	1d20      	adds	r0, r4, #4
    1e92:	4b13      	ldr	r3, [pc, #76]	; (1ee0 <prvIdleTask+0x74>)
    1e94:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    1e96:	4a13      	ldr	r2, [pc, #76]	; (1ee4 <prvIdleTask+0x78>)
    1e98:	6813      	ldr	r3, [r2, #0]
    1e9a:	3b01      	subs	r3, #1
    1e9c:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
    1e9e:	4a0b      	ldr	r2, [pc, #44]	; (1ecc <prvIdleTask+0x60>)
    1ea0:	6813      	ldr	r3, [r2, #0]
    1ea2:	3b01      	subs	r3, #1
    1ea4:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
    1ea6:	4b10      	ldr	r3, [pc, #64]	; (1ee8 <prvIdleTask+0x7c>)
    1ea8:	4798      	blx	r3
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    1eaa:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1eac:	4b0f      	ldr	r3, [pc, #60]	; (1eec <prvIdleTask+0x80>)
    1eae:	4698      	mov	r8, r3
    1eb0:	4798      	blx	r3
		vPortFree( pxTCB );
    1eb2:	0020      	movs	r0, r4
    1eb4:	47c0      	blx	r8
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    1eb6:	682b      	ldr	r3, [r5, #0]
    1eb8:	2b00      	cmp	r3, #0
    1eba:	d1de      	bne.n	1e7a <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1ebc:	4b0c      	ldr	r3, [pc, #48]	; (1ef0 <prvIdleTask+0x84>)
    1ebe:	681b      	ldr	r3, [r3, #0]
    1ec0:	2b01      	cmp	r3, #1
    1ec2:	d9f8      	bls.n	1eb6 <prvIdleTask+0x4a>
			{
				taskYIELD();
    1ec4:	4b0b      	ldr	r3, [pc, #44]	; (1ef4 <prvIdleTask+0x88>)
    1ec6:	4798      	blx	r3
    1ec8:	e7f5      	b.n	1eb6 <prvIdleTask+0x4a>
    1eca:	46c0      	nop			; (mov r8, r8)
    1ecc:	20003b80 	.word	0x20003b80
    1ed0:	00001bc5 	.word	0x00001bc5
    1ed4:	20003c14 	.word	0x20003c14
    1ed8:	00001d19 	.word	0x00001d19
    1edc:	0000104d 	.word	0x0000104d
    1ee0:	0000124d 	.word	0x0000124d
    1ee4:	20003c50 	.word	0x20003c50
    1ee8:	00001065 	.word	0x00001065
    1eec:	000011d9 	.word	0x000011d9
    1ef0:	20003bb0 	.word	0x20003bb0
    1ef4:	00001035 	.word	0x00001035

00001ef8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    1ef8:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1efa:	4b25      	ldr	r3, [pc, #148]	; (1f90 <vTaskSwitchContext+0x98>)
    1efc:	681b      	ldr	r3, [r3, #0]
    1efe:	2b00      	cmp	r3, #0
    1f00:	d003      	beq.n	1f0a <vTaskSwitchContext+0x12>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1f02:	2201      	movs	r2, #1
    1f04:	4b23      	ldr	r3, [pc, #140]	; (1f94 <vTaskSwitchContext+0x9c>)
    1f06:	601a      	str	r2, [r3, #0]
    1f08:	e041      	b.n	1f8e <vTaskSwitchContext+0x96>
	}
	else
	{
		xYieldPending = pdFALSE;
    1f0a:	2200      	movs	r2, #0
    1f0c:	4b21      	ldr	r3, [pc, #132]	; (1f94 <vTaskSwitchContext+0x9c>)
    1f0e:	601a      	str	r2, [r3, #0]
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    1f10:	4b21      	ldr	r3, [pc, #132]	; (1f98 <vTaskSwitchContext+0xa0>)
    1f12:	681b      	ldr	r3, [r3, #0]
    1f14:	009a      	lsls	r2, r3, #2
    1f16:	18d3      	adds	r3, r2, r3
    1f18:	009b      	lsls	r3, r3, #2
    1f1a:	4a20      	ldr	r2, [pc, #128]	; (1f9c <vTaskSwitchContext+0xa4>)
    1f1c:	589b      	ldr	r3, [r3, r2]
    1f1e:	2b00      	cmp	r3, #0
    1f20:	d116      	bne.n	1f50 <vTaskSwitchContext+0x58>
    1f22:	4b1d      	ldr	r3, [pc, #116]	; (1f98 <vTaskSwitchContext+0xa0>)
    1f24:	681b      	ldr	r3, [r3, #0]
    1f26:	2b00      	cmp	r3, #0
    1f28:	d006      	beq.n	1f38 <vTaskSwitchContext+0x40>
    1f2a:	4a1b      	ldr	r2, [pc, #108]	; (1f98 <vTaskSwitchContext+0xa0>)
    1f2c:	4c1b      	ldr	r4, [pc, #108]	; (1f9c <vTaskSwitchContext+0xa4>)
    1f2e:	0010      	movs	r0, r2
    1f30:	e004      	b.n	1f3c <vTaskSwitchContext+0x44>
    1f32:	6803      	ldr	r3, [r0, #0]
    1f34:	2b00      	cmp	r3, #0
    1f36:	d101      	bne.n	1f3c <vTaskSwitchContext+0x44>
    1f38:	b672      	cpsid	i
    1f3a:	e7fe      	b.n	1f3a <vTaskSwitchContext+0x42>
    1f3c:	6813      	ldr	r3, [r2, #0]
    1f3e:	3b01      	subs	r3, #1
    1f40:	6013      	str	r3, [r2, #0]
    1f42:	6813      	ldr	r3, [r2, #0]
    1f44:	0099      	lsls	r1, r3, #2
    1f46:	18cb      	adds	r3, r1, r3
    1f48:	009b      	lsls	r3, r3, #2
    1f4a:	591b      	ldr	r3, [r3, r4]
    1f4c:	2b00      	cmp	r3, #0
    1f4e:	d0f0      	beq.n	1f32 <vTaskSwitchContext+0x3a>
    1f50:	4b11      	ldr	r3, [pc, #68]	; (1f98 <vTaskSwitchContext+0xa0>)
    1f52:	681b      	ldr	r3, [r3, #0]
    1f54:	4c11      	ldr	r4, [pc, #68]	; (1f9c <vTaskSwitchContext+0xa4>)
    1f56:	009a      	lsls	r2, r3, #2
    1f58:	18d1      	adds	r1, r2, r3
    1f5a:	0089      	lsls	r1, r1, #2
    1f5c:	1861      	adds	r1, r4, r1
    1f5e:	6848      	ldr	r0, [r1, #4]
    1f60:	6840      	ldr	r0, [r0, #4]
    1f62:	6048      	str	r0, [r1, #4]
    1f64:	18d2      	adds	r2, r2, r3
    1f66:	0092      	lsls	r2, r2, #2
    1f68:	3208      	adds	r2, #8
    1f6a:	18a2      	adds	r2, r4, r2
    1f6c:	4290      	cmp	r0, r2
    1f6e:	d105      	bne.n	1f7c <vTaskSwitchContext+0x84>
    1f70:	6841      	ldr	r1, [r0, #4]
    1f72:	009a      	lsls	r2, r3, #2
    1f74:	18d2      	adds	r2, r2, r3
    1f76:	0092      	lsls	r2, r2, #2
    1f78:	18a2      	adds	r2, r4, r2
    1f7a:	6051      	str	r1, [r2, #4]
    1f7c:	009a      	lsls	r2, r3, #2
    1f7e:	18d3      	adds	r3, r2, r3
    1f80:	009b      	lsls	r3, r3, #2
    1f82:	4a06      	ldr	r2, [pc, #24]	; (1f9c <vTaskSwitchContext+0xa4>)
    1f84:	18d3      	adds	r3, r2, r3
    1f86:	685b      	ldr	r3, [r3, #4]
    1f88:	68da      	ldr	r2, [r3, #12]
    1f8a:	4b05      	ldr	r3, [pc, #20]	; (1fa0 <vTaskSwitchContext+0xa8>)
    1f8c:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    1f8e:	bd10      	pop	{r4, pc}
    1f90:	20003c40 	.word	0x20003c40
    1f94:	20003c6c 	.word	0x20003c6c
    1f98:	20003c68 	.word	0x20003c68
    1f9c:	20003bb0 	.word	0x20003bb0
    1fa0:	20003c28 	.word	0x20003c28

00001fa4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    1fa4:	b570      	push	{r4, r5, r6, lr}
    1fa6:	000c      	movs	r4, r1
TickType_t xTimeToWake;

	configASSERT( pxEventList );
    1fa8:	2800      	cmp	r0, #0
    1faa:	d101      	bne.n	1fb0 <vTaskPlaceOnEventList+0xc>
    1fac:	b672      	cpsid	i
    1fae:	e7fe      	b.n	1fae <vTaskPlaceOnEventList+0xa>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1fb0:	4d0b      	ldr	r5, [pc, #44]	; (1fe0 <vTaskPlaceOnEventList+0x3c>)
    1fb2:	6829      	ldr	r1, [r5, #0]
    1fb4:	3118      	adds	r1, #24
    1fb6:	4b0b      	ldr	r3, [pc, #44]	; (1fe4 <vTaskPlaceOnEventList+0x40>)
    1fb8:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1fba:	6828      	ldr	r0, [r5, #0]
    1fbc:	3004      	adds	r0, #4
    1fbe:	4b0a      	ldr	r3, [pc, #40]	; (1fe8 <vTaskPlaceOnEventList+0x44>)
    1fc0:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    1fc2:	1c63      	adds	r3, r4, #1
    1fc4:	d106      	bne.n	1fd4 <vTaskPlaceOnEventList+0x30>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1fc6:	4b06      	ldr	r3, [pc, #24]	; (1fe0 <vTaskPlaceOnEventList+0x3c>)
    1fc8:	6819      	ldr	r1, [r3, #0]
    1fca:	3104      	adds	r1, #4
    1fcc:	4807      	ldr	r0, [pc, #28]	; (1fec <vTaskPlaceOnEventList+0x48>)
    1fce:	4b08      	ldr	r3, [pc, #32]	; (1ff0 <vTaskPlaceOnEventList+0x4c>)
    1fd0:	4798      	blx	r3
    1fd2:	e004      	b.n	1fde <vTaskPlaceOnEventList+0x3a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    1fd4:	4b07      	ldr	r3, [pc, #28]	; (1ff4 <vTaskPlaceOnEventList+0x50>)
    1fd6:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    1fd8:	1820      	adds	r0, r4, r0
    1fda:	4b07      	ldr	r3, [pc, #28]	; (1ff8 <vTaskPlaceOnEventList+0x54>)
    1fdc:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    1fde:	bd70      	pop	{r4, r5, r6, pc}
    1fe0:	20003c28 	.word	0x20003c28
    1fe4:	0000121d 	.word	0x0000121d
    1fe8:	0000124d 	.word	0x0000124d
    1fec:	20003c54 	.word	0x20003c54
    1ff0:	00001205 	.word	0x00001205
    1ff4:	20003c44 	.word	0x20003c44
    1ff8:	00001921 	.word	0x00001921

00001ffc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    1ffc:	b570      	push	{r4, r5, r6, lr}
    1ffe:	000c      	movs	r4, r1
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
    2000:	2800      	cmp	r0, #0
    2002:	d101      	bne.n	2008 <STACK_SIZE+0x8>
    2004:	b672      	cpsid	i
    2006:	e7fe      	b.n	2006 <STACK_SIZE+0x6>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2008:	4d07      	ldr	r5, [pc, #28]	; (2028 <STACK_SIZE+0x28>)
    200a:	6829      	ldr	r1, [r5, #0]
    200c:	3118      	adds	r1, #24
    200e:	4b07      	ldr	r3, [pc, #28]	; (202c <STACK_SIZE+0x2c>)
    2010:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2012:	6828      	ldr	r0, [r5, #0]
    2014:	3004      	adds	r0, #4
    2016:	4b06      	ldr	r3, [pc, #24]	; (2030 <STACK_SIZE+0x30>)
    2018:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    201a:	4b06      	ldr	r3, [pc, #24]	; (2034 <STACK_SIZE+0x34>)
    201c:	6818      	ldr	r0, [r3, #0]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    201e:	1900      	adds	r0, r0, r4
    2020:	4b05      	ldr	r3, [pc, #20]	; (2038 <STACK_SIZE+0x38>)
    2022:	4798      	blx	r3
	}
    2024:	bd70      	pop	{r4, r5, r6, pc}
    2026:	46c0      	nop			; (mov r8, r8)
    2028:	20003c28 	.word	0x20003c28
    202c:	00001205 	.word	0x00001205
    2030:	0000124d 	.word	0x0000124d
    2034:	20003c44 	.word	0x20003c44
    2038:	00001921 	.word	0x00001921

0000203c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    203c:	b570      	push	{r4, r5, r6, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    203e:	68c3      	ldr	r3, [r0, #12]
    2040:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
    2042:	2d00      	cmp	r5, #0
    2044:	d101      	bne.n	204a <xTaskRemoveFromEventList+0xe>
    2046:	b672      	cpsid	i
    2048:	e7fe      	b.n	2048 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    204a:	002c      	movs	r4, r5
    204c:	3418      	adds	r4, #24
    204e:	0020      	movs	r0, r4
    2050:	4b14      	ldr	r3, [pc, #80]	; (20a4 <xTaskRemoveFromEventList+0x68>)
    2052:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2054:	4b14      	ldr	r3, [pc, #80]	; (20a8 <xTaskRemoveFromEventList+0x6c>)
    2056:	681b      	ldr	r3, [r3, #0]
    2058:	2b00      	cmp	r3, #0
    205a:	d113      	bne.n	2084 <xTaskRemoveFromEventList+0x48>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    205c:	1d2c      	adds	r4, r5, #4
    205e:	0020      	movs	r0, r4
    2060:	4b10      	ldr	r3, [pc, #64]	; (20a4 <xTaskRemoveFromEventList+0x68>)
    2062:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    2064:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    2066:	4a11      	ldr	r2, [pc, #68]	; (20ac <xTaskRemoveFromEventList+0x70>)
    2068:	6812      	ldr	r2, [r2, #0]
    206a:	4293      	cmp	r3, r2
    206c:	d901      	bls.n	2072 <xTaskRemoveFromEventList+0x36>
    206e:	4a0f      	ldr	r2, [pc, #60]	; (20ac <xTaskRemoveFromEventList+0x70>)
    2070:	6013      	str	r3, [r2, #0]
    2072:	0098      	lsls	r0, r3, #2
    2074:	18c3      	adds	r3, r0, r3
    2076:	009b      	lsls	r3, r3, #2
    2078:	480d      	ldr	r0, [pc, #52]	; (20b0 <xTaskRemoveFromEventList+0x74>)
    207a:	18c0      	adds	r0, r0, r3
    207c:	0021      	movs	r1, r4
    207e:	4b0d      	ldr	r3, [pc, #52]	; (20b4 <xTaskRemoveFromEventList+0x78>)
    2080:	4798      	blx	r3
    2082:	e003      	b.n	208c <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2084:	0021      	movs	r1, r4
    2086:	480c      	ldr	r0, [pc, #48]	; (20b8 <xTaskRemoveFromEventList+0x7c>)
    2088:	4b0a      	ldr	r3, [pc, #40]	; (20b4 <xTaskRemoveFromEventList+0x78>)
    208a:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    208c:	4b0b      	ldr	r3, [pc, #44]	; (20bc <xTaskRemoveFromEventList+0x80>)
    208e:	681b      	ldr	r3, [r3, #0]
    2090:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    2092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xReturn = pdFALSE;
    2094:	2000      	movs	r0, #0
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2096:	429a      	cmp	r2, r3
    2098:	d903      	bls.n	20a2 <xTaskRemoveFromEventList+0x66>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    209a:	2201      	movs	r2, #1
    209c:	4b08      	ldr	r3, [pc, #32]	; (20c0 <xTaskRemoveFromEventList+0x84>)
    209e:	601a      	str	r2, [r3, #0]
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    20a0:	3001      	adds	r0, #1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    20a2:	bd70      	pop	{r4, r5, r6, pc}
    20a4:	0000124d 	.word	0x0000124d
    20a8:	20003c40 	.word	0x20003c40
    20ac:	20003c68 	.word	0x20003c68
    20b0:	20003bb0 	.word	0x20003bb0
    20b4:	00001205 	.word	0x00001205
    20b8:	20003c2c 	.word	0x20003c2c
    20bc:	20003c28 	.word	0x20003c28
    20c0:	20003c6c 	.word	0x20003c6c

000020c4 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
    20c4:	2800      	cmp	r0, #0
    20c6:	d101      	bne.n	20cc <vTaskSetTimeOutState+0x8>
    20c8:	b672      	cpsid	i
    20ca:	e7fe      	b.n	20ca <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    20cc:	4b03      	ldr	r3, [pc, #12]	; (20dc <vTaskSetTimeOutState+0x18>)
    20ce:	681b      	ldr	r3, [r3, #0]
    20d0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    20d2:	4b03      	ldr	r3, [pc, #12]	; (20e0 <vTaskSetTimeOutState+0x1c>)
    20d4:	681b      	ldr	r3, [r3, #0]
    20d6:	6043      	str	r3, [r0, #4]
}
    20d8:	4770      	bx	lr
    20da:	46c0      	nop			; (mov r8, r8)
    20dc:	20003b74 	.word	0x20003b74
    20e0:	20003c44 	.word	0x20003c44

000020e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    20e4:	b570      	push	{r4, r5, r6, lr}
    20e6:	0004      	movs	r4, r0
    20e8:	000e      	movs	r6, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    20ea:	2800      	cmp	r0, #0
    20ec:	d101      	bne.n	20f2 <xTaskCheckForTimeOut+0xe>
    20ee:	b672      	cpsid	i
    20f0:	e7fe      	b.n	20f0 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
    20f2:	2900      	cmp	r1, #0
    20f4:	d101      	bne.n	20fa <xTaskCheckForTimeOut+0x16>
    20f6:	b672      	cpsid	i
    20f8:	e7fe      	b.n	20f8 <xTaskCheckForTimeOut+0x14>

	taskENTER_CRITICAL();
    20fa:	4b11      	ldr	r3, [pc, #68]	; (2140 <xTaskCheckForTimeOut+0x5c>)
    20fc:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    20fe:	4b11      	ldr	r3, [pc, #68]	; (2144 <xTaskCheckForTimeOut+0x60>)
    2100:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    2102:	6833      	ldr	r3, [r6, #0]
    2104:	1c5a      	adds	r2, r3, #1
    2106:	d015      	beq.n	2134 <xTaskCheckForTimeOut+0x50>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2108:	4a0f      	ldr	r2, [pc, #60]	; (2148 <xTaskCheckForTimeOut+0x64>)
    210a:	6812      	ldr	r2, [r2, #0]
    210c:	6820      	ldr	r0, [r4, #0]
    210e:	4290      	cmp	r0, r2
    2110:	d003      	beq.n	211a <xTaskCheckForTimeOut+0x36>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    2112:	2501      	movs	r5, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2114:	6862      	ldr	r2, [r4, #4]
    2116:	4291      	cmp	r1, r2
    2118:	d20d      	bcs.n	2136 <xTaskCheckForTimeOut+0x52>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    211a:	6862      	ldr	r2, [r4, #4]
    211c:	1a88      	subs	r0, r1, r2
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    211e:	2501      	movs	r5, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    2120:	4283      	cmp	r3, r0
    2122:	d908      	bls.n	2136 <xTaskCheckForTimeOut+0x52>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    2124:	1a52      	subs	r2, r2, r1
    2126:	18d3      	adds	r3, r2, r3
    2128:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
    212a:	0020      	movs	r0, r4
    212c:	4b07      	ldr	r3, [pc, #28]	; (214c <xTaskCheckForTimeOut+0x68>)
    212e:	4798      	blx	r3
			xReturn = pdFALSE;
    2130:	2500      	movs	r5, #0
    2132:	e000      	b.n	2136 <xTaskCheckForTimeOut+0x52>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
    2134:	2500      	movs	r5, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    2136:	4b06      	ldr	r3, [pc, #24]	; (2150 <xTaskCheckForTimeOut+0x6c>)
    2138:	4798      	blx	r3

	return xReturn;
}
    213a:	0028      	movs	r0, r5
    213c:	bd70      	pop	{r4, r5, r6, pc}
    213e:	46c0      	nop			; (mov r8, r8)
    2140:	0000104d 	.word	0x0000104d
    2144:	20003c44 	.word	0x20003c44
    2148:	20003b74 	.word	0x20003b74
    214c:	000020c5 	.word	0x000020c5
    2150:	00001065 	.word	0x00001065

00002154 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    2154:	2201      	movs	r2, #1
    2156:	4b01      	ldr	r3, [pc, #4]	; (215c <vTaskMissedYield+0x8>)
    2158:	601a      	str	r2, [r3, #0]
}
    215a:	4770      	bx	lr
    215c:	20003c6c 	.word	0x20003c6c

00002160 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    2160:	4b01      	ldr	r3, [pc, #4]	; (2168 <xTaskGetCurrentTaskHandle+0x8>)
    2162:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    2164:	4770      	bx	lr
    2166:	46c0      	nop			; (mov r8, r8)
    2168:	20003c28 	.word	0x20003c28

0000216c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    216c:	4b05      	ldr	r3, [pc, #20]	; (2184 <xTaskGetSchedulerState+0x18>)
    216e:	681b      	ldr	r3, [r3, #0]
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    2170:	2001      	movs	r0, #1

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    2172:	2b00      	cmp	r3, #0
    2174:	d004      	beq.n	2180 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2176:	4b04      	ldr	r3, [pc, #16]	; (2188 <xTaskGetSchedulerState+0x1c>)
    2178:	6818      	ldr	r0, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    217a:	4243      	negs	r3, r0
    217c:	4158      	adcs	r0, r3
    217e:	0040      	lsls	r0, r0, #1
			}
		}

		return xReturn;
	}
    2180:	4770      	bx	lr
    2182:	46c0      	nop			; (mov r8, r8)
    2184:	20003b7c 	.word	0x20003b7c
    2188:	20003c40 	.word	0x20003c40

0000218c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    218c:	b570      	push	{r4, r5, r6, lr}
    218e:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    2190:	d031      	beq.n	21f6 <vTaskPriorityInherit+0x6a>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    2192:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    2194:	4a18      	ldr	r2, [pc, #96]	; (21f8 <vTaskPriorityInherit+0x6c>)
    2196:	6812      	ldr	r2, [r2, #0]
    2198:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    219a:	4293      	cmp	r3, r2
    219c:	d22b      	bcs.n	21f6 <vTaskPriorityInherit+0x6a>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    219e:	6982      	ldr	r2, [r0, #24]
    21a0:	2a00      	cmp	r2, #0
    21a2:	db05      	blt.n	21b0 <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    21a4:	4a14      	ldr	r2, [pc, #80]	; (21f8 <vTaskPriorityInherit+0x6c>)
    21a6:	6812      	ldr	r2, [r2, #0]
    21a8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    21aa:	2205      	movs	r2, #5
    21ac:	1a52      	subs	r2, r2, r1
    21ae:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    21b0:	009a      	lsls	r2, r3, #2
    21b2:	18d3      	adds	r3, r2, r3
    21b4:	009b      	lsls	r3, r3, #2
    21b6:	4a11      	ldr	r2, [pc, #68]	; (21fc <vTaskPriorityInherit+0x70>)
    21b8:	18d3      	adds	r3, r2, r3
    21ba:	6962      	ldr	r2, [r4, #20]
    21bc:	429a      	cmp	r2, r3
    21be:	d116      	bne.n	21ee <vTaskPriorityInherit+0x62>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    21c0:	1d25      	adds	r5, r4, #4
    21c2:	0028      	movs	r0, r5
    21c4:	4b0e      	ldr	r3, [pc, #56]	; (2200 <vTaskPriorityInherit+0x74>)
    21c6:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    21c8:	4b0b      	ldr	r3, [pc, #44]	; (21f8 <vTaskPriorityInherit+0x6c>)
    21ca:	681b      	ldr	r3, [r3, #0]
    21cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    21ce:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    21d0:	4a0c      	ldr	r2, [pc, #48]	; (2204 <vTaskPriorityInherit+0x78>)
    21d2:	6812      	ldr	r2, [r2, #0]
    21d4:	4293      	cmp	r3, r2
    21d6:	d901      	bls.n	21dc <vTaskPriorityInherit+0x50>
    21d8:	4a0a      	ldr	r2, [pc, #40]	; (2204 <vTaskPriorityInherit+0x78>)
    21da:	6013      	str	r3, [r2, #0]
    21dc:	0098      	lsls	r0, r3, #2
    21de:	18c3      	adds	r3, r0, r3
    21e0:	009b      	lsls	r3, r3, #2
    21e2:	4806      	ldr	r0, [pc, #24]	; (21fc <vTaskPriorityInherit+0x70>)
    21e4:	18c0      	adds	r0, r0, r3
    21e6:	0029      	movs	r1, r5
    21e8:	4b07      	ldr	r3, [pc, #28]	; (2208 <vTaskPriorityInherit+0x7c>)
    21ea:	4798      	blx	r3
    21ec:	e003      	b.n	21f6 <vTaskPriorityInherit+0x6a>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    21ee:	4b02      	ldr	r3, [pc, #8]	; (21f8 <vTaskPriorityInherit+0x6c>)
    21f0:	681b      	ldr	r3, [r3, #0]
    21f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    21f4:	62e3      	str	r3, [r4, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    21f6:	bd70      	pop	{r4, r5, r6, pc}
    21f8:	20003c28 	.word	0x20003c28
    21fc:	20003bb0 	.word	0x20003bb0
    2200:	0000124d 	.word	0x0000124d
    2204:	20003c68 	.word	0x20003c68
    2208:	00001205 	.word	0x00001205

0000220c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    220c:	b570      	push	{r4, r5, r6, lr}
    220e:	1e05      	subs	r5, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    2210:	d01d      	beq.n	224e <vTaskPriorityDisinherit+0x42>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2212:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    2214:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    2216:	4293      	cmp	r3, r2
    2218:	d019      	beq.n	224e <vTaskPriorityDisinherit+0x42>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    221a:	1d04      	adds	r4, r0, #4
    221c:	0020      	movs	r0, r4
    221e:	4b0c      	ldr	r3, [pc, #48]	; (2250 <vTaskPriorityDisinherit+0x44>)
    2220:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    2222:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    2224:	62e8      	str	r0, [r5, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    2226:	69ab      	ldr	r3, [r5, #24]
    2228:	2b00      	cmp	r3, #0
    222a:	db02      	blt.n	2232 <vTaskPriorityDisinherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    222c:	2305      	movs	r3, #5
    222e:	1a1b      	subs	r3, r3, r0
    2230:	61ab      	str	r3, [r5, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
    2232:	4b08      	ldr	r3, [pc, #32]	; (2254 <vTaskPriorityDisinherit+0x48>)
    2234:	681b      	ldr	r3, [r3, #0]
    2236:	4298      	cmp	r0, r3
    2238:	d901      	bls.n	223e <vTaskPriorityDisinherit+0x32>
    223a:	4b06      	ldr	r3, [pc, #24]	; (2254 <vTaskPriorityDisinherit+0x48>)
    223c:	6018      	str	r0, [r3, #0]
    223e:	0083      	lsls	r3, r0, #2
    2240:	1818      	adds	r0, r3, r0
    2242:	0080      	lsls	r0, r0, #2
    2244:	4b04      	ldr	r3, [pc, #16]	; (2258 <vTaskPriorityDisinherit+0x4c>)
    2246:	1818      	adds	r0, r3, r0
    2248:	0021      	movs	r1, r4
    224a:	4b04      	ldr	r3, [pc, #16]	; (225c <vTaskPriorityDisinherit+0x50>)
    224c:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    224e:	bd70      	pop	{r4, r5, r6, pc}
    2250:	0000124d 	.word	0x0000124d
    2254:	20003c68 	.word	0x20003c68
    2258:	20003bb0 	.word	0x20003bb0
    225c:	00001205 	.word	0x00001205

00002260 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    2260:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2262:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2264:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    2266:	4291      	cmp	r1, r2
    2268:	d80b      	bhi.n	2282 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    226a:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    226c:	2401      	movs	r4, #1

	if( xNextExpiryTime <= xTimeNow )
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    226e:	6983      	ldr	r3, [r0, #24]
    2270:	429a      	cmp	r2, r3
    2272:	d211      	bcs.n	2298 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    2274:	1d01      	adds	r1, r0, #4
    2276:	4b09      	ldr	r3, [pc, #36]	; (229c <prvInsertTimerInActiveList+0x3c>)
    2278:	6818      	ldr	r0, [r3, #0]
    227a:	4b09      	ldr	r3, [pc, #36]	; (22a0 <prvInsertTimerInActiveList+0x40>)
    227c:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    227e:	2400      	movs	r4, #0
    2280:	e00a      	b.n	2298 <prvInsertTimerInActiveList+0x38>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2282:	429a      	cmp	r2, r3
    2284:	d202      	bcs.n	228c <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    2286:	2401      	movs	r4, #1
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2288:	4299      	cmp	r1, r3
    228a:	d205      	bcs.n	2298 <prvInsertTimerInActiveList+0x38>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    228c:	1d01      	adds	r1, r0, #4
    228e:	4b05      	ldr	r3, [pc, #20]	; (22a4 <prvInsertTimerInActiveList+0x44>)
    2290:	6818      	ldr	r0, [r3, #0]
    2292:	4b03      	ldr	r3, [pc, #12]	; (22a0 <prvInsertTimerInActiveList+0x40>)
    2294:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    2296:	2400      	movs	r4, #0
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
    2298:	0020      	movs	r0, r4
    229a:	bd10      	pop	{r4, pc}
    229c:	20003ca4 	.word	0x20003ca4
    22a0:	0000121d 	.word	0x0000121d
    22a4:	20003c70 	.word	0x20003c70

000022a8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    22a8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    22aa:	4b10      	ldr	r3, [pc, #64]	; (22ec <prvCheckForValidListAndQueue+0x44>)
    22ac:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    22ae:	4b10      	ldr	r3, [pc, #64]	; (22f0 <prvCheckForValidListAndQueue+0x48>)
    22b0:	681b      	ldr	r3, [r3, #0]
    22b2:	2b00      	cmp	r3, #0
    22b4:	d116      	bne.n	22e4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    22b6:	4d0f      	ldr	r5, [pc, #60]	; (22f4 <prvCheckForValidListAndQueue+0x4c>)
    22b8:	0028      	movs	r0, r5
    22ba:	4e0f      	ldr	r6, [pc, #60]	; (22f8 <prvCheckForValidListAndQueue+0x50>)
    22bc:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    22be:	4c0f      	ldr	r4, [pc, #60]	; (22fc <prvCheckForValidListAndQueue+0x54>)
    22c0:	0020      	movs	r0, r4
    22c2:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    22c4:	4b0e      	ldr	r3, [pc, #56]	; (2300 <prvCheckForValidListAndQueue+0x58>)
    22c6:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    22c8:	4b0e      	ldr	r3, [pc, #56]	; (2304 <prvCheckForValidListAndQueue+0x5c>)
    22ca:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    22cc:	2200      	movs	r2, #0
    22ce:	210c      	movs	r1, #12
    22d0:	2002      	movs	r0, #2
    22d2:	4b0d      	ldr	r3, [pc, #52]	; (2308 <prvCheckForValidListAndQueue+0x60>)
    22d4:	4798      	blx	r3
			configASSERT( xTimerQueue );
    22d6:	2800      	cmp	r0, #0
    22d8:	d002      	beq.n	22e0 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    22da:	4b05      	ldr	r3, [pc, #20]	; (22f0 <prvCheckForValidListAndQueue+0x48>)
    22dc:	6018      	str	r0, [r3, #0]
    22de:	e001      	b.n	22e4 <prvCheckForValidListAndQueue+0x3c>
			configASSERT( xTimerQueue );
    22e0:	b672      	cpsid	i
    22e2:	e7fe      	b.n	22e2 <prvCheckForValidListAndQueue+0x3a>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    22e4:	4b09      	ldr	r3, [pc, #36]	; (230c <prvCheckForValidListAndQueue+0x64>)
    22e6:	4798      	blx	r3
}
    22e8:	bd70      	pop	{r4, r5, r6, pc}
    22ea:	46c0      	nop			; (mov r8, r8)
    22ec:	0000104d 	.word	0x0000104d
    22f0:	20003ca0 	.word	0x20003ca0
    22f4:	20003c74 	.word	0x20003c74
    22f8:	000011e5 	.word	0x000011e5
    22fc:	20003c88 	.word	0x20003c88
    2300:	20003c70 	.word	0x20003c70
    2304:	20003ca4 	.word	0x20003ca4
    2308:	00001489 	.word	0x00001489
    230c:	00001065 	.word	0x00001065

00002310 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    2310:	b510      	push	{r4, lr}
    2312:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    2314:	4b0b      	ldr	r3, [pc, #44]	; (2344 <xTimerCreateTimerTask+0x34>)
    2316:	4798      	blx	r3

	if( xTimerQueue != NULL )
    2318:	4b0b      	ldr	r3, [pc, #44]	; (2348 <xTimerCreateTimerTask+0x38>)
    231a:	681b      	ldr	r3, [r3, #0]
    231c:	2b00      	cmp	r3, #0
    231e:	d00d      	beq.n	233c <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    2320:	2300      	movs	r3, #0
    2322:	9303      	str	r3, [sp, #12]
    2324:	9302      	str	r3, [sp, #8]
    2326:	9301      	str	r3, [sp, #4]
    2328:	3302      	adds	r3, #2
    232a:	9300      	str	r3, [sp, #0]
    232c:	2300      	movs	r3, #0
    232e:	2250      	movs	r2, #80	; 0x50
    2330:	4906      	ldr	r1, [pc, #24]	; (234c <xTimerCreateTimerTask+0x3c>)
    2332:	4807      	ldr	r0, [pc, #28]	; (2350 <xTimerCreateTimerTask+0x40>)
    2334:	4c07      	ldr	r4, [pc, #28]	; (2354 <xTimerCreateTimerTask+0x44>)
    2336:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    2338:	2800      	cmp	r0, #0
    233a:	d101      	bne.n	2340 <xTimerCreateTimerTask+0x30>
    233c:	b672      	cpsid	i
    233e:	e7fe      	b.n	233e <xTimerCreateTimerTask+0x2e>
	return xReturn;
}
    2340:	b004      	add	sp, #16
    2342:	bd10      	pop	{r4, pc}
    2344:	000022a9 	.word	0x000022a9
    2348:	20003ca0 	.word	0x20003ca0
    234c:	00006c00 	.word	0x00006c00
    2350:	00002479 	.word	0x00002479
    2354:	00001979 	.word	0x00001979

00002358 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2358:	b530      	push	{r4, r5, lr}
    235a:	b085      	sub	sp, #20
    235c:	001d      	movs	r5, r3
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    235e:	4b13      	ldr	r3, [pc, #76]	; (23ac <xTimerGenericCommand+0x54>)
    2360:	681c      	ldr	r4, [r3, #0]
    2362:	2c00      	cmp	r4, #0
    2364:	d01f      	beq.n	23a6 <xTimerGenericCommand+0x4e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    2366:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2368:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    236a:	9003      	str	r0, [sp, #12]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    236c:	2905      	cmp	r1, #5
    236e:	dc13      	bgt.n	2398 <xTimerGenericCommand+0x40>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2370:	4b0f      	ldr	r3, [pc, #60]	; (23b0 <xTimerGenericCommand+0x58>)
    2372:	4798      	blx	r3
    2374:	2802      	cmp	r0, #2
    2376:	d107      	bne.n	2388 <xTimerGenericCommand+0x30>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2378:	4b0c      	ldr	r3, [pc, #48]	; (23ac <xTimerGenericCommand+0x54>)
    237a:	6818      	ldr	r0, [r3, #0]
    237c:	2300      	movs	r3, #0
    237e:	9a08      	ldr	r2, [sp, #32]
    2380:	a901      	add	r1, sp, #4
    2382:	4c0c      	ldr	r4, [pc, #48]	; (23b4 <xTimerGenericCommand+0x5c>)
    2384:	47a0      	blx	r4
    2386:	e00f      	b.n	23a8 <xTimerGenericCommand+0x50>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2388:	4b08      	ldr	r3, [pc, #32]	; (23ac <xTimerGenericCommand+0x54>)
    238a:	6818      	ldr	r0, [r3, #0]
    238c:	2300      	movs	r3, #0
    238e:	2200      	movs	r2, #0
    2390:	a901      	add	r1, sp, #4
    2392:	4c08      	ldr	r4, [pc, #32]	; (23b4 <xTimerGenericCommand+0x5c>)
    2394:	47a0      	blx	r4
    2396:	e007      	b.n	23a8 <xTimerGenericCommand+0x50>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2398:	2300      	movs	r3, #0
    239a:	002a      	movs	r2, r5
    239c:	a901      	add	r1, sp, #4
    239e:	0020      	movs	r0, r4
    23a0:	4c05      	ldr	r4, [pc, #20]	; (23b8 <xTimerGenericCommand+0x60>)
    23a2:	47a0      	blx	r4
    23a4:	e000      	b.n	23a8 <xTimerGenericCommand+0x50>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    23a6:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    23a8:	b005      	add	sp, #20
    23aa:	bd30      	pop	{r4, r5, pc}
    23ac:	20003ca0 	.word	0x20003ca0
    23b0:	0000216d 	.word	0x0000216d
    23b4:	000014dd 	.word	0x000014dd
    23b8:	00001655 	.word	0x00001655

000023bc <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    23bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    23be:	4657      	mov	r7, sl
    23c0:	464e      	mov	r6, r9
    23c2:	4645      	mov	r5, r8
    23c4:	b4e0      	push	{r5, r6, r7}
    23c6:	b082      	sub	sp, #8
    23c8:	4681      	mov	r9, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    23ca:	4b24      	ldr	r3, [pc, #144]	; (245c <prvSampleTimeNow+0xa0>)
    23cc:	4798      	blx	r3
    23ce:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
    23d0:	4b23      	ldr	r3, [pc, #140]	; (2460 <prvSampleTimeNow+0xa4>)
    23d2:	681b      	ldr	r3, [r3, #0]
    23d4:	4298      	cmp	r0, r3
    23d6:	d233      	bcs.n	2440 <prvSampleTimeNow+0x84>
    23d8:	e023      	b.n	2422 <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    23da:	68db      	ldr	r3, [r3, #12]
    23dc:	681a      	ldr	r2, [r3, #0]
    23de:	4692      	mov	sl, r2

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    23e0:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    23e2:	1d25      	adds	r5, r4, #4
    23e4:	0028      	movs	r0, r5
    23e6:	47b8      	blx	r7
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    23e8:	0020      	movs	r0, r4
    23ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    23ec:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    23ee:	69e3      	ldr	r3, [r4, #28]
    23f0:	2b01      	cmp	r3, #1
    23f2:	d118      	bne.n	2426 <prvSampleTimeNow+0x6a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    23f4:	69a3      	ldr	r3, [r4, #24]
    23f6:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
    23f8:	459a      	cmp	sl, r3
    23fa:	d207      	bcs.n	240c <prvSampleTimeNow+0x50>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    23fc:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    23fe:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2400:	4b18      	ldr	r3, [pc, #96]	; (2464 <prvSampleTimeNow+0xa8>)
    2402:	6818      	ldr	r0, [r3, #0]
    2404:	0029      	movs	r1, r5
    2406:	4b18      	ldr	r3, [pc, #96]	; (2468 <prvSampleTimeNow+0xac>)
    2408:	4798      	blx	r3
    240a:	e00c      	b.n	2426 <prvSampleTimeNow+0x6a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    240c:	2300      	movs	r3, #0
    240e:	9300      	str	r3, [sp, #0]
    2410:	4652      	mov	r2, sl
    2412:	2100      	movs	r1, #0
    2414:	0020      	movs	r0, r4
    2416:	4c15      	ldr	r4, [pc, #84]	; (246c <prvSampleTimeNow+0xb0>)
    2418:	47a0      	blx	r4
				configASSERT( xResult );
    241a:	2800      	cmp	r0, #0
    241c:	d103      	bne.n	2426 <prvSampleTimeNow+0x6a>
    241e:	b672      	cpsid	i
    2420:	e7fe      	b.n	2420 <prvSampleTimeNow+0x64>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2422:	4e10      	ldr	r6, [pc, #64]	; (2464 <prvSampleTimeNow+0xa8>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2424:	4f12      	ldr	r7, [pc, #72]	; (2470 <prvSampleTimeNow+0xb4>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2426:	6833      	ldr	r3, [r6, #0]
    2428:	681a      	ldr	r2, [r3, #0]
    242a:	2a00      	cmp	r2, #0
    242c:	d1d5      	bne.n	23da <prvSampleTimeNow+0x1e>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    242e:	4a11      	ldr	r2, [pc, #68]	; (2474 <prvSampleTimeNow+0xb8>)
    2430:	490c      	ldr	r1, [pc, #48]	; (2464 <prvSampleTimeNow+0xa8>)
    2432:	6810      	ldr	r0, [r2, #0]
    2434:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    2436:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
    2438:	2301      	movs	r3, #1
    243a:	464a      	mov	r2, r9
    243c:	6013      	str	r3, [r2, #0]
    243e:	e002      	b.n	2446 <prvSampleTimeNow+0x8a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    2440:	2300      	movs	r3, #0
    2442:	464a      	mov	r2, r9
    2444:	6013      	str	r3, [r2, #0]
	}

	xLastTime = xTimeNow;
    2446:	4b06      	ldr	r3, [pc, #24]	; (2460 <prvSampleTimeNow+0xa4>)
    2448:	4642      	mov	r2, r8
    244a:	601a      	str	r2, [r3, #0]

	return xTimeNow;
}
    244c:	4640      	mov	r0, r8
    244e:	b002      	add	sp, #8
    2450:	bc1c      	pop	{r2, r3, r4}
    2452:	4690      	mov	r8, r2
    2454:	4699      	mov	r9, r3
    2456:	46a2      	mov	sl, r4
    2458:	bdf0      	pop	{r4, r5, r6, r7, pc}
    245a:	46c0      	nop			; (mov r8, r8)
    245c:	00001bd5 	.word	0x00001bd5
    2460:	20003c9c 	.word	0x20003c9c
    2464:	20003c70 	.word	0x20003c70
    2468:	0000121d 	.word	0x0000121d
    246c:	00002359 	.word	0x00002359
    2470:	0000124d 	.word	0x0000124d
    2474:	20003ca4 	.word	0x20003ca4

00002478 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    2478:	b5f0      	push	{r4, r5, r6, r7, lr}
    247a:	465f      	mov	r7, fp
    247c:	4656      	mov	r6, sl
    247e:	464d      	mov	r5, r9
    2480:	4644      	mov	r4, r8
    2482:	b4f0      	push	{r4, r5, r6, r7}
    2484:	b089      	sub	sp, #36	; 0x24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2486:	4b52      	ldr	r3, [pc, #328]	; (25d0 <prvTimerTask+0x158>)
    2488:	469b      	mov	fp, r3
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    248a:	4b52      	ldr	r3, [pc, #328]	; (25d4 <prvTimerTask+0x15c>)
    248c:	4699      	mov	r9, r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    248e:	4b52      	ldr	r3, [pc, #328]	; (25d8 <prvTimerTask+0x160>)
    2490:	4698      	mov	r8, r3
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2492:	465b      	mov	r3, fp
    2494:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    2496:	681a      	ldr	r2, [r3, #0]
    2498:	2a00      	cmp	r2, #0
    249a:	d100      	bne.n	249e <prvTimerTask+0x26>
    249c:	e08f      	b.n	25be <prvTimerTask+0x146>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    249e:	68db      	ldr	r3, [r3, #12]
    24a0:	681d      	ldr	r5, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    24a2:	4b4c      	ldr	r3, [pc, #304]	; (25d4 <prvTimerTask+0x15c>)
    24a4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    24a6:	a805      	add	r0, sp, #20
    24a8:	4b4b      	ldr	r3, [pc, #300]	; (25d8 <prvTimerTask+0x160>)
    24aa:	4798      	blx	r3
    24ac:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
    24ae:	9b05      	ldr	r3, [sp, #20]
    24b0:	2b00      	cmp	r3, #0
    24b2:	d131      	bne.n	2518 <prvTimerTask+0xa0>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    24b4:	4285      	cmp	r5, r0
    24b6:	d823      	bhi.n	2500 <prvTimerTask+0x88>
			{
				( void ) xTaskResumeAll();
    24b8:	4b48      	ldr	r3, [pc, #288]	; (25dc <prvTimerTask+0x164>)
    24ba:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    24bc:	4b44      	ldr	r3, [pc, #272]	; (25d0 <prvTimerTask+0x158>)
    24be:	681b      	ldr	r3, [r3, #0]
    24c0:	68db      	ldr	r3, [r3, #12]
    24c2:	68de      	ldr	r6, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    24c4:	1d30      	adds	r0, r6, #4
    24c6:	4b46      	ldr	r3, [pc, #280]	; (25e0 <prvTimerTask+0x168>)
    24c8:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    24ca:	69f3      	ldr	r3, [r6, #28]
    24cc:	2b01      	cmp	r3, #1
    24ce:	d113      	bne.n	24f8 <prvTimerTask+0x80>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    24d0:	69b3      	ldr	r3, [r6, #24]
    24d2:	18e9      	adds	r1, r5, r3
    24d4:	002b      	movs	r3, r5
    24d6:	0022      	movs	r2, r4
    24d8:	0030      	movs	r0, r6
    24da:	4c42      	ldr	r4, [pc, #264]	; (25e4 <prvTimerTask+0x16c>)
    24dc:	47a0      	blx	r4
    24de:	2801      	cmp	r0, #1
    24e0:	d10a      	bne.n	24f8 <prvTimerTask+0x80>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    24e2:	2300      	movs	r3, #0
    24e4:	9300      	str	r3, [sp, #0]
    24e6:	002a      	movs	r2, r5
    24e8:	2100      	movs	r1, #0
    24ea:	0030      	movs	r0, r6
    24ec:	4c3e      	ldr	r4, [pc, #248]	; (25e8 <prvTimerTask+0x170>)
    24ee:	47a0      	blx	r4
			configASSERT( xResult );
    24f0:	2800      	cmp	r0, #0
    24f2:	d101      	bne.n	24f8 <prvTimerTask+0x80>
    24f4:	b672      	cpsid	i
    24f6:	e7fe      	b.n	24f6 <prvTimerTask+0x7e>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    24f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
    24fa:	0030      	movs	r0, r6
    24fc:	4798      	blx	r3
    24fe:	e00d      	b.n	251c <prvTimerTask+0xa4>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    2500:	1b29      	subs	r1, r5, r4
    2502:	4b3a      	ldr	r3, [pc, #232]	; (25ec <prvTimerTask+0x174>)
    2504:	6818      	ldr	r0, [r3, #0]
    2506:	4b3a      	ldr	r3, [pc, #232]	; (25f0 <prvTimerTask+0x178>)
    2508:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    250a:	4b34      	ldr	r3, [pc, #208]	; (25dc <prvTimerTask+0x164>)
    250c:	4798      	blx	r3
    250e:	2800      	cmp	r0, #0
    2510:	d104      	bne.n	251c <prvTimerTask+0xa4>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
    2512:	4b38      	ldr	r3, [pc, #224]	; (25f4 <prvTimerTask+0x17c>)
    2514:	4798      	blx	r3
    2516:	e001      	b.n	251c <prvTimerTask+0xa4>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    2518:	4b30      	ldr	r3, [pc, #192]	; (25dc <prvTimerTask+0x164>)
    251a:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    251c:	4d33      	ldr	r5, [pc, #204]	; (25ec <prvTimerTask+0x174>)
    251e:	4c36      	ldr	r4, [pc, #216]	; (25f8 <prvTimerTask+0x180>)
    2520:	e045      	b.n	25ae <prvTimerTask+0x136>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2522:	9b05      	ldr	r3, [sp, #20]
    2524:	9303      	str	r3, [sp, #12]
    2526:	2b00      	cmp	r3, #0
    2528:	db41      	blt.n	25ae <prvTimerTask+0x136>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    252a:	9e07      	ldr	r6, [sp, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    252c:	6973      	ldr	r3, [r6, #20]
    252e:	2b00      	cmp	r3, #0
    2530:	d002      	beq.n	2538 <prvTimerTask+0xc0>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2532:	1d30      	adds	r0, r6, #4
    2534:	4b2a      	ldr	r3, [pc, #168]	; (25e0 <prvTimerTask+0x168>)
    2536:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2538:	a804      	add	r0, sp, #16
    253a:	4b27      	ldr	r3, [pc, #156]	; (25d8 <prvTimerTask+0x160>)
    253c:	4798      	blx	r3

			switch( xMessage.xMessageID )
    253e:	9b05      	ldr	r3, [sp, #20]
    2540:	2b09      	cmp	r3, #9
    2542:	d834      	bhi.n	25ae <prvTimerTask+0x136>
    2544:	009b      	lsls	r3, r3, #2
    2546:	4a2d      	ldr	r2, [pc, #180]	; (25fc <prvTimerTask+0x184>)
    2548:	58d3      	ldr	r3, [r2, r3]
    254a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    254c:	9b06      	ldr	r3, [sp, #24]
    254e:	69b2      	ldr	r2, [r6, #24]
    2550:	4694      	mov	ip, r2
    2552:	4463      	add	r3, ip
    2554:	0019      	movs	r1, r3
    2556:	9b06      	ldr	r3, [sp, #24]
    2558:	0002      	movs	r2, r0
    255a:	0030      	movs	r0, r6
    255c:	4f21      	ldr	r7, [pc, #132]	; (25e4 <prvTimerTask+0x16c>)
    255e:	47b8      	blx	r7
    2560:	2801      	cmp	r0, #1
    2562:	d124      	bne.n	25ae <prvTimerTask+0x136>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2564:	0030      	movs	r0, r6
    2566:	6a73      	ldr	r3, [r6, #36]	; 0x24
    2568:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    256a:	69f3      	ldr	r3, [r6, #28]
    256c:	2b01      	cmp	r3, #1
    256e:	d11e      	bne.n	25ae <prvTimerTask+0x136>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2570:	9b06      	ldr	r3, [sp, #24]
    2572:	69b1      	ldr	r1, [r6, #24]
    2574:	468c      	mov	ip, r1
    2576:	4463      	add	r3, ip
    2578:	001a      	movs	r2, r3
    257a:	2300      	movs	r3, #0
    257c:	9300      	str	r3, [sp, #0]
    257e:	2100      	movs	r1, #0
    2580:	0030      	movs	r0, r6
    2582:	4e19      	ldr	r6, [pc, #100]	; (25e8 <prvTimerTask+0x170>)
    2584:	47b0      	blx	r6
							configASSERT( xResult );
    2586:	2800      	cmp	r0, #0
    2588:	d111      	bne.n	25ae <prvTimerTask+0x136>
    258a:	b672      	cpsid	i
    258c:	e7fe      	b.n	258c <prvTimerTask+0x114>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    258e:	9906      	ldr	r1, [sp, #24]
    2590:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    2592:	2900      	cmp	r1, #0
    2594:	d101      	bne.n	259a <prvTimerTask+0x122>
    2596:	b672      	cpsid	i
    2598:	e7fe      	b.n	2598 <prvTimerTask+0x120>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    259a:	1841      	adds	r1, r0, r1
    259c:	0003      	movs	r3, r0
    259e:	0002      	movs	r2, r0
    25a0:	0030      	movs	r0, r6
    25a2:	4e10      	ldr	r6, [pc, #64]	; (25e4 <prvTimerTask+0x16c>)
    25a4:	47b0      	blx	r6
    25a6:	e002      	b.n	25ae <prvTimerTask+0x136>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    25a8:	0030      	movs	r0, r6
    25aa:	4b15      	ldr	r3, [pc, #84]	; (2600 <prvTimerTask+0x188>)
    25ac:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    25ae:	2300      	movs	r3, #0
    25b0:	2200      	movs	r2, #0
    25b2:	a905      	add	r1, sp, #20
    25b4:	6828      	ldr	r0, [r5, #0]
    25b6:	47a0      	blx	r4
    25b8:	2800      	cmp	r0, #0
    25ba:	d1b2      	bne.n	2522 <prvTimerTask+0xaa>
    25bc:	e769      	b.n	2492 <prvTimerTask+0x1a>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    25be:	47c8      	blx	r9
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    25c0:	a805      	add	r0, sp, #20
    25c2:	47c0      	blx	r8
    25c4:	0004      	movs	r4, r0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    25c6:	2500      	movs	r5, #0
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
    25c8:	9b05      	ldr	r3, [sp, #20]
    25ca:	2b00      	cmp	r3, #0
    25cc:	d098      	beq.n	2500 <prvTimerTask+0x88>
    25ce:	e7a3      	b.n	2518 <prvTimerTask+0xa0>
    25d0:	20003c70 	.word	0x20003c70
    25d4:	00001bc5 	.word	0x00001bc5
    25d8:	000023bd 	.word	0x000023bd
    25dc:	00001d19 	.word	0x00001d19
    25e0:	0000124d 	.word	0x0000124d
    25e4:	00002261 	.word	0x00002261
    25e8:	00002359 	.word	0x00002359
    25ec:	20003ca0 	.word	0x20003ca0
    25f0:	000018a9 	.word	0x000018a9
    25f4:	00001035 	.word	0x00001035
    25f8:	0000171d 	.word	0x0000171d
    25fc:	00006bd8 	.word	0x00006bd8
    2600:	000011d9 	.word	0x000011d9

00002604 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2604:	b5f0      	push	{r4, r5, r6, r7, lr}
    2606:	465f      	mov	r7, fp
    2608:	4656      	mov	r6, sl
    260a:	464d      	mov	r5, r9
    260c:	4644      	mov	r4, r8
    260e:	b4f0      	push	{r4, r5, r6, r7}
    2610:	b091      	sub	sp, #68	; 0x44
    2612:	0005      	movs	r5, r0
    2614:	000c      	movs	r4, r1
    2616:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2618:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    261a:	0008      	movs	r0, r1
    261c:	4bc4      	ldr	r3, [pc, #784]	; (2930 <usart_init+0x32c>)
    261e:	4798      	blx	r3
    2620:	1e02      	subs	r2, r0, #0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    2622:	2a05      	cmp	r2, #5
    2624:	d003      	beq.n	262e <usart_init+0x2a>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2626:	0007      	movs	r7, r0
    2628:	3712      	adds	r7, #18
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    262a:	0003      	movs	r3, r0
    262c:	e001      	b.n	2632 <usart_init+0x2e>
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    262e:	2718      	movs	r7, #24
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    2630:	2301      	movs	r3, #1
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2632:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2634:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2636:	07c9      	lsls	r1, r1, #31
    2638:	d500      	bpl.n	263c <usart_init+0x38>
    263a:	e171      	b.n	2920 <usart_init+0x31c>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    263c:	6821      	ldr	r1, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    263e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2640:	0789      	lsls	r1, r1, #30
    2642:	d500      	bpl.n	2646 <usart_init+0x42>
    2644:	e16c      	b.n	2920 <usart_init+0x31c>
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    2646:	2a05      	cmp	r2, #5
    2648:	d107      	bne.n	265a <usart_init+0x56>
    264a:	48ba      	ldr	r0, [pc, #744]	; (2934 <usart_init+0x330>)
    264c:	6a02      	ldr	r2, [r0, #32]
    264e:	2101      	movs	r1, #1
    2650:	4099      	lsls	r1, r3
    2652:	000b      	movs	r3, r1
    2654:	4313      	orrs	r3, r2
    2656:	6203      	str	r3, [r0, #32]
    2658:	e006      	b.n	2668 <usart_init+0x64>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    265a:	48b6      	ldr	r0, [pc, #728]	; (2934 <usart_init+0x330>)
    265c:	69c2      	ldr	r2, [r0, #28]
    265e:	2101      	movs	r1, #1
    2660:	4099      	lsls	r1, r3
    2662:	000b      	movs	r3, r1
    2664:	4313      	orrs	r3, r2
    2666:	61c3      	str	r3, [r0, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    2668:	a90f      	add	r1, sp, #60	; 0x3c
    266a:	232d      	movs	r3, #45	; 0x2d
    266c:	4698      	mov	r8, r3
    266e:	5cf3      	ldrb	r3, [r6, r3]
    2670:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2672:	b2ff      	uxtb	r7, r7
    2674:	0038      	movs	r0, r7
    2676:	4bb0      	ldr	r3, [pc, #704]	; (2938 <usart_init+0x334>)
    2678:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    267a:	0038      	movs	r0, r7
    267c:	4baf      	ldr	r3, [pc, #700]	; (293c <usart_init+0x338>)
    267e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2680:	4643      	mov	r3, r8
    2682:	5cf0      	ldrb	r0, [r6, r3]
    2684:	2100      	movs	r1, #0
    2686:	4bae      	ldr	r3, [pc, #696]	; (2940 <usart_init+0x33c>)
    2688:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    268a:	7af3      	ldrb	r3, [r6, #11]
    268c:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    268e:	2324      	movs	r3, #36	; 0x24
    2690:	5cf3      	ldrb	r3, [r6, r3]
    2692:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2694:	2325      	movs	r3, #37	; 0x25
    2696:	5cf3      	ldrb	r3, [r6, r3]
    2698:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    269a:	7ef3      	ldrb	r3, [r6, #27]
    269c:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    269e:	7f33      	ldrb	r3, [r6, #28]
    26a0:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    26a2:	682b      	ldr	r3, [r5, #0]
    26a4:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    26a6:	0018      	movs	r0, r3
    26a8:	4ba1      	ldr	r3, [pc, #644]	; (2930 <usart_init+0x32c>)
    26aa:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    26ac:	3012      	adds	r0, #18
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    26ae:	2200      	movs	r2, #0
    26b0:	230e      	movs	r3, #14
    26b2:	a906      	add	r1, sp, #24
    26b4:	468c      	mov	ip, r1
    26b6:	4463      	add	r3, ip
    26b8:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    26ba:	8a32      	ldrh	r2, [r6, #16]
    26bc:	9202      	str	r2, [sp, #8]
    26be:	2380      	movs	r3, #128	; 0x80
    26c0:	01db      	lsls	r3, r3, #7
    26c2:	429a      	cmp	r2, r3
    26c4:	d01a      	beq.n	26fc <usart_init+0xf8>
    26c6:	d804      	bhi.n	26d2 <usart_init+0xce>
    26c8:	2380      	movs	r3, #128	; 0x80
    26ca:	019b      	lsls	r3, r3, #6
    26cc:	429a      	cmp	r2, r3
    26ce:	d00b      	beq.n	26e8 <usart_init+0xe4>
    26d0:	e107      	b.n	28e2 <usart_init+0x2de>
    26d2:	23c0      	movs	r3, #192	; 0xc0
    26d4:	01db      	lsls	r3, r3, #7
    26d6:	9a02      	ldr	r2, [sp, #8]
    26d8:	429a      	cmp	r2, r3
    26da:	d00a      	beq.n	26f2 <usart_init+0xee>
    26dc:	2380      	movs	r3, #128	; 0x80
    26de:	021b      	lsls	r3, r3, #8
    26e0:	429a      	cmp	r2, r3
    26e2:	d100      	bne.n	26e6 <usart_init+0xe2>
    26e4:	e102      	b.n	28ec <usart_init+0x2e8>
    26e6:	e0fc      	b.n	28e2 <usart_init+0x2de>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    26e8:	2310      	movs	r3, #16
    26ea:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    26ec:	3b0f      	subs	r3, #15
    26ee:	9307      	str	r3, [sp, #28]
    26f0:	e100      	b.n	28f4 <usart_init+0x2f0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    26f2:	2308      	movs	r3, #8
    26f4:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    26f6:	3b07      	subs	r3, #7
    26f8:	9307      	str	r3, [sp, #28]
    26fa:	e0fb      	b.n	28f4 <usart_init+0x2f0>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    26fc:	6833      	ldr	r3, [r6, #0]
    26fe:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    2700:	68f3      	ldr	r3, [r6, #12]
    2702:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    2704:	6973      	ldr	r3, [r6, #20]
    2706:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2708:	7e33      	ldrb	r3, [r6, #24]
    270a:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    270c:	2326      	movs	r3, #38	; 0x26
    270e:	5cf3      	ldrb	r3, [r6, r3]
    2710:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    2712:	6873      	ldr	r3, [r6, #4]
    2714:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    2716:	2b00      	cmp	r3, #0
    2718:	d016      	beq.n	2748 <usart_init+0x144>
    271a:	2380      	movs	r3, #128	; 0x80
    271c:	055b      	lsls	r3, r3, #21
    271e:	459a      	cmp	sl, r3
    2720:	d139      	bne.n	2796 <usart_init+0x192>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    2722:	2327      	movs	r3, #39	; 0x27
    2724:	5cf3      	ldrb	r3, [r6, r3]
    2726:	2b00      	cmp	r3, #0
    2728:	d139      	bne.n	279e <usart_init+0x19a>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    272a:	6a33      	ldr	r3, [r6, #32]
    272c:	001f      	movs	r7, r3
    272e:	b2c0      	uxtb	r0, r0
    2730:	4b84      	ldr	r3, [pc, #528]	; (2944 <usart_init+0x340>)
    2732:	4798      	blx	r3
    2734:	0001      	movs	r1, r0
    2736:	220e      	movs	r2, #14
    2738:	ab06      	add	r3, sp, #24
    273a:	469c      	mov	ip, r3
    273c:	4462      	add	r2, ip
    273e:	0038      	movs	r0, r7
    2740:	4b81      	ldr	r3, [pc, #516]	; (2948 <usart_init+0x344>)
    2742:	4798      	blx	r3
    2744:	0003      	movs	r3, r0
    2746:	e027      	b.n	2798 <usart_init+0x194>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2748:	2308      	movs	r3, #8
    274a:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    274c:	2300      	movs	r3, #0
    274e:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    2750:	2327      	movs	r3, #39	; 0x27
    2752:	5cf3      	ldrb	r3, [r6, r3]
    2754:	2b00      	cmp	r3, #0
    2756:	d00c      	beq.n	2772 <usart_init+0x16e>
				status_code =
    2758:	9b06      	ldr	r3, [sp, #24]
    275a:	9300      	str	r3, [sp, #0]
    275c:	9b07      	ldr	r3, [sp, #28]
    275e:	220e      	movs	r2, #14
    2760:	a906      	add	r1, sp, #24
    2762:	468c      	mov	ip, r1
    2764:	4462      	add	r2, ip
    2766:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2768:	6a30      	ldr	r0, [r6, #32]
    276a:	4f78      	ldr	r7, [pc, #480]	; (294c <usart_init+0x348>)
    276c:	47b8      	blx	r7
    276e:	0003      	movs	r3, r0
    2770:	e012      	b.n	2798 <usart_init+0x194>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    2772:	6a33      	ldr	r3, [r6, #32]
    2774:	001f      	movs	r7, r3
    2776:	b2c0      	uxtb	r0, r0
    2778:	4b72      	ldr	r3, [pc, #456]	; (2944 <usart_init+0x340>)
    277a:	4798      	blx	r3
    277c:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    277e:	9b06      	ldr	r3, [sp, #24]
    2780:	9300      	str	r3, [sp, #0]
    2782:	9b07      	ldr	r3, [sp, #28]
    2784:	220e      	movs	r2, #14
    2786:	a806      	add	r0, sp, #24
    2788:	4684      	mov	ip, r0
    278a:	4462      	add	r2, ip
    278c:	0038      	movs	r0, r7
    278e:	4f6f      	ldr	r7, [pc, #444]	; (294c <usart_init+0x348>)
    2790:	47b8      	blx	r7
    2792:	0003      	movs	r3, r0
    2794:	e000      	b.n	2798 <usart_init+0x194>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    2796:	2300      	movs	r3, #0
    2798:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    279a:	d000      	beq.n	279e <usart_init+0x19a>
    279c:	e0c0      	b.n	2920 <usart_init+0x31c>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    279e:	7e73      	ldrb	r3, [r6, #25]
    27a0:	2b00      	cmp	r3, #0
    27a2:	d002      	beq.n	27aa <usart_init+0x1a6>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    27a4:	7eb3      	ldrb	r3, [r6, #26]
    27a6:	464a      	mov	r2, r9
    27a8:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    27aa:	682a      	ldr	r2, [r5, #0]
    27ac:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    27ae:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    27b0:	2b00      	cmp	r3, #0
    27b2:	d1fc      	bne.n	27ae <usart_init+0x1aa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    27b4:	330e      	adds	r3, #14
    27b6:	aa06      	add	r2, sp, #24
    27b8:	4694      	mov	ip, r2
    27ba:	4463      	add	r3, ip
    27bc:	881b      	ldrh	r3, [r3, #0]
    27be:	464a      	mov	r2, r9
    27c0:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    27c2:	9b04      	ldr	r3, [sp, #16]
    27c4:	465a      	mov	r2, fp
    27c6:	4313      	orrs	r3, r2
    27c8:	9a03      	ldr	r2, [sp, #12]
    27ca:	4313      	orrs	r3, r2
    27cc:	4652      	mov	r2, sl
    27ce:	4313      	orrs	r3, r2
    27d0:	433b      	orrs	r3, r7
    27d2:	4642      	mov	r2, r8
    27d4:	0212      	lsls	r2, r2, #8
    27d6:	4313      	orrs	r3, r2
    27d8:	9a05      	ldr	r2, [sp, #20]
    27da:	0757      	lsls	r7, r2, #29
    27dc:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    27de:	2327      	movs	r3, #39	; 0x27
    27e0:	5cf3      	ldrb	r3, [r6, r3]
    27e2:	2b00      	cmp	r3, #0
    27e4:	d101      	bne.n	27ea <usart_init+0x1e6>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    27e6:	3304      	adds	r3, #4
    27e8:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    27ea:	7e71      	ldrb	r1, [r6, #25]
    27ec:	0289      	lsls	r1, r1, #10
    27ee:	7f33      	ldrb	r3, [r6, #28]
    27f0:	025b      	lsls	r3, r3, #9
    27f2:	4319      	orrs	r1, r3
    27f4:	7f73      	ldrb	r3, [r6, #29]
    27f6:	021b      	lsls	r3, r3, #8
    27f8:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    27fa:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    27fc:	5cf3      	ldrb	r3, [r6, r3]
    27fe:	045b      	lsls	r3, r3, #17
    2800:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2802:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    2804:	5cf2      	ldrb	r2, [r6, r3]
    2806:	0412      	lsls	r2, r2, #16
    2808:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    280a:	7af3      	ldrb	r3, [r6, #11]
    280c:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    280e:	8933      	ldrh	r3, [r6, #8]
    2810:	2bff      	cmp	r3, #255	; 0xff
    2812:	d004      	beq.n	281e <usart_init+0x21a>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2814:	2280      	movs	r2, #128	; 0x80
    2816:	0452      	lsls	r2, r2, #17
    2818:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    281a:	4319      	orrs	r1, r3
    281c:	e005      	b.n	282a <usart_init+0x226>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    281e:	7ef3      	ldrb	r3, [r6, #27]
    2820:	2b00      	cmp	r3, #0
    2822:	d002      	beq.n	282a <usart_init+0x226>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2824:	2380      	movs	r3, #128	; 0x80
    2826:	04db      	lsls	r3, r3, #19
    2828:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    282a:	232c      	movs	r3, #44	; 0x2c
    282c:	5cf3      	ldrb	r3, [r6, r3]
    282e:	2b00      	cmp	r3, #0
    2830:	d103      	bne.n	283a <usart_init+0x236>
    2832:	4b47      	ldr	r3, [pc, #284]	; (2950 <usart_init+0x34c>)
    2834:	789b      	ldrb	r3, [r3, #2]
    2836:	079b      	lsls	r3, r3, #30
    2838:	d501      	bpl.n	283e <usart_init+0x23a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    283a:	2380      	movs	r3, #128	; 0x80
    283c:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    283e:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2840:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2842:	2b00      	cmp	r3, #0
    2844:	d1fc      	bne.n	2840 <usart_init+0x23c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    2846:	464b      	mov	r3, r9
    2848:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    284a:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    284c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    284e:	2b00      	cmp	r3, #0
    2850:	d1fc      	bne.n	284c <usart_init+0x248>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    2852:	464b      	mov	r3, r9
    2854:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2856:	ab0e      	add	r3, sp, #56	; 0x38
    2858:	2280      	movs	r2, #128	; 0x80
    285a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    285c:	2200      	movs	r2, #0
    285e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2860:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2862:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    2864:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2866:	930a      	str	r3, [sp, #40]	; 0x28
    2868:	6b73      	ldr	r3, [r6, #52]	; 0x34
    286a:	930b      	str	r3, [sp, #44]	; 0x2c
    286c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    286e:	930c      	str	r3, [sp, #48]	; 0x30
    2870:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2872:	9302      	str	r3, [sp, #8]
    2874:	930d      	str	r3, [sp, #52]	; 0x34
    2876:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2878:	ae0e      	add	r6, sp, #56	; 0x38
    287a:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    287c:	00bb      	lsls	r3, r7, #2
    287e:	aa0a      	add	r2, sp, #40	; 0x28
    2880:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    2882:	2800      	cmp	r0, #0
    2884:	d102      	bne.n	288c <usart_init+0x288>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2886:	0020      	movs	r0, r4
    2888:	4b32      	ldr	r3, [pc, #200]	; (2954 <usart_init+0x350>)
    288a:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    288c:	1c43      	adds	r3, r0, #1
    288e:	d005      	beq.n	289c <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2890:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2892:	0c00      	lsrs	r0, r0, #16
    2894:	b2c0      	uxtb	r0, r0
    2896:	0031      	movs	r1, r6
    2898:	4b2f      	ldr	r3, [pc, #188]	; (2958 <usart_init+0x354>)
    289a:	4798      	blx	r3
    289c:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    289e:	2f04      	cmp	r7, #4
    28a0:	d1eb      	bne.n	287a <usart_init+0x276>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    28a2:	2300      	movs	r3, #0
    28a4:	60eb      	str	r3, [r5, #12]
    28a6:	612b      	str	r3, [r5, #16]
    28a8:	616b      	str	r3, [r5, #20]
    28aa:	61ab      	str	r3, [r5, #24]
    28ac:	61eb      	str	r3, [r5, #28]
    28ae:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    28b0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    28b2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    28b4:	2200      	movs	r2, #0
    28b6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    28b8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    28ba:	3330      	adds	r3, #48	; 0x30
    28bc:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    28be:	3301      	adds	r3, #1
    28c0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    28c2:	3301      	adds	r3, #1
    28c4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    28c6:	3301      	adds	r3, #1
    28c8:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    28ca:	6828      	ldr	r0, [r5, #0]
    28cc:	4b18      	ldr	r3, [pc, #96]	; (2930 <usart_init+0x32c>)
    28ce:	4798      	blx	r3
    28d0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    28d2:	4922      	ldr	r1, [pc, #136]	; (295c <usart_init+0x358>)
    28d4:	4b22      	ldr	r3, [pc, #136]	; (2960 <usart_init+0x35c>)
    28d6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    28d8:	00a4      	lsls	r4, r4, #2
    28da:	4b22      	ldr	r3, [pc, #136]	; (2964 <usart_init+0x360>)
    28dc:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    28de:	2000      	movs	r0, #0
    28e0:	e01e      	b.n	2920 <usart_init+0x31c>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    28e2:	2310      	movs	r3, #16
    28e4:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    28e6:	2300      	movs	r3, #0
    28e8:	9307      	str	r3, [sp, #28]
    28ea:	e003      	b.n	28f4 <usart_init+0x2f0>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    28ec:	2303      	movs	r3, #3
    28ee:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    28f0:	2300      	movs	r3, #0
    28f2:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    28f4:	6833      	ldr	r3, [r6, #0]
    28f6:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    28f8:	68f3      	ldr	r3, [r6, #12]
    28fa:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    28fc:	6973      	ldr	r3, [r6, #20]
    28fe:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2900:	7e33      	ldrb	r3, [r6, #24]
    2902:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2904:	2326      	movs	r3, #38	; 0x26
    2906:	5cf3      	ldrb	r3, [r6, r3]
    2908:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    290a:	6873      	ldr	r3, [r6, #4]
    290c:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    290e:	2b00      	cmp	r3, #0
    2910:	d100      	bne.n	2914 <usart_init+0x310>
    2912:	e71d      	b.n	2750 <usart_init+0x14c>
    2914:	2380      	movs	r3, #128	; 0x80
    2916:	055b      	lsls	r3, r3, #21
    2918:	459a      	cmp	sl, r3
    291a:	d100      	bne.n	291e <usart_init+0x31a>
    291c:	e701      	b.n	2722 <usart_init+0x11e>
    291e:	e73e      	b.n	279e <usart_init+0x19a>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2920:	b011      	add	sp, #68	; 0x44
    2922:	bc3c      	pop	{r2, r3, r4, r5}
    2924:	4690      	mov	r8, r2
    2926:	4699      	mov	r9, r3
    2928:	46a2      	mov	sl, r4
    292a:	46ab      	mov	fp, r5
    292c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    292e:	46c0      	nop			; (mov r8, r8)
    2930:	00000f11 	.word	0x00000f11
    2934:	40000400 	.word	0x40000400
    2938:	00003851 	.word	0x00003851
    293c:	000037e1 	.word	0x000037e1
    2940:	00000d41 	.word	0x00000d41
    2944:	00003875 	.word	0x00003875
    2948:	00000b51 	.word	0x00000b51
    294c:	00000b79 	.word	0x00000b79
    2950:	41002000 	.word	0x41002000
    2954:	00000d8d 	.word	0x00000d8d
    2958:	0000394d 	.word	0x0000394d
    295c:	00002abd 	.word	0x00002abd
    2960:	00002c4d 	.word	0x00002c4d
    2964:	20003d64 	.word	0x20003d64

00002968 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2968:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    296a:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    296c:	2a00      	cmp	r2, #0
    296e:	d00e      	beq.n	298e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    2970:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2972:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2974:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    2976:	2a00      	cmp	r2, #0
    2978:	d109      	bne.n	298e <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    297a:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    297c:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    297e:	2a00      	cmp	r2, #0
    2980:	d1fc      	bne.n	297c <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    2982:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2984:	2102      	movs	r1, #2
    2986:	7e1a      	ldrb	r2, [r3, #24]
    2988:	420a      	tst	r2, r1
    298a:	d0fc      	beq.n	2986 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    298c:	2300      	movs	r3, #0
}
    298e:	0018      	movs	r0, r3
    2990:	4770      	bx	lr
    2992:	46c0      	nop			; (mov r8, r8)

00002994 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2994:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2996:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2998:	2a00      	cmp	r2, #0
    299a:	d030      	beq.n	29fe <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    299c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    299e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    29a0:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    29a2:	2a00      	cmp	r2, #0
    29a4:	d12b      	bne.n	29fe <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    29a6:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    29a8:	7e10      	ldrb	r0, [r2, #24]
    29aa:	0740      	lsls	r0, r0, #29
    29ac:	d527      	bpl.n	29fe <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    29ae:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    29b0:	2b00      	cmp	r3, #0
    29b2:	d1fc      	bne.n	29ae <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    29b4:	8b53      	ldrh	r3, [r2, #26]
    29b6:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    29b8:	0698      	lsls	r0, r3, #26
    29ba:	d01d      	beq.n	29f8 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    29bc:	0798      	lsls	r0, r3, #30
    29be:	d503      	bpl.n	29c8 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    29c0:	2302      	movs	r3, #2
    29c2:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    29c4:	3318      	adds	r3, #24
    29c6:	e01a      	b.n	29fe <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    29c8:	0758      	lsls	r0, r3, #29
    29ca:	d503      	bpl.n	29d4 <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    29cc:	2304      	movs	r3, #4
    29ce:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    29d0:	331a      	adds	r3, #26
    29d2:	e014      	b.n	29fe <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    29d4:	07d8      	lsls	r0, r3, #31
    29d6:	d503      	bpl.n	29e0 <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    29d8:	2301      	movs	r3, #1
    29da:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    29dc:	3312      	adds	r3, #18
    29de:	e00e      	b.n	29fe <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    29e0:	06d8      	lsls	r0, r3, #27
    29e2:	d503      	bpl.n	29ec <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    29e4:	2310      	movs	r3, #16
    29e6:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    29e8:	3332      	adds	r3, #50	; 0x32
    29ea:	e008      	b.n	29fe <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    29ec:	069b      	lsls	r3, r3, #26
    29ee:	d503      	bpl.n	29f8 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    29f0:	2320      	movs	r3, #32
    29f2:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    29f4:	3321      	adds	r3, #33	; 0x21
    29f6:	e002      	b.n	29fe <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    29f8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    29fa:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    29fc:	2300      	movs	r3, #0
}
    29fe:	0018      	movs	r0, r3
    2a00:	4770      	bx	lr
    2a02:	46c0      	nop			; (mov r8, r8)

00002a04 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    2a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a06:	464f      	mov	r7, r9
    2a08:	b480      	push	{r7}
    2a0a:	b082      	sub	sp, #8
    2a0c:	0004      	movs	r4, r0
    2a0e:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2a10:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    2a12:	2a00      	cmp	r2, #0
    2a14:	d049      	beq.n	2aaa <usart_write_buffer_wait+0xa6>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2a16:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
    2a18:	3005      	adds	r0, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2a1a:	2b00      	cmp	r3, #0
    2a1c:	d045      	beq.n	2aaa <usart_write_buffer_wait+0xa6>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a1e:	6827      	ldr	r7, [r4, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2a20:	69fb      	ldr	r3, [r7, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2a22:	2b00      	cmp	r3, #0
    2a24:	d1fc      	bne.n	2a20 <usart_write_buffer_wait+0x1c>
    2a26:	4691      	mov	r9, r2
    2a28:	2500      	movs	r5, #0
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    2a2a:	2601      	movs	r6, #1
    2a2c:	e020      	b.n	2a70 <usart_write_buffer_wait+0x6c>
    2a2e:	7e3a      	ldrb	r2, [r7, #24]
    2a30:	4232      	tst	r2, r6
    2a32:	d104      	bne.n	2a3e <usart_write_buffer_wait+0x3a>
				break;
			} else if (i == USART_TIMEOUT) {
    2a34:	2b01      	cmp	r3, #1
    2a36:	d02a      	beq.n	2a8e <usart_write_buffer_wait+0x8a>
    2a38:	3b01      	subs	r3, #1

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2a3a:	2b00      	cmp	r3, #0
    2a3c:	d1f7      	bne.n	2a2e <usart_write_buffer_wait+0x2a>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    2a3e:	1c6a      	adds	r2, r5, #1
    2a40:	b292      	uxth	r2, r2
    2a42:	9b01      	ldr	r3, [sp, #4]
    2a44:	5d5b      	ldrb	r3, [r3, r5]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2a46:	7961      	ldrb	r1, [r4, #5]
    2a48:	2901      	cmp	r1, #1
    2a4a:	d002      	beq.n	2a52 <usart_write_buffer_wait+0x4e>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    2a4c:	b299      	uxth	r1, r3
    2a4e:	0015      	movs	r5, r2
    2a50:	e005      	b.n	2a5e <usart_write_buffer_wait+0x5a>

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    2a52:	1ca9      	adds	r1, r5, #2
    2a54:	b28d      	uxth	r5, r1
    2a56:	9901      	ldr	r1, [sp, #4]
    2a58:	5c89      	ldrb	r1, [r1, r2]
    2a5a:	0209      	lsls	r1, r1, #8
    2a5c:	4319      	orrs	r1, r3
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    2a5e:	0020      	movs	r0, r4
    2a60:	4b14      	ldr	r3, [pc, #80]	; (2ab4 <usart_write_buffer_wait+0xb0>)
    2a62:	4798      	blx	r3
    2a64:	464a      	mov	r2, r9
    2a66:	3a01      	subs	r2, #1
    2a68:	b293      	uxth	r3, r2
    2a6a:	4699      	mov	r9, r3
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d016      	beq.n	2a9e <usart_write_buffer_wait+0x9a>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    2a70:	7e3b      	ldrb	r3, [r7, #24]
    2a72:	4233      	tst	r3, r6
    2a74:	d1e3      	bne.n	2a3e <usart_write_buffer_wait+0x3a>
    2a76:	4b10      	ldr	r3, [pc, #64]	; (2ab8 <usart_write_buffer_wait+0xb4>)
    2a78:	e7d9      	b.n	2a2e <usart_write_buffer_wait+0x2a>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    2a7a:	7e3a      	ldrb	r2, [r7, #24]
    2a7c:	420a      	tst	r2, r1
    2a7e:	d108      	bne.n	2a92 <usart_write_buffer_wait+0x8e>
			break;
		} else if (i == USART_TIMEOUT) {
    2a80:	2b01      	cmp	r3, #1
    2a82:	d008      	beq.n	2a96 <usart_write_buffer_wait+0x92>
    2a84:	3b01      	subs	r3, #1
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2a86:	2b00      	cmp	r3, #0
    2a88:	d1f7      	bne.n	2a7a <usart_write_buffer_wait+0x76>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    2a8a:	2000      	movs	r0, #0
    2a8c:	e00d      	b.n	2aaa <usart_write_buffer_wait+0xa6>
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    2a8e:	2012      	movs	r0, #18
    2a90:	e00b      	b.n	2aaa <usart_write_buffer_wait+0xa6>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    2a92:	2000      	movs	r0, #0
    2a94:	e009      	b.n	2aaa <usart_write_buffer_wait+0xa6>
	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
    2a96:	2012      	movs	r0, #18
    2a98:	e007      	b.n	2aaa <usart_write_buffer_wait+0xa6>
		}
	}

	return STATUS_OK;
    2a9a:	2000      	movs	r0, #0
    2a9c:	e005      	b.n	2aaa <usart_write_buffer_wait+0xa6>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    2a9e:	7e3b      	ldrb	r3, [r7, #24]
    2aa0:	079b      	lsls	r3, r3, #30
    2aa2:	d4fa      	bmi.n	2a9a <usart_write_buffer_wait+0x96>
    2aa4:	4b04      	ldr	r3, [pc, #16]	; (2ab8 <usart_write_buffer_wait+0xb4>)
    2aa6:	2102      	movs	r1, #2
    2aa8:	e7e7      	b.n	2a7a <usart_write_buffer_wait+0x76>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    2aaa:	b002      	add	sp, #8
    2aac:	bc04      	pop	{r2}
    2aae:	4691      	mov	r9, r2
    2ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ab2:	46c0      	nop			; (mov r8, r8)
    2ab4:	00002969 	.word	0x00002969
    2ab8:	0000ffff 	.word	0x0000ffff

00002abc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2abe:	0080      	lsls	r0, r0, #2
    2ac0:	4b60      	ldr	r3, [pc, #384]	; (2c44 <_usart_interrupt_handler+0x188>)
    2ac2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2ac4:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2ac6:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2ac8:	2b00      	cmp	r3, #0
    2aca:	d1fc      	bne.n	2ac6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2acc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2ace:	7da6      	ldrb	r6, [r4, #22]
    2ad0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2ad2:	2330      	movs	r3, #48	; 0x30
    2ad4:	5ceb      	ldrb	r3, [r5, r3]
    2ad6:	2231      	movs	r2, #49	; 0x31
    2ad8:	5caf      	ldrb	r7, [r5, r2]
    2ada:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2adc:	07f3      	lsls	r3, r6, #31
    2ade:	d522      	bpl.n	2b26 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2ae0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2ae2:	b29b      	uxth	r3, r3
    2ae4:	2b00      	cmp	r3, #0
    2ae6:	d01c      	beq.n	2b22 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2ae8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2aea:	7813      	ldrb	r3, [r2, #0]
    2aec:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2aee:	1c51      	adds	r1, r2, #1
    2af0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2af2:	7969      	ldrb	r1, [r5, #5]
    2af4:	2901      	cmp	r1, #1
    2af6:	d001      	beq.n	2afc <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2af8:	b29b      	uxth	r3, r3
    2afa:	e004      	b.n	2b06 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2afc:	7851      	ldrb	r1, [r2, #1]
    2afe:	0209      	lsls	r1, r1, #8
    2b00:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    2b02:	3202      	adds	r2, #2
    2b04:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2b06:	05db      	lsls	r3, r3, #23
    2b08:	0ddb      	lsrs	r3, r3, #23
    2b0a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2b0c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2b0e:	3b01      	subs	r3, #1
    2b10:	b29b      	uxth	r3, r3
    2b12:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2b14:	2b00      	cmp	r3, #0
    2b16:	d106      	bne.n	2b26 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2b18:	3301      	adds	r3, #1
    2b1a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2b1c:	3301      	adds	r3, #1
    2b1e:	75a3      	strb	r3, [r4, #22]
    2b20:	e001      	b.n	2b26 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2b22:	2301      	movs	r3, #1
    2b24:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2b26:	07b3      	lsls	r3, r6, #30
    2b28:	d509      	bpl.n	2b3e <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2b2a:	2302      	movs	r3, #2
    2b2c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2b2e:	2200      	movs	r2, #0
    2b30:	3331      	adds	r3, #49	; 0x31
    2b32:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2b34:	07fb      	lsls	r3, r7, #31
    2b36:	d502      	bpl.n	2b3e <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2b38:	0028      	movs	r0, r5
    2b3a:	68eb      	ldr	r3, [r5, #12]
    2b3c:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2b3e:	0773      	lsls	r3, r6, #29
    2b40:	d560      	bpl.n	2c04 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
    2b42:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2b44:	b29b      	uxth	r3, r3
    2b46:	2b00      	cmp	r3, #0
    2b48:	d05a      	beq.n	2c00 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2b4a:	8b63      	ldrh	r3, [r4, #26]
    2b4c:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2b4e:	071a      	lsls	r2, r3, #28
    2b50:	d402      	bmi.n	2b58 <_usart_interrupt_handler+0x9c>
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2b52:	223f      	movs	r2, #63	; 0x3f
    2b54:	4013      	ands	r3, r2
    2b56:	e001      	b.n	2b5c <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2b58:	2237      	movs	r2, #55	; 0x37
    2b5a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2b5c:	2b00      	cmp	r3, #0
    2b5e:	d02d      	beq.n	2bbc <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2b60:	079a      	lsls	r2, r3, #30
    2b62:	d505      	bpl.n	2b70 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2b64:	221a      	movs	r2, #26
    2b66:	2332      	movs	r3, #50	; 0x32
    2b68:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2b6a:	3b30      	subs	r3, #48	; 0x30
    2b6c:	8363      	strh	r3, [r4, #26]
    2b6e:	e01f      	b.n	2bb0 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2b70:	075a      	lsls	r2, r3, #29
    2b72:	d505      	bpl.n	2b80 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    2b74:	221e      	movs	r2, #30
    2b76:	2332      	movs	r3, #50	; 0x32
    2b78:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2b7a:	3b2e      	subs	r3, #46	; 0x2e
    2b7c:	8363      	strh	r3, [r4, #26]
    2b7e:	e017      	b.n	2bb0 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2b80:	07da      	lsls	r2, r3, #31
    2b82:	d505      	bpl.n	2b90 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    2b84:	2213      	movs	r2, #19
    2b86:	2332      	movs	r3, #50	; 0x32
    2b88:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2b8a:	3b31      	subs	r3, #49	; 0x31
    2b8c:	8363      	strh	r3, [r4, #26]
    2b8e:	e00f      	b.n	2bb0 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2b90:	06da      	lsls	r2, r3, #27
    2b92:	d505      	bpl.n	2ba0 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    2b94:	2242      	movs	r2, #66	; 0x42
    2b96:	2332      	movs	r3, #50	; 0x32
    2b98:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2b9a:	3b22      	subs	r3, #34	; 0x22
    2b9c:	8363      	strh	r3, [r4, #26]
    2b9e:	e007      	b.n	2bb0 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2ba0:	2220      	movs	r2, #32
    2ba2:	421a      	tst	r2, r3
    2ba4:	d004      	beq.n	2bb0 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2ba6:	3221      	adds	r2, #33	; 0x21
    2ba8:	2332      	movs	r3, #50	; 0x32
    2baa:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2bac:	3b12      	subs	r3, #18
    2bae:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2bb0:	077b      	lsls	r3, r7, #29
    2bb2:	d527      	bpl.n	2c04 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2bb4:	0028      	movs	r0, r5
    2bb6:	696b      	ldr	r3, [r5, #20]
    2bb8:	4798      	blx	r3
    2bba:	e023      	b.n	2c04 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2bbc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2bbe:	05db      	lsls	r3, r3, #23
    2bc0:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2bc2:	b2da      	uxtb	r2, r3
    2bc4:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2bc6:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2bc8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2bca:	1c51      	adds	r1, r2, #1
    2bcc:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2bce:	7969      	ldrb	r1, [r5, #5]
    2bd0:	2901      	cmp	r1, #1
    2bd2:	d104      	bne.n	2bde <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2bd4:	0a1b      	lsrs	r3, r3, #8
    2bd6:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    2bd8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2bda:	3301      	adds	r3, #1
    2bdc:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2bde:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2be0:	3b01      	subs	r3, #1
    2be2:	b29b      	uxth	r3, r3
    2be4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2be6:	2b00      	cmp	r3, #0
    2be8:	d10c      	bne.n	2c04 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2bea:	3304      	adds	r3, #4
    2bec:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2bee:	2200      	movs	r2, #0
    2bf0:	332e      	adds	r3, #46	; 0x2e
    2bf2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2bf4:	07bb      	lsls	r3, r7, #30
    2bf6:	d505      	bpl.n	2c04 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2bf8:	0028      	movs	r0, r5
    2bfa:	692b      	ldr	r3, [r5, #16]
    2bfc:	4798      	blx	r3
    2bfe:	e001      	b.n	2c04 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2c00:	2304      	movs	r3, #4
    2c02:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2c04:	06f3      	lsls	r3, r6, #27
    2c06:	d507      	bpl.n	2c18 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2c08:	2310      	movs	r3, #16
    2c0a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2c0c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2c0e:	06fb      	lsls	r3, r7, #27
    2c10:	d502      	bpl.n	2c18 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2c12:	0028      	movs	r0, r5
    2c14:	69eb      	ldr	r3, [r5, #28]
    2c16:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2c18:	06b3      	lsls	r3, r6, #26
    2c1a:	d507      	bpl.n	2c2c <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2c1c:	2320      	movs	r3, #32
    2c1e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2c20:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2c22:	073b      	lsls	r3, r7, #28
    2c24:	d502      	bpl.n	2c2c <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2c26:	0028      	movs	r0, r5
    2c28:	69ab      	ldr	r3, [r5, #24]
    2c2a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2c2c:	0733      	lsls	r3, r6, #28
    2c2e:	d507      	bpl.n	2c40 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2c30:	2308      	movs	r3, #8
    2c32:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2c34:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2c36:	06bb      	lsls	r3, r7, #26
    2c38:	d502      	bpl.n	2c40 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2c3a:	6a2b      	ldr	r3, [r5, #32]
    2c3c:	0028      	movs	r0, r5
    2c3e:	4798      	blx	r3
		}
	}
#endif
}
    2c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c42:	46c0      	nop			; (mov r8, r8)
    2c44:	20003d64 	.word	0x20003d64

00002c48 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2c48:	4770      	bx	lr
    2c4a:	46c0      	nop			; (mov r8, r8)

00002c4c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2c4e:	4b0a      	ldr	r3, [pc, #40]	; (2c78 <_sercom_set_handler+0x2c>)
    2c50:	781b      	ldrb	r3, [r3, #0]
    2c52:	2b00      	cmp	r3, #0
    2c54:	d10c      	bne.n	2c70 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2c56:	4f09      	ldr	r7, [pc, #36]	; (2c7c <_sercom_set_handler+0x30>)
    2c58:	4e09      	ldr	r6, [pc, #36]	; (2c80 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    2c5a:	4d0a      	ldr	r5, [pc, #40]	; (2c84 <_sercom_set_handler+0x38>)
    2c5c:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2c5e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2c60:	195a      	adds	r2, r3, r5
    2c62:	6014      	str	r4, [r2, #0]
    2c64:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2c66:	2b18      	cmp	r3, #24
    2c68:	d1f9      	bne.n	2c5e <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    2c6a:	2201      	movs	r2, #1
    2c6c:	4b02      	ldr	r3, [pc, #8]	; (2c78 <_sercom_set_handler+0x2c>)
    2c6e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2c70:	0080      	lsls	r0, r0, #2
    2c72:	4b02      	ldr	r3, [pc, #8]	; (2c7c <_sercom_set_handler+0x30>)
    2c74:	50c1      	str	r1, [r0, r3]
}
    2c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c78:	20003ca8 	.word	0x20003ca8
    2c7c:	20003cac 	.word	0x20003cac
    2c80:	00002c49 	.word	0x00002c49
    2c84:	20003d64 	.word	0x20003d64

00002c88 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2c88:	b510      	push	{r4, lr}
    2c8a:	b082      	sub	sp, #8
    2c8c:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2c8e:	2206      	movs	r2, #6
    2c90:	4905      	ldr	r1, [pc, #20]	; (2ca8 <_sercom_get_interrupt_vector+0x20>)
    2c92:	4668      	mov	r0, sp
    2c94:	4b05      	ldr	r3, [pc, #20]	; (2cac <_sercom_get_interrupt_vector+0x24>)
    2c96:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2c98:	0020      	movs	r0, r4
    2c9a:	4b05      	ldr	r3, [pc, #20]	; (2cb0 <_sercom_get_interrupt_vector+0x28>)
    2c9c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2c9e:	466b      	mov	r3, sp
    2ca0:	5618      	ldrsb	r0, [r3, r0]
}
    2ca2:	b002      	add	sp, #8
    2ca4:	bd10      	pop	{r4, pc}
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	00006c08 	.word	0x00006c08
    2cac:	000063dd 	.word	0x000063dd
    2cb0:	00000f11 	.word	0x00000f11

00002cb4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2cb4:	b510      	push	{r4, lr}
    2cb6:	4b02      	ldr	r3, [pc, #8]	; (2cc0 <SERCOM0_Handler+0xc>)
    2cb8:	681b      	ldr	r3, [r3, #0]
    2cba:	2000      	movs	r0, #0
    2cbc:	4798      	blx	r3
    2cbe:	bd10      	pop	{r4, pc}
    2cc0:	20003cac 	.word	0x20003cac

00002cc4 <SERCOM1_Handler>:
    2cc4:	b510      	push	{r4, lr}
    2cc6:	4b02      	ldr	r3, [pc, #8]	; (2cd0 <SERCOM1_Handler+0xc>)
    2cc8:	685b      	ldr	r3, [r3, #4]
    2cca:	2001      	movs	r0, #1
    2ccc:	4798      	blx	r3
    2cce:	bd10      	pop	{r4, pc}
    2cd0:	20003cac 	.word	0x20003cac

00002cd4 <SERCOM2_Handler>:
    2cd4:	b510      	push	{r4, lr}
    2cd6:	4b02      	ldr	r3, [pc, #8]	; (2ce0 <SERCOM2_Handler+0xc>)
    2cd8:	689b      	ldr	r3, [r3, #8]
    2cda:	2002      	movs	r0, #2
    2cdc:	4798      	blx	r3
    2cde:	bd10      	pop	{r4, pc}
    2ce0:	20003cac 	.word	0x20003cac

00002ce4 <SERCOM3_Handler>:
    2ce4:	b510      	push	{r4, lr}
    2ce6:	4b02      	ldr	r3, [pc, #8]	; (2cf0 <SERCOM3_Handler+0xc>)
    2ce8:	68db      	ldr	r3, [r3, #12]
    2cea:	2003      	movs	r0, #3
    2cec:	4798      	blx	r3
    2cee:	bd10      	pop	{r4, pc}
    2cf0:	20003cac 	.word	0x20003cac

00002cf4 <SERCOM4_Handler>:
    2cf4:	b510      	push	{r4, lr}
    2cf6:	4b02      	ldr	r3, [pc, #8]	; (2d00 <SERCOM4_Handler+0xc>)
    2cf8:	691b      	ldr	r3, [r3, #16]
    2cfa:	2004      	movs	r0, #4
    2cfc:	4798      	blx	r3
    2cfe:	bd10      	pop	{r4, pc}
    2d00:	20003cac 	.word	0x20003cac

00002d04 <SERCOM5_Handler>:
    2d04:	b510      	push	{r4, lr}
    2d06:	4b02      	ldr	r3, [pc, #8]	; (2d10 <SERCOM5_Handler+0xc>)
    2d08:	695b      	ldr	r3, [r3, #20]
    2d0a:	2005      	movs	r0, #5
    2d0c:	4798      	blx	r3
    2d0e:	bd10      	pop	{r4, pc}
    2d10:	20003cac 	.word	0x20003cac

00002d14 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    2d14:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    2d16:	2000      	movs	r0, #0
    2d18:	4b08      	ldr	r3, [pc, #32]	; (2d3c <delay_init+0x28>)
    2d1a:	4798      	blx	r3
    2d1c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    2d1e:	4c08      	ldr	r4, [pc, #32]	; (2d40 <delay_init+0x2c>)
    2d20:	21fa      	movs	r1, #250	; 0xfa
    2d22:	0089      	lsls	r1, r1, #2
    2d24:	47a0      	blx	r4
    2d26:	4b07      	ldr	r3, [pc, #28]	; (2d44 <delay_init+0x30>)
    2d28:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    2d2a:	4907      	ldr	r1, [pc, #28]	; (2d48 <delay_init+0x34>)
    2d2c:	0028      	movs	r0, r5
    2d2e:	47a0      	blx	r4
    2d30:	4b06      	ldr	r3, [pc, #24]	; (2d4c <delay_init+0x38>)
    2d32:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    2d34:	2205      	movs	r2, #5
    2d36:	4b06      	ldr	r3, [pc, #24]	; (2d50 <delay_init+0x3c>)
    2d38:	601a      	str	r2, [r3, #0]
}
    2d3a:	bd70      	pop	{r4, r5, r6, pc}
    2d3c:	00003775 	.word	0x00003775
    2d40:	00004715 	.word	0x00004715
    2d44:	20000030 	.word	0x20000030
    2d48:	000f4240 	.word	0x000f4240
    2d4c:	2000002c 	.word	0x2000002c
    2d50:	e000e010 	.word	0xe000e010

00002d54 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    2d54:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    2d56:	4b08      	ldr	r3, [pc, #32]	; (2d78 <delay_cycles_ms+0x24>)
    2d58:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    2d5a:	4a08      	ldr	r2, [pc, #32]	; (2d7c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    2d5c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    2d5e:	2180      	movs	r1, #128	; 0x80
    2d60:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
    2d62:	e006      	b.n	2d72 <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    2d64:	2c00      	cmp	r4, #0
    2d66:	d004      	beq.n	2d72 <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
    2d68:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    2d6a:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    2d6c:	6813      	ldr	r3, [r2, #0]
    2d6e:	420b      	tst	r3, r1
    2d70:	d0fc      	beq.n	2d6c <delay_cycles_ms+0x18>
    2d72:	3801      	subs	r0, #1
    2d74:	d2f6      	bcs.n	2d64 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
    2d76:	bd30      	pop	{r4, r5, pc}
    2d78:	20000030 	.word	0x20000030
    2d7c:	e000e010 	.word	0xe000e010

00002d80 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2d80:	4b0c      	ldr	r3, [pc, #48]	; (2db4 <cpu_irq_enter_critical+0x34>)
    2d82:	681b      	ldr	r3, [r3, #0]
    2d84:	2b00      	cmp	r3, #0
    2d86:	d110      	bne.n	2daa <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2d88:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2d8c:	2b00      	cmp	r3, #0
    2d8e:	d109      	bne.n	2da4 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2d90:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2d92:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2d96:	2200      	movs	r2, #0
    2d98:	4b07      	ldr	r3, [pc, #28]	; (2db8 <cpu_irq_enter_critical+0x38>)
    2d9a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2d9c:	3201      	adds	r2, #1
    2d9e:	4b07      	ldr	r3, [pc, #28]	; (2dbc <cpu_irq_enter_critical+0x3c>)
    2da0:	701a      	strb	r2, [r3, #0]
    2da2:	e002      	b.n	2daa <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2da4:	2200      	movs	r2, #0
    2da6:	4b05      	ldr	r3, [pc, #20]	; (2dbc <cpu_irq_enter_critical+0x3c>)
    2da8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2daa:	4a02      	ldr	r2, [pc, #8]	; (2db4 <cpu_irq_enter_critical+0x34>)
    2dac:	6813      	ldr	r3, [r2, #0]
    2dae:	3301      	adds	r3, #1
    2db0:	6013      	str	r3, [r2, #0]
}
    2db2:	4770      	bx	lr
    2db4:	20003cc4 	.word	0x20003cc4
    2db8:	20000034 	.word	0x20000034
    2dbc:	20003cc8 	.word	0x20003cc8

00002dc0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2dc0:	4b08      	ldr	r3, [pc, #32]	; (2de4 <cpu_irq_leave_critical+0x24>)
    2dc2:	681a      	ldr	r2, [r3, #0]
    2dc4:	3a01      	subs	r2, #1
    2dc6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2dc8:	681b      	ldr	r3, [r3, #0]
    2dca:	2b00      	cmp	r3, #0
    2dcc:	d109      	bne.n	2de2 <cpu_irq_leave_critical+0x22>
    2dce:	4b06      	ldr	r3, [pc, #24]	; (2de8 <cpu_irq_leave_critical+0x28>)
    2dd0:	781b      	ldrb	r3, [r3, #0]
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d005      	beq.n	2de2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2dd6:	2201      	movs	r2, #1
    2dd8:	4b04      	ldr	r3, [pc, #16]	; (2dec <cpu_irq_leave_critical+0x2c>)
    2dda:	701a      	strb	r2, [r3, #0]
    2ddc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2de0:	b662      	cpsie	i
	}
}
    2de2:	4770      	bx	lr
    2de4:	20003cc4 	.word	0x20003cc4
    2de8:	20003cc8 	.word	0x20003cc8
    2dec:	20000034 	.word	0x20000034

00002df0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2df0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2df2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    2df4:	ac01      	add	r4, sp, #4
    2df6:	2501      	movs	r5, #1
    2df8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    2dfa:	2700      	movs	r7, #0
    2dfc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2dfe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    2e00:	0021      	movs	r1, r4
    2e02:	202c      	movs	r0, #44	; 0x2c
    2e04:	4e0b      	ldr	r6, [pc, #44]	; (2e34 <system_board_init+0x44>)
    2e06:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2e08:	2280      	movs	r2, #128	; 0x80
    2e0a:	0152      	lsls	r2, r2, #5
    2e0c:	4b0a      	ldr	r3, [pc, #40]	; (2e38 <system_board_init+0x48>)
    2e0e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	


	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2e10:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    2e12:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    2e14:	0021      	movs	r1, r4
    2e16:	2002      	movs	r0, #2
    2e18:	47b0      	blx	r6
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2e1a:	7025      	strb	r5, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_DOWN;
    2e1c:	3702      	adds	r7, #2
    2e1e:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(BYPASS_1_PIN, &pin_conf);
    2e20:	0021      	movs	r1, r4
    2e22:	2014      	movs	r0, #20
    2e24:	47b0      	blx	r6
		
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2e26:	7025      	strb	r5, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_DOWN;
    2e28:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(BYPASS_2_PIN, &pin_conf);
    2e2a:	0021      	movs	r1, r4
    2e2c:	202d      	movs	r0, #45	; 0x2d
    2e2e:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    2e30:	b003      	add	sp, #12
    2e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e34:	0000349d 	.word	0x0000349d
    2e38:	40002880 	.word	0x40002880

00002e3c <_adc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    2e3c:	2000      	movs	r0, #0
    2e3e:	4770      	bx	lr

00002e40 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    2e40:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    2e42:	2300      	movs	r3, #0
    2e44:	2200      	movs	r2, #0
    2e46:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
    2e48:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
    2e4a:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    2e4c:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    2e4e:	2100      	movs	r1, #0
    2e50:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    2e52:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
    2e54:	61c3      	str	r3, [r0, #28]
#if SAMR30
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
    2e56:	2401      	movs	r4, #1
    2e58:	7104      	strb	r4, [r0, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
    2e5a:	24c0      	movs	r4, #192	; 0xc0
    2e5c:	0164      	lsls	r4, r4, #5
    2e5e:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    2e60:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    2e62:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
    2e64:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
    2e66:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
    2e68:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    2e6a:	242a      	movs	r4, #42	; 0x2a
    2e6c:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
    2e6e:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
    2e70:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
    2e72:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
    2e74:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
    2e76:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
    2e78:	3c06      	subs	r4, #6
    2e7a:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    2e7c:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    2e7e:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    2e80:	7541      	strb	r1, [r0, #21]
}
    2e82:	bd10      	pop	{r4, pc}

00002e84 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    2e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e86:	464f      	mov	r7, r9
    2e88:	b480      	push	{r7}
    2e8a:	b09a      	sub	sp, #104	; 0x68
    2e8c:	0005      	movs	r5, r0
    2e8e:	000c      	movs	r4, r1
    2e90:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
    2e92:	0008      	movs	r0, r1
    2e94:	4ba9      	ldr	r3, [pc, #676]	; (313c <adc_init+0x2b8>)
    2e96:	4798      	blx	r3

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    2e98:	602c      	str	r4, [r5, #0]
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    2e9a:	4aa9      	ldr	r2, [pc, #676]	; (3140 <adc_init+0x2bc>)
    2e9c:	6a11      	ldr	r1, [r2, #32]
    2e9e:	2308      	movs	r3, #8
    2ea0:	430b      	orrs	r3, r1
    2ea2:	6213      	str	r3, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    2ea4:	7822      	ldrb	r2, [r4, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2ea6:	2305      	movs	r3, #5
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    2ea8:	07d2      	lsls	r2, r2, #31
    2eaa:	d500      	bpl.n	2eae <adc_init+0x2a>
    2eac:	e1c9      	b.n	3242 <adc_init+0x3be>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2eae:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    2eb0:	8c13      	ldrh	r3, [r2, #32]
    2eb2:	b29b      	uxth	r3, r3
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	while (adc_is_syncing(module_inst)) {
    2eb4:	2b00      	cmp	r3, #0
    2eb6:	d1fb      	bne.n	2eb0 <adc_init+0x2c>
		/* Wait for synchronization */
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    2eb8:	7822      	ldrb	r2, [r4, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    2eba:	331c      	adds	r3, #28

	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    2ebc:	0792      	lsls	r2, r2, #30
    2ebe:	d500      	bpl.n	2ec2 <adc_init+0x3e>
    2ec0:	e1bf      	b.n	3242 <adc_init+0x3be>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    2ec2:	7873      	ldrb	r3, [r6, #1]
    2ec4:	712b      	strb	r3, [r5, #4]

	/* Make sure the voltage reference is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d104      	bne.n	2ed4 <adc_init+0x50>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
    2eca:	4a9e      	ldr	r2, [pc, #632]	; (3144 <adc_init+0x2c0>)
    2ecc:	69d1      	ldr	r1, [r2, #28]
    2ece:	3304      	adds	r3, #4
    2ed0:	430b      	orrs	r3, r1
    2ed2:	61d3      	str	r3, [r2, #28]
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
		module_inst->callback[i] = NULL;
    2ed4:	2300      	movs	r3, #0
    2ed6:	60ab      	str	r3, [r5, #8]
    2ed8:	60eb      	str	r3, [r5, #12]
    2eda:	612b      	str	r3, [r5, #16]
	};

	module_inst->registered_callback_mask = 0;
    2edc:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
    2ede:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
    2ee0:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
    2ee2:	772b      	strb	r3, [r5, #28]

	_adc_instances[instance] = module_inst;
    2ee4:	0080      	lsls	r0, r0, #2
    2ee6:	4b98      	ldr	r3, [pc, #608]	; (3148 <adc_init+0x2c4>)
    2ee8:	50c5      	str	r5, [r0, r3]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    2eea:	232a      	movs	r3, #42	; 0x2a
    2eec:	5cf3      	ldrb	r3, [r6, r3]
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d105      	bne.n	2efe <adc_init+0x7a>
    2ef2:	7b33      	ldrb	r3, [r6, #12]
    2ef4:	2b00      	cmp	r3, #0
    2ef6:	d102      	bne.n	2efe <adc_init+0x7a>
			!config->freerunning) {
		module_inst->software_trigger = true;
    2ef8:	3301      	adds	r3, #1
    2efa:	776b      	strb	r3, [r5, #29]
    2efc:	e001      	b.n	2f02 <adc_init+0x7e>
	} else {
		module_inst->software_trigger = false;
    2efe:	2300      	movs	r3, #0
    2f00:	776b      	strb	r3, [r5, #29]
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    2f02:	682f      	ldr	r7, [r5, #0]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
    2f04:	7833      	ldrb	r3, [r6, #0]
    2f06:	466a      	mov	r2, sp
    2f08:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
    2f0a:	4669      	mov	r1, sp
    2f0c:	201e      	movs	r0, #30
    2f0e:	4b8f      	ldr	r3, [pc, #572]	; (314c <adc_init+0x2c8>)
    2f10:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
    2f12:	201e      	movs	r0, #30
    2f14:	4b8e      	ldr	r3, [pc, #568]	; (3150 <adc_init+0x2cc>)
    2f16:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
    2f18:	7934      	ldrb	r4, [r6, #4]
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30)
	const uint32_t pinmapping[] = {
    2f1a:	2260      	movs	r2, #96	; 0x60
    2f1c:	498d      	ldr	r1, [pc, #564]	; (3154 <adc_init+0x2d0>)
    2f1e:	a802      	add	r0, sp, #8
    2f20:	4b8d      	ldr	r3, [pc, #564]	; (3158 <adc_init+0x2d4>)
    2f22:	4798      	blx	r3
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
    2f24:	2c13      	cmp	r4, #19
    2f26:	d80c      	bhi.n	2f42 <adc_init+0xbe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2f28:	00a4      	lsls	r4, r4, #2
    2f2a:	ab02      	add	r3, sp, #8
    2f2c:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2f2e:	a901      	add	r1, sp, #4
    2f30:	2300      	movs	r3, #0
    2f32:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2f34:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2f36:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2f38:	3301      	adds	r3, #1
    2f3a:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    2f3c:	b2c0      	uxtb	r0, r0
    2f3e:	4b87      	ldr	r3, [pc, #540]	; (315c <adc_init+0x2d8>)
    2f40:	4798      	blx	r3
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
	system_gclk_chan_enable(_adc_gclk_ids[index]);

	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);
    2f42:	88f4      	ldrh	r4, [r6, #6]
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30)
	const uint32_t pinmapping[] = {
    2f44:	2260      	movs	r2, #96	; 0x60
    2f46:	4983      	ldr	r1, [pc, #524]	; (3154 <adc_init+0x2d0>)
    2f48:	a802      	add	r0, sp, #8
    2f4a:	4b83      	ldr	r3, [pc, #524]	; (3158 <adc_init+0x2d4>)
    2f4c:	4798      	blx	r3
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
    2f4e:	2c13      	cmp	r4, #19
    2f50:	d80c      	bhi.n	2f6c <adc_init+0xe8>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2f52:	00a4      	lsls	r4, r4, #2
    2f54:	ab02      	add	r3, sp, #8
    2f56:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2f58:	a901      	add	r1, sp, #4
    2f5a:	2300      	movs	r3, #0
    2f5c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2f5e:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2f60:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2f62:	3301      	adds	r3, #1
    2f64:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    2f66:	b2c0      	uxtb	r0, r0
    2f68:	4b7c      	ldr	r3, [pc, #496]	; (315c <adc_init+0x2d8>)
    2f6a:	4798      	blx	r3
    2f6c:	2400      	movs	r4, #0
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30)
	const uint32_t pinmapping[] = {
    2f6e:	4b7a      	ldr	r3, [pc, #488]	; (3158 <adc_init+0x2d4>)
    2f70:	4699      	mov	r9, r3
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
		if(config->positive_input_sequence_mask_enable & (1 << i)){
    2f72:	2301      	movs	r3, #1
    2f74:	40a3      	lsls	r3, r4
    2f76:	6932      	ldr	r2, [r6, #16]
    2f78:	421a      	tst	r2, r3
    2f7a:	d012      	beq.n	2fa2 <adc_init+0x11e>
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30)
	const uint32_t pinmapping[] = {
    2f7c:	2260      	movs	r2, #96	; 0x60
    2f7e:	4975      	ldr	r1, [pc, #468]	; (3154 <adc_init+0x2d0>)
    2f80:	a802      	add	r0, sp, #8
    2f82:	47c8      	blx	r9
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
    2f84:	2c13      	cmp	r4, #19
    2f86:	d80c      	bhi.n	2fa2 <adc_init+0x11e>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2f88:	00a3      	lsls	r3, r4, #2
    2f8a:	aa02      	add	r2, sp, #8
    2f8c:	5898      	ldr	r0, [r3, r2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2f8e:	a901      	add	r1, sp, #4
    2f90:	2300      	movs	r3, #0
    2f92:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2f94:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2f96:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2f98:	3301      	adds	r3, #1
    2f9a:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    2f9c:	b2c0      	uxtb	r0, r0
    2f9e:	4b6f      	ldr	r3, [pc, #444]	; (315c <adc_init+0x2d8>)
    2fa0:	4798      	blx	r3
    2fa2:	3401      	adds	r4, #1
	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
    2fa4:	2c14      	cmp	r4, #20
    2fa6:	d1e4      	bne.n	2f72 <adc_init+0xee>
			_adc_configure_ain_pin(index, i);
		}
	}

	/* Configure run in standby and on demand */
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
    2fa8:	7b73      	ldrb	r3, [r6, #13]
    2faa:	019a      	lsls	r2, r3, #6
    2fac:	7bb3      	ldrb	r3, [r6, #14]
    2fae:	01db      	lsls	r3, r3, #7
    2fb0:	4313      	orrs	r3, r2
    2fb2:	b2db      	uxtb	r3, r3
    2fb4:	703b      	strb	r3, [r7, #0]
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;

	/* Configure reference */
	adc_module->REFCTRL.reg =
    2fb6:	7d33      	ldrb	r3, [r6, #20]
    2fb8:	01db      	lsls	r3, r3, #7
    2fba:	7872      	ldrb	r2, [r6, #1]
    2fbc:	4313      	orrs	r3, r2
    2fbe:	b2db      	uxtb	r3, r3
    2fc0:	70bb      	strb	r3, [r7, #2]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
			| (config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    2fc2:	78f3      	ldrb	r3, [r6, #3]
    2fc4:	2b34      	cmp	r3, #52	; 0x34
    2fc6:	d900      	bls.n	2fca <adc_init+0x146>
    2fc8:	e13a      	b.n	3240 <adc_init+0x3bc>
    2fca:	009b      	lsls	r3, r3, #2
    2fcc:	4a64      	ldr	r2, [pc, #400]	; (3160 <adc_init+0x2dc>)
    2fce:	58d3      	ldr	r3, [r2, r3]
    2fd0:	469f      	mov	pc, r3
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    2fd2:	2004      	movs	r0, #4
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2fd4:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    2fd6:	2202      	movs	r2, #2
    2fd8:	e01a      	b.n	3010 <adc_init+0x18c>

	/* Set adjusting result and number of samples */
	switch (config->resolution) {

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    2fda:	7a72      	ldrb	r2, [r6, #9]
		accumulate = config->accumulate_samples;
    2fdc:	7a30      	ldrb	r0, [r6, #8]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2fde:	2110      	movs	r1, #16
    2fe0:	e016      	b.n	3010 <adc_init+0x18c>
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    2fe2:	2006      	movs	r0, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2fe4:	2110      	movs	r1, #16
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    2fe6:	2201      	movs	r2, #1
    2fe8:	e012      	b.n	3010 <adc_init+0x18c>
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    2fea:	2008      	movs	r0, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2fec:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    2fee:	2200      	movs	r2, #0
    2ff0:	e00e      	b.n	3010 <adc_init+0x18c>
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2ff2:	2000      	movs	r0, #0
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    2ff4:	2130      	movs	r1, #48	; 0x30
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    2ff6:	2200      	movs	r2, #0
    2ff8:	e00a      	b.n	3010 <adc_init+0x18c>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2ffa:	2000      	movs	r0, #0
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    2ffc:	2120      	movs	r1, #32
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    2ffe:	2200      	movs	r2, #0
    3000:	e006      	b.n	3010 <adc_init+0x18c>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    3002:	2000      	movs	r0, #0
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    3004:	2100      	movs	r1, #0
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    3006:	2200      	movs	r2, #0
    3008:	e002      	b.n	3010 <adc_init+0x18c>
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    300a:	2002      	movs	r0, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    300c:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    300e:	2201      	movs	r2, #1
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    3010:	0112      	lsls	r2, r2, #4
    3012:	2370      	movs	r3, #112	; 0x70
    3014:	4013      	ands	r3, r2
    3016:	4303      	orrs	r3, r0
    3018:	733b      	strb	r3, [r7, #12]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    301a:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    301c:	8c13      	ldrh	r3, [r2, #32]
    301e:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    3020:	2b00      	cmp	r3, #0
    3022:	d1fb      	bne.n	301c <adc_init+0x198>
		/* Wait for synchronization */
	}

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    3024:	7d72      	ldrb	r2, [r6, #21]
		return STATUS_ERR_INVALID_ARG;
    3026:	3317      	adds	r3, #23
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    3028:	2a3f      	cmp	r2, #63	; 0x3f
    302a:	d900      	bls.n	302e <adc_init+0x1aa>
    302c:	e109      	b.n	3242 <adc_init+0x3be>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
    302e:	7bf3      	ldrb	r3, [r6, #15]
    3030:	01db      	lsls	r3, r3, #7
    3032:	431a      	orrs	r2, r3
    3034:	b2d2      	uxtb	r2, r2
    3036:	737a      	strb	r2, [r7, #13]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    3038:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    303a:	8c13      	ldrh	r3, [r2, #32]
    303c:	b29b      	uxth	r3, r3
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos)
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
	}

	while (adc_is_syncing(module_inst)) {
    303e:	2b00      	cmp	r3, #0
    3040:	d1fb      	bne.n	303a <adc_init+0x1b6>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler;
    3042:	78b3      	ldrb	r3, [r6, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    3044:	707b      	strb	r3, [r7, #1]
			config->clock_prescaler;
	adc_module->CTRLC.reg =
			resolution |
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
    3046:	2324      	movs	r3, #36	; 0x24
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler;
	adc_module->CTRLC.reg =
    3048:	5cf2      	ldrb	r2, [r6, r3]
    304a:	00d2      	lsls	r2, r2, #3
    304c:	7b33      	ldrb	r3, [r6, #12]
    304e:	009b      	lsls	r3, r3, #2
    3050:	4313      	orrs	r3, r2
    3052:	7af2      	ldrb	r2, [r6, #11]
    3054:	431a      	orrs	r2, r3
    3056:	7ab3      	ldrb	r3, [r6, #10]
    3058:	005b      	lsls	r3, r3, #1
    305a:	4313      	orrs	r3, r2
    305c:	430b      	orrs	r3, r1
    305e:	817b      	strh	r3, [r7, #10]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    3060:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    3062:	8c13      	ldrh	r3, [r2, #32]
    3064:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);

	while (adc_is_syncing(module_inst)) {
    3066:	2b00      	cmp	r3, #0
    3068:	d1fb      	bne.n	3062 <adc_init+0x1de>
		/* Wait for synchronization */
	}

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    306a:	8b32      	ldrh	r2, [r6, #24]
    306c:	2a00      	cmp	r2, #0
    306e:	d100      	bne.n	3072 <adc_init+0x1ee>
    3070:	e098      	b.n	31a4 <adc_init+0x320>
		switch (resolution) {
    3072:	2910      	cmp	r1, #16
    3074:	d07a      	beq.n	316c <adc_init+0x2e8>
    3076:	d802      	bhi.n	307e <adc_init+0x1fa>
    3078:	2900      	cmp	r1, #0
    307a:	d03e      	beq.n	30fa <adc_init+0x276>
    307c:	e092      	b.n	31a4 <adc_init+0x320>
    307e:	2920      	cmp	r1, #32
    3080:	d01a      	beq.n	30b8 <adc_init+0x234>
    3082:	2930      	cmp	r1, #48	; 0x30
    3084:	d000      	beq.n	3088 <adc_init+0x204>
    3086:	e08d      	b.n	31a4 <adc_init+0x320>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    3088:	7af3      	ldrb	r3, [r6, #11]
    308a:	2b00      	cmp	r3, #0
    308c:	d00a      	beq.n	30a4 <adc_init+0x220>
    308e:	69f1      	ldr	r1, [r6, #28]
    3090:	3180      	adds	r1, #128	; 0x80
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    3092:	2317      	movs	r3, #23

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    3094:	29ff      	cmp	r1, #255	; 0xff
    3096:	d900      	bls.n	309a <adc_init+0x216>
    3098:	e0d3      	b.n	3242 <adc_init+0x3be>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    309a:	6a31      	ldr	r1, [r6, #32]
    309c:	3180      	adds	r1, #128	; 0x80
    309e:	29ff      	cmp	r1, #255	; 0xff
    30a0:	d900      	bls.n	30a4 <adc_init+0x220>
    30a2:	e0ce      	b.n	3242 <adc_init+0x3be>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    30a4:	2317      	movs	r3, #23
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
    30a6:	69f1      	ldr	r1, [r6, #28]
    30a8:	29ff      	cmp	r1, #255	; 0xff
    30aa:	dd00      	ble.n	30ae <adc_init+0x22a>
    30ac:	e0c9      	b.n	3242 <adc_init+0x3be>
    30ae:	6a31      	ldr	r1, [r6, #32]
    30b0:	29ff      	cmp	r1, #255	; 0xff
    30b2:	dd00      	ble.n	30b6 <adc_init+0x232>
    30b4:	e0c5      	b.n	3242 <adc_init+0x3be>
    30b6:	e075      	b.n	31a4 <adc_init+0x320>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    30b8:	7af3      	ldrb	r3, [r6, #11]
    30ba:	2b00      	cmp	r3, #0
    30bc:	d012      	beq.n	30e4 <adc_init+0x260>
    30be:	69f3      	ldr	r3, [r6, #28]
    30c0:	2080      	movs	r0, #128	; 0x80
    30c2:	0080      	lsls	r0, r0, #2
    30c4:	4684      	mov	ip, r0
    30c6:	4463      	add	r3, ip
    30c8:	0019      	movs	r1, r3
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    30ca:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    30cc:	4825      	ldr	r0, [pc, #148]	; (3164 <adc_init+0x2e0>)
    30ce:	4281      	cmp	r1, r0
    30d0:	d900      	bls.n	30d4 <adc_init+0x250>
    30d2:	e0b6      	b.n	3242 <adc_init+0x3be>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    30d4:	6a33      	ldr	r3, [r6, #32]
    30d6:	4463      	add	r3, ip
    30d8:	0019      	movs	r1, r3
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    30da:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    30dc:	4821      	ldr	r0, [pc, #132]	; (3164 <adc_init+0x2e0>)
    30de:	4281      	cmp	r1, r0
    30e0:	d900      	bls.n	30e4 <adc_init+0x260>
    30e2:	e0ae      	b.n	3242 <adc_init+0x3be>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    30e4:	2317      	movs	r3, #23
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
    30e6:	491f      	ldr	r1, [pc, #124]	; (3164 <adc_init+0x2e0>)
    30e8:	69f0      	ldr	r0, [r6, #28]
    30ea:	4288      	cmp	r0, r1
    30ec:	dd00      	ble.n	30f0 <adc_init+0x26c>
    30ee:	e0a8      	b.n	3242 <adc_init+0x3be>
    30f0:	6a30      	ldr	r0, [r6, #32]
    30f2:	4288      	cmp	r0, r1
    30f4:	dd00      	ble.n	30f8 <adc_init+0x274>
    30f6:	e0a4      	b.n	3242 <adc_init+0x3be>
    30f8:	e054      	b.n	31a4 <adc_init+0x320>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    30fa:	7af3      	ldrb	r3, [r6, #11]
    30fc:	2b00      	cmp	r3, #0
    30fe:	d012      	beq.n	3126 <adc_init+0x2a2>
    3100:	69f3      	ldr	r3, [r6, #28]
    3102:	2080      	movs	r0, #128	; 0x80
    3104:	0100      	lsls	r0, r0, #4
    3106:	4684      	mov	ip, r0
    3108:	4463      	add	r3, ip
    310a:	0019      	movs	r1, r3
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    310c:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    310e:	4816      	ldr	r0, [pc, #88]	; (3168 <adc_init+0x2e4>)
    3110:	4281      	cmp	r1, r0
    3112:	d900      	bls.n	3116 <adc_init+0x292>
    3114:	e095      	b.n	3242 <adc_init+0x3be>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    3116:	6a33      	ldr	r3, [r6, #32]
    3118:	4463      	add	r3, ip
    311a:	0019      	movs	r1, r3
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    311c:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    311e:	4812      	ldr	r0, [pc, #72]	; (3168 <adc_init+0x2e4>)
    3120:	4281      	cmp	r1, r0
    3122:	d900      	bls.n	3126 <adc_init+0x2a2>
    3124:	e08d      	b.n	3242 <adc_init+0x3be>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    3126:	2317      	movs	r3, #23
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
    3128:	490f      	ldr	r1, [pc, #60]	; (3168 <adc_init+0x2e4>)
    312a:	69f0      	ldr	r0, [r6, #28]
    312c:	4288      	cmp	r0, r1
    312e:	dd00      	ble.n	3132 <adc_init+0x2ae>
    3130:	e087      	b.n	3242 <adc_init+0x3be>
    3132:	6a30      	ldr	r0, [r6, #32]
    3134:	4288      	cmp	r0, r1
    3136:	dd00      	ble.n	313a <adc_init+0x2b6>
    3138:	e083      	b.n	3242 <adc_init+0x3be>
    313a:	e033      	b.n	31a4 <adc_init+0x320>
    313c:	00002e3d 	.word	0x00002e3d
    3140:	40000400 	.word	0x40000400
    3144:	40001400 	.word	0x40001400
    3148:	20003d7c 	.word	0x20003d7c
    314c:	00003851 	.word	0x00003851
    3150:	000037e1 	.word	0x000037e1
    3154:	00006ce4 	.word	0x00006ce4
    3158:	000063dd 	.word	0x000063dd
    315c:	0000394d 	.word	0x0000394d
    3160:	00006c10 	.word	0x00006c10
    3164:	000003ff 	.word	0x000003ff
    3168:	00000fff 	.word	0x00000fff
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    316c:	7af3      	ldrb	r3, [r6, #11]
    316e:	2b00      	cmp	r3, #0
    3170:	d010      	beq.n	3194 <adc_init+0x310>
    3172:	69f3      	ldr	r3, [r6, #28]
    3174:	2080      	movs	r0, #128	; 0x80
    3176:	0200      	lsls	r0, r0, #8
    3178:	4684      	mov	ip, r0
    317a:	4463      	add	r3, ip
    317c:	0019      	movs	r1, r3
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    317e:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    3180:	4832      	ldr	r0, [pc, #200]	; (324c <adc_init+0x3c8>)
    3182:	4281      	cmp	r1, r0
    3184:	d85d      	bhi.n	3242 <adc_init+0x3be>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    3186:	6a33      	ldr	r3, [r6, #32]
    3188:	4463      	add	r3, ip
    318a:	0019      	movs	r1, r3
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    318c:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    318e:	482f      	ldr	r0, [pc, #188]	; (324c <adc_init+0x3c8>)
    3190:	4281      	cmp	r1, r0
    3192:	d856      	bhi.n	3242 <adc_init+0x3be>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    3194:	2317      	movs	r3, #23
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
    3196:	492d      	ldr	r1, [pc, #180]	; (324c <adc_init+0x3c8>)
    3198:	69f0      	ldr	r0, [r6, #28]
    319a:	4288      	cmp	r0, r1
    319c:	dc51      	bgt.n	3242 <adc_init+0x3be>
    319e:	6a30      	ldr	r0, [r6, #32]
    31a0:	4288      	cmp	r0, r1
    31a2:	dc4e      	bgt.n	3242 <adc_init+0x3be>
			break;
		}
	}

	/* Configure window mode */
	adc_module->CTRLC.reg |= config->window.window_mode;
    31a4:	897b      	ldrh	r3, [r7, #10]
    31a6:	431a      	orrs	r2, r3
    31a8:	817a      	strh	r2, [r7, #10]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    31aa:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    31ac:	8c13      	ldrh	r3, [r2, #32]
    31ae:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    31b0:	2b00      	cmp	r3, #0
    31b2:	d1fb      	bne.n	31ac <adc_init+0x328>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
    31b4:	8bb3      	ldrh	r3, [r6, #28]
    31b6:	81fb      	strh	r3, [r7, #14]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    31b8:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    31ba:	8c13      	ldrh	r3, [r2, #32]
    31bc:	b29b      	uxth	r3, r3
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
    31be:	2b00      	cmp	r3, #0
    31c0:	d1fb      	bne.n	31ba <adc_init+0x336>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    31c2:	8c33      	ldrh	r3, [r6, #32]
    31c4:	823b      	strh	r3, [r7, #16]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    31c6:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    31c8:	8c13      	ldrh	r3, [r2, #32]
    31ca:	b29b      	uxth	r3, r3
			ADC_WINUT_WINUT_Pos;

	while (adc_is_syncing(module_inst)) {
    31cc:	2b00      	cmp	r3, #0
    31ce:	d1fb      	bne.n	31c8 <adc_init+0x344>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    31d0:	7932      	ldrb	r2, [r6, #4]
    31d2:	88f3      	ldrh	r3, [r6, #6]
    31d4:	4313      	orrs	r3, r2
    31d6:	813b      	strh	r3, [r7, #8]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    31d8:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    31da:	8c13      	ldrh	r3, [r2, #32]
    31dc:	b29b      	uxth	r3, r3
			config->negative_input |
			config->positive_input;

	while (adc_is_syncing(module_inst)) {
    31de:	2b00      	cmp	r3, #0
    31e0:	d1fb      	bne.n	31da <adc_init+0x356>
		/* Wait for synchronization */
	}

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    31e2:	332a      	adds	r3, #42	; 0x2a
    31e4:	5cf3      	ldrb	r3, [r6, r3]
    31e6:	70fb      	strb	r3, [r7, #3]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    31e8:	2307      	movs	r3, #7
    31ea:	713b      	strb	r3, [r7, #4]
			(1 << ADC_INTENCLR_WINMON_Pos) |(1 << ADC_INTENCLR_OVERRUN_Pos)
			| (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    31ec:	331d      	adds	r3, #29
    31ee:	5cf3      	ldrb	r3, [r6, r3]
    31f0:	2b00      	cmp	r3, #0
    31f2:	d019      	beq.n	3228 <adc_init+0x3a4>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    31f4:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
			return STATUS_ERR_INVALID_ARG;
    31f6:	2317      	movs	r3, #23
			(1 << ADC_INTENCLR_WINMON_Pos) |(1 << ADC_INTENCLR_OVERRUN_Pos)
			| (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    31f8:	4915      	ldr	r1, [pc, #84]	; (3250 <adc_init+0x3cc>)
    31fa:	428a      	cmp	r2, r1
    31fc:	d821      	bhi.n	3242 <adc_init+0x3be>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    31fe:	827a      	strh	r2, [r7, #18]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    3200:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    3202:	8c13      	ldrh	r3, [r2, #32]
    3204:	b29b      	uxth	r3, r3
					ADC_GAINCORR_GAINCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
    3206:	2b00      	cmp	r3, #0
    3208:	d1fb      	bne.n	3202 <adc_init+0x37e>
			/* Wait for synchronization */
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    320a:	8d31      	ldrh	r1, [r6, #40]	; 0x28
    320c:	2380      	movs	r3, #128	; 0x80
    320e:	011b      	lsls	r3, r3, #4
    3210:	18ca      	adds	r2, r1, r3
    3212:	b292      	uxth	r2, r2
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
    3214:	2317      	movs	r3, #23
		while (adc_is_syncing(module_inst)) {
			/* Wait for synchronization */
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    3216:	480e      	ldr	r0, [pc, #56]	; (3250 <adc_init+0x3cc>)
    3218:	4282      	cmp	r2, r0
    321a:	d812      	bhi.n	3242 <adc_init+0x3be>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    321c:	82b9      	strh	r1, [r7, #20]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    321e:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    3220:	8c13      	ldrh	r3, [r2, #32]
    3222:	b29b      	uxth	r3, r3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
    3224:	2b00      	cmp	r3, #0
    3226:	d1fb      	bne.n	3220 <adc_init+0x39c>
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIASREFBUF(
    3228:	4b0a      	ldr	r3, [pc, #40]	; (3254 <adc_init+0x3d0>)
    322a:	681b      	ldr	r3, [r3, #0]
			/* Wait for synchronization */
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    322c:	0219      	lsls	r1, r3, #8
    322e:	22e0      	movs	r2, #224	; 0xe0
    3230:	00d2      	lsls	r2, r2, #3
    3232:	400a      	ands	r2, r1
    3234:	069b      	lsls	r3, r3, #26
    3236:	0f5b      	lsrs	r3, r3, #29
    3238:	4313      	orrs	r3, r2
    323a:	85bb      	strh	r3, [r7, #44]	; 0x2c
			) |
			ADC_CALIB_BIASCOMP(
				(*(uint32_t *)_adc_biascomp_addr[index] >> _adc_biascomp_pos[index])
			);

	return STATUS_OK;
    323c:	2300      	movs	r3, #0
    323e:	e000      	b.n	3242 <adc_init+0x3be>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    3240:	2317      	movs	r3, #23
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
    3242:	0018      	movs	r0, r3
    3244:	b01a      	add	sp, #104	; 0x68
    3246:	bc04      	pop	{r2}
    3248:	4691      	mov	r9, r2
    324a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    324c:	0000ffff 	.word	0x0000ffff
    3250:	00000fff 	.word	0x00000fff
    3254:	00806020 	.word	0x00806020

00003258 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
    3258:	b570      	push	{r4, r5, r6, lr}

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
	struct adc_module *module = _adc_instances[instance];
    325a:	4b2d      	ldr	r3, [pc, #180]	; (3310 <ADC_Handler+0xb8>)
    325c:	681c      	ldr	r4, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    325e:	6823      	ldr	r3, [r4, #0]
    3260:	799d      	ldrb	r5, [r3, #6]
    3262:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
    3264:	07ea      	lsls	r2, r5, #31
    3266:	d535      	bpl.n	32d4 <ADC_Handler+0x7c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    3268:	7ee2      	ldrb	r2, [r4, #27]
    326a:	07d2      	lsls	r2, r2, #31
    326c:	d532      	bpl.n	32d4 <ADC_Handler+0x7c>
    326e:	7ea2      	ldrb	r2, [r4, #26]
    3270:	07d2      	lsls	r2, r2, #31
    3272:	d52f      	bpl.n	32d4 <ADC_Handler+0x7c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    3274:	2201      	movs	r2, #1
    3276:	719a      	strb	r2, [r3, #6]

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    3278:	6962      	ldr	r2, [r4, #20]
    327a:	1c93      	adds	r3, r2, #2
    327c:	6163      	str	r3, [r4, #20]
    327e:	6823      	ldr	r3, [r4, #0]
    3280:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3282:	b29b      	uxth	r3, r3
    3284:	8013      	strh	r3, [r2, #0]

			if (--module->remaining_conversions > 0) {
    3286:	8b23      	ldrh	r3, [r4, #24]
    3288:	3b01      	subs	r3, #1
    328a:	b29b      	uxth	r3, r3
    328c:	8323      	strh	r3, [r4, #24]
    328e:	2b00      	cmp	r3, #0
    3290:	d015      	beq.n	32be <ADC_Handler+0x66>
				if (module->software_trigger == true
    3292:	7f63      	ldrb	r3, [r4, #29]
    3294:	2b00      	cmp	r3, #0
    3296:	d01d      	beq.n	32d4 <ADC_Handler+0x7c>
					&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
    3298:	6822      	ldr	r2, [r4, #0]
    329a:	79d3      	ldrb	r3, [r2, #7]
    329c:	b25b      	sxtb	r3, r3
    329e:	2b00      	cmp	r3, #0
    32a0:	db18      	blt.n	32d4 <ADC_Handler+0x7c>
    32a2:	8c13      	ldrh	r3, [r2, #32]
    32a4:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    32a6:	2b00      	cmp	r3, #0
    32a8:	d1fb      	bne.n	32a2 <ADC_Handler+0x4a>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    32aa:	7e11      	ldrb	r1, [r2, #24]
    32ac:	3302      	adds	r3, #2
    32ae:	430b      	orrs	r3, r1
    32b0:	7613      	strb	r3, [r2, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    32b2:	6822      	ldr	r2, [r4, #0]

	if (adc_module->SYNCBUSY.reg) {
    32b4:	8c13      	ldrh	r3, [r2, #32]
    32b6:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    32b8:	2b00      	cmp	r3, #0
    32ba:	d1fb      	bne.n	32b4 <ADC_Handler+0x5c>
    32bc:	e00a      	b.n	32d4 <ADC_Handler+0x7c>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    32be:	7f23      	ldrb	r3, [r4, #28]
    32c0:	2b05      	cmp	r3, #5
    32c2:	d107      	bne.n	32d4 <ADC_Handler+0x7c>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    32c4:	2300      	movs	r3, #0
    32c6:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    32c8:	3301      	adds	r3, #1
    32ca:	6822      	ldr	r2, [r4, #0]
    32cc:	7113      	strb	r3, [r2, #4]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    32ce:	0020      	movs	r0, r4
    32d0:	68a3      	ldr	r3, [r4, #8]
    32d2:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    32d4:	076b      	lsls	r3, r5, #29
    32d6:	d50b      	bpl.n	32f0 <ADC_Handler+0x98>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    32d8:	2304      	movs	r3, #4
    32da:	6822      	ldr	r2, [r4, #0]
    32dc:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    32de:	7ee3      	ldrb	r3, [r4, #27]
    32e0:	079b      	lsls	r3, r3, #30
    32e2:	d505      	bpl.n	32f0 <ADC_Handler+0x98>
    32e4:	7ea3      	ldrb	r3, [r4, #26]
    32e6:	079b      	lsls	r3, r3, #30
    32e8:	d502      	bpl.n	32f0 <ADC_Handler+0x98>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    32ea:	0020      	movs	r0, r4
    32ec:	68e3      	ldr	r3, [r4, #12]
    32ee:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    32f0:	07ab      	lsls	r3, r5, #30
    32f2:	d50b      	bpl.n	330c <ADC_Handler+0xb4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    32f4:	2302      	movs	r3, #2
    32f6:	6822      	ldr	r2, [r4, #0]
    32f8:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    32fa:	7ee3      	ldrb	r3, [r4, #27]
    32fc:	075b      	lsls	r3, r3, #29
    32fe:	d505      	bpl.n	330c <ADC_Handler+0xb4>
    3300:	7ea3      	ldrb	r3, [r4, #26]
    3302:	075b      	lsls	r3, r3, #29
    3304:	d502      	bpl.n	330c <ADC_Handler+0xb4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    3306:	6923      	ldr	r3, [r4, #16]
    3308:	0020      	movs	r0, r4
    330a:	4798      	blx	r3
	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
	_adc_interrupt_handler(0);
}
    330c:	bd70      	pop	{r4, r5, r6, pc}
    330e:	46c0      	nop			; (mov r8, r8)
    3310:	20003d7c 	.word	0x20003d7c

00003314 <adc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    3314:	1c93      	adds	r3, r2, #2
    3316:	009b      	lsls	r3, r3, #2
    3318:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
    331a:	2301      	movs	r3, #1
    331c:	4093      	lsls	r3, r2
    331e:	7e82      	ldrb	r2, [r0, #26]
    3320:	4313      	orrs	r3, r2
    3322:	7683      	strb	r3, [r0, #26]
}
    3324:	4770      	bx	lr
    3326:	46c0      	nop			; (mov r8, r8)

00003328 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
    3328:	b510      	push	{r4, lr}
    332a:	0004      	movs	r4, r0
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    332c:	8b03      	ldrh	r3, [r0, #24]
    332e:	b29b      	uxth	r3, r3
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
    3330:	2005      	movs	r0, #5
{
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    3332:	2b00      	cmp	r3, #0
    3334:	d11d      	bne.n	3372 <adc_read_buffer_job+0x4a>
			module_inst->job_status == STATUS_BUSY){
    3336:	7f23      	ldrb	r3, [r4, #28]
    3338:	b2d8      	uxtb	r0, r3
{
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    333a:	2805      	cmp	r0, #5
    333c:	d019      	beq.n	3372 <adc_read_buffer_job+0x4a>
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
	}

	module_inst->job_status = STATUS_BUSY;
    333e:	2305      	movs	r3, #5
    3340:	7723      	strb	r3, [r4, #28]
	module_inst->remaining_conversions = samples;
    3342:	8322      	strh	r2, [r4, #24]
	module_inst->job_buffer = buffer;
    3344:	6161      	str	r1, [r4, #20]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
    3346:	3b04      	subs	r3, #4
    3348:	6822      	ldr	r2, [r4, #0]
    334a:	7153      	strb	r3, [r2, #5]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);

	if(module_inst->software_trigger == true) {
    334c:	7f63      	ldrb	r3, [r4, #29]
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
    334e:	2000      	movs	r0, #0
	module_inst->remaining_conversions = samples;
	module_inst->job_buffer = buffer;

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);

	if(module_inst->software_trigger == true) {
    3350:	2b00      	cmp	r3, #0
    3352:	d00e      	beq.n	3372 <adc_read_buffer_job+0x4a>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3354:	6822      	ldr	r2, [r4, #0]
    3356:	8c13      	ldrh	r3, [r2, #32]
    3358:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    335a:	2b00      	cmp	r3, #0
    335c:	d1fb      	bne.n	3356 <adc_read_buffer_job+0x2e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    335e:	7e11      	ldrb	r1, [r2, #24]
    3360:	3302      	adds	r3, #2
    3362:	430b      	orrs	r3, r1
    3364:	7613      	strb	r3, [r2, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    3366:	6822      	ldr	r2, [r4, #0]

	if (adc_module->SYNCBUSY.reg) {
    3368:	8c13      	ldrh	r3, [r2, #32]
    336a:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    336c:	2b00      	cmp	r3, #0
    336e:	d1fb      	bne.n	3368 <adc_read_buffer_job+0x40>
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
    3370:	2000      	movs	r0, #0
}
    3372:	bd10      	pop	{r4, pc}

00003374 <opamp_module_init>:
 */

#include "opamp.h"

void opamp_module_init(void)
{
    3374:	b500      	push	{lr}
    3376:	b083      	sub	sp, #12
static inline void system_clock_source_osculp32k_get_config_defaults(
		struct system_clock_source_osculp32k_config *const config)
{
	Assert(config);

	config->write_once          = false;
    3378:	a801      	add	r0, sp, #4
    337a:	2300      	movs	r3, #0
    337c:	7003      	strb	r3, [r0, #0]
	struct system_clock_source_osculp32k_config config;

	/* Enable the OSCULP32K clock. */
	system_clock_source_osculp32k_get_config_defaults(&config);
	system_clock_source_osculp32k_set_config(&config);
    337e:	4b09      	ldr	r3, [pc, #36]	; (33a4 <opamp_module_init+0x30>)
    3380:	4798      	blx	r3

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    3382:	4a09      	ldr	r2, [pc, #36]	; (33a8 <opamp_module_init+0x34>)
    3384:	6a11      	ldr	r1, [r2, #32]
    3386:	2340      	movs	r3, #64	; 0x40
    3388:	430b      	orrs	r3, r1
    338a:	6213      	str	r3, [r2, #32]
 * and the OPAMP will be disabled.
 */
static inline void opamp_module_reset(void)
{
	/* Reset OPAMP. */
	OPAMP->CTRLA.reg |= OPAMP_CTRLA_SWRST;
    338c:	4b07      	ldr	r3, [pc, #28]	; (33ac <opamp_module_init+0x38>)
    338e:	7819      	ldrb	r1, [r3, #0]
    3390:	2201      	movs	r2, #1
    3392:	430a      	orrs	r2, r1
    3394:	701a      	strb	r2, [r3, #0]
 *
 */
static inline void opamp_module_enable(void)
{
	/* Enable OPAMP. */
	OPAMP->CTRLA.reg |= OPAMP_CTRLA_ENABLE;
    3396:	7819      	ldrb	r1, [r3, #0]
    3398:	2202      	movs	r2, #2
    339a:	430a      	orrs	r2, r1
    339c:	701a      	strb	r2, [r3, #0]
	/* Reset module. */
	opamp_module_reset();

	/* Enable module. */
	opamp_module_enable();
}
    339e:	b003      	add	sp, #12
    33a0:	bd00      	pop	{pc}
    33a2:	46c0      	nop			; (mov r8, r8)
    33a4:	00003555 	.word	0x00003555
    33a8:	40000400 	.word	0x40000400
    33ac:	43001800 	.word	0x43001800

000033b0 <opamp2_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->potentiometer_selection = OPAMP_POT_MUX_8R_8R;
    33b0:	2380      	movs	r3, #128	; 0x80
    33b2:	01db      	lsls	r3, r3, #7
    33b4:	8143      	strh	r3, [r0, #10]
	config->r1_enable = false;
    33b6:	2300      	movs	r3, #0
    33b8:	7303      	strb	r3, [r0, #12]
	config->r2_vcc = false;
    33ba:	7343      	strb	r3, [r0, #13]
	config->r2_out = false;
    33bc:	7383      	strb	r3, [r0, #14]
	config->on_demand = false;
    33be:	73c3      	strb	r3, [r0, #15]
	config->run_in_standby = false;
    33c0:	7403      	strb	r3, [r0, #16]
	config->bias_value = OPAMP_BIAS_MODE_0;
    33c2:	7443      	strb	r3, [r0, #17]
	config->analog_out = false;
    33c4:	7483      	strb	r3, [r0, #18]
	Assert(config);

	_opamp_get_config_common_defaults(&(config->config_common));

	/* Default configuration values */
	config->negative_input = OPAMP2_NEG_MUX_OUT2;
    33c6:	2280      	movs	r2, #128	; 0x80
    33c8:	0392      	lsls	r2, r2, #14
    33ca:	6002      	str	r2, [r0, #0]
	config->positive_input = OPAMP2_POS_MUX_PIN2;
    33cc:	6043      	str	r3, [r0, #4]
	config->r1_connection = OPAMP2_RES1_MUX_GND;
    33ce:	23c0      	movs	r3, #192	; 0xc0
    33d0:	015b      	lsls	r3, r3, #5
    33d2:	8103      	strh	r3, [r0, #8]
}
    33d4:	4770      	bx	lr
    33d6:	46c0      	nop			; (mov r8, r8)

000033d8 <opamp2_set_config>:

void opamp2_set_config(struct opamp2_config *const config)
{
	uint32_t temp = 0;

	if (config->config_common.r1_enable) {
    33d8:	7b03      	ldrb	r3, [r0, #12]
		temp |= OPAMP_OPAMPCTRL_RES1EN;
    33da:	1e5a      	subs	r2, r3, #1
    33dc:	4193      	sbcs	r3, r2
    33de:	029b      	lsls	r3, r3, #10
	}

	if (config->config_common.r2_vcc) {
    33e0:	7b42      	ldrb	r2, [r0, #13]
    33e2:	2a00      	cmp	r2, #0
    33e4:	d002      	beq.n	33ec <opamp2_set_config+0x14>
		temp |= OPAMP_OPAMPCTRL_RES2VCC;
    33e6:	2280      	movs	r2, #128	; 0x80
    33e8:	0092      	lsls	r2, r2, #2
    33ea:	4313      	orrs	r3, r2
	}

	if (config->config_common.r2_out) {
    33ec:	7b82      	ldrb	r2, [r0, #14]
    33ee:	2a00      	cmp	r2, #0
    33f0:	d002      	beq.n	33f8 <opamp2_set_config+0x20>
		temp |= OPAMP_OPAMPCTRL_RES2OUT;
    33f2:	2280      	movs	r2, #128	; 0x80
    33f4:	0052      	lsls	r2, r2, #1
    33f6:	4313      	orrs	r3, r2
	}

	if (config->config_common.on_demand) {
    33f8:	7bc2      	ldrb	r2, [r0, #15]
    33fa:	2a00      	cmp	r2, #0
    33fc:	d001      	beq.n	3402 <opamp2_set_config+0x2a>
		temp |= OPAMP_OPAMPCTRL_ONDEMAND;
    33fe:	2280      	movs	r2, #128	; 0x80
    3400:	4313      	orrs	r3, r2
	}

	if (config->config_common.run_in_standby) {
    3402:	7c02      	ldrb	r2, [r0, #16]
    3404:	2a00      	cmp	r2, #0
    3406:	d001      	beq.n	340c <opamp2_set_config+0x34>
		temp |= OPAMP_OPAMPCTRL_RUNSTDBY;
    3408:	2240      	movs	r2, #64	; 0x40
    340a:	4313      	orrs	r3, r2
	}

	if (config->config_common.analog_out) {
    340c:	7c82      	ldrb	r2, [r0, #18]
    340e:	2a00      	cmp	r2, #0
    3410:	d001      	beq.n	3416 <opamp2_set_config+0x3e>
		temp |= OPAMP_OPAMPCTRL_ANAOUT;
    3412:	2204      	movs	r2, #4
    3414:	4313      	orrs	r3, r2

	OPAMP->OPAMPCTRL[2].reg = temp |
		config->config_common.potentiometer_selection |
		config->config_common.bias_value |
		config->negative_input |
		config->positive_input|
    3416:	6801      	ldr	r1, [r0, #0]
    3418:	6842      	ldr	r2, [r0, #4]
    341a:	4311      	orrs	r1, r2
    341c:	8942      	ldrh	r2, [r0, #10]
    341e:	430a      	orrs	r2, r1
    3420:	7c41      	ldrb	r1, [r0, #17]
    3422:	430a      	orrs	r2, r1
    3424:	8901      	ldrh	r1, [r0, #8]
    3426:	430a      	orrs	r2, r1
    3428:	4313      	orrs	r3, r2

	if (config->config_common.analog_out) {
		temp |= OPAMP_OPAMPCTRL_ANAOUT;
	}

	OPAMP->OPAMPCTRL[2].reg = temp |
    342a:	4a01      	ldr	r2, [pc, #4]	; (3430 <opamp2_set_config+0x58>)
    342c:	60d3      	str	r3, [r2, #12]
		config->config_common.potentiometer_selection |
		config->config_common.bias_value |
		config->negative_input |
		config->positive_input|
		config->r1_connection;
}
    342e:	4770      	bx	lr
    3430:	43001800 	.word	0x43001800

00003434 <opamp_enable>:
{
	/* Sanity check arguments */
	Assert(number);

	/* Enable the OPAMP */
	if (number == OPAMP_0) {
    3434:	2800      	cmp	r0, #0
    3436:	d105      	bne.n	3444 <opamp_enable+0x10>
		OPAMP->OPAMPCTRL[0].reg |= OPAMP_OPAMPCTRL_ENABLE;
    3438:	4a0a      	ldr	r2, [pc, #40]	; (3464 <opamp_enable+0x30>)
    343a:	6851      	ldr	r1, [r2, #4]
    343c:	2302      	movs	r3, #2
    343e:	430b      	orrs	r3, r1
    3440:	6053      	str	r3, [r2, #4]
    3442:	e00e      	b.n	3462 <opamp_enable+0x2e>
	} else if (number == OPAMP_1) {
    3444:	2801      	cmp	r0, #1
    3446:	d105      	bne.n	3454 <opamp_enable+0x20>
		OPAMP->OPAMPCTRL[1].reg |= OPAMP_OPAMPCTRL_ENABLE;
    3448:	4a06      	ldr	r2, [pc, #24]	; (3464 <opamp_enable+0x30>)
    344a:	6891      	ldr	r1, [r2, #8]
    344c:	2302      	movs	r3, #2
    344e:	430b      	orrs	r3, r1
    3450:	6093      	str	r3, [r2, #8]
    3452:	e006      	b.n	3462 <opamp_enable+0x2e>
	} else if (number == OPAMP_2) {
    3454:	2802      	cmp	r0, #2
    3456:	d104      	bne.n	3462 <opamp_enable+0x2e>
		OPAMP->OPAMPCTRL[2].reg |= OPAMP_OPAMPCTRL_ENABLE;
    3458:	4a02      	ldr	r2, [pc, #8]	; (3464 <opamp_enable+0x30>)
    345a:	68d1      	ldr	r1, [r2, #12]
    345c:	2302      	movs	r3, #2
    345e:	430b      	orrs	r3, r1
    3460:	60d3      	str	r3, [r2, #12]
	}
}
    3462:	4770      	bx	lr
    3464:	43001800 	.word	0x43001800

00003468 <opamp_is_ready>:
		OPAMP->OPAMPCTRL[2].reg &= ~OPAMP_OPAMPCTRL_ENABLE;
	}
}

bool opamp_is_ready(const enum opamp_id number)
{
    3468:	1e03      	subs	r3, r0, #0
	/* Sanity check arguments */
	Assert(number);

	/* Get the OPAMP output ready status*/
	if (number == OPAMP_0) {
    346a:	d105      	bne.n	3478 <opamp_is_ready+0x10>
		return OPAMP->STATUS.bit.READY0;
    346c:	4b0a      	ldr	r3, [pc, #40]	; (3498 <opamp_is_ready+0x30>)
    346e:	7898      	ldrb	r0, [r3, #2]
    3470:	07c0      	lsls	r0, r0, #31
    3472:	0fc0      	lsrs	r0, r0, #31
    3474:	b2c0      	uxtb	r0, r0
    3476:	e00d      	b.n	3494 <opamp_is_ready+0x2c>
	} else if (number == OPAMP_1) {
    3478:	2801      	cmp	r0, #1
    347a:	d104      	bne.n	3486 <opamp_is_ready+0x1e>
		return OPAMP->STATUS.bit.READY1;
    347c:	4b06      	ldr	r3, [pc, #24]	; (3498 <opamp_is_ready+0x30>)
    347e:	7898      	ldrb	r0, [r3, #2]
    3480:	0780      	lsls	r0, r0, #30
    3482:	0fc0      	lsrs	r0, r0, #31
    3484:	e006      	b.n	3494 <opamp_is_ready+0x2c>
	} else if (number == OPAMP_2) {
		return OPAMP->STATUS.bit.READY2;
	}

	return false;
    3486:	2000      	movs	r0, #0
	/* Get the OPAMP output ready status*/
	if (number == OPAMP_0) {
		return OPAMP->STATUS.bit.READY0;
	} else if (number == OPAMP_1) {
		return OPAMP->STATUS.bit.READY1;
	} else if (number == OPAMP_2) {
    3488:	2b02      	cmp	r3, #2
    348a:	d103      	bne.n	3494 <opamp_is_ready+0x2c>
		return OPAMP->STATUS.bit.READY2;
    348c:	4b02      	ldr	r3, [pc, #8]	; (3498 <opamp_is_ready+0x30>)
    348e:	7898      	ldrb	r0, [r3, #2]
    3490:	0740      	lsls	r0, r0, #29
    3492:	0fc0      	lsrs	r0, r0, #31
	}

	return false;
}
    3494:	4770      	bx	lr
    3496:	46c0      	nop			; (mov r8, r8)
    3498:	43001800 	.word	0x43001800

0000349c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    349c:	b500      	push	{lr}
    349e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    34a0:	ab01      	add	r3, sp, #4
    34a2:	2280      	movs	r2, #128	; 0x80
    34a4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    34a6:	780a      	ldrb	r2, [r1, #0]
    34a8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    34aa:	784a      	ldrb	r2, [r1, #1]
    34ac:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    34ae:	788a      	ldrb	r2, [r1, #2]
    34b0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    34b2:	0019      	movs	r1, r3
    34b4:	4b01      	ldr	r3, [pc, #4]	; (34bc <port_pin_set_config+0x20>)
    34b6:	4798      	blx	r3
}
    34b8:	b003      	add	sp, #12
    34ba:	bd00      	pop	{pc}
    34bc:	0000394d 	.word	0x0000394d

000034c0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    34c0:	b510      	push	{r4, lr}
	switch (clock_source) {
    34c2:	2808      	cmp	r0, #8
    34c4:	d803      	bhi.n	34ce <system_clock_source_get_hz+0xe>
    34c6:	0080      	lsls	r0, r0, #2
    34c8:	4b1c      	ldr	r3, [pc, #112]	; (353c <system_clock_source_get_hz+0x7c>)
    34ca:	581b      	ldr	r3, [r3, r0]
    34cc:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    34ce:	2000      	movs	r0, #0
    34d0:	e032      	b.n	3538 <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    34d2:	4b1b      	ldr	r3, [pc, #108]	; (3540 <system_clock_source_get_hz+0x80>)
    34d4:	6918      	ldr	r0, [r3, #16]
    34d6:	e02f      	b.n	3538 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    34d8:	4b1a      	ldr	r3, [pc, #104]	; (3544 <system_clock_source_get_hz+0x84>)
    34da:	7d18      	ldrb	r0, [r3, #20]
    34dc:	0700      	lsls	r0, r0, #28
    34de:	0f80      	lsrs	r0, r0, #30
    34e0:	3001      	adds	r0, #1
    34e2:	4b19      	ldr	r3, [pc, #100]	; (3548 <system_clock_source_get_hz+0x88>)
    34e4:	4358      	muls	r0, r3
    34e6:	e027      	b.n	3538 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    34e8:	4b15      	ldr	r3, [pc, #84]	; (3540 <system_clock_source_get_hz+0x80>)
    34ea:	6958      	ldr	r0, [r3, #20]
    34ec:	e024      	b.n	3538 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    34ee:	4b14      	ldr	r3, [pc, #80]	; (3540 <system_clock_source_get_hz+0x80>)
    34f0:	681b      	ldr	r3, [r3, #0]
    34f2:	2002      	movs	r0, #2
    34f4:	4018      	ands	r0, r3
    34f6:	d01f      	beq.n	3538 <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    34f8:	4912      	ldr	r1, [pc, #72]	; (3544 <system_clock_source_get_hz+0x84>)
    34fa:	2280      	movs	r2, #128	; 0x80
    34fc:	0052      	lsls	r2, r2, #1
    34fe:	68cb      	ldr	r3, [r1, #12]
    3500:	4213      	tst	r3, r2
    3502:	d0fc      	beq.n	34fe <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    3504:	4b0e      	ldr	r3, [pc, #56]	; (3540 <system_clock_source_get_hz+0x80>)
    3506:	681b      	ldr	r3, [r3, #0]
    3508:	075b      	lsls	r3, r3, #29
    350a:	d514      	bpl.n	3536 <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    350c:	2000      	movs	r0, #0
    350e:	4b0f      	ldr	r3, [pc, #60]	; (354c <system_clock_source_get_hz+0x8c>)
    3510:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    3512:	4b0b      	ldr	r3, [pc, #44]	; (3540 <system_clock_source_get_hz+0x80>)
    3514:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    3516:	041b      	lsls	r3, r3, #16
    3518:	0c1b      	lsrs	r3, r3, #16
    351a:	4358      	muls	r0, r3
    351c:	e00c      	b.n	3538 <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    351e:	2328      	movs	r3, #40	; 0x28
    3520:	4a08      	ldr	r2, [pc, #32]	; (3544 <system_clock_source_get_hz+0x84>)
    3522:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    3524:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    3526:	079b      	lsls	r3, r3, #30
    3528:	d506      	bpl.n	3538 <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    352a:	4b05      	ldr	r3, [pc, #20]	; (3540 <system_clock_source_get_hz+0x80>)
    352c:	68d8      	ldr	r0, [r3, #12]
    352e:	e003      	b.n	3538 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    3530:	2080      	movs	r0, #128	; 0x80
    3532:	0200      	lsls	r0, r0, #8
    3534:	e000      	b.n	3538 <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    3536:	4806      	ldr	r0, [pc, #24]	; (3550 <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    3538:	bd10      	pop	{r4, pc}
    353a:	46c0      	nop			; (mov r8, r8)
    353c:	00006d44 	.word	0x00006d44
    3540:	20003ccc 	.word	0x20003ccc
    3544:	40000c00 	.word	0x40000c00
    3548:	003d0900 	.word	0x003d0900
    354c:	00003875 	.word	0x00003875
    3550:	02dc6c00 	.word	0x02dc6c00

00003554 <system_clock_source_osculp32k_set_config>:
 *
 * \param[in] config  OSCULP32K configuration structure containing the new config
 */
void system_clock_source_osculp32k_set_config(
		struct system_clock_source_osculp32k_config *const config)
{
    3554:	b510      	push	{r4, lr}
	OSC32KCTRL_OSCULP32K_Type temp = OSC32KCTRL->OSCULP32K;
    3556:	4905      	ldr	r1, [pc, #20]	; (356c <system_clock_source_osculp32k_set_config+0x18>)
    3558:	69cc      	ldr	r4, [r1, #28]
	/* Update settings via a temporary struct to reduce register access */
	temp.bit.WRTLOCK  = config->write_once;
	OSC32KCTRL->OSCULP32K  = temp;
    355a:	7802      	ldrb	r2, [r0, #0]
    355c:	2301      	movs	r3, #1
    355e:	401a      	ands	r2, r3
    3560:	03d2      	lsls	r2, r2, #15
    3562:	4b03      	ldr	r3, [pc, #12]	; (3570 <system_clock_source_osculp32k_set_config+0x1c>)
    3564:	4023      	ands	r3, r4
    3566:	4313      	orrs	r3, r2
    3568:	61cb      	str	r3, [r1, #28]
}
    356a:	bd10      	pop	{r4, pc}
    356c:	40001000 	.word	0x40001000
    3570:	ffff7fff 	.word	0xffff7fff

00003574 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3574:	b510      	push	{r4, lr}
    3576:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    3578:	2280      	movs	r2, #128	; 0x80
    357a:	0052      	lsls	r2, r2, #1
    357c:	4b2f      	ldr	r3, [pc, #188]	; (363c <system_clock_init+0xc8>)
    357e:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    3580:	3afd      	subs	r2, #253	; 0xfd
    3582:	4b2f      	ldr	r3, [pc, #188]	; (3640 <system_clock_init+0xcc>)
    3584:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3586:	4a2f      	ldr	r2, [pc, #188]	; (3644 <system_clock_init+0xd0>)
    3588:	6853      	ldr	r3, [r2, #4]
    358a:	211e      	movs	r1, #30
    358c:	438b      	bics	r3, r1
    358e:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    3590:	2380      	movs	r3, #128	; 0x80
    3592:	05db      	lsls	r3, r3, #23
    3594:	789b      	ldrb	r3, [r3, #2]
    3596:	2b02      	cmp	r3, #2
    3598:	d00f      	beq.n	35ba <system_clock_init+0x46>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    359a:	2380      	movs	r3, #128	; 0x80
    359c:	05db      	lsls	r3, r3, #23
    359e:	789b      	ldrb	r3, [r3, #2]
    35a0:	b25b      	sxtb	r3, r3
    35a2:	2b00      	cmp	r3, #0
    35a4:	db09      	blt.n	35ba <system_clock_init+0x46>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    35a6:	2380      	movs	r3, #128	; 0x80
    35a8:	05db      	lsls	r3, r3, #23
    35aa:	2201      	movs	r2, #1
    35ac:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    35ae:	3201      	adds	r2, #1
    35b0:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    35b2:	001a      	movs	r2, r3
    35b4:	7993      	ldrb	r3, [r2, #6]
    35b6:	2b00      	cmp	r3, #0
    35b8:	d0fc      	beq.n	35b4 <system_clock_init+0x40>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    35ba:	4b20      	ldr	r3, [pc, #128]	; (363c <system_clock_init+0xc8>)
    35bc:	7d1a      	ldrb	r2, [r3, #20]
    35be:	2180      	movs	r1, #128	; 0x80
    35c0:	4249      	negs	r1, r1
    35c2:	430a      	orrs	r2, r1
    35c4:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    35c6:	7d1a      	ldrb	r2, [r3, #20]
    35c8:	31c0      	adds	r1, #192	; 0xc0
    35ca:	438a      	bics	r2, r1
    35cc:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    35ce:	4b1e      	ldr	r3, [pc, #120]	; (3648 <system_clock_init+0xd4>)
    35d0:	4798      	blx	r3
 * \param[in] divider  CPU clock divider
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    35d2:	4c1e      	ldr	r4, [pc, #120]	; (364c <system_clock_init+0xd8>)
    35d4:	2301      	movs	r3, #1
    35d6:	71a3      	strb	r3, [r4, #6]
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_low_power_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    35d8:	7163      	strb	r3, [r4, #5]
 * \param[in] divider  CPU clock divider
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    35da:	7123      	strb	r3, [r4, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    35dc:	a901      	add	r1, sp, #4
    35de:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    35e0:	2300      	movs	r3, #0
    35e2:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
    35e4:	2206      	movs	r2, #6
    35e6:	700a      	strb	r2, [r1, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    35e8:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    35ea:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    35ec:	2000      	movs	r0, #0
    35ee:	4b18      	ldr	r3, [pc, #96]	; (3650 <system_clock_init+0xdc>)
    35f0:	4798      	blx	r3
    35f2:	2000      	movs	r0, #0
    35f4:	4b17      	ldr	r3, [pc, #92]	; (3654 <system_clock_init+0xe0>)
    35f6:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    35f8:	2000      	movs	r0, #0
    35fa:	4b17      	ldr	r3, [pc, #92]	; (3658 <system_clock_init+0xe4>)
    35fc:	4798      	blx	r3
    35fe:	7921      	ldrb	r1, [r4, #4]
    3600:	b2c9      	uxtb	r1, r1
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    3602:	4b16      	ldr	r3, [pc, #88]	; (365c <system_clock_init+0xe8>)
    3604:	4798      	blx	r3
    3606:	4b16      	ldr	r3, [pc, #88]	; (3660 <system_clock_init+0xec>)
    3608:	4298      	cmp	r0, r3
    360a:	d814      	bhi.n	3636 <system_clock_init+0xc2>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    360c:	2380      	movs	r3, #128	; 0x80
    360e:	05db      	lsls	r3, r3, #23
    3610:	789b      	ldrb	r3, [r3, #2]
    3612:	2b00      	cmp	r3, #0
    3614:	d00f      	beq.n	3636 <system_clock_init+0xc2>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    3616:	2380      	movs	r3, #128	; 0x80
    3618:	05db      	lsls	r3, r3, #23
    361a:	789b      	ldrb	r3, [r3, #2]
    361c:	b25b      	sxtb	r3, r3
    361e:	2b00      	cmp	r3, #0
    3620:	db09      	blt.n	3636 <system_clock_init+0xc2>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    3622:	2380      	movs	r3, #128	; 0x80
    3624:	05db      	lsls	r3, r3, #23
    3626:	2201      	movs	r2, #1
    3628:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    362a:	2200      	movs	r2, #0
    362c:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    362e:	001a      	movs	r2, r3
    3630:	7993      	ldrb	r3, [r2, #6]
    3632:	2b00      	cmp	r3, #0
    3634:	d0fc      	beq.n	3630 <system_clock_init+0xbc>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    3636:	b004      	add	sp, #16
    3638:	bd10      	pop	{r4, pc}
    363a:	46c0      	nop			; (mov r8, r8)
    363c:	40000c00 	.word	0x40000c00
    3640:	40001400 	.word	0x40001400
    3644:	41004000 	.word	0x41004000
    3648:	00003665 	.word	0x00003665
    364c:	40000400 	.word	0x40000400
    3650:	00003689 	.word	0x00003689
    3654:	00003735 	.word	0x00003735
    3658:	00003775 	.word	0x00003775
    365c:	00004715 	.word	0x00004715
    3660:	00b71b00 	.word	0x00b71b00

00003664 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    3664:	4a06      	ldr	r2, [pc, #24]	; (3680 <system_gclk_init+0x1c>)
    3666:	6951      	ldr	r1, [r2, #20]
    3668:	2340      	movs	r3, #64	; 0x40
    366a:	430b      	orrs	r3, r1
    366c:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    366e:	2201      	movs	r2, #1
    3670:	4b04      	ldr	r3, [pc, #16]	; (3684 <system_gclk_init+0x20>)
    3672:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    3674:	0019      	movs	r1, r3
    3676:	780b      	ldrb	r3, [r1, #0]
    3678:	4213      	tst	r3, r2
    367a:	d1fc      	bne.n	3676 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    367c:	4770      	bx	lr
    367e:	46c0      	nop			; (mov r8, r8)
    3680:	40000400 	.word	0x40000400
    3684:	40001800 	.word	0x40001800

00003688 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3688:	b570      	push	{r4, r5, r6, lr}
    368a:	0005      	movs	r5, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    368c:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    368e:	784b      	ldrb	r3, [r1, #1]
    3690:	2b00      	cmp	r3, #0
    3692:	d002      	beq.n	369a <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3694:	2380      	movs	r3, #128	; 0x80
    3696:	00db      	lsls	r3, r3, #3
    3698:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    369a:	7a4b      	ldrb	r3, [r1, #9]
    369c:	2b00      	cmp	r3, #0
    369e:	d002      	beq.n	36a6 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    36a0:	2380      	movs	r3, #128	; 0x80
    36a2:	011b      	lsls	r3, r3, #4
    36a4:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    36a6:	684a      	ldr	r2, [r1, #4]
    36a8:	2a01      	cmp	r2, #1
    36aa:	d917      	bls.n	36dc <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    36ac:	1e53      	subs	r3, r2, #1
    36ae:	421a      	tst	r2, r3
    36b0:	d10f      	bne.n	36d2 <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    36b2:	2a02      	cmp	r2, #2
    36b4:	d906      	bls.n	36c4 <system_gclk_gen_set_config+0x3c>
    36b6:	2302      	movs	r3, #2
    36b8:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    36ba:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    36bc:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    36be:	429a      	cmp	r2, r3
    36c0:	d8fb      	bhi.n	36ba <system_gclk_gen_set_config+0x32>
    36c2:	e000      	b.n	36c6 <system_gclk_gen_set_config+0x3e>
    36c4:	2000      	movs	r0, #0
    36c6:	2380      	movs	r3, #128	; 0x80
    36c8:	015b      	lsls	r3, r3, #5
    36ca:	431c      	orrs	r4, r3
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    36cc:	0400      	lsls	r0, r0, #16
    36ce:	4304      	orrs	r4, r0
    36d0:	e004      	b.n	36dc <system_gclk_gen_set_config+0x54>

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    36d2:	0412      	lsls	r2, r2, #16
    36d4:	2380      	movs	r3, #128	; 0x80
    36d6:	009b      	lsls	r3, r3, #2
    36d8:	431a      	orrs	r2, r3
    36da:	4314      	orrs	r4, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    36dc:	7a0b      	ldrb	r3, [r1, #8]
    36de:	2b00      	cmp	r3, #0
    36e0:	d002      	beq.n	36e8 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    36e2:	2380      	movs	r3, #128	; 0x80
    36e4:	019b      	lsls	r3, r3, #6
    36e6:	431c      	orrs	r4, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    36e8:	2604      	movs	r6, #4
    36ea:	40ae      	lsls	r6, r5
    36ec:	490d      	ldr	r1, [pc, #52]	; (3724 <system_gclk_gen_set_config+0x9c>)
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    36ee:	4a0e      	ldr	r2, [pc, #56]	; (3728 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    36f0:	684b      	ldr	r3, [r1, #4]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    36f2:	4013      	ands	r3, r2
    36f4:	421e      	tst	r6, r3
    36f6:	d1fb      	bne.n	36f0 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    36f8:	4b0c      	ldr	r3, [pc, #48]	; (372c <system_gclk_gen_set_config+0xa4>)
    36fa:	4798      	blx	r3
    36fc:	00ad      	lsls	r5, r5, #2
    36fe:	4b09      	ldr	r3, [pc, #36]	; (3724 <system_gclk_gen_set_config+0x9c>)
    3700:	469c      	mov	ip, r3
    3702:	4465      	add	r5, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    3704:	6a28      	ldr	r0, [r5, #32]
    3706:	2380      	movs	r3, #128	; 0x80
    3708:	005b      	lsls	r3, r3, #1
    370a:	4018      	ands	r0, r3
    370c:	4320      	orrs	r0, r4
    370e:	6228      	str	r0, [r5, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3710:	4661      	mov	r1, ip

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    3712:	4a05      	ldr	r2, [pc, #20]	; (3728 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3714:	684b      	ldr	r3, [r1, #4]

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    3716:	4013      	ands	r3, r2
    3718:	421e      	tst	r6, r3
    371a:	d1fb      	bne.n	3714 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    371c:	4b04      	ldr	r3, [pc, #16]	; (3730 <system_gclk_gen_set_config+0xa8>)
    371e:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    3720:	bd70      	pop	{r4, r5, r6, pc}
    3722:	46c0      	nop			; (mov r8, r8)
    3724:	40001800 	.word	0x40001800
    3728:	000007fc 	.word	0x000007fc
    372c:	00002d81 	.word	0x00002d81
    3730:	00002dc1 	.word	0x00002dc1

00003734 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3734:	b510      	push	{r4, lr}
    3736:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3738:	2204      	movs	r2, #4
    373a:	4082      	lsls	r2, r0
    373c:	4809      	ldr	r0, [pc, #36]	; (3764 <system_gclk_gen_enable+0x30>)
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    373e:	490a      	ldr	r1, [pc, #40]	; (3768 <system_gclk_gen_enable+0x34>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3740:	6843      	ldr	r3, [r0, #4]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    3742:	400b      	ands	r3, r1
    3744:	421a      	tst	r2, r3
    3746:	d1fb      	bne.n	3740 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3748:	4b08      	ldr	r3, [pc, #32]	; (376c <system_gclk_gen_enable+0x38>)
    374a:	4798      	blx	r3
    374c:	00a4      	lsls	r4, r4, #2
    374e:	4b05      	ldr	r3, [pc, #20]	; (3764 <system_gclk_gen_enable+0x30>)
    3750:	469c      	mov	ip, r3
    3752:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    3754:	6a23      	ldr	r3, [r4, #32]
    3756:	2280      	movs	r2, #128	; 0x80
    3758:	0052      	lsls	r2, r2, #1
    375a:	4313      	orrs	r3, r2
    375c:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    375e:	4b04      	ldr	r3, [pc, #16]	; (3770 <system_gclk_gen_enable+0x3c>)
    3760:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3762:	bd10      	pop	{r4, pc}
    3764:	40001800 	.word	0x40001800
    3768:	000007fc 	.word	0x000007fc
    376c:	00002d81 	.word	0x00002d81
    3770:	00002dc1 	.word	0x00002dc1

00003774 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3776:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3778:	2204      	movs	r2, #4
    377a:	4082      	lsls	r2, r0
    377c:	4812      	ldr	r0, [pc, #72]	; (37c8 <system_gclk_gen_get_hz+0x54>)
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    377e:	4913      	ldr	r1, [pc, #76]	; (37cc <system_gclk_gen_get_hz+0x58>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3780:	6843      	ldr	r3, [r0, #4]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    3782:	400b      	ands	r3, r1
    3784:	421a      	tst	r2, r3
    3786:	d1fb      	bne.n	3780 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3788:	4b11      	ldr	r3, [pc, #68]	; (37d0 <system_gclk_gen_get_hz+0x5c>)
    378a:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    378c:	4f0e      	ldr	r7, [pc, #56]	; (37c8 <system_gclk_gen_get_hz+0x54>)
    378e:	3408      	adds	r4, #8
    3790:	00a4      	lsls	r4, r4, #2
    3792:	59e0      	ldr	r0, [r4, r7]
    3794:	0700      	lsls	r0, r0, #28
    3796:	0f00      	lsrs	r0, r0, #28
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3798:	4b0e      	ldr	r3, [pc, #56]	; (37d4 <system_gclk_gen_get_hz+0x60>)
    379a:	4798      	blx	r3
    379c:	0006      	movs	r6, r0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    379e:	59e5      	ldr	r5, [r4, r7]
    37a0:	04ed      	lsls	r5, r5, #19
    37a2:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    37a4:	59e4      	ldr	r4, [r4, r7]
    37a6:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    37a8:	4b0b      	ldr	r3, [pc, #44]	; (37d8 <system_gclk_gen_get_hz+0x64>)
    37aa:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    37ac:	2d00      	cmp	r5, #0
    37ae:	d107      	bne.n	37c0 <system_gclk_gen_get_hz+0x4c>
    37b0:	2c01      	cmp	r4, #1
    37b2:	d907      	bls.n	37c4 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    37b4:	0021      	movs	r1, r4
    37b6:	0030      	movs	r0, r6
    37b8:	4b08      	ldr	r3, [pc, #32]	; (37dc <system_gclk_gen_get_hz+0x68>)
    37ba:	4798      	blx	r3
    37bc:	0006      	movs	r6, r0
    37be:	e001      	b.n	37c4 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    37c0:	3401      	adds	r4, #1
    37c2:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    37c4:	0030      	movs	r0, r6
    37c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37c8:	40001800 	.word	0x40001800
    37cc:	000007fc 	.word	0x000007fc
    37d0:	00002d81 	.word	0x00002d81
    37d4:	000034c1 	.word	0x000034c1
    37d8:	00002dc1 	.word	0x00002dc1
    37dc:	00004715 	.word	0x00004715

000037e0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    37e0:	b510      	push	{r4, lr}
    37e2:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    37e4:	4b09      	ldr	r3, [pc, #36]	; (380c <system_gclk_chan_enable+0x2c>)
    37e6:	4798      	blx	r3
    37e8:	00a0      	lsls	r0, r4, #2
    37ea:	4b09      	ldr	r3, [pc, #36]	; (3810 <system_gclk_chan_enable+0x30>)
    37ec:	469c      	mov	ip, r3
    37ee:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    37f0:	2280      	movs	r2, #128	; 0x80
    37f2:	5881      	ldr	r1, [r0, r2]
    37f4:	2340      	movs	r3, #64	; 0x40
    37f6:	430b      	orrs	r3, r1
    37f8:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    37fa:	2180      	movs	r1, #128	; 0x80
    37fc:	3a40      	subs	r2, #64	; 0x40
    37fe:	5843      	ldr	r3, [r0, r1]
    3800:	421a      	tst	r2, r3
    3802:	d0fc      	beq.n	37fe <system_gclk_chan_enable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3804:	4b03      	ldr	r3, [pc, #12]	; (3814 <system_gclk_chan_enable+0x34>)
    3806:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    3808:	bd10      	pop	{r4, pc}
    380a:	46c0      	nop			; (mov r8, r8)
    380c:	00002d81 	.word	0x00002d81
    3810:	40001800 	.word	0x40001800
    3814:	00002dc1 	.word	0x00002dc1

00003818 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3818:	b510      	push	{r4, lr}
    381a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    381c:	4b09      	ldr	r3, [pc, #36]	; (3844 <system_gclk_chan_disable+0x2c>)
    381e:	4798      	blx	r3
    3820:	00a0      	lsls	r0, r4, #2
    3822:	4b09      	ldr	r3, [pc, #36]	; (3848 <system_gclk_chan_disable+0x30>)
    3824:	469c      	mov	ip, r3
    3826:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    3828:	2280      	movs	r2, #128	; 0x80
    382a:	5883      	ldr	r3, [r0, r2]
    382c:	2140      	movs	r1, #64	; 0x40
    382e:	438b      	bics	r3, r1
    3830:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    3832:	3140      	adds	r1, #64	; 0x40
    3834:	3a40      	subs	r2, #64	; 0x40
    3836:	5843      	ldr	r3, [r0, r1]
    3838:	421a      	tst	r2, r3
    383a:	d1fc      	bne.n	3836 <system_gclk_chan_disable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    383c:	4b03      	ldr	r3, [pc, #12]	; (384c <system_gclk_chan_disable+0x34>)
    383e:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    3840:	bd10      	pop	{r4, pc}
    3842:	46c0      	nop			; (mov r8, r8)
    3844:	00002d81 	.word	0x00002d81
    3848:	40001800 	.word	0x40001800
    384c:	00002dc1 	.word	0x00002dc1

00003850 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    3850:	b570      	push	{r4, r5, r6, lr}
    3852:	0004      	movs	r4, r0
    3854:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    3856:	4b05      	ldr	r3, [pc, #20]	; (386c <system_gclk_chan_set_config+0x1c>)
    3858:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    385a:	782b      	ldrb	r3, [r5, #0]
    385c:	220f      	movs	r2, #15
    385e:	4013      	ands	r3, r2
    3860:	3420      	adds	r4, #32
    3862:	00a4      	lsls	r4, r4, #2
    3864:	4a02      	ldr	r2, [pc, #8]	; (3870 <system_gclk_chan_set_config+0x20>)
    3866:	50a3      	str	r3, [r4, r2]


}
    3868:	bd70      	pop	{r4, r5, r6, pc}
    386a:	46c0      	nop			; (mov r8, r8)
    386c:	00003819 	.word	0x00003819
    3870:	40001800 	.word	0x40001800

00003874 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3874:	b510      	push	{r4, lr}
    3876:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3878:	4b06      	ldr	r3, [pc, #24]	; (3894 <system_gclk_chan_get_hz+0x20>)
    387a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    387c:	3420      	adds	r4, #32
    387e:	00a4      	lsls	r4, r4, #2
    3880:	4b05      	ldr	r3, [pc, #20]	; (3898 <system_gclk_chan_get_hz+0x24>)
    3882:	58e4      	ldr	r4, [r4, r3]
    3884:	0724      	lsls	r4, r4, #28
    3886:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3888:	4b04      	ldr	r3, [pc, #16]	; (389c <system_gclk_chan_get_hz+0x28>)
    388a:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    388c:	0020      	movs	r0, r4
    388e:	4b04      	ldr	r3, [pc, #16]	; (38a0 <system_gclk_chan_get_hz+0x2c>)
    3890:	4798      	blx	r3
}
    3892:	bd10      	pop	{r4, pc}
    3894:	00002d81 	.word	0x00002d81
    3898:	40001800 	.word	0x40001800
    389c:	00002dc1 	.word	0x00002dc1
    38a0:	00003775 	.word	0x00003775

000038a4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    38a4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    38a6:	78d3      	ldrb	r3, [r2, #3]
    38a8:	2b00      	cmp	r3, #0
    38aa:	d11e      	bne.n	38ea <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    38ac:	7813      	ldrb	r3, [r2, #0]
    38ae:	2b80      	cmp	r3, #128	; 0x80
    38b0:	d004      	beq.n	38bc <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    38b2:	061b      	lsls	r3, r3, #24
    38b4:	2480      	movs	r4, #128	; 0x80
    38b6:	0264      	lsls	r4, r4, #9
    38b8:	4323      	orrs	r3, r4
    38ba:	e000      	b.n	38be <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    38bc:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    38be:	7854      	ldrb	r4, [r2, #1]
    38c0:	2502      	movs	r5, #2
    38c2:	43ac      	bics	r4, r5
    38c4:	d10a      	bne.n	38dc <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    38c6:	7894      	ldrb	r4, [r2, #2]
    38c8:	2c00      	cmp	r4, #0
    38ca:	d103      	bne.n	38d4 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    38cc:	2480      	movs	r4, #128	; 0x80
    38ce:	02a4      	lsls	r4, r4, #10
    38d0:	4323      	orrs	r3, r4
    38d2:	e002      	b.n	38da <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    38d4:	24c0      	movs	r4, #192	; 0xc0
    38d6:	02e4      	lsls	r4, r4, #11
    38d8:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    38da:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    38dc:	7854      	ldrb	r4, [r2, #1]
    38de:	3c01      	subs	r4, #1
    38e0:	2c01      	cmp	r4, #1
    38e2:	d812      	bhi.n	390a <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    38e4:	4c18      	ldr	r4, [pc, #96]	; (3948 <_system_pinmux_config+0xa4>)
    38e6:	4023      	ands	r3, r4
    38e8:	e00f      	b.n	390a <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    38ea:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    38ec:	040b      	lsls	r3, r1, #16
    38ee:	0c1b      	lsrs	r3, r3, #16
    38f0:	24a0      	movs	r4, #160	; 0xa0
    38f2:	05e4      	lsls	r4, r4, #23
    38f4:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    38f6:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    38f8:	0c0b      	lsrs	r3, r1, #16
    38fa:	24d0      	movs	r4, #208	; 0xd0
    38fc:	0624      	lsls	r4, r4, #24
    38fe:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3900:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3902:	78d3      	ldrb	r3, [r2, #3]
    3904:	2b00      	cmp	r3, #0
    3906:	d018      	beq.n	393a <_system_pinmux_config+0x96>
    3908:	e01c      	b.n	3944 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    390a:	040c      	lsls	r4, r1, #16
    390c:	0c24      	lsrs	r4, r4, #16
    390e:	25a0      	movs	r5, #160	; 0xa0
    3910:	05ed      	lsls	r5, r5, #23
    3912:	432c      	orrs	r4, r5
    3914:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3916:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3918:	0c0c      	lsrs	r4, r1, #16
    391a:	25d0      	movs	r5, #208	; 0xd0
    391c:	062d      	lsls	r5, r5, #24
    391e:	432c      	orrs	r4, r5
    3920:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3922:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3924:	78d4      	ldrb	r4, [r2, #3]
    3926:	2c00      	cmp	r4, #0
    3928:	d10c      	bne.n	3944 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    392a:	035b      	lsls	r3, r3, #13
    392c:	d505      	bpl.n	393a <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    392e:	7893      	ldrb	r3, [r2, #2]
    3930:	2b01      	cmp	r3, #1
    3932:	d101      	bne.n	3938 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    3934:	6181      	str	r1, [r0, #24]
    3936:	e000      	b.n	393a <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    3938:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    393a:	7853      	ldrb	r3, [r2, #1]
    393c:	3b01      	subs	r3, #1
    393e:	2b01      	cmp	r3, #1
    3940:	d800      	bhi.n	3944 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    3942:	6081      	str	r1, [r0, #8]
		}
	}
}
    3944:	bd30      	pop	{r4, r5, pc}
    3946:	46c0      	nop			; (mov r8, r8)
    3948:	fffbffff 	.word	0xfffbffff

0000394c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    394c:	b510      	push	{r4, lr}
    394e:	0003      	movs	r3, r0
    3950:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3952:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3954:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3956:	2900      	cmp	r1, #0
    3958:	d104      	bne.n	3964 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    395a:	0958      	lsrs	r0, r3, #5
    395c:	01c0      	lsls	r0, r0, #7
    395e:	4905      	ldr	r1, [pc, #20]	; (3974 <system_pinmux_pin_set_config+0x28>)
    3960:	468c      	mov	ip, r1
    3962:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    3964:	211f      	movs	r1, #31
    3966:	400b      	ands	r3, r1
    3968:	391e      	subs	r1, #30
    396a:	4099      	lsls	r1, r3
    396c:	4b02      	ldr	r3, [pc, #8]	; (3978 <system_pinmux_pin_set_config+0x2c>)
    396e:	4798      	blx	r3
}
    3970:	bd10      	pop	{r4, pc}
    3972:	46c0      	nop			; (mov r8, r8)
    3974:	40002800 	.word	0x40002800
    3978:	000038a5 	.word	0x000038a5

0000397c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    397c:	4770      	bx	lr
    397e:	46c0      	nop			; (mov r8, r8)

00003980 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3980:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3982:	4b05      	ldr	r3, [pc, #20]	; (3998 <system_init+0x18>)
    3984:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3986:	4b05      	ldr	r3, [pc, #20]	; (399c <system_init+0x1c>)
    3988:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    398a:	4b05      	ldr	r3, [pc, #20]	; (39a0 <system_init+0x20>)
    398c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    398e:	4b05      	ldr	r3, [pc, #20]	; (39a4 <system_init+0x24>)
    3990:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3992:	4b05      	ldr	r3, [pc, #20]	; (39a8 <system_init+0x28>)
    3994:	4798      	blx	r3
}
    3996:	bd10      	pop	{r4, pc}
    3998:	00003575 	.word	0x00003575
    399c:	00002df1 	.word	0x00002df1
    39a0:	0000397d 	.word	0x0000397d
    39a4:	0000397d 	.word	0x0000397d
    39a8:	0000397d 	.word	0x0000397d

000039ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    39ac:	e7fe      	b.n	39ac <Dummy_Handler>
    39ae:	46c0      	nop			; (mov r8, r8)

000039b0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    39b0:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    39b2:	4b1d      	ldr	r3, [pc, #116]	; (3a28 <Reset_Handler+0x78>)
    39b4:	4a1d      	ldr	r2, [pc, #116]	; (3a2c <Reset_Handler+0x7c>)
    39b6:	429a      	cmp	r2, r3
    39b8:	d003      	beq.n	39c2 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    39ba:	4b1d      	ldr	r3, [pc, #116]	; (3a30 <Reset_Handler+0x80>)
    39bc:	4a1a      	ldr	r2, [pc, #104]	; (3a28 <Reset_Handler+0x78>)
    39be:	429a      	cmp	r2, r3
    39c0:	d304      	bcc.n	39cc <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    39c2:	4b1c      	ldr	r3, [pc, #112]	; (3a34 <Reset_Handler+0x84>)
    39c4:	4a1c      	ldr	r2, [pc, #112]	; (3a38 <Reset_Handler+0x88>)
    39c6:	429a      	cmp	r2, r3
    39c8:	d310      	bcc.n	39ec <Reset_Handler+0x3c>
    39ca:	e01e      	b.n	3a0a <Reset_Handler+0x5a>
    39cc:	4a1b      	ldr	r2, [pc, #108]	; (3a3c <Reset_Handler+0x8c>)
    39ce:	4b18      	ldr	r3, [pc, #96]	; (3a30 <Reset_Handler+0x80>)
    39d0:	3303      	adds	r3, #3
    39d2:	1a9b      	subs	r3, r3, r2
    39d4:	089b      	lsrs	r3, r3, #2
    39d6:	3301      	adds	r3, #1
    39d8:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    39da:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    39dc:	4812      	ldr	r0, [pc, #72]	; (3a28 <Reset_Handler+0x78>)
    39de:	4913      	ldr	r1, [pc, #76]	; (3a2c <Reset_Handler+0x7c>)
    39e0:	588c      	ldr	r4, [r1, r2]
    39e2:	5084      	str	r4, [r0, r2]
    39e4:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    39e6:	429a      	cmp	r2, r3
    39e8:	d1fa      	bne.n	39e0 <Reset_Handler+0x30>
    39ea:	e7ea      	b.n	39c2 <Reset_Handler+0x12>
    39ec:	4a14      	ldr	r2, [pc, #80]	; (3a40 <Reset_Handler+0x90>)
    39ee:	4b11      	ldr	r3, [pc, #68]	; (3a34 <Reset_Handler+0x84>)
    39f0:	3303      	adds	r3, #3
    39f2:	1a9b      	subs	r3, r3, r2
    39f4:	089b      	lsrs	r3, r3, #2
    39f6:	3301      	adds	r3, #1
    39f8:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    39fa:	2200      	movs	r2, #0
                *pDest++ = 0;
    39fc:	480e      	ldr	r0, [pc, #56]	; (3a38 <Reset_Handler+0x88>)
    39fe:	2100      	movs	r1, #0
    3a00:	1814      	adds	r4, r2, r0
    3a02:	6021      	str	r1, [r4, #0]
    3a04:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3a06:	429a      	cmp	r2, r3
    3a08:	d1fa      	bne.n	3a00 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3a0a:	4a0e      	ldr	r2, [pc, #56]	; (3a44 <Reset_Handler+0x94>)
    3a0c:	21ff      	movs	r1, #255	; 0xff
    3a0e:	4b0e      	ldr	r3, [pc, #56]	; (3a48 <Reset_Handler+0x98>)
    3a10:	438b      	bics	r3, r1
    3a12:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    3a14:	4a0d      	ldr	r2, [pc, #52]	; (3a4c <Reset_Handler+0x9c>)
    3a16:	6851      	ldr	r1, [r2, #4]
    3a18:	2380      	movs	r3, #128	; 0x80
    3a1a:	430b      	orrs	r3, r1
    3a1c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    3a1e:	4b0c      	ldr	r3, [pc, #48]	; (3a50 <Reset_Handler+0xa0>)
    3a20:	4798      	blx	r3

        /* Branch to main function */
        main();
    3a22:	4b0c      	ldr	r3, [pc, #48]	; (3a54 <Reset_Handler+0xa4>)
    3a24:	4798      	blx	r3
    3a26:	e7fe      	b.n	3a26 <Reset_Handler+0x76>
    3a28:	20000000 	.word	0x20000000
    3a2c:	00006ea4 	.word	0x00006ea4
    3a30:	200000b4 	.word	0x200000b4
    3a34:	20004078 	.word	0x20004078
    3a38:	200000b4 	.word	0x200000b4
    3a3c:	20000004 	.word	0x20000004
    3a40:	200000b8 	.word	0x200000b8
    3a44:	e000ed00 	.word	0xe000ed00
    3a48:	00000000 	.word	0x00000000
    3a4c:	41004000 	.word	0x41004000
    3a50:	00006391 	.word	0x00006391
    3a54:	00003f59 	.word	0x00003f59

00003a58 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3a58:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3a5a:	4a06      	ldr	r2, [pc, #24]	; (3a74 <_sbrk+0x1c>)
    3a5c:	6812      	ldr	r2, [r2, #0]
    3a5e:	2a00      	cmp	r2, #0
    3a60:	d102      	bne.n	3a68 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    3a62:	4905      	ldr	r1, [pc, #20]	; (3a78 <_sbrk+0x20>)
    3a64:	4a03      	ldr	r2, [pc, #12]	; (3a74 <_sbrk+0x1c>)
    3a66:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    3a68:	4a02      	ldr	r2, [pc, #8]	; (3a74 <_sbrk+0x1c>)
    3a6a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3a6c:	18c3      	adds	r3, r0, r3
    3a6e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3a70:	4770      	bx	lr
    3a72:	46c0      	nop			; (mov r8, r8)
    3a74:	20003ce4 	.word	0x20003ce4
    3a78:	20006078 	.word	0x20006078

00003a7c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3a7c:	2001      	movs	r0, #1
    3a7e:	4240      	negs	r0, r0
    3a80:	4770      	bx	lr
    3a82:	46c0      	nop			; (mov r8, r8)

00003a84 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    3a84:	2380      	movs	r3, #128	; 0x80
    3a86:	019b      	lsls	r3, r3, #6
    3a88:	604b      	str	r3, [r1, #4]

	return 0;
}
    3a8a:	2000      	movs	r0, #0
    3a8c:	4770      	bx	lr
    3a8e:	46c0      	nop			; (mov r8, r8)

00003a90 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3a90:	2000      	movs	r0, #0
    3a92:	4770      	bx	lr

00003a94 <m24FC1025_write_byte>:

extern struct i2c_master_module i2c_master_instance;



void m24FC1025_write_byte(uint16_t byte_address, uint8_t byte_value) {
    3a94:	b530      	push	{r4, r5, lr}
    3a96:	b085      	sub	sp, #20
	
	
	uint8_t pack[3];
	pack[0] = (byte_address&0xFF00)>>8;
    3a98:	ab03      	add	r3, sp, #12
    3a9a:	0a02      	lsrs	r2, r0, #8
    3a9c:	701a      	strb	r2, [r3, #0]
	pack[1] = byte_address&0xFF;
    3a9e:	7058      	strb	r0, [r3, #1]
	pack[2] = byte_value;
    3aa0:	7099      	strb	r1, [r3, #2]

	
	struct i2c_master_packet packet = {
    3aa2:	2256      	movs	r2, #86	; 0x56
    3aa4:	4669      	mov	r1, sp
    3aa6:	800a      	strh	r2, [r1, #0]
    3aa8:	3a53      	subs	r2, #83	; 0x53
    3aaa:	804a      	strh	r2, [r1, #2]
    3aac:	9301      	str	r3, [sp, #4]
    3aae:	2300      	movs	r3, #0
    3ab0:	720b      	strb	r3, [r1, #8]
    3ab2:	724b      	strb	r3, [r1, #9]
    3ab4:	728b      	strb	r3, [r1, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) != STATUS_OK);
    3ab6:	4d04      	ldr	r5, [pc, #16]	; (3ac8 <m24FC1025_write_byte+0x34>)
    3ab8:	4c04      	ldr	r4, [pc, #16]	; (3acc <m24FC1025_write_byte+0x38>)
    3aba:	4669      	mov	r1, sp
    3abc:	0028      	movs	r0, r5
    3abe:	47a0      	blx	r4
    3ac0:	2800      	cmp	r0, #0
    3ac2:	d1fa      	bne.n	3aba <m24FC1025_write_byte+0x26>

	return;
}
    3ac4:	b005      	add	sp, #20
    3ac6:	bd30      	pop	{r4, r5, pc}
    3ac8:	20003f8c 	.word	0x20003f8c
    3acc:	00000891 	.word	0x00000891

00003ad0 <m24FC1025_read_byte>:

	return;
}


uint8_t m24FC1025_read_byte(uint16_t byte_address) {
    3ad0:	b530      	push	{r4, r5, lr}
    3ad2:	b08b      	sub	sp, #44	; 0x2c
    3ad4:	466b      	mov	r3, sp
    3ad6:	1d9a      	adds	r2, r3, #6
    3ad8:	80d8      	strh	r0, [r3, #6]
		
	uint8_t data;

	struct i2c_master_packet packet1 = {
    3ada:	ab06      	add	r3, sp, #24
    3adc:	2156      	movs	r1, #86	; 0x56
    3ade:	8019      	strh	r1, [r3, #0]
    3ae0:	3954      	subs	r1, #84	; 0x54
    3ae2:	8059      	strh	r1, [r3, #2]
    3ae4:	9207      	str	r2, [sp, #28]
    3ae6:	2200      	movs	r2, #0
    3ae8:	721a      	strb	r2, [r3, #8]
    3aea:	725a      	strb	r2, [r3, #9]
    3aec:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet1) != STATUS_OK);
    3aee:	4d0f      	ldr	r5, [pc, #60]	; (3b2c <m24FC1025_read_byte+0x5c>)
    3af0:	4c0f      	ldr	r4, [pc, #60]	; (3b30 <m24FC1025_read_byte+0x60>)
    3af2:	a906      	add	r1, sp, #24
    3af4:	0028      	movs	r0, r5
    3af6:	47a0      	blx	r4
    3af8:	2800      	cmp	r0, #0
    3afa:	d1fa      	bne.n	3af2 <m24FC1025_read_byte+0x22>
		
	struct i2c_master_packet packet2 = {
    3afc:	ab03      	add	r3, sp, #12
    3afe:	2256      	movs	r2, #86	; 0x56
    3b00:	801a      	strh	r2, [r3, #0]
    3b02:	3a55      	subs	r2, #85	; 0x55
    3b04:	805a      	strh	r2, [r3, #2]
    3b06:	3226      	adds	r2, #38	; 0x26
    3b08:	446a      	add	r2, sp
    3b0a:	9204      	str	r2, [sp, #16]
    3b0c:	2200      	movs	r2, #0
    3b0e:	721a      	strb	r2, [r3, #8]
    3b10:	725a      	strb	r2, [r3, #9]
    3b12:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet2) != STATUS_OK);
    3b14:	4d05      	ldr	r5, [pc, #20]	; (3b2c <m24FC1025_read_byte+0x5c>)
    3b16:	4c07      	ldr	r4, [pc, #28]	; (3b34 <m24FC1025_read_byte+0x64>)
    3b18:	a903      	add	r1, sp, #12
    3b1a:	0028      	movs	r0, r5
    3b1c:	47a0      	blx	r4
    3b1e:	2800      	cmp	r0, #0
    3b20:	d1fa      	bne.n	3b18 <m24FC1025_read_byte+0x48>

	return data;
    3b22:	2327      	movs	r3, #39	; 0x27
    3b24:	446b      	add	r3, sp
    3b26:	7818      	ldrb	r0, [r3, #0]

}
    3b28:	b00b      	add	sp, #44	; 0x2c
    3b2a:	bd30      	pop	{r4, r5, pc}
    3b2c:	20003f8c 	.word	0x20003f8c
    3b30:	00000891 	.word	0x00000891
    3b34:	00000871 	.word	0x00000871

00003b38 <rx_handler>:
}



static void rx_handler(uint8_t instance)
{
    3b38:	b510      	push	{r4, lr}
	// Wait for synch to complete
	#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	while (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY) {
	}
	#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	while (usart_hw->SYNCBUSY.reg) {
    3b3a:	4a15      	ldr	r2, [pc, #84]	; (3b90 <rx_handler+0x58>)
    3b3c:	69d3      	ldr	r3, [r2, #28]
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d1fc      	bne.n	3b3c <rx_handler+0x4>
	}
	#endif

	// Read and mask interrupt flag register
	interrupt_status = usart_hw->INTFLAG.reg;
    3b42:	4b13      	ldr	r3, [pc, #76]	; (3b90 <rx_handler+0x58>)
    3b44:	7e1b      	ldrb	r3, [r3, #24]
    3b46:	b2db      	uxtb	r3, r3
    3b48:	4a12      	ldr	r2, [pc, #72]	; (3b94 <rx_handler+0x5c>)
    3b4a:	8013      	strh	r3, [r2, #0]

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    3b4c:	075b      	lsls	r3, r3, #29
    3b4e:	d51e      	bpl.n	3b8e <rx_handler+0x56>
		// Check for errors
		error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3b50:	4b0f      	ldr	r3, [pc, #60]	; (3b90 <rx_handler+0x58>)
    3b52:	8b5a      	ldrh	r2, [r3, #26]
    3b54:	b2d2      	uxtb	r2, r2
    3b56:	233f      	movs	r3, #63	; 0x3f
    3b58:	4013      	ands	r3, r2
    3b5a:	490f      	ldr	r1, [pc, #60]	; (3b98 <rx_handler+0x60>)
    3b5c:	700b      	strb	r3, [r1, #0]
		if (error_code) {
    3b5e:	d006      	beq.n	3b6e <rx_handler+0x36>
			// Only frame error and buffer overflow should be possible
			if (error_code &
    3b60:	2306      	movs	r3, #6
    3b62:	4213      	tst	r3, r2
    3b64:	d013      	beq.n	3b8e <rx_handler+0x56>
			(SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF)){
				
				usart_hw->STATUS.reg =
    3b66:	2206      	movs	r2, #6
    3b68:	4b09      	ldr	r3, [pc, #36]	; (3b90 <rx_handler+0x58>)
    3b6a:	835a      	strh	r2, [r3, #26]
    3b6c:	e00f      	b.n	3b8e <rx_handler+0x56>
			}
			// All is fine, so push the received character into our queue
		}
		else {
			
			data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    3b6e:	4b08      	ldr	r3, [pc, #32]	; (3b90 <rx_handler+0x58>)
    3b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3b72:	490a      	ldr	r1, [pc, #40]	; (3b9c <rx_handler+0x64>)
    3b74:	05db      	lsls	r3, r3, #23
    3b76:	0ddb      	lsrs	r3, r3, #23
    3b78:	800b      	strh	r3, [r1, #0]
			//printf("%c\n\r",data);
			count++;
    3b7a:	4a09      	ldr	r2, [pc, #36]	; (3ba0 <rx_handler+0x68>)
    3b7c:	6813      	ldr	r3, [r2, #0]
    3b7e:	3301      	adds	r3, #1
    3b80:	6013      	str	r3, [r2, #0]
			if (!xQueueSendFromISR(terminal_in_queue, (uint8_t *)&data,NULL))
    3b82:	4b08      	ldr	r3, [pc, #32]	; (3ba4 <rx_handler+0x6c>)
    3b84:	6818      	ldr	r0, [r3, #0]
    3b86:	2300      	movs	r3, #0
    3b88:	2200      	movs	r2, #0
    3b8a:	4c07      	ldr	r4, [pc, #28]	; (3ba8 <rx_handler+0x70>)
    3b8c:	47a0      	blx	r4
			}
		}
		} else {
		// Error: only RX interrupt should be enabled
	}
}
    3b8e:	bd10      	pop	{r4, pc}
    3b90:	42000c00 	.word	0x42000c00
    3b94:	20003e4a 	.word	0x20003e4a
    3b98:	20004064 	.word	0x20004064
    3b9c:	20003fb4 	.word	0x20003fb4
    3ba0:	20003cec 	.word	0x20003cec
    3ba4:	20003d08 	.word	0x20003d08
    3ba8:	00001655 	.word	0x00001655

00003bac <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3bac:	b570      	push	{r4, r5, r6, lr}
    3bae:	b082      	sub	sp, #8
    3bb0:	0005      	movs	r5, r0
    3bb2:	000e      	movs	r6, r1
	uint16_t temp = 0;
    3bb4:	2200      	movs	r2, #0
    3bb6:	466b      	mov	r3, sp
    3bb8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    3bba:	4c06      	ldr	r4, [pc, #24]	; (3bd4 <usart_serial_getchar+0x28>)
    3bbc:	466b      	mov	r3, sp
    3bbe:	1d99      	adds	r1, r3, #6
    3bc0:	0028      	movs	r0, r5
    3bc2:	47a0      	blx	r4
    3bc4:	2800      	cmp	r0, #0
    3bc6:	d1f9      	bne.n	3bbc <usart_serial_getchar+0x10>

	*c = temp;
    3bc8:	466b      	mov	r3, sp
    3bca:	3306      	adds	r3, #6
    3bcc:	881b      	ldrh	r3, [r3, #0]
    3bce:	7033      	strb	r3, [r6, #0]
}
    3bd0:	b002      	add	sp, #8
    3bd2:	bd70      	pop	{r4, r5, r6, pc}
    3bd4:	00002995 	.word	0x00002995

00003bd8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    3bd8:	b570      	push	{r4, r5, r6, lr}
    3bda:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    3bdc:	b28c      	uxth	r4, r1
    3bde:	4e03      	ldr	r6, [pc, #12]	; (3bec <usart_serial_putchar+0x14>)
    3be0:	0021      	movs	r1, r4
    3be2:	0028      	movs	r0, r5
    3be4:	47b0      	blx	r6
    3be6:	2800      	cmp	r0, #0
    3be8:	d1fa      	bne.n	3be0 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    3bea:	bd70      	pop	{r4, r5, r6, pc}
    3bec:	00002969 	.word	0x00002969

00003bf0 <configure_opamp2>:

struct usart_module usart_instance;

/* Configure OPAMP2 and I/O PORT */
void configure_opamp2(enum opamp_pot_mux gain)
{
    3bf0:	b530      	push	{r4, r5, lr}
    3bf2:	b087      	sub	sp, #28
    3bf4:	0005      	movs	r5, r0
	/* Creates a new configuration structure for the OPAMP2. */
	struct opamp2_config conf;

	/* Initializes OPAMP module. */
	opamp_module_init();
    3bf6:	4b14      	ldr	r3, [pc, #80]	; (3c48 <configure_opamp2+0x58>)
    3bf8:	4798      	blx	r3

	/* Fill with the default settings. */
	opamp2_get_config_defaults(&conf);
    3bfa:	ac01      	add	r4, sp, #4
    3bfc:	0020      	movs	r0, r4
    3bfe:	4b13      	ldr	r3, [pc, #76]	; (3c4c <configure_opamp2+0x5c>)
    3c00:	4798      	blx	r3

	/* Set the the OPAMP2 in "Non-Inverted PGA" mode, gain of 4 */
	conf.negative_input           = OPAMP2_NEG_MUX_TAP2;
    3c02:	2380      	movs	r3, #128	; 0x80
    3c04:	035b      	lsls	r3, r3, #13
    3c06:	9301      	str	r3, [sp, #4]
	conf.positive_input           = OPAMP2_POS_MUX_PIN2;
    3c08:	2200      	movs	r2, #0
    3c0a:	6062      	str	r2, [r4, #4]
	conf.r1_connection            = OPAMP2_RES1_MUX_GND;
    3c0c:	23c0      	movs	r3, #192	; 0xc0
    3c0e:	015b      	lsls	r3, r3, #5
    3c10:	8123      	strh	r3, [r4, #8]
	conf.config_common.potentiometer_selection = gain;
    3c12:	8165      	strh	r5, [r4, #10]
	conf.config_common.r1_enable  = true;
    3c14:	2301      	movs	r3, #1
    3c16:	7323      	strb	r3, [r4, #12]
	conf.config_common.r2_out     = true;
    3c18:	73a3      	strb	r3, [r4, #14]
	conf.config_common.analog_out = true;
    3c1a:	74a3      	strb	r3, [r4, #18]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3c1c:	4669      	mov	r1, sp
    3c1e:	704a      	strb	r2, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3c20:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    3c22:	70ca      	strb	r2, [r1, #3]

	/* Set up OA2POS pin as input. */
	struct system_pinmux_config opamp2_input_pin_conf;
	system_pinmux_get_config_defaults(&opamp2_input_pin_conf);
	opamp2_input_pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	opamp2_input_pin_conf.mux_position = OPAMP2_INPUT_MUX;
    3c24:	700b      	strb	r3, [r1, #0]
	system_pinmux_pin_set_config(OPAMP2_INPUT_PIN, &opamp2_input_pin_conf);
    3c26:	2005      	movs	r0, #5
    3c28:	4b09      	ldr	r3, [pc, #36]	; (3c50 <configure_opamp2+0x60>)
    3c2a:	4798      	blx	r3

	/* Initialize and enable the OPAMP2 with the user settings. */
	opamp2_set_config(&conf);
    3c2c:	0020      	movs	r0, r4
    3c2e:	4b09      	ldr	r3, [pc, #36]	; (3c54 <configure_opamp2+0x64>)
    3c30:	4798      	blx	r3
	opamp_enable(OPAMP_2);
    3c32:	2002      	movs	r0, #2
    3c34:	4b08      	ldr	r3, [pc, #32]	; (3c58 <configure_opamp2+0x68>)
    3c36:	4798      	blx	r3
	
	/* Wait for the output ready. */
	while(!opamp_is_ready(OPAMP_2));
    3c38:	4c08      	ldr	r4, [pc, #32]	; (3c5c <configure_opamp2+0x6c>)
    3c3a:	2002      	movs	r0, #2
    3c3c:	47a0      	blx	r4
    3c3e:	2800      	cmp	r0, #0
    3c40:	d0fb      	beq.n	3c3a <configure_opamp2+0x4a>
}
    3c42:	b007      	add	sp, #28
    3c44:	bd30      	pop	{r4, r5, pc}
    3c46:	46c0      	nop			; (mov r8, r8)
    3c48:	00003375 	.word	0x00003375
    3c4c:	000033b1 	.word	0x000033b1
    3c50:	0000394d 	.word	0x0000394d
    3c54:	000033d9 	.word	0x000033d9
    3c58:	00003435 	.word	0x00003435
    3c5c:	00003469 	.word	0x00003469

00003c60 <configure_adc>:
}

enum status_code err;
/* Configure ADC */
void configure_adc(void)
{
    3c60:	b530      	push	{r4, r5, lr}
    3c62:	b08d      	sub	sp, #52	; 0x34
	/* Creates a new configuration structure for the ADC */
	struct adc_config config_adc_ch1;

	adc_get_config_defaults(&config_adc_ch1);
    3c64:	ac01      	add	r4, sp, #4
    3c66:	0020      	movs	r0, r4
    3c68:	4b15      	ldr	r3, [pc, #84]	; (3cc0 <configure_adc+0x60>)
    3c6a:	4798      	blx	r3
	
	/* Setup ADC with OPAMP2 output as ADC input */
	config_adc_ch1.clock_prescaler = ADC_CLOCK_PRESCALER_DIV8;
    3c6c:	2302      	movs	r3, #2
    3c6e:	70a3      	strb	r3, [r4, #2]
	config_adc_ch1.positive_input  = ADC_POSITIVE_INPUT_OPAMP2;
    3c70:	331d      	adds	r3, #29
    3c72:	7123      	strb	r3, [r4, #4]
	config_adc_ch1.negative_input  = ADC_NEGATIVE_INPUT_GND;
    3c74:	23c0      	movs	r3, #192	; 0xc0
    3c76:	015b      	lsls	r3, r3, #5
    3c78:	80e3      	strh	r3, [r4, #6]
	
	/* Initialize and enable ADC */
	err = adc_init(&adc_instance_ch1, ADC, &config_adc_ch1);
    3c7a:	4d12      	ldr	r5, [pc, #72]	; (3cc4 <configure_adc+0x64>)
    3c7c:	0022      	movs	r2, r4
    3c7e:	4912      	ldr	r1, [pc, #72]	; (3cc8 <configure_adc+0x68>)
    3c80:	0028      	movs	r0, r5
    3c82:	4b12      	ldr	r3, [pc, #72]	; (3ccc <configure_adc+0x6c>)
    3c84:	4798      	blx	r3
    3c86:	4b12      	ldr	r3, [pc, #72]	; (3cd0 <configure_adc+0x70>)
    3c88:	7018      	strb	r0, [r3, #0]
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3c8a:	682a      	ldr	r2, [r5, #0]
    3c8c:	8c13      	ldrh	r3, [r2, #32]
    3c8e:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    3c90:	2b00      	cmp	r3, #0
    3c92:	d1fb      	bne.n	3c8c <configure_adc+0x2c>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3c94:	2180      	movs	r1, #128	; 0x80
    3c96:	03c9      	lsls	r1, r1, #15
    3c98:	4b0e      	ldr	r3, [pc, #56]	; (3cd4 <configure_adc+0x74>)
    3c9a:	6019      	str	r1, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    3c9c:	2307      	movs	r3, #7
    3c9e:	7113      	strb	r3, [r2, #4]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    3ca0:	7193      	strb	r3, [r2, #6]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3ca2:	7811      	ldrb	r1, [r2, #0]
    3ca4:	3b05      	subs	r3, #5
    3ca6:	430b      	orrs	r3, r1
    3ca8:	7013      	strb	r3, [r2, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    3caa:	4b06      	ldr	r3, [pc, #24]	; (3cc4 <configure_adc+0x64>)
    3cac:	681a      	ldr	r2, [r3, #0]

	if (adc_module->SYNCBUSY.reg) {
    3cae:	8c13      	ldrh	r3, [r2, #32]
    3cb0:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    3cb2:	2b00      	cmp	r3, #0
    3cb4:	d1fb      	bne.n	3cae <configure_adc+0x4e>
	err = adc_enable(&adc_instance_ch1);
    3cb6:	2200      	movs	r2, #0
    3cb8:	4b05      	ldr	r3, [pc, #20]	; (3cd0 <configure_adc+0x70>)
    3cba:	701a      	strb	r2, [r3, #0]
		
}
    3cbc:	b00d      	add	sp, #52	; 0x34
    3cbe:	bd30      	pop	{r4, r5, pc}
    3cc0:	00002e41 	.word	0x00002e41
    3cc4:	20003fd8 	.word	0x20003fd8
    3cc8:	43000c00 	.word	0x43000c00
    3ccc:	00002e85 	.word	0x00002e85
    3cd0:	20003fb6 	.word	0x20003fb6
    3cd4:	e000e100 	.word	0xe000e100

00003cd8 <configure_adc_callbacks>:

/* Enable ADC Callback Function */
void configure_adc_callbacks(void)
{
    3cd8:	b570      	push	{r4, r5, r6, lr}
	adc_register_callback(&adc_instance_ch1,
    3cda:	4d09      	ldr	r5, [pc, #36]	; (3d00 <configure_adc_callbacks+0x28>)
    3cdc:	2200      	movs	r2, #0
    3cde:	4909      	ldr	r1, [pc, #36]	; (3d04 <configure_adc_callbacks+0x2c>)
    3ce0:	0028      	movs	r0, r5
    3ce2:	4e09      	ldr	r6, [pc, #36]	; (3d08 <configure_adc_callbacks+0x30>)
    3ce4:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    3ce6:	2401      	movs	r4, #1
    3ce8:	7eeb      	ldrb	r3, [r5, #27]
    3cea:	4323      	orrs	r3, r4
    3cec:	76eb      	strb	r3, [r5, #27]
			adc_complete_callback_ch1, ADC_CALLBACK_READ_BUFFER);
	adc_enable_callback(&adc_instance_ch1, ADC_CALLBACK_READ_BUFFER);
	
	adc_register_callback(&adc_instance_ch2,
    3cee:	4d07      	ldr	r5, [pc, #28]	; (3d0c <configure_adc_callbacks+0x34>)
    3cf0:	2200      	movs	r2, #0
    3cf2:	4907      	ldr	r1, [pc, #28]	; (3d10 <configure_adc_callbacks+0x38>)
    3cf4:	0028      	movs	r0, r5
    3cf6:	47b0      	blx	r6
    3cf8:	7eeb      	ldrb	r3, [r5, #27]
    3cfa:	431c      	orrs	r4, r3
    3cfc:	76ec      	strb	r4, [r5, #27]
			adc_complete_callback_ch2, ADC_CALLBACK_READ_BUFFER);
	adc_enable_callback(&adc_instance_ch2, ADC_CALLBACK_READ_BUFFER);
}
    3cfe:	bd70      	pop	{r4, r5, r6, pc}
    3d00:	20003fd8 	.word	0x20003fd8
    3d04:	000041f9 	.word	0x000041f9
    3d08:	00003315 	.word	0x00003315
    3d0c:	20003fb8 	.word	0x20003fb8
    3d10:	0000430d 	.word	0x0000430d

00003d14 <QueueInit>:
int QueuePut(uint16_t new);
int QueueGet(uint16_t *old);

void QueueInit(void)
{
	QueueIn = QueueOut = 0;
    3d14:	2300      	movs	r3, #0
    3d16:	4a02      	ldr	r2, [pc, #8]	; (3d20 <QueueInit+0xc>)
    3d18:	8013      	strh	r3, [r2, #0]
    3d1a:	4a02      	ldr	r2, [pc, #8]	; (3d24 <QueueInit+0x10>)
    3d1c:	8013      	strh	r3, [r2, #0]
}
    3d1e:	4770      	bx	lr
    3d20:	20004038 	.word	0x20004038
    3d24:	2000403a 	.word	0x2000403a

00003d28 <QueuePut>:

int QueuePut(uint16_t new)
{
    3d28:	b570      	push	{r4, r5, r6, lr}
    3d2a:	0005      	movs	r5, r0
	if(QueueIn == (( QueueOut - 1 + QUEUE_SIZE) % QUEUE_SIZE))
    3d2c:	4b0b      	ldr	r3, [pc, #44]	; (3d5c <QueuePut+0x34>)
    3d2e:	881c      	ldrh	r4, [r3, #0]
    3d30:	4b0b      	ldr	r3, [pc, #44]	; (3d60 <QueuePut+0x38>)
    3d32:	8818      	ldrh	r0, [r3, #0]
    3d34:	3064      	adds	r0, #100	; 0x64
    3d36:	2165      	movs	r1, #101	; 0x65
    3d38:	4b0a      	ldr	r3, [pc, #40]	; (3d64 <QueuePut+0x3c>)
    3d3a:	4798      	blx	r3
    3d3c:	428c      	cmp	r4, r1
    3d3e:	d00a      	beq.n	3d56 <QueuePut+0x2e>
	{
		return -1; /* Queue Full*/
	}

	Queue[QueueIn] = new;
    3d40:	0062      	lsls	r2, r4, #1
    3d42:	4b09      	ldr	r3, [pc, #36]	; (3d68 <QueuePut+0x40>)
    3d44:	52d5      	strh	r5, [r2, r3]

	QueueIn = (QueueIn + 1) % QUEUE_SIZE;
    3d46:	1c60      	adds	r0, r4, #1
    3d48:	2165      	movs	r1, #101	; 0x65
    3d4a:	4b06      	ldr	r3, [pc, #24]	; (3d64 <QueuePut+0x3c>)
    3d4c:	4798      	blx	r3
    3d4e:	4b03      	ldr	r3, [pc, #12]	; (3d5c <QueuePut+0x34>)
    3d50:	8019      	strh	r1, [r3, #0]

	return 0; // No errors
    3d52:	2000      	movs	r0, #0
    3d54:	e001      	b.n	3d5a <QueuePut+0x32>

int QueuePut(uint16_t new)
{
	if(QueueIn == (( QueueOut - 1 + QUEUE_SIZE) % QUEUE_SIZE))
	{
		return -1; /* Queue Full*/
    3d56:	2001      	movs	r0, #1
    3d58:	4240      	negs	r0, r0
	Queue[QueueIn] = new;

	QueueIn = (QueueIn + 1) % QUEUE_SIZE;

	return 0; // No errors
}
    3d5a:	bd70      	pop	{r4, r5, r6, pc}
    3d5c:	2000403a 	.word	0x2000403a
    3d60:	20004038 	.word	0x20004038
    3d64:	000049f5 	.word	0x000049f5
    3d68:	20003d80 	.word	0x20003d80

00003d6c <main_task>:
	} while (true);
	
}

static void main_task(void *params)
{
    3d6c:	b570      	push	{r4, r5, r6, lr}
	int i = 0;
	uint16_t old_result;
	QueueInit();
    3d6e:	4b39      	ldr	r3, [pc, #228]	; (3e54 <main_task+0xe8>)
    3d70:	4798      	blx	r3
	QueuePut(0xAA);
    3d72:	20aa      	movs	r0, #170	; 0xaa
    3d74:	4b38      	ldr	r3, [pc, #224]	; (3e58 <main_task+0xec>)
    3d76:	4798      	blx	r3
	
	
	memset(adc_result_buffer_ch1,0,ADC_SAMPLES);
    3d78:	4c38      	ldr	r4, [pc, #224]	; (3e5c <main_task+0xf0>)
    3d7a:	2220      	movs	r2, #32
    3d7c:	2100      	movs	r1, #0
    3d7e:	0020      	movs	r0, r4
    3d80:	4b37      	ldr	r3, [pc, #220]	; (3e60 <main_task+0xf4>)
    3d82:	4798      	blx	r3
	adc_read_buffer_job(&adc_instance_ch1, adc_result_buffer_ch1, n_sample);
    3d84:	4b37      	ldr	r3, [pc, #220]	; (3e64 <main_task+0xf8>)
    3d86:	881a      	ldrh	r2, [r3, #0]
    3d88:	0021      	movs	r1, r4
    3d8a:	4837      	ldr	r0, [pc, #220]	; (3e68 <main_task+0xfc>)
    3d8c:	4b37      	ldr	r3, [pc, #220]	; (3e6c <main_task+0x100>)
    3d8e:	4798      	blx	r3

	for(;;) {
		
		lis302dl_read_all();
    3d90:	4e37      	ldr	r6, [pc, #220]	; (3e70 <main_task+0x104>)
		
		 acc_x = rd_buffer[40];
    3d92:	4d38      	ldr	r5, [pc, #224]	; (3e74 <main_task+0x108>)
    3d94:	4c38      	ldr	r4, [pc, #224]	; (3e78 <main_task+0x10c>)
	memset(adc_result_buffer_ch1,0,ADC_SAMPLES);
	adc_read_buffer_job(&adc_instance_ch1, adc_result_buffer_ch1, n_sample);

	for(;;) {
		
		lis302dl_read_all();
    3d96:	47b0      	blx	r6
		
		 acc_x = rd_buffer[40];
    3d98:	2328      	movs	r3, #40	; 0x28
    3d9a:	5ce3      	ldrb	r3, [r4, r3]
    3d9c:	702b      	strb	r3, [r5, #0]
		 acc_y = rd_buffer[42];
    3d9e:	232a      	movs	r3, #42	; 0x2a
    3da0:	5ce2      	ldrb	r2, [r4, r3]
    3da2:	4b36      	ldr	r3, [pc, #216]	; (3e7c <main_task+0x110>)
    3da4:	701a      	strb	r2, [r3, #0]
		 acc_z = rd_buffer[44];
    3da6:	232c      	movs	r3, #44	; 0x2c
    3da8:	5ce2      	ldrb	r2, [r4, r3]
    3daa:	4b35      	ldr	r3, [pc, #212]	; (3e80 <main_task+0x114>)
    3dac:	701a      	strb	r2, [r3, #0]
			
			//arm_fir_fast_q15(&sFirStru,adc_result_buffer,adc_result_buffer_filtered,n_sample);
			//integrale = media(adc_result_buffer_filtered,n_sample);
			
			
			if(integrale_ch1 < threshold_value)
    3dae:	4b35      	ldr	r3, [pc, #212]	; (3e84 <main_task+0x118>)
    3db0:	881a      	ldrh	r2, [r3, #0]
    3db2:	4b35      	ldr	r3, [pc, #212]	; (3e88 <main_task+0x11c>)
    3db4:	881b      	ldrh	r3, [r3, #0]
    3db6:	429a      	cmp	r2, r3
    3db8:	d211      	bcs.n	3dde <main_task+0x72>
			{
				if(pick_count_up < PICK_COUNT_UP_DEFAULT)
    3dba:	4b34      	ldr	r3, [pc, #208]	; (3e8c <main_task+0x120>)
    3dbc:	681b      	ldr	r3, [r3, #0]
    3dbe:	2b27      	cmp	r3, #39	; 0x27
    3dc0:	d803      	bhi.n	3dca <main_task+0x5e>
					pick_count_up++;
    3dc2:	3301      	adds	r3, #1
    3dc4:	4a31      	ldr	r2, [pc, #196]	; (3e8c <main_task+0x120>)
    3dc6:	6013      	str	r3, [r2, #0]
    3dc8:	e019      	b.n	3dfe <main_task+0x92>
				else
				{
					pick_count_up = 0;
    3dca:	2200      	movs	r2, #0
    3dcc:	4b2f      	ldr	r3, [pc, #188]	; (3e8c <main_task+0x120>)
    3dce:	601a      	str	r2, [r3, #0]
					pick_count_down = PICK_COUNT_DOWN_DEFAULT;	
    3dd0:	3214      	adds	r2, #20
    3dd2:	4b2f      	ldr	r3, [pc, #188]	; (3e90 <main_task+0x124>)
    3dd4:	601a      	str	r2, [r3, #0]
					alarm_detected = 1;
    3dd6:	3a13      	subs	r2, #19
    3dd8:	4b2e      	ldr	r3, [pc, #184]	; (3e94 <main_task+0x128>)
    3dda:	701a      	strb	r2, [r3, #0]
    3ddc:	e00f      	b.n	3dfe <main_task+0x92>
					//delay_ms(3000);
				}
			}
			else
			{
				if(pick_count_down > 0)
    3dde:	4b2c      	ldr	r3, [pc, #176]	; (3e90 <main_task+0x124>)
    3de0:	681b      	ldr	r3, [r3, #0]
    3de2:	2b00      	cmp	r3, #0
    3de4:	d003      	beq.n	3dee <main_task+0x82>
					pick_count_down--;
    3de6:	3b01      	subs	r3, #1
    3de8:	4a29      	ldr	r2, [pc, #164]	; (3e90 <main_task+0x124>)
    3dea:	6013      	str	r3, [r2, #0]
    3dec:	e007      	b.n	3dfe <main_task+0x92>
				else
				{
					pick_count_down = PICK_COUNT_DOWN_DEFAULT;
    3dee:	2214      	movs	r2, #20
    3df0:	4b27      	ldr	r3, [pc, #156]	; (3e90 <main_task+0x124>)
    3df2:	601a      	str	r2, [r3, #0]
					pick_count_up = 0;
    3df4:	2300      	movs	r3, #0
    3df6:	4a25      	ldr	r2, [pc, #148]	; (3e8c <main_task+0x120>)
    3df8:	6013      	str	r3, [r2, #0]
					alarm_detected = 0;
    3dfa:	4a26      	ldr	r2, [pc, #152]	; (3e94 <main_task+0x128>)
    3dfc:	7013      	strb	r3, [r2, #0]
// 			}
		//}
			

		
		if(change_gain == true)
    3dfe:	4b26      	ldr	r3, [pc, #152]	; (3e98 <main_task+0x12c>)
    3e00:	781b      	ldrb	r3, [r3, #0]
    3e02:	2b00      	cmp	r3, #0
    3e04:	d022      	beq.n	3e4c <main_task+0xe0>
		{
			enum opamp_pot_mux temp_gain = OPAMP_POT_MUX_14R_2R;
			switch(analog_gain_1){
    3e06:	4b25      	ldr	r3, [pc, #148]	; (3e9c <main_task+0x130>)
    3e08:	781a      	ldrb	r2, [r3, #0]
    3e0a:	2a08      	cmp	r2, #8
    3e0c:	d818      	bhi.n	3e40 <main_task+0xd4>
    3e0e:	0093      	lsls	r3, r2, #2
    3e10:	4a23      	ldr	r2, [pc, #140]	; (3ea0 <main_task+0x134>)
    3e12:	58d3      	ldr	r3, [r2, r3]
    3e14:	469f      	mov	pc, r3
				case MUX_14R_2R:temp_gain = OPAMP_POT_MUX_14R_2R;
				break;
				/** Gain = R2/R1 = 1/3 */
				case MUX_12R_4R:temp_gain = OPAMP_POT_MUX_12R_4R;
    3e16:	2080      	movs	r0, #128	; 0x80
    3e18:	0180      	lsls	r0, r0, #6
    3e1a:	e012      	b.n	3e42 <main_task+0xd6>
				break;
				/** Gain = R2/R1 = 1 */
				case MUX_8R_8R:temp_gain = OPAMP_POT_MUX_8R_8R;
    3e1c:	2080      	movs	r0, #128	; 0x80
    3e1e:	01c0      	lsls	r0, r0, #7
				break;
    3e20:	e00f      	b.n	3e42 <main_task+0xd6>
				/** Gain = R2/R1 = 1 + 2/3 */
				case MUX_6R_10R:temp_gain = OPAMP_POT_MUX_6R_10R;
    3e22:	20c0      	movs	r0, #192	; 0xc0
    3e24:	01c0      	lsls	r0, r0, #7
				break;
    3e26:	e00c      	b.n	3e42 <main_task+0xd6>
				/** Gain = R2/R1 = 3 */
				case MUX_4R_12R:temp_gain = OPAMP_POT_MUX_4R_12R;
    3e28:	2080      	movs	r0, #128	; 0x80
    3e2a:	0200      	lsls	r0, r0, #8
				break;
    3e2c:	e009      	b.n	3e42 <main_task+0xd6>
				/** Gain = R2/R1 = 4 + 1/3 */
				case MUX_3R_13R:temp_gain = OPAMP_POT_MUX_3R_13R;
    3e2e:	20a0      	movs	r0, #160	; 0xa0
    3e30:	0200      	lsls	r0, r0, #8
				break;
    3e32:	e006      	b.n	3e42 <main_task+0xd6>
				/** Gain = R2/R1 = 7 */
				case MUX_2R_14R:temp_gain = OPAMP_POT_MUX_2R_14R;
    3e34:	20c0      	movs	r0, #192	; 0xc0
    3e36:	0200      	lsls	r0, r0, #8
				break;
    3e38:	e003      	b.n	3e42 <main_task+0xd6>
				/** Gain = R2/R1 = 15 */
				case MUX_R_15R:temp_gain = OPAMP_POT_MUX_R_15R;
    3e3a:	20e0      	movs	r0, #224	; 0xe0
    3e3c:	0200      	lsls	r0, r0, #8
				break;
    3e3e:	e000      	b.n	3e42 <main_task+0xd6>
			

		
		if(change_gain == true)
		{
			enum opamp_pot_mux temp_gain = OPAMP_POT_MUX_14R_2R;
    3e40:	2000      	movs	r0, #0
				break;
				default:
				break;
			}
			
			configure_opamp2(temp_gain);
    3e42:	4b18      	ldr	r3, [pc, #96]	; (3ea4 <main_task+0x138>)
    3e44:	4798      	blx	r3
			
			change_gain = false;
    3e46:	2200      	movs	r2, #0
    3e48:	4b13      	ldr	r3, [pc, #76]	; (3e98 <main_task+0x12c>)
    3e4a:	701a      	strb	r2, [r3, #0]
		}
		
		
		
		
		vTaskDelay(MAIN_TASK_DELAY);
    3e4c:	2032      	movs	r0, #50	; 0x32
    3e4e:	4b16      	ldr	r3, [pc, #88]	; (3ea8 <main_task+0x13c>)
    3e50:	4798      	blx	r3
	}
    3e52:	e7a0      	b.n	3d96 <main_task+0x2a>
    3e54:	00003d15 	.word	0x00003d15
    3e58:	00003d29 	.word	0x00003d29
    3e5c:	20003e80 	.word	0x20003e80
    3e60:	000063ef 	.word	0x000063ef
    3e64:	20000036 	.word	0x20000036
    3e68:	20003fd8 	.word	0x20003fd8
    3e6c:	00003329 	.word	0x00003329
    3e70:	000001a9 	.word	0x000001a9
    3e74:	20003ce8 	.word	0x20003ce8
    3e78:	20003d18 	.word	0x20003d18
    3e7c:	20003cfd 	.word	0x20003cfd
    3e80:	20003cf0 	.word	0x20003cf0
    3e84:	20003cf2 	.word	0x20003cf2
    3e88:	20000048 	.word	0x20000048
    3e8c:	20003cf8 	.word	0x20003cf8
    3e90:	2000004c 	.word	0x2000004c
    3e94:	20003d0c 	.word	0x20003d0c
    3e98:	20003cfc 	.word	0x20003cfc
    3e9c:	20000038 	.word	0x20000038
    3ea0:	00006d68 	.word	0x00006d68
    3ea4:	00003bf1 	.word	0x00003bf1
    3ea8:	00001e11 	.word	0x00001e11

00003eac <configure_i2c_master>:

struct i2c_master_module i2c_master_instance;
#define CONF_I2C_MASTER_MODULE    SERCOM2
void configure_i2c_master(void);
void configure_i2c_master(void)
{
    3eac:	b530      	push	{r4, r5, lr}
    3eae:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    3eb0:	aa01      	add	r2, sp, #4
    3eb2:	2364      	movs	r3, #100	; 0x64
    3eb4:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    3eb6:	4b21      	ldr	r3, [pc, #132]	; (3f3c <configure_i2c_master+0x90>)
    3eb8:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    3eba:	2300      	movs	r3, #0
    3ebc:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    3ebe:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    3ec0:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    3ec2:	2180      	movs	r1, #128	; 0x80
    3ec4:	0389      	lsls	r1, r1, #14
    3ec6:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    3ec8:	2101      	movs	r1, #1
    3eca:	4249      	negs	r1, r1
    3ecc:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    3ece:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    3ed0:	6213      	str	r3, [r2, #32]
	config->scl_low_timeout  = false;
    3ed2:	3125      	adds	r1, #37	; 0x25
    3ed4:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    3ed6:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    3ed8:	3108      	adds	r1, #8
    3eda:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    3edc:	3101      	adds	r1, #1
    3ede:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    3ee0:	3101      	adds	r1, #1
    3ee2:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    3ee4:	33d7      	adds	r3, #215	; 0xd7
    3ee6:	8613      	strh	r3, [r2, #48]	; 0x30

	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = 10000;
    3ee8:	4b15      	ldr	r3, [pc, #84]	; (3f40 <configure_i2c_master+0x94>)
    3eea:	82d3      	strh	r3, [r2, #22]
	i2c_master_init(&i2c_master_instance, CONF_I2C_MASTER_MODULE, &config_i2c_master);
    3eec:	4c15      	ldr	r4, [pc, #84]	; (3f44 <configure_i2c_master+0x98>)
    3eee:	4916      	ldr	r1, [pc, #88]	; (3f48 <configure_i2c_master+0x9c>)
    3ef0:	0020      	movs	r0, r4
    3ef2:	4b16      	ldr	r3, [pc, #88]	; (3f4c <configure_i2c_master+0xa0>)
    3ef4:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3ef6:	6824      	ldr	r4, [r4, #0]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    3ef8:	2207      	movs	r2, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3efa:	69e3      	ldr	r3, [r4, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    3efc:	421a      	tst	r2, r3
    3efe:	d1fc      	bne.n	3efa <configure_i2c_master+0x4e>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    3f00:	6822      	ldr	r2, [r4, #0]
    3f02:	2302      	movs	r3, #2
    3f04:	4313      	orrs	r3, r2
    3f06:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3f08:	4d0e      	ldr	r5, [pc, #56]	; (3f44 <configure_i2c_master+0x98>)
    3f0a:	6828      	ldr	r0, [r5, #0]
    3f0c:	4b10      	ldr	r3, [pc, #64]	; (3f50 <configure_i2c_master+0xa4>)
    3f0e:	4798      	blx	r3
    3f10:	231f      	movs	r3, #31
    3f12:	4018      	ands	r0, r3
    3f14:	3b1e      	subs	r3, #30
    3f16:	4083      	lsls	r3, r0
    3f18:	4a0e      	ldr	r2, [pc, #56]	; (3f54 <configure_i2c_master+0xa8>)
    3f1a:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    3f1c:	88e8      	ldrh	r0, [r5, #6]
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    3f1e:	2300      	movs	r3, #0
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    3f20:	2110      	movs	r1, #16
    3f22:	e005      	b.n	3f30 <configure_i2c_master+0x84>
		timeout_counter++;
    3f24:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    3f26:	4283      	cmp	r3, r0
    3f28:	d302      	bcc.n	3f30 <configure_i2c_master+0x84>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    3f2a:	2310      	movs	r3, #16
    3f2c:	8363      	strh	r3, [r4, #26]
    3f2e:	e002      	b.n	3f36 <configure_i2c_master+0x8a>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    3f30:	8b62      	ldrh	r2, [r4, #26]
    3f32:	420a      	tst	r2, r1
    3f34:	d0f6      	beq.n	3f24 <configure_i2c_master+0x78>
	i2c_master_enable(&i2c_master_instance);
}
    3f36:	b00f      	add	sp, #60	; 0x3c
    3f38:	bd30      	pop	{r4, r5, pc}
    3f3a:	46c0      	nop			; (mov r8, r8)
    3f3c:	00000d48 	.word	0x00000d48
    3f40:	00002710 	.word	0x00002710
    3f44:	20003f8c 	.word	0x20003f8c
    3f48:	42000800 	.word	0x42000800
    3f4c:	00000275 	.word	0x00000275
    3f50:	00002c89 	.word	0x00002c89
    3f54:	e000e100 	.word	0xe000e100

00003f58 <main>:
/* Main function */

uint8_t tmp1,tmp2;

int main(void)
{
    3f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f5a:	b095      	sub	sp, #84	; 0x54
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3f5c:	b672      	cpsid	i
    3f5e:	f3bf 8f5f 	dmb	sy
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
	cpu_irq_disable();
    3f62:	2400      	movs	r4, #0
    3f64:	2600      	movs	r6, #0
    3f66:	4b6b      	ldr	r3, [pc, #428]	; (4114 <main+0x1bc>)
    3f68:	701c      	strb	r4, [r3, #0]
	
	
	system_interrupt_disable_global();
	
	system_init();
    3f6a:	4b6b      	ldr	r3, [pc, #428]	; (4118 <main+0x1c0>)
    3f6c:	4798      	blx	r3
	delay_init();
    3f6e:	4b6b      	ldr	r3, [pc, #428]	; (411c <main+0x1c4>)
    3f70:	4798      	blx	r3
	configure_i2c_master();
    3f72:	4b6b      	ldr	r3, [pc, #428]	; (4120 <main+0x1c8>)
    3f74:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3f76:	aa04      	add	r2, sp, #16
    3f78:	2380      	movs	r3, #128	; 0x80
    3f7a:	05db      	lsls	r3, r3, #23
    3f7c:	9304      	str	r3, [sp, #16]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3f7e:	6054      	str	r4, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    3f80:	23ff      	movs	r3, #255	; 0xff
    3f82:	8113      	strh	r3, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    3f84:	7294      	strb	r4, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3f86:	72d4      	strb	r4, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    3f88:	2501      	movs	r5, #1
    3f8a:	3bdb      	subs	r3, #219	; 0xdb
    3f8c:	54d5      	strb	r5, [r2, r3]
	config->transmitter_enable = true;
    3f8e:	3301      	adds	r3, #1
    3f90:	54d5      	strb	r5, [r2, r3]
	config->clock_polarity_inverted = false;
    3f92:	3301      	adds	r3, #1
    3f94:	54d4      	strb	r4, [r2, r3]
	config->use_external_clock = false;
    3f96:	3301      	adds	r3, #1
    3f98:	54d4      	strb	r4, [r2, r3]
	config->ext_clock_freq   = 0;
    3f9a:	6294      	str	r4, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3f9c:	3305      	adds	r3, #5
    3f9e:	54d4      	strb	r4, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    3fa0:	3301      	adds	r3, #1
    3fa2:	54d4      	strb	r4, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3fa4:	6154      	str	r4, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3fa6:	8214      	strh	r4, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3fa8:	2300      	movs	r3, #0
    3faa:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3fac:	7616      	strb	r6, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3fae:	7716      	strb	r6, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3fb0:	7656      	strb	r6, [r2, #25]
	config->receive_pulse_length                    = 19;
    3fb2:	2313      	movs	r3, #19
    3fb4:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3fb6:	7756      	strb	r6, [r2, #29]
{
	uint8_t instance_index;

	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate    = 115200;
    3fb8:	23e1      	movs	r3, #225	; 0xe1
    3fba:	025b      	lsls	r3, r3, #9
    3fbc:	6213      	str	r3, [r2, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    3fbe:	2380      	movs	r3, #128	; 0x80
    3fc0:	035b      	lsls	r3, r3, #13
    3fc2:	60d3      	str	r3, [r2, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    3fc4:	4b57      	ldr	r3, [pc, #348]	; (4124 <main+0x1cc>)
    3fc6:	6313      	str	r3, [r2, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    3fc8:	4b57      	ldr	r3, [pc, #348]	; (4128 <main+0x1d0>)
    3fca:	6353      	str	r3, [r2, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    3fcc:	2301      	movs	r3, #1
    3fce:	425b      	negs	r3, r3
    3fd0:	6393      	str	r3, [r2, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    3fd2:	63d3      	str	r3, [r2, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3fd4:	4c55      	ldr	r4, [pc, #340]	; (412c <main+0x1d4>)
    3fd6:	4b56      	ldr	r3, [pc, #344]	; (4130 <main+0x1d8>)
    3fd8:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3fda:	4956      	ldr	r1, [pc, #344]	; (4134 <main+0x1dc>)
    3fdc:	4b56      	ldr	r3, [pc, #344]	; (4138 <main+0x1e0>)
    3fde:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3fe0:	4956      	ldr	r1, [pc, #344]	; (413c <main+0x1e4>)
    3fe2:	4b57      	ldr	r3, [pc, #348]	; (4140 <main+0x1e8>)
    3fe4:	6019      	str	r1, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    3fe6:	4957      	ldr	r1, [pc, #348]	; (4144 <main+0x1ec>)
    3fe8:	0020      	movs	r0, r4
    3fea:	4b57      	ldr	r3, [pc, #348]	; (4148 <main+0x1f0>)
    3fec:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    3fee:	4e57      	ldr	r6, [pc, #348]	; (414c <main+0x1f4>)
    3ff0:	6833      	ldr	r3, [r6, #0]
    3ff2:	6898      	ldr	r0, [r3, #8]
    3ff4:	2100      	movs	r1, #0
    3ff6:	4f56      	ldr	r7, [pc, #344]	; (4150 <main+0x1f8>)
    3ff8:	47b8      	blx	r7
	setbuf(stdin, NULL);
    3ffa:	6833      	ldr	r3, [r6, #0]
    3ffc:	6858      	ldr	r0, [r3, #4]
    3ffe:	2100      	movs	r1, #0
    4000:	47b8      	blx	r7
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);
	
	// Inject our own interrupt handler
	instance_index = _sercom_get_sercom_inst_index(EDBG_CDC_MODULE);
    4002:	4850      	ldr	r0, [pc, #320]	; (4144 <main+0x1ec>)
    4004:	4b53      	ldr	r3, [pc, #332]	; (4154 <main+0x1fc>)
    4006:	4798      	blx	r3
	_sercom_set_handler(instance_index, rx_handler);
    4008:	4953      	ldr	r1, [pc, #332]	; (4158 <main+0x200>)
    400a:	4b54      	ldr	r3, [pc, #336]	; (415c <main+0x204>)
    400c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    400e:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4010:	0030      	movs	r0, r6
    4012:	4b53      	ldr	r3, [pc, #332]	; (4160 <main+0x208>)
    4014:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4016:	231f      	movs	r3, #31
    4018:	4018      	ands	r0, r3
    401a:	4085      	lsls	r5, r0
    401c:	4b51      	ldr	r3, [pc, #324]	; (4164 <main+0x20c>)
    401e:	601d      	str	r5, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4020:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4022:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4024:	2a00      	cmp	r2, #0
    4026:	d1fc      	bne.n	4022 <main+0xca>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4028:	6832      	ldr	r2, [r6, #0]
    402a:	2302      	movs	r3, #2
    402c:	4313      	orrs	r3, r2
    402e:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4030:	4b3e      	ldr	r3, [pc, #248]	; (412c <main+0x1d4>)
    4032:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4034:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4036:	2a00      	cmp	r2, #0
    4038:	d1fc      	bne.n	4034 <main+0xdc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    403a:	685a      	ldr	r2, [r3, #4]
    403c:	2180      	movs	r1, #128	; 0x80
    403e:	0249      	lsls	r1, r1, #9
    4040:	430a      	orrs	r2, r1
    4042:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    4044:	2101      	movs	r1, #1
    4046:	4a39      	ldr	r2, [pc, #228]	; (412c <main+0x1d4>)
    4048:	71d1      	strb	r1, [r2, #7]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    404a:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    404c:	2a00      	cmp	r2, #0
    404e:	d1fc      	bne.n	404a <main+0xf2>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4050:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4052:	2a00      	cmp	r2, #0
    4054:	d1fc      	bne.n	4050 <main+0xf8>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    4056:	685a      	ldr	r2, [r3, #4]
    4058:	2180      	movs	r1, #128	; 0x80
    405a:	0289      	lsls	r1, r1, #10
    405c:	430a      	orrs	r2, r1
    405e:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    4060:	2101      	movs	r1, #1
    4062:	4a32      	ldr	r2, [pc, #200]	; (412c <main+0x1d4>)
    4064:	7191      	strb	r1, [r2, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4066:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4068:	2a00      	cmp	r2, #0
    406a:	d1fc      	bne.n	4066 <main+0x10e>
	usart_enable(&usart_instance);
	usart_enable_transceiver(&usart_instance, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&usart_instance, USART_TRANSCEIVER_RX);

	// ..and the RX Complete interrupt
	((SercomUsart *)EDBG_CDC_MODULE)->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    406c:	3204      	adds	r2, #4
    406e:	4b35      	ldr	r3, [pc, #212]	; (4144 <main+0x1ec>)
    4070:	759a      	strb	r2, [r3, #22]
	
	system_init();
	delay_init();
	configure_i2c_master();
	configure_usart();
	configure_adc();
    4072:	4b3d      	ldr	r3, [pc, #244]	; (4168 <main+0x210>)
    4074:	4798      	blx	r3
	configure_adc_callbacks();
    4076:	4b3d      	ldr	r3, [pc, #244]	; (416c <main+0x214>)
    4078:	4798      	blx	r3
	
	/************************ FIR FILTER *****************************/
	//status = arm_fir_init_q15(&sFirStru,TAPNUMBER,&lpFilterCoefficent[0],&FirState[0],ADC_SAMPLES);
		
	
 	m24FC1025_write_byte(0,0x55);
    407a:	2155      	movs	r1, #85	; 0x55
    407c:	2000      	movs	r0, #0
    407e:	4c3c      	ldr	r4, [pc, #240]	; (4170 <main+0x218>)
    4080:	47a0      	blx	r4
 	m24FC1025_write_byte(1,0xaa);
    4082:	21aa      	movs	r1, #170	; 0xaa
    4084:	2001      	movs	r0, #1
    4086:	47a0      	blx	r4
// 
// 
 	tmp1 = m24FC1025_read_byte(0);
    4088:	2000      	movs	r0, #0
    408a:	4c3a      	ldr	r4, [pc, #232]	; (4174 <main+0x21c>)
    408c:	47a0      	blx	r4
    408e:	4b3a      	ldr	r3, [pc, #232]	; (4178 <main+0x220>)
    4090:	7018      	strb	r0, [r3, #0]
 	tmp2 = m24FC1025_read_byte(1);
    4092:	2001      	movs	r0, #1
    4094:	47a0      	blx	r4
    4096:	4b39      	ldr	r3, [pc, #228]	; (417c <main+0x224>)
    4098:	7018      	strb	r0, [r3, #0]

	MAX5435M_write_byte(MAX5435_REGISTER_VREG,trimmer_value(analog_gain_2) );
    409a:	4d39      	ldr	r5, [pc, #228]	; (4180 <main+0x228>)
    409c:	7828      	ldrb	r0, [r5, #0]
    409e:	4c39      	ldr	r4, [pc, #228]	; (4184 <main+0x22c>)
    40a0:	47a0      	blx	r4
    40a2:	0001      	movs	r1, r0
    40a4:	2011      	movs	r0, #17
    40a6:	4b38      	ldr	r3, [pc, #224]	; (4188 <main+0x230>)
    40a8:	4798      	blx	r3
	MAX5435L_write_byte(MAX5435_REGISTER_VREG,trimmer_value(analog_gain_2) );
    40aa:	7828      	ldrb	r0, [r5, #0]
    40ac:	47a0      	blx	r4
    40ae:	0001      	movs	r1, r0
    40b0:	2011      	movs	r0, #17
    40b2:	4b36      	ldr	r3, [pc, #216]	; (418c <main+0x234>)
    40b4:	4798      	blx	r3
	
	lis302dl_write_configuration();
    40b6:	4b36      	ldr	r3, [pc, #216]	; (4190 <main+0x238>)
    40b8:	4798      	blx	r3
	
	uint8_t lis302dl_who = lis302dl_read_byte(LIS302DL_REG_WHO_AM_I);
    40ba:	200f      	movs	r0, #15
    40bc:	4b35      	ldr	r3, [pc, #212]	; (4194 <main+0x23c>)
    40be:	4798      	blx	r3

	/* Initialize OPAMP2 and ADC */
	//configure_opamp0(OPAMP_POT_MUX_8R_8R);
	configure_opamp2(OPAMP_POT_MUX_8R_8R);
    40c0:	2080      	movs	r0, #128	; 0x80
    40c2:	01c0      	lsls	r0, r0, #7
    40c4:	4b34      	ldr	r3, [pc, #208]	; (4198 <main+0x240>)
    40c6:	4798      	blx	r3
	

	
	//display_mutex  = xSemaphoreCreateMutex();
	//terminal_mutex = xSemaphoreCreateMutex();
	terminal_in_queue = xQueueCreate(64, sizeof(uint8_t));
    40c8:	2200      	movs	r2, #0
    40ca:	2101      	movs	r1, #1
    40cc:	2040      	movs	r0, #64	; 0x40
    40ce:	4b33      	ldr	r3, [pc, #204]	; (419c <main+0x244>)
    40d0:	4798      	blx	r3
    40d2:	4b33      	ldr	r3, [pc, #204]	; (41a0 <main+0x248>)
    40d4:	6018      	str	r0, [r3, #0]

	xTaskCreate(main_task,
    40d6:	2400      	movs	r4, #0
    40d8:	9403      	str	r4, [sp, #12]
    40da:	9402      	str	r4, [sp, #8]
    40dc:	9401      	str	r4, [sp, #4]
    40de:	2302      	movs	r3, #2
    40e0:	9300      	str	r3, [sp, #0]
    40e2:	2300      	movs	r3, #0
    40e4:	2264      	movs	r2, #100	; 0x64
    40e6:	492f      	ldr	r1, [pc, #188]	; (41a4 <main+0x24c>)
    40e8:	482f      	ldr	r0, [pc, #188]	; (41a8 <main+0x250>)
    40ea:	4d30      	ldr	r5, [pc, #192]	; (41ac <main+0x254>)
    40ec:	47a8      	blx	r5
	NULL,
	MAIN_TASK_PRIORITY,
	NULL);
	
	
	xTaskCreate(uart_task,
    40ee:	9403      	str	r4, [sp, #12]
    40f0:	9402      	str	r4, [sp, #8]
    40f2:	9401      	str	r4, [sp, #4]
    40f4:	3401      	adds	r4, #1
    40f6:	9400      	str	r4, [sp, #0]
    40f8:	2300      	movs	r3, #0
    40fa:	2264      	movs	r2, #100	; 0x64
    40fc:	492c      	ldr	r1, [pc, #176]	; (41b0 <main+0x258>)
    40fe:	482d      	ldr	r0, [pc, #180]	; (41b4 <main+0x25c>)
    4100:	47a8      	blx	r5
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    4102:	4b04      	ldr	r3, [pc, #16]	; (4114 <main+0x1bc>)
    4104:	701c      	strb	r4, [r3, #0]
    4106:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    410a:	b662      	cpsie	i

	/* Enable global interrupts */
	system_interrupt_enable_global();
	
	// ..and let FreeRTOS run tasks!
	vTaskStartScheduler();
    410c:	4b2a      	ldr	r3, [pc, #168]	; (41b8 <main+0x260>)
    410e:	4798      	blx	r3
    4110:	e7fe      	b.n	4110 <main+0x1b8>
    4112:	46c0      	nop			; (mov r8, r8)
    4114:	20000034 	.word	0x20000034
    4118:	00003981 	.word	0x00003981
    411c:	00002d15 	.word	0x00002d15
    4120:	00003ead 	.word	0x00003ead
    4124:	00160002 	.word	0x00160002
    4128:	00170002 	.word	0x00170002
    412c:	20003e4c 	.word	0x20003e4c
    4130:	20003d60 	.word	0x20003d60
    4134:	00003bd9 	.word	0x00003bd9
    4138:	20003d5c 	.word	0x20003d5c
    413c:	00003bad 	.word	0x00003bad
    4140:	20003d58 	.word	0x20003d58
    4144:	42000c00 	.word	0x42000c00
    4148:	00002605 	.word	0x00002605
    414c:	200000b0 	.word	0x200000b0
    4150:	000063ff 	.word	0x000063ff
    4154:	00000f11 	.word	0x00000f11
    4158:	00003b39 	.word	0x00003b39
    415c:	00002c4d 	.word	0x00002c4d
    4160:	00002c89 	.word	0x00002c89
    4164:	e000e100 	.word	0xe000e100
    4168:	00003c61 	.word	0x00003c61
    416c:	00003cd9 	.word	0x00003cd9
    4170:	00003a95 	.word	0x00003a95
    4174:	00003ad1 	.word	0x00003ad1
    4178:	20004065 	.word	0x20004065
    417c:	20003ee4 	.word	0x20003ee4
    4180:	20000039 	.word	0x20000039
    4184:	000001f1 	.word	0x000001f1
    4188:	000001f9 	.word	0x000001f9
    418c:	00000231 	.word	0x00000231
    4190:	00000115 	.word	0x00000115
    4194:	00000141 	.word	0x00000141
    4198:	00003bf1 	.word	0x00003bf1
    419c:	00001489 	.word	0x00001489
    41a0:	20003d08 	.word	0x20003d08
    41a4:	00006d8c 	.word	0x00006d8c
    41a8:	00003d6d 	.word	0x00003d6d
    41ac:	00001979 	.word	0x00001979
    41b0:	00006d94 	.word	0x00006d94
    41b4:	00004429 	.word	0x00004429
    41b8:	00001b65 	.word	0x00001b65

000041bc <media>:
	}
}


uint16_t media(uint16_t *buffer,uint16_t n_init_camp,uint16_t length_buffer)
{
    41bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	long tmp = 0;
	for(i=n_init_camp;i<length_buffer;i++)
    41be:	4b0c      	ldr	r3, [pc, #48]	; (41f0 <media+0x34>)
    41c0:	6019      	str	r1, [r3, #0]
    41c2:	4291      	cmp	r1, r2
    41c4:	d20d      	bcs.n	41e2 <media+0x26>
    41c6:	1c4b      	adds	r3, r1, #1
    41c8:	004c      	lsls	r4, r1, #1
    41ca:	1904      	adds	r4, r0, r4
    41cc:	1c57      	adds	r7, r2, #1
    41ce:	2000      	movs	r0, #0
    41d0:	4e07      	ldr	r6, [pc, #28]	; (41f0 <media+0x34>)
	{
		tmp += buffer[i];
    41d2:	8825      	ldrh	r5, [r4, #0]
    41d4:	1940      	adds	r0, r0, r5


uint16_t media(uint16_t *buffer,uint16_t n_init_camp,uint16_t length_buffer)
{
	long tmp = 0;
	for(i=n_init_camp;i<length_buffer;i++)
    41d6:	6033      	str	r3, [r6, #0]
    41d8:	3301      	adds	r3, #1
    41da:	3402      	adds	r4, #2
    41dc:	42bb      	cmp	r3, r7
    41de:	d1f8      	bne.n	41d2 <media+0x16>
    41e0:	e000      	b.n	41e4 <media+0x28>
}


uint16_t media(uint16_t *buffer,uint16_t n_init_camp,uint16_t length_buffer)
{
	long tmp = 0;
    41e2:	2000      	movs	r0, #0
	for(i=n_init_camp;i<length_buffer;i++)
	{
		tmp += buffer[i];
	}
	return (uint16_t)(tmp/(length_buffer-n_init_camp));
    41e4:	1a51      	subs	r1, r2, r1
    41e6:	4b03      	ldr	r3, [pc, #12]	; (41f4 <media+0x38>)
    41e8:	4798      	blx	r3
    41ea:	b280      	uxth	r0, r0
}
    41ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41ee:	46c0      	nop			; (mov r8, r8)
    41f0:	20003d00 	.word	0x20003d00
    41f4:	00004829 	.word	0x00004829

000041f8 <adc_complete_callback_ch1>:
	adc_enable_callback(&adc_instance_ch2, ADC_CALLBACK_READ_BUFFER);
}

/* ADC Callback Function */
void adc_complete_callback_ch1(struct adc_module *const module)
{
    41f8:	b570      	push	{r4, r5, r6, lr}
    41fa:	b08c      	sub	sp, #48	; 0x30

	integrale_ch1 = media(adc_result_buffer_ch1,1,ADC_SAMPLES);
    41fc:	2220      	movs	r2, #32
    41fe:	2101      	movs	r1, #1
    4200:	4832      	ldr	r0, [pc, #200]	; (42cc <adc_complete_callback_ch1+0xd4>)
    4202:	4b33      	ldr	r3, [pc, #204]	; (42d0 <adc_complete_callback_ch1+0xd8>)
    4204:	4798      	blx	r3
    4206:	4b33      	ldr	r3, [pc, #204]	; (42d4 <adc_complete_callback_ch1+0xdc>)
    4208:	8018      	strh	r0, [r3, #0]
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    420a:	4b33      	ldr	r3, [pc, #204]	; (42d8 <adc_complete_callback_ch1+0xe0>)
    420c:	681a      	ldr	r2, [r3, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    420e:	2080      	movs	r0, #128	; 0x80
    4210:	03c0      	lsls	r0, r0, #15
    4212:	2380      	movs	r3, #128	; 0x80
    4214:	4931      	ldr	r1, [pc, #196]	; (42dc <adc_complete_callback_ch1+0xe4>)
    4216:	50c8      	str	r0, [r1, r3]
    4218:	8c13      	ldrh	r3, [r2, #32]
    421a:	b29b      	uxth	r3, r3
#	else
		system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	while (adc_is_syncing(module_inst)) {
    421c:	2b00      	cmp	r3, #0
    421e:	d1fb      	bne.n	4218 <adc_complete_callback_ch1+0x20>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    4220:	3307      	adds	r3, #7
    4222:	7113      	strb	r3, [r2, #4]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    4224:	7193      	strb	r3, [r2, #6]

	adc_module->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    4226:	7813      	ldrb	r3, [r2, #0]
    4228:	2102      	movs	r1, #2
    422a:	438b      	bics	r3, r1
    422c:	7013      	strb	r3, [r2, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    422e:	4b2a      	ldr	r3, [pc, #168]	; (42d8 <adc_complete_callback_ch1+0xe0>)
    4230:	681a      	ldr	r2, [r3, #0]

	if (adc_module->SYNCBUSY.reg) {
    4232:	8c13      	ldrh	r3, [r2, #32]
    4234:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    4236:	2b00      	cmp	r3, #0
    4238:	d1fb      	bne.n	4232 <adc_complete_callback_ch1+0x3a>
	
	/************************/
	err = adc_disable(&adc_instance_ch1);
    423a:	4e29      	ldr	r6, [pc, #164]	; (42e0 <adc_complete_callback_ch1+0xe8>)
    423c:	7033      	strb	r3, [r6, #0]
	/* Creates a new configuration structure for the ADC */
	struct adc_config config_adc_ch2;
	adc_get_config_defaults(&config_adc_ch2);
    423e:	ac01      	add	r4, sp, #4
    4240:	0020      	movs	r0, r4
    4242:	4b28      	ldr	r3, [pc, #160]	; (42e4 <adc_complete_callback_ch1+0xec>)
    4244:	4798      	blx	r3
	/* Setup ADC with OPAMP2 output as ADC input */
	config_adc_ch2.resolution = ADC_RESOLUTION_CUSTOM;
    4246:	2334      	movs	r3, #52	; 0x34
    4248:	70e3      	strb	r3, [r4, #3]
	config_adc_ch2.accumulate_samples = ADC_ACCUMULATE_SAMPLES_8;
    424a:	3b31      	subs	r3, #49	; 0x31
    424c:	7223      	strb	r3, [r4, #8]
	config_adc_ch2.divide_result = ADC_DIVIDE_RESULT_8;
    424e:	7263      	strb	r3, [r4, #9]
	config_adc_ch2.clock_prescaler = ADC_CLOCK_PRESCALER_DIV8;
    4250:	3b01      	subs	r3, #1
    4252:	70a3      	strb	r3, [r4, #2]
	config_adc_ch2.positive_input  = ADC_POSITIVE_INPUT_PIN6;
    4254:	3304      	adds	r3, #4
    4256:	7123      	strb	r3, [r4, #4]
	config_adc_ch2.negative_input  = ADC_NEGATIVE_INPUT_GND;//ADC_NEGATIVE_INPUT_PIN6;
    4258:	23c0      	movs	r3, #192	; 0xc0
    425a:	015b      	lsls	r3, r3, #5
    425c:	80e3      	strh	r3, [r4, #6]
	/* Initialize and enable ADC */
	err = adc_init(&adc_instance_ch2, ADC, &config_adc_ch2);
    425e:	4d22      	ldr	r5, [pc, #136]	; (42e8 <adc_complete_callback_ch1+0xf0>)
    4260:	0022      	movs	r2, r4
    4262:	4922      	ldr	r1, [pc, #136]	; (42ec <adc_complete_callback_ch1+0xf4>)
    4264:	0028      	movs	r0, r5
    4266:	4b22      	ldr	r3, [pc, #136]	; (42f0 <adc_complete_callback_ch1+0xf8>)
    4268:	4798      	blx	r3
    426a:	7030      	strb	r0, [r6, #0]
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    426c:	682a      	ldr	r2, [r5, #0]
    426e:	8c13      	ldrh	r3, [r2, #32]
    4270:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    4272:	2b00      	cmp	r3, #0
    4274:	d1fb      	bne.n	426e <adc_complete_callback_ch1+0x76>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4276:	2180      	movs	r1, #128	; 0x80
    4278:	03c9      	lsls	r1, r1, #15
    427a:	4b18      	ldr	r3, [pc, #96]	; (42dc <adc_complete_callback_ch1+0xe4>)
    427c:	6019      	str	r1, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    427e:	2307      	movs	r3, #7
    4280:	7113      	strb	r3, [r2, #4]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    4282:	7193      	strb	r3, [r2, #6]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    4284:	7811      	ldrb	r1, [r2, #0]
    4286:	3b05      	subs	r3, #5
    4288:	430b      	orrs	r3, r1
    428a:	7013      	strb	r3, [r2, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    428c:	4b16      	ldr	r3, [pc, #88]	; (42e8 <adc_complete_callback_ch1+0xf0>)
    428e:	681a      	ldr	r2, [r3, #0]

	if (adc_module->SYNCBUSY.reg) {
    4290:	8c13      	ldrh	r3, [r2, #32]
    4292:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    4294:	2b00      	cmp	r3, #0
    4296:	d1fb      	bne.n	4290 <adc_complete_callback_ch1+0x98>
	err = adc_enable(&adc_instance_ch2);
    4298:	2200      	movs	r2, #0
    429a:	4b11      	ldr	r3, [pc, #68]	; (42e0 <adc_complete_callback_ch1+0xe8>)
    429c:	701a      	strb	r2, [r3, #0]
	
	adc_register_callback(&adc_instance_ch2,
    429e:	4c12      	ldr	r4, [pc, #72]	; (42e8 <adc_complete_callback_ch1+0xf0>)
    42a0:	4914      	ldr	r1, [pc, #80]	; (42f4 <adc_complete_callback_ch1+0xfc>)
    42a2:	0020      	movs	r0, r4
    42a4:	4b14      	ldr	r3, [pc, #80]	; (42f8 <adc_complete_callback_ch1+0x100>)
    42a6:	4798      	blx	r3
    42a8:	7ee2      	ldrb	r2, [r4, #27]
    42aa:	2301      	movs	r3, #1
    42ac:	4313      	orrs	r3, r2
    42ae:	76e3      	strb	r3, [r4, #27]
			adc_complete_callback_ch2, ADC_CALLBACK_READ_BUFFER);
	adc_enable_callback(&adc_instance_ch2, ADC_CALLBACK_READ_BUFFER);
	
	memset(adc_result_buffer_ch2,0,ADC_SAMPLES);
    42b0:	4d12      	ldr	r5, [pc, #72]	; (42fc <adc_complete_callback_ch1+0x104>)
    42b2:	2220      	movs	r2, #32
    42b4:	2100      	movs	r1, #0
    42b6:	0028      	movs	r0, r5
    42b8:	4b11      	ldr	r3, [pc, #68]	; (4300 <adc_complete_callback_ch1+0x108>)
    42ba:	4798      	blx	r3
	adc_read_buffer_job(&adc_instance_ch2, adc_result_buffer_ch2, n_sample);
    42bc:	4b11      	ldr	r3, [pc, #68]	; (4304 <adc_complete_callback_ch1+0x10c>)
    42be:	881a      	ldrh	r2, [r3, #0]
    42c0:	0029      	movs	r1, r5
    42c2:	0020      	movs	r0, r4
    42c4:	4b10      	ldr	r3, [pc, #64]	; (4308 <adc_complete_callback_ch1+0x110>)
    42c6:	4798      	blx	r3
	
}
    42c8:	b00c      	add	sp, #48	; 0x30
    42ca:	bd70      	pop	{r4, r5, r6, pc}
    42cc:	20003e80 	.word	0x20003e80
    42d0:	000041bd 	.word	0x000041bd
    42d4:	20003cf2 	.word	0x20003cf2
    42d8:	20003fd8 	.word	0x20003fd8
    42dc:	e000e100 	.word	0xe000e100
    42e0:	20003fb6 	.word	0x20003fb6
    42e4:	00002e41 	.word	0x00002e41
    42e8:	20003fb8 	.word	0x20003fb8
    42ec:	43000c00 	.word	0x43000c00
    42f0:	00002e85 	.word	0x00002e85
    42f4:	0000430d 	.word	0x0000430d
    42f8:	00003315 	.word	0x00003315
    42fc:	20003ff8 	.word	0x20003ff8
    4300:	000063ef 	.word	0x000063ef
    4304:	20000036 	.word	0x20000036
    4308:	00003329 	.word	0x00003329

0000430c <adc_complete_callback_ch2>:

void adc_complete_callback_ch2(struct adc_module *const module)
{
    430c:	b570      	push	{r4, r5, r6, lr}
    430e:	b08c      	sub	sp, #48	; 0x30
	integrale_ch2 = media(adc_result_buffer_ch2,1,ADC_SAMPLES);
    4310:	2220      	movs	r2, #32
    4312:	2101      	movs	r1, #1
    4314:	482c      	ldr	r0, [pc, #176]	; (43c8 <adc_complete_callback_ch2+0xbc>)
    4316:	4b2d      	ldr	r3, [pc, #180]	; (43cc <adc_complete_callback_ch2+0xc0>)
    4318:	4798      	blx	r3
    431a:	4b2d      	ldr	r3, [pc, #180]	; (43d0 <adc_complete_callback_ch2+0xc4>)
    431c:	8018      	strh	r0, [r3, #0]
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    431e:	4b2d      	ldr	r3, [pc, #180]	; (43d4 <adc_complete_callback_ch2+0xc8>)
    4320:	681a      	ldr	r2, [r3, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4322:	2080      	movs	r0, #128	; 0x80
    4324:	03c0      	lsls	r0, r0, #15
    4326:	2380      	movs	r3, #128	; 0x80
    4328:	492b      	ldr	r1, [pc, #172]	; (43d8 <adc_complete_callback_ch2+0xcc>)
    432a:	50c8      	str	r0, [r1, r3]
    432c:	8c13      	ldrh	r3, [r2, #32]
    432e:	b29b      	uxth	r3, r3
#	else
		system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	while (adc_is_syncing(module_inst)) {
    4330:	2b00      	cmp	r3, #0
    4332:	d1fb      	bne.n	432c <adc_complete_callback_ch2+0x20>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    4334:	3307      	adds	r3, #7
    4336:	7113      	strb	r3, [r2, #4]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    4338:	7193      	strb	r3, [r2, #6]

	adc_module->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    433a:	7813      	ldrb	r3, [r2, #0]
    433c:	2102      	movs	r1, #2
    433e:	438b      	bics	r3, r1
    4340:	7013      	strb	r3, [r2, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    4342:	4b24      	ldr	r3, [pc, #144]	; (43d4 <adc_complete_callback_ch2+0xc8>)
    4344:	681a      	ldr	r2, [r3, #0]

	if (adc_module->SYNCBUSY.reg) {
    4346:	8c13      	ldrh	r3, [r2, #32]
    4348:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    434a:	2b00      	cmp	r3, #0
    434c:	d1fb      	bne.n	4346 <adc_complete_callback_ch2+0x3a>
	
	/************************/
	err = adc_disable(&adc_instance_ch2);
    434e:	4e23      	ldr	r6, [pc, #140]	; (43dc <adc_complete_callback_ch2+0xd0>)
    4350:	7033      	strb	r3, [r6, #0]
	/* Creates a new configuration structure for the ADC */
	struct adc_config config_adc_ch1;
	adc_get_config_defaults(&config_adc_ch1);
    4352:	ac01      	add	r4, sp, #4
    4354:	0020      	movs	r0, r4
    4356:	4b22      	ldr	r3, [pc, #136]	; (43e0 <adc_complete_callback_ch2+0xd4>)
    4358:	4798      	blx	r3
	/* Setup ADC with OPAMP2 output as ADC input */
	config_adc_ch1.resolution = ADC_RESOLUTION_CUSTOM;
    435a:	2334      	movs	r3, #52	; 0x34
    435c:	70e3      	strb	r3, [r4, #3]
	config_adc_ch1.accumulate_samples = ADC_ACCUMULATE_SAMPLES_8;
    435e:	3b31      	subs	r3, #49	; 0x31
    4360:	7223      	strb	r3, [r4, #8]
	config_adc_ch1.divide_result = ADC_DIVIDE_RESULT_8;
    4362:	7263      	strb	r3, [r4, #9]
	config_adc_ch1.clock_prescaler = ADC_CLOCK_PRESCALER_DIV8;
    4364:	3b01      	subs	r3, #1
    4366:	70a3      	strb	r3, [r4, #2]
	config_adc_ch1.positive_input  = ADC_POSITIVE_INPUT_OPAMP2;
    4368:	331d      	adds	r3, #29
    436a:	7123      	strb	r3, [r4, #4]
	config_adc_ch1.negative_input  = ADC_NEGATIVE_INPUT_GND;//ADC_NEGATIVE_INPUT_PIN6;
    436c:	23c0      	movs	r3, #192	; 0xc0
    436e:	015b      	lsls	r3, r3, #5
    4370:	80e3      	strh	r3, [r4, #6]
	/* Initialize and enable ADC */
	err = adc_init(&adc_instance_ch1, ADC, &config_adc_ch1);
    4372:	4d1c      	ldr	r5, [pc, #112]	; (43e4 <adc_complete_callback_ch2+0xd8>)
    4374:	0022      	movs	r2, r4
    4376:	491c      	ldr	r1, [pc, #112]	; (43e8 <adc_complete_callback_ch2+0xdc>)
    4378:	0028      	movs	r0, r5
    437a:	4b1c      	ldr	r3, [pc, #112]	; (43ec <adc_complete_callback_ch2+0xe0>)
    437c:	4798      	blx	r3
    437e:	7030      	strb	r0, [r6, #0]
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    4380:	682a      	ldr	r2, [r5, #0]
    4382:	8c13      	ldrh	r3, [r2, #32]
    4384:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    4386:	2b00      	cmp	r3, #0
    4388:	d1fb      	bne.n	4382 <adc_complete_callback_ch2+0x76>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    438a:	2180      	movs	r1, #128	; 0x80
    438c:	03c9      	lsls	r1, r1, #15
    438e:	4b12      	ldr	r3, [pc, #72]	; (43d8 <adc_complete_callback_ch2+0xcc>)
    4390:	6019      	str	r1, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    4392:	2307      	movs	r3, #7
    4394:	7113      	strb	r3, [r2, #4]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    4396:	7193      	strb	r3, [r2, #6]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    4398:	7811      	ldrb	r1, [r2, #0]
    439a:	3b05      	subs	r3, #5
    439c:	430b      	orrs	r3, r1
    439e:	7013      	strb	r3, [r2, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    43a0:	4b10      	ldr	r3, [pc, #64]	; (43e4 <adc_complete_callback_ch2+0xd8>)
    43a2:	681a      	ldr	r2, [r3, #0]

	if (adc_module->SYNCBUSY.reg) {
    43a4:	8c13      	ldrh	r3, [r2, #32]
    43a6:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    43a8:	2b00      	cmp	r3, #0
    43aa:	d1fb      	bne.n	43a4 <adc_complete_callback_ch2+0x98>
	err = adc_enable(&adc_instance_ch1);
    43ac:	2200      	movs	r2, #0
    43ae:	4b0b      	ldr	r3, [pc, #44]	; (43dc <adc_complete_callback_ch2+0xd0>)
    43b0:	701a      	strb	r2, [r3, #0]
	
	adc_register_callback(&adc_instance_ch1,
    43b2:	4c0c      	ldr	r4, [pc, #48]	; (43e4 <adc_complete_callback_ch2+0xd8>)
    43b4:	490e      	ldr	r1, [pc, #56]	; (43f0 <adc_complete_callback_ch2+0xe4>)
    43b6:	0020      	movs	r0, r4
    43b8:	4b0e      	ldr	r3, [pc, #56]	; (43f4 <adc_complete_callback_ch2+0xe8>)
    43ba:	4798      	blx	r3
    43bc:	7ee2      	ldrb	r2, [r4, #27]
    43be:	2301      	movs	r3, #1
    43c0:	4313      	orrs	r3, r2
    43c2:	76e3      	strb	r3, [r4, #27]
			adc_complete_callback_ch1, ADC_CALLBACK_READ_BUFFER);
	adc_enable_callback(&adc_instance_ch1, ADC_CALLBACK_READ_BUFFER);
	
	//memset(adc_result_buffer_ch1,0,ADC_SAMPLES);
	//adc_read_buffer_job(&adc_instance_ch1, adc_result_buffer_ch1, n_sample);
}
    43c4:	b00c      	add	sp, #48	; 0x30
    43c6:	bd70      	pop	{r4, r5, r6, pc}
    43c8:	20003ff8 	.word	0x20003ff8
    43cc:	000041bd 	.word	0x000041bd
    43d0:	20003cf4 	.word	0x20003cf4
    43d4:	20003fb8 	.word	0x20003fb8
    43d8:	e000e100 	.word	0xe000e100
    43dc:	20003fb6 	.word	0x20003fb6
    43e0:	00002e41 	.word	0x00002e41
    43e4:	20003fd8 	.word	0x20003fd8
    43e8:	43000c00 	.word	0x43000c00
    43ec:	00002e85 	.word	0x00002e85
    43f0:	000041f9 	.word	0x000041f9
    43f4:	00003315 	.word	0x00003315

000043f8 <save_configuration_param>:
void save_configuration_param(void)
{
		//sprintf(piezoboard_parameters.STX_EEPROM,"%s",STX_EEPROM_STR);
		//sprintf(piezoboard_parameters.ETX_EEPROM,"%s",ETX_EEPROM_STR);
		
		piezoboard_parameters.STX_EEPROM = STX_EEPROM_STR;
    43f8:	4b07      	ldr	r3, [pc, #28]	; (4418 <save_configuration_param+0x20>)
    43fa:	2240      	movs	r2, #64	; 0x40
    43fc:	701a      	strb	r2, [r3, #0]
		piezoboard_parameters.ETX_EEPROM = ETX_EEPROM_STR;
    43fe:	3a1d      	subs	r2, #29
    4400:	71da      	strb	r2, [r3, #7]
		
		piezoboard_parameters.analog_gain_preset = analog_gain_1;
    4402:	4a06      	ldr	r2, [pc, #24]	; (441c <save_configuration_param+0x24>)
    4404:	7812      	ldrb	r2, [r2, #0]
    4406:	705a      	strb	r2, [r3, #1]
		piezoboard_parameters.ncamp_preset = n_sample;
    4408:	4a05      	ldr	r2, [pc, #20]	; (4420 <save_configuration_param+0x28>)
    440a:	8812      	ldrh	r2, [r2, #0]
    440c:	809a      	strh	r2, [r3, #4]
		piezoboard_parameters.threshold_preset = threshold_value;
    440e:	4a05      	ldr	r2, [pc, #20]	; (4424 <save_configuration_param+0x2c>)
    4410:	8812      	ldrh	r2, [r2, #0]
    4412:	805a      	strh	r2, [r3, #2]
		////crc8(&piezoboard_parameters.CRC,piezoboard_parameters.analog_gain_preset);
		////crc8(&piezoboard_parameters.CRC,piezoboard_parameters.ncamp_preset);
		////crc8(&piezoboard_parameters.CRC,piezoboard_parameters.threshold_preset);
		
		//at24cxx_write_continuous(0,sizeof(piezoboard_parameters),(uint8_t*)&piezoboard_parameters);
}
    4414:	4770      	bx	lr
    4416:	46c0      	nop			; (mov r8, r8)
    4418:	2000403c 	.word	0x2000403c
    441c:	20000038 	.word	0x20000038
    4420:	20000036 	.word	0x20000036
    4424:	20000048 	.word	0x20000048

00004428 <uart_task>:
}



static void uart_task(void *params)
{
    4428:	b5f0      	push	{r4, r5, r6, r7, lr}
    442a:	4647      	mov	r7, r8
    442c:	b480      	push	{r7}
    442e:	b084      	sub	sp, #16

	
	//uint32_t packet_length = sizeof(packet);
	//char* temporary_char = &s[0];
	
	 memset(buffer_temp,0,sizeof(packet));
    4430:	220c      	movs	r2, #12
    4432:	2100      	movs	r1, #0
    4434:	4668      	mov	r0, sp
    4436:	4b9a      	ldr	r3, [pc, #616]	; (46a0 <uart_task+0x278>)
    4438:	4798      	blx	r3
	char current_char;
	char *current_char_ptr = &current_char;
	char r;
	packet *pkt_temp_ptr;
	uint8_t buffer_temp[sizeof(packet)];
	uint32_t buffer_temp_index = 0;
    443a:	2400      	movs	r4, #0
	 memset(buffer_temp,0,sizeof(packet));
	
	for (;;) {

		// Any characters queued? Handle them!
		while (xQueueReceive(terminal_in_queue, current_char_ptr, 0)) 
    443c:	4e99      	ldr	r6, [pc, #612]	; (46a4 <uart_task+0x27c>)
    443e:	4d9a      	ldr	r5, [pc, #616]	; (46a8 <uart_task+0x280>)
			

			*current_char_ptr = '\0';
		}

		vTaskDelay(UART_TASK_DELAY);
    4440:	4f9a      	ldr	r7, [pc, #616]	; (46ac <uart_task+0x284>)
    4442:	e121      	b.n	4688 <uart_task+0x260>

		// Any characters queued? Handle them!
		while (xQueueReceive(terminal_in_queue, current_char_ptr, 0)) 
		{
			
			r = *current_char_ptr;
    4444:	230f      	movs	r3, #15
    4446:	446b      	add	r3, sp
    4448:	781b      	ldrb	r3, [r3, #0]
			
			switch(r)
    444a:	2b40      	cmp	r3, #64	; 0x40
    444c:	d000      	beq.n	4450 <uart_task+0x28>
    444e:	e112      	b.n	4676 <uart_task+0x24e>
			{
				case '@':
				
					buffer_temp[buffer_temp_index] = r;
    4450:	466a      	mov	r2, sp
    4452:	5513      	strb	r3, [r2, r4]
					
					buffer_temp_index++;
					
					pkt_temp_ptr = (packet*)&buffer_temp[0];
					pkt = *pkt_temp_ptr;
    4454:	220c      	movs	r2, #12
    4456:	4669      	mov	r1, sp
    4458:	4895      	ldr	r0, [pc, #596]	; (46b0 <uart_task+0x288>)
    445a:	4b96      	ldr	r3, [pc, #600]	; (46b4 <uart_task+0x28c>)
    445c:	4798      	blx	r3
					
					
					if ((pkt_temp_ptr->STX == STX_STRING) & (pkt_temp_ptr->ETX == ETX_STRING))
    445e:	466b      	mov	r3, sp
    4460:	781b      	ldrb	r3, [r3, #0]
    4462:	2b23      	cmp	r3, #35	; 0x23
    4464:	d000      	beq.n	4468 <uart_task+0x40>
    4466:	e0ff      	b.n	4668 <uart_task+0x240>
    4468:	466b      	mov	r3, sp
    446a:	7adb      	ldrb	r3, [r3, #11]
    446c:	2b40      	cmp	r3, #64	; 0x40
    446e:	d000      	beq.n	4472 <uart_task+0x4a>
    4470:	e0fa      	b.n	4668 <uart_task+0x240>
					{
						switch (pkt_temp_ptr->cmd)
    4472:	466b      	mov	r3, sp
    4474:	785b      	ldrb	r3, [r3, #1]
    4476:	2b52      	cmp	r3, #82	; 0x52
    4478:	d003      	beq.n	4482 <uart_task+0x5a>
    447a:	2b57      	cmp	r3, #87	; 0x57
    447c:	d100      	bne.n	4480 <uart_task+0x58>
    447e:	e07c      	b.n	457a <uart_task+0x152>
    4480:	e0f2      	b.n	4668 <uart_task+0x240>
						{
							case CMD_READ:
							if(pkt_temp_ptr->sub_cmd == sb_cmd_array[ping])
    4482:	466b      	mov	r3, sp
    4484:	789b      	ldrb	r3, [r3, #2]
    4486:	4a8c      	ldr	r2, [pc, #560]	; (46b8 <uart_task+0x290>)
    4488:	7812      	ldrb	r2, [r2, #0]
    448a:	429a      	cmp	r2, r3
    448c:	d10d      	bne.n	44aa <uart_task+0x82>
							{
									pkt.sub_cmd = pkt_temp_ptr->sub_cmd;
    448e:	4988      	ldr	r1, [pc, #544]	; (46b0 <uart_task+0x288>)
    4490:	708b      	strb	r3, [r1, #2]
									pkt.payload[0]=0xAA;
    4492:	23aa      	movs	r3, #170	; 0xaa
    4494:	70cb      	strb	r3, [r1, #3]
									pkt.payload[1]=0xBB;
    4496:	3311      	adds	r3, #17
    4498:	710b      	strb	r3, [r1, #4]
									usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    449a:	220c      	movs	r2, #12
    449c:	4887      	ldr	r0, [pc, #540]	; (46bc <uart_task+0x294>)
    449e:	4b88      	ldr	r3, [pc, #544]	; (46c0 <uart_task+0x298>)
    44a0:	4798      	blx	r3
									delay_ms(25);
    44a2:	2019      	movs	r0, #25
    44a4:	4b87      	ldr	r3, [pc, #540]	; (46c4 <uart_task+0x29c>)
    44a6:	4798      	blx	r3
    44a8:	e0de      	b.n	4668 <uart_task+0x240>
							}
							else if(pkt_temp_ptr->sub_cmd == sb_cmd_array[read_sensor])
    44aa:	4a83      	ldr	r2, [pc, #524]	; (46b8 <uart_task+0x290>)
    44ac:	7852      	ldrb	r2, [r2, #1]
    44ae:	429a      	cmp	r2, r3
    44b0:	d12b      	bne.n	450a <uart_task+0xe2>
							{
									pkt.sub_cmd = pkt_temp_ptr->sub_cmd;
    44b2:	4c7f      	ldr	r4, [pc, #508]	; (46b0 <uart_task+0x288>)
    44b4:	70a3      	strb	r3, [r4, #2]
									
									memset(adc_result_buffer_ch1,0,ADC_SAMPLES);
    44b6:	2220      	movs	r2, #32
    44b8:	2100      	movs	r1, #0
    44ba:	4883      	ldr	r0, [pc, #524]	; (46c8 <uart_task+0x2a0>)
    44bc:	4b78      	ldr	r3, [pc, #480]	; (46a0 <uart_task+0x278>)
    44be:	4798      	blx	r3
									adc_read_buffer_job(&adc_instance_ch1, adc_result_buffer_ch1, n_sample);
    44c0:	4b82      	ldr	r3, [pc, #520]	; (46cc <uart_task+0x2a4>)
    44c2:	881a      	ldrh	r2, [r3, #0]
    44c4:	4980      	ldr	r1, [pc, #512]	; (46c8 <uart_task+0x2a0>)
    44c6:	4882      	ldr	r0, [pc, #520]	; (46d0 <uart_task+0x2a8>)
    44c8:	4b82      	ldr	r3, [pc, #520]	; (46d4 <uart_task+0x2ac>)
    44ca:	4798      	blx	r3
	

									pkt.payload[0]=(uint8_t)integrale_ch1;
    44cc:	4b82      	ldr	r3, [pc, #520]	; (46d8 <uart_task+0x2b0>)
    44ce:	881b      	ldrh	r3, [r3, #0]
    44d0:	70e3      	strb	r3, [r4, #3]
									pkt.payload[1]=(uint8_t)(integrale_ch1>>8);									
    44d2:	0a1b      	lsrs	r3, r3, #8
    44d4:	7123      	strb	r3, [r4, #4]
									pkt.payload[2]=(uint8_t)integrale_ch2;
    44d6:	4b81      	ldr	r3, [pc, #516]	; (46dc <uart_task+0x2b4>)
    44d8:	881b      	ldrh	r3, [r3, #0]
    44da:	7163      	strb	r3, [r4, #5]
									pkt.payload[3]=(uint8_t)(integrale_ch2>>8);
    44dc:	0a1b      	lsrs	r3, r3, #8
    44de:	71a3      	strb	r3, [r4, #6]
									
									pkt.payload[4]=(uint8_t)(alarm_detected);
    44e0:	4b7f      	ldr	r3, [pc, #508]	; (46e0 <uart_task+0x2b8>)
    44e2:	781b      	ldrb	r3, [r3, #0]
    44e4:	71e3      	strb	r3, [r4, #7]
									pkt.payload[5]=(uint8_t)(acc_x);
    44e6:	4b7f      	ldr	r3, [pc, #508]	; (46e4 <uart_task+0x2bc>)
    44e8:	781b      	ldrb	r3, [r3, #0]
    44ea:	7223      	strb	r3, [r4, #8]
									pkt.payload[6]=(uint8_t)(acc_y);
    44ec:	4b7e      	ldr	r3, [pc, #504]	; (46e8 <uart_task+0x2c0>)
    44ee:	781b      	ldrb	r3, [r3, #0]
    44f0:	7263      	strb	r3, [r4, #9]
									pkt.payload[7]=(uint8_t)(acc_z);
    44f2:	4b7e      	ldr	r3, [pc, #504]	; (46ec <uart_task+0x2c4>)
    44f4:	781b      	ldrb	r3, [r3, #0]
    44f6:	72a3      	strb	r3, [r4, #10]
									usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    44f8:	220c      	movs	r2, #12
    44fa:	0021      	movs	r1, r4
    44fc:	486f      	ldr	r0, [pc, #444]	; (46bc <uart_task+0x294>)
    44fe:	4b70      	ldr	r3, [pc, #448]	; (46c0 <uart_task+0x298>)
    4500:	4798      	blx	r3
									delay_ms(25);
    4502:	2019      	movs	r0, #25
    4504:	4b6f      	ldr	r3, [pc, #444]	; (46c4 <uart_task+0x29c>)
    4506:	4798      	blx	r3
    4508:	e0ae      	b.n	4668 <uart_task+0x240>
							}
							else if(pkt_temp_ptr->sub_cmd == sb_cmd_array[get_ncamp])
    450a:	4a6b      	ldr	r2, [pc, #428]	; (46b8 <uart_task+0x290>)
    450c:	7952      	ldrb	r2, [r2, #5]
    450e:	429a      	cmp	r2, r3
    4510:	d10e      	bne.n	4530 <uart_task+0x108>
							{
								pkt.sub_cmd = pkt_temp_ptr->sub_cmd;
    4512:	4967      	ldr	r1, [pc, #412]	; (46b0 <uart_task+0x288>)
    4514:	708b      	strb	r3, [r1, #2]
								//pkt.payload[0]=(uint8_t)result;
								//pkt.payload[1]=(uint8_t)(result>>8);
								pkt.payload[0]=(uint8_t)n_sample;
    4516:	4b6d      	ldr	r3, [pc, #436]	; (46cc <uart_task+0x2a4>)
    4518:	881b      	ldrh	r3, [r3, #0]
    451a:	70cb      	strb	r3, [r1, #3]
								pkt.payload[1]=(uint8_t)(n_sample>>8);
    451c:	0a1b      	lsrs	r3, r3, #8
    451e:	710b      	strb	r3, [r1, #4]
								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    4520:	220c      	movs	r2, #12
    4522:	4866      	ldr	r0, [pc, #408]	; (46bc <uart_task+0x294>)
    4524:	4b66      	ldr	r3, [pc, #408]	; (46c0 <uart_task+0x298>)
    4526:	4798      	blx	r3
								delay_ms(25);
    4528:	2019      	movs	r0, #25
    452a:	4b66      	ldr	r3, [pc, #408]	; (46c4 <uart_task+0x29c>)
    452c:	4798      	blx	r3
    452e:	e09b      	b.n	4668 <uart_task+0x240>
							}
							else if(pkt_temp_ptr->sub_cmd == sb_cmd_array[get_threshold])
    4530:	4a61      	ldr	r2, [pc, #388]	; (46b8 <uart_task+0x290>)
    4532:	7992      	ldrb	r2, [r2, #6]
    4534:	429a      	cmp	r2, r3
    4536:	d10e      	bne.n	4556 <uart_task+0x12e>
							{
								pkt.sub_cmd = pkt_temp_ptr->sub_cmd;
    4538:	495d      	ldr	r1, [pc, #372]	; (46b0 <uart_task+0x288>)
    453a:	708b      	strb	r3, [r1, #2]
								//pkt.payload[0]=(uint8_t)result;
								//pkt.payload[1]=(uint8_t)(result>>8);
								pkt.payload[0]=(uint8_t)threshold_value;
    453c:	4b6c      	ldr	r3, [pc, #432]	; (46f0 <uart_task+0x2c8>)
    453e:	881b      	ldrh	r3, [r3, #0]
    4540:	70cb      	strb	r3, [r1, #3]
								pkt.payload[1]=(uint8_t)(threshold_value>>8);
    4542:	0a1b      	lsrs	r3, r3, #8
    4544:	710b      	strb	r3, [r1, #4]
								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    4546:	220c      	movs	r2, #12
    4548:	485c      	ldr	r0, [pc, #368]	; (46bc <uart_task+0x294>)
    454a:	4b5d      	ldr	r3, [pc, #372]	; (46c0 <uart_task+0x298>)
    454c:	4798      	blx	r3
								delay_ms(25);
    454e:	2019      	movs	r0, #25
    4550:	4b5c      	ldr	r3, [pc, #368]	; (46c4 <uart_task+0x29c>)
    4552:	4798      	blx	r3
    4554:	e088      	b.n	4668 <uart_task+0x240>
							}
							else if(pkt_temp_ptr->sub_cmd == sb_cmd_array[get_analog_gain_1])
    4556:	4a58      	ldr	r2, [pc, #352]	; (46b8 <uart_task+0x290>)
    4558:	79d2      	ldrb	r2, [r2, #7]
    455a:	429a      	cmp	r2, r3
    455c:	d000      	beq.n	4560 <uart_task+0x138>
    455e:	e083      	b.n	4668 <uart_task+0x240>
							{
								pkt.sub_cmd = pkt_temp_ptr->sub_cmd;
    4560:	4953      	ldr	r1, [pc, #332]	; (46b0 <uart_task+0x288>)
    4562:	708b      	strb	r3, [r1, #2]
								//pkt.payload[0]=(uint8_t)result;
								//pkt.payload[1]=(uint8_t)(result>>8);
								pkt.payload[0]=(uint8_t)analog_gain_1;
    4564:	4b63      	ldr	r3, [pc, #396]	; (46f4 <uart_task+0x2cc>)
    4566:	781b      	ldrb	r3, [r3, #0]
    4568:	70cb      	strb	r3, [r1, #3]
								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    456a:	220c      	movs	r2, #12
    456c:	4853      	ldr	r0, [pc, #332]	; (46bc <uart_task+0x294>)
    456e:	4b54      	ldr	r3, [pc, #336]	; (46c0 <uart_task+0x298>)
    4570:	4798      	blx	r3
								delay_ms(25);
    4572:	2019      	movs	r0, #25
    4574:	4b53      	ldr	r3, [pc, #332]	; (46c4 <uart_task+0x29c>)
    4576:	4798      	blx	r3
    4578:	e076      	b.n	4668 <uart_task+0x240>
// 								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
// 								delay_ms(25);
// 							}
							break;
							case CMD_WRITE:
							if(pkt_temp_ptr->sub_cmd == sb_cmd_array[set_ncamp])
    457a:	466b      	mov	r3, sp
    457c:	789b      	ldrb	r3, [r3, #2]
    457e:	4a4e      	ldr	r2, [pc, #312]	; (46b8 <uart_task+0x290>)
    4580:	7892      	ldrb	r2, [r2, #2]
    4582:	429a      	cmp	r2, r3
    4584:	d112      	bne.n	45ac <uart_task+0x184>
							{
								value_rx = (uint16_t)(pkt_temp_ptr->payload[1] << 8 | (pkt_temp_ptr->payload[0]));
    4586:	466b      	mov	r3, sp
    4588:	791b      	ldrb	r3, [r3, #4]
    458a:	021b      	lsls	r3, r3, #8
    458c:	466a      	mov	r2, sp
    458e:	78d2      	ldrb	r2, [r2, #3]
    4590:	4313      	orrs	r3, r2
    4592:	4a59      	ldr	r2, [pc, #356]	; (46f8 <uart_task+0x2d0>)
    4594:	8013      	strh	r3, [r2, #0]
								n_sample = value_rx;
    4596:	4a4d      	ldr	r2, [pc, #308]	; (46cc <uart_task+0x2a4>)
    4598:	8013      	strh	r3, [r2, #0]
								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    459a:	220c      	movs	r2, #12
    459c:	4944      	ldr	r1, [pc, #272]	; (46b0 <uart_task+0x288>)
    459e:	4847      	ldr	r0, [pc, #284]	; (46bc <uart_task+0x294>)
    45a0:	4b47      	ldr	r3, [pc, #284]	; (46c0 <uart_task+0x298>)
    45a2:	4798      	blx	r3
								delay_ms(25);
    45a4:	2019      	movs	r0, #25
    45a6:	4b47      	ldr	r3, [pc, #284]	; (46c4 <uart_task+0x29c>)
    45a8:	4798      	blx	r3
    45aa:	e05d      	b.n	4668 <uart_task+0x240>
							}
							else if(pkt_temp_ptr->sub_cmd == sb_cmd_array[set_threshold])
    45ac:	4a42      	ldr	r2, [pc, #264]	; (46b8 <uart_task+0x290>)
    45ae:	78d2      	ldrb	r2, [r2, #3]
    45b0:	429a      	cmp	r2, r3
    45b2:	d110      	bne.n	45d6 <uart_task+0x1ae>
							{
								threshold_value = pkt_temp_ptr->payload[1] << 8 | (pkt_temp_ptr->payload[0]);
    45b4:	466b      	mov	r3, sp
    45b6:	791b      	ldrb	r3, [r3, #4]
    45b8:	021b      	lsls	r3, r3, #8
    45ba:	466a      	mov	r2, sp
    45bc:	78d2      	ldrb	r2, [r2, #3]
    45be:	4313      	orrs	r3, r2
    45c0:	4a4b      	ldr	r2, [pc, #300]	; (46f0 <uart_task+0x2c8>)
    45c2:	8013      	strh	r3, [r2, #0]
								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    45c4:	220c      	movs	r2, #12
    45c6:	493a      	ldr	r1, [pc, #232]	; (46b0 <uart_task+0x288>)
    45c8:	483c      	ldr	r0, [pc, #240]	; (46bc <uart_task+0x294>)
    45ca:	4b3d      	ldr	r3, [pc, #244]	; (46c0 <uart_task+0x298>)
    45cc:	4798      	blx	r3
								delay_ms(25);
    45ce:	2019      	movs	r0, #25
    45d0:	4b3c      	ldr	r3, [pc, #240]	; (46c4 <uart_task+0x29c>)
    45d2:	4798      	blx	r3
    45d4:	e048      	b.n	4668 <uart_task+0x240>
							}
							else if(pkt_temp_ptr->sub_cmd == sb_cmd_array[set_analog_gain_1])
    45d6:	4a38      	ldr	r2, [pc, #224]	; (46b8 <uart_task+0x290>)
    45d8:	7912      	ldrb	r2, [r2, #4]
    45da:	429a      	cmp	r2, r3
    45dc:	d113      	bne.n	4606 <uart_task+0x1de>
							{
								uint8_t temp = pkt_temp_ptr->payload[0];
    45de:	466b      	mov	r3, sp
    45e0:	78db      	ldrb	r3, [r3, #3]
								if(analog_gain_1 != temp)
    45e2:	4a44      	ldr	r2, [pc, #272]	; (46f4 <uart_task+0x2cc>)
    45e4:	7812      	ldrb	r2, [r2, #0]
    45e6:	429a      	cmp	r2, r3
    45e8:	d004      	beq.n	45f4 <uart_task+0x1cc>
								{
									analog_gain_1 = temp;
    45ea:	4a42      	ldr	r2, [pc, #264]	; (46f4 <uart_task+0x2cc>)
    45ec:	7013      	strb	r3, [r2, #0]
									change_gain = true;
    45ee:	2201      	movs	r2, #1
    45f0:	4b42      	ldr	r3, [pc, #264]	; (46fc <uart_task+0x2d4>)
    45f2:	701a      	strb	r2, [r3, #0]
								}
								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    45f4:	220c      	movs	r2, #12
    45f6:	492e      	ldr	r1, [pc, #184]	; (46b0 <uart_task+0x288>)
    45f8:	4830      	ldr	r0, [pc, #192]	; (46bc <uart_task+0x294>)
    45fa:	4b31      	ldr	r3, [pc, #196]	; (46c0 <uart_task+0x298>)
    45fc:	4798      	blx	r3
								delay_ms(25);
    45fe:	2019      	movs	r0, #25
    4600:	4b30      	ldr	r3, [pc, #192]	; (46c4 <uart_task+0x29c>)
    4602:	4798      	blx	r3
    4604:	e030      	b.n	4668 <uart_task+0x240>
							}
							else if (pkt_temp_ptr->sub_cmd == sb_cmd_array[save_param])
    4606:	4a2c      	ldr	r2, [pc, #176]	; (46b8 <uart_task+0x290>)
    4608:	7a12      	ldrb	r2, [r2, #8]
    460a:	429a      	cmp	r2, r3
    460c:	d10a      	bne.n	4624 <uart_task+0x1fc>
							{
								save_configuration_param();
    460e:	4b3c      	ldr	r3, [pc, #240]	; (4700 <uart_task+0x2d8>)
    4610:	4798      	blx	r3
								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    4612:	220c      	movs	r2, #12
    4614:	4926      	ldr	r1, [pc, #152]	; (46b0 <uart_task+0x288>)
    4616:	4829      	ldr	r0, [pc, #164]	; (46bc <uart_task+0x294>)
    4618:	4b29      	ldr	r3, [pc, #164]	; (46c0 <uart_task+0x298>)
    461a:	4798      	blx	r3
								delay_ms(25);
    461c:	2019      	movs	r0, #25
    461e:	4b29      	ldr	r3, [pc, #164]	; (46c4 <uart_task+0x29c>)
    4620:	4798      	blx	r3
    4622:	e021      	b.n	4668 <uart_task+0x240>
// 							{
// 								pick_count_max = pkt_temp_ptr->payload[1] << 8 | (pkt_temp_ptr->payload[0]);
// 								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
// 								delay_ms(25);
// 							}
							else if(pkt_temp_ptr->sub_cmd == sb_cmd_array[set_analog_gain_2])
    4624:	4a24      	ldr	r2, [pc, #144]	; (46b8 <uart_task+0x290>)
    4626:	7ad2      	ldrb	r2, [r2, #11]
    4628:	429a      	cmp	r2, r3
    462a:	d11d      	bne.n	4668 <uart_task+0x240>
							{
								uint8_t temp = pkt_temp_ptr->payload[0];
    462c:	466b      	mov	r3, sp
    462e:	78d8      	ldrb	r0, [r3, #3]
								if(analog_gain_2 != temp)
    4630:	4b34      	ldr	r3, [pc, #208]	; (4704 <uart_task+0x2dc>)
    4632:	781b      	ldrb	r3, [r3, #0]
    4634:	4283      	cmp	r3, r0
    4636:	d00f      	beq.n	4658 <uart_task+0x230>
								{
									analog_gain_2 = temp;
    4638:	4b32      	ldr	r3, [pc, #200]	; (4704 <uart_task+0x2dc>)
    463a:	4698      	mov	r8, r3
    463c:	7018      	strb	r0, [r3, #0]
									MAX5435M_write_byte(MAX5435_REGISTER_VREG,trimmer_value(analog_gain_2) );
    463e:	4c32      	ldr	r4, [pc, #200]	; (4708 <uart_task+0x2e0>)
    4640:	47a0      	blx	r4
    4642:	0001      	movs	r1, r0
    4644:	2011      	movs	r0, #17
    4646:	4b31      	ldr	r3, [pc, #196]	; (470c <uart_task+0x2e4>)
    4648:	4798      	blx	r3
									MAX5435L_write_byte(MAX5435_REGISTER_VREG,trimmer_value(analog_gain_2) );
    464a:	4643      	mov	r3, r8
    464c:	7818      	ldrb	r0, [r3, #0]
    464e:	47a0      	blx	r4
    4650:	0001      	movs	r1, r0
    4652:	2011      	movs	r0, #17
    4654:	4b2e      	ldr	r3, [pc, #184]	; (4710 <uart_task+0x2e8>)
    4656:	4798      	blx	r3
								}
								usart_write_buffer_wait(&usart_instance,(uint8_t *)&pkt,sizeof(packet));
    4658:	220c      	movs	r2, #12
    465a:	4915      	ldr	r1, [pc, #84]	; (46b0 <uart_task+0x288>)
    465c:	4817      	ldr	r0, [pc, #92]	; (46bc <uart_task+0x294>)
    465e:	4b18      	ldr	r3, [pc, #96]	; (46c0 <uart_task+0x298>)
    4660:	4798      	blx	r3
								delay_ms(25);
    4662:	2019      	movs	r0, #25
    4664:	4b17      	ldr	r3, [pc, #92]	; (46c4 <uart_task+0x29c>)
    4666:	4798      	blx	r3
							default:
							break;
						}
					}
					
					memset(buffer_temp,0,sizeof(packet));
    4668:	220c      	movs	r2, #12
    466a:	2100      	movs	r1, #0
    466c:	4668      	mov	r0, sp
    466e:	4b0c      	ldr	r3, [pc, #48]	; (46a0 <uart_task+0x278>)
    4670:	4798      	blx	r3
					buffer_temp_index = 0;
    4672:	2400      	movs	r4, #0
						
				break;
    4674:	e004      	b.n	4680 <uart_task+0x258>
				default:
					if(buffer_temp_index < sizeof(buffer_temp))
    4676:	2c0b      	cmp	r4, #11
    4678:	d802      	bhi.n	4680 <uart_task+0x258>
					{
						buffer_temp[buffer_temp_index] = r;
    467a:	466a      	mov	r2, sp
    467c:	5513      	strb	r3, [r2, r4]
						buffer_temp_index++;
    467e:	3401      	adds	r4, #1
					}
				break;
			}
			

			*current_char_ptr = '\0';
    4680:	2200      	movs	r2, #0
    4682:	230f      	movs	r3, #15
    4684:	446b      	add	r3, sp
    4686:	701a      	strb	r2, [r3, #0]
	 memset(buffer_temp,0,sizeof(packet));
	
	for (;;) {

		// Any characters queued? Handle them!
		while (xQueueReceive(terminal_in_queue, current_char_ptr, 0)) 
    4688:	2300      	movs	r3, #0
    468a:	2200      	movs	r2, #0
    468c:	210f      	movs	r1, #15
    468e:	4469      	add	r1, sp
    4690:	6830      	ldr	r0, [r6, #0]
    4692:	47a8      	blx	r5
    4694:	2800      	cmp	r0, #0
    4696:	d000      	beq.n	469a <uart_task+0x272>
    4698:	e6d4      	b.n	4444 <uart_task+0x1c>
			

			*current_char_ptr = '\0';
		}

		vTaskDelay(UART_TASK_DELAY);
    469a:	300a      	adds	r0, #10
    469c:	47b8      	blx	r7
	}
    469e:	e7f3      	b.n	4688 <uart_task+0x260>
    46a0:	000063ef 	.word	0x000063ef
    46a4:	20003d08 	.word	0x20003d08
    46a8:	0000171d 	.word	0x0000171d
    46ac:	00001e11 	.word	0x00001e11
    46b0:	20003ec0 	.word	0x20003ec0
    46b4:	000063dd 	.word	0x000063dd
    46b8:	2000003c 	.word	0x2000003c
    46bc:	20003e4c 	.word	0x20003e4c
    46c0:	00002a05 	.word	0x00002a05
    46c4:	00002d55 	.word	0x00002d55
    46c8:	20003e80 	.word	0x20003e80
    46cc:	20000036 	.word	0x20000036
    46d0:	20003fd8 	.word	0x20003fd8
    46d4:	00003329 	.word	0x00003329
    46d8:	20003cf2 	.word	0x20003cf2
    46dc:	20003cf4 	.word	0x20003cf4
    46e0:	20003d0c 	.word	0x20003d0c
    46e4:	20003ce8 	.word	0x20003ce8
    46e8:	20003cfd 	.word	0x20003cfd
    46ec:	20003cf0 	.word	0x20003cf0
    46f0:	20000048 	.word	0x20000048
    46f4:	20000038 	.word	0x20000038
    46f8:	20003d04 	.word	0x20003d04
    46fc:	20003cfc 	.word	0x20003cfc
    4700:	000043f9 	.word	0x000043f9
    4704:	20000039 	.word	0x20000039
    4708:	000001f1 	.word	0x000001f1
    470c:	000001f9 	.word	0x000001f9
    4710:	00000231 	.word	0x00000231

00004714 <__aeabi_uidiv>:
    4714:	2200      	movs	r2, #0
    4716:	0843      	lsrs	r3, r0, #1
    4718:	428b      	cmp	r3, r1
    471a:	d374      	bcc.n	4806 <__aeabi_uidiv+0xf2>
    471c:	0903      	lsrs	r3, r0, #4
    471e:	428b      	cmp	r3, r1
    4720:	d35f      	bcc.n	47e2 <__aeabi_uidiv+0xce>
    4722:	0a03      	lsrs	r3, r0, #8
    4724:	428b      	cmp	r3, r1
    4726:	d344      	bcc.n	47b2 <__aeabi_uidiv+0x9e>
    4728:	0b03      	lsrs	r3, r0, #12
    472a:	428b      	cmp	r3, r1
    472c:	d328      	bcc.n	4780 <__aeabi_uidiv+0x6c>
    472e:	0c03      	lsrs	r3, r0, #16
    4730:	428b      	cmp	r3, r1
    4732:	d30d      	bcc.n	4750 <__aeabi_uidiv+0x3c>
    4734:	22ff      	movs	r2, #255	; 0xff
    4736:	0209      	lsls	r1, r1, #8
    4738:	ba12      	rev	r2, r2
    473a:	0c03      	lsrs	r3, r0, #16
    473c:	428b      	cmp	r3, r1
    473e:	d302      	bcc.n	4746 <__aeabi_uidiv+0x32>
    4740:	1212      	asrs	r2, r2, #8
    4742:	0209      	lsls	r1, r1, #8
    4744:	d065      	beq.n	4812 <__aeabi_uidiv+0xfe>
    4746:	0b03      	lsrs	r3, r0, #12
    4748:	428b      	cmp	r3, r1
    474a:	d319      	bcc.n	4780 <__aeabi_uidiv+0x6c>
    474c:	e000      	b.n	4750 <__aeabi_uidiv+0x3c>
    474e:	0a09      	lsrs	r1, r1, #8
    4750:	0bc3      	lsrs	r3, r0, #15
    4752:	428b      	cmp	r3, r1
    4754:	d301      	bcc.n	475a <__aeabi_uidiv+0x46>
    4756:	03cb      	lsls	r3, r1, #15
    4758:	1ac0      	subs	r0, r0, r3
    475a:	4152      	adcs	r2, r2
    475c:	0b83      	lsrs	r3, r0, #14
    475e:	428b      	cmp	r3, r1
    4760:	d301      	bcc.n	4766 <__aeabi_uidiv+0x52>
    4762:	038b      	lsls	r3, r1, #14
    4764:	1ac0      	subs	r0, r0, r3
    4766:	4152      	adcs	r2, r2
    4768:	0b43      	lsrs	r3, r0, #13
    476a:	428b      	cmp	r3, r1
    476c:	d301      	bcc.n	4772 <__aeabi_uidiv+0x5e>
    476e:	034b      	lsls	r3, r1, #13
    4770:	1ac0      	subs	r0, r0, r3
    4772:	4152      	adcs	r2, r2
    4774:	0b03      	lsrs	r3, r0, #12
    4776:	428b      	cmp	r3, r1
    4778:	d301      	bcc.n	477e <__aeabi_uidiv+0x6a>
    477a:	030b      	lsls	r3, r1, #12
    477c:	1ac0      	subs	r0, r0, r3
    477e:	4152      	adcs	r2, r2
    4780:	0ac3      	lsrs	r3, r0, #11
    4782:	428b      	cmp	r3, r1
    4784:	d301      	bcc.n	478a <__aeabi_uidiv+0x76>
    4786:	02cb      	lsls	r3, r1, #11
    4788:	1ac0      	subs	r0, r0, r3
    478a:	4152      	adcs	r2, r2
    478c:	0a83      	lsrs	r3, r0, #10
    478e:	428b      	cmp	r3, r1
    4790:	d301      	bcc.n	4796 <__aeabi_uidiv+0x82>
    4792:	028b      	lsls	r3, r1, #10
    4794:	1ac0      	subs	r0, r0, r3
    4796:	4152      	adcs	r2, r2
    4798:	0a43      	lsrs	r3, r0, #9
    479a:	428b      	cmp	r3, r1
    479c:	d301      	bcc.n	47a2 <__aeabi_uidiv+0x8e>
    479e:	024b      	lsls	r3, r1, #9
    47a0:	1ac0      	subs	r0, r0, r3
    47a2:	4152      	adcs	r2, r2
    47a4:	0a03      	lsrs	r3, r0, #8
    47a6:	428b      	cmp	r3, r1
    47a8:	d301      	bcc.n	47ae <__aeabi_uidiv+0x9a>
    47aa:	020b      	lsls	r3, r1, #8
    47ac:	1ac0      	subs	r0, r0, r3
    47ae:	4152      	adcs	r2, r2
    47b0:	d2cd      	bcs.n	474e <__aeabi_uidiv+0x3a>
    47b2:	09c3      	lsrs	r3, r0, #7
    47b4:	428b      	cmp	r3, r1
    47b6:	d301      	bcc.n	47bc <__aeabi_uidiv+0xa8>
    47b8:	01cb      	lsls	r3, r1, #7
    47ba:	1ac0      	subs	r0, r0, r3
    47bc:	4152      	adcs	r2, r2
    47be:	0983      	lsrs	r3, r0, #6
    47c0:	428b      	cmp	r3, r1
    47c2:	d301      	bcc.n	47c8 <__aeabi_uidiv+0xb4>
    47c4:	018b      	lsls	r3, r1, #6
    47c6:	1ac0      	subs	r0, r0, r3
    47c8:	4152      	adcs	r2, r2
    47ca:	0943      	lsrs	r3, r0, #5
    47cc:	428b      	cmp	r3, r1
    47ce:	d301      	bcc.n	47d4 <__aeabi_uidiv+0xc0>
    47d0:	014b      	lsls	r3, r1, #5
    47d2:	1ac0      	subs	r0, r0, r3
    47d4:	4152      	adcs	r2, r2
    47d6:	0903      	lsrs	r3, r0, #4
    47d8:	428b      	cmp	r3, r1
    47da:	d301      	bcc.n	47e0 <__aeabi_uidiv+0xcc>
    47dc:	010b      	lsls	r3, r1, #4
    47de:	1ac0      	subs	r0, r0, r3
    47e0:	4152      	adcs	r2, r2
    47e2:	08c3      	lsrs	r3, r0, #3
    47e4:	428b      	cmp	r3, r1
    47e6:	d301      	bcc.n	47ec <__aeabi_uidiv+0xd8>
    47e8:	00cb      	lsls	r3, r1, #3
    47ea:	1ac0      	subs	r0, r0, r3
    47ec:	4152      	adcs	r2, r2
    47ee:	0883      	lsrs	r3, r0, #2
    47f0:	428b      	cmp	r3, r1
    47f2:	d301      	bcc.n	47f8 <__aeabi_uidiv+0xe4>
    47f4:	008b      	lsls	r3, r1, #2
    47f6:	1ac0      	subs	r0, r0, r3
    47f8:	4152      	adcs	r2, r2
    47fa:	0843      	lsrs	r3, r0, #1
    47fc:	428b      	cmp	r3, r1
    47fe:	d301      	bcc.n	4804 <__aeabi_uidiv+0xf0>
    4800:	004b      	lsls	r3, r1, #1
    4802:	1ac0      	subs	r0, r0, r3
    4804:	4152      	adcs	r2, r2
    4806:	1a41      	subs	r1, r0, r1
    4808:	d200      	bcs.n	480c <__aeabi_uidiv+0xf8>
    480a:	4601      	mov	r1, r0
    480c:	4152      	adcs	r2, r2
    480e:	4610      	mov	r0, r2
    4810:	4770      	bx	lr
    4812:	e7ff      	b.n	4814 <__aeabi_uidiv+0x100>
    4814:	b501      	push	{r0, lr}
    4816:	2000      	movs	r0, #0
    4818:	f000 f8f0 	bl	49fc <__aeabi_idiv0>
    481c:	bd02      	pop	{r1, pc}
    481e:	46c0      	nop			; (mov r8, r8)

00004820 <__aeabi_uidivmod>:
    4820:	2900      	cmp	r1, #0
    4822:	d0f7      	beq.n	4814 <__aeabi_uidiv+0x100>
    4824:	e776      	b.n	4714 <__aeabi_uidiv>
    4826:	4770      	bx	lr

00004828 <__aeabi_idiv>:
    4828:	4603      	mov	r3, r0
    482a:	430b      	orrs	r3, r1
    482c:	d47f      	bmi.n	492e <__aeabi_idiv+0x106>
    482e:	2200      	movs	r2, #0
    4830:	0843      	lsrs	r3, r0, #1
    4832:	428b      	cmp	r3, r1
    4834:	d374      	bcc.n	4920 <__aeabi_idiv+0xf8>
    4836:	0903      	lsrs	r3, r0, #4
    4838:	428b      	cmp	r3, r1
    483a:	d35f      	bcc.n	48fc <__aeabi_idiv+0xd4>
    483c:	0a03      	lsrs	r3, r0, #8
    483e:	428b      	cmp	r3, r1
    4840:	d344      	bcc.n	48cc <__aeabi_idiv+0xa4>
    4842:	0b03      	lsrs	r3, r0, #12
    4844:	428b      	cmp	r3, r1
    4846:	d328      	bcc.n	489a <__aeabi_idiv+0x72>
    4848:	0c03      	lsrs	r3, r0, #16
    484a:	428b      	cmp	r3, r1
    484c:	d30d      	bcc.n	486a <__aeabi_idiv+0x42>
    484e:	22ff      	movs	r2, #255	; 0xff
    4850:	0209      	lsls	r1, r1, #8
    4852:	ba12      	rev	r2, r2
    4854:	0c03      	lsrs	r3, r0, #16
    4856:	428b      	cmp	r3, r1
    4858:	d302      	bcc.n	4860 <__aeabi_idiv+0x38>
    485a:	1212      	asrs	r2, r2, #8
    485c:	0209      	lsls	r1, r1, #8
    485e:	d065      	beq.n	492c <__aeabi_idiv+0x104>
    4860:	0b03      	lsrs	r3, r0, #12
    4862:	428b      	cmp	r3, r1
    4864:	d319      	bcc.n	489a <__aeabi_idiv+0x72>
    4866:	e000      	b.n	486a <__aeabi_idiv+0x42>
    4868:	0a09      	lsrs	r1, r1, #8
    486a:	0bc3      	lsrs	r3, r0, #15
    486c:	428b      	cmp	r3, r1
    486e:	d301      	bcc.n	4874 <__aeabi_idiv+0x4c>
    4870:	03cb      	lsls	r3, r1, #15
    4872:	1ac0      	subs	r0, r0, r3
    4874:	4152      	adcs	r2, r2
    4876:	0b83      	lsrs	r3, r0, #14
    4878:	428b      	cmp	r3, r1
    487a:	d301      	bcc.n	4880 <__aeabi_idiv+0x58>
    487c:	038b      	lsls	r3, r1, #14
    487e:	1ac0      	subs	r0, r0, r3
    4880:	4152      	adcs	r2, r2
    4882:	0b43      	lsrs	r3, r0, #13
    4884:	428b      	cmp	r3, r1
    4886:	d301      	bcc.n	488c <__aeabi_idiv+0x64>
    4888:	034b      	lsls	r3, r1, #13
    488a:	1ac0      	subs	r0, r0, r3
    488c:	4152      	adcs	r2, r2
    488e:	0b03      	lsrs	r3, r0, #12
    4890:	428b      	cmp	r3, r1
    4892:	d301      	bcc.n	4898 <__aeabi_idiv+0x70>
    4894:	030b      	lsls	r3, r1, #12
    4896:	1ac0      	subs	r0, r0, r3
    4898:	4152      	adcs	r2, r2
    489a:	0ac3      	lsrs	r3, r0, #11
    489c:	428b      	cmp	r3, r1
    489e:	d301      	bcc.n	48a4 <__aeabi_idiv+0x7c>
    48a0:	02cb      	lsls	r3, r1, #11
    48a2:	1ac0      	subs	r0, r0, r3
    48a4:	4152      	adcs	r2, r2
    48a6:	0a83      	lsrs	r3, r0, #10
    48a8:	428b      	cmp	r3, r1
    48aa:	d301      	bcc.n	48b0 <__aeabi_idiv+0x88>
    48ac:	028b      	lsls	r3, r1, #10
    48ae:	1ac0      	subs	r0, r0, r3
    48b0:	4152      	adcs	r2, r2
    48b2:	0a43      	lsrs	r3, r0, #9
    48b4:	428b      	cmp	r3, r1
    48b6:	d301      	bcc.n	48bc <__aeabi_idiv+0x94>
    48b8:	024b      	lsls	r3, r1, #9
    48ba:	1ac0      	subs	r0, r0, r3
    48bc:	4152      	adcs	r2, r2
    48be:	0a03      	lsrs	r3, r0, #8
    48c0:	428b      	cmp	r3, r1
    48c2:	d301      	bcc.n	48c8 <__aeabi_idiv+0xa0>
    48c4:	020b      	lsls	r3, r1, #8
    48c6:	1ac0      	subs	r0, r0, r3
    48c8:	4152      	adcs	r2, r2
    48ca:	d2cd      	bcs.n	4868 <__aeabi_idiv+0x40>
    48cc:	09c3      	lsrs	r3, r0, #7
    48ce:	428b      	cmp	r3, r1
    48d0:	d301      	bcc.n	48d6 <__aeabi_idiv+0xae>
    48d2:	01cb      	lsls	r3, r1, #7
    48d4:	1ac0      	subs	r0, r0, r3
    48d6:	4152      	adcs	r2, r2
    48d8:	0983      	lsrs	r3, r0, #6
    48da:	428b      	cmp	r3, r1
    48dc:	d301      	bcc.n	48e2 <__aeabi_idiv+0xba>
    48de:	018b      	lsls	r3, r1, #6
    48e0:	1ac0      	subs	r0, r0, r3
    48e2:	4152      	adcs	r2, r2
    48e4:	0943      	lsrs	r3, r0, #5
    48e6:	428b      	cmp	r3, r1
    48e8:	d301      	bcc.n	48ee <__aeabi_idiv+0xc6>
    48ea:	014b      	lsls	r3, r1, #5
    48ec:	1ac0      	subs	r0, r0, r3
    48ee:	4152      	adcs	r2, r2
    48f0:	0903      	lsrs	r3, r0, #4
    48f2:	428b      	cmp	r3, r1
    48f4:	d301      	bcc.n	48fa <__aeabi_idiv+0xd2>
    48f6:	010b      	lsls	r3, r1, #4
    48f8:	1ac0      	subs	r0, r0, r3
    48fa:	4152      	adcs	r2, r2
    48fc:	08c3      	lsrs	r3, r0, #3
    48fe:	428b      	cmp	r3, r1
    4900:	d301      	bcc.n	4906 <__aeabi_idiv+0xde>
    4902:	00cb      	lsls	r3, r1, #3
    4904:	1ac0      	subs	r0, r0, r3
    4906:	4152      	adcs	r2, r2
    4908:	0883      	lsrs	r3, r0, #2
    490a:	428b      	cmp	r3, r1
    490c:	d301      	bcc.n	4912 <__aeabi_idiv+0xea>
    490e:	008b      	lsls	r3, r1, #2
    4910:	1ac0      	subs	r0, r0, r3
    4912:	4152      	adcs	r2, r2
    4914:	0843      	lsrs	r3, r0, #1
    4916:	428b      	cmp	r3, r1
    4918:	d301      	bcc.n	491e <__aeabi_idiv+0xf6>
    491a:	004b      	lsls	r3, r1, #1
    491c:	1ac0      	subs	r0, r0, r3
    491e:	4152      	adcs	r2, r2
    4920:	1a41      	subs	r1, r0, r1
    4922:	d200      	bcs.n	4926 <__aeabi_idiv+0xfe>
    4924:	4601      	mov	r1, r0
    4926:	4152      	adcs	r2, r2
    4928:	4610      	mov	r0, r2
    492a:	4770      	bx	lr
    492c:	e05d      	b.n	49ea <__aeabi_idiv+0x1c2>
    492e:	0fca      	lsrs	r2, r1, #31
    4930:	d000      	beq.n	4934 <__aeabi_idiv+0x10c>
    4932:	4249      	negs	r1, r1
    4934:	1003      	asrs	r3, r0, #32
    4936:	d300      	bcc.n	493a <__aeabi_idiv+0x112>
    4938:	4240      	negs	r0, r0
    493a:	4053      	eors	r3, r2
    493c:	2200      	movs	r2, #0
    493e:	469c      	mov	ip, r3
    4940:	0903      	lsrs	r3, r0, #4
    4942:	428b      	cmp	r3, r1
    4944:	d32d      	bcc.n	49a2 <__aeabi_idiv+0x17a>
    4946:	0a03      	lsrs	r3, r0, #8
    4948:	428b      	cmp	r3, r1
    494a:	d312      	bcc.n	4972 <__aeabi_idiv+0x14a>
    494c:	22fc      	movs	r2, #252	; 0xfc
    494e:	0189      	lsls	r1, r1, #6
    4950:	ba12      	rev	r2, r2
    4952:	0a03      	lsrs	r3, r0, #8
    4954:	428b      	cmp	r3, r1
    4956:	d30c      	bcc.n	4972 <__aeabi_idiv+0x14a>
    4958:	0189      	lsls	r1, r1, #6
    495a:	1192      	asrs	r2, r2, #6
    495c:	428b      	cmp	r3, r1
    495e:	d308      	bcc.n	4972 <__aeabi_idiv+0x14a>
    4960:	0189      	lsls	r1, r1, #6
    4962:	1192      	asrs	r2, r2, #6
    4964:	428b      	cmp	r3, r1
    4966:	d304      	bcc.n	4972 <__aeabi_idiv+0x14a>
    4968:	0189      	lsls	r1, r1, #6
    496a:	d03a      	beq.n	49e2 <__aeabi_idiv+0x1ba>
    496c:	1192      	asrs	r2, r2, #6
    496e:	e000      	b.n	4972 <__aeabi_idiv+0x14a>
    4970:	0989      	lsrs	r1, r1, #6
    4972:	09c3      	lsrs	r3, r0, #7
    4974:	428b      	cmp	r3, r1
    4976:	d301      	bcc.n	497c <__aeabi_idiv+0x154>
    4978:	01cb      	lsls	r3, r1, #7
    497a:	1ac0      	subs	r0, r0, r3
    497c:	4152      	adcs	r2, r2
    497e:	0983      	lsrs	r3, r0, #6
    4980:	428b      	cmp	r3, r1
    4982:	d301      	bcc.n	4988 <__aeabi_idiv+0x160>
    4984:	018b      	lsls	r3, r1, #6
    4986:	1ac0      	subs	r0, r0, r3
    4988:	4152      	adcs	r2, r2
    498a:	0943      	lsrs	r3, r0, #5
    498c:	428b      	cmp	r3, r1
    498e:	d301      	bcc.n	4994 <__aeabi_idiv+0x16c>
    4990:	014b      	lsls	r3, r1, #5
    4992:	1ac0      	subs	r0, r0, r3
    4994:	4152      	adcs	r2, r2
    4996:	0903      	lsrs	r3, r0, #4
    4998:	428b      	cmp	r3, r1
    499a:	d301      	bcc.n	49a0 <__aeabi_idiv+0x178>
    499c:	010b      	lsls	r3, r1, #4
    499e:	1ac0      	subs	r0, r0, r3
    49a0:	4152      	adcs	r2, r2
    49a2:	08c3      	lsrs	r3, r0, #3
    49a4:	428b      	cmp	r3, r1
    49a6:	d301      	bcc.n	49ac <__aeabi_idiv+0x184>
    49a8:	00cb      	lsls	r3, r1, #3
    49aa:	1ac0      	subs	r0, r0, r3
    49ac:	4152      	adcs	r2, r2
    49ae:	0883      	lsrs	r3, r0, #2
    49b0:	428b      	cmp	r3, r1
    49b2:	d301      	bcc.n	49b8 <__aeabi_idiv+0x190>
    49b4:	008b      	lsls	r3, r1, #2
    49b6:	1ac0      	subs	r0, r0, r3
    49b8:	4152      	adcs	r2, r2
    49ba:	d2d9      	bcs.n	4970 <__aeabi_idiv+0x148>
    49bc:	0843      	lsrs	r3, r0, #1
    49be:	428b      	cmp	r3, r1
    49c0:	d301      	bcc.n	49c6 <__aeabi_idiv+0x19e>
    49c2:	004b      	lsls	r3, r1, #1
    49c4:	1ac0      	subs	r0, r0, r3
    49c6:	4152      	adcs	r2, r2
    49c8:	1a41      	subs	r1, r0, r1
    49ca:	d200      	bcs.n	49ce <__aeabi_idiv+0x1a6>
    49cc:	4601      	mov	r1, r0
    49ce:	4663      	mov	r3, ip
    49d0:	4152      	adcs	r2, r2
    49d2:	105b      	asrs	r3, r3, #1
    49d4:	4610      	mov	r0, r2
    49d6:	d301      	bcc.n	49dc <__aeabi_idiv+0x1b4>
    49d8:	4240      	negs	r0, r0
    49da:	2b00      	cmp	r3, #0
    49dc:	d500      	bpl.n	49e0 <__aeabi_idiv+0x1b8>
    49de:	4249      	negs	r1, r1
    49e0:	4770      	bx	lr
    49e2:	4663      	mov	r3, ip
    49e4:	105b      	asrs	r3, r3, #1
    49e6:	d300      	bcc.n	49ea <__aeabi_idiv+0x1c2>
    49e8:	4240      	negs	r0, r0
    49ea:	b501      	push	{r0, lr}
    49ec:	2000      	movs	r0, #0
    49ee:	f000 f805 	bl	49fc <__aeabi_idiv0>
    49f2:	bd02      	pop	{r1, pc}

000049f4 <__aeabi_idivmod>:
    49f4:	2900      	cmp	r1, #0
    49f6:	d0f8      	beq.n	49ea <__aeabi_idiv+0x1c2>
    49f8:	e716      	b.n	4828 <__aeabi_idiv>
    49fa:	4770      	bx	lr

000049fc <__aeabi_idiv0>:
    49fc:	4770      	bx	lr
    49fe:	46c0      	nop			; (mov r8, r8)

00004a00 <__aeabi_lmul>:
    4a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a02:	464f      	mov	r7, r9
    4a04:	4646      	mov	r6, r8
    4a06:	b4c0      	push	{r6, r7}
    4a08:	0416      	lsls	r6, r2, #16
    4a0a:	0c36      	lsrs	r6, r6, #16
    4a0c:	4699      	mov	r9, r3
    4a0e:	0033      	movs	r3, r6
    4a10:	0405      	lsls	r5, r0, #16
    4a12:	0c2c      	lsrs	r4, r5, #16
    4a14:	0c07      	lsrs	r7, r0, #16
    4a16:	0c15      	lsrs	r5, r2, #16
    4a18:	4363      	muls	r3, r4
    4a1a:	437e      	muls	r6, r7
    4a1c:	436f      	muls	r7, r5
    4a1e:	4365      	muls	r5, r4
    4a20:	0c1c      	lsrs	r4, r3, #16
    4a22:	19ad      	adds	r5, r5, r6
    4a24:	1964      	adds	r4, r4, r5
    4a26:	469c      	mov	ip, r3
    4a28:	42a6      	cmp	r6, r4
    4a2a:	d903      	bls.n	4a34 <__aeabi_lmul+0x34>
    4a2c:	2380      	movs	r3, #128	; 0x80
    4a2e:	025b      	lsls	r3, r3, #9
    4a30:	4698      	mov	r8, r3
    4a32:	4447      	add	r7, r8
    4a34:	4663      	mov	r3, ip
    4a36:	0c25      	lsrs	r5, r4, #16
    4a38:	19ef      	adds	r7, r5, r7
    4a3a:	041d      	lsls	r5, r3, #16
    4a3c:	464b      	mov	r3, r9
    4a3e:	434a      	muls	r2, r1
    4a40:	4343      	muls	r3, r0
    4a42:	0c2d      	lsrs	r5, r5, #16
    4a44:	0424      	lsls	r4, r4, #16
    4a46:	1964      	adds	r4, r4, r5
    4a48:	1899      	adds	r1, r3, r2
    4a4a:	19c9      	adds	r1, r1, r7
    4a4c:	0020      	movs	r0, r4
    4a4e:	bc0c      	pop	{r2, r3}
    4a50:	4690      	mov	r8, r2
    4a52:	4699      	mov	r9, r3
    4a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a56:	46c0      	nop			; (mov r8, r8)

00004a58 <__aeabi_dadd>:
    4a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a5a:	4656      	mov	r6, sl
    4a5c:	465f      	mov	r7, fp
    4a5e:	464d      	mov	r5, r9
    4a60:	4644      	mov	r4, r8
    4a62:	b4f0      	push	{r4, r5, r6, r7}
    4a64:	000f      	movs	r7, r1
    4a66:	0ffd      	lsrs	r5, r7, #31
    4a68:	46aa      	mov	sl, r5
    4a6a:	0309      	lsls	r1, r1, #12
    4a6c:	007c      	lsls	r4, r7, #1
    4a6e:	002e      	movs	r6, r5
    4a70:	005f      	lsls	r7, r3, #1
    4a72:	0f45      	lsrs	r5, r0, #29
    4a74:	0a49      	lsrs	r1, r1, #9
    4a76:	0d7f      	lsrs	r7, r7, #21
    4a78:	4329      	orrs	r1, r5
    4a7a:	00c5      	lsls	r5, r0, #3
    4a7c:	0318      	lsls	r0, r3, #12
    4a7e:	46bc      	mov	ip, r7
    4a80:	0a40      	lsrs	r0, r0, #9
    4a82:	0f57      	lsrs	r7, r2, #29
    4a84:	0d64      	lsrs	r4, r4, #21
    4a86:	0fdb      	lsrs	r3, r3, #31
    4a88:	4338      	orrs	r0, r7
    4a8a:	00d2      	lsls	r2, r2, #3
    4a8c:	459a      	cmp	sl, r3
    4a8e:	d100      	bne.n	4a92 <__aeabi_dadd+0x3a>
    4a90:	e0aa      	b.n	4be8 <__aeabi_dadd+0x190>
    4a92:	4666      	mov	r6, ip
    4a94:	1ba6      	subs	r6, r4, r6
    4a96:	2e00      	cmp	r6, #0
    4a98:	dc00      	bgt.n	4a9c <__aeabi_dadd+0x44>
    4a9a:	e0ff      	b.n	4c9c <__aeabi_dadd+0x244>
    4a9c:	4663      	mov	r3, ip
    4a9e:	2b00      	cmp	r3, #0
    4aa0:	d139      	bne.n	4b16 <__aeabi_dadd+0xbe>
    4aa2:	0003      	movs	r3, r0
    4aa4:	4313      	orrs	r3, r2
    4aa6:	d000      	beq.n	4aaa <__aeabi_dadd+0x52>
    4aa8:	e0d9      	b.n	4c5e <__aeabi_dadd+0x206>
    4aaa:	076b      	lsls	r3, r5, #29
    4aac:	d009      	beq.n	4ac2 <__aeabi_dadd+0x6a>
    4aae:	230f      	movs	r3, #15
    4ab0:	402b      	ands	r3, r5
    4ab2:	2b04      	cmp	r3, #4
    4ab4:	d005      	beq.n	4ac2 <__aeabi_dadd+0x6a>
    4ab6:	1d2b      	adds	r3, r5, #4
    4ab8:	42ab      	cmp	r3, r5
    4aba:	41ad      	sbcs	r5, r5
    4abc:	426d      	negs	r5, r5
    4abe:	1949      	adds	r1, r1, r5
    4ac0:	001d      	movs	r5, r3
    4ac2:	020b      	lsls	r3, r1, #8
    4ac4:	d400      	bmi.n	4ac8 <__aeabi_dadd+0x70>
    4ac6:	e082      	b.n	4bce <__aeabi_dadd+0x176>
    4ac8:	4bca      	ldr	r3, [pc, #808]	; (4df4 <__aeabi_dadd+0x39c>)
    4aca:	3401      	adds	r4, #1
    4acc:	429c      	cmp	r4, r3
    4ace:	d100      	bne.n	4ad2 <__aeabi_dadd+0x7a>
    4ad0:	e0fe      	b.n	4cd0 <__aeabi_dadd+0x278>
    4ad2:	000a      	movs	r2, r1
    4ad4:	4656      	mov	r6, sl
    4ad6:	4bc8      	ldr	r3, [pc, #800]	; (4df8 <__aeabi_dadd+0x3a0>)
    4ad8:	08ed      	lsrs	r5, r5, #3
    4ada:	401a      	ands	r2, r3
    4adc:	0750      	lsls	r0, r2, #29
    4ade:	0564      	lsls	r4, r4, #21
    4ae0:	0252      	lsls	r2, r2, #9
    4ae2:	4305      	orrs	r5, r0
    4ae4:	0b12      	lsrs	r2, r2, #12
    4ae6:	0d64      	lsrs	r4, r4, #21
    4ae8:	2100      	movs	r1, #0
    4aea:	0312      	lsls	r2, r2, #12
    4aec:	0d0b      	lsrs	r3, r1, #20
    4aee:	051b      	lsls	r3, r3, #20
    4af0:	0564      	lsls	r4, r4, #21
    4af2:	0b12      	lsrs	r2, r2, #12
    4af4:	431a      	orrs	r2, r3
    4af6:	0863      	lsrs	r3, r4, #1
    4af8:	4cc0      	ldr	r4, [pc, #768]	; (4dfc <__aeabi_dadd+0x3a4>)
    4afa:	07f6      	lsls	r6, r6, #31
    4afc:	4014      	ands	r4, r2
    4afe:	431c      	orrs	r4, r3
    4b00:	0064      	lsls	r4, r4, #1
    4b02:	0864      	lsrs	r4, r4, #1
    4b04:	4334      	orrs	r4, r6
    4b06:	0028      	movs	r0, r5
    4b08:	0021      	movs	r1, r4
    4b0a:	bc3c      	pop	{r2, r3, r4, r5}
    4b0c:	4690      	mov	r8, r2
    4b0e:	4699      	mov	r9, r3
    4b10:	46a2      	mov	sl, r4
    4b12:	46ab      	mov	fp, r5
    4b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b16:	4bb7      	ldr	r3, [pc, #732]	; (4df4 <__aeabi_dadd+0x39c>)
    4b18:	429c      	cmp	r4, r3
    4b1a:	d0c6      	beq.n	4aaa <__aeabi_dadd+0x52>
    4b1c:	2380      	movs	r3, #128	; 0x80
    4b1e:	041b      	lsls	r3, r3, #16
    4b20:	4318      	orrs	r0, r3
    4b22:	2e38      	cmp	r6, #56	; 0x38
    4b24:	dd00      	ble.n	4b28 <__aeabi_dadd+0xd0>
    4b26:	e0eb      	b.n	4d00 <__aeabi_dadd+0x2a8>
    4b28:	2e1f      	cmp	r6, #31
    4b2a:	dd00      	ble.n	4b2e <__aeabi_dadd+0xd6>
    4b2c:	e11e      	b.n	4d6c <__aeabi_dadd+0x314>
    4b2e:	2320      	movs	r3, #32
    4b30:	1b9b      	subs	r3, r3, r6
    4b32:	469c      	mov	ip, r3
    4b34:	0003      	movs	r3, r0
    4b36:	4667      	mov	r7, ip
    4b38:	40bb      	lsls	r3, r7
    4b3a:	4698      	mov	r8, r3
    4b3c:	0013      	movs	r3, r2
    4b3e:	4647      	mov	r7, r8
    4b40:	40f3      	lsrs	r3, r6
    4b42:	433b      	orrs	r3, r7
    4b44:	4667      	mov	r7, ip
    4b46:	40ba      	lsls	r2, r7
    4b48:	1e57      	subs	r7, r2, #1
    4b4a:	41ba      	sbcs	r2, r7
    4b4c:	4313      	orrs	r3, r2
    4b4e:	0002      	movs	r2, r0
    4b50:	40f2      	lsrs	r2, r6
    4b52:	1aeb      	subs	r3, r5, r3
    4b54:	429d      	cmp	r5, r3
    4b56:	41b6      	sbcs	r6, r6
    4b58:	001d      	movs	r5, r3
    4b5a:	1a8a      	subs	r2, r1, r2
    4b5c:	4276      	negs	r6, r6
    4b5e:	1b91      	subs	r1, r2, r6
    4b60:	020b      	lsls	r3, r1, #8
    4b62:	d531      	bpl.n	4bc8 <__aeabi_dadd+0x170>
    4b64:	024a      	lsls	r2, r1, #9
    4b66:	0a56      	lsrs	r6, r2, #9
    4b68:	2e00      	cmp	r6, #0
    4b6a:	d100      	bne.n	4b6e <__aeabi_dadd+0x116>
    4b6c:	e0b4      	b.n	4cd8 <__aeabi_dadd+0x280>
    4b6e:	0030      	movs	r0, r6
    4b70:	f001 fbf0 	bl	6354 <__clzsi2>
    4b74:	0003      	movs	r3, r0
    4b76:	3b08      	subs	r3, #8
    4b78:	2b1f      	cmp	r3, #31
    4b7a:	dd00      	ble.n	4b7e <__aeabi_dadd+0x126>
    4b7c:	e0b5      	b.n	4cea <__aeabi_dadd+0x292>
    4b7e:	2220      	movs	r2, #32
    4b80:	0029      	movs	r1, r5
    4b82:	1ad2      	subs	r2, r2, r3
    4b84:	40d1      	lsrs	r1, r2
    4b86:	409e      	lsls	r6, r3
    4b88:	000a      	movs	r2, r1
    4b8a:	409d      	lsls	r5, r3
    4b8c:	4332      	orrs	r2, r6
    4b8e:	429c      	cmp	r4, r3
    4b90:	dd00      	ble.n	4b94 <__aeabi_dadd+0x13c>
    4b92:	e0b1      	b.n	4cf8 <__aeabi_dadd+0x2a0>
    4b94:	1b1c      	subs	r4, r3, r4
    4b96:	1c63      	adds	r3, r4, #1
    4b98:	2b1f      	cmp	r3, #31
    4b9a:	dd00      	ble.n	4b9e <__aeabi_dadd+0x146>
    4b9c:	e0d5      	b.n	4d4a <__aeabi_dadd+0x2f2>
    4b9e:	2120      	movs	r1, #32
    4ba0:	0014      	movs	r4, r2
    4ba2:	0028      	movs	r0, r5
    4ba4:	1ac9      	subs	r1, r1, r3
    4ba6:	408c      	lsls	r4, r1
    4ba8:	40d8      	lsrs	r0, r3
    4baa:	408d      	lsls	r5, r1
    4bac:	4304      	orrs	r4, r0
    4bae:	40da      	lsrs	r2, r3
    4bb0:	1e68      	subs	r0, r5, #1
    4bb2:	4185      	sbcs	r5, r0
    4bb4:	0011      	movs	r1, r2
    4bb6:	4325      	orrs	r5, r4
    4bb8:	2400      	movs	r4, #0
    4bba:	e776      	b.n	4aaa <__aeabi_dadd+0x52>
    4bbc:	4641      	mov	r1, r8
    4bbe:	4331      	orrs	r1, r6
    4bc0:	d100      	bne.n	4bc4 <__aeabi_dadd+0x16c>
    4bc2:	e234      	b.n	502e <__aeabi_dadd+0x5d6>
    4bc4:	0031      	movs	r1, r6
    4bc6:	4645      	mov	r5, r8
    4bc8:	076b      	lsls	r3, r5, #29
    4bca:	d000      	beq.n	4bce <__aeabi_dadd+0x176>
    4bcc:	e76f      	b.n	4aae <__aeabi_dadd+0x56>
    4bce:	4656      	mov	r6, sl
    4bd0:	0748      	lsls	r0, r1, #29
    4bd2:	08ed      	lsrs	r5, r5, #3
    4bd4:	08c9      	lsrs	r1, r1, #3
    4bd6:	4305      	orrs	r5, r0
    4bd8:	4b86      	ldr	r3, [pc, #536]	; (4df4 <__aeabi_dadd+0x39c>)
    4bda:	429c      	cmp	r4, r3
    4bdc:	d035      	beq.n	4c4a <__aeabi_dadd+0x1f2>
    4bde:	030a      	lsls	r2, r1, #12
    4be0:	0564      	lsls	r4, r4, #21
    4be2:	0b12      	lsrs	r2, r2, #12
    4be4:	0d64      	lsrs	r4, r4, #21
    4be6:	e77f      	b.n	4ae8 <__aeabi_dadd+0x90>
    4be8:	4663      	mov	r3, ip
    4bea:	1ae3      	subs	r3, r4, r3
    4bec:	469b      	mov	fp, r3
    4bee:	2b00      	cmp	r3, #0
    4bf0:	dc00      	bgt.n	4bf4 <__aeabi_dadd+0x19c>
    4bf2:	e08b      	b.n	4d0c <__aeabi_dadd+0x2b4>
    4bf4:	4667      	mov	r7, ip
    4bf6:	2f00      	cmp	r7, #0
    4bf8:	d03c      	beq.n	4c74 <__aeabi_dadd+0x21c>
    4bfa:	4f7e      	ldr	r7, [pc, #504]	; (4df4 <__aeabi_dadd+0x39c>)
    4bfc:	42bc      	cmp	r4, r7
    4bfe:	d100      	bne.n	4c02 <__aeabi_dadd+0x1aa>
    4c00:	e753      	b.n	4aaa <__aeabi_dadd+0x52>
    4c02:	2780      	movs	r7, #128	; 0x80
    4c04:	043f      	lsls	r7, r7, #16
    4c06:	4338      	orrs	r0, r7
    4c08:	465b      	mov	r3, fp
    4c0a:	2b38      	cmp	r3, #56	; 0x38
    4c0c:	dc00      	bgt.n	4c10 <__aeabi_dadd+0x1b8>
    4c0e:	e0f7      	b.n	4e00 <__aeabi_dadd+0x3a8>
    4c10:	4302      	orrs	r2, r0
    4c12:	1e50      	subs	r0, r2, #1
    4c14:	4182      	sbcs	r2, r0
    4c16:	2000      	movs	r0, #0
    4c18:	b2d2      	uxtb	r2, r2
    4c1a:	1953      	adds	r3, r2, r5
    4c1c:	1842      	adds	r2, r0, r1
    4c1e:	42ab      	cmp	r3, r5
    4c20:	4189      	sbcs	r1, r1
    4c22:	001d      	movs	r5, r3
    4c24:	4249      	negs	r1, r1
    4c26:	1889      	adds	r1, r1, r2
    4c28:	020b      	lsls	r3, r1, #8
    4c2a:	d5cd      	bpl.n	4bc8 <__aeabi_dadd+0x170>
    4c2c:	4b71      	ldr	r3, [pc, #452]	; (4df4 <__aeabi_dadd+0x39c>)
    4c2e:	3401      	adds	r4, #1
    4c30:	429c      	cmp	r4, r3
    4c32:	d100      	bne.n	4c36 <__aeabi_dadd+0x1de>
    4c34:	e13d      	b.n	4eb2 <__aeabi_dadd+0x45a>
    4c36:	2001      	movs	r0, #1
    4c38:	4a6f      	ldr	r2, [pc, #444]	; (4df8 <__aeabi_dadd+0x3a0>)
    4c3a:	086b      	lsrs	r3, r5, #1
    4c3c:	400a      	ands	r2, r1
    4c3e:	4028      	ands	r0, r5
    4c40:	4318      	orrs	r0, r3
    4c42:	07d5      	lsls	r5, r2, #31
    4c44:	4305      	orrs	r5, r0
    4c46:	0851      	lsrs	r1, r2, #1
    4c48:	e72f      	b.n	4aaa <__aeabi_dadd+0x52>
    4c4a:	002b      	movs	r3, r5
    4c4c:	430b      	orrs	r3, r1
    4c4e:	d100      	bne.n	4c52 <__aeabi_dadd+0x1fa>
    4c50:	e1cb      	b.n	4fea <__aeabi_dadd+0x592>
    4c52:	2380      	movs	r3, #128	; 0x80
    4c54:	031b      	lsls	r3, r3, #12
    4c56:	430b      	orrs	r3, r1
    4c58:	031a      	lsls	r2, r3, #12
    4c5a:	0b12      	lsrs	r2, r2, #12
    4c5c:	e744      	b.n	4ae8 <__aeabi_dadd+0x90>
    4c5e:	3e01      	subs	r6, #1
    4c60:	2e00      	cmp	r6, #0
    4c62:	d16d      	bne.n	4d40 <__aeabi_dadd+0x2e8>
    4c64:	1aae      	subs	r6, r5, r2
    4c66:	42b5      	cmp	r5, r6
    4c68:	419b      	sbcs	r3, r3
    4c6a:	1a09      	subs	r1, r1, r0
    4c6c:	425b      	negs	r3, r3
    4c6e:	1ac9      	subs	r1, r1, r3
    4c70:	0035      	movs	r5, r6
    4c72:	e775      	b.n	4b60 <__aeabi_dadd+0x108>
    4c74:	0007      	movs	r7, r0
    4c76:	4317      	orrs	r7, r2
    4c78:	d100      	bne.n	4c7c <__aeabi_dadd+0x224>
    4c7a:	e716      	b.n	4aaa <__aeabi_dadd+0x52>
    4c7c:	2301      	movs	r3, #1
    4c7e:	425b      	negs	r3, r3
    4c80:	469c      	mov	ip, r3
    4c82:	44e3      	add	fp, ip
    4c84:	465b      	mov	r3, fp
    4c86:	2b00      	cmp	r3, #0
    4c88:	d000      	beq.n	4c8c <__aeabi_dadd+0x234>
    4c8a:	e0e0      	b.n	4e4e <__aeabi_dadd+0x3f6>
    4c8c:	18aa      	adds	r2, r5, r2
    4c8e:	42aa      	cmp	r2, r5
    4c90:	419b      	sbcs	r3, r3
    4c92:	1809      	adds	r1, r1, r0
    4c94:	425b      	negs	r3, r3
    4c96:	1859      	adds	r1, r3, r1
    4c98:	0015      	movs	r5, r2
    4c9a:	e7c5      	b.n	4c28 <__aeabi_dadd+0x1d0>
    4c9c:	2e00      	cmp	r6, #0
    4c9e:	d175      	bne.n	4d8c <__aeabi_dadd+0x334>
    4ca0:	1c66      	adds	r6, r4, #1
    4ca2:	0576      	lsls	r6, r6, #21
    4ca4:	0d76      	lsrs	r6, r6, #21
    4ca6:	2e01      	cmp	r6, #1
    4ca8:	dc00      	bgt.n	4cac <__aeabi_dadd+0x254>
    4caa:	e0f3      	b.n	4e94 <__aeabi_dadd+0x43c>
    4cac:	1aae      	subs	r6, r5, r2
    4cae:	46b0      	mov	r8, r6
    4cb0:	4545      	cmp	r5, r8
    4cb2:	41bf      	sbcs	r7, r7
    4cb4:	1a0e      	subs	r6, r1, r0
    4cb6:	427f      	negs	r7, r7
    4cb8:	1bf6      	subs	r6, r6, r7
    4cba:	0237      	lsls	r7, r6, #8
    4cbc:	d400      	bmi.n	4cc0 <__aeabi_dadd+0x268>
    4cbe:	e08f      	b.n	4de0 <__aeabi_dadd+0x388>
    4cc0:	1b55      	subs	r5, r2, r5
    4cc2:	42aa      	cmp	r2, r5
    4cc4:	41b6      	sbcs	r6, r6
    4cc6:	1a41      	subs	r1, r0, r1
    4cc8:	4276      	negs	r6, r6
    4cca:	1b8e      	subs	r6, r1, r6
    4ccc:	469a      	mov	sl, r3
    4cce:	e74b      	b.n	4b68 <__aeabi_dadd+0x110>
    4cd0:	4656      	mov	r6, sl
    4cd2:	2200      	movs	r2, #0
    4cd4:	2500      	movs	r5, #0
    4cd6:	e707      	b.n	4ae8 <__aeabi_dadd+0x90>
    4cd8:	0028      	movs	r0, r5
    4cda:	f001 fb3b 	bl	6354 <__clzsi2>
    4cde:	3020      	adds	r0, #32
    4ce0:	0003      	movs	r3, r0
    4ce2:	3b08      	subs	r3, #8
    4ce4:	2b1f      	cmp	r3, #31
    4ce6:	dc00      	bgt.n	4cea <__aeabi_dadd+0x292>
    4ce8:	e749      	b.n	4b7e <__aeabi_dadd+0x126>
    4cea:	002a      	movs	r2, r5
    4cec:	3828      	subs	r0, #40	; 0x28
    4cee:	4082      	lsls	r2, r0
    4cf0:	2500      	movs	r5, #0
    4cf2:	429c      	cmp	r4, r3
    4cf4:	dc00      	bgt.n	4cf8 <__aeabi_dadd+0x2a0>
    4cf6:	e74d      	b.n	4b94 <__aeabi_dadd+0x13c>
    4cf8:	493f      	ldr	r1, [pc, #252]	; (4df8 <__aeabi_dadd+0x3a0>)
    4cfa:	1ae4      	subs	r4, r4, r3
    4cfc:	4011      	ands	r1, r2
    4cfe:	e6d4      	b.n	4aaa <__aeabi_dadd+0x52>
    4d00:	4302      	orrs	r2, r0
    4d02:	1e50      	subs	r0, r2, #1
    4d04:	4182      	sbcs	r2, r0
    4d06:	b2d3      	uxtb	r3, r2
    4d08:	2200      	movs	r2, #0
    4d0a:	e722      	b.n	4b52 <__aeabi_dadd+0xfa>
    4d0c:	2b00      	cmp	r3, #0
    4d0e:	d000      	beq.n	4d12 <__aeabi_dadd+0x2ba>
    4d10:	e0f3      	b.n	4efa <__aeabi_dadd+0x4a2>
    4d12:	1c63      	adds	r3, r4, #1
    4d14:	469c      	mov	ip, r3
    4d16:	055b      	lsls	r3, r3, #21
    4d18:	0d5b      	lsrs	r3, r3, #21
    4d1a:	2b01      	cmp	r3, #1
    4d1c:	dc00      	bgt.n	4d20 <__aeabi_dadd+0x2c8>
    4d1e:	e09f      	b.n	4e60 <__aeabi_dadd+0x408>
    4d20:	4b34      	ldr	r3, [pc, #208]	; (4df4 <__aeabi_dadd+0x39c>)
    4d22:	459c      	cmp	ip, r3
    4d24:	d100      	bne.n	4d28 <__aeabi_dadd+0x2d0>
    4d26:	e0c3      	b.n	4eb0 <__aeabi_dadd+0x458>
    4d28:	18aa      	adds	r2, r5, r2
    4d2a:	1809      	adds	r1, r1, r0
    4d2c:	42aa      	cmp	r2, r5
    4d2e:	4180      	sbcs	r0, r0
    4d30:	4240      	negs	r0, r0
    4d32:	1841      	adds	r1, r0, r1
    4d34:	07cd      	lsls	r5, r1, #31
    4d36:	0852      	lsrs	r2, r2, #1
    4d38:	4315      	orrs	r5, r2
    4d3a:	0849      	lsrs	r1, r1, #1
    4d3c:	4664      	mov	r4, ip
    4d3e:	e6b4      	b.n	4aaa <__aeabi_dadd+0x52>
    4d40:	4b2c      	ldr	r3, [pc, #176]	; (4df4 <__aeabi_dadd+0x39c>)
    4d42:	429c      	cmp	r4, r3
    4d44:	d000      	beq.n	4d48 <__aeabi_dadd+0x2f0>
    4d46:	e6ec      	b.n	4b22 <__aeabi_dadd+0xca>
    4d48:	e6af      	b.n	4aaa <__aeabi_dadd+0x52>
    4d4a:	0011      	movs	r1, r2
    4d4c:	3c1f      	subs	r4, #31
    4d4e:	40e1      	lsrs	r1, r4
    4d50:	000c      	movs	r4, r1
    4d52:	2b20      	cmp	r3, #32
    4d54:	d100      	bne.n	4d58 <__aeabi_dadd+0x300>
    4d56:	e07f      	b.n	4e58 <__aeabi_dadd+0x400>
    4d58:	2140      	movs	r1, #64	; 0x40
    4d5a:	1acb      	subs	r3, r1, r3
    4d5c:	409a      	lsls	r2, r3
    4d5e:	4315      	orrs	r5, r2
    4d60:	1e6a      	subs	r2, r5, #1
    4d62:	4195      	sbcs	r5, r2
    4d64:	2100      	movs	r1, #0
    4d66:	4325      	orrs	r5, r4
    4d68:	2400      	movs	r4, #0
    4d6a:	e72d      	b.n	4bc8 <__aeabi_dadd+0x170>
    4d6c:	0033      	movs	r3, r6
    4d6e:	0007      	movs	r7, r0
    4d70:	3b20      	subs	r3, #32
    4d72:	40df      	lsrs	r7, r3
    4d74:	003b      	movs	r3, r7
    4d76:	2e20      	cmp	r6, #32
    4d78:	d070      	beq.n	4e5c <__aeabi_dadd+0x404>
    4d7a:	2740      	movs	r7, #64	; 0x40
    4d7c:	1bbe      	subs	r6, r7, r6
    4d7e:	40b0      	lsls	r0, r6
    4d80:	4302      	orrs	r2, r0
    4d82:	1e50      	subs	r0, r2, #1
    4d84:	4182      	sbcs	r2, r0
    4d86:	4313      	orrs	r3, r2
    4d88:	2200      	movs	r2, #0
    4d8a:	e6e2      	b.n	4b52 <__aeabi_dadd+0xfa>
    4d8c:	2c00      	cmp	r4, #0
    4d8e:	d04f      	beq.n	4e30 <__aeabi_dadd+0x3d8>
    4d90:	4c18      	ldr	r4, [pc, #96]	; (4df4 <__aeabi_dadd+0x39c>)
    4d92:	45a4      	cmp	ip, r4
    4d94:	d100      	bne.n	4d98 <__aeabi_dadd+0x340>
    4d96:	e0ab      	b.n	4ef0 <__aeabi_dadd+0x498>
    4d98:	2480      	movs	r4, #128	; 0x80
    4d9a:	0424      	lsls	r4, r4, #16
    4d9c:	4276      	negs	r6, r6
    4d9e:	4321      	orrs	r1, r4
    4da0:	2e38      	cmp	r6, #56	; 0x38
    4da2:	dd00      	ble.n	4da6 <__aeabi_dadd+0x34e>
    4da4:	e0df      	b.n	4f66 <__aeabi_dadd+0x50e>
    4da6:	2e1f      	cmp	r6, #31
    4da8:	dd00      	ble.n	4dac <__aeabi_dadd+0x354>
    4daa:	e143      	b.n	5034 <__aeabi_dadd+0x5dc>
    4dac:	2720      	movs	r7, #32
    4dae:	1bbc      	subs	r4, r7, r6
    4db0:	46a1      	mov	r9, r4
    4db2:	000c      	movs	r4, r1
    4db4:	464f      	mov	r7, r9
    4db6:	40bc      	lsls	r4, r7
    4db8:	46a0      	mov	r8, r4
    4dba:	002c      	movs	r4, r5
    4dbc:	4647      	mov	r7, r8
    4dbe:	40f4      	lsrs	r4, r6
    4dc0:	433c      	orrs	r4, r7
    4dc2:	464f      	mov	r7, r9
    4dc4:	40bd      	lsls	r5, r7
    4dc6:	1e6f      	subs	r7, r5, #1
    4dc8:	41bd      	sbcs	r5, r7
    4dca:	40f1      	lsrs	r1, r6
    4dcc:	432c      	orrs	r4, r5
    4dce:	1b15      	subs	r5, r2, r4
    4dd0:	42aa      	cmp	r2, r5
    4dd2:	4192      	sbcs	r2, r2
    4dd4:	1a41      	subs	r1, r0, r1
    4dd6:	4252      	negs	r2, r2
    4dd8:	1a89      	subs	r1, r1, r2
    4dda:	4664      	mov	r4, ip
    4ddc:	469a      	mov	sl, r3
    4dde:	e6bf      	b.n	4b60 <__aeabi_dadd+0x108>
    4de0:	4641      	mov	r1, r8
    4de2:	4645      	mov	r5, r8
    4de4:	4331      	orrs	r1, r6
    4de6:	d000      	beq.n	4dea <__aeabi_dadd+0x392>
    4de8:	e6be      	b.n	4b68 <__aeabi_dadd+0x110>
    4dea:	2600      	movs	r6, #0
    4dec:	2400      	movs	r4, #0
    4dee:	2500      	movs	r5, #0
    4df0:	e6f2      	b.n	4bd8 <__aeabi_dadd+0x180>
    4df2:	46c0      	nop			; (mov r8, r8)
    4df4:	000007ff 	.word	0x000007ff
    4df8:	ff7fffff 	.word	0xff7fffff
    4dfc:	800fffff 	.word	0x800fffff
    4e00:	2b1f      	cmp	r3, #31
    4e02:	dc59      	bgt.n	4eb8 <__aeabi_dadd+0x460>
    4e04:	2720      	movs	r7, #32
    4e06:	1aff      	subs	r7, r7, r3
    4e08:	46bc      	mov	ip, r7
    4e0a:	0007      	movs	r7, r0
    4e0c:	4663      	mov	r3, ip
    4e0e:	409f      	lsls	r7, r3
    4e10:	465b      	mov	r3, fp
    4e12:	46b9      	mov	r9, r7
    4e14:	0017      	movs	r7, r2
    4e16:	40df      	lsrs	r7, r3
    4e18:	46b8      	mov	r8, r7
    4e1a:	464f      	mov	r7, r9
    4e1c:	4643      	mov	r3, r8
    4e1e:	431f      	orrs	r7, r3
    4e20:	4663      	mov	r3, ip
    4e22:	409a      	lsls	r2, r3
    4e24:	1e53      	subs	r3, r2, #1
    4e26:	419a      	sbcs	r2, r3
    4e28:	465b      	mov	r3, fp
    4e2a:	433a      	orrs	r2, r7
    4e2c:	40d8      	lsrs	r0, r3
    4e2e:	e6f4      	b.n	4c1a <__aeabi_dadd+0x1c2>
    4e30:	000c      	movs	r4, r1
    4e32:	432c      	orrs	r4, r5
    4e34:	d05c      	beq.n	4ef0 <__aeabi_dadd+0x498>
    4e36:	43f6      	mvns	r6, r6
    4e38:	2e00      	cmp	r6, #0
    4e3a:	d155      	bne.n	4ee8 <__aeabi_dadd+0x490>
    4e3c:	1b55      	subs	r5, r2, r5
    4e3e:	42aa      	cmp	r2, r5
    4e40:	41a4      	sbcs	r4, r4
    4e42:	1a41      	subs	r1, r0, r1
    4e44:	4264      	negs	r4, r4
    4e46:	1b09      	subs	r1, r1, r4
    4e48:	469a      	mov	sl, r3
    4e4a:	4664      	mov	r4, ip
    4e4c:	e688      	b.n	4b60 <__aeabi_dadd+0x108>
    4e4e:	4f96      	ldr	r7, [pc, #600]	; (50a8 <__aeabi_dadd+0x650>)
    4e50:	42bc      	cmp	r4, r7
    4e52:	d000      	beq.n	4e56 <__aeabi_dadd+0x3fe>
    4e54:	e6d8      	b.n	4c08 <__aeabi_dadd+0x1b0>
    4e56:	e628      	b.n	4aaa <__aeabi_dadd+0x52>
    4e58:	2200      	movs	r2, #0
    4e5a:	e780      	b.n	4d5e <__aeabi_dadd+0x306>
    4e5c:	2000      	movs	r0, #0
    4e5e:	e78f      	b.n	4d80 <__aeabi_dadd+0x328>
    4e60:	000b      	movs	r3, r1
    4e62:	432b      	orrs	r3, r5
    4e64:	2c00      	cmp	r4, #0
    4e66:	d000      	beq.n	4e6a <__aeabi_dadd+0x412>
    4e68:	e0c2      	b.n	4ff0 <__aeabi_dadd+0x598>
    4e6a:	2b00      	cmp	r3, #0
    4e6c:	d100      	bne.n	4e70 <__aeabi_dadd+0x418>
    4e6e:	e101      	b.n	5074 <__aeabi_dadd+0x61c>
    4e70:	0003      	movs	r3, r0
    4e72:	4313      	orrs	r3, r2
    4e74:	d100      	bne.n	4e78 <__aeabi_dadd+0x420>
    4e76:	e618      	b.n	4aaa <__aeabi_dadd+0x52>
    4e78:	18ab      	adds	r3, r5, r2
    4e7a:	42ab      	cmp	r3, r5
    4e7c:	41b6      	sbcs	r6, r6
    4e7e:	1809      	adds	r1, r1, r0
    4e80:	4276      	negs	r6, r6
    4e82:	1871      	adds	r1, r6, r1
    4e84:	020a      	lsls	r2, r1, #8
    4e86:	d400      	bmi.n	4e8a <__aeabi_dadd+0x432>
    4e88:	e109      	b.n	509e <__aeabi_dadd+0x646>
    4e8a:	4a88      	ldr	r2, [pc, #544]	; (50ac <__aeabi_dadd+0x654>)
    4e8c:	001d      	movs	r5, r3
    4e8e:	4011      	ands	r1, r2
    4e90:	4664      	mov	r4, ip
    4e92:	e60a      	b.n	4aaa <__aeabi_dadd+0x52>
    4e94:	2c00      	cmp	r4, #0
    4e96:	d15b      	bne.n	4f50 <__aeabi_dadd+0x4f8>
    4e98:	000e      	movs	r6, r1
    4e9a:	432e      	orrs	r6, r5
    4e9c:	d000      	beq.n	4ea0 <__aeabi_dadd+0x448>
    4e9e:	e08a      	b.n	4fb6 <__aeabi_dadd+0x55e>
    4ea0:	0001      	movs	r1, r0
    4ea2:	4311      	orrs	r1, r2
    4ea4:	d100      	bne.n	4ea8 <__aeabi_dadd+0x450>
    4ea6:	e0c2      	b.n	502e <__aeabi_dadd+0x5d6>
    4ea8:	0001      	movs	r1, r0
    4eaa:	0015      	movs	r5, r2
    4eac:	469a      	mov	sl, r3
    4eae:	e5fc      	b.n	4aaa <__aeabi_dadd+0x52>
    4eb0:	4664      	mov	r4, ip
    4eb2:	2100      	movs	r1, #0
    4eb4:	2500      	movs	r5, #0
    4eb6:	e68f      	b.n	4bd8 <__aeabi_dadd+0x180>
    4eb8:	2320      	movs	r3, #32
    4eba:	425b      	negs	r3, r3
    4ebc:	469c      	mov	ip, r3
    4ebe:	44dc      	add	ip, fp
    4ec0:	4663      	mov	r3, ip
    4ec2:	0007      	movs	r7, r0
    4ec4:	40df      	lsrs	r7, r3
    4ec6:	465b      	mov	r3, fp
    4ec8:	46bc      	mov	ip, r7
    4eca:	2b20      	cmp	r3, #32
    4ecc:	d100      	bne.n	4ed0 <__aeabi_dadd+0x478>
    4ece:	e0ac      	b.n	502a <__aeabi_dadd+0x5d2>
    4ed0:	2340      	movs	r3, #64	; 0x40
    4ed2:	465f      	mov	r7, fp
    4ed4:	1bdb      	subs	r3, r3, r7
    4ed6:	4098      	lsls	r0, r3
    4ed8:	4302      	orrs	r2, r0
    4eda:	1e50      	subs	r0, r2, #1
    4edc:	4182      	sbcs	r2, r0
    4ede:	4663      	mov	r3, ip
    4ee0:	4313      	orrs	r3, r2
    4ee2:	001a      	movs	r2, r3
    4ee4:	2000      	movs	r0, #0
    4ee6:	e698      	b.n	4c1a <__aeabi_dadd+0x1c2>
    4ee8:	4c6f      	ldr	r4, [pc, #444]	; (50a8 <__aeabi_dadd+0x650>)
    4eea:	45a4      	cmp	ip, r4
    4eec:	d000      	beq.n	4ef0 <__aeabi_dadd+0x498>
    4eee:	e757      	b.n	4da0 <__aeabi_dadd+0x348>
    4ef0:	0001      	movs	r1, r0
    4ef2:	0015      	movs	r5, r2
    4ef4:	4664      	mov	r4, ip
    4ef6:	469a      	mov	sl, r3
    4ef8:	e5d7      	b.n	4aaa <__aeabi_dadd+0x52>
    4efa:	2c00      	cmp	r4, #0
    4efc:	d139      	bne.n	4f72 <__aeabi_dadd+0x51a>
    4efe:	000c      	movs	r4, r1
    4f00:	432c      	orrs	r4, r5
    4f02:	d06e      	beq.n	4fe2 <__aeabi_dadd+0x58a>
    4f04:	43db      	mvns	r3, r3
    4f06:	2b00      	cmp	r3, #0
    4f08:	d01a      	beq.n	4f40 <__aeabi_dadd+0x4e8>
    4f0a:	4c67      	ldr	r4, [pc, #412]	; (50a8 <__aeabi_dadd+0x650>)
    4f0c:	45a4      	cmp	ip, r4
    4f0e:	d068      	beq.n	4fe2 <__aeabi_dadd+0x58a>
    4f10:	2b38      	cmp	r3, #56	; 0x38
    4f12:	dd00      	ble.n	4f16 <__aeabi_dadd+0x4be>
    4f14:	e0a4      	b.n	5060 <__aeabi_dadd+0x608>
    4f16:	2b1f      	cmp	r3, #31
    4f18:	dd00      	ble.n	4f1c <__aeabi_dadd+0x4c4>
    4f1a:	e0ae      	b.n	507a <__aeabi_dadd+0x622>
    4f1c:	2420      	movs	r4, #32
    4f1e:	000f      	movs	r7, r1
    4f20:	1ae4      	subs	r4, r4, r3
    4f22:	40a7      	lsls	r7, r4
    4f24:	46b9      	mov	r9, r7
    4f26:	002f      	movs	r7, r5
    4f28:	40df      	lsrs	r7, r3
    4f2a:	46b8      	mov	r8, r7
    4f2c:	46a3      	mov	fp, r4
    4f2e:	464f      	mov	r7, r9
    4f30:	4644      	mov	r4, r8
    4f32:	4327      	orrs	r7, r4
    4f34:	465c      	mov	r4, fp
    4f36:	40a5      	lsls	r5, r4
    4f38:	1e6c      	subs	r4, r5, #1
    4f3a:	41a5      	sbcs	r5, r4
    4f3c:	40d9      	lsrs	r1, r3
    4f3e:	433d      	orrs	r5, r7
    4f40:	18ad      	adds	r5, r5, r2
    4f42:	4295      	cmp	r5, r2
    4f44:	419b      	sbcs	r3, r3
    4f46:	1809      	adds	r1, r1, r0
    4f48:	425b      	negs	r3, r3
    4f4a:	1859      	adds	r1, r3, r1
    4f4c:	4664      	mov	r4, ip
    4f4e:	e66b      	b.n	4c28 <__aeabi_dadd+0x1d0>
    4f50:	000c      	movs	r4, r1
    4f52:	432c      	orrs	r4, r5
    4f54:	d115      	bne.n	4f82 <__aeabi_dadd+0x52a>
    4f56:	0001      	movs	r1, r0
    4f58:	4311      	orrs	r1, r2
    4f5a:	d07b      	beq.n	5054 <__aeabi_dadd+0x5fc>
    4f5c:	0001      	movs	r1, r0
    4f5e:	0015      	movs	r5, r2
    4f60:	469a      	mov	sl, r3
    4f62:	4c51      	ldr	r4, [pc, #324]	; (50a8 <__aeabi_dadd+0x650>)
    4f64:	e5a1      	b.n	4aaa <__aeabi_dadd+0x52>
    4f66:	430d      	orrs	r5, r1
    4f68:	1e69      	subs	r1, r5, #1
    4f6a:	418d      	sbcs	r5, r1
    4f6c:	2100      	movs	r1, #0
    4f6e:	b2ec      	uxtb	r4, r5
    4f70:	e72d      	b.n	4dce <__aeabi_dadd+0x376>
    4f72:	4c4d      	ldr	r4, [pc, #308]	; (50a8 <__aeabi_dadd+0x650>)
    4f74:	45a4      	cmp	ip, r4
    4f76:	d034      	beq.n	4fe2 <__aeabi_dadd+0x58a>
    4f78:	2480      	movs	r4, #128	; 0x80
    4f7a:	0424      	lsls	r4, r4, #16
    4f7c:	425b      	negs	r3, r3
    4f7e:	4321      	orrs	r1, r4
    4f80:	e7c6      	b.n	4f10 <__aeabi_dadd+0x4b8>
    4f82:	0004      	movs	r4, r0
    4f84:	4314      	orrs	r4, r2
    4f86:	d04e      	beq.n	5026 <__aeabi_dadd+0x5ce>
    4f88:	08ed      	lsrs	r5, r5, #3
    4f8a:	074c      	lsls	r4, r1, #29
    4f8c:	432c      	orrs	r4, r5
    4f8e:	2580      	movs	r5, #128	; 0x80
    4f90:	08c9      	lsrs	r1, r1, #3
    4f92:	032d      	lsls	r5, r5, #12
    4f94:	4229      	tst	r1, r5
    4f96:	d008      	beq.n	4faa <__aeabi_dadd+0x552>
    4f98:	08c6      	lsrs	r6, r0, #3
    4f9a:	422e      	tst	r6, r5
    4f9c:	d105      	bne.n	4faa <__aeabi_dadd+0x552>
    4f9e:	08d2      	lsrs	r2, r2, #3
    4fa0:	0741      	lsls	r1, r0, #29
    4fa2:	4311      	orrs	r1, r2
    4fa4:	000c      	movs	r4, r1
    4fa6:	469a      	mov	sl, r3
    4fa8:	0031      	movs	r1, r6
    4faa:	0f62      	lsrs	r2, r4, #29
    4fac:	00c9      	lsls	r1, r1, #3
    4fae:	00e5      	lsls	r5, r4, #3
    4fb0:	4311      	orrs	r1, r2
    4fb2:	4c3d      	ldr	r4, [pc, #244]	; (50a8 <__aeabi_dadd+0x650>)
    4fb4:	e579      	b.n	4aaa <__aeabi_dadd+0x52>
    4fb6:	0006      	movs	r6, r0
    4fb8:	4316      	orrs	r6, r2
    4fba:	d100      	bne.n	4fbe <__aeabi_dadd+0x566>
    4fbc:	e575      	b.n	4aaa <__aeabi_dadd+0x52>
    4fbe:	1aae      	subs	r6, r5, r2
    4fc0:	46b0      	mov	r8, r6
    4fc2:	4545      	cmp	r5, r8
    4fc4:	41bf      	sbcs	r7, r7
    4fc6:	1a0e      	subs	r6, r1, r0
    4fc8:	427f      	negs	r7, r7
    4fca:	1bf6      	subs	r6, r6, r7
    4fcc:	0237      	lsls	r7, r6, #8
    4fce:	d400      	bmi.n	4fd2 <__aeabi_dadd+0x57a>
    4fd0:	e5f4      	b.n	4bbc <__aeabi_dadd+0x164>
    4fd2:	1b55      	subs	r5, r2, r5
    4fd4:	42aa      	cmp	r2, r5
    4fd6:	41b6      	sbcs	r6, r6
    4fd8:	1a41      	subs	r1, r0, r1
    4fda:	4276      	negs	r6, r6
    4fdc:	1b89      	subs	r1, r1, r6
    4fde:	469a      	mov	sl, r3
    4fe0:	e563      	b.n	4aaa <__aeabi_dadd+0x52>
    4fe2:	0001      	movs	r1, r0
    4fe4:	0015      	movs	r5, r2
    4fe6:	4664      	mov	r4, ip
    4fe8:	e55f      	b.n	4aaa <__aeabi_dadd+0x52>
    4fea:	2200      	movs	r2, #0
    4fec:	2500      	movs	r5, #0
    4fee:	e57b      	b.n	4ae8 <__aeabi_dadd+0x90>
    4ff0:	2b00      	cmp	r3, #0
    4ff2:	d03b      	beq.n	506c <__aeabi_dadd+0x614>
    4ff4:	0003      	movs	r3, r0
    4ff6:	4313      	orrs	r3, r2
    4ff8:	d015      	beq.n	5026 <__aeabi_dadd+0x5ce>
    4ffa:	08ed      	lsrs	r5, r5, #3
    4ffc:	074b      	lsls	r3, r1, #29
    4ffe:	432b      	orrs	r3, r5
    5000:	2580      	movs	r5, #128	; 0x80
    5002:	08c9      	lsrs	r1, r1, #3
    5004:	032d      	lsls	r5, r5, #12
    5006:	4229      	tst	r1, r5
    5008:	d007      	beq.n	501a <__aeabi_dadd+0x5c2>
    500a:	08c4      	lsrs	r4, r0, #3
    500c:	422c      	tst	r4, r5
    500e:	d104      	bne.n	501a <__aeabi_dadd+0x5c2>
    5010:	0741      	lsls	r1, r0, #29
    5012:	000b      	movs	r3, r1
    5014:	0021      	movs	r1, r4
    5016:	08d2      	lsrs	r2, r2, #3
    5018:	4313      	orrs	r3, r2
    501a:	00c9      	lsls	r1, r1, #3
    501c:	0f5a      	lsrs	r2, r3, #29
    501e:	4311      	orrs	r1, r2
    5020:	00dd      	lsls	r5, r3, #3
    5022:	4c21      	ldr	r4, [pc, #132]	; (50a8 <__aeabi_dadd+0x650>)
    5024:	e541      	b.n	4aaa <__aeabi_dadd+0x52>
    5026:	4c20      	ldr	r4, [pc, #128]	; (50a8 <__aeabi_dadd+0x650>)
    5028:	e53f      	b.n	4aaa <__aeabi_dadd+0x52>
    502a:	2000      	movs	r0, #0
    502c:	e754      	b.n	4ed8 <__aeabi_dadd+0x480>
    502e:	2600      	movs	r6, #0
    5030:	2500      	movs	r5, #0
    5032:	e5d1      	b.n	4bd8 <__aeabi_dadd+0x180>
    5034:	0034      	movs	r4, r6
    5036:	000f      	movs	r7, r1
    5038:	3c20      	subs	r4, #32
    503a:	40e7      	lsrs	r7, r4
    503c:	003c      	movs	r4, r7
    503e:	2e20      	cmp	r6, #32
    5040:	d02b      	beq.n	509a <__aeabi_dadd+0x642>
    5042:	2740      	movs	r7, #64	; 0x40
    5044:	1bbe      	subs	r6, r7, r6
    5046:	40b1      	lsls	r1, r6
    5048:	430d      	orrs	r5, r1
    504a:	1e69      	subs	r1, r5, #1
    504c:	418d      	sbcs	r5, r1
    504e:	2100      	movs	r1, #0
    5050:	432c      	orrs	r4, r5
    5052:	e6bc      	b.n	4dce <__aeabi_dadd+0x376>
    5054:	2180      	movs	r1, #128	; 0x80
    5056:	2600      	movs	r6, #0
    5058:	0309      	lsls	r1, r1, #12
    505a:	4c13      	ldr	r4, [pc, #76]	; (50a8 <__aeabi_dadd+0x650>)
    505c:	2500      	movs	r5, #0
    505e:	e5bb      	b.n	4bd8 <__aeabi_dadd+0x180>
    5060:	430d      	orrs	r5, r1
    5062:	1e69      	subs	r1, r5, #1
    5064:	418d      	sbcs	r5, r1
    5066:	2100      	movs	r1, #0
    5068:	b2ed      	uxtb	r5, r5
    506a:	e769      	b.n	4f40 <__aeabi_dadd+0x4e8>
    506c:	0001      	movs	r1, r0
    506e:	0015      	movs	r5, r2
    5070:	4c0d      	ldr	r4, [pc, #52]	; (50a8 <__aeabi_dadd+0x650>)
    5072:	e51a      	b.n	4aaa <__aeabi_dadd+0x52>
    5074:	0001      	movs	r1, r0
    5076:	0015      	movs	r5, r2
    5078:	e517      	b.n	4aaa <__aeabi_dadd+0x52>
    507a:	001c      	movs	r4, r3
    507c:	000f      	movs	r7, r1
    507e:	3c20      	subs	r4, #32
    5080:	40e7      	lsrs	r7, r4
    5082:	003c      	movs	r4, r7
    5084:	2b20      	cmp	r3, #32
    5086:	d00c      	beq.n	50a2 <__aeabi_dadd+0x64a>
    5088:	2740      	movs	r7, #64	; 0x40
    508a:	1afb      	subs	r3, r7, r3
    508c:	4099      	lsls	r1, r3
    508e:	430d      	orrs	r5, r1
    5090:	1e69      	subs	r1, r5, #1
    5092:	418d      	sbcs	r5, r1
    5094:	2100      	movs	r1, #0
    5096:	4325      	orrs	r5, r4
    5098:	e752      	b.n	4f40 <__aeabi_dadd+0x4e8>
    509a:	2100      	movs	r1, #0
    509c:	e7d4      	b.n	5048 <__aeabi_dadd+0x5f0>
    509e:	001d      	movs	r5, r3
    50a0:	e592      	b.n	4bc8 <__aeabi_dadd+0x170>
    50a2:	2100      	movs	r1, #0
    50a4:	e7f3      	b.n	508e <__aeabi_dadd+0x636>
    50a6:	46c0      	nop			; (mov r8, r8)
    50a8:	000007ff 	.word	0x000007ff
    50ac:	ff7fffff 	.word	0xff7fffff

000050b0 <__aeabi_ddiv>:
    50b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    50b2:	4656      	mov	r6, sl
    50b4:	464d      	mov	r5, r9
    50b6:	4644      	mov	r4, r8
    50b8:	465f      	mov	r7, fp
    50ba:	b4f0      	push	{r4, r5, r6, r7}
    50bc:	001d      	movs	r5, r3
    50be:	030e      	lsls	r6, r1, #12
    50c0:	004c      	lsls	r4, r1, #1
    50c2:	0fcb      	lsrs	r3, r1, #31
    50c4:	b087      	sub	sp, #28
    50c6:	0007      	movs	r7, r0
    50c8:	4692      	mov	sl, r2
    50ca:	4681      	mov	r9, r0
    50cc:	0b36      	lsrs	r6, r6, #12
    50ce:	0d64      	lsrs	r4, r4, #21
    50d0:	4698      	mov	r8, r3
    50d2:	d06a      	beq.n	51aa <__aeabi_ddiv+0xfa>
    50d4:	4b6d      	ldr	r3, [pc, #436]	; (528c <__aeabi_ddiv+0x1dc>)
    50d6:	429c      	cmp	r4, r3
    50d8:	d035      	beq.n	5146 <__aeabi_ddiv+0x96>
    50da:	2280      	movs	r2, #128	; 0x80
    50dc:	0f43      	lsrs	r3, r0, #29
    50de:	0412      	lsls	r2, r2, #16
    50e0:	4313      	orrs	r3, r2
    50e2:	00f6      	lsls	r6, r6, #3
    50e4:	431e      	orrs	r6, r3
    50e6:	00c3      	lsls	r3, r0, #3
    50e8:	4699      	mov	r9, r3
    50ea:	4b69      	ldr	r3, [pc, #420]	; (5290 <__aeabi_ddiv+0x1e0>)
    50ec:	2700      	movs	r7, #0
    50ee:	469c      	mov	ip, r3
    50f0:	2300      	movs	r3, #0
    50f2:	4464      	add	r4, ip
    50f4:	9302      	str	r3, [sp, #8]
    50f6:	032b      	lsls	r3, r5, #12
    50f8:	0068      	lsls	r0, r5, #1
    50fa:	0b1b      	lsrs	r3, r3, #12
    50fc:	0fed      	lsrs	r5, r5, #31
    50fe:	4651      	mov	r1, sl
    5100:	469b      	mov	fp, r3
    5102:	0d40      	lsrs	r0, r0, #21
    5104:	9500      	str	r5, [sp, #0]
    5106:	d100      	bne.n	510a <__aeabi_ddiv+0x5a>
    5108:	e078      	b.n	51fc <__aeabi_ddiv+0x14c>
    510a:	4b60      	ldr	r3, [pc, #384]	; (528c <__aeabi_ddiv+0x1dc>)
    510c:	4298      	cmp	r0, r3
    510e:	d06c      	beq.n	51ea <__aeabi_ddiv+0x13a>
    5110:	465b      	mov	r3, fp
    5112:	00da      	lsls	r2, r3, #3
    5114:	0f4b      	lsrs	r3, r1, #29
    5116:	2180      	movs	r1, #128	; 0x80
    5118:	0409      	lsls	r1, r1, #16
    511a:	430b      	orrs	r3, r1
    511c:	4313      	orrs	r3, r2
    511e:	469b      	mov	fp, r3
    5120:	4653      	mov	r3, sl
    5122:	00d9      	lsls	r1, r3, #3
    5124:	4b5a      	ldr	r3, [pc, #360]	; (5290 <__aeabi_ddiv+0x1e0>)
    5126:	469c      	mov	ip, r3
    5128:	2300      	movs	r3, #0
    512a:	4460      	add	r0, ip
    512c:	4642      	mov	r2, r8
    512e:	1a20      	subs	r0, r4, r0
    5130:	406a      	eors	r2, r5
    5132:	4692      	mov	sl, r2
    5134:	9001      	str	r0, [sp, #4]
    5136:	431f      	orrs	r7, r3
    5138:	2f0f      	cmp	r7, #15
    513a:	d900      	bls.n	513e <__aeabi_ddiv+0x8e>
    513c:	e0b0      	b.n	52a0 <__aeabi_ddiv+0x1f0>
    513e:	4855      	ldr	r0, [pc, #340]	; (5294 <__aeabi_ddiv+0x1e4>)
    5140:	00bf      	lsls	r7, r7, #2
    5142:	59c0      	ldr	r0, [r0, r7]
    5144:	4687      	mov	pc, r0
    5146:	4337      	orrs	r7, r6
    5148:	d000      	beq.n	514c <__aeabi_ddiv+0x9c>
    514a:	e088      	b.n	525e <__aeabi_ddiv+0x1ae>
    514c:	2300      	movs	r3, #0
    514e:	4699      	mov	r9, r3
    5150:	3302      	adds	r3, #2
    5152:	2708      	movs	r7, #8
    5154:	2600      	movs	r6, #0
    5156:	9302      	str	r3, [sp, #8]
    5158:	e7cd      	b.n	50f6 <__aeabi_ddiv+0x46>
    515a:	4643      	mov	r3, r8
    515c:	46b3      	mov	fp, r6
    515e:	4649      	mov	r1, r9
    5160:	9300      	str	r3, [sp, #0]
    5162:	9b02      	ldr	r3, [sp, #8]
    5164:	9a00      	ldr	r2, [sp, #0]
    5166:	4692      	mov	sl, r2
    5168:	2b02      	cmp	r3, #2
    516a:	d000      	beq.n	516e <__aeabi_ddiv+0xbe>
    516c:	e1bf      	b.n	54ee <__aeabi_ddiv+0x43e>
    516e:	2100      	movs	r1, #0
    5170:	4653      	mov	r3, sl
    5172:	2201      	movs	r2, #1
    5174:	2600      	movs	r6, #0
    5176:	4689      	mov	r9, r1
    5178:	401a      	ands	r2, r3
    517a:	4b44      	ldr	r3, [pc, #272]	; (528c <__aeabi_ddiv+0x1dc>)
    517c:	2100      	movs	r1, #0
    517e:	0336      	lsls	r6, r6, #12
    5180:	0d0c      	lsrs	r4, r1, #20
    5182:	0524      	lsls	r4, r4, #20
    5184:	0b36      	lsrs	r6, r6, #12
    5186:	4326      	orrs	r6, r4
    5188:	4c43      	ldr	r4, [pc, #268]	; (5298 <__aeabi_ddiv+0x1e8>)
    518a:	051b      	lsls	r3, r3, #20
    518c:	4026      	ands	r6, r4
    518e:	431e      	orrs	r6, r3
    5190:	0076      	lsls	r6, r6, #1
    5192:	07d2      	lsls	r2, r2, #31
    5194:	0876      	lsrs	r6, r6, #1
    5196:	4316      	orrs	r6, r2
    5198:	4648      	mov	r0, r9
    519a:	0031      	movs	r1, r6
    519c:	b007      	add	sp, #28
    519e:	bc3c      	pop	{r2, r3, r4, r5}
    51a0:	4690      	mov	r8, r2
    51a2:	4699      	mov	r9, r3
    51a4:	46a2      	mov	sl, r4
    51a6:	46ab      	mov	fp, r5
    51a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51aa:	0033      	movs	r3, r6
    51ac:	4303      	orrs	r3, r0
    51ae:	d04f      	beq.n	5250 <__aeabi_ddiv+0x1a0>
    51b0:	2e00      	cmp	r6, #0
    51b2:	d100      	bne.n	51b6 <__aeabi_ddiv+0x106>
    51b4:	e1bc      	b.n	5530 <__aeabi_ddiv+0x480>
    51b6:	0030      	movs	r0, r6
    51b8:	f001 f8cc 	bl	6354 <__clzsi2>
    51bc:	0003      	movs	r3, r0
    51be:	3b0b      	subs	r3, #11
    51c0:	2b1c      	cmp	r3, #28
    51c2:	dd00      	ble.n	51c6 <__aeabi_ddiv+0x116>
    51c4:	e1ad      	b.n	5522 <__aeabi_ddiv+0x472>
    51c6:	221d      	movs	r2, #29
    51c8:	0001      	movs	r1, r0
    51ca:	1ad3      	subs	r3, r2, r3
    51cc:	3908      	subs	r1, #8
    51ce:	003a      	movs	r2, r7
    51d0:	408f      	lsls	r7, r1
    51d2:	408e      	lsls	r6, r1
    51d4:	40da      	lsrs	r2, r3
    51d6:	46b9      	mov	r9, r7
    51d8:	4316      	orrs	r6, r2
    51da:	4b30      	ldr	r3, [pc, #192]	; (529c <__aeabi_ddiv+0x1ec>)
    51dc:	2700      	movs	r7, #0
    51de:	469c      	mov	ip, r3
    51e0:	2300      	movs	r3, #0
    51e2:	4460      	add	r0, ip
    51e4:	4244      	negs	r4, r0
    51e6:	9302      	str	r3, [sp, #8]
    51e8:	e785      	b.n	50f6 <__aeabi_ddiv+0x46>
    51ea:	4653      	mov	r3, sl
    51ec:	465a      	mov	r2, fp
    51ee:	4313      	orrs	r3, r2
    51f0:	d12c      	bne.n	524c <__aeabi_ddiv+0x19c>
    51f2:	2300      	movs	r3, #0
    51f4:	2100      	movs	r1, #0
    51f6:	469b      	mov	fp, r3
    51f8:	3302      	adds	r3, #2
    51fa:	e797      	b.n	512c <__aeabi_ddiv+0x7c>
    51fc:	430b      	orrs	r3, r1
    51fe:	d020      	beq.n	5242 <__aeabi_ddiv+0x192>
    5200:	465b      	mov	r3, fp
    5202:	2b00      	cmp	r3, #0
    5204:	d100      	bne.n	5208 <__aeabi_ddiv+0x158>
    5206:	e19e      	b.n	5546 <__aeabi_ddiv+0x496>
    5208:	4658      	mov	r0, fp
    520a:	f001 f8a3 	bl	6354 <__clzsi2>
    520e:	0003      	movs	r3, r0
    5210:	3b0b      	subs	r3, #11
    5212:	2b1c      	cmp	r3, #28
    5214:	dd00      	ble.n	5218 <__aeabi_ddiv+0x168>
    5216:	e18f      	b.n	5538 <__aeabi_ddiv+0x488>
    5218:	0002      	movs	r2, r0
    521a:	4659      	mov	r1, fp
    521c:	3a08      	subs	r2, #8
    521e:	4091      	lsls	r1, r2
    5220:	468b      	mov	fp, r1
    5222:	211d      	movs	r1, #29
    5224:	1acb      	subs	r3, r1, r3
    5226:	4651      	mov	r1, sl
    5228:	40d9      	lsrs	r1, r3
    522a:	000b      	movs	r3, r1
    522c:	4659      	mov	r1, fp
    522e:	430b      	orrs	r3, r1
    5230:	4651      	mov	r1, sl
    5232:	469b      	mov	fp, r3
    5234:	4091      	lsls	r1, r2
    5236:	4b19      	ldr	r3, [pc, #100]	; (529c <__aeabi_ddiv+0x1ec>)
    5238:	469c      	mov	ip, r3
    523a:	4460      	add	r0, ip
    523c:	4240      	negs	r0, r0
    523e:	2300      	movs	r3, #0
    5240:	e774      	b.n	512c <__aeabi_ddiv+0x7c>
    5242:	2300      	movs	r3, #0
    5244:	2100      	movs	r1, #0
    5246:	469b      	mov	fp, r3
    5248:	3301      	adds	r3, #1
    524a:	e76f      	b.n	512c <__aeabi_ddiv+0x7c>
    524c:	2303      	movs	r3, #3
    524e:	e76d      	b.n	512c <__aeabi_ddiv+0x7c>
    5250:	2300      	movs	r3, #0
    5252:	4699      	mov	r9, r3
    5254:	3301      	adds	r3, #1
    5256:	2704      	movs	r7, #4
    5258:	2600      	movs	r6, #0
    525a:	9302      	str	r3, [sp, #8]
    525c:	e74b      	b.n	50f6 <__aeabi_ddiv+0x46>
    525e:	2303      	movs	r3, #3
    5260:	270c      	movs	r7, #12
    5262:	9302      	str	r3, [sp, #8]
    5264:	e747      	b.n	50f6 <__aeabi_ddiv+0x46>
    5266:	2201      	movs	r2, #1
    5268:	1ad5      	subs	r5, r2, r3
    526a:	2d38      	cmp	r5, #56	; 0x38
    526c:	dc00      	bgt.n	5270 <__aeabi_ddiv+0x1c0>
    526e:	e1b0      	b.n	55d2 <__aeabi_ddiv+0x522>
    5270:	4653      	mov	r3, sl
    5272:	401a      	ands	r2, r3
    5274:	2100      	movs	r1, #0
    5276:	2300      	movs	r3, #0
    5278:	2600      	movs	r6, #0
    527a:	4689      	mov	r9, r1
    527c:	e77e      	b.n	517c <__aeabi_ddiv+0xcc>
    527e:	2300      	movs	r3, #0
    5280:	2680      	movs	r6, #128	; 0x80
    5282:	4699      	mov	r9, r3
    5284:	2200      	movs	r2, #0
    5286:	0336      	lsls	r6, r6, #12
    5288:	4b00      	ldr	r3, [pc, #0]	; (528c <__aeabi_ddiv+0x1dc>)
    528a:	e777      	b.n	517c <__aeabi_ddiv+0xcc>
    528c:	000007ff 	.word	0x000007ff
    5290:	fffffc01 	.word	0xfffffc01
    5294:	00006d9c 	.word	0x00006d9c
    5298:	800fffff 	.word	0x800fffff
    529c:	000003f3 	.word	0x000003f3
    52a0:	455e      	cmp	r6, fp
    52a2:	d900      	bls.n	52a6 <__aeabi_ddiv+0x1f6>
    52a4:	e172      	b.n	558c <__aeabi_ddiv+0x4dc>
    52a6:	d100      	bne.n	52aa <__aeabi_ddiv+0x1fa>
    52a8:	e16d      	b.n	5586 <__aeabi_ddiv+0x4d6>
    52aa:	9b01      	ldr	r3, [sp, #4]
    52ac:	464d      	mov	r5, r9
    52ae:	3b01      	subs	r3, #1
    52b0:	9301      	str	r3, [sp, #4]
    52b2:	2300      	movs	r3, #0
    52b4:	0034      	movs	r4, r6
    52b6:	9302      	str	r3, [sp, #8]
    52b8:	465b      	mov	r3, fp
    52ba:	021e      	lsls	r6, r3, #8
    52bc:	0e0b      	lsrs	r3, r1, #24
    52be:	431e      	orrs	r6, r3
    52c0:	020b      	lsls	r3, r1, #8
    52c2:	9303      	str	r3, [sp, #12]
    52c4:	0c33      	lsrs	r3, r6, #16
    52c6:	4699      	mov	r9, r3
    52c8:	0433      	lsls	r3, r6, #16
    52ca:	0c1b      	lsrs	r3, r3, #16
    52cc:	4649      	mov	r1, r9
    52ce:	0020      	movs	r0, r4
    52d0:	9300      	str	r3, [sp, #0]
    52d2:	f7ff fa1f 	bl	4714 <__aeabi_uidiv>
    52d6:	9b00      	ldr	r3, [sp, #0]
    52d8:	0037      	movs	r7, r6
    52da:	4343      	muls	r3, r0
    52dc:	0006      	movs	r6, r0
    52de:	4649      	mov	r1, r9
    52e0:	0020      	movs	r0, r4
    52e2:	4698      	mov	r8, r3
    52e4:	f7ff fa9c 	bl	4820 <__aeabi_uidivmod>
    52e8:	0c2c      	lsrs	r4, r5, #16
    52ea:	0409      	lsls	r1, r1, #16
    52ec:	430c      	orrs	r4, r1
    52ee:	45a0      	cmp	r8, r4
    52f0:	d909      	bls.n	5306 <__aeabi_ddiv+0x256>
    52f2:	19e4      	adds	r4, r4, r7
    52f4:	1e73      	subs	r3, r6, #1
    52f6:	42a7      	cmp	r7, r4
    52f8:	d900      	bls.n	52fc <__aeabi_ddiv+0x24c>
    52fa:	e15c      	b.n	55b6 <__aeabi_ddiv+0x506>
    52fc:	45a0      	cmp	r8, r4
    52fe:	d800      	bhi.n	5302 <__aeabi_ddiv+0x252>
    5300:	e159      	b.n	55b6 <__aeabi_ddiv+0x506>
    5302:	3e02      	subs	r6, #2
    5304:	19e4      	adds	r4, r4, r7
    5306:	4643      	mov	r3, r8
    5308:	1ae4      	subs	r4, r4, r3
    530a:	4649      	mov	r1, r9
    530c:	0020      	movs	r0, r4
    530e:	f7ff fa01 	bl	4714 <__aeabi_uidiv>
    5312:	0003      	movs	r3, r0
    5314:	9a00      	ldr	r2, [sp, #0]
    5316:	4680      	mov	r8, r0
    5318:	4353      	muls	r3, r2
    531a:	4649      	mov	r1, r9
    531c:	0020      	movs	r0, r4
    531e:	469b      	mov	fp, r3
    5320:	f7ff fa7e 	bl	4820 <__aeabi_uidivmod>
    5324:	042a      	lsls	r2, r5, #16
    5326:	0409      	lsls	r1, r1, #16
    5328:	0c12      	lsrs	r2, r2, #16
    532a:	430a      	orrs	r2, r1
    532c:	4593      	cmp	fp, r2
    532e:	d90d      	bls.n	534c <__aeabi_ddiv+0x29c>
    5330:	4643      	mov	r3, r8
    5332:	19d2      	adds	r2, r2, r7
    5334:	3b01      	subs	r3, #1
    5336:	4297      	cmp	r7, r2
    5338:	d900      	bls.n	533c <__aeabi_ddiv+0x28c>
    533a:	e13a      	b.n	55b2 <__aeabi_ddiv+0x502>
    533c:	4593      	cmp	fp, r2
    533e:	d800      	bhi.n	5342 <__aeabi_ddiv+0x292>
    5340:	e137      	b.n	55b2 <__aeabi_ddiv+0x502>
    5342:	2302      	movs	r3, #2
    5344:	425b      	negs	r3, r3
    5346:	469c      	mov	ip, r3
    5348:	19d2      	adds	r2, r2, r7
    534a:	44e0      	add	r8, ip
    534c:	465b      	mov	r3, fp
    534e:	1ad2      	subs	r2, r2, r3
    5350:	4643      	mov	r3, r8
    5352:	0436      	lsls	r6, r6, #16
    5354:	4333      	orrs	r3, r6
    5356:	469b      	mov	fp, r3
    5358:	9903      	ldr	r1, [sp, #12]
    535a:	0c18      	lsrs	r0, r3, #16
    535c:	0c0b      	lsrs	r3, r1, #16
    535e:	001d      	movs	r5, r3
    5360:	9305      	str	r3, [sp, #20]
    5362:	0409      	lsls	r1, r1, #16
    5364:	465b      	mov	r3, fp
    5366:	0c09      	lsrs	r1, r1, #16
    5368:	000c      	movs	r4, r1
    536a:	041b      	lsls	r3, r3, #16
    536c:	0c1b      	lsrs	r3, r3, #16
    536e:	4344      	muls	r4, r0
    5370:	9104      	str	r1, [sp, #16]
    5372:	4359      	muls	r1, r3
    5374:	436b      	muls	r3, r5
    5376:	4368      	muls	r0, r5
    5378:	191b      	adds	r3, r3, r4
    537a:	0c0d      	lsrs	r5, r1, #16
    537c:	18eb      	adds	r3, r5, r3
    537e:	429c      	cmp	r4, r3
    5380:	d903      	bls.n	538a <__aeabi_ddiv+0x2da>
    5382:	2480      	movs	r4, #128	; 0x80
    5384:	0264      	lsls	r4, r4, #9
    5386:	46a4      	mov	ip, r4
    5388:	4460      	add	r0, ip
    538a:	0c1c      	lsrs	r4, r3, #16
    538c:	0409      	lsls	r1, r1, #16
    538e:	041b      	lsls	r3, r3, #16
    5390:	0c09      	lsrs	r1, r1, #16
    5392:	1820      	adds	r0, r4, r0
    5394:	185d      	adds	r5, r3, r1
    5396:	4282      	cmp	r2, r0
    5398:	d200      	bcs.n	539c <__aeabi_ddiv+0x2ec>
    539a:	e0de      	b.n	555a <__aeabi_ddiv+0x4aa>
    539c:	d100      	bne.n	53a0 <__aeabi_ddiv+0x2f0>
    539e:	e0d7      	b.n	5550 <__aeabi_ddiv+0x4a0>
    53a0:	1a16      	subs	r6, r2, r0
    53a2:	9b02      	ldr	r3, [sp, #8]
    53a4:	469c      	mov	ip, r3
    53a6:	1b5d      	subs	r5, r3, r5
    53a8:	45ac      	cmp	ip, r5
    53aa:	419b      	sbcs	r3, r3
    53ac:	425b      	negs	r3, r3
    53ae:	1af6      	subs	r6, r6, r3
    53b0:	42b7      	cmp	r7, r6
    53b2:	d100      	bne.n	53b6 <__aeabi_ddiv+0x306>
    53b4:	e106      	b.n	55c4 <__aeabi_ddiv+0x514>
    53b6:	4649      	mov	r1, r9
    53b8:	0030      	movs	r0, r6
    53ba:	f7ff f9ab 	bl	4714 <__aeabi_uidiv>
    53be:	9b00      	ldr	r3, [sp, #0]
    53c0:	0004      	movs	r4, r0
    53c2:	4343      	muls	r3, r0
    53c4:	4649      	mov	r1, r9
    53c6:	0030      	movs	r0, r6
    53c8:	4698      	mov	r8, r3
    53ca:	f7ff fa29 	bl	4820 <__aeabi_uidivmod>
    53ce:	0c2e      	lsrs	r6, r5, #16
    53d0:	0409      	lsls	r1, r1, #16
    53d2:	430e      	orrs	r6, r1
    53d4:	45b0      	cmp	r8, r6
    53d6:	d909      	bls.n	53ec <__aeabi_ddiv+0x33c>
    53d8:	19f6      	adds	r6, r6, r7
    53da:	1e63      	subs	r3, r4, #1
    53dc:	42b7      	cmp	r7, r6
    53de:	d900      	bls.n	53e2 <__aeabi_ddiv+0x332>
    53e0:	e0f3      	b.n	55ca <__aeabi_ddiv+0x51a>
    53e2:	45b0      	cmp	r8, r6
    53e4:	d800      	bhi.n	53e8 <__aeabi_ddiv+0x338>
    53e6:	e0f0      	b.n	55ca <__aeabi_ddiv+0x51a>
    53e8:	3c02      	subs	r4, #2
    53ea:	19f6      	adds	r6, r6, r7
    53ec:	4643      	mov	r3, r8
    53ee:	1af3      	subs	r3, r6, r3
    53f0:	4649      	mov	r1, r9
    53f2:	0018      	movs	r0, r3
    53f4:	9302      	str	r3, [sp, #8]
    53f6:	f7ff f98d 	bl	4714 <__aeabi_uidiv>
    53fa:	9b00      	ldr	r3, [sp, #0]
    53fc:	0006      	movs	r6, r0
    53fe:	4343      	muls	r3, r0
    5400:	4649      	mov	r1, r9
    5402:	9802      	ldr	r0, [sp, #8]
    5404:	4698      	mov	r8, r3
    5406:	f7ff fa0b 	bl	4820 <__aeabi_uidivmod>
    540a:	042d      	lsls	r5, r5, #16
    540c:	0409      	lsls	r1, r1, #16
    540e:	0c2d      	lsrs	r5, r5, #16
    5410:	430d      	orrs	r5, r1
    5412:	45a8      	cmp	r8, r5
    5414:	d909      	bls.n	542a <__aeabi_ddiv+0x37a>
    5416:	19ed      	adds	r5, r5, r7
    5418:	1e73      	subs	r3, r6, #1
    541a:	42af      	cmp	r7, r5
    541c:	d900      	bls.n	5420 <__aeabi_ddiv+0x370>
    541e:	e0d6      	b.n	55ce <__aeabi_ddiv+0x51e>
    5420:	45a8      	cmp	r8, r5
    5422:	d800      	bhi.n	5426 <__aeabi_ddiv+0x376>
    5424:	e0d3      	b.n	55ce <__aeabi_ddiv+0x51e>
    5426:	3e02      	subs	r6, #2
    5428:	19ed      	adds	r5, r5, r7
    542a:	0424      	lsls	r4, r4, #16
    542c:	0021      	movs	r1, r4
    542e:	4643      	mov	r3, r8
    5430:	4331      	orrs	r1, r6
    5432:	9e04      	ldr	r6, [sp, #16]
    5434:	9a05      	ldr	r2, [sp, #20]
    5436:	0030      	movs	r0, r6
    5438:	1aed      	subs	r5, r5, r3
    543a:	040b      	lsls	r3, r1, #16
    543c:	0c0c      	lsrs	r4, r1, #16
    543e:	0c1b      	lsrs	r3, r3, #16
    5440:	4358      	muls	r0, r3
    5442:	4366      	muls	r6, r4
    5444:	4353      	muls	r3, r2
    5446:	4354      	muls	r4, r2
    5448:	199a      	adds	r2, r3, r6
    544a:	0c03      	lsrs	r3, r0, #16
    544c:	189b      	adds	r3, r3, r2
    544e:	429e      	cmp	r6, r3
    5450:	d903      	bls.n	545a <__aeabi_ddiv+0x3aa>
    5452:	2280      	movs	r2, #128	; 0x80
    5454:	0252      	lsls	r2, r2, #9
    5456:	4694      	mov	ip, r2
    5458:	4464      	add	r4, ip
    545a:	0c1a      	lsrs	r2, r3, #16
    545c:	0400      	lsls	r0, r0, #16
    545e:	041b      	lsls	r3, r3, #16
    5460:	0c00      	lsrs	r0, r0, #16
    5462:	1914      	adds	r4, r2, r4
    5464:	181b      	adds	r3, r3, r0
    5466:	42a5      	cmp	r5, r4
    5468:	d350      	bcc.n	550c <__aeabi_ddiv+0x45c>
    546a:	d04d      	beq.n	5508 <__aeabi_ddiv+0x458>
    546c:	2301      	movs	r3, #1
    546e:	4319      	orrs	r1, r3
    5470:	4a96      	ldr	r2, [pc, #600]	; (56cc <__aeabi_ddiv+0x61c>)
    5472:	9b01      	ldr	r3, [sp, #4]
    5474:	4694      	mov	ip, r2
    5476:	4463      	add	r3, ip
    5478:	2b00      	cmp	r3, #0
    547a:	dc00      	bgt.n	547e <__aeabi_ddiv+0x3ce>
    547c:	e6f3      	b.n	5266 <__aeabi_ddiv+0x1b6>
    547e:	074a      	lsls	r2, r1, #29
    5480:	d009      	beq.n	5496 <__aeabi_ddiv+0x3e6>
    5482:	220f      	movs	r2, #15
    5484:	400a      	ands	r2, r1
    5486:	2a04      	cmp	r2, #4
    5488:	d005      	beq.n	5496 <__aeabi_ddiv+0x3e6>
    548a:	1d0a      	adds	r2, r1, #4
    548c:	428a      	cmp	r2, r1
    548e:	4189      	sbcs	r1, r1
    5490:	4249      	negs	r1, r1
    5492:	448b      	add	fp, r1
    5494:	0011      	movs	r1, r2
    5496:	465a      	mov	r2, fp
    5498:	01d2      	lsls	r2, r2, #7
    549a:	d508      	bpl.n	54ae <__aeabi_ddiv+0x3fe>
    549c:	465a      	mov	r2, fp
    549e:	4b8c      	ldr	r3, [pc, #560]	; (56d0 <__aeabi_ddiv+0x620>)
    54a0:	401a      	ands	r2, r3
    54a2:	4693      	mov	fp, r2
    54a4:	2280      	movs	r2, #128	; 0x80
    54a6:	00d2      	lsls	r2, r2, #3
    54a8:	4694      	mov	ip, r2
    54aa:	9b01      	ldr	r3, [sp, #4]
    54ac:	4463      	add	r3, ip
    54ae:	4a89      	ldr	r2, [pc, #548]	; (56d4 <__aeabi_ddiv+0x624>)
    54b0:	4293      	cmp	r3, r2
    54b2:	dd00      	ble.n	54b6 <__aeabi_ddiv+0x406>
    54b4:	e65b      	b.n	516e <__aeabi_ddiv+0xbe>
    54b6:	465a      	mov	r2, fp
    54b8:	08c9      	lsrs	r1, r1, #3
    54ba:	0750      	lsls	r0, r2, #29
    54bc:	4308      	orrs	r0, r1
    54be:	0256      	lsls	r6, r2, #9
    54c0:	4651      	mov	r1, sl
    54c2:	2201      	movs	r2, #1
    54c4:	055b      	lsls	r3, r3, #21
    54c6:	4681      	mov	r9, r0
    54c8:	0b36      	lsrs	r6, r6, #12
    54ca:	0d5b      	lsrs	r3, r3, #21
    54cc:	400a      	ands	r2, r1
    54ce:	e655      	b.n	517c <__aeabi_ddiv+0xcc>
    54d0:	2380      	movs	r3, #128	; 0x80
    54d2:	031b      	lsls	r3, r3, #12
    54d4:	421e      	tst	r6, r3
    54d6:	d011      	beq.n	54fc <__aeabi_ddiv+0x44c>
    54d8:	465a      	mov	r2, fp
    54da:	421a      	tst	r2, r3
    54dc:	d10e      	bne.n	54fc <__aeabi_ddiv+0x44c>
    54de:	465e      	mov	r6, fp
    54e0:	431e      	orrs	r6, r3
    54e2:	0336      	lsls	r6, r6, #12
    54e4:	0b36      	lsrs	r6, r6, #12
    54e6:	002a      	movs	r2, r5
    54e8:	4689      	mov	r9, r1
    54ea:	4b7b      	ldr	r3, [pc, #492]	; (56d8 <__aeabi_ddiv+0x628>)
    54ec:	e646      	b.n	517c <__aeabi_ddiv+0xcc>
    54ee:	2b03      	cmp	r3, #3
    54f0:	d100      	bne.n	54f4 <__aeabi_ddiv+0x444>
    54f2:	e0e1      	b.n	56b8 <__aeabi_ddiv+0x608>
    54f4:	2b01      	cmp	r3, #1
    54f6:	d1bb      	bne.n	5470 <__aeabi_ddiv+0x3c0>
    54f8:	401a      	ands	r2, r3
    54fa:	e6bb      	b.n	5274 <__aeabi_ddiv+0x1c4>
    54fc:	431e      	orrs	r6, r3
    54fe:	0336      	lsls	r6, r6, #12
    5500:	0b36      	lsrs	r6, r6, #12
    5502:	4642      	mov	r2, r8
    5504:	4b74      	ldr	r3, [pc, #464]	; (56d8 <__aeabi_ddiv+0x628>)
    5506:	e639      	b.n	517c <__aeabi_ddiv+0xcc>
    5508:	2b00      	cmp	r3, #0
    550a:	d0b1      	beq.n	5470 <__aeabi_ddiv+0x3c0>
    550c:	197d      	adds	r5, r7, r5
    550e:	1e4a      	subs	r2, r1, #1
    5510:	42af      	cmp	r7, r5
    5512:	d952      	bls.n	55ba <__aeabi_ddiv+0x50a>
    5514:	0011      	movs	r1, r2
    5516:	42a5      	cmp	r5, r4
    5518:	d1a8      	bne.n	546c <__aeabi_ddiv+0x3bc>
    551a:	9a03      	ldr	r2, [sp, #12]
    551c:	429a      	cmp	r2, r3
    551e:	d1a5      	bne.n	546c <__aeabi_ddiv+0x3bc>
    5520:	e7a6      	b.n	5470 <__aeabi_ddiv+0x3c0>
    5522:	0003      	movs	r3, r0
    5524:	003e      	movs	r6, r7
    5526:	3b28      	subs	r3, #40	; 0x28
    5528:	409e      	lsls	r6, r3
    552a:	2300      	movs	r3, #0
    552c:	4699      	mov	r9, r3
    552e:	e654      	b.n	51da <__aeabi_ddiv+0x12a>
    5530:	f000 ff10 	bl	6354 <__clzsi2>
    5534:	3020      	adds	r0, #32
    5536:	e641      	b.n	51bc <__aeabi_ddiv+0x10c>
    5538:	0003      	movs	r3, r0
    553a:	4652      	mov	r2, sl
    553c:	3b28      	subs	r3, #40	; 0x28
    553e:	409a      	lsls	r2, r3
    5540:	2100      	movs	r1, #0
    5542:	4693      	mov	fp, r2
    5544:	e677      	b.n	5236 <__aeabi_ddiv+0x186>
    5546:	4650      	mov	r0, sl
    5548:	f000 ff04 	bl	6354 <__clzsi2>
    554c:	3020      	adds	r0, #32
    554e:	e65e      	b.n	520e <__aeabi_ddiv+0x15e>
    5550:	9b02      	ldr	r3, [sp, #8]
    5552:	2600      	movs	r6, #0
    5554:	42ab      	cmp	r3, r5
    5556:	d300      	bcc.n	555a <__aeabi_ddiv+0x4aa>
    5558:	e723      	b.n	53a2 <__aeabi_ddiv+0x2f2>
    555a:	9e03      	ldr	r6, [sp, #12]
    555c:	9902      	ldr	r1, [sp, #8]
    555e:	46b4      	mov	ip, r6
    5560:	4461      	add	r1, ip
    5562:	4688      	mov	r8, r1
    5564:	45b0      	cmp	r8, r6
    5566:	41b6      	sbcs	r6, r6
    5568:	465b      	mov	r3, fp
    556a:	4276      	negs	r6, r6
    556c:	19f6      	adds	r6, r6, r7
    556e:	18b2      	adds	r2, r6, r2
    5570:	3b01      	subs	r3, #1
    5572:	9102      	str	r1, [sp, #8]
    5574:	4297      	cmp	r7, r2
    5576:	d213      	bcs.n	55a0 <__aeabi_ddiv+0x4f0>
    5578:	4290      	cmp	r0, r2
    557a:	d84f      	bhi.n	561c <__aeabi_ddiv+0x56c>
    557c:	d100      	bne.n	5580 <__aeabi_ddiv+0x4d0>
    557e:	e08e      	b.n	569e <__aeabi_ddiv+0x5ee>
    5580:	1a16      	subs	r6, r2, r0
    5582:	469b      	mov	fp, r3
    5584:	e70d      	b.n	53a2 <__aeabi_ddiv+0x2f2>
    5586:	4589      	cmp	r9, r1
    5588:	d200      	bcs.n	558c <__aeabi_ddiv+0x4dc>
    558a:	e68e      	b.n	52aa <__aeabi_ddiv+0x1fa>
    558c:	0874      	lsrs	r4, r6, #1
    558e:	464b      	mov	r3, r9
    5590:	07f6      	lsls	r6, r6, #31
    5592:	0035      	movs	r5, r6
    5594:	085b      	lsrs	r3, r3, #1
    5596:	431d      	orrs	r5, r3
    5598:	464b      	mov	r3, r9
    559a:	07db      	lsls	r3, r3, #31
    559c:	9302      	str	r3, [sp, #8]
    559e:	e68b      	b.n	52b8 <__aeabi_ddiv+0x208>
    55a0:	4297      	cmp	r7, r2
    55a2:	d1ed      	bne.n	5580 <__aeabi_ddiv+0x4d0>
    55a4:	9903      	ldr	r1, [sp, #12]
    55a6:	9c02      	ldr	r4, [sp, #8]
    55a8:	42a1      	cmp	r1, r4
    55aa:	d9e5      	bls.n	5578 <__aeabi_ddiv+0x4c8>
    55ac:	1a3e      	subs	r6, r7, r0
    55ae:	469b      	mov	fp, r3
    55b0:	e6f7      	b.n	53a2 <__aeabi_ddiv+0x2f2>
    55b2:	4698      	mov	r8, r3
    55b4:	e6ca      	b.n	534c <__aeabi_ddiv+0x29c>
    55b6:	001e      	movs	r6, r3
    55b8:	e6a5      	b.n	5306 <__aeabi_ddiv+0x256>
    55ba:	42ac      	cmp	r4, r5
    55bc:	d83e      	bhi.n	563c <__aeabi_ddiv+0x58c>
    55be:	d074      	beq.n	56aa <__aeabi_ddiv+0x5fa>
    55c0:	0011      	movs	r1, r2
    55c2:	e753      	b.n	546c <__aeabi_ddiv+0x3bc>
    55c4:	2101      	movs	r1, #1
    55c6:	4249      	negs	r1, r1
    55c8:	e752      	b.n	5470 <__aeabi_ddiv+0x3c0>
    55ca:	001c      	movs	r4, r3
    55cc:	e70e      	b.n	53ec <__aeabi_ddiv+0x33c>
    55ce:	001e      	movs	r6, r3
    55d0:	e72b      	b.n	542a <__aeabi_ddiv+0x37a>
    55d2:	2d1f      	cmp	r5, #31
    55d4:	dc3c      	bgt.n	5650 <__aeabi_ddiv+0x5a0>
    55d6:	2320      	movs	r3, #32
    55d8:	000a      	movs	r2, r1
    55da:	4658      	mov	r0, fp
    55dc:	1b5b      	subs	r3, r3, r5
    55de:	4098      	lsls	r0, r3
    55e0:	40ea      	lsrs	r2, r5
    55e2:	4099      	lsls	r1, r3
    55e4:	4302      	orrs	r2, r0
    55e6:	1e48      	subs	r0, r1, #1
    55e8:	4181      	sbcs	r1, r0
    55ea:	465e      	mov	r6, fp
    55ec:	4311      	orrs	r1, r2
    55ee:	40ee      	lsrs	r6, r5
    55f0:	074b      	lsls	r3, r1, #29
    55f2:	d009      	beq.n	5608 <__aeabi_ddiv+0x558>
    55f4:	230f      	movs	r3, #15
    55f6:	400b      	ands	r3, r1
    55f8:	2b04      	cmp	r3, #4
    55fa:	d005      	beq.n	5608 <__aeabi_ddiv+0x558>
    55fc:	000b      	movs	r3, r1
    55fe:	1d19      	adds	r1, r3, #4
    5600:	4299      	cmp	r1, r3
    5602:	419b      	sbcs	r3, r3
    5604:	425b      	negs	r3, r3
    5606:	18f6      	adds	r6, r6, r3
    5608:	0233      	lsls	r3, r6, #8
    560a:	d53c      	bpl.n	5686 <__aeabi_ddiv+0x5d6>
    560c:	4653      	mov	r3, sl
    560e:	2201      	movs	r2, #1
    5610:	2100      	movs	r1, #0
    5612:	401a      	ands	r2, r3
    5614:	2600      	movs	r6, #0
    5616:	2301      	movs	r3, #1
    5618:	4689      	mov	r9, r1
    561a:	e5af      	b.n	517c <__aeabi_ddiv+0xcc>
    561c:	2302      	movs	r3, #2
    561e:	425b      	negs	r3, r3
    5620:	469c      	mov	ip, r3
    5622:	9c03      	ldr	r4, [sp, #12]
    5624:	44e3      	add	fp, ip
    5626:	46a4      	mov	ip, r4
    5628:	9b02      	ldr	r3, [sp, #8]
    562a:	4463      	add	r3, ip
    562c:	4698      	mov	r8, r3
    562e:	45a0      	cmp	r8, r4
    5630:	41b6      	sbcs	r6, r6
    5632:	4276      	negs	r6, r6
    5634:	19f6      	adds	r6, r6, r7
    5636:	9302      	str	r3, [sp, #8]
    5638:	18b2      	adds	r2, r6, r2
    563a:	e6b1      	b.n	53a0 <__aeabi_ddiv+0x2f0>
    563c:	9803      	ldr	r0, [sp, #12]
    563e:	1e8a      	subs	r2, r1, #2
    5640:	0041      	lsls	r1, r0, #1
    5642:	4281      	cmp	r1, r0
    5644:	41b6      	sbcs	r6, r6
    5646:	4276      	negs	r6, r6
    5648:	19f6      	adds	r6, r6, r7
    564a:	19ad      	adds	r5, r5, r6
    564c:	9103      	str	r1, [sp, #12]
    564e:	e761      	b.n	5514 <__aeabi_ddiv+0x464>
    5650:	221f      	movs	r2, #31
    5652:	4252      	negs	r2, r2
    5654:	1ad3      	subs	r3, r2, r3
    5656:	465a      	mov	r2, fp
    5658:	40da      	lsrs	r2, r3
    565a:	0013      	movs	r3, r2
    565c:	2d20      	cmp	r5, #32
    565e:	d029      	beq.n	56b4 <__aeabi_ddiv+0x604>
    5660:	2240      	movs	r2, #64	; 0x40
    5662:	4658      	mov	r0, fp
    5664:	1b55      	subs	r5, r2, r5
    5666:	40a8      	lsls	r0, r5
    5668:	4301      	orrs	r1, r0
    566a:	1e48      	subs	r0, r1, #1
    566c:	4181      	sbcs	r1, r0
    566e:	2007      	movs	r0, #7
    5670:	430b      	orrs	r3, r1
    5672:	4018      	ands	r0, r3
    5674:	2600      	movs	r6, #0
    5676:	2800      	cmp	r0, #0
    5678:	d009      	beq.n	568e <__aeabi_ddiv+0x5de>
    567a:	220f      	movs	r2, #15
    567c:	2600      	movs	r6, #0
    567e:	401a      	ands	r2, r3
    5680:	0019      	movs	r1, r3
    5682:	2a04      	cmp	r2, #4
    5684:	d1bb      	bne.n	55fe <__aeabi_ddiv+0x54e>
    5686:	000b      	movs	r3, r1
    5688:	0770      	lsls	r0, r6, #29
    568a:	0276      	lsls	r6, r6, #9
    568c:	0b36      	lsrs	r6, r6, #12
    568e:	08db      	lsrs	r3, r3, #3
    5690:	4303      	orrs	r3, r0
    5692:	4699      	mov	r9, r3
    5694:	2201      	movs	r2, #1
    5696:	4653      	mov	r3, sl
    5698:	401a      	ands	r2, r3
    569a:	2300      	movs	r3, #0
    569c:	e56e      	b.n	517c <__aeabi_ddiv+0xcc>
    569e:	9902      	ldr	r1, [sp, #8]
    56a0:	428d      	cmp	r5, r1
    56a2:	d8bb      	bhi.n	561c <__aeabi_ddiv+0x56c>
    56a4:	469b      	mov	fp, r3
    56a6:	2600      	movs	r6, #0
    56a8:	e67b      	b.n	53a2 <__aeabi_ddiv+0x2f2>
    56aa:	9803      	ldr	r0, [sp, #12]
    56ac:	4298      	cmp	r0, r3
    56ae:	d3c5      	bcc.n	563c <__aeabi_ddiv+0x58c>
    56b0:	0011      	movs	r1, r2
    56b2:	e732      	b.n	551a <__aeabi_ddiv+0x46a>
    56b4:	2000      	movs	r0, #0
    56b6:	e7d7      	b.n	5668 <__aeabi_ddiv+0x5b8>
    56b8:	2680      	movs	r6, #128	; 0x80
    56ba:	465b      	mov	r3, fp
    56bc:	0336      	lsls	r6, r6, #12
    56be:	431e      	orrs	r6, r3
    56c0:	0336      	lsls	r6, r6, #12
    56c2:	0b36      	lsrs	r6, r6, #12
    56c4:	9a00      	ldr	r2, [sp, #0]
    56c6:	4689      	mov	r9, r1
    56c8:	4b03      	ldr	r3, [pc, #12]	; (56d8 <__aeabi_ddiv+0x628>)
    56ca:	e557      	b.n	517c <__aeabi_ddiv+0xcc>
    56cc:	000003ff 	.word	0x000003ff
    56d0:	feffffff 	.word	0xfeffffff
    56d4:	000007fe 	.word	0x000007fe
    56d8:	000007ff 	.word	0x000007ff

000056dc <__aeabi_dmul>:
    56dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    56de:	465f      	mov	r7, fp
    56e0:	4656      	mov	r6, sl
    56e2:	464d      	mov	r5, r9
    56e4:	4644      	mov	r4, r8
    56e6:	b4f0      	push	{r4, r5, r6, r7}
    56e8:	030d      	lsls	r5, r1, #12
    56ea:	4699      	mov	r9, r3
    56ec:	004e      	lsls	r6, r1, #1
    56ee:	0b2b      	lsrs	r3, r5, #12
    56f0:	b087      	sub	sp, #28
    56f2:	0007      	movs	r7, r0
    56f4:	4692      	mov	sl, r2
    56f6:	4680      	mov	r8, r0
    56f8:	469b      	mov	fp, r3
    56fa:	0d76      	lsrs	r6, r6, #21
    56fc:	0fcc      	lsrs	r4, r1, #31
    56fe:	2e00      	cmp	r6, #0
    5700:	d069      	beq.n	57d6 <__aeabi_dmul+0xfa>
    5702:	4b6d      	ldr	r3, [pc, #436]	; (58b8 <__aeabi_dmul+0x1dc>)
    5704:	429e      	cmp	r6, r3
    5706:	d035      	beq.n	5774 <__aeabi_dmul+0x98>
    5708:	465b      	mov	r3, fp
    570a:	2280      	movs	r2, #128	; 0x80
    570c:	00dd      	lsls	r5, r3, #3
    570e:	0412      	lsls	r2, r2, #16
    5710:	0f43      	lsrs	r3, r0, #29
    5712:	4313      	orrs	r3, r2
    5714:	432b      	orrs	r3, r5
    5716:	469b      	mov	fp, r3
    5718:	00c3      	lsls	r3, r0, #3
    571a:	4698      	mov	r8, r3
    571c:	4b67      	ldr	r3, [pc, #412]	; (58bc <__aeabi_dmul+0x1e0>)
    571e:	2700      	movs	r7, #0
    5720:	469c      	mov	ip, r3
    5722:	2300      	movs	r3, #0
    5724:	4466      	add	r6, ip
    5726:	9301      	str	r3, [sp, #4]
    5728:	464a      	mov	r2, r9
    572a:	0315      	lsls	r5, r2, #12
    572c:	0050      	lsls	r0, r2, #1
    572e:	0fd2      	lsrs	r2, r2, #31
    5730:	4653      	mov	r3, sl
    5732:	0b2d      	lsrs	r5, r5, #12
    5734:	0d40      	lsrs	r0, r0, #21
    5736:	4691      	mov	r9, r2
    5738:	d100      	bne.n	573c <__aeabi_dmul+0x60>
    573a:	e076      	b.n	582a <__aeabi_dmul+0x14e>
    573c:	4a5e      	ldr	r2, [pc, #376]	; (58b8 <__aeabi_dmul+0x1dc>)
    573e:	4290      	cmp	r0, r2
    5740:	d06c      	beq.n	581c <__aeabi_dmul+0x140>
    5742:	2280      	movs	r2, #128	; 0x80
    5744:	0f5b      	lsrs	r3, r3, #29
    5746:	0412      	lsls	r2, r2, #16
    5748:	4313      	orrs	r3, r2
    574a:	4a5c      	ldr	r2, [pc, #368]	; (58bc <__aeabi_dmul+0x1e0>)
    574c:	00ed      	lsls	r5, r5, #3
    574e:	4694      	mov	ip, r2
    5750:	431d      	orrs	r5, r3
    5752:	4653      	mov	r3, sl
    5754:	2200      	movs	r2, #0
    5756:	00db      	lsls	r3, r3, #3
    5758:	4460      	add	r0, ip
    575a:	4649      	mov	r1, r9
    575c:	1836      	adds	r6, r6, r0
    575e:	1c70      	adds	r0, r6, #1
    5760:	4061      	eors	r1, r4
    5762:	9002      	str	r0, [sp, #8]
    5764:	4317      	orrs	r7, r2
    5766:	2f0f      	cmp	r7, #15
    5768:	d900      	bls.n	576c <__aeabi_dmul+0x90>
    576a:	e0af      	b.n	58cc <__aeabi_dmul+0x1f0>
    576c:	4854      	ldr	r0, [pc, #336]	; (58c0 <__aeabi_dmul+0x1e4>)
    576e:	00bf      	lsls	r7, r7, #2
    5770:	59c7      	ldr	r7, [r0, r7]
    5772:	46bf      	mov	pc, r7
    5774:	465b      	mov	r3, fp
    5776:	431f      	orrs	r7, r3
    5778:	d000      	beq.n	577c <__aeabi_dmul+0xa0>
    577a:	e088      	b.n	588e <__aeabi_dmul+0x1b2>
    577c:	2300      	movs	r3, #0
    577e:	469b      	mov	fp, r3
    5780:	4698      	mov	r8, r3
    5782:	3302      	adds	r3, #2
    5784:	2708      	movs	r7, #8
    5786:	9301      	str	r3, [sp, #4]
    5788:	e7ce      	b.n	5728 <__aeabi_dmul+0x4c>
    578a:	4649      	mov	r1, r9
    578c:	2a02      	cmp	r2, #2
    578e:	d06a      	beq.n	5866 <__aeabi_dmul+0x18a>
    5790:	2a03      	cmp	r2, #3
    5792:	d100      	bne.n	5796 <__aeabi_dmul+0xba>
    5794:	e209      	b.n	5baa <__aeabi_dmul+0x4ce>
    5796:	2a01      	cmp	r2, #1
    5798:	d000      	beq.n	579c <__aeabi_dmul+0xc0>
    579a:	e1bb      	b.n	5b14 <__aeabi_dmul+0x438>
    579c:	4011      	ands	r1, r2
    579e:	2200      	movs	r2, #0
    57a0:	2300      	movs	r3, #0
    57a2:	2500      	movs	r5, #0
    57a4:	4690      	mov	r8, r2
    57a6:	b2cc      	uxtb	r4, r1
    57a8:	2100      	movs	r1, #0
    57aa:	032d      	lsls	r5, r5, #12
    57ac:	0d0a      	lsrs	r2, r1, #20
    57ae:	0512      	lsls	r2, r2, #20
    57b0:	0b2d      	lsrs	r5, r5, #12
    57b2:	4315      	orrs	r5, r2
    57b4:	4a43      	ldr	r2, [pc, #268]	; (58c4 <__aeabi_dmul+0x1e8>)
    57b6:	051b      	lsls	r3, r3, #20
    57b8:	4015      	ands	r5, r2
    57ba:	431d      	orrs	r5, r3
    57bc:	006d      	lsls	r5, r5, #1
    57be:	07e4      	lsls	r4, r4, #31
    57c0:	086d      	lsrs	r5, r5, #1
    57c2:	4325      	orrs	r5, r4
    57c4:	4640      	mov	r0, r8
    57c6:	0029      	movs	r1, r5
    57c8:	b007      	add	sp, #28
    57ca:	bc3c      	pop	{r2, r3, r4, r5}
    57cc:	4690      	mov	r8, r2
    57ce:	4699      	mov	r9, r3
    57d0:	46a2      	mov	sl, r4
    57d2:	46ab      	mov	fp, r5
    57d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57d6:	4303      	orrs	r3, r0
    57d8:	d052      	beq.n	5880 <__aeabi_dmul+0x1a4>
    57da:	465b      	mov	r3, fp
    57dc:	2b00      	cmp	r3, #0
    57de:	d100      	bne.n	57e2 <__aeabi_dmul+0x106>
    57e0:	e18a      	b.n	5af8 <__aeabi_dmul+0x41c>
    57e2:	4658      	mov	r0, fp
    57e4:	f000 fdb6 	bl	6354 <__clzsi2>
    57e8:	0003      	movs	r3, r0
    57ea:	3b0b      	subs	r3, #11
    57ec:	2b1c      	cmp	r3, #28
    57ee:	dd00      	ble.n	57f2 <__aeabi_dmul+0x116>
    57f0:	e17b      	b.n	5aea <__aeabi_dmul+0x40e>
    57f2:	221d      	movs	r2, #29
    57f4:	1ad3      	subs	r3, r2, r3
    57f6:	003a      	movs	r2, r7
    57f8:	0001      	movs	r1, r0
    57fa:	465d      	mov	r5, fp
    57fc:	40da      	lsrs	r2, r3
    57fe:	3908      	subs	r1, #8
    5800:	408d      	lsls	r5, r1
    5802:	0013      	movs	r3, r2
    5804:	408f      	lsls	r7, r1
    5806:	432b      	orrs	r3, r5
    5808:	469b      	mov	fp, r3
    580a:	46b8      	mov	r8, r7
    580c:	4b2e      	ldr	r3, [pc, #184]	; (58c8 <__aeabi_dmul+0x1ec>)
    580e:	2700      	movs	r7, #0
    5810:	469c      	mov	ip, r3
    5812:	2300      	movs	r3, #0
    5814:	4460      	add	r0, ip
    5816:	4246      	negs	r6, r0
    5818:	9301      	str	r3, [sp, #4]
    581a:	e785      	b.n	5728 <__aeabi_dmul+0x4c>
    581c:	4652      	mov	r2, sl
    581e:	432a      	orrs	r2, r5
    5820:	d12c      	bne.n	587c <__aeabi_dmul+0x1a0>
    5822:	2500      	movs	r5, #0
    5824:	2300      	movs	r3, #0
    5826:	2202      	movs	r2, #2
    5828:	e797      	b.n	575a <__aeabi_dmul+0x7e>
    582a:	4652      	mov	r2, sl
    582c:	432a      	orrs	r2, r5
    582e:	d021      	beq.n	5874 <__aeabi_dmul+0x198>
    5830:	2d00      	cmp	r5, #0
    5832:	d100      	bne.n	5836 <__aeabi_dmul+0x15a>
    5834:	e154      	b.n	5ae0 <__aeabi_dmul+0x404>
    5836:	0028      	movs	r0, r5
    5838:	f000 fd8c 	bl	6354 <__clzsi2>
    583c:	0003      	movs	r3, r0
    583e:	3b0b      	subs	r3, #11
    5840:	2b1c      	cmp	r3, #28
    5842:	dd00      	ble.n	5846 <__aeabi_dmul+0x16a>
    5844:	e146      	b.n	5ad4 <__aeabi_dmul+0x3f8>
    5846:	211d      	movs	r1, #29
    5848:	1acb      	subs	r3, r1, r3
    584a:	4651      	mov	r1, sl
    584c:	0002      	movs	r2, r0
    584e:	40d9      	lsrs	r1, r3
    5850:	4653      	mov	r3, sl
    5852:	3a08      	subs	r2, #8
    5854:	4095      	lsls	r5, r2
    5856:	4093      	lsls	r3, r2
    5858:	430d      	orrs	r5, r1
    585a:	4a1b      	ldr	r2, [pc, #108]	; (58c8 <__aeabi_dmul+0x1ec>)
    585c:	4694      	mov	ip, r2
    585e:	4460      	add	r0, ip
    5860:	4240      	negs	r0, r0
    5862:	2200      	movs	r2, #0
    5864:	e779      	b.n	575a <__aeabi_dmul+0x7e>
    5866:	2401      	movs	r4, #1
    5868:	2200      	movs	r2, #0
    586a:	400c      	ands	r4, r1
    586c:	4b12      	ldr	r3, [pc, #72]	; (58b8 <__aeabi_dmul+0x1dc>)
    586e:	2500      	movs	r5, #0
    5870:	4690      	mov	r8, r2
    5872:	e799      	b.n	57a8 <__aeabi_dmul+0xcc>
    5874:	2500      	movs	r5, #0
    5876:	2300      	movs	r3, #0
    5878:	2201      	movs	r2, #1
    587a:	e76e      	b.n	575a <__aeabi_dmul+0x7e>
    587c:	2203      	movs	r2, #3
    587e:	e76c      	b.n	575a <__aeabi_dmul+0x7e>
    5880:	2300      	movs	r3, #0
    5882:	469b      	mov	fp, r3
    5884:	4698      	mov	r8, r3
    5886:	3301      	adds	r3, #1
    5888:	2704      	movs	r7, #4
    588a:	9301      	str	r3, [sp, #4]
    588c:	e74c      	b.n	5728 <__aeabi_dmul+0x4c>
    588e:	2303      	movs	r3, #3
    5890:	270c      	movs	r7, #12
    5892:	9301      	str	r3, [sp, #4]
    5894:	e748      	b.n	5728 <__aeabi_dmul+0x4c>
    5896:	2300      	movs	r3, #0
    5898:	2580      	movs	r5, #128	; 0x80
    589a:	4698      	mov	r8, r3
    589c:	2400      	movs	r4, #0
    589e:	032d      	lsls	r5, r5, #12
    58a0:	4b05      	ldr	r3, [pc, #20]	; (58b8 <__aeabi_dmul+0x1dc>)
    58a2:	e781      	b.n	57a8 <__aeabi_dmul+0xcc>
    58a4:	465d      	mov	r5, fp
    58a6:	4643      	mov	r3, r8
    58a8:	9a01      	ldr	r2, [sp, #4]
    58aa:	e76f      	b.n	578c <__aeabi_dmul+0xb0>
    58ac:	465d      	mov	r5, fp
    58ae:	4643      	mov	r3, r8
    58b0:	0021      	movs	r1, r4
    58b2:	9a01      	ldr	r2, [sp, #4]
    58b4:	e76a      	b.n	578c <__aeabi_dmul+0xb0>
    58b6:	46c0      	nop			; (mov r8, r8)
    58b8:	000007ff 	.word	0x000007ff
    58bc:	fffffc01 	.word	0xfffffc01
    58c0:	00006ddc 	.word	0x00006ddc
    58c4:	800fffff 	.word	0x800fffff
    58c8:	000003f3 	.word	0x000003f3
    58cc:	4642      	mov	r2, r8
    58ce:	0c12      	lsrs	r2, r2, #16
    58d0:	4691      	mov	r9, r2
    58d2:	0c1a      	lsrs	r2, r3, #16
    58d4:	4694      	mov	ip, r2
    58d6:	4642      	mov	r2, r8
    58d8:	0417      	lsls	r7, r2, #16
    58da:	464a      	mov	r2, r9
    58dc:	041b      	lsls	r3, r3, #16
    58de:	0c1b      	lsrs	r3, r3, #16
    58e0:	435a      	muls	r2, r3
    58e2:	4660      	mov	r0, ip
    58e4:	4690      	mov	r8, r2
    58e6:	464a      	mov	r2, r9
    58e8:	4342      	muls	r2, r0
    58ea:	0010      	movs	r0, r2
    58ec:	9203      	str	r2, [sp, #12]
    58ee:	4662      	mov	r2, ip
    58f0:	001c      	movs	r4, r3
    58f2:	0c3f      	lsrs	r7, r7, #16
    58f4:	437a      	muls	r2, r7
    58f6:	437c      	muls	r4, r7
    58f8:	4442      	add	r2, r8
    58fa:	9201      	str	r2, [sp, #4]
    58fc:	0c22      	lsrs	r2, r4, #16
    58fe:	4692      	mov	sl, r2
    5900:	9a01      	ldr	r2, [sp, #4]
    5902:	4452      	add	r2, sl
    5904:	4590      	cmp	r8, r2
    5906:	d906      	bls.n	5916 <__aeabi_dmul+0x23a>
    5908:	4682      	mov	sl, r0
    590a:	2080      	movs	r0, #128	; 0x80
    590c:	0240      	lsls	r0, r0, #9
    590e:	4680      	mov	r8, r0
    5910:	44c2      	add	sl, r8
    5912:	4650      	mov	r0, sl
    5914:	9003      	str	r0, [sp, #12]
    5916:	0c10      	lsrs	r0, r2, #16
    5918:	9004      	str	r0, [sp, #16]
    591a:	4648      	mov	r0, r9
    591c:	0424      	lsls	r4, r4, #16
    591e:	0c24      	lsrs	r4, r4, #16
    5920:	0412      	lsls	r2, r2, #16
    5922:	1912      	adds	r2, r2, r4
    5924:	9205      	str	r2, [sp, #20]
    5926:	0c2a      	lsrs	r2, r5, #16
    5928:	042d      	lsls	r5, r5, #16
    592a:	0c2d      	lsrs	r5, r5, #16
    592c:	4368      	muls	r0, r5
    592e:	002c      	movs	r4, r5
    5930:	4682      	mov	sl, r0
    5932:	4648      	mov	r0, r9
    5934:	437c      	muls	r4, r7
    5936:	4350      	muls	r0, r2
    5938:	4681      	mov	r9, r0
    593a:	0c20      	lsrs	r0, r4, #16
    593c:	4680      	mov	r8, r0
    593e:	4357      	muls	r7, r2
    5940:	4457      	add	r7, sl
    5942:	4447      	add	r7, r8
    5944:	45ba      	cmp	sl, r7
    5946:	d903      	bls.n	5950 <__aeabi_dmul+0x274>
    5948:	2080      	movs	r0, #128	; 0x80
    594a:	0240      	lsls	r0, r0, #9
    594c:	4680      	mov	r8, r0
    594e:	44c1      	add	r9, r8
    5950:	0c38      	lsrs	r0, r7, #16
    5952:	043f      	lsls	r7, r7, #16
    5954:	46b8      	mov	r8, r7
    5956:	4448      	add	r0, r9
    5958:	0424      	lsls	r4, r4, #16
    595a:	0c24      	lsrs	r4, r4, #16
    595c:	9001      	str	r0, [sp, #4]
    595e:	9804      	ldr	r0, [sp, #16]
    5960:	44a0      	add	r8, r4
    5962:	4440      	add	r0, r8
    5964:	9004      	str	r0, [sp, #16]
    5966:	4658      	mov	r0, fp
    5968:	0c00      	lsrs	r0, r0, #16
    596a:	4681      	mov	r9, r0
    596c:	4658      	mov	r0, fp
    596e:	0404      	lsls	r4, r0, #16
    5970:	0c20      	lsrs	r0, r4, #16
    5972:	4682      	mov	sl, r0
    5974:	0007      	movs	r7, r0
    5976:	4648      	mov	r0, r9
    5978:	435f      	muls	r7, r3
    597a:	464c      	mov	r4, r9
    597c:	4343      	muls	r3, r0
    597e:	4660      	mov	r0, ip
    5980:	4360      	muls	r0, r4
    5982:	4664      	mov	r4, ip
    5984:	4683      	mov	fp, r0
    5986:	4650      	mov	r0, sl
    5988:	4344      	muls	r4, r0
    598a:	0c38      	lsrs	r0, r7, #16
    598c:	4684      	mov	ip, r0
    598e:	18e4      	adds	r4, r4, r3
    5990:	4464      	add	r4, ip
    5992:	42a3      	cmp	r3, r4
    5994:	d903      	bls.n	599e <__aeabi_dmul+0x2c2>
    5996:	2380      	movs	r3, #128	; 0x80
    5998:	025b      	lsls	r3, r3, #9
    599a:	469c      	mov	ip, r3
    599c:	44e3      	add	fp, ip
    599e:	4648      	mov	r0, r9
    59a0:	043f      	lsls	r7, r7, #16
    59a2:	0c23      	lsrs	r3, r4, #16
    59a4:	0c3f      	lsrs	r7, r7, #16
    59a6:	0424      	lsls	r4, r4, #16
    59a8:	19e4      	adds	r4, r4, r7
    59aa:	4657      	mov	r7, sl
    59ac:	4368      	muls	r0, r5
    59ae:	436f      	muls	r7, r5
    59b0:	4684      	mov	ip, r0
    59b2:	464d      	mov	r5, r9
    59b4:	4650      	mov	r0, sl
    59b6:	4355      	muls	r5, r2
    59b8:	4342      	muls	r2, r0
    59ba:	0c38      	lsrs	r0, r7, #16
    59bc:	4681      	mov	r9, r0
    59be:	4462      	add	r2, ip
    59c0:	444a      	add	r2, r9
    59c2:	445b      	add	r3, fp
    59c4:	4594      	cmp	ip, r2
    59c6:	d903      	bls.n	59d0 <__aeabi_dmul+0x2f4>
    59c8:	2080      	movs	r0, #128	; 0x80
    59ca:	0240      	lsls	r0, r0, #9
    59cc:	4684      	mov	ip, r0
    59ce:	4465      	add	r5, ip
    59d0:	9803      	ldr	r0, [sp, #12]
    59d2:	043f      	lsls	r7, r7, #16
    59d4:	4683      	mov	fp, r0
    59d6:	9804      	ldr	r0, [sp, #16]
    59d8:	0c3f      	lsrs	r7, r7, #16
    59da:	4684      	mov	ip, r0
    59dc:	44e3      	add	fp, ip
    59de:	45c3      	cmp	fp, r8
    59e0:	4180      	sbcs	r0, r0
    59e2:	4240      	negs	r0, r0
    59e4:	4682      	mov	sl, r0
    59e6:	0410      	lsls	r0, r2, #16
    59e8:	4684      	mov	ip, r0
    59ea:	9801      	ldr	r0, [sp, #4]
    59ec:	4467      	add	r7, ip
    59ee:	4684      	mov	ip, r0
    59f0:	4467      	add	r7, ip
    59f2:	44a3      	add	fp, r4
    59f4:	46bc      	mov	ip, r7
    59f6:	45a3      	cmp	fp, r4
    59f8:	41a4      	sbcs	r4, r4
    59fa:	4699      	mov	r9, r3
    59fc:	44d4      	add	ip, sl
    59fe:	4264      	negs	r4, r4
    5a00:	4287      	cmp	r7, r0
    5a02:	41bf      	sbcs	r7, r7
    5a04:	45d4      	cmp	ip, sl
    5a06:	4180      	sbcs	r0, r0
    5a08:	44e1      	add	r9, ip
    5a0a:	46a0      	mov	r8, r4
    5a0c:	4599      	cmp	r9, r3
    5a0e:	419b      	sbcs	r3, r3
    5a10:	427f      	negs	r7, r7
    5a12:	4240      	negs	r0, r0
    5a14:	44c8      	add	r8, r9
    5a16:	4307      	orrs	r7, r0
    5a18:	0c12      	lsrs	r2, r2, #16
    5a1a:	18ba      	adds	r2, r7, r2
    5a1c:	45a0      	cmp	r8, r4
    5a1e:	41a4      	sbcs	r4, r4
    5a20:	425f      	negs	r7, r3
    5a22:	003b      	movs	r3, r7
    5a24:	4264      	negs	r4, r4
    5a26:	4323      	orrs	r3, r4
    5a28:	18d7      	adds	r7, r2, r3
    5a2a:	4643      	mov	r3, r8
    5a2c:	197d      	adds	r5, r7, r5
    5a2e:	0ddb      	lsrs	r3, r3, #23
    5a30:	026d      	lsls	r5, r5, #9
    5a32:	431d      	orrs	r5, r3
    5a34:	465b      	mov	r3, fp
    5a36:	025a      	lsls	r2, r3, #9
    5a38:	9b05      	ldr	r3, [sp, #20]
    5a3a:	431a      	orrs	r2, r3
    5a3c:	1e53      	subs	r3, r2, #1
    5a3e:	419a      	sbcs	r2, r3
    5a40:	465b      	mov	r3, fp
    5a42:	0ddb      	lsrs	r3, r3, #23
    5a44:	431a      	orrs	r2, r3
    5a46:	4643      	mov	r3, r8
    5a48:	025b      	lsls	r3, r3, #9
    5a4a:	4313      	orrs	r3, r2
    5a4c:	01ea      	lsls	r2, r5, #7
    5a4e:	d507      	bpl.n	5a60 <__aeabi_dmul+0x384>
    5a50:	2201      	movs	r2, #1
    5a52:	085c      	lsrs	r4, r3, #1
    5a54:	4013      	ands	r3, r2
    5a56:	4323      	orrs	r3, r4
    5a58:	07ea      	lsls	r2, r5, #31
    5a5a:	9e02      	ldr	r6, [sp, #8]
    5a5c:	4313      	orrs	r3, r2
    5a5e:	086d      	lsrs	r5, r5, #1
    5a60:	4a57      	ldr	r2, [pc, #348]	; (5bc0 <__aeabi_dmul+0x4e4>)
    5a62:	18b2      	adds	r2, r6, r2
    5a64:	2a00      	cmp	r2, #0
    5a66:	dd4b      	ble.n	5b00 <__aeabi_dmul+0x424>
    5a68:	0758      	lsls	r0, r3, #29
    5a6a:	d009      	beq.n	5a80 <__aeabi_dmul+0x3a4>
    5a6c:	200f      	movs	r0, #15
    5a6e:	4018      	ands	r0, r3
    5a70:	2804      	cmp	r0, #4
    5a72:	d005      	beq.n	5a80 <__aeabi_dmul+0x3a4>
    5a74:	1d18      	adds	r0, r3, #4
    5a76:	4298      	cmp	r0, r3
    5a78:	419b      	sbcs	r3, r3
    5a7a:	425b      	negs	r3, r3
    5a7c:	18ed      	adds	r5, r5, r3
    5a7e:	0003      	movs	r3, r0
    5a80:	01e8      	lsls	r0, r5, #7
    5a82:	d504      	bpl.n	5a8e <__aeabi_dmul+0x3b2>
    5a84:	4a4f      	ldr	r2, [pc, #316]	; (5bc4 <__aeabi_dmul+0x4e8>)
    5a86:	4015      	ands	r5, r2
    5a88:	2280      	movs	r2, #128	; 0x80
    5a8a:	00d2      	lsls	r2, r2, #3
    5a8c:	18b2      	adds	r2, r6, r2
    5a8e:	484e      	ldr	r0, [pc, #312]	; (5bc8 <__aeabi_dmul+0x4ec>)
    5a90:	4282      	cmp	r2, r0
    5a92:	dd00      	ble.n	5a96 <__aeabi_dmul+0x3ba>
    5a94:	e6e7      	b.n	5866 <__aeabi_dmul+0x18a>
    5a96:	2401      	movs	r4, #1
    5a98:	08db      	lsrs	r3, r3, #3
    5a9a:	0768      	lsls	r0, r5, #29
    5a9c:	4318      	orrs	r0, r3
    5a9e:	026d      	lsls	r5, r5, #9
    5aa0:	0553      	lsls	r3, r2, #21
    5aa2:	4680      	mov	r8, r0
    5aa4:	0b2d      	lsrs	r5, r5, #12
    5aa6:	0d5b      	lsrs	r3, r3, #21
    5aa8:	400c      	ands	r4, r1
    5aaa:	e67d      	b.n	57a8 <__aeabi_dmul+0xcc>
    5aac:	2280      	movs	r2, #128	; 0x80
    5aae:	4659      	mov	r1, fp
    5ab0:	0312      	lsls	r2, r2, #12
    5ab2:	4211      	tst	r1, r2
    5ab4:	d008      	beq.n	5ac8 <__aeabi_dmul+0x3ec>
    5ab6:	4215      	tst	r5, r2
    5ab8:	d106      	bne.n	5ac8 <__aeabi_dmul+0x3ec>
    5aba:	4315      	orrs	r5, r2
    5abc:	032d      	lsls	r5, r5, #12
    5abe:	4698      	mov	r8, r3
    5ac0:	0b2d      	lsrs	r5, r5, #12
    5ac2:	464c      	mov	r4, r9
    5ac4:	4b41      	ldr	r3, [pc, #260]	; (5bcc <__aeabi_dmul+0x4f0>)
    5ac6:	e66f      	b.n	57a8 <__aeabi_dmul+0xcc>
    5ac8:	465d      	mov	r5, fp
    5aca:	4315      	orrs	r5, r2
    5acc:	032d      	lsls	r5, r5, #12
    5ace:	0b2d      	lsrs	r5, r5, #12
    5ad0:	4b3e      	ldr	r3, [pc, #248]	; (5bcc <__aeabi_dmul+0x4f0>)
    5ad2:	e669      	b.n	57a8 <__aeabi_dmul+0xcc>
    5ad4:	0003      	movs	r3, r0
    5ad6:	4655      	mov	r5, sl
    5ad8:	3b28      	subs	r3, #40	; 0x28
    5ada:	409d      	lsls	r5, r3
    5adc:	2300      	movs	r3, #0
    5ade:	e6bc      	b.n	585a <__aeabi_dmul+0x17e>
    5ae0:	4650      	mov	r0, sl
    5ae2:	f000 fc37 	bl	6354 <__clzsi2>
    5ae6:	3020      	adds	r0, #32
    5ae8:	e6a8      	b.n	583c <__aeabi_dmul+0x160>
    5aea:	0003      	movs	r3, r0
    5aec:	3b28      	subs	r3, #40	; 0x28
    5aee:	409f      	lsls	r7, r3
    5af0:	2300      	movs	r3, #0
    5af2:	46bb      	mov	fp, r7
    5af4:	4698      	mov	r8, r3
    5af6:	e689      	b.n	580c <__aeabi_dmul+0x130>
    5af8:	f000 fc2c 	bl	6354 <__clzsi2>
    5afc:	3020      	adds	r0, #32
    5afe:	e673      	b.n	57e8 <__aeabi_dmul+0x10c>
    5b00:	2401      	movs	r4, #1
    5b02:	1aa6      	subs	r6, r4, r2
    5b04:	2e38      	cmp	r6, #56	; 0x38
    5b06:	dd07      	ble.n	5b18 <__aeabi_dmul+0x43c>
    5b08:	2200      	movs	r2, #0
    5b0a:	400c      	ands	r4, r1
    5b0c:	2300      	movs	r3, #0
    5b0e:	2500      	movs	r5, #0
    5b10:	4690      	mov	r8, r2
    5b12:	e649      	b.n	57a8 <__aeabi_dmul+0xcc>
    5b14:	9e02      	ldr	r6, [sp, #8]
    5b16:	e7a3      	b.n	5a60 <__aeabi_dmul+0x384>
    5b18:	2e1f      	cmp	r6, #31
    5b1a:	dc20      	bgt.n	5b5e <__aeabi_dmul+0x482>
    5b1c:	2220      	movs	r2, #32
    5b1e:	002c      	movs	r4, r5
    5b20:	0018      	movs	r0, r3
    5b22:	1b92      	subs	r2, r2, r6
    5b24:	40f0      	lsrs	r0, r6
    5b26:	4094      	lsls	r4, r2
    5b28:	4093      	lsls	r3, r2
    5b2a:	4304      	orrs	r4, r0
    5b2c:	1e58      	subs	r0, r3, #1
    5b2e:	4183      	sbcs	r3, r0
    5b30:	431c      	orrs	r4, r3
    5b32:	40f5      	lsrs	r5, r6
    5b34:	0763      	lsls	r3, r4, #29
    5b36:	d009      	beq.n	5b4c <__aeabi_dmul+0x470>
    5b38:	230f      	movs	r3, #15
    5b3a:	4023      	ands	r3, r4
    5b3c:	2b04      	cmp	r3, #4
    5b3e:	d005      	beq.n	5b4c <__aeabi_dmul+0x470>
    5b40:	0023      	movs	r3, r4
    5b42:	1d1c      	adds	r4, r3, #4
    5b44:	429c      	cmp	r4, r3
    5b46:	4192      	sbcs	r2, r2
    5b48:	4252      	negs	r2, r2
    5b4a:	18ad      	adds	r5, r5, r2
    5b4c:	022b      	lsls	r3, r5, #8
    5b4e:	d51f      	bpl.n	5b90 <__aeabi_dmul+0x4b4>
    5b50:	2401      	movs	r4, #1
    5b52:	2200      	movs	r2, #0
    5b54:	400c      	ands	r4, r1
    5b56:	2301      	movs	r3, #1
    5b58:	2500      	movs	r5, #0
    5b5a:	4690      	mov	r8, r2
    5b5c:	e624      	b.n	57a8 <__aeabi_dmul+0xcc>
    5b5e:	201f      	movs	r0, #31
    5b60:	002c      	movs	r4, r5
    5b62:	4240      	negs	r0, r0
    5b64:	1a82      	subs	r2, r0, r2
    5b66:	40d4      	lsrs	r4, r2
    5b68:	2e20      	cmp	r6, #32
    5b6a:	d01c      	beq.n	5ba6 <__aeabi_dmul+0x4ca>
    5b6c:	2240      	movs	r2, #64	; 0x40
    5b6e:	1b96      	subs	r6, r2, r6
    5b70:	40b5      	lsls	r5, r6
    5b72:	432b      	orrs	r3, r5
    5b74:	1e58      	subs	r0, r3, #1
    5b76:	4183      	sbcs	r3, r0
    5b78:	2007      	movs	r0, #7
    5b7a:	4323      	orrs	r3, r4
    5b7c:	4018      	ands	r0, r3
    5b7e:	2500      	movs	r5, #0
    5b80:	2800      	cmp	r0, #0
    5b82:	d009      	beq.n	5b98 <__aeabi_dmul+0x4bc>
    5b84:	220f      	movs	r2, #15
    5b86:	2500      	movs	r5, #0
    5b88:	401a      	ands	r2, r3
    5b8a:	001c      	movs	r4, r3
    5b8c:	2a04      	cmp	r2, #4
    5b8e:	d1d8      	bne.n	5b42 <__aeabi_dmul+0x466>
    5b90:	0023      	movs	r3, r4
    5b92:	0768      	lsls	r0, r5, #29
    5b94:	026d      	lsls	r5, r5, #9
    5b96:	0b2d      	lsrs	r5, r5, #12
    5b98:	2401      	movs	r4, #1
    5b9a:	08db      	lsrs	r3, r3, #3
    5b9c:	4303      	orrs	r3, r0
    5b9e:	4698      	mov	r8, r3
    5ba0:	400c      	ands	r4, r1
    5ba2:	2300      	movs	r3, #0
    5ba4:	e600      	b.n	57a8 <__aeabi_dmul+0xcc>
    5ba6:	2500      	movs	r5, #0
    5ba8:	e7e3      	b.n	5b72 <__aeabi_dmul+0x496>
    5baa:	2280      	movs	r2, #128	; 0x80
    5bac:	2401      	movs	r4, #1
    5bae:	0312      	lsls	r2, r2, #12
    5bb0:	4315      	orrs	r5, r2
    5bb2:	032d      	lsls	r5, r5, #12
    5bb4:	4698      	mov	r8, r3
    5bb6:	0b2d      	lsrs	r5, r5, #12
    5bb8:	400c      	ands	r4, r1
    5bba:	4b04      	ldr	r3, [pc, #16]	; (5bcc <__aeabi_dmul+0x4f0>)
    5bbc:	e5f4      	b.n	57a8 <__aeabi_dmul+0xcc>
    5bbe:	46c0      	nop			; (mov r8, r8)
    5bc0:	000003ff 	.word	0x000003ff
    5bc4:	feffffff 	.word	0xfeffffff
    5bc8:	000007fe 	.word	0x000007fe
    5bcc:	000007ff 	.word	0x000007ff

00005bd0 <__aeabi_dsub>:
    5bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bd2:	4657      	mov	r7, sl
    5bd4:	464e      	mov	r6, r9
    5bd6:	4645      	mov	r5, r8
    5bd8:	b4e0      	push	{r5, r6, r7}
    5bda:	000e      	movs	r6, r1
    5bdc:	0011      	movs	r1, r2
    5bde:	0ff2      	lsrs	r2, r6, #31
    5be0:	4692      	mov	sl, r2
    5be2:	00c5      	lsls	r5, r0, #3
    5be4:	0f42      	lsrs	r2, r0, #29
    5be6:	0318      	lsls	r0, r3, #12
    5be8:	0337      	lsls	r7, r6, #12
    5bea:	0074      	lsls	r4, r6, #1
    5bec:	0a40      	lsrs	r0, r0, #9
    5bee:	0f4e      	lsrs	r6, r1, #29
    5bf0:	0a7f      	lsrs	r7, r7, #9
    5bf2:	4330      	orrs	r0, r6
    5bf4:	4ecf      	ldr	r6, [pc, #828]	; (5f34 <__aeabi_dsub+0x364>)
    5bf6:	4317      	orrs	r7, r2
    5bf8:	005a      	lsls	r2, r3, #1
    5bfa:	0d64      	lsrs	r4, r4, #21
    5bfc:	0d52      	lsrs	r2, r2, #21
    5bfe:	0fdb      	lsrs	r3, r3, #31
    5c00:	00c9      	lsls	r1, r1, #3
    5c02:	42b2      	cmp	r2, r6
    5c04:	d100      	bne.n	5c08 <__aeabi_dsub+0x38>
    5c06:	e0e5      	b.n	5dd4 <__aeabi_dsub+0x204>
    5c08:	2601      	movs	r6, #1
    5c0a:	4073      	eors	r3, r6
    5c0c:	1aa6      	subs	r6, r4, r2
    5c0e:	46b4      	mov	ip, r6
    5c10:	4553      	cmp	r3, sl
    5c12:	d100      	bne.n	5c16 <__aeabi_dsub+0x46>
    5c14:	e0af      	b.n	5d76 <__aeabi_dsub+0x1a6>
    5c16:	2e00      	cmp	r6, #0
    5c18:	dc00      	bgt.n	5c1c <__aeabi_dsub+0x4c>
    5c1a:	e10d      	b.n	5e38 <__aeabi_dsub+0x268>
    5c1c:	2a00      	cmp	r2, #0
    5c1e:	d13a      	bne.n	5c96 <__aeabi_dsub+0xc6>
    5c20:	0003      	movs	r3, r0
    5c22:	430b      	orrs	r3, r1
    5c24:	d000      	beq.n	5c28 <__aeabi_dsub+0x58>
    5c26:	e0e4      	b.n	5df2 <__aeabi_dsub+0x222>
    5c28:	076b      	lsls	r3, r5, #29
    5c2a:	d009      	beq.n	5c40 <__aeabi_dsub+0x70>
    5c2c:	230f      	movs	r3, #15
    5c2e:	402b      	ands	r3, r5
    5c30:	2b04      	cmp	r3, #4
    5c32:	d005      	beq.n	5c40 <__aeabi_dsub+0x70>
    5c34:	1d2b      	adds	r3, r5, #4
    5c36:	42ab      	cmp	r3, r5
    5c38:	41ad      	sbcs	r5, r5
    5c3a:	426d      	negs	r5, r5
    5c3c:	197f      	adds	r7, r7, r5
    5c3e:	001d      	movs	r5, r3
    5c40:	023b      	lsls	r3, r7, #8
    5c42:	d400      	bmi.n	5c46 <__aeabi_dsub+0x76>
    5c44:	e088      	b.n	5d58 <__aeabi_dsub+0x188>
    5c46:	4bbb      	ldr	r3, [pc, #748]	; (5f34 <__aeabi_dsub+0x364>)
    5c48:	3401      	adds	r4, #1
    5c4a:	429c      	cmp	r4, r3
    5c4c:	d100      	bne.n	5c50 <__aeabi_dsub+0x80>
    5c4e:	e110      	b.n	5e72 <__aeabi_dsub+0x2a2>
    5c50:	003a      	movs	r2, r7
    5c52:	4bb9      	ldr	r3, [pc, #740]	; (5f38 <__aeabi_dsub+0x368>)
    5c54:	4651      	mov	r1, sl
    5c56:	401a      	ands	r2, r3
    5c58:	2301      	movs	r3, #1
    5c5a:	0750      	lsls	r0, r2, #29
    5c5c:	08ed      	lsrs	r5, r5, #3
    5c5e:	0252      	lsls	r2, r2, #9
    5c60:	0564      	lsls	r4, r4, #21
    5c62:	4305      	orrs	r5, r0
    5c64:	0b12      	lsrs	r2, r2, #12
    5c66:	0d64      	lsrs	r4, r4, #21
    5c68:	400b      	ands	r3, r1
    5c6a:	2100      	movs	r1, #0
    5c6c:	0028      	movs	r0, r5
    5c6e:	0312      	lsls	r2, r2, #12
    5c70:	0d0d      	lsrs	r5, r1, #20
    5c72:	0b12      	lsrs	r2, r2, #12
    5c74:	0564      	lsls	r4, r4, #21
    5c76:	052d      	lsls	r5, r5, #20
    5c78:	4315      	orrs	r5, r2
    5c7a:	0862      	lsrs	r2, r4, #1
    5c7c:	4caf      	ldr	r4, [pc, #700]	; (5f3c <__aeabi_dsub+0x36c>)
    5c7e:	07db      	lsls	r3, r3, #31
    5c80:	402c      	ands	r4, r5
    5c82:	4314      	orrs	r4, r2
    5c84:	0064      	lsls	r4, r4, #1
    5c86:	0864      	lsrs	r4, r4, #1
    5c88:	431c      	orrs	r4, r3
    5c8a:	0021      	movs	r1, r4
    5c8c:	bc1c      	pop	{r2, r3, r4}
    5c8e:	4690      	mov	r8, r2
    5c90:	4699      	mov	r9, r3
    5c92:	46a2      	mov	sl, r4
    5c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c96:	4ba7      	ldr	r3, [pc, #668]	; (5f34 <__aeabi_dsub+0x364>)
    5c98:	429c      	cmp	r4, r3
    5c9a:	d0c5      	beq.n	5c28 <__aeabi_dsub+0x58>
    5c9c:	2380      	movs	r3, #128	; 0x80
    5c9e:	041b      	lsls	r3, r3, #16
    5ca0:	4318      	orrs	r0, r3
    5ca2:	4663      	mov	r3, ip
    5ca4:	2b38      	cmp	r3, #56	; 0x38
    5ca6:	dd00      	ble.n	5caa <__aeabi_dsub+0xda>
    5ca8:	e0fd      	b.n	5ea6 <__aeabi_dsub+0x2d6>
    5caa:	2b1f      	cmp	r3, #31
    5cac:	dd00      	ble.n	5cb0 <__aeabi_dsub+0xe0>
    5cae:	e130      	b.n	5f12 <__aeabi_dsub+0x342>
    5cb0:	4662      	mov	r2, ip
    5cb2:	2320      	movs	r3, #32
    5cb4:	1a9b      	subs	r3, r3, r2
    5cb6:	0002      	movs	r2, r0
    5cb8:	409a      	lsls	r2, r3
    5cba:	4666      	mov	r6, ip
    5cbc:	4690      	mov	r8, r2
    5cbe:	000a      	movs	r2, r1
    5cc0:	4099      	lsls	r1, r3
    5cc2:	40f2      	lsrs	r2, r6
    5cc4:	4646      	mov	r6, r8
    5cc6:	1e4b      	subs	r3, r1, #1
    5cc8:	4199      	sbcs	r1, r3
    5cca:	4332      	orrs	r2, r6
    5ccc:	4311      	orrs	r1, r2
    5cce:	4663      	mov	r3, ip
    5cd0:	0002      	movs	r2, r0
    5cd2:	40da      	lsrs	r2, r3
    5cd4:	1a69      	subs	r1, r5, r1
    5cd6:	428d      	cmp	r5, r1
    5cd8:	419b      	sbcs	r3, r3
    5cda:	000d      	movs	r5, r1
    5cdc:	1aba      	subs	r2, r7, r2
    5cde:	425b      	negs	r3, r3
    5ce0:	1ad7      	subs	r7, r2, r3
    5ce2:	023b      	lsls	r3, r7, #8
    5ce4:	d535      	bpl.n	5d52 <__aeabi_dsub+0x182>
    5ce6:	027a      	lsls	r2, r7, #9
    5ce8:	0a53      	lsrs	r3, r2, #9
    5cea:	4698      	mov	r8, r3
    5cec:	4643      	mov	r3, r8
    5cee:	2b00      	cmp	r3, #0
    5cf0:	d100      	bne.n	5cf4 <__aeabi_dsub+0x124>
    5cf2:	e0c4      	b.n	5e7e <__aeabi_dsub+0x2ae>
    5cf4:	4640      	mov	r0, r8
    5cf6:	f000 fb2d 	bl	6354 <__clzsi2>
    5cfa:	0003      	movs	r3, r0
    5cfc:	3b08      	subs	r3, #8
    5cfe:	2b1f      	cmp	r3, #31
    5d00:	dd00      	ble.n	5d04 <__aeabi_dsub+0x134>
    5d02:	e0c5      	b.n	5e90 <__aeabi_dsub+0x2c0>
    5d04:	2220      	movs	r2, #32
    5d06:	0029      	movs	r1, r5
    5d08:	1ad2      	subs	r2, r2, r3
    5d0a:	4647      	mov	r7, r8
    5d0c:	40d1      	lsrs	r1, r2
    5d0e:	409f      	lsls	r7, r3
    5d10:	000a      	movs	r2, r1
    5d12:	409d      	lsls	r5, r3
    5d14:	433a      	orrs	r2, r7
    5d16:	429c      	cmp	r4, r3
    5d18:	dd00      	ble.n	5d1c <__aeabi_dsub+0x14c>
    5d1a:	e0c0      	b.n	5e9e <__aeabi_dsub+0x2ce>
    5d1c:	1b1c      	subs	r4, r3, r4
    5d1e:	1c63      	adds	r3, r4, #1
    5d20:	2b1f      	cmp	r3, #31
    5d22:	dd00      	ble.n	5d26 <__aeabi_dsub+0x156>
    5d24:	e0e4      	b.n	5ef0 <__aeabi_dsub+0x320>
    5d26:	2120      	movs	r1, #32
    5d28:	0014      	movs	r4, r2
    5d2a:	0028      	movs	r0, r5
    5d2c:	1ac9      	subs	r1, r1, r3
    5d2e:	40d8      	lsrs	r0, r3
    5d30:	408c      	lsls	r4, r1
    5d32:	408d      	lsls	r5, r1
    5d34:	4304      	orrs	r4, r0
    5d36:	40da      	lsrs	r2, r3
    5d38:	1e68      	subs	r0, r5, #1
    5d3a:	4185      	sbcs	r5, r0
    5d3c:	0017      	movs	r7, r2
    5d3e:	4325      	orrs	r5, r4
    5d40:	2400      	movs	r4, #0
    5d42:	e771      	b.n	5c28 <__aeabi_dsub+0x58>
    5d44:	4642      	mov	r2, r8
    5d46:	4663      	mov	r3, ip
    5d48:	431a      	orrs	r2, r3
    5d4a:	d100      	bne.n	5d4e <__aeabi_dsub+0x17e>
    5d4c:	e24c      	b.n	61e8 <__aeabi_dsub+0x618>
    5d4e:	4667      	mov	r7, ip
    5d50:	4645      	mov	r5, r8
    5d52:	076b      	lsls	r3, r5, #29
    5d54:	d000      	beq.n	5d58 <__aeabi_dsub+0x188>
    5d56:	e769      	b.n	5c2c <__aeabi_dsub+0x5c>
    5d58:	2301      	movs	r3, #1
    5d5a:	4651      	mov	r1, sl
    5d5c:	0778      	lsls	r0, r7, #29
    5d5e:	08ed      	lsrs	r5, r5, #3
    5d60:	08fa      	lsrs	r2, r7, #3
    5d62:	400b      	ands	r3, r1
    5d64:	4305      	orrs	r5, r0
    5d66:	4973      	ldr	r1, [pc, #460]	; (5f34 <__aeabi_dsub+0x364>)
    5d68:	428c      	cmp	r4, r1
    5d6a:	d038      	beq.n	5dde <__aeabi_dsub+0x20e>
    5d6c:	0312      	lsls	r2, r2, #12
    5d6e:	0564      	lsls	r4, r4, #21
    5d70:	0b12      	lsrs	r2, r2, #12
    5d72:	0d64      	lsrs	r4, r4, #21
    5d74:	e779      	b.n	5c6a <__aeabi_dsub+0x9a>
    5d76:	2e00      	cmp	r6, #0
    5d78:	dc00      	bgt.n	5d7c <__aeabi_dsub+0x1ac>
    5d7a:	e09a      	b.n	5eb2 <__aeabi_dsub+0x2e2>
    5d7c:	2a00      	cmp	r2, #0
    5d7e:	d047      	beq.n	5e10 <__aeabi_dsub+0x240>
    5d80:	4a6c      	ldr	r2, [pc, #432]	; (5f34 <__aeabi_dsub+0x364>)
    5d82:	4294      	cmp	r4, r2
    5d84:	d100      	bne.n	5d88 <__aeabi_dsub+0x1b8>
    5d86:	e74f      	b.n	5c28 <__aeabi_dsub+0x58>
    5d88:	2280      	movs	r2, #128	; 0x80
    5d8a:	0412      	lsls	r2, r2, #16
    5d8c:	4310      	orrs	r0, r2
    5d8e:	4662      	mov	r2, ip
    5d90:	2a38      	cmp	r2, #56	; 0x38
    5d92:	dc00      	bgt.n	5d96 <__aeabi_dsub+0x1c6>
    5d94:	e108      	b.n	5fa8 <__aeabi_dsub+0x3d8>
    5d96:	4301      	orrs	r1, r0
    5d98:	1e48      	subs	r0, r1, #1
    5d9a:	4181      	sbcs	r1, r0
    5d9c:	2200      	movs	r2, #0
    5d9e:	b2c9      	uxtb	r1, r1
    5da0:	1949      	adds	r1, r1, r5
    5da2:	19d2      	adds	r2, r2, r7
    5da4:	42a9      	cmp	r1, r5
    5da6:	41bf      	sbcs	r7, r7
    5da8:	000d      	movs	r5, r1
    5daa:	427f      	negs	r7, r7
    5dac:	18bf      	adds	r7, r7, r2
    5dae:	023a      	lsls	r2, r7, #8
    5db0:	d400      	bmi.n	5db4 <__aeabi_dsub+0x1e4>
    5db2:	e142      	b.n	603a <__aeabi_dsub+0x46a>
    5db4:	4a5f      	ldr	r2, [pc, #380]	; (5f34 <__aeabi_dsub+0x364>)
    5db6:	3401      	adds	r4, #1
    5db8:	4294      	cmp	r4, r2
    5dba:	d100      	bne.n	5dbe <__aeabi_dsub+0x1ee>
    5dbc:	e14e      	b.n	605c <__aeabi_dsub+0x48c>
    5dbe:	2001      	movs	r0, #1
    5dc0:	4a5d      	ldr	r2, [pc, #372]	; (5f38 <__aeabi_dsub+0x368>)
    5dc2:	0869      	lsrs	r1, r5, #1
    5dc4:	403a      	ands	r2, r7
    5dc6:	4028      	ands	r0, r5
    5dc8:	4308      	orrs	r0, r1
    5dca:	07d5      	lsls	r5, r2, #31
    5dcc:	4305      	orrs	r5, r0
    5dce:	0857      	lsrs	r7, r2, #1
    5dd0:	469a      	mov	sl, r3
    5dd2:	e729      	b.n	5c28 <__aeabi_dsub+0x58>
    5dd4:	0006      	movs	r6, r0
    5dd6:	430e      	orrs	r6, r1
    5dd8:	d000      	beq.n	5ddc <__aeabi_dsub+0x20c>
    5dda:	e717      	b.n	5c0c <__aeabi_dsub+0x3c>
    5ddc:	e714      	b.n	5c08 <__aeabi_dsub+0x38>
    5dde:	0029      	movs	r1, r5
    5de0:	4311      	orrs	r1, r2
    5de2:	d100      	bne.n	5de6 <__aeabi_dsub+0x216>
    5de4:	e1f9      	b.n	61da <__aeabi_dsub+0x60a>
    5de6:	2180      	movs	r1, #128	; 0x80
    5de8:	0309      	lsls	r1, r1, #12
    5dea:	430a      	orrs	r2, r1
    5dec:	0312      	lsls	r2, r2, #12
    5dee:	0b12      	lsrs	r2, r2, #12
    5df0:	e73b      	b.n	5c6a <__aeabi_dsub+0x9a>
    5df2:	2301      	movs	r3, #1
    5df4:	425b      	negs	r3, r3
    5df6:	4698      	mov	r8, r3
    5df8:	44c4      	add	ip, r8
    5dfa:	4663      	mov	r3, ip
    5dfc:	2b00      	cmp	r3, #0
    5dfe:	d172      	bne.n	5ee6 <__aeabi_dsub+0x316>
    5e00:	1a69      	subs	r1, r5, r1
    5e02:	428d      	cmp	r5, r1
    5e04:	419b      	sbcs	r3, r3
    5e06:	1a3f      	subs	r7, r7, r0
    5e08:	425b      	negs	r3, r3
    5e0a:	1aff      	subs	r7, r7, r3
    5e0c:	000d      	movs	r5, r1
    5e0e:	e768      	b.n	5ce2 <__aeabi_dsub+0x112>
    5e10:	0002      	movs	r2, r0
    5e12:	430a      	orrs	r2, r1
    5e14:	d100      	bne.n	5e18 <__aeabi_dsub+0x248>
    5e16:	e707      	b.n	5c28 <__aeabi_dsub+0x58>
    5e18:	2201      	movs	r2, #1
    5e1a:	4252      	negs	r2, r2
    5e1c:	4690      	mov	r8, r2
    5e1e:	44c4      	add	ip, r8
    5e20:	4662      	mov	r2, ip
    5e22:	2a00      	cmp	r2, #0
    5e24:	d000      	beq.n	5e28 <__aeabi_dsub+0x258>
    5e26:	e0e6      	b.n	5ff6 <__aeabi_dsub+0x426>
    5e28:	1869      	adds	r1, r5, r1
    5e2a:	42a9      	cmp	r1, r5
    5e2c:	41b6      	sbcs	r6, r6
    5e2e:	183f      	adds	r7, r7, r0
    5e30:	4276      	negs	r6, r6
    5e32:	19f7      	adds	r7, r6, r7
    5e34:	000d      	movs	r5, r1
    5e36:	e7ba      	b.n	5dae <__aeabi_dsub+0x1de>
    5e38:	2e00      	cmp	r6, #0
    5e3a:	d000      	beq.n	5e3e <__aeabi_dsub+0x26e>
    5e3c:	e080      	b.n	5f40 <__aeabi_dsub+0x370>
    5e3e:	1c62      	adds	r2, r4, #1
    5e40:	0552      	lsls	r2, r2, #21
    5e42:	0d52      	lsrs	r2, r2, #21
    5e44:	2a01      	cmp	r2, #1
    5e46:	dc00      	bgt.n	5e4a <__aeabi_dsub+0x27a>
    5e48:	e0f9      	b.n	603e <__aeabi_dsub+0x46e>
    5e4a:	1a6a      	subs	r2, r5, r1
    5e4c:	4691      	mov	r9, r2
    5e4e:	454d      	cmp	r5, r9
    5e50:	41b6      	sbcs	r6, r6
    5e52:	1a3a      	subs	r2, r7, r0
    5e54:	4276      	negs	r6, r6
    5e56:	1b92      	subs	r2, r2, r6
    5e58:	4690      	mov	r8, r2
    5e5a:	0212      	lsls	r2, r2, #8
    5e5c:	d400      	bmi.n	5e60 <__aeabi_dsub+0x290>
    5e5e:	e099      	b.n	5f94 <__aeabi_dsub+0x3c4>
    5e60:	1b4d      	subs	r5, r1, r5
    5e62:	42a9      	cmp	r1, r5
    5e64:	4189      	sbcs	r1, r1
    5e66:	1bc7      	subs	r7, r0, r7
    5e68:	4249      	negs	r1, r1
    5e6a:	1a7a      	subs	r2, r7, r1
    5e6c:	4690      	mov	r8, r2
    5e6e:	469a      	mov	sl, r3
    5e70:	e73c      	b.n	5cec <__aeabi_dsub+0x11c>
    5e72:	4652      	mov	r2, sl
    5e74:	2301      	movs	r3, #1
    5e76:	2500      	movs	r5, #0
    5e78:	4013      	ands	r3, r2
    5e7a:	2200      	movs	r2, #0
    5e7c:	e6f5      	b.n	5c6a <__aeabi_dsub+0x9a>
    5e7e:	0028      	movs	r0, r5
    5e80:	f000 fa68 	bl	6354 <__clzsi2>
    5e84:	3020      	adds	r0, #32
    5e86:	0003      	movs	r3, r0
    5e88:	3b08      	subs	r3, #8
    5e8a:	2b1f      	cmp	r3, #31
    5e8c:	dc00      	bgt.n	5e90 <__aeabi_dsub+0x2c0>
    5e8e:	e739      	b.n	5d04 <__aeabi_dsub+0x134>
    5e90:	002a      	movs	r2, r5
    5e92:	3828      	subs	r0, #40	; 0x28
    5e94:	4082      	lsls	r2, r0
    5e96:	2500      	movs	r5, #0
    5e98:	429c      	cmp	r4, r3
    5e9a:	dc00      	bgt.n	5e9e <__aeabi_dsub+0x2ce>
    5e9c:	e73e      	b.n	5d1c <__aeabi_dsub+0x14c>
    5e9e:	4f26      	ldr	r7, [pc, #152]	; (5f38 <__aeabi_dsub+0x368>)
    5ea0:	1ae4      	subs	r4, r4, r3
    5ea2:	4017      	ands	r7, r2
    5ea4:	e6c0      	b.n	5c28 <__aeabi_dsub+0x58>
    5ea6:	4301      	orrs	r1, r0
    5ea8:	1e48      	subs	r0, r1, #1
    5eaa:	4181      	sbcs	r1, r0
    5eac:	2200      	movs	r2, #0
    5eae:	b2c9      	uxtb	r1, r1
    5eb0:	e710      	b.n	5cd4 <__aeabi_dsub+0x104>
    5eb2:	2e00      	cmp	r6, #0
    5eb4:	d000      	beq.n	5eb8 <__aeabi_dsub+0x2e8>
    5eb6:	e0f1      	b.n	609c <__aeabi_dsub+0x4cc>
    5eb8:	1c62      	adds	r2, r4, #1
    5eba:	4694      	mov	ip, r2
    5ebc:	0552      	lsls	r2, r2, #21
    5ebe:	0d52      	lsrs	r2, r2, #21
    5ec0:	2a01      	cmp	r2, #1
    5ec2:	dc00      	bgt.n	5ec6 <__aeabi_dsub+0x2f6>
    5ec4:	e0a0      	b.n	6008 <__aeabi_dsub+0x438>
    5ec6:	4a1b      	ldr	r2, [pc, #108]	; (5f34 <__aeabi_dsub+0x364>)
    5ec8:	4594      	cmp	ip, r2
    5eca:	d100      	bne.n	5ece <__aeabi_dsub+0x2fe>
    5ecc:	e0c5      	b.n	605a <__aeabi_dsub+0x48a>
    5ece:	1869      	adds	r1, r5, r1
    5ed0:	42a9      	cmp	r1, r5
    5ed2:	4192      	sbcs	r2, r2
    5ed4:	183f      	adds	r7, r7, r0
    5ed6:	4252      	negs	r2, r2
    5ed8:	19d2      	adds	r2, r2, r7
    5eda:	0849      	lsrs	r1, r1, #1
    5edc:	07d5      	lsls	r5, r2, #31
    5ede:	430d      	orrs	r5, r1
    5ee0:	0857      	lsrs	r7, r2, #1
    5ee2:	4664      	mov	r4, ip
    5ee4:	e6a0      	b.n	5c28 <__aeabi_dsub+0x58>
    5ee6:	4b13      	ldr	r3, [pc, #76]	; (5f34 <__aeabi_dsub+0x364>)
    5ee8:	429c      	cmp	r4, r3
    5eea:	d000      	beq.n	5eee <__aeabi_dsub+0x31e>
    5eec:	e6d9      	b.n	5ca2 <__aeabi_dsub+0xd2>
    5eee:	e69b      	b.n	5c28 <__aeabi_dsub+0x58>
    5ef0:	0011      	movs	r1, r2
    5ef2:	3c1f      	subs	r4, #31
    5ef4:	40e1      	lsrs	r1, r4
    5ef6:	000c      	movs	r4, r1
    5ef8:	2b20      	cmp	r3, #32
    5efa:	d100      	bne.n	5efe <__aeabi_dsub+0x32e>
    5efc:	e080      	b.n	6000 <__aeabi_dsub+0x430>
    5efe:	2140      	movs	r1, #64	; 0x40
    5f00:	1acb      	subs	r3, r1, r3
    5f02:	409a      	lsls	r2, r3
    5f04:	4315      	orrs	r5, r2
    5f06:	1e6a      	subs	r2, r5, #1
    5f08:	4195      	sbcs	r5, r2
    5f0a:	2700      	movs	r7, #0
    5f0c:	4325      	orrs	r5, r4
    5f0e:	2400      	movs	r4, #0
    5f10:	e71f      	b.n	5d52 <__aeabi_dsub+0x182>
    5f12:	4663      	mov	r3, ip
    5f14:	0002      	movs	r2, r0
    5f16:	3b20      	subs	r3, #32
    5f18:	40da      	lsrs	r2, r3
    5f1a:	4663      	mov	r3, ip
    5f1c:	2b20      	cmp	r3, #32
    5f1e:	d071      	beq.n	6004 <__aeabi_dsub+0x434>
    5f20:	2340      	movs	r3, #64	; 0x40
    5f22:	4666      	mov	r6, ip
    5f24:	1b9b      	subs	r3, r3, r6
    5f26:	4098      	lsls	r0, r3
    5f28:	4301      	orrs	r1, r0
    5f2a:	1e48      	subs	r0, r1, #1
    5f2c:	4181      	sbcs	r1, r0
    5f2e:	4311      	orrs	r1, r2
    5f30:	2200      	movs	r2, #0
    5f32:	e6cf      	b.n	5cd4 <__aeabi_dsub+0x104>
    5f34:	000007ff 	.word	0x000007ff
    5f38:	ff7fffff 	.word	0xff7fffff
    5f3c:	800fffff 	.word	0x800fffff
    5f40:	2c00      	cmp	r4, #0
    5f42:	d048      	beq.n	5fd6 <__aeabi_dsub+0x406>
    5f44:	4cca      	ldr	r4, [pc, #808]	; (6270 <__aeabi_dsub+0x6a0>)
    5f46:	42a2      	cmp	r2, r4
    5f48:	d100      	bne.n	5f4c <__aeabi_dsub+0x37c>
    5f4a:	e0a2      	b.n	6092 <__aeabi_dsub+0x4c2>
    5f4c:	4274      	negs	r4, r6
    5f4e:	46a1      	mov	r9, r4
    5f50:	2480      	movs	r4, #128	; 0x80
    5f52:	0424      	lsls	r4, r4, #16
    5f54:	4327      	orrs	r7, r4
    5f56:	464c      	mov	r4, r9
    5f58:	2c38      	cmp	r4, #56	; 0x38
    5f5a:	dd00      	ble.n	5f5e <__aeabi_dsub+0x38e>
    5f5c:	e0db      	b.n	6116 <__aeabi_dsub+0x546>
    5f5e:	2c1f      	cmp	r4, #31
    5f60:	dd00      	ble.n	5f64 <__aeabi_dsub+0x394>
    5f62:	e144      	b.n	61ee <__aeabi_dsub+0x61e>
    5f64:	464e      	mov	r6, r9
    5f66:	2420      	movs	r4, #32
    5f68:	1ba4      	subs	r4, r4, r6
    5f6a:	003e      	movs	r6, r7
    5f6c:	40a6      	lsls	r6, r4
    5f6e:	46a2      	mov	sl, r4
    5f70:	46b0      	mov	r8, r6
    5f72:	464c      	mov	r4, r9
    5f74:	002e      	movs	r6, r5
    5f76:	40e6      	lsrs	r6, r4
    5f78:	46b4      	mov	ip, r6
    5f7a:	4646      	mov	r6, r8
    5f7c:	4664      	mov	r4, ip
    5f7e:	4326      	orrs	r6, r4
    5f80:	4654      	mov	r4, sl
    5f82:	40a5      	lsls	r5, r4
    5f84:	1e6c      	subs	r4, r5, #1
    5f86:	41a5      	sbcs	r5, r4
    5f88:	0034      	movs	r4, r6
    5f8a:	432c      	orrs	r4, r5
    5f8c:	464d      	mov	r5, r9
    5f8e:	40ef      	lsrs	r7, r5
    5f90:	1b0d      	subs	r5, r1, r4
    5f92:	e028      	b.n	5fe6 <__aeabi_dsub+0x416>
    5f94:	464a      	mov	r2, r9
    5f96:	4643      	mov	r3, r8
    5f98:	464d      	mov	r5, r9
    5f9a:	431a      	orrs	r2, r3
    5f9c:	d000      	beq.n	5fa0 <__aeabi_dsub+0x3d0>
    5f9e:	e6a5      	b.n	5cec <__aeabi_dsub+0x11c>
    5fa0:	2300      	movs	r3, #0
    5fa2:	2400      	movs	r4, #0
    5fa4:	2500      	movs	r5, #0
    5fa6:	e6de      	b.n	5d66 <__aeabi_dsub+0x196>
    5fa8:	2a1f      	cmp	r2, #31
    5faa:	dc5a      	bgt.n	6062 <__aeabi_dsub+0x492>
    5fac:	4666      	mov	r6, ip
    5fae:	2220      	movs	r2, #32
    5fb0:	1b92      	subs	r2, r2, r6
    5fb2:	0006      	movs	r6, r0
    5fb4:	4096      	lsls	r6, r2
    5fb6:	4691      	mov	r9, r2
    5fb8:	46b0      	mov	r8, r6
    5fba:	4662      	mov	r2, ip
    5fbc:	000e      	movs	r6, r1
    5fbe:	40d6      	lsrs	r6, r2
    5fc0:	4642      	mov	r2, r8
    5fc2:	4316      	orrs	r6, r2
    5fc4:	464a      	mov	r2, r9
    5fc6:	4091      	lsls	r1, r2
    5fc8:	1e4a      	subs	r2, r1, #1
    5fca:	4191      	sbcs	r1, r2
    5fcc:	0002      	movs	r2, r0
    5fce:	4660      	mov	r0, ip
    5fd0:	4331      	orrs	r1, r6
    5fd2:	40c2      	lsrs	r2, r0
    5fd4:	e6e4      	b.n	5da0 <__aeabi_dsub+0x1d0>
    5fd6:	003c      	movs	r4, r7
    5fd8:	432c      	orrs	r4, r5
    5fda:	d05a      	beq.n	6092 <__aeabi_dsub+0x4c2>
    5fdc:	43f4      	mvns	r4, r6
    5fde:	46a1      	mov	r9, r4
    5fe0:	2c00      	cmp	r4, #0
    5fe2:	d152      	bne.n	608a <__aeabi_dsub+0x4ba>
    5fe4:	1b4d      	subs	r5, r1, r5
    5fe6:	42a9      	cmp	r1, r5
    5fe8:	4189      	sbcs	r1, r1
    5fea:	1bc7      	subs	r7, r0, r7
    5fec:	4249      	negs	r1, r1
    5fee:	1a7f      	subs	r7, r7, r1
    5ff0:	0014      	movs	r4, r2
    5ff2:	469a      	mov	sl, r3
    5ff4:	e675      	b.n	5ce2 <__aeabi_dsub+0x112>
    5ff6:	4a9e      	ldr	r2, [pc, #632]	; (6270 <__aeabi_dsub+0x6a0>)
    5ff8:	4294      	cmp	r4, r2
    5ffa:	d000      	beq.n	5ffe <__aeabi_dsub+0x42e>
    5ffc:	e6c7      	b.n	5d8e <__aeabi_dsub+0x1be>
    5ffe:	e613      	b.n	5c28 <__aeabi_dsub+0x58>
    6000:	2200      	movs	r2, #0
    6002:	e77f      	b.n	5f04 <__aeabi_dsub+0x334>
    6004:	2000      	movs	r0, #0
    6006:	e78f      	b.n	5f28 <__aeabi_dsub+0x358>
    6008:	2c00      	cmp	r4, #0
    600a:	d000      	beq.n	600e <__aeabi_dsub+0x43e>
    600c:	e0c8      	b.n	61a0 <__aeabi_dsub+0x5d0>
    600e:	003b      	movs	r3, r7
    6010:	432b      	orrs	r3, r5
    6012:	d100      	bne.n	6016 <__aeabi_dsub+0x446>
    6014:	e10f      	b.n	6236 <__aeabi_dsub+0x666>
    6016:	0003      	movs	r3, r0
    6018:	430b      	orrs	r3, r1
    601a:	d100      	bne.n	601e <__aeabi_dsub+0x44e>
    601c:	e604      	b.n	5c28 <__aeabi_dsub+0x58>
    601e:	1869      	adds	r1, r5, r1
    6020:	42a9      	cmp	r1, r5
    6022:	419b      	sbcs	r3, r3
    6024:	183f      	adds	r7, r7, r0
    6026:	425b      	negs	r3, r3
    6028:	19df      	adds	r7, r3, r7
    602a:	023b      	lsls	r3, r7, #8
    602c:	d400      	bmi.n	6030 <__aeabi_dsub+0x460>
    602e:	e11a      	b.n	6266 <__aeabi_dsub+0x696>
    6030:	4b90      	ldr	r3, [pc, #576]	; (6274 <__aeabi_dsub+0x6a4>)
    6032:	000d      	movs	r5, r1
    6034:	401f      	ands	r7, r3
    6036:	4664      	mov	r4, ip
    6038:	e5f6      	b.n	5c28 <__aeabi_dsub+0x58>
    603a:	469a      	mov	sl, r3
    603c:	e689      	b.n	5d52 <__aeabi_dsub+0x182>
    603e:	003a      	movs	r2, r7
    6040:	432a      	orrs	r2, r5
    6042:	2c00      	cmp	r4, #0
    6044:	d15c      	bne.n	6100 <__aeabi_dsub+0x530>
    6046:	2a00      	cmp	r2, #0
    6048:	d175      	bne.n	6136 <__aeabi_dsub+0x566>
    604a:	0002      	movs	r2, r0
    604c:	430a      	orrs	r2, r1
    604e:	d100      	bne.n	6052 <__aeabi_dsub+0x482>
    6050:	e0ca      	b.n	61e8 <__aeabi_dsub+0x618>
    6052:	0007      	movs	r7, r0
    6054:	000d      	movs	r5, r1
    6056:	469a      	mov	sl, r3
    6058:	e5e6      	b.n	5c28 <__aeabi_dsub+0x58>
    605a:	4664      	mov	r4, ip
    605c:	2200      	movs	r2, #0
    605e:	2500      	movs	r5, #0
    6060:	e681      	b.n	5d66 <__aeabi_dsub+0x196>
    6062:	4662      	mov	r2, ip
    6064:	0006      	movs	r6, r0
    6066:	3a20      	subs	r2, #32
    6068:	40d6      	lsrs	r6, r2
    606a:	4662      	mov	r2, ip
    606c:	46b0      	mov	r8, r6
    606e:	2a20      	cmp	r2, #32
    6070:	d100      	bne.n	6074 <__aeabi_dsub+0x4a4>
    6072:	e0b7      	b.n	61e4 <__aeabi_dsub+0x614>
    6074:	2240      	movs	r2, #64	; 0x40
    6076:	4666      	mov	r6, ip
    6078:	1b92      	subs	r2, r2, r6
    607a:	4090      	lsls	r0, r2
    607c:	4301      	orrs	r1, r0
    607e:	4642      	mov	r2, r8
    6080:	1e48      	subs	r0, r1, #1
    6082:	4181      	sbcs	r1, r0
    6084:	4311      	orrs	r1, r2
    6086:	2200      	movs	r2, #0
    6088:	e68a      	b.n	5da0 <__aeabi_dsub+0x1d0>
    608a:	4c79      	ldr	r4, [pc, #484]	; (6270 <__aeabi_dsub+0x6a0>)
    608c:	42a2      	cmp	r2, r4
    608e:	d000      	beq.n	6092 <__aeabi_dsub+0x4c2>
    6090:	e761      	b.n	5f56 <__aeabi_dsub+0x386>
    6092:	0007      	movs	r7, r0
    6094:	000d      	movs	r5, r1
    6096:	0014      	movs	r4, r2
    6098:	469a      	mov	sl, r3
    609a:	e5c5      	b.n	5c28 <__aeabi_dsub+0x58>
    609c:	2c00      	cmp	r4, #0
    609e:	d141      	bne.n	6124 <__aeabi_dsub+0x554>
    60a0:	003c      	movs	r4, r7
    60a2:	432c      	orrs	r4, r5
    60a4:	d078      	beq.n	6198 <__aeabi_dsub+0x5c8>
    60a6:	43f4      	mvns	r4, r6
    60a8:	46a1      	mov	r9, r4
    60aa:	2c00      	cmp	r4, #0
    60ac:	d020      	beq.n	60f0 <__aeabi_dsub+0x520>
    60ae:	4c70      	ldr	r4, [pc, #448]	; (6270 <__aeabi_dsub+0x6a0>)
    60b0:	42a2      	cmp	r2, r4
    60b2:	d071      	beq.n	6198 <__aeabi_dsub+0x5c8>
    60b4:	464c      	mov	r4, r9
    60b6:	2c38      	cmp	r4, #56	; 0x38
    60b8:	dd00      	ble.n	60bc <__aeabi_dsub+0x4ec>
    60ba:	e0b2      	b.n	6222 <__aeabi_dsub+0x652>
    60bc:	2c1f      	cmp	r4, #31
    60be:	dd00      	ble.n	60c2 <__aeabi_dsub+0x4f2>
    60c0:	e0bc      	b.n	623c <__aeabi_dsub+0x66c>
    60c2:	2620      	movs	r6, #32
    60c4:	1b34      	subs	r4, r6, r4
    60c6:	46a2      	mov	sl, r4
    60c8:	003c      	movs	r4, r7
    60ca:	4656      	mov	r6, sl
    60cc:	40b4      	lsls	r4, r6
    60ce:	464e      	mov	r6, r9
    60d0:	46a0      	mov	r8, r4
    60d2:	002c      	movs	r4, r5
    60d4:	40f4      	lsrs	r4, r6
    60d6:	46a4      	mov	ip, r4
    60d8:	4644      	mov	r4, r8
    60da:	4666      	mov	r6, ip
    60dc:	4334      	orrs	r4, r6
    60de:	46a4      	mov	ip, r4
    60e0:	4654      	mov	r4, sl
    60e2:	40a5      	lsls	r5, r4
    60e4:	4664      	mov	r4, ip
    60e6:	1e6e      	subs	r6, r5, #1
    60e8:	41b5      	sbcs	r5, r6
    60ea:	4325      	orrs	r5, r4
    60ec:	464c      	mov	r4, r9
    60ee:	40e7      	lsrs	r7, r4
    60f0:	186d      	adds	r5, r5, r1
    60f2:	428d      	cmp	r5, r1
    60f4:	4189      	sbcs	r1, r1
    60f6:	183f      	adds	r7, r7, r0
    60f8:	4249      	negs	r1, r1
    60fa:	19cf      	adds	r7, r1, r7
    60fc:	0014      	movs	r4, r2
    60fe:	e656      	b.n	5dae <__aeabi_dsub+0x1de>
    6100:	2a00      	cmp	r2, #0
    6102:	d12f      	bne.n	6164 <__aeabi_dsub+0x594>
    6104:	0002      	movs	r2, r0
    6106:	430a      	orrs	r2, r1
    6108:	d100      	bne.n	610c <__aeabi_dsub+0x53c>
    610a:	e084      	b.n	6216 <__aeabi_dsub+0x646>
    610c:	0007      	movs	r7, r0
    610e:	000d      	movs	r5, r1
    6110:	469a      	mov	sl, r3
    6112:	4c57      	ldr	r4, [pc, #348]	; (6270 <__aeabi_dsub+0x6a0>)
    6114:	e588      	b.n	5c28 <__aeabi_dsub+0x58>
    6116:	433d      	orrs	r5, r7
    6118:	1e6f      	subs	r7, r5, #1
    611a:	41bd      	sbcs	r5, r7
    611c:	b2ec      	uxtb	r4, r5
    611e:	2700      	movs	r7, #0
    6120:	1b0d      	subs	r5, r1, r4
    6122:	e760      	b.n	5fe6 <__aeabi_dsub+0x416>
    6124:	4c52      	ldr	r4, [pc, #328]	; (6270 <__aeabi_dsub+0x6a0>)
    6126:	42a2      	cmp	r2, r4
    6128:	d036      	beq.n	6198 <__aeabi_dsub+0x5c8>
    612a:	4274      	negs	r4, r6
    612c:	2680      	movs	r6, #128	; 0x80
    612e:	0436      	lsls	r6, r6, #16
    6130:	46a1      	mov	r9, r4
    6132:	4337      	orrs	r7, r6
    6134:	e7be      	b.n	60b4 <__aeabi_dsub+0x4e4>
    6136:	0002      	movs	r2, r0
    6138:	430a      	orrs	r2, r1
    613a:	d100      	bne.n	613e <__aeabi_dsub+0x56e>
    613c:	e574      	b.n	5c28 <__aeabi_dsub+0x58>
    613e:	1a6a      	subs	r2, r5, r1
    6140:	4690      	mov	r8, r2
    6142:	4545      	cmp	r5, r8
    6144:	41b6      	sbcs	r6, r6
    6146:	1a3a      	subs	r2, r7, r0
    6148:	4276      	negs	r6, r6
    614a:	1b92      	subs	r2, r2, r6
    614c:	4694      	mov	ip, r2
    614e:	0212      	lsls	r2, r2, #8
    6150:	d400      	bmi.n	6154 <__aeabi_dsub+0x584>
    6152:	e5f7      	b.n	5d44 <__aeabi_dsub+0x174>
    6154:	1b4d      	subs	r5, r1, r5
    6156:	42a9      	cmp	r1, r5
    6158:	4189      	sbcs	r1, r1
    615a:	1bc7      	subs	r7, r0, r7
    615c:	4249      	negs	r1, r1
    615e:	1a7f      	subs	r7, r7, r1
    6160:	469a      	mov	sl, r3
    6162:	e561      	b.n	5c28 <__aeabi_dsub+0x58>
    6164:	0002      	movs	r2, r0
    6166:	430a      	orrs	r2, r1
    6168:	d03a      	beq.n	61e0 <__aeabi_dsub+0x610>
    616a:	08ed      	lsrs	r5, r5, #3
    616c:	077c      	lsls	r4, r7, #29
    616e:	432c      	orrs	r4, r5
    6170:	2580      	movs	r5, #128	; 0x80
    6172:	08fa      	lsrs	r2, r7, #3
    6174:	032d      	lsls	r5, r5, #12
    6176:	422a      	tst	r2, r5
    6178:	d008      	beq.n	618c <__aeabi_dsub+0x5bc>
    617a:	08c7      	lsrs	r7, r0, #3
    617c:	422f      	tst	r7, r5
    617e:	d105      	bne.n	618c <__aeabi_dsub+0x5bc>
    6180:	0745      	lsls	r5, r0, #29
    6182:	002c      	movs	r4, r5
    6184:	003a      	movs	r2, r7
    6186:	469a      	mov	sl, r3
    6188:	08c9      	lsrs	r1, r1, #3
    618a:	430c      	orrs	r4, r1
    618c:	0f67      	lsrs	r7, r4, #29
    618e:	00d2      	lsls	r2, r2, #3
    6190:	00e5      	lsls	r5, r4, #3
    6192:	4317      	orrs	r7, r2
    6194:	4c36      	ldr	r4, [pc, #216]	; (6270 <__aeabi_dsub+0x6a0>)
    6196:	e547      	b.n	5c28 <__aeabi_dsub+0x58>
    6198:	0007      	movs	r7, r0
    619a:	000d      	movs	r5, r1
    619c:	0014      	movs	r4, r2
    619e:	e543      	b.n	5c28 <__aeabi_dsub+0x58>
    61a0:	003a      	movs	r2, r7
    61a2:	432a      	orrs	r2, r5
    61a4:	d043      	beq.n	622e <__aeabi_dsub+0x65e>
    61a6:	0002      	movs	r2, r0
    61a8:	430a      	orrs	r2, r1
    61aa:	d019      	beq.n	61e0 <__aeabi_dsub+0x610>
    61ac:	08ed      	lsrs	r5, r5, #3
    61ae:	077c      	lsls	r4, r7, #29
    61b0:	432c      	orrs	r4, r5
    61b2:	2580      	movs	r5, #128	; 0x80
    61b4:	08fa      	lsrs	r2, r7, #3
    61b6:	032d      	lsls	r5, r5, #12
    61b8:	422a      	tst	r2, r5
    61ba:	d007      	beq.n	61cc <__aeabi_dsub+0x5fc>
    61bc:	08c6      	lsrs	r6, r0, #3
    61be:	422e      	tst	r6, r5
    61c0:	d104      	bne.n	61cc <__aeabi_dsub+0x5fc>
    61c2:	0747      	lsls	r7, r0, #29
    61c4:	003c      	movs	r4, r7
    61c6:	0032      	movs	r2, r6
    61c8:	08c9      	lsrs	r1, r1, #3
    61ca:	430c      	orrs	r4, r1
    61cc:	00d7      	lsls	r7, r2, #3
    61ce:	0f62      	lsrs	r2, r4, #29
    61d0:	00e5      	lsls	r5, r4, #3
    61d2:	4317      	orrs	r7, r2
    61d4:	469a      	mov	sl, r3
    61d6:	4c26      	ldr	r4, [pc, #152]	; (6270 <__aeabi_dsub+0x6a0>)
    61d8:	e526      	b.n	5c28 <__aeabi_dsub+0x58>
    61da:	2200      	movs	r2, #0
    61dc:	2500      	movs	r5, #0
    61de:	e544      	b.n	5c6a <__aeabi_dsub+0x9a>
    61e0:	4c23      	ldr	r4, [pc, #140]	; (6270 <__aeabi_dsub+0x6a0>)
    61e2:	e521      	b.n	5c28 <__aeabi_dsub+0x58>
    61e4:	2000      	movs	r0, #0
    61e6:	e749      	b.n	607c <__aeabi_dsub+0x4ac>
    61e8:	2300      	movs	r3, #0
    61ea:	2500      	movs	r5, #0
    61ec:	e5bb      	b.n	5d66 <__aeabi_dsub+0x196>
    61ee:	464c      	mov	r4, r9
    61f0:	003e      	movs	r6, r7
    61f2:	3c20      	subs	r4, #32
    61f4:	40e6      	lsrs	r6, r4
    61f6:	464c      	mov	r4, r9
    61f8:	46b4      	mov	ip, r6
    61fa:	2c20      	cmp	r4, #32
    61fc:	d031      	beq.n	6262 <__aeabi_dsub+0x692>
    61fe:	2440      	movs	r4, #64	; 0x40
    6200:	464e      	mov	r6, r9
    6202:	1ba6      	subs	r6, r4, r6
    6204:	40b7      	lsls	r7, r6
    6206:	433d      	orrs	r5, r7
    6208:	1e6c      	subs	r4, r5, #1
    620a:	41a5      	sbcs	r5, r4
    620c:	4664      	mov	r4, ip
    620e:	432c      	orrs	r4, r5
    6210:	2700      	movs	r7, #0
    6212:	1b0d      	subs	r5, r1, r4
    6214:	e6e7      	b.n	5fe6 <__aeabi_dsub+0x416>
    6216:	2280      	movs	r2, #128	; 0x80
    6218:	2300      	movs	r3, #0
    621a:	0312      	lsls	r2, r2, #12
    621c:	4c14      	ldr	r4, [pc, #80]	; (6270 <__aeabi_dsub+0x6a0>)
    621e:	2500      	movs	r5, #0
    6220:	e5a1      	b.n	5d66 <__aeabi_dsub+0x196>
    6222:	433d      	orrs	r5, r7
    6224:	1e6f      	subs	r7, r5, #1
    6226:	41bd      	sbcs	r5, r7
    6228:	2700      	movs	r7, #0
    622a:	b2ed      	uxtb	r5, r5
    622c:	e760      	b.n	60f0 <__aeabi_dsub+0x520>
    622e:	0007      	movs	r7, r0
    6230:	000d      	movs	r5, r1
    6232:	4c0f      	ldr	r4, [pc, #60]	; (6270 <__aeabi_dsub+0x6a0>)
    6234:	e4f8      	b.n	5c28 <__aeabi_dsub+0x58>
    6236:	0007      	movs	r7, r0
    6238:	000d      	movs	r5, r1
    623a:	e4f5      	b.n	5c28 <__aeabi_dsub+0x58>
    623c:	464e      	mov	r6, r9
    623e:	003c      	movs	r4, r7
    6240:	3e20      	subs	r6, #32
    6242:	40f4      	lsrs	r4, r6
    6244:	46a0      	mov	r8, r4
    6246:	464c      	mov	r4, r9
    6248:	2c20      	cmp	r4, #32
    624a:	d00e      	beq.n	626a <__aeabi_dsub+0x69a>
    624c:	2440      	movs	r4, #64	; 0x40
    624e:	464e      	mov	r6, r9
    6250:	1ba4      	subs	r4, r4, r6
    6252:	40a7      	lsls	r7, r4
    6254:	433d      	orrs	r5, r7
    6256:	1e6f      	subs	r7, r5, #1
    6258:	41bd      	sbcs	r5, r7
    625a:	4644      	mov	r4, r8
    625c:	2700      	movs	r7, #0
    625e:	4325      	orrs	r5, r4
    6260:	e746      	b.n	60f0 <__aeabi_dsub+0x520>
    6262:	2700      	movs	r7, #0
    6264:	e7cf      	b.n	6206 <__aeabi_dsub+0x636>
    6266:	000d      	movs	r5, r1
    6268:	e573      	b.n	5d52 <__aeabi_dsub+0x182>
    626a:	2700      	movs	r7, #0
    626c:	e7f2      	b.n	6254 <__aeabi_dsub+0x684>
    626e:	46c0      	nop			; (mov r8, r8)
    6270:	000007ff 	.word	0x000007ff
    6274:	ff7fffff 	.word	0xff7fffff

00006278 <__aeabi_d2iz>:
    6278:	030b      	lsls	r3, r1, #12
    627a:	b530      	push	{r4, r5, lr}
    627c:	4d13      	ldr	r5, [pc, #76]	; (62cc <__aeabi_d2iz+0x54>)
    627e:	0b1a      	lsrs	r2, r3, #12
    6280:	004b      	lsls	r3, r1, #1
    6282:	0d5b      	lsrs	r3, r3, #21
    6284:	0fc9      	lsrs	r1, r1, #31
    6286:	2400      	movs	r4, #0
    6288:	42ab      	cmp	r3, r5
    628a:	dd11      	ble.n	62b0 <__aeabi_d2iz+0x38>
    628c:	4c10      	ldr	r4, [pc, #64]	; (62d0 <__aeabi_d2iz+0x58>)
    628e:	42a3      	cmp	r3, r4
    6290:	dc10      	bgt.n	62b4 <__aeabi_d2iz+0x3c>
    6292:	2480      	movs	r4, #128	; 0x80
    6294:	0364      	lsls	r4, r4, #13
    6296:	4322      	orrs	r2, r4
    6298:	4c0e      	ldr	r4, [pc, #56]	; (62d4 <__aeabi_d2iz+0x5c>)
    629a:	1ae4      	subs	r4, r4, r3
    629c:	2c1f      	cmp	r4, #31
    629e:	dd0c      	ble.n	62ba <__aeabi_d2iz+0x42>
    62a0:	480d      	ldr	r0, [pc, #52]	; (62d8 <__aeabi_d2iz+0x60>)
    62a2:	1ac3      	subs	r3, r0, r3
    62a4:	40da      	lsrs	r2, r3
    62a6:	0013      	movs	r3, r2
    62a8:	425c      	negs	r4, r3
    62aa:	2900      	cmp	r1, #0
    62ac:	d100      	bne.n	62b0 <__aeabi_d2iz+0x38>
    62ae:	001c      	movs	r4, r3
    62b0:	0020      	movs	r0, r4
    62b2:	bd30      	pop	{r4, r5, pc}
    62b4:	4b09      	ldr	r3, [pc, #36]	; (62dc <__aeabi_d2iz+0x64>)
    62b6:	18cc      	adds	r4, r1, r3
    62b8:	e7fa      	b.n	62b0 <__aeabi_d2iz+0x38>
    62ba:	40e0      	lsrs	r0, r4
    62bc:	4c08      	ldr	r4, [pc, #32]	; (62e0 <__aeabi_d2iz+0x68>)
    62be:	46a4      	mov	ip, r4
    62c0:	4463      	add	r3, ip
    62c2:	409a      	lsls	r2, r3
    62c4:	0013      	movs	r3, r2
    62c6:	4303      	orrs	r3, r0
    62c8:	e7ee      	b.n	62a8 <__aeabi_d2iz+0x30>
    62ca:	46c0      	nop			; (mov r8, r8)
    62cc:	000003fe 	.word	0x000003fe
    62d0:	0000041d 	.word	0x0000041d
    62d4:	00000433 	.word	0x00000433
    62d8:	00000413 	.word	0x00000413
    62dc:	7fffffff 	.word	0x7fffffff
    62e0:	fffffbed 	.word	0xfffffbed

000062e4 <__aeabi_ui2d>:
    62e4:	b570      	push	{r4, r5, r6, lr}
    62e6:	1e05      	subs	r5, r0, #0
    62e8:	d028      	beq.n	633c <__aeabi_ui2d+0x58>
    62ea:	f000 f833 	bl	6354 <__clzsi2>
    62ee:	4b15      	ldr	r3, [pc, #84]	; (6344 <__aeabi_ui2d+0x60>)
    62f0:	4a15      	ldr	r2, [pc, #84]	; (6348 <__aeabi_ui2d+0x64>)
    62f2:	1a1b      	subs	r3, r3, r0
    62f4:	1ad2      	subs	r2, r2, r3
    62f6:	2a1f      	cmp	r2, #31
    62f8:	dd16      	ble.n	6328 <__aeabi_ui2d+0x44>
    62fa:	002c      	movs	r4, r5
    62fc:	4a13      	ldr	r2, [pc, #76]	; (634c <__aeabi_ui2d+0x68>)
    62fe:	2500      	movs	r5, #0
    6300:	1ad2      	subs	r2, r2, r3
    6302:	4094      	lsls	r4, r2
    6304:	055a      	lsls	r2, r3, #21
    6306:	0324      	lsls	r4, r4, #12
    6308:	0b24      	lsrs	r4, r4, #12
    630a:	0d52      	lsrs	r2, r2, #21
    630c:	2100      	movs	r1, #0
    630e:	0324      	lsls	r4, r4, #12
    6310:	0d0b      	lsrs	r3, r1, #20
    6312:	0b24      	lsrs	r4, r4, #12
    6314:	051b      	lsls	r3, r3, #20
    6316:	4323      	orrs	r3, r4
    6318:	4c0d      	ldr	r4, [pc, #52]	; (6350 <__aeabi_ui2d+0x6c>)
    631a:	0512      	lsls	r2, r2, #20
    631c:	4023      	ands	r3, r4
    631e:	4313      	orrs	r3, r2
    6320:	005b      	lsls	r3, r3, #1
    6322:	0028      	movs	r0, r5
    6324:	0859      	lsrs	r1, r3, #1
    6326:	bd70      	pop	{r4, r5, r6, pc}
    6328:	210b      	movs	r1, #11
    632a:	002c      	movs	r4, r5
    632c:	1a08      	subs	r0, r1, r0
    632e:	40c4      	lsrs	r4, r0
    6330:	4095      	lsls	r5, r2
    6332:	0324      	lsls	r4, r4, #12
    6334:	055a      	lsls	r2, r3, #21
    6336:	0b24      	lsrs	r4, r4, #12
    6338:	0d52      	lsrs	r2, r2, #21
    633a:	e7e7      	b.n	630c <__aeabi_ui2d+0x28>
    633c:	2200      	movs	r2, #0
    633e:	2400      	movs	r4, #0
    6340:	e7e4      	b.n	630c <__aeabi_ui2d+0x28>
    6342:	46c0      	nop			; (mov r8, r8)
    6344:	0000041e 	.word	0x0000041e
    6348:	00000433 	.word	0x00000433
    634c:	00000413 	.word	0x00000413
    6350:	800fffff 	.word	0x800fffff

00006354 <__clzsi2>:
    6354:	211c      	movs	r1, #28
    6356:	2301      	movs	r3, #1
    6358:	041b      	lsls	r3, r3, #16
    635a:	4298      	cmp	r0, r3
    635c:	d301      	bcc.n	6362 <__clzsi2+0xe>
    635e:	0c00      	lsrs	r0, r0, #16
    6360:	3910      	subs	r1, #16
    6362:	0a1b      	lsrs	r3, r3, #8
    6364:	4298      	cmp	r0, r3
    6366:	d301      	bcc.n	636c <__clzsi2+0x18>
    6368:	0a00      	lsrs	r0, r0, #8
    636a:	3908      	subs	r1, #8
    636c:	091b      	lsrs	r3, r3, #4
    636e:	4298      	cmp	r0, r3
    6370:	d301      	bcc.n	6376 <__clzsi2+0x22>
    6372:	0900      	lsrs	r0, r0, #4
    6374:	3904      	subs	r1, #4
    6376:	a202      	add	r2, pc, #8	; (adr r2, 6380 <__clzsi2+0x2c>)
    6378:	5c10      	ldrb	r0, [r2, r0]
    637a:	1840      	adds	r0, r0, r1
    637c:	4770      	bx	lr
    637e:	46c0      	nop			; (mov r8, r8)
    6380:	02020304 	.word	0x02020304
    6384:	01010101 	.word	0x01010101
	...

00006390 <__libc_init_array>:
    6390:	4b0e      	ldr	r3, [pc, #56]	; (63cc <__libc_init_array+0x3c>)
    6392:	b570      	push	{r4, r5, r6, lr}
    6394:	2500      	movs	r5, #0
    6396:	001e      	movs	r6, r3
    6398:	4c0d      	ldr	r4, [pc, #52]	; (63d0 <__libc_init_array+0x40>)
    639a:	1ae4      	subs	r4, r4, r3
    639c:	10a4      	asrs	r4, r4, #2
    639e:	42a5      	cmp	r5, r4
    63a0:	d004      	beq.n	63ac <__libc_init_array+0x1c>
    63a2:	00ab      	lsls	r3, r5, #2
    63a4:	58f3      	ldr	r3, [r6, r3]
    63a6:	4798      	blx	r3
    63a8:	3501      	adds	r5, #1
    63aa:	e7f8      	b.n	639e <__libc_init_array+0xe>
    63ac:	f000 fd6a 	bl	6e84 <_init>
    63b0:	4b08      	ldr	r3, [pc, #32]	; (63d4 <__libc_init_array+0x44>)
    63b2:	2500      	movs	r5, #0
    63b4:	001e      	movs	r6, r3
    63b6:	4c08      	ldr	r4, [pc, #32]	; (63d8 <__libc_init_array+0x48>)
    63b8:	1ae4      	subs	r4, r4, r3
    63ba:	10a4      	asrs	r4, r4, #2
    63bc:	42a5      	cmp	r5, r4
    63be:	d004      	beq.n	63ca <__libc_init_array+0x3a>
    63c0:	00ab      	lsls	r3, r5, #2
    63c2:	58f3      	ldr	r3, [r6, r3]
    63c4:	4798      	blx	r3
    63c6:	3501      	adds	r5, #1
    63c8:	e7f8      	b.n	63bc <__libc_init_array+0x2c>
    63ca:	bd70      	pop	{r4, r5, r6, pc}
    63cc:	00006e90 	.word	0x00006e90
    63d0:	00006e90 	.word	0x00006e90
    63d4:	00006e90 	.word	0x00006e90
    63d8:	00006e94 	.word	0x00006e94

000063dc <memcpy>:
    63dc:	2300      	movs	r3, #0
    63de:	b510      	push	{r4, lr}
    63e0:	429a      	cmp	r2, r3
    63e2:	d003      	beq.n	63ec <memcpy+0x10>
    63e4:	5ccc      	ldrb	r4, [r1, r3]
    63e6:	54c4      	strb	r4, [r0, r3]
    63e8:	3301      	adds	r3, #1
    63ea:	e7f9      	b.n	63e0 <memcpy+0x4>
    63ec:	bd10      	pop	{r4, pc}

000063ee <memset>:
    63ee:	0003      	movs	r3, r0
    63f0:	1882      	adds	r2, r0, r2
    63f2:	4293      	cmp	r3, r2
    63f4:	d002      	beq.n	63fc <memset+0xe>
    63f6:	7019      	strb	r1, [r3, #0]
    63f8:	3301      	adds	r3, #1
    63fa:	e7fa      	b.n	63f2 <memset+0x4>
    63fc:	4770      	bx	lr

000063fe <setbuf>:
    63fe:	424a      	negs	r2, r1
    6400:	414a      	adcs	r2, r1
    6402:	2380      	movs	r3, #128	; 0x80
    6404:	b510      	push	{r4, lr}
    6406:	0052      	lsls	r2, r2, #1
    6408:	00db      	lsls	r3, r3, #3
    640a:	f000 f801 	bl	6410 <setvbuf>
    640e:	bd10      	pop	{r4, pc}

00006410 <setvbuf>:
    6410:	b5f0      	push	{r4, r5, r6, r7, lr}
    6412:	001d      	movs	r5, r3
    6414:	4b51      	ldr	r3, [pc, #324]	; (655c <setvbuf+0x14c>)
    6416:	b085      	sub	sp, #20
    6418:	681e      	ldr	r6, [r3, #0]
    641a:	0004      	movs	r4, r0
    641c:	000f      	movs	r7, r1
    641e:	9200      	str	r2, [sp, #0]
    6420:	2e00      	cmp	r6, #0
    6422:	d005      	beq.n	6430 <setvbuf+0x20>
    6424:	69b3      	ldr	r3, [r6, #24]
    6426:	2b00      	cmp	r3, #0
    6428:	d102      	bne.n	6430 <setvbuf+0x20>
    642a:	0030      	movs	r0, r6
    642c:	f000 f994 	bl	6758 <__sinit>
    6430:	4b4b      	ldr	r3, [pc, #300]	; (6560 <setvbuf+0x150>)
    6432:	429c      	cmp	r4, r3
    6434:	d101      	bne.n	643a <setvbuf+0x2a>
    6436:	6874      	ldr	r4, [r6, #4]
    6438:	e008      	b.n	644c <setvbuf+0x3c>
    643a:	4b4a      	ldr	r3, [pc, #296]	; (6564 <setvbuf+0x154>)
    643c:	429c      	cmp	r4, r3
    643e:	d101      	bne.n	6444 <setvbuf+0x34>
    6440:	68b4      	ldr	r4, [r6, #8]
    6442:	e003      	b.n	644c <setvbuf+0x3c>
    6444:	4b48      	ldr	r3, [pc, #288]	; (6568 <setvbuf+0x158>)
    6446:	429c      	cmp	r4, r3
    6448:	d100      	bne.n	644c <setvbuf+0x3c>
    644a:	68f4      	ldr	r4, [r6, #12]
    644c:	9b00      	ldr	r3, [sp, #0]
    644e:	2b02      	cmp	r3, #2
    6450:	d005      	beq.n	645e <setvbuf+0x4e>
    6452:	2b01      	cmp	r3, #1
    6454:	d900      	bls.n	6458 <setvbuf+0x48>
    6456:	e07c      	b.n	6552 <setvbuf+0x142>
    6458:	2d00      	cmp	r5, #0
    645a:	da00      	bge.n	645e <setvbuf+0x4e>
    645c:	e079      	b.n	6552 <setvbuf+0x142>
    645e:	0021      	movs	r1, r4
    6460:	0030      	movs	r0, r6
    6462:	f000 f90b 	bl	667c <_fflush_r>
    6466:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6468:	2900      	cmp	r1, #0
    646a:	d008      	beq.n	647e <setvbuf+0x6e>
    646c:	0023      	movs	r3, r4
    646e:	3344      	adds	r3, #68	; 0x44
    6470:	4299      	cmp	r1, r3
    6472:	d002      	beq.n	647a <setvbuf+0x6a>
    6474:	0030      	movs	r0, r6
    6476:	f000 fa33 	bl	68e0 <_free_r>
    647a:	2300      	movs	r3, #0
    647c:	6363      	str	r3, [r4, #52]	; 0x34
    647e:	2300      	movs	r3, #0
    6480:	61a3      	str	r3, [r4, #24]
    6482:	6063      	str	r3, [r4, #4]
    6484:	89a3      	ldrh	r3, [r4, #12]
    6486:	061b      	lsls	r3, r3, #24
    6488:	d503      	bpl.n	6492 <setvbuf+0x82>
    648a:	6921      	ldr	r1, [r4, #16]
    648c:	0030      	movs	r0, r6
    648e:	f000 fa27 	bl	68e0 <_free_r>
    6492:	89a2      	ldrh	r2, [r4, #12]
    6494:	4b35      	ldr	r3, [pc, #212]	; (656c <setvbuf+0x15c>)
    6496:	4013      	ands	r3, r2
    6498:	81a3      	strh	r3, [r4, #12]
    649a:	9b00      	ldr	r3, [sp, #0]
    649c:	2b02      	cmp	r3, #2
    649e:	d021      	beq.n	64e4 <setvbuf+0xd4>
    64a0:	ab03      	add	r3, sp, #12
    64a2:	aa02      	add	r2, sp, #8
    64a4:	0021      	movs	r1, r4
    64a6:	0030      	movs	r0, r6
    64a8:	f000 f9ea 	bl	6880 <__swhatbuf_r>
    64ac:	89a3      	ldrh	r3, [r4, #12]
    64ae:	4318      	orrs	r0, r3
    64b0:	81a0      	strh	r0, [r4, #12]
    64b2:	2d00      	cmp	r5, #0
    64b4:	d101      	bne.n	64ba <setvbuf+0xaa>
    64b6:	9d02      	ldr	r5, [sp, #8]
    64b8:	e001      	b.n	64be <setvbuf+0xae>
    64ba:	2f00      	cmp	r7, #0
    64bc:	d125      	bne.n	650a <setvbuf+0xfa>
    64be:	0028      	movs	r0, r5
    64c0:	f000 fa04 	bl	68cc <malloc>
    64c4:	9501      	str	r5, [sp, #4]
    64c6:	1e07      	subs	r7, r0, #0
    64c8:	d11a      	bne.n	6500 <setvbuf+0xf0>
    64ca:	9b02      	ldr	r3, [sp, #8]
    64cc:	9301      	str	r3, [sp, #4]
    64ce:	42ab      	cmp	r3, r5
    64d0:	d102      	bne.n	64d8 <setvbuf+0xc8>
    64d2:	2001      	movs	r0, #1
    64d4:	4240      	negs	r0, r0
    64d6:	e006      	b.n	64e6 <setvbuf+0xd6>
    64d8:	9801      	ldr	r0, [sp, #4]
    64da:	f000 f9f7 	bl	68cc <malloc>
    64de:	1e07      	subs	r7, r0, #0
    64e0:	d10e      	bne.n	6500 <setvbuf+0xf0>
    64e2:	e7f6      	b.n	64d2 <setvbuf+0xc2>
    64e4:	2000      	movs	r0, #0
    64e6:	2202      	movs	r2, #2
    64e8:	89a3      	ldrh	r3, [r4, #12]
    64ea:	4313      	orrs	r3, r2
    64ec:	81a3      	strh	r3, [r4, #12]
    64ee:	2300      	movs	r3, #0
    64f0:	60a3      	str	r3, [r4, #8]
    64f2:	0023      	movs	r3, r4
    64f4:	3347      	adds	r3, #71	; 0x47
    64f6:	6023      	str	r3, [r4, #0]
    64f8:	6123      	str	r3, [r4, #16]
    64fa:	2301      	movs	r3, #1
    64fc:	6163      	str	r3, [r4, #20]
    64fe:	e02a      	b.n	6556 <setvbuf+0x146>
    6500:	2280      	movs	r2, #128	; 0x80
    6502:	89a3      	ldrh	r3, [r4, #12]
    6504:	9d01      	ldr	r5, [sp, #4]
    6506:	4313      	orrs	r3, r2
    6508:	81a3      	strh	r3, [r4, #12]
    650a:	69b3      	ldr	r3, [r6, #24]
    650c:	2b00      	cmp	r3, #0
    650e:	d102      	bne.n	6516 <setvbuf+0x106>
    6510:	0030      	movs	r0, r6
    6512:	f000 f921 	bl	6758 <__sinit>
    6516:	9b00      	ldr	r3, [sp, #0]
    6518:	2b01      	cmp	r3, #1
    651a:	d103      	bne.n	6524 <setvbuf+0x114>
    651c:	89a3      	ldrh	r3, [r4, #12]
    651e:	9a00      	ldr	r2, [sp, #0]
    6520:	431a      	orrs	r2, r3
    6522:	81a2      	strh	r2, [r4, #12]
    6524:	2308      	movs	r3, #8
    6526:	89a2      	ldrh	r2, [r4, #12]
    6528:	6027      	str	r7, [r4, #0]
    652a:	4013      	ands	r3, r2
    652c:	6127      	str	r7, [r4, #16]
    652e:	6165      	str	r5, [r4, #20]
    6530:	1e18      	subs	r0, r3, #0
    6532:	d00c      	beq.n	654e <setvbuf+0x13e>
    6534:	2301      	movs	r3, #1
    6536:	401a      	ands	r2, r3
    6538:	2300      	movs	r3, #0
    653a:	1e10      	subs	r0, r2, #0
    653c:	4298      	cmp	r0, r3
    653e:	d004      	beq.n	654a <setvbuf+0x13a>
    6540:	426d      	negs	r5, r5
    6542:	60a3      	str	r3, [r4, #8]
    6544:	61a5      	str	r5, [r4, #24]
    6546:	0018      	movs	r0, r3
    6548:	e005      	b.n	6556 <setvbuf+0x146>
    654a:	60a5      	str	r5, [r4, #8]
    654c:	e003      	b.n	6556 <setvbuf+0x146>
    654e:	60a3      	str	r3, [r4, #8]
    6550:	e001      	b.n	6556 <setvbuf+0x146>
    6552:	2001      	movs	r0, #1
    6554:	4240      	negs	r0, r0
    6556:	b005      	add	sp, #20
    6558:	bdf0      	pop	{r4, r5, r6, r7, pc}
    655a:	46c0      	nop			; (mov r8, r8)
    655c:	200000b0 	.word	0x200000b0
    6560:	00006e24 	.word	0x00006e24
    6564:	00006e44 	.word	0x00006e44
    6568:	00006e64 	.word	0x00006e64
    656c:	fffff35c 	.word	0xfffff35c

00006570 <__sflush_r>:
    6570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6572:	898a      	ldrh	r2, [r1, #12]
    6574:	0005      	movs	r5, r0
    6576:	000c      	movs	r4, r1
    6578:	0713      	lsls	r3, r2, #28
    657a:	d45a      	bmi.n	6632 <__sflush_r+0xc2>
    657c:	684b      	ldr	r3, [r1, #4]
    657e:	2b00      	cmp	r3, #0
    6580:	dc02      	bgt.n	6588 <__sflush_r+0x18>
    6582:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6584:	2b00      	cmp	r3, #0
    6586:	dd19      	ble.n	65bc <__sflush_r+0x4c>
    6588:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    658a:	2f00      	cmp	r7, #0
    658c:	d016      	beq.n	65bc <__sflush_r+0x4c>
    658e:	2300      	movs	r3, #0
    6590:	682e      	ldr	r6, [r5, #0]
    6592:	602b      	str	r3, [r5, #0]
    6594:	2380      	movs	r3, #128	; 0x80
    6596:	015b      	lsls	r3, r3, #5
    6598:	401a      	ands	r2, r3
    659a:	d001      	beq.n	65a0 <__sflush_r+0x30>
    659c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    659e:	e014      	b.n	65ca <__sflush_r+0x5a>
    65a0:	2301      	movs	r3, #1
    65a2:	6a21      	ldr	r1, [r4, #32]
    65a4:	0028      	movs	r0, r5
    65a6:	47b8      	blx	r7
    65a8:	1c43      	adds	r3, r0, #1
    65aa:	d10e      	bne.n	65ca <__sflush_r+0x5a>
    65ac:	682b      	ldr	r3, [r5, #0]
    65ae:	2b00      	cmp	r3, #0
    65b0:	d00b      	beq.n	65ca <__sflush_r+0x5a>
    65b2:	2b1d      	cmp	r3, #29
    65b4:	d001      	beq.n	65ba <__sflush_r+0x4a>
    65b6:	2b16      	cmp	r3, #22
    65b8:	d102      	bne.n	65c0 <__sflush_r+0x50>
    65ba:	602e      	str	r6, [r5, #0]
    65bc:	2000      	movs	r0, #0
    65be:	e05a      	b.n	6676 <__sflush_r+0x106>
    65c0:	2240      	movs	r2, #64	; 0x40
    65c2:	89a3      	ldrh	r3, [r4, #12]
    65c4:	4313      	orrs	r3, r2
    65c6:	81a3      	strh	r3, [r4, #12]
    65c8:	e055      	b.n	6676 <__sflush_r+0x106>
    65ca:	89a3      	ldrh	r3, [r4, #12]
    65cc:	075b      	lsls	r3, r3, #29
    65ce:	d506      	bpl.n	65de <__sflush_r+0x6e>
    65d0:	6863      	ldr	r3, [r4, #4]
    65d2:	1ac0      	subs	r0, r0, r3
    65d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    65d6:	2b00      	cmp	r3, #0
    65d8:	d001      	beq.n	65de <__sflush_r+0x6e>
    65da:	6c23      	ldr	r3, [r4, #64]	; 0x40
    65dc:	1ac0      	subs	r0, r0, r3
    65de:	2300      	movs	r3, #0
    65e0:	0002      	movs	r2, r0
    65e2:	6a21      	ldr	r1, [r4, #32]
    65e4:	0028      	movs	r0, r5
    65e6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    65e8:	47b8      	blx	r7
    65ea:	89a3      	ldrh	r3, [r4, #12]
    65ec:	1c42      	adds	r2, r0, #1
    65ee:	d106      	bne.n	65fe <__sflush_r+0x8e>
    65f0:	6829      	ldr	r1, [r5, #0]
    65f2:	291d      	cmp	r1, #29
    65f4:	d83a      	bhi.n	666c <__sflush_r+0xfc>
    65f6:	4a20      	ldr	r2, [pc, #128]	; (6678 <__sflush_r+0x108>)
    65f8:	40ca      	lsrs	r2, r1
    65fa:	07d2      	lsls	r2, r2, #31
    65fc:	d536      	bpl.n	666c <__sflush_r+0xfc>
    65fe:	2200      	movs	r2, #0
    6600:	6062      	str	r2, [r4, #4]
    6602:	6922      	ldr	r2, [r4, #16]
    6604:	6022      	str	r2, [r4, #0]
    6606:	04db      	lsls	r3, r3, #19
    6608:	d505      	bpl.n	6616 <__sflush_r+0xa6>
    660a:	1c43      	adds	r3, r0, #1
    660c:	d102      	bne.n	6614 <__sflush_r+0xa4>
    660e:	682b      	ldr	r3, [r5, #0]
    6610:	2b00      	cmp	r3, #0
    6612:	d100      	bne.n	6616 <__sflush_r+0xa6>
    6614:	6560      	str	r0, [r4, #84]	; 0x54
    6616:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6618:	602e      	str	r6, [r5, #0]
    661a:	2900      	cmp	r1, #0
    661c:	d0ce      	beq.n	65bc <__sflush_r+0x4c>
    661e:	0023      	movs	r3, r4
    6620:	3344      	adds	r3, #68	; 0x44
    6622:	4299      	cmp	r1, r3
    6624:	d002      	beq.n	662c <__sflush_r+0xbc>
    6626:	0028      	movs	r0, r5
    6628:	f000 f95a 	bl	68e0 <_free_r>
    662c:	2000      	movs	r0, #0
    662e:	6360      	str	r0, [r4, #52]	; 0x34
    6630:	e021      	b.n	6676 <__sflush_r+0x106>
    6632:	690f      	ldr	r7, [r1, #16]
    6634:	2f00      	cmp	r7, #0
    6636:	d0c1      	beq.n	65bc <__sflush_r+0x4c>
    6638:	680b      	ldr	r3, [r1, #0]
    663a:	600f      	str	r7, [r1, #0]
    663c:	1bdb      	subs	r3, r3, r7
    663e:	9301      	str	r3, [sp, #4]
    6640:	2300      	movs	r3, #0
    6642:	0792      	lsls	r2, r2, #30
    6644:	d100      	bne.n	6648 <__sflush_r+0xd8>
    6646:	694b      	ldr	r3, [r1, #20]
    6648:	60a3      	str	r3, [r4, #8]
    664a:	e003      	b.n	6654 <__sflush_r+0xe4>
    664c:	9b01      	ldr	r3, [sp, #4]
    664e:	183f      	adds	r7, r7, r0
    6650:	1a1b      	subs	r3, r3, r0
    6652:	9301      	str	r3, [sp, #4]
    6654:	9b01      	ldr	r3, [sp, #4]
    6656:	2b00      	cmp	r3, #0
    6658:	ddb0      	ble.n	65bc <__sflush_r+0x4c>
    665a:	9b01      	ldr	r3, [sp, #4]
    665c:	003a      	movs	r2, r7
    665e:	6a21      	ldr	r1, [r4, #32]
    6660:	0028      	movs	r0, r5
    6662:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    6664:	47b0      	blx	r6
    6666:	2800      	cmp	r0, #0
    6668:	dcf0      	bgt.n	664c <__sflush_r+0xdc>
    666a:	89a3      	ldrh	r3, [r4, #12]
    666c:	2240      	movs	r2, #64	; 0x40
    666e:	2001      	movs	r0, #1
    6670:	4313      	orrs	r3, r2
    6672:	81a3      	strh	r3, [r4, #12]
    6674:	4240      	negs	r0, r0
    6676:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6678:	20400001 	.word	0x20400001

0000667c <_fflush_r>:
    667c:	690b      	ldr	r3, [r1, #16]
    667e:	b570      	push	{r4, r5, r6, lr}
    6680:	0005      	movs	r5, r0
    6682:	000c      	movs	r4, r1
    6684:	2b00      	cmp	r3, #0
    6686:	d101      	bne.n	668c <_fflush_r+0x10>
    6688:	2000      	movs	r0, #0
    668a:	e01c      	b.n	66c6 <_fflush_r+0x4a>
    668c:	2800      	cmp	r0, #0
    668e:	d004      	beq.n	669a <_fflush_r+0x1e>
    6690:	6983      	ldr	r3, [r0, #24]
    6692:	2b00      	cmp	r3, #0
    6694:	d101      	bne.n	669a <_fflush_r+0x1e>
    6696:	f000 f85f 	bl	6758 <__sinit>
    669a:	4b0b      	ldr	r3, [pc, #44]	; (66c8 <_fflush_r+0x4c>)
    669c:	429c      	cmp	r4, r3
    669e:	d101      	bne.n	66a4 <_fflush_r+0x28>
    66a0:	686c      	ldr	r4, [r5, #4]
    66a2:	e008      	b.n	66b6 <_fflush_r+0x3a>
    66a4:	4b09      	ldr	r3, [pc, #36]	; (66cc <_fflush_r+0x50>)
    66a6:	429c      	cmp	r4, r3
    66a8:	d101      	bne.n	66ae <_fflush_r+0x32>
    66aa:	68ac      	ldr	r4, [r5, #8]
    66ac:	e003      	b.n	66b6 <_fflush_r+0x3a>
    66ae:	4b08      	ldr	r3, [pc, #32]	; (66d0 <_fflush_r+0x54>)
    66b0:	429c      	cmp	r4, r3
    66b2:	d100      	bne.n	66b6 <_fflush_r+0x3a>
    66b4:	68ec      	ldr	r4, [r5, #12]
    66b6:	220c      	movs	r2, #12
    66b8:	5ea3      	ldrsh	r3, [r4, r2]
    66ba:	2b00      	cmp	r3, #0
    66bc:	d0e4      	beq.n	6688 <_fflush_r+0xc>
    66be:	0021      	movs	r1, r4
    66c0:	0028      	movs	r0, r5
    66c2:	f7ff ff55 	bl	6570 <__sflush_r>
    66c6:	bd70      	pop	{r4, r5, r6, pc}
    66c8:	00006e24 	.word	0x00006e24
    66cc:	00006e44 	.word	0x00006e44
    66d0:	00006e64 	.word	0x00006e64

000066d4 <_cleanup_r>:
    66d4:	b510      	push	{r4, lr}
    66d6:	4902      	ldr	r1, [pc, #8]	; (66e0 <_cleanup_r+0xc>)
    66d8:	f000 f8b0 	bl	683c <_fwalk_reent>
    66dc:	bd10      	pop	{r4, pc}
    66de:	46c0      	nop			; (mov r8, r8)
    66e0:	0000667d 	.word	0x0000667d

000066e4 <std.isra.0>:
    66e4:	2300      	movs	r3, #0
    66e6:	b510      	push	{r4, lr}
    66e8:	0004      	movs	r4, r0
    66ea:	6003      	str	r3, [r0, #0]
    66ec:	6043      	str	r3, [r0, #4]
    66ee:	6083      	str	r3, [r0, #8]
    66f0:	8181      	strh	r1, [r0, #12]
    66f2:	6643      	str	r3, [r0, #100]	; 0x64
    66f4:	81c2      	strh	r2, [r0, #14]
    66f6:	6103      	str	r3, [r0, #16]
    66f8:	6143      	str	r3, [r0, #20]
    66fa:	6183      	str	r3, [r0, #24]
    66fc:	0019      	movs	r1, r3
    66fe:	2208      	movs	r2, #8
    6700:	305c      	adds	r0, #92	; 0x5c
    6702:	f7ff fe74 	bl	63ee <memset>
    6706:	4b05      	ldr	r3, [pc, #20]	; (671c <std.isra.0+0x38>)
    6708:	6224      	str	r4, [r4, #32]
    670a:	6263      	str	r3, [r4, #36]	; 0x24
    670c:	4b04      	ldr	r3, [pc, #16]	; (6720 <std.isra.0+0x3c>)
    670e:	62a3      	str	r3, [r4, #40]	; 0x28
    6710:	4b04      	ldr	r3, [pc, #16]	; (6724 <std.isra.0+0x40>)
    6712:	62e3      	str	r3, [r4, #44]	; 0x2c
    6714:	4b04      	ldr	r3, [pc, #16]	; (6728 <std.isra.0+0x44>)
    6716:	6323      	str	r3, [r4, #48]	; 0x30
    6718:	bd10      	pop	{r4, pc}
    671a:	46c0      	nop			; (mov r8, r8)
    671c:	00006a3d 	.word	0x00006a3d
    6720:	00006a65 	.word	0x00006a65
    6724:	00006a9d 	.word	0x00006a9d
    6728:	00006ac9 	.word	0x00006ac9

0000672c <__sfmoreglue>:
    672c:	b570      	push	{r4, r5, r6, lr}
    672e:	2568      	movs	r5, #104	; 0x68
    6730:	1e4b      	subs	r3, r1, #1
    6732:	435d      	muls	r5, r3
    6734:	000e      	movs	r6, r1
    6736:	0029      	movs	r1, r5
    6738:	3174      	adds	r1, #116	; 0x74
    673a:	f000 f917 	bl	696c <_malloc_r>
    673e:	1e04      	subs	r4, r0, #0
    6740:	d008      	beq.n	6754 <__sfmoreglue+0x28>
    6742:	2100      	movs	r1, #0
    6744:	002a      	movs	r2, r5
    6746:	6001      	str	r1, [r0, #0]
    6748:	6046      	str	r6, [r0, #4]
    674a:	300c      	adds	r0, #12
    674c:	60a0      	str	r0, [r4, #8]
    674e:	3268      	adds	r2, #104	; 0x68
    6750:	f7ff fe4d 	bl	63ee <memset>
    6754:	0020      	movs	r0, r4
    6756:	bd70      	pop	{r4, r5, r6, pc}

00006758 <__sinit>:
    6758:	6983      	ldr	r3, [r0, #24]
    675a:	b513      	push	{r0, r1, r4, lr}
    675c:	0004      	movs	r4, r0
    675e:	2b00      	cmp	r3, #0
    6760:	d128      	bne.n	67b4 <__sinit+0x5c>
    6762:	6483      	str	r3, [r0, #72]	; 0x48
    6764:	64c3      	str	r3, [r0, #76]	; 0x4c
    6766:	6503      	str	r3, [r0, #80]	; 0x50
    6768:	4b13      	ldr	r3, [pc, #76]	; (67b8 <__sinit+0x60>)
    676a:	4a14      	ldr	r2, [pc, #80]	; (67bc <__sinit+0x64>)
    676c:	681b      	ldr	r3, [r3, #0]
    676e:	6282      	str	r2, [r0, #40]	; 0x28
    6770:	9301      	str	r3, [sp, #4]
    6772:	4298      	cmp	r0, r3
    6774:	d101      	bne.n	677a <__sinit+0x22>
    6776:	2301      	movs	r3, #1
    6778:	6183      	str	r3, [r0, #24]
    677a:	0020      	movs	r0, r4
    677c:	f000 f820 	bl	67c0 <__sfp>
    6780:	6060      	str	r0, [r4, #4]
    6782:	0020      	movs	r0, r4
    6784:	f000 f81c 	bl	67c0 <__sfp>
    6788:	60a0      	str	r0, [r4, #8]
    678a:	0020      	movs	r0, r4
    678c:	f000 f818 	bl	67c0 <__sfp>
    6790:	2200      	movs	r2, #0
    6792:	60e0      	str	r0, [r4, #12]
    6794:	2104      	movs	r1, #4
    6796:	6860      	ldr	r0, [r4, #4]
    6798:	f7ff ffa4 	bl	66e4 <std.isra.0>
    679c:	2201      	movs	r2, #1
    679e:	2109      	movs	r1, #9
    67a0:	68a0      	ldr	r0, [r4, #8]
    67a2:	f7ff ff9f 	bl	66e4 <std.isra.0>
    67a6:	2202      	movs	r2, #2
    67a8:	2112      	movs	r1, #18
    67aa:	68e0      	ldr	r0, [r4, #12]
    67ac:	f7ff ff9a 	bl	66e4 <std.isra.0>
    67b0:	2301      	movs	r3, #1
    67b2:	61a3      	str	r3, [r4, #24]
    67b4:	bd13      	pop	{r0, r1, r4, pc}
    67b6:	46c0      	nop			; (mov r8, r8)
    67b8:	00006e20 	.word	0x00006e20
    67bc:	000066d5 	.word	0x000066d5

000067c0 <__sfp>:
    67c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67c2:	4b1d      	ldr	r3, [pc, #116]	; (6838 <__sfp+0x78>)
    67c4:	0006      	movs	r6, r0
    67c6:	681d      	ldr	r5, [r3, #0]
    67c8:	69ab      	ldr	r3, [r5, #24]
    67ca:	2b00      	cmp	r3, #0
    67cc:	d102      	bne.n	67d4 <__sfp+0x14>
    67ce:	0028      	movs	r0, r5
    67d0:	f7ff ffc2 	bl	6758 <__sinit>
    67d4:	3548      	adds	r5, #72	; 0x48
    67d6:	68ac      	ldr	r4, [r5, #8]
    67d8:	686b      	ldr	r3, [r5, #4]
    67da:	3b01      	subs	r3, #1
    67dc:	d405      	bmi.n	67ea <__sfp+0x2a>
    67de:	220c      	movs	r2, #12
    67e0:	5ea7      	ldrsh	r7, [r4, r2]
    67e2:	2f00      	cmp	r7, #0
    67e4:	d010      	beq.n	6808 <__sfp+0x48>
    67e6:	3468      	adds	r4, #104	; 0x68
    67e8:	e7f7      	b.n	67da <__sfp+0x1a>
    67ea:	682b      	ldr	r3, [r5, #0]
    67ec:	2b00      	cmp	r3, #0
    67ee:	d001      	beq.n	67f4 <__sfp+0x34>
    67f0:	682d      	ldr	r5, [r5, #0]
    67f2:	e7f0      	b.n	67d6 <__sfp+0x16>
    67f4:	2104      	movs	r1, #4
    67f6:	0030      	movs	r0, r6
    67f8:	f7ff ff98 	bl	672c <__sfmoreglue>
    67fc:	6028      	str	r0, [r5, #0]
    67fe:	2800      	cmp	r0, #0
    6800:	d1f6      	bne.n	67f0 <__sfp+0x30>
    6802:	230c      	movs	r3, #12
    6804:	6033      	str	r3, [r6, #0]
    6806:	e016      	b.n	6836 <__sfp+0x76>
    6808:	2301      	movs	r3, #1
    680a:	0020      	movs	r0, r4
    680c:	425b      	negs	r3, r3
    680e:	81e3      	strh	r3, [r4, #14]
    6810:	3302      	adds	r3, #2
    6812:	81a3      	strh	r3, [r4, #12]
    6814:	6667      	str	r7, [r4, #100]	; 0x64
    6816:	6027      	str	r7, [r4, #0]
    6818:	60a7      	str	r7, [r4, #8]
    681a:	6067      	str	r7, [r4, #4]
    681c:	6127      	str	r7, [r4, #16]
    681e:	6167      	str	r7, [r4, #20]
    6820:	61a7      	str	r7, [r4, #24]
    6822:	305c      	adds	r0, #92	; 0x5c
    6824:	2208      	movs	r2, #8
    6826:	0039      	movs	r1, r7
    6828:	f7ff fde1 	bl	63ee <memset>
    682c:	0020      	movs	r0, r4
    682e:	6367      	str	r7, [r4, #52]	; 0x34
    6830:	63a7      	str	r7, [r4, #56]	; 0x38
    6832:	64a7      	str	r7, [r4, #72]	; 0x48
    6834:	64e7      	str	r7, [r4, #76]	; 0x4c
    6836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6838:	00006e20 	.word	0x00006e20

0000683c <_fwalk_reent>:
    683c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    683e:	0004      	movs	r4, r0
    6840:	0007      	movs	r7, r0
    6842:	2600      	movs	r6, #0
    6844:	9101      	str	r1, [sp, #4]
    6846:	3448      	adds	r4, #72	; 0x48
    6848:	2c00      	cmp	r4, #0
    684a:	d016      	beq.n	687a <_fwalk_reent+0x3e>
    684c:	6863      	ldr	r3, [r4, #4]
    684e:	68a5      	ldr	r5, [r4, #8]
    6850:	9300      	str	r3, [sp, #0]
    6852:	9b00      	ldr	r3, [sp, #0]
    6854:	3b01      	subs	r3, #1
    6856:	9300      	str	r3, [sp, #0]
    6858:	d40d      	bmi.n	6876 <_fwalk_reent+0x3a>
    685a:	89ab      	ldrh	r3, [r5, #12]
    685c:	2b01      	cmp	r3, #1
    685e:	d908      	bls.n	6872 <_fwalk_reent+0x36>
    6860:	220e      	movs	r2, #14
    6862:	5eab      	ldrsh	r3, [r5, r2]
    6864:	3301      	adds	r3, #1
    6866:	d004      	beq.n	6872 <_fwalk_reent+0x36>
    6868:	0029      	movs	r1, r5
    686a:	0038      	movs	r0, r7
    686c:	9b01      	ldr	r3, [sp, #4]
    686e:	4798      	blx	r3
    6870:	4306      	orrs	r6, r0
    6872:	3568      	adds	r5, #104	; 0x68
    6874:	e7ed      	b.n	6852 <_fwalk_reent+0x16>
    6876:	6824      	ldr	r4, [r4, #0]
    6878:	e7e6      	b.n	6848 <_fwalk_reent+0xc>
    687a:	0030      	movs	r0, r6
    687c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00006880 <__swhatbuf_r>:
    6880:	b570      	push	{r4, r5, r6, lr}
    6882:	000e      	movs	r6, r1
    6884:	001d      	movs	r5, r3
    6886:	230e      	movs	r3, #14
    6888:	5ec9      	ldrsh	r1, [r1, r3]
    688a:	b090      	sub	sp, #64	; 0x40
    688c:	0014      	movs	r4, r2
    688e:	2900      	cmp	r1, #0
    6890:	da06      	bge.n	68a0 <__swhatbuf_r+0x20>
    6892:	2300      	movs	r3, #0
    6894:	602b      	str	r3, [r5, #0]
    6896:	89b3      	ldrh	r3, [r6, #12]
    6898:	061b      	lsls	r3, r3, #24
    689a:	d50f      	bpl.n	68bc <__swhatbuf_r+0x3c>
    689c:	2340      	movs	r3, #64	; 0x40
    689e:	e00f      	b.n	68c0 <__swhatbuf_r+0x40>
    68a0:	aa01      	add	r2, sp, #4
    68a2:	f000 f93d 	bl	6b20 <_fstat_r>
    68a6:	2800      	cmp	r0, #0
    68a8:	dbf3      	blt.n	6892 <__swhatbuf_r+0x12>
    68aa:	23f0      	movs	r3, #240	; 0xf0
    68ac:	9a02      	ldr	r2, [sp, #8]
    68ae:	021b      	lsls	r3, r3, #8
    68b0:	4013      	ands	r3, r2
    68b2:	4a05      	ldr	r2, [pc, #20]	; (68c8 <__swhatbuf_r+0x48>)
    68b4:	189b      	adds	r3, r3, r2
    68b6:	425a      	negs	r2, r3
    68b8:	4153      	adcs	r3, r2
    68ba:	602b      	str	r3, [r5, #0]
    68bc:	2380      	movs	r3, #128	; 0x80
    68be:	00db      	lsls	r3, r3, #3
    68c0:	2000      	movs	r0, #0
    68c2:	6023      	str	r3, [r4, #0]
    68c4:	b010      	add	sp, #64	; 0x40
    68c6:	bd70      	pop	{r4, r5, r6, pc}
    68c8:	ffffe000 	.word	0xffffe000

000068cc <malloc>:
    68cc:	b510      	push	{r4, lr}
    68ce:	4b03      	ldr	r3, [pc, #12]	; (68dc <malloc+0x10>)
    68d0:	0001      	movs	r1, r0
    68d2:	6818      	ldr	r0, [r3, #0]
    68d4:	f000 f84a 	bl	696c <_malloc_r>
    68d8:	bd10      	pop	{r4, pc}
    68da:	46c0      	nop			; (mov r8, r8)
    68dc:	200000b0 	.word	0x200000b0

000068e0 <_free_r>:
    68e0:	b530      	push	{r4, r5, lr}
    68e2:	2900      	cmp	r1, #0
    68e4:	d03e      	beq.n	6964 <_free_r+0x84>
    68e6:	3904      	subs	r1, #4
    68e8:	680b      	ldr	r3, [r1, #0]
    68ea:	2b00      	cmp	r3, #0
    68ec:	da00      	bge.n	68f0 <_free_r+0x10>
    68ee:	18c9      	adds	r1, r1, r3
    68f0:	4a1d      	ldr	r2, [pc, #116]	; (6968 <_free_r+0x88>)
    68f2:	6813      	ldr	r3, [r2, #0]
    68f4:	0014      	movs	r4, r2
    68f6:	2b00      	cmp	r3, #0
    68f8:	d102      	bne.n	6900 <_free_r+0x20>
    68fa:	604b      	str	r3, [r1, #4]
    68fc:	6011      	str	r1, [r2, #0]
    68fe:	e031      	b.n	6964 <_free_r+0x84>
    6900:	428b      	cmp	r3, r1
    6902:	d90d      	bls.n	6920 <_free_r+0x40>
    6904:	680a      	ldr	r2, [r1, #0]
    6906:	1888      	adds	r0, r1, r2
    6908:	4283      	cmp	r3, r0
    690a:	d103      	bne.n	6914 <_free_r+0x34>
    690c:	6818      	ldr	r0, [r3, #0]
    690e:	685b      	ldr	r3, [r3, #4]
    6910:	1882      	adds	r2, r0, r2
    6912:	600a      	str	r2, [r1, #0]
    6914:	604b      	str	r3, [r1, #4]
    6916:	6021      	str	r1, [r4, #0]
    6918:	e024      	b.n	6964 <_free_r+0x84>
    691a:	428a      	cmp	r2, r1
    691c:	d803      	bhi.n	6926 <_free_r+0x46>
    691e:	0013      	movs	r3, r2
    6920:	685a      	ldr	r2, [r3, #4]
    6922:	2a00      	cmp	r2, #0
    6924:	d1f9      	bne.n	691a <_free_r+0x3a>
    6926:	681d      	ldr	r5, [r3, #0]
    6928:	195c      	adds	r4, r3, r5
    692a:	428c      	cmp	r4, r1
    692c:	d10b      	bne.n	6946 <_free_r+0x66>
    692e:	6809      	ldr	r1, [r1, #0]
    6930:	1869      	adds	r1, r5, r1
    6932:	1858      	adds	r0, r3, r1
    6934:	6019      	str	r1, [r3, #0]
    6936:	4282      	cmp	r2, r0
    6938:	d114      	bne.n	6964 <_free_r+0x84>
    693a:	6810      	ldr	r0, [r2, #0]
    693c:	6852      	ldr	r2, [r2, #4]
    693e:	1841      	adds	r1, r0, r1
    6940:	6019      	str	r1, [r3, #0]
    6942:	605a      	str	r2, [r3, #4]
    6944:	e00e      	b.n	6964 <_free_r+0x84>
    6946:	428c      	cmp	r4, r1
    6948:	d902      	bls.n	6950 <_free_r+0x70>
    694a:	230c      	movs	r3, #12
    694c:	6003      	str	r3, [r0, #0]
    694e:	e009      	b.n	6964 <_free_r+0x84>
    6950:	6808      	ldr	r0, [r1, #0]
    6952:	180c      	adds	r4, r1, r0
    6954:	42a2      	cmp	r2, r4
    6956:	d103      	bne.n	6960 <_free_r+0x80>
    6958:	6814      	ldr	r4, [r2, #0]
    695a:	6852      	ldr	r2, [r2, #4]
    695c:	1820      	adds	r0, r4, r0
    695e:	6008      	str	r0, [r1, #0]
    6960:	604a      	str	r2, [r1, #4]
    6962:	6059      	str	r1, [r3, #4]
    6964:	bd30      	pop	{r4, r5, pc}
    6966:	46c0      	nop			; (mov r8, r8)
    6968:	20003d14 	.word	0x20003d14

0000696c <_malloc_r>:
    696c:	2303      	movs	r3, #3
    696e:	b570      	push	{r4, r5, r6, lr}
    6970:	1ccd      	adds	r5, r1, #3
    6972:	439d      	bics	r5, r3
    6974:	3508      	adds	r5, #8
    6976:	0006      	movs	r6, r0
    6978:	2d0c      	cmp	r5, #12
    697a:	d201      	bcs.n	6980 <_malloc_r+0x14>
    697c:	250c      	movs	r5, #12
    697e:	e005      	b.n	698c <_malloc_r+0x20>
    6980:	2d00      	cmp	r5, #0
    6982:	da03      	bge.n	698c <_malloc_r+0x20>
    6984:	230c      	movs	r3, #12
    6986:	2000      	movs	r0, #0
    6988:	6033      	str	r3, [r6, #0]
    698a:	e040      	b.n	6a0e <_malloc_r+0xa2>
    698c:	42a9      	cmp	r1, r5
    698e:	d8f9      	bhi.n	6984 <_malloc_r+0x18>
    6990:	4b1f      	ldr	r3, [pc, #124]	; (6a10 <_malloc_r+0xa4>)
    6992:	681c      	ldr	r4, [r3, #0]
    6994:	001a      	movs	r2, r3
    6996:	0021      	movs	r1, r4
    6998:	2900      	cmp	r1, #0
    699a:	d013      	beq.n	69c4 <_malloc_r+0x58>
    699c:	680b      	ldr	r3, [r1, #0]
    699e:	1b5b      	subs	r3, r3, r5
    69a0:	d40d      	bmi.n	69be <_malloc_r+0x52>
    69a2:	2b0b      	cmp	r3, #11
    69a4:	d902      	bls.n	69ac <_malloc_r+0x40>
    69a6:	600b      	str	r3, [r1, #0]
    69a8:	18cc      	adds	r4, r1, r3
    69aa:	e01e      	b.n	69ea <_malloc_r+0x7e>
    69ac:	428c      	cmp	r4, r1
    69ae:	d102      	bne.n	69b6 <_malloc_r+0x4a>
    69b0:	6863      	ldr	r3, [r4, #4]
    69b2:	6013      	str	r3, [r2, #0]
    69b4:	e01a      	b.n	69ec <_malloc_r+0x80>
    69b6:	684b      	ldr	r3, [r1, #4]
    69b8:	6063      	str	r3, [r4, #4]
    69ba:	000c      	movs	r4, r1
    69bc:	e016      	b.n	69ec <_malloc_r+0x80>
    69be:	000c      	movs	r4, r1
    69c0:	6849      	ldr	r1, [r1, #4]
    69c2:	e7e9      	b.n	6998 <_malloc_r+0x2c>
    69c4:	4c13      	ldr	r4, [pc, #76]	; (6a14 <_malloc_r+0xa8>)
    69c6:	6823      	ldr	r3, [r4, #0]
    69c8:	2b00      	cmp	r3, #0
    69ca:	d103      	bne.n	69d4 <_malloc_r+0x68>
    69cc:	0030      	movs	r0, r6
    69ce:	f000 f823 	bl	6a18 <_sbrk_r>
    69d2:	6020      	str	r0, [r4, #0]
    69d4:	0029      	movs	r1, r5
    69d6:	0030      	movs	r0, r6
    69d8:	f000 f81e 	bl	6a18 <_sbrk_r>
    69dc:	1c43      	adds	r3, r0, #1
    69de:	d0d1      	beq.n	6984 <_malloc_r+0x18>
    69e0:	2303      	movs	r3, #3
    69e2:	1cc4      	adds	r4, r0, #3
    69e4:	439c      	bics	r4, r3
    69e6:	42a0      	cmp	r0, r4
    69e8:	d10a      	bne.n	6a00 <_malloc_r+0x94>
    69ea:	6025      	str	r5, [r4, #0]
    69ec:	0020      	movs	r0, r4
    69ee:	2207      	movs	r2, #7
    69f0:	300b      	adds	r0, #11
    69f2:	1d23      	adds	r3, r4, #4
    69f4:	4390      	bics	r0, r2
    69f6:	1ac3      	subs	r3, r0, r3
    69f8:	d009      	beq.n	6a0e <_malloc_r+0xa2>
    69fa:	425a      	negs	r2, r3
    69fc:	50e2      	str	r2, [r4, r3]
    69fe:	e006      	b.n	6a0e <_malloc_r+0xa2>
    6a00:	1a21      	subs	r1, r4, r0
    6a02:	0030      	movs	r0, r6
    6a04:	f000 f808 	bl	6a18 <_sbrk_r>
    6a08:	1c43      	adds	r3, r0, #1
    6a0a:	d1ee      	bne.n	69ea <_malloc_r+0x7e>
    6a0c:	e7ba      	b.n	6984 <_malloc_r+0x18>
    6a0e:	bd70      	pop	{r4, r5, r6, pc}
    6a10:	20003d14 	.word	0x20003d14
    6a14:	20003d10 	.word	0x20003d10

00006a18 <_sbrk_r>:
    6a18:	2300      	movs	r3, #0
    6a1a:	b570      	push	{r4, r5, r6, lr}
    6a1c:	4c06      	ldr	r4, [pc, #24]	; (6a38 <_sbrk_r+0x20>)
    6a1e:	0005      	movs	r5, r0
    6a20:	0008      	movs	r0, r1
    6a22:	6023      	str	r3, [r4, #0]
    6a24:	f7fd f818 	bl	3a58 <_sbrk>
    6a28:	1c43      	adds	r3, r0, #1
    6a2a:	d103      	bne.n	6a34 <_sbrk_r+0x1c>
    6a2c:	6823      	ldr	r3, [r4, #0]
    6a2e:	2b00      	cmp	r3, #0
    6a30:	d000      	beq.n	6a34 <_sbrk_r+0x1c>
    6a32:	602b      	str	r3, [r5, #0]
    6a34:	bd70      	pop	{r4, r5, r6, pc}
    6a36:	46c0      	nop			; (mov r8, r8)
    6a38:	20004074 	.word	0x20004074

00006a3c <__sread>:
    6a3c:	b570      	push	{r4, r5, r6, lr}
    6a3e:	000c      	movs	r4, r1
    6a40:	250e      	movs	r5, #14
    6a42:	5f49      	ldrsh	r1, [r1, r5]
    6a44:	f000 f892 	bl	6b6c <_read_r>
    6a48:	2800      	cmp	r0, #0
    6a4a:	db03      	blt.n	6a54 <__sread+0x18>
    6a4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6a4e:	181b      	adds	r3, r3, r0
    6a50:	6563      	str	r3, [r4, #84]	; 0x54
    6a52:	e003      	b.n	6a5c <__sread+0x20>
    6a54:	89a2      	ldrh	r2, [r4, #12]
    6a56:	4b02      	ldr	r3, [pc, #8]	; (6a60 <__sread+0x24>)
    6a58:	4013      	ands	r3, r2
    6a5a:	81a3      	strh	r3, [r4, #12]
    6a5c:	bd70      	pop	{r4, r5, r6, pc}
    6a5e:	46c0      	nop			; (mov r8, r8)
    6a60:	ffffefff 	.word	0xffffefff

00006a64 <__swrite>:
    6a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a66:	001f      	movs	r7, r3
    6a68:	898b      	ldrh	r3, [r1, #12]
    6a6a:	0005      	movs	r5, r0
    6a6c:	000c      	movs	r4, r1
    6a6e:	0016      	movs	r6, r2
    6a70:	05db      	lsls	r3, r3, #23
    6a72:	d505      	bpl.n	6a80 <__swrite+0x1c>
    6a74:	230e      	movs	r3, #14
    6a76:	5ec9      	ldrsh	r1, [r1, r3]
    6a78:	2200      	movs	r2, #0
    6a7a:	2302      	movs	r3, #2
    6a7c:	f000 f862 	bl	6b44 <_lseek_r>
    6a80:	89a2      	ldrh	r2, [r4, #12]
    6a82:	4b05      	ldr	r3, [pc, #20]	; (6a98 <__swrite+0x34>)
    6a84:	0028      	movs	r0, r5
    6a86:	4013      	ands	r3, r2
    6a88:	81a3      	strh	r3, [r4, #12]
    6a8a:	0032      	movs	r2, r6
    6a8c:	230e      	movs	r3, #14
    6a8e:	5ee1      	ldrsh	r1, [r4, r3]
    6a90:	003b      	movs	r3, r7
    6a92:	f000 f81f 	bl	6ad4 <_write_r>
    6a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a98:	ffffefff 	.word	0xffffefff

00006a9c <__sseek>:
    6a9c:	b570      	push	{r4, r5, r6, lr}
    6a9e:	000c      	movs	r4, r1
    6aa0:	250e      	movs	r5, #14
    6aa2:	5f49      	ldrsh	r1, [r1, r5]
    6aa4:	f000 f84e 	bl	6b44 <_lseek_r>
    6aa8:	89a3      	ldrh	r3, [r4, #12]
    6aaa:	1c42      	adds	r2, r0, #1
    6aac:	d103      	bne.n	6ab6 <__sseek+0x1a>
    6aae:	4a05      	ldr	r2, [pc, #20]	; (6ac4 <__sseek+0x28>)
    6ab0:	4013      	ands	r3, r2
    6ab2:	81a3      	strh	r3, [r4, #12]
    6ab4:	e004      	b.n	6ac0 <__sseek+0x24>
    6ab6:	2280      	movs	r2, #128	; 0x80
    6ab8:	0152      	lsls	r2, r2, #5
    6aba:	4313      	orrs	r3, r2
    6abc:	81a3      	strh	r3, [r4, #12]
    6abe:	6560      	str	r0, [r4, #84]	; 0x54
    6ac0:	bd70      	pop	{r4, r5, r6, pc}
    6ac2:	46c0      	nop			; (mov r8, r8)
    6ac4:	ffffefff 	.word	0xffffefff

00006ac8 <__sclose>:
    6ac8:	b510      	push	{r4, lr}
    6aca:	230e      	movs	r3, #14
    6acc:	5ec9      	ldrsh	r1, [r1, r3]
    6ace:	f000 f815 	bl	6afc <_close_r>
    6ad2:	bd10      	pop	{r4, pc}

00006ad4 <_write_r>:
    6ad4:	b570      	push	{r4, r5, r6, lr}
    6ad6:	0005      	movs	r5, r0
    6ad8:	0008      	movs	r0, r1
    6ada:	0011      	movs	r1, r2
    6adc:	2200      	movs	r2, #0
    6ade:	4c06      	ldr	r4, [pc, #24]	; (6af8 <_write_r+0x24>)
    6ae0:	6022      	str	r2, [r4, #0]
    6ae2:	001a      	movs	r2, r3
    6ae4:	f7fa fa52 	bl	f8c <_write>
    6ae8:	1c43      	adds	r3, r0, #1
    6aea:	d103      	bne.n	6af4 <_write_r+0x20>
    6aec:	6823      	ldr	r3, [r4, #0]
    6aee:	2b00      	cmp	r3, #0
    6af0:	d000      	beq.n	6af4 <_write_r+0x20>
    6af2:	602b      	str	r3, [r5, #0]
    6af4:	bd70      	pop	{r4, r5, r6, pc}
    6af6:	46c0      	nop			; (mov r8, r8)
    6af8:	20004074 	.word	0x20004074

00006afc <_close_r>:
    6afc:	2300      	movs	r3, #0
    6afe:	b570      	push	{r4, r5, r6, lr}
    6b00:	4c06      	ldr	r4, [pc, #24]	; (6b1c <_close_r+0x20>)
    6b02:	0005      	movs	r5, r0
    6b04:	0008      	movs	r0, r1
    6b06:	6023      	str	r3, [r4, #0]
    6b08:	f7fc ffb8 	bl	3a7c <_close>
    6b0c:	1c43      	adds	r3, r0, #1
    6b0e:	d103      	bne.n	6b18 <_close_r+0x1c>
    6b10:	6823      	ldr	r3, [r4, #0]
    6b12:	2b00      	cmp	r3, #0
    6b14:	d000      	beq.n	6b18 <_close_r+0x1c>
    6b16:	602b      	str	r3, [r5, #0]
    6b18:	bd70      	pop	{r4, r5, r6, pc}
    6b1a:	46c0      	nop			; (mov r8, r8)
    6b1c:	20004074 	.word	0x20004074

00006b20 <_fstat_r>:
    6b20:	2300      	movs	r3, #0
    6b22:	b570      	push	{r4, r5, r6, lr}
    6b24:	4c06      	ldr	r4, [pc, #24]	; (6b40 <_fstat_r+0x20>)
    6b26:	0005      	movs	r5, r0
    6b28:	0008      	movs	r0, r1
    6b2a:	0011      	movs	r1, r2
    6b2c:	6023      	str	r3, [r4, #0]
    6b2e:	f7fc ffa9 	bl	3a84 <_fstat>
    6b32:	1c43      	adds	r3, r0, #1
    6b34:	d103      	bne.n	6b3e <_fstat_r+0x1e>
    6b36:	6823      	ldr	r3, [r4, #0]
    6b38:	2b00      	cmp	r3, #0
    6b3a:	d000      	beq.n	6b3e <_fstat_r+0x1e>
    6b3c:	602b      	str	r3, [r5, #0]
    6b3e:	bd70      	pop	{r4, r5, r6, pc}
    6b40:	20004074 	.word	0x20004074

00006b44 <_lseek_r>:
    6b44:	b570      	push	{r4, r5, r6, lr}
    6b46:	0005      	movs	r5, r0
    6b48:	0008      	movs	r0, r1
    6b4a:	0011      	movs	r1, r2
    6b4c:	2200      	movs	r2, #0
    6b4e:	4c06      	ldr	r4, [pc, #24]	; (6b68 <_lseek_r+0x24>)
    6b50:	6022      	str	r2, [r4, #0]
    6b52:	001a      	movs	r2, r3
    6b54:	f7fc ff9c 	bl	3a90 <_lseek>
    6b58:	1c43      	adds	r3, r0, #1
    6b5a:	d103      	bne.n	6b64 <_lseek_r+0x20>
    6b5c:	6823      	ldr	r3, [r4, #0]
    6b5e:	2b00      	cmp	r3, #0
    6b60:	d000      	beq.n	6b64 <_lseek_r+0x20>
    6b62:	602b      	str	r3, [r5, #0]
    6b64:	bd70      	pop	{r4, r5, r6, pc}
    6b66:	46c0      	nop			; (mov r8, r8)
    6b68:	20004074 	.word	0x20004074

00006b6c <_read_r>:
    6b6c:	b570      	push	{r4, r5, r6, lr}
    6b6e:	0005      	movs	r5, r0
    6b70:	0008      	movs	r0, r1
    6b72:	0011      	movs	r1, r2
    6b74:	2200      	movs	r2, #0
    6b76:	4c06      	ldr	r4, [pc, #24]	; (6b90 <_read_r+0x24>)
    6b78:	6022      	str	r2, [r4, #0]
    6b7a:	001a      	movs	r2, r3
    6b7c:	f7fa f9e6 	bl	f4c <_read>
    6b80:	1c43      	adds	r3, r0, #1
    6b82:	d103      	bne.n	6b8c <_read_r+0x20>
    6b84:	6823      	ldr	r3, [r4, #0]
    6b86:	2b00      	cmp	r3, #0
    6b88:	d000      	beq.n	6b8c <_read_r+0x20>
    6b8a:	602b      	str	r3, [r5, #0]
    6b8c:	bd70      	pop	{r4, r5, r6, pc}
    6b8e:	46c0      	nop			; (mov r8, r8)
    6b90:	20004074 	.word	0x20004074
    6b94:	001e001c 	.word	0x001e001c
    6b98:	20000000 	.word	0x20000000
    6b9c:	00000000 	.word	0x00000000
    6ba0:	0002001c 	.word	0x0002001c
    6ba4:	20000020 	.word	0x20000020
    6ba8:	00000000 	.word	0x00000000
    6bac:	0040001c 	.word	0x0040001c
    6bb0:	20003d18 	.word	0x20003d18
    6bb4:	00000000 	.word	0x00000000
    6bb8:	42000000 	.word	0x42000000
    6bbc:	42000400 	.word	0x42000400
    6bc0:	42000800 	.word	0x42000800
    6bc4:	42000c00 	.word	0x42000c00
    6bc8:	42001000 	.word	0x42001000
    6bcc:	43000400 	.word	0x43000400
    6bd0:	454c4449 	.word	0x454c4449
    6bd4:	00000000 	.word	0x00000000
    6bd8:	0000254c 	.word	0x0000254c
    6bdc:	0000254c 	.word	0x0000254c
    6be0:	0000254c 	.word	0x0000254c
    6be4:	000025ae 	.word	0x000025ae
    6be8:	0000258e 	.word	0x0000258e
    6bec:	000025a8 	.word	0x000025a8
    6bf0:	0000254c 	.word	0x0000254c
    6bf4:	0000254c 	.word	0x0000254c
    6bf8:	000025ae 	.word	0x000025ae
    6bfc:	0000258e 	.word	0x0000258e
    6c00:	20726d54 	.word	0x20726d54
    6c04:	00637653 	.word	0x00637653
    6c08:	0b0a0908 	.word	0x0b0a0908
    6c0c:	00000d0c 	.word	0x00000d0c
    6c10:	00003002 	.word	0x00003002
    6c14:	00003240 	.word	0x00003240
    6c18:	00003240 	.word	0x00003240
    6c1c:	00003240 	.word	0x00003240
    6c20:	00003240 	.word	0x00003240
    6c24:	00003240 	.word	0x00003240
    6c28:	00003240 	.word	0x00003240
    6c2c:	00003240 	.word	0x00003240
    6c30:	00003240 	.word	0x00003240
    6c34:	00003240 	.word	0x00003240
    6c38:	00003240 	.word	0x00003240
    6c3c:	00003240 	.word	0x00003240
    6c40:	00003240 	.word	0x00003240
    6c44:	00003240 	.word	0x00003240
    6c48:	00003240 	.word	0x00003240
    6c4c:	00003240 	.word	0x00003240
    6c50:	00002fea 	.word	0x00002fea
    6c54:	00003240 	.word	0x00003240
    6c58:	00003240 	.word	0x00003240
    6c5c:	00003240 	.word	0x00003240
    6c60:	00003240 	.word	0x00003240
    6c64:	00003240 	.word	0x00003240
    6c68:	00003240 	.word	0x00003240
    6c6c:	00003240 	.word	0x00003240
    6c70:	00003240 	.word	0x00003240
    6c74:	00003240 	.word	0x00003240
    6c78:	00003240 	.word	0x00003240
    6c7c:	00003240 	.word	0x00003240
    6c80:	00003240 	.word	0x00003240
    6c84:	00003240 	.word	0x00003240
    6c88:	00003240 	.word	0x00003240
    6c8c:	00003240 	.word	0x00003240
    6c90:	00002ffa 	.word	0x00002ffa
    6c94:	00003240 	.word	0x00003240
    6c98:	00003240 	.word	0x00003240
    6c9c:	00003240 	.word	0x00003240
    6ca0:	00003240 	.word	0x00003240
    6ca4:	00003240 	.word	0x00003240
    6ca8:	00003240 	.word	0x00003240
    6cac:	00003240 	.word	0x00003240
    6cb0:	00003240 	.word	0x00003240
    6cb4:	00003240 	.word	0x00003240
    6cb8:	00003240 	.word	0x00003240
    6cbc:	00003240 	.word	0x00003240
    6cc0:	00003240 	.word	0x00003240
    6cc4:	00003240 	.word	0x00003240
    6cc8:	00003240 	.word	0x00003240
    6ccc:	00003240 	.word	0x00003240
    6cd0:	00002ff2 	.word	0x00002ff2
    6cd4:	0000300a 	.word	0x0000300a
    6cd8:	00002fd2 	.word	0x00002fd2
    6cdc:	00002fe2 	.word	0x00002fe2
    6ce0:	00002fda 	.word	0x00002fda
    6ce4:	00000002 	.word	0x00000002
    6ce8:	00000003 	.word	0x00000003
    6cec:	00000028 	.word	0x00000028
    6cf0:	00000029 	.word	0x00000029
    6cf4:	00000004 	.word	0x00000004
    6cf8:	00000005 	.word	0x00000005
    6cfc:	00000006 	.word	0x00000006
    6d00:	00000007 	.word	0x00000007
    6d04:	00000020 	.word	0x00000020
    6d08:	00000021 	.word	0x00000021
    6d0c:	00000022 	.word	0x00000022
    6d10:	00000023 	.word	0x00000023
    6d14:	00000024 	.word	0x00000024
    6d18:	00000025 	.word	0x00000025
    6d1c:	00000026 	.word	0x00000026
    6d20:	00000027 	.word	0x00000027
    6d24:	00000008 	.word	0x00000008
    6d28:	00000009 	.word	0x00000009
    6d2c:	0000000a 	.word	0x0000000a
    6d30:	0000000b 	.word	0x0000000b
    6d34:	0000ffff 	.word	0x0000ffff
    6d38:	0000ffff 	.word	0x0000ffff
    6d3c:	0000ffff 	.word	0x0000ffff
    6d40:	0000ffff 	.word	0x0000ffff
    6d44:	000034d2 	.word	0x000034d2
    6d48:	000034ce 	.word	0x000034ce
    6d4c:	000034ce 	.word	0x000034ce
    6d50:	00003530 	.word	0x00003530
    6d54:	00003530 	.word	0x00003530
    6d58:	000034e8 	.word	0x000034e8
    6d5c:	000034d8 	.word	0x000034d8
    6d60:	000034ee 	.word	0x000034ee
    6d64:	0000351e 	.word	0x0000351e
    6d68:	00003e40 	.word	0x00003e40
    6d6c:	00003e40 	.word	0x00003e40
    6d70:	00003e16 	.word	0x00003e16
    6d74:	00003e1c 	.word	0x00003e1c
    6d78:	00003e22 	.word	0x00003e22
    6d7c:	00003e28 	.word	0x00003e28
    6d80:	00003e2e 	.word	0x00003e2e
    6d84:	00003e34 	.word	0x00003e34
    6d88:	00003e3a 	.word	0x00003e3a
    6d8c:	6e69614d 	.word	0x6e69614d
    6d90:	00000000 	.word	0x00000000
    6d94:	54524155 	.word	0x54524155
    6d98:	00000000 	.word	0x00000000
    6d9c:	000052a0 	.word	0x000052a0
    6da0:	0000516e 	.word	0x0000516e
    6da4:	00005274 	.word	0x00005274
    6da8:	00005164 	.word	0x00005164
    6dac:	00005274 	.word	0x00005274
    6db0:	0000527e 	.word	0x0000527e
    6db4:	00005274 	.word	0x00005274
    6db8:	00005164 	.word	0x00005164
    6dbc:	0000516e 	.word	0x0000516e
    6dc0:	0000516e 	.word	0x0000516e
    6dc4:	0000527e 	.word	0x0000527e
    6dc8:	00005164 	.word	0x00005164
    6dcc:	0000515a 	.word	0x0000515a
    6dd0:	0000515a 	.word	0x0000515a
    6dd4:	0000515a 	.word	0x0000515a
    6dd8:	000054d0 	.word	0x000054d0
    6ddc:	000058cc 	.word	0x000058cc
    6de0:	0000578c 	.word	0x0000578c
    6de4:	0000578c 	.word	0x0000578c
    6de8:	0000578a 	.word	0x0000578a
    6dec:	000058a4 	.word	0x000058a4
    6df0:	000058a4 	.word	0x000058a4
    6df4:	00005896 	.word	0x00005896
    6df8:	0000578a 	.word	0x0000578a
    6dfc:	000058a4 	.word	0x000058a4
    6e00:	00005896 	.word	0x00005896
    6e04:	000058a4 	.word	0x000058a4
    6e08:	0000578a 	.word	0x0000578a
    6e0c:	000058ac 	.word	0x000058ac
    6e10:	000058ac 	.word	0x000058ac
    6e14:	000058ac 	.word	0x000058ac
    6e18:	00005aac 	.word	0x00005aac
    6e1c:	00000043 	.word	0x00000043

00006e20 <_global_impure_ptr>:
    6e20:	20000050                                P.. 

00006e24 <__sf_fake_stdin>:
	...

00006e44 <__sf_fake_stdout>:
	...

00006e64 <__sf_fake_stderr>:
	...

00006e84 <_init>:
    6e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e86:	46c0      	nop			; (mov r8, r8)
    6e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6e8a:	bc08      	pop	{r3}
    6e8c:	469e      	mov	lr, r3
    6e8e:	4770      	bx	lr

00006e90 <__init_array_start>:
    6e90:	000000dd 	.word	0x000000dd

00006e94 <_fini>:
    6e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e96:	46c0      	nop			; (mov r8, r8)
    6e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6e9a:	bc08      	pop	{r3}
    6e9c:	469e      	mov	lr, r3
    6e9e:	4770      	bx	lr

00006ea0 <__fini_array_start>:
    6ea0:	000000b5 	.word	0x000000b5
